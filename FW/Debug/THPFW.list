
THPFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  0800d250  0800d250  0001d250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9dc  0800d9dc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9dc  0800d9dc  0001d9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9e4  0800d9e4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9e4  0800d9e4  0001d9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9e8  0800d9e8  0001d9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800d9ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  200001d8  0800dbc4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009c4  0800dbc4  000209c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002070f  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a3d  00000000  00000000  0004095a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c40  00000000  00000000  00045398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015f3  00000000  00000000  00046fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d74  00000000  00000000  000485cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023bd6  00000000  00000000  0007033f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e879b  00000000  00000000  00093f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008834  00000000  00000000  0017c6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00184ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d238 	.word	0x0800d238

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800d238 	.word	0x0800d238

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <ADC_DMA_Start>:
	  printf("ADC 1: %d , ADC 2: %d ADC 3: %d ADC 4: %d ADC 5: %d \r\n", adc_data[0], adc_data[1], adc_data[2], adc_data[3], adc_data[4]);
}


void ADC_DMA_Start()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);                    // ADC calibration
 8000f48:	217f      	movs	r1, #127	; 0x7f
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <ADC_DMA_Start+0x20>)
 8000f4c:	f004 f864 	bl	8005018 <HAL_ADCEx_Calibration_Start>
	  HAL_Delay(10);
 8000f50:	200a      	movs	r0, #10
 8000f52:	f002 fedf 	bl	8003d14 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_data, 5);   // start ADC DMA (1 channel, 5 reads per channel)
 8000f56:	2205      	movs	r2, #5
 8000f58:	4903      	ldr	r1, [pc, #12]	; (8000f68 <ADC_DMA_Start+0x24>)
 8000f5a:	4802      	ldr	r0, [pc, #8]	; (8000f64 <ADC_DMA_Start+0x20>)
 8000f5c:	f003 fa34 	bl	80043c8 <HAL_ADC_Start_DMA>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000470 	.word	0x20000470
 8000f68:	200001f4 	.word	0x200001f4
 8000f6c:	00000000 	.word	0x00000000

08000f70 <GET_MCU_Temp>:

float GET_MCU_Temp()
{
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
	    uint16_t tmp=0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	81fb      	strh	r3, [r7, #14]
	    float temperature;
	    uint16_t cal_temp = *((uint16_t*) ((uint32_t)0x1FFF75A8));
 8000f7a:	4b33      	ldr	r3, [pc, #204]	; (8001048 <GET_MCU_Temp+0xd8>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	817b      	strh	r3, [r7, #10]
   	    uint16_t cal_value = *((uint16_t*) ((uint32_t)0x1FFF75CA));
 8000f80:	4b32      	ldr	r3, [pc, #200]	; (800104c <GET_MCU_Temp+0xdc>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	813b      	strh	r3, [r7, #8]

	  	for(uint8_t i=0; i<5;i+=1)
 8000f86:	2300      	movs	r3, #0
 8000f88:	737b      	strb	r3, [r7, #13]
 8000f8a:	e00a      	b.n	8000fa2 <GET_MCU_Temp+0x32>
	  	{
	  		tmp+=adc_data[i];
 8000f8c:	7b7b      	ldrb	r3, [r7, #13]
 8000f8e:	4a30      	ldr	r2, [pc, #192]	; (8001050 <GET_MCU_Temp+0xe0>)
 8000f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	89fb      	ldrh	r3, [r7, #14]
 8000f98:	4413      	add	r3, r2
 8000f9a:	81fb      	strh	r3, [r7, #14]
	  	for(uint8_t i=0; i<5;i+=1)
 8000f9c:	7b7b      	ldrb	r3, [r7, #13]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	737b      	strb	r3, [r7, #13]
 8000fa2:	7b7b      	ldrb	r3, [r7, #13]
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d9f1      	bls.n	8000f8c <GET_MCU_Temp+0x1c>
	  	}
	  	tmp*=0.2f;
 8000fa8:	89fb      	ldrh	r3, [r7, #14]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001054 <GET_MCU_Temp+0xe4>
 8000fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fbe:	ee17 3a90 	vmov	r3, s15
 8000fc2:	81fb      	strh	r3, [r7, #14]

	  	temperature = ((cal_temp - (float)tmp) * 4.3) / cal_value + 25.0;
 8000fc4:	897b      	ldrh	r3, [r7, #10]
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fdc:	ee17 0a90 	vmov	r0, s15
 8000fe0:	f7ff fab2 	bl	8000548 <__aeabi_f2d>
 8000fe4:	a316      	add	r3, pc, #88	; (adr r3, 8001040 <GET_MCU_Temp+0xd0>)
 8000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fea:	f7ff fb05 	bl	80005f8 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4614      	mov	r4, r2
 8000ff4:	461d      	mov	r5, r3
 8000ff6:	893b      	ldrh	r3, [r7, #8]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa93 	bl	8000524 <__aeabi_i2d>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4620      	mov	r0, r4
 8001004:	4629      	mov	r1, r5
 8001006:	f7ff fc21 	bl	800084c <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <GET_MCU_Temp+0xe8>)
 8001018:	f7ff f938 	bl	800028c <__adddf3>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fdc0 	bl	8000ba8 <__aeabi_d2f>
 8001028:	4603      	mov	r3, r0
 800102a:	607b      	str	r3, [r7, #4]
	  	return temperature;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	ee07 3a90 	vmov	s15, r3
}
 8001032:	eeb0 0a67 	vmov.f32	s0, s15
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bdb0      	pop	{r4, r5, r7, pc}
 800103c:	f3af 8000 	nop.w
 8001040:	33333333 	.word	0x33333333
 8001044:	40113333 	.word	0x40113333
 8001048:	1fff75a8 	.word	0x1fff75a8
 800104c:	1fff75ca 	.word	0x1fff75ca
 8001050:	200001f4 	.word	0x200001f4
 8001054:	3e4ccccd 	.word	0x3e4ccccd
 8001058:	40390000 	.word	0x40390000

0800105c <read_register16>:
	params->oversampling_temperature = BMP280_STANDARD;
	params->oversampling_humidity = BMP280_STANDARD;
	params->standby = BMP280_STANDBY_250;
}

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af04      	add	r7, sp, #16
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	460b      	mov	r3, r1
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001076:	7afb      	ldrb	r3, [r7, #11]
 8001078:	b29a      	uxth	r2, r3
 800107a:	8af9      	ldrh	r1, [r7, #22]
 800107c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	2302      	movs	r3, #2
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	f005 fb01 	bl	8006694 <HAL_I2C_Mem_Read>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10b      	bne.n	80010b0 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001098:	7d7b      	ldrb	r3, [r7, #21]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	7d3b      	ldrb	r3, [r7, #20]
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	801a      	strh	r2, [r3, #0]
		return true;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <read_register16+0x56>
	} else
		return false;
 80010b0:	2300      	movs	r3, #0

}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80010ba:	b590      	push	{r4, r7, lr}
 80010bc:	b08b      	sub	sp, #44	; 0x2c
 80010be:	af04      	add	r7, sp, #16
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	461a      	mov	r2, r3
 80010c6:	460b      	mov	r3, r1
 80010c8:	72fb      	strb	r3, [r7, #11]
 80010ca:	4613      	mov	r3, r2
 80010cc:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010da:	7afb      	ldrb	r3, [r7, #11]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	7abb      	ldrb	r3, [r7, #10]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	8af9      	ldrh	r1, [r7, #22]
 80010e4:	f241 3488 	movw	r4, #5000	; 0x1388
 80010e8:	9402      	str	r4, [sp, #8]
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	f005 facf 	bl	8006694 <HAL_I2C_Mem_Read>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <read_data+0x46>
		return 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	e000      	b.n	8001102 <read_data+0x48>
	else
		return 1;
 8001100:	2301      	movs	r3, #1

}
 8001102:	4618      	mov	r0, r3
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd90      	pop	{r4, r7, pc}

0800110a <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	461a      	mov	r2, r3
 8001116:	2188      	movs	r1, #136	; 0x88
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff9f 	bl	800105c <read_register16>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d06f      	beq.n	8001204 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3302      	adds	r3, #2
 8001128:	461a      	mov	r2, r3
 800112a:	218a      	movs	r1, #138	; 0x8a
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff95 	bl	800105c <read_register16>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d065      	beq.n	8001204 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3304      	adds	r3, #4
 800113c:	461a      	mov	r2, r3
 800113e:	218c      	movs	r1, #140	; 0x8c
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff8b 	bl	800105c <read_register16>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d05b      	beq.n	8001204 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3306      	adds	r3, #6
 8001150:	461a      	mov	r2, r3
 8001152:	218e      	movs	r1, #142	; 0x8e
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff81 	bl	800105c <read_register16>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d051      	beq.n	8001204 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3308      	adds	r3, #8
 8001164:	461a      	mov	r2, r3
 8001166:	2190      	movs	r1, #144	; 0x90
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff77 	bl	800105c <read_register16>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d047      	beq.n	8001204 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	330a      	adds	r3, #10
 8001178:	461a      	mov	r2, r3
 800117a:	2192      	movs	r1, #146	; 0x92
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff6d 	bl	800105c <read_register16>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d03d      	beq.n	8001204 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	330c      	adds	r3, #12
 800118c:	461a      	mov	r2, r3
 800118e:	2194      	movs	r1, #148	; 0x94
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff63 	bl	800105c <read_register16>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d033      	beq.n	8001204 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	330e      	adds	r3, #14
 80011a0:	461a      	mov	r2, r3
 80011a2:	2196      	movs	r1, #150	; 0x96
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff59 	bl	800105c <read_register16>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d029      	beq.n	8001204 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3310      	adds	r3, #16
 80011b4:	461a      	mov	r2, r3
 80011b6:	2198      	movs	r1, #152	; 0x98
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff4f 	bl	800105c <read_register16>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d01f      	beq.n	8001204 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3312      	adds	r3, #18
 80011c8:	461a      	mov	r2, r3
 80011ca:	219a      	movs	r1, #154	; 0x9a
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff45 	bl	800105c <read_register16>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d015      	beq.n	8001204 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3314      	adds	r3, #20
 80011dc:	461a      	mov	r2, r3
 80011de:	219c      	movs	r1, #156	; 0x9c
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff3b 	bl	800105c <read_register16>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00b      	beq.n	8001204 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80011f0:	461a      	mov	r2, r3
 80011f2:	219e      	movs	r1, #158	; 0x9e
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff31 	bl	800105c <read_register16>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <read_calibration_data+0xfa>

		return true;
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <read_calibration_data+0xfc>
	}

	return false;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f103 0218 	add.w	r2, r3, #24
 800121c:	2301      	movs	r3, #1
 800121e:	21a1      	movs	r1, #161	; 0xa1
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff4a 	bl	80010ba <read_data>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d14b      	bne.n	80012c4 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	331a      	adds	r3, #26
 8001230:	461a      	mov	r2, r3
 8001232:	21e1      	movs	r1, #225	; 0xe1
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff11 	bl	800105c <read_register16>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d041      	beq.n	80012c4 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f103 021c 	add.w	r2, r3, #28
 8001246:	2301      	movs	r3, #1
 8001248:	21e3      	movs	r1, #227	; 0xe3
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff35 	bl	80010ba <read_data>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d136      	bne.n	80012c4 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001256:	f107 030e 	add.w	r3, r7, #14
 800125a:	461a      	mov	r2, r3
 800125c:	21e4      	movs	r1, #228	; 0xe4
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fefc 	bl	800105c <read_register16>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d02c      	beq.n	80012c4 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	461a      	mov	r2, r3
 8001270:	21e5      	movs	r1, #229	; 0xe5
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fef2 	bl	800105c <read_register16>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d022      	beq.n	80012c4 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001284:	2301      	movs	r3, #1
 8001286:	21e7      	movs	r1, #231	; 0xe7
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff16 	bl	80010ba <read_data>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d117      	bne.n	80012c4 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	b21b      	sxth	r3, r3
 800129a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800129e:	b21a      	sxth	r2, r3
 80012a0:	89fb      	ldrh	r3, [r7, #14]
 80012a2:	121b      	asrs	r3, r3, #8
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80012b4:	89bb      	ldrh	r3, [r7, #12]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	841a      	strh	r2, [r3, #32]

		return true;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <read_hum_calibration_data+0xb8>
	}

	return false;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b088      	sub	sp, #32
 80012d2:	af04      	add	r7, sp, #16
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	70fb      	strb	r3, [r7, #3]
 80012da:	4613      	mov	r3, r2
 80012dc:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	89f9      	ldrh	r1, [r7, #14]
 80012f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	2301      	movs	r3, #1
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	1cbb      	adds	r3, r7, #2
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	f005 f8b4 	bl	800646c <HAL_I2C_Mem_Write>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <write_register8+0x40>
		return false;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <write_register8+0x42>
	else
		return true;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001326:	2b76      	cmp	r3, #118	; 0x76
 8001328:	d005      	beq.n	8001336 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800132e:	2b77      	cmp	r3, #119	; 0x77
 8001330:	d001      	beq.n	8001336 <bmp280_init+0x1e>

		return false;
 8001332:	2300      	movs	r3, #0
 8001334:	e099      	b.n	800146a <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800133c:	2301      	movs	r3, #1
 800133e:	21d0      	movs	r1, #208	; 0xd0
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff feba 	bl	80010ba <read_data>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <bmp280_init+0x38>
		return false;
 800134c:	2300      	movs	r3, #0
 800134e:	e08c      	b.n	800146a <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001356:	2b58      	cmp	r3, #88	; 0x58
 8001358:	d006      	beq.n	8001368 <bmp280_init+0x50>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001360:	2b60      	cmp	r3, #96	; 0x60
 8001362:	d001      	beq.n	8001368 <bmp280_init+0x50>

		return false;
 8001364:	2300      	movs	r3, #0
 8001366:	e080      	b.n	800146a <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001368:	22b6      	movs	r2, #182	; 0xb6
 800136a:	21e0      	movs	r1, #224	; 0xe0
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ffae 	bl	80012ce <write_register8>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <bmp280_init+0x64>
		return false;
 8001378:	2300      	movs	r3, #0
 800137a:	e076      	b.n	800146a <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800137c:	f107 020c 	add.w	r2, r7, #12
 8001380:	2301      	movs	r3, #1
 8001382:	21f3      	movs	r1, #243	; 0xf3
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fe98 	bl	80010ba <read_data>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f5      	bne.n	800137c <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001390:	7b3b      	ldrb	r3, [r7, #12]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff feb5 	bl	800110a <read_calibration_data>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f083 0301 	eor.w	r3, r3, #1
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d100      	bne.n	80013ae <bmp280_init+0x96>
 80013ac:	e001      	b.n	80013b2 <bmp280_init+0x9a>
		return false;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e05b      	b.n	800146a <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013b8:	2b60      	cmp	r3, #96	; 0x60
 80013ba:	d10a      	bne.n	80013d2 <bmp280_init+0xba>
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff26 	bl	800120e <read_hum_calibration_data>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f083 0301 	eor.w	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <bmp280_init+0xba>
		return false;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e04b      	b.n	800146a <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	795b      	ldrb	r3, [r3, #5]
 80013d6:	015b      	lsls	r3, r3, #5
 80013d8:	b25a      	sxtb	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	785b      	ldrb	r3, [r3, #1]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	461a      	mov	r2, r3
 80013ec:	21f5      	movs	r1, #245	; 0xf5
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff6d 	bl	80012ce <write_register8>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <bmp280_init+0xe6>
		return false;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e035      	b.n	800146a <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d102      	bne.n	800140c <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	78db      	ldrb	r3, [r3, #3]
 8001410:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001412:	b25a      	sxtb	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	789b      	ldrb	r3, [r3, #2]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	b25b      	sxtb	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b25a      	sxtb	r2, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b25b      	sxtb	r3, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800142a:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001432:	2b60      	cmp	r3, #96	; 0x60
 8001434:	d10d      	bne.n	8001452 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	791b      	ldrb	r3, [r3, #4]
 800143a:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800143c:	7b7b      	ldrb	r3, [r7, #13]
 800143e:	461a      	mov	r2, r3
 8001440:	21f2      	movs	r1, #242	; 0xf2
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ff43 	bl	80012ce <write_register8>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <bmp280_init+0x13a>
			return false;
 800144e:	2300      	movs	r3, #0
 8001450:	e00b      	b.n	800146a <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	461a      	mov	r2, r3
 8001456:	21f4      	movs	r1, #244	; 0xf4
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff38 	bl	80012ce <write_register8>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <bmp280_init+0x150>
		return false;
 8001464:	2300      	movs	r3, #0
 8001466:	e000      	b.n	800146a <bmp280_init+0x152>
	}

	return true;
 8001468:	2301      	movs	r3, #1
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <BQ25798_check>:
#define BQ25798_ADDR 0x6B << 1


// Checking
uint8_t BQ25798_check()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	uint8_t res;
	printf("Checking BQ25798 ... ");
 800147a:	481a      	ldr	r0, [pc, #104]	; (80014e4 <BQ25798_check+0x70>)
 800147c:	f009 fedc 	bl	800b238 <iprintf>
	for (int i = 0; i < 10; i++) {
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	e01f      	b.n	80014c6 <BQ25798_check+0x52>
		status = HAL_I2C_IsDeviceReady(&hi2c1, BQ25798_ADDR, 3, 1500);
 8001486:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800148a:	2203      	movs	r2, #3
 800148c:	21d6      	movs	r1, #214	; 0xd6
 800148e:	4816      	ldr	r0, [pc, #88]	; (80014e8 <BQ25798_check+0x74>)
 8001490:	f005 fa1a 	bl	80068c8 <HAL_I2C_IsDeviceReady>
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(100);
 8001498:	2064      	movs	r0, #100	; 0x64
 800149a:	f002 fc3b 	bl	8003d14 <HAL_Delay>
	    if (status == HAL_OK) {
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d107      	bne.n	80014b4 <BQ25798_check+0x40>
	    	printf("OK !\r\n");
 80014a4:	4811      	ldr	r0, [pc, #68]	; (80014ec <BQ25798_check+0x78>)
 80014a6:	f009 ff2d 	bl	800b304 <puts>
	    	BQ25798_set_ADC();
 80014aa:	f000 f823 	bl	80014f4 <BQ25798_set_ADC>
	    	res = OK;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
	        break;
 80014b2:	e00b      	b.n	80014cc <BQ25798_check+0x58>
	    } else {
	    	res = FAULT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
	    	HAL_Delay(500);
 80014b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014bc:	f002 fc2a 	bl	8003d14 <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	3301      	adds	r3, #1
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	2b09      	cmp	r3, #9
 80014ca:	dddc      	ble.n	8001486 <BQ25798_check+0x12>
	    }
	}
	if(res == FAULT) printf("not ready\r\n");
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <BQ25798_check+0x64>
 80014d2:	4807      	ldr	r0, [pc, #28]	; (80014f0 <BQ25798_check+0x7c>)
 80014d4:	f009 ff16 	bl	800b304 <puts>
	return res;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	0800d250 	.word	0x0800d250
 80014e8:	20000540 	.word	0x20000540
 80014ec:	0800d268 	.word	0x0800d268
 80014f0:	0800d270 	.word	0x0800d270

080014f4 <BQ25798_set_ADC>:

void BQ25798_set_ADC()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
	uint8_t reg;
	reg = 0b10000000;
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	71fb      	strb	r3, [r7, #7]
	i2c_write8(&hi2c1, REG2E_ADC_Control, reg, BQ25798_ADDR);
 80014fe:	79fa      	ldrb	r2, [r7, #7]
 8001500:	23d6      	movs	r3, #214	; 0xd6
 8001502:	212e      	movs	r1, #46	; 0x2e
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <BQ25798_set_ADC+0x24>)
 8001506:	f001 fff1 	bl	80034ec <i2c_write8>
	HAL_Delay(1);
 800150a:	2001      	movs	r0, #1
 800150c:	f002 fc02 	bl	8003d14 <HAL_Delay>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000540 	.word	0x20000540

0800151c <BQ25798_Vbat_read>:

uint16_t BQ25798_Vbat_read()
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
	uint16_t value;
    i2c_read16(&hi2c1, REG3B_VBAT_ADC, &value, BQ25798_ADDR);
 8001522:	1dba      	adds	r2, r7, #6
 8001524:	23d6      	movs	r3, #214	; 0xd6
 8001526:	213b      	movs	r1, #59	; 0x3b
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <BQ25798_Vbat_read+0x24>)
 800152a:	f001 ffbd 	bl	80034a8 <i2c_read16>
    return byteswap16(value);
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	4618      	mov	r0, r3
 8001532:	f002 f88f 	bl	8003654 <byteswap16>
 8001536:	4603      	mov	r3, r0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000540 	.word	0x20000540

08001544 <BQ25798_Vsys_read>:

uint16_t BQ25798_Vsys_read()
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
	uint16_t value;
    i2c_read16(&hi2c1, REG3D_VSYS_ADC, &value, BQ25798_ADDR);
 800154a:	1dba      	adds	r2, r7, #6
 800154c:	23d6      	movs	r3, #214	; 0xd6
 800154e:	213d      	movs	r1, #61	; 0x3d
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <BQ25798_Vsys_read+0x24>)
 8001552:	f001 ffa9 	bl	80034a8 <i2c_read16>
    return byteswap16(value);
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	4618      	mov	r0, r3
 800155a:	f002 f87b 	bl	8003654 <byteswap16>
 800155e:	4603      	mov	r3, r0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000540 	.word	0x20000540

0800156c <_write>:

static char clibuf[32];
static int cliptr;

int _write(int file, char *ptr, int len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, len+1);  // uart1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	b29a      	uxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3301      	adds	r3, #1
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	4804      	ldr	r0, [pc, #16]	; (8001594 <_write+0x28>)
 8001584:	f007 fe7e 	bl	8009284 <HAL_UART_Transmit>
    return len;
 8001588:	687b      	ldr	r3, [r7, #4]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000688 	.word	0x20000688

08001598 <HAL_UART_RxCpltCallback>:
{
    HAL_UART_Transmit(&huart1, &ch, 1, 2);  // debug uart
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <HAL_UART_RxCpltCallback+0x38>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d105      	bne.n	80015b4 <HAL_UART_RxCpltCallback+0x1c>
 80015a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ac:	4909      	ldr	r1, [pc, #36]	; (80015d4 <HAL_UART_RxCpltCallback+0x3c>)
 80015ae:	4808      	ldr	r0, [pc, #32]	; (80015d0 <HAL_UART_RxCpltCallback+0x38>)
 80015b0:	f007 fefc 	bl	80093ac <HAL_UART_Receive_IT>
	if(huart == &huart2) HAL_UART_Receive_IT(&huart2, sim_rx_buf, SIM_BUF_SIZE); // Interrupt start Uart2 RX
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_UART_RxCpltCallback+0x40>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d105      	bne.n	80015c8 <HAL_UART_RxCpltCallback+0x30>
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	4906      	ldr	r1, [pc, #24]	; (80015dc <HAL_UART_RxCpltCallback+0x44>)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_UART_RxCpltCallback+0x40>)
 80015c4:	f007 fef2 	bl	80093ac <HAL_UART_Receive_IT>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000688 	.word	0x20000688
 80015d4:	20000200 	.word	0x20000200
 80015d8:	2000070c 	.word	0x2000070c
 80015dc:	20000404 	.word	0x20000404

080015e0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    HAL_UART_RxCpltCallback(huart);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ffd5 	bl	8001598 <HAL_UART_RxCpltCallback>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <UART_has_char>:

uint16_t UART_has_char()      // Return number of bytes in buffer
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
    return (huart1.RxXferSize-huart1.RxXferCount+DEBUG_BUF_SIZE-debug_rxtail) % DEBUG_BUF_SIZE;
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <UART_has_char+0x3c>)
 80015fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001602:	461a      	mov	r2, r3
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <UART_has_char+0x3c>)
 8001606:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800160a:	b29b      	uxth	r3, r3
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <UART_has_char+0x40>)
 8001614:	8812      	ldrh	r2, [r2, #0]
 8001616:	1a9b      	subs	r3, r3, r2
 8001618:	425a      	negs	r2, r3
 800161a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800161e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001622:	bf58      	it	pl
 8001624:	4253      	negpl	r3, r2
 8001626:	b29b      	uxth	r3, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000688 	.word	0x20000688
 8001638:	20000400 	.word	0x20000400

0800163c <UART_receive>:

uint8_t UART_receive()       // Receive byte from buffer
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
    uint8_t tmp = debug_rx_buf[debug_rxtail++];
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <UART_receive+0x38>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	b291      	uxth	r1, r2
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <UART_receive+0x38>)
 800164c:	8011      	strh	r1, [r2, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <UART_receive+0x3c>)
 8001652:	5c9b      	ldrb	r3, [r3, r2]
 8001654:	71fb      	strb	r3, [r7, #7]
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <UART_receive+0x38>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800165e:	d302      	bcc.n	8001666 <UART_receive+0x2a>
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <UART_receive+0x38>)
 8001662:	2200      	movs	r2, #0
 8001664:	801a      	strh	r2, [r3, #0]
    return tmp;
 8001666:	79fb      	ldrb	r3, [r7, #7]
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	20000400 	.word	0x20000400
 8001678:	20000200 	.word	0x20000200

0800167c <find>:

// string functions

char * find(const char *arg2)							// find token in cmdline
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	int i,j,k;
	for(i=0; clibuf[i]; i++)
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e031      	b.n	80016ee <find+0x72>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	e011      	b.n	80016b8 <find+0x3c>
			if(!arg2[k+1]) return (clibuf+(j+1));
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3301      	adds	r3, #1
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d104      	bne.n	80016ac <find+0x30>
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	3301      	adds	r3, #1
 80016a6:	4a18      	ldr	r2, [pc, #96]	; (8001708 <find+0x8c>)
 80016a8:	4413      	add	r3, r2
 80016aa:	e027      	b.n	80016fc <find+0x80>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	3301      	adds	r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	3301      	adds	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	4a13      	ldr	r2, [pc, #76]	; (8001708 <find+0x8c>)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4413      	add	r3, r2
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	72fb      	strb	r3, [r7, #11]
 80016c2:	7afb      	ldrb	r3, [r7, #11]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a11      	ldr	r2, [pc, #68]	; (800170c <find+0x90>)
 80016c8:	4413      	add	r3, r2
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d102      	bne.n	80016da <find+0x5e>
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	3320      	adds	r3, #32
 80016d8:	e000      	b.n	80016dc <find+0x60>
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	440a      	add	r2, r1
 80016e2:	7812      	ldrb	r2, [r2, #0]
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d0d5      	beq.n	8001694 <find+0x18>
	for(i=0; clibuf[i]; i++)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	4a06      	ldr	r2, [pc, #24]	; (8001708 <find+0x8c>)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	4413      	add	r3, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1c7      	bne.n	800168a <find+0xe>
	return NULL;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	20000424 	.word	0x20000424
 800170c:	0800d66c 	.word	0x0800d66c

08001710 <CLI>:
    }
    *val = tmp;
    return p;
}

void CLI() {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
    int len = UART_has_char();
 8001716:	f7ff ff6f 	bl	80015f8 <UART_has_char>
 800171a:	4603      	mov	r3, r0
 800171c:	603b      	str	r3, [r7, #0]
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00f      	beq.n	8001744 <CLI+0x34>
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	e008      	b.n	800173c <CLI+0x2c>
 800172a:	f7ff ff87 	bl	800163c <UART_receive>
 800172e:	4603      	mov	r3, r0
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f80b 	bl	800174c <CLI_proc>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3301      	adds	r3, #1
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	dbf2      	blt.n	800172a <CLI+0x1a>
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <CLI_proc>:

void CLI_proc(char ch)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
	char *p;
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 8001756:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <CLI_proc+0xc8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b1f      	cmp	r3, #31
 800175c:	d807      	bhi.n	800176e <CLI_proc+0x22>
 800175e:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <CLI_proc+0xc8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	492b      	ldr	r1, [pc, #172]	; (8001814 <CLI_proc+0xc8>)
 8001766:	600a      	str	r2, [r1, #0]
 8001768:	492b      	ldr	r1, [pc, #172]	; (8001818 <CLI_proc+0xcc>)
 800176a:	79fa      	ldrb	r2, [r7, #7]
 800176c:	54ca      	strb	r2, [r1, r3]
	if(ch == 10)	// LF
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b0a      	cmp	r3, #10
 8001772:	d14b      	bne.n	800180c <CLI_proc+0xc0>
	{
	    if(clibuf[cliptr-1] == 13) cliptr--;
 8001774:	4b27      	ldr	r3, [pc, #156]	; (8001814 <CLI_proc+0xc8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3b01      	subs	r3, #1
 800177a:	4a27      	ldr	r2, [pc, #156]	; (8001818 <CLI_proc+0xcc>)
 800177c:	5cd3      	ldrb	r3, [r2, r3]
 800177e:	2b0d      	cmp	r3, #13
 8001780:	d104      	bne.n	800178c <CLI_proc+0x40>
 8001782:	4b24      	ldr	r3, [pc, #144]	; (8001814 <CLI_proc+0xc8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	3b01      	subs	r3, #1
 8001788:	4a22      	ldr	r2, [pc, #136]	; (8001814 <CLI_proc+0xc8>)
 800178a:	6013      	str	r3, [r2, #0]
		memset(clibuf+cliptr, 0, sizeof(clibuf)-cliptr);
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <CLI_proc+0xc8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <CLI_proc+0xcc>)
 8001794:	4413      	add	r3, r2
 8001796:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <CLI_proc+0xc8>)
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	f1c2 0220 	rsb	r2, r2, #32
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f009 fe8f 	bl	800b4c4 <memset>
		cliptr = 0;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <CLI_proc+0xc8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
// Main commands ------------------------------------------------------------------------------
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{help(); return;}
 80017ac:	481b      	ldr	r0, [pc, #108]	; (800181c <CLI_proc+0xd0>)
 80017ae:	f7ff ff65 	bl	800167c <find>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <CLI_proc+0xd4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d006      	beq.n	80017c8 <CLI_proc+0x7c>
 80017ba:	481a      	ldr	r0, [pc, #104]	; (8001824 <CLI_proc+0xd8>)
 80017bc:	f7ff ff5e 	bl	800167c <find>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a19      	ldr	r2, [pc, #100]	; (8001828 <CLI_proc+0xdc>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d102      	bne.n	80017ce <CLI_proc+0x82>
 80017c8:	f000 f83e 	bl	8001848 <help>
 80017cc:	e01e      	b.n	800180c <CLI_proc+0xc0>
		if(find("cyclic")==clibuf+6) {cyclic = !cyclic; return;}
 80017ce:	4817      	ldr	r0, [pc, #92]	; (800182c <CLI_proc+0xe0>)
 80017d0:	f7ff ff54 	bl	800167c <find>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a16      	ldr	r2, [pc, #88]	; (8001830 <CLI_proc+0xe4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d10a      	bne.n	80017f2 <CLI_proc+0xa6>
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <CLI_proc+0xe8>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	bf0c      	ite	eq
 80017e4:	2301      	moveq	r3, #1
 80017e6:	2300      	movne	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <CLI_proc+0xe8>)
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e00c      	b.n	800180c <CLI_proc+0xc0>
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 80017f2:	4811      	ldr	r0, [pc, #68]	; (8001838 <CLI_proc+0xec>)
 80017f4:	f7ff ff42 	bl	800167c <find>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <CLI_proc+0xf0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d105      	bne.n	800180c <CLI_proc+0xc0>
 8001800:	22a0      	movs	r2, #160	; 0xa0
 8001802:	2138      	movs	r1, #56	; 0x38
 8001804:	480e      	ldr	r0, [pc, #56]	; (8001840 <CLI_proc+0xf4>)
 8001806:	f001 fee5 	bl	80035d4 <i2c_scan>
 800180a:	bf00      	nop
//                return;
//            }
//
//        }
	}
}
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000444 	.word	0x20000444
 8001818:	20000424 	.word	0x20000424
 800181c:	0800d2a0 	.word	0x0800d2a0
 8001820:	20000425 	.word	0x20000425
 8001824:	0800d2a4 	.word	0x0800d2a4
 8001828:	20000428 	.word	0x20000428
 800182c:	0800d2ac 	.word	0x0800d2ac
 8001830:	2000042a 	.word	0x2000042a
 8001834:	20000000 	.word	0x20000000
 8001838:	0800d2b4 	.word	0x0800d2b4
 800183c:	2000042b 	.word	0x2000042b
 8001840:	20000594 	.word	0x20000594
 8001844:	00000000 	.word	0x00000000

08001848 <help>:

void help()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af02      	add	r7, sp, #8
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 800184e:	a331      	add	r3, pc, #196	; (adr r3, 8001914 <help+0xcc>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	e9cd 2300 	strd	r2, r3, [sp]
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <help+0xa0>)
 800185e:	4823      	ldr	r0, [pc, #140]	; (80018ec <help+0xa4>)
 8001860:	f009 fcea 	bl	800b238 <iprintf>
	printf("Charger state : ");
 8001864:	4822      	ldr	r0, [pc, #136]	; (80018f0 <help+0xa8>)
 8001866:	f009 fce7 	bl	800b238 <iprintf>
	switch (charger_state)
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <help+0xac>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d81a      	bhi.n	80018a8 <help+0x60>
 8001872:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <help+0x30>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	08001889 	.word	0x08001889
 800187c:	08001891 	.word	0x08001891
 8001880:	08001899 	.word	0x08001899
 8001884:	080018a1 	.word	0x080018a1
	{
	case 0:
		printf("FAULT\r\n");
 8001888:	481b      	ldr	r0, [pc, #108]	; (80018f8 <help+0xb0>)
 800188a:	f009 fd3b 	bl	800b304 <puts>
		break;
 800188e:	e00b      	b.n	80018a8 <help+0x60>
	case 1:
		printf("OK\r\n");
 8001890:	481a      	ldr	r0, [pc, #104]	; (80018fc <help+0xb4>)
 8001892:	f009 fd37 	bl	800b304 <puts>
		break;
 8001896:	e007      	b.n	80018a8 <help+0x60>
	case 2:
		printf("No charging ...\r\n");
 8001898:	4819      	ldr	r0, [pc, #100]	; (8001900 <help+0xb8>)
 800189a:	f009 fd33 	bl	800b304 <puts>
		break;
 800189e:	e003      	b.n	80018a8 <help+0x60>
	case 3:
		printf("Charging ...\r\n");
 80018a0:	4818      	ldr	r0, [pc, #96]	; (8001904 <help+0xbc>)
 80018a2:	f009 fd2f 	bl	800b304 <puts>
		break;
 80018a6:	bf00      	nop
	}
	printf("MCU Temp: %3.1f [degC]\r\n", GET_MCU_Temp());
 80018a8:	f7ff fb62 	bl	8000f70 <GET_MCU_Temp>
 80018ac:	ee10 3a10 	vmov	r3, s0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe49 	bl	8000548 <__aeabi_f2d>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4813      	ldr	r0, [pc, #76]	; (8001908 <help+0xc0>)
 80018bc:	f009 fcbc 	bl	800b238 <iprintf>
	printf("VBAT: %u [mV]  ", BQ25798_Vbat_read());
 80018c0:	f7ff fe2c 	bl	800151c <BQ25798_Vbat_read>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4619      	mov	r1, r3
 80018c8:	4810      	ldr	r0, [pc, #64]	; (800190c <help+0xc4>)
 80018ca:	f009 fcb5 	bl	800b238 <iprintf>
	printf("VSYS: %u [mV]  \r\n", BQ25798_Vsys_read());
 80018ce:	f7ff fe39 	bl	8001544 <BQ25798_Vsys_read>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4619      	mov	r1, r3
 80018d6:	480e      	ldr	r0, [pc, #56]	; (8001910 <help+0xc8>)
 80018d8:	f009 fcae 	bl	800b238 <iprintf>
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	f3af 8000 	nop.w
 80018e8:	3ff00000 	.word	0x3ff00000
 80018ec:	0800d2bc 	.word	0x0800d2bc
 80018f0:	0800d2e0 	.word	0x0800d2e0
 80018f4:	20000790 	.word	0x20000790
 80018f8:	0800d2f4 	.word	0x0800d2f4
 80018fc:	0800d2fc 	.word	0x0800d2fc
 8001900:	0800d300 	.word	0x0800d300
 8001904:	0800d314 	.word	0x0800d314
 8001908:	0800d324 	.word	0x0800d324
 800190c:	0800d340 	.word	0x0800d340
 8001910:	0800d350 	.word	0x0800d350
 8001914:	a0000000 	.word	0xa0000000
 8001918:	3fc99999 	.word	0x3fc99999

0800191c <DPS368_check>:

DPS_coeff_t DPS_coef;
volatile int32_t Kt_coef, Kp_coef;

uint8_t DPS368_check()
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
	uint8_t value;
	TCA9543A_SelectChannel(2);
 8001922:	2002      	movs	r0, #2
 8001924:	f001 feac 	bl	8003680 <TCA9543A_SelectChannel>
	HAL_Delay(1);
 8001928:	2001      	movs	r0, #1
 800192a:	f002 f9f3 	bl	8003d14 <HAL_Delay>
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, DPS368_ADDR, 3, 150);
 800192e:	2396      	movs	r3, #150	; 0x96
 8001930:	2203      	movs	r2, #3
 8001932:	21ee      	movs	r1, #238	; 0xee
 8001934:	4814      	ldr	r0, [pc, #80]	; (8001988 <DPS368_check+0x6c>)
 8001936:	f004 ffc7 	bl	80068c8 <HAL_I2C_IsDeviceReady>
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 800193e:	2064      	movs	r0, #100	; 0x64
 8001940:	f002 f9e8 	bl	8003d14 <HAL_Delay>
	if (status == HAL_OK) {
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d115      	bne.n	8001976 <DPS368_check+0x5a>
		i2c_read8(&hi2c2, DPS368_REG_ID, &value, DPS368_ADDR);
 800194a:	1dba      	adds	r2, r7, #6
 800194c:	23ee      	movs	r3, #238	; 0xee
 800194e:	210d      	movs	r1, #13
 8001950:	480d      	ldr	r0, [pc, #52]	; (8001988 <DPS368_check+0x6c>)
 8001952:	f001 fd87 	bl	8003464 <i2c_read8>
		TCA9543A_SelectChannel(0);
 8001956:	2000      	movs	r0, #0
 8001958:	f001 fe92 	bl	8003680 <TCA9543A_SelectChannel>
		if(value == DPS368_ID_CHK) {printf("DPS368 OK\r\n"); return 1;} else {printf("NOT DPS368\r\n"); return 0;}
 800195c:	79bb      	ldrb	r3, [r7, #6]
 800195e:	2b10      	cmp	r3, #16
 8001960:	d104      	bne.n	800196c <DPS368_check+0x50>
 8001962:	480a      	ldr	r0, [pc, #40]	; (800198c <DPS368_check+0x70>)
 8001964:	f009 fcce 	bl	800b304 <puts>
 8001968:	2301      	movs	r3, #1
 800196a:	e008      	b.n	800197e <DPS368_check+0x62>
 800196c:	4808      	ldr	r0, [pc, #32]	; (8001990 <DPS368_check+0x74>)
 800196e:	f009 fcc9 	bl	800b304 <puts>
 8001972:	2300      	movs	r3, #0
 8001974:	e003      	b.n	800197e <DPS368_check+0x62>
	} else {printf("DPS368 FAILED\r\n"); return 0;}
 8001976:	4807      	ldr	r0, [pc, #28]	; (8001994 <DPS368_check+0x78>)
 8001978:	f009 fcc4 	bl	800b304 <puts>
 800197c:	2300      	movs	r3, #0
	return 0;
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000594 	.word	0x20000594
 800198c:	0800d364 	.word	0x0800d364
 8001990:	0800d370 	.word	0x0800d370
 8001994:	0800d37c 	.word	0x0800d37c

08001998 <getTwosComplement>:

void getTwosComplement(int32_t *raw, uint8_t length)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
    if (*raw & ((uint32_t)1 << (length - 1)))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <getTwosComplement+0x38>
    {
        *raw -= (uint32_t)1 << length;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4619      	mov	r1, r3
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	2201      	movs	r2, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	1acb      	subs	r3, r1, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	601a      	str	r2, [r3, #0]
    }
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <DPS368_read_coeff>:


void DPS368_read_coeff()
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af04      	add	r7, sp, #16
	uint8_t regs[18];
	SET_DPS368();
 80019e2:	f001 fe91 	bl	8003708 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x10, I2C_MEMADD_SIZE_8BIT, regs, 18, 250);
 80019e6:	23fa      	movs	r3, #250	; 0xfa
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	2312      	movs	r3, #18
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2301      	movs	r3, #1
 80019f4:	2210      	movs	r2, #16
 80019f6:	21ee      	movs	r1, #238	; 0xee
 80019f8:	4841      	ldr	r0, [pc, #260]	; (8001b00 <DPS368_read_coeff+0x124>)
 80019fa:	f004 fe4b 	bl	8006694 <HAL_I2C_Mem_Read>
//	for(uint8_t i=0; i<19;i++){
//		printf("Coef %d : %#x\r\n",i,regs[i]);
//	}
	UNSET_BME_DPS();
 80019fe:	f001 fe8a 	bl	8003716 <UNSET_BME_DPS>
	DPS_coef.C0 = ((uint32_t)regs[0] << 4) | (((uint32_t)regs[1] >> 4) & 0x0F);
 8001a02:	793b      	ldrb	r3, [r7, #4]
 8001a04:	011a      	lsls	r2, r3, #4
 8001a06:	797b      	ldrb	r3, [r7, #5]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	4313      	orrs	r3, r2
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <DPS368_read_coeff+0x128>)
 8001a16:	601a      	str	r2, [r3, #0]
    getTwosComplement(&DPS_coef.C0, 12);
 8001a18:	210c      	movs	r1, #12
 8001a1a:	483a      	ldr	r0, [pc, #232]	; (8001b04 <DPS368_read_coeff+0x128>)
 8001a1c:	f7ff ffbc 	bl	8001998 <getTwosComplement>
    // c0 is only used as c0*0.5, so c0_half is calculated immediately
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 8001a20:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <DPS368_read_coeff+0x128>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <DPS368_read_coeff+0x128>)
 8001a2a:	601a      	str	r2, [r3, #0]

    // now do the same thing for all other coefficients
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 8001a2c:	797b      	ldrb	r3, [r7, #5]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001a34:	79ba      	ldrb	r2, [r7, #6]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <DPS368_read_coeff+0x128>)
 8001a3c:	605a      	str	r2, [r3, #4]
    getTwosComplement(&DPS_coef.C1, 12);
 8001a3e:	210c      	movs	r1, #12
 8001a40:	4831      	ldr	r0, [pc, #196]	; (8001b08 <DPS368_read_coeff+0x12c>)
 8001a42:	f7ff ffa9 	bl	8001998 <getTwosComplement>
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	031a      	lsls	r2, r3, #12
 8001a4a:	7a3b      	ldrb	r3, [r7, #8]
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	7a7b      	ldrb	r3, [r7, #9]
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <DPS368_read_coeff+0x128>)
 8001a60:	609a      	str	r2, [r3, #8]
    getTwosComplement(&DPS_coef.C00, 20);
 8001a62:	2114      	movs	r1, #20
 8001a64:	4829      	ldr	r0, [pc, #164]	; (8001b0c <DPS368_read_coeff+0x130>)
 8001a66:	f7ff ff97 	bl	8001998 <getTwosComplement>
    DPS_coef.C10 = (((uint32_t)regs[5] & 0x0F) << 16) | ((uint32_t)regs[6] << 8) | (uint32_t)regs[7];
 8001a6a:	7a7b      	ldrb	r3, [r7, #9]
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001a72:	7abb      	ldrb	r3, [r7, #10]
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	4313      	orrs	r3, r2
 8001a78:	7afa      	ldrb	r2, [r7, #11]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <DPS368_read_coeff+0x128>)
 8001a80:	60da      	str	r2, [r3, #12]
    getTwosComplement(&DPS_coef.C10, 20);
 8001a82:	2114      	movs	r1, #20
 8001a84:	4822      	ldr	r0, [pc, #136]	; (8001b10 <DPS368_read_coeff+0x134>)
 8001a86:	f7ff ff87 	bl	8001998 <getTwosComplement>

    DPS_coef.C01 = ((uint32_t)regs[8] << 8) | (uint32_t)regs[9];
 8001a8a:	7b3b      	ldrb	r3, [r7, #12]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	7b7a      	ldrb	r2, [r7, #13]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <DPS368_read_coeff+0x128>)
 8001a96:	611a      	str	r2, [r3, #16]
    getTwosComplement(&DPS_coef.C01, 16);
 8001a98:	2110      	movs	r1, #16
 8001a9a:	481e      	ldr	r0, [pc, #120]	; (8001b14 <DPS368_read_coeff+0x138>)
 8001a9c:	f7ff ff7c 	bl	8001998 <getTwosComplement>

    DPS_coef.C11 = ((uint32_t)regs[10] << 8) | (uint32_t)regs[11];
 8001aa0:	7bbb      	ldrb	r3, [r7, #14]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <DPS368_read_coeff+0x128>)
 8001aac:	615a      	str	r2, [r3, #20]
    getTwosComplement(&DPS_coef.C11, 16);
 8001aae:	2110      	movs	r1, #16
 8001ab0:	4819      	ldr	r0, [pc, #100]	; (8001b18 <DPS368_read_coeff+0x13c>)
 8001ab2:	f7ff ff71 	bl	8001998 <getTwosComplement>
    DPS_coef.C20 = ((uint32_t)regs[12] << 8) | (uint32_t)regs[13];
 8001ab6:	7c3b      	ldrb	r3, [r7, #16]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	7c7a      	ldrb	r2, [r7, #17]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <DPS368_read_coeff+0x128>)
 8001ac2:	619a      	str	r2, [r3, #24]
    getTwosComplement(&DPS_coef.C20, 16);
 8001ac4:	2110      	movs	r1, #16
 8001ac6:	4815      	ldr	r0, [pc, #84]	; (8001b1c <DPS368_read_coeff+0x140>)
 8001ac8:	f7ff ff66 	bl	8001998 <getTwosComplement>
    DPS_coef.C21 = ((uint32_t)regs[14] << 8) | (uint32_t)regs[15];
 8001acc:	7cbb      	ldrb	r3, [r7, #18]
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	7cfa      	ldrb	r2, [r7, #19]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <DPS368_read_coeff+0x128>)
 8001ad8:	61da      	str	r2, [r3, #28]
    getTwosComplement(&DPS_coef.C21, 16);
 8001ada:	2110      	movs	r1, #16
 8001adc:	4810      	ldr	r0, [pc, #64]	; (8001b20 <DPS368_read_coeff+0x144>)
 8001ade:	f7ff ff5b 	bl	8001998 <getTwosComplement>
    DPS_coef.C30 = ((uint32_t)regs[16] << 8) | (uint32_t)regs[17];
 8001ae2:	7d3b      	ldrb	r3, [r7, #20]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	7d7a      	ldrb	r2, [r7, #21]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <DPS368_read_coeff+0x128>)
 8001aee:	621a      	str	r2, [r3, #32]
    getTwosComplement(&DPS_coef.C30, 16);
 8001af0:	2110      	movs	r1, #16
 8001af2:	480c      	ldr	r0, [pc, #48]	; (8001b24 <DPS368_read_coeff+0x148>)
 8001af4:	f7ff ff50 	bl	8001998 <getTwosComplement>
//    printf("C0: %ld   C1: %ld\r\n",DPS_coef.C0,DPS_coef.C1);
//    printf("C00: %ld   C01: %ld\r\n",DPS_coef.C00,DPS_coef.C01);
//    printf("C10: %ld   C11: %ld\r\n",DPS_coef.C10,DPS_coef.C11);
//    printf("C20: %ld   C21: %ld\r\n",DPS_coef.C20,DPS_coef.C21);
//    printf("C30: %ld\r\n",DPS_coef.C30);
}
 8001af8:	bf00      	nop
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000594 	.word	0x20000594
 8001b04:	20000448 	.word	0x20000448
 8001b08:	2000044c 	.word	0x2000044c
 8001b0c:	20000450 	.word	0x20000450
 8001b10:	20000454 	.word	0x20000454
 8001b14:	20000458 	.word	0x20000458
 8001b18:	2000045c 	.word	0x2000045c
 8001b1c:	20000460 	.word	0x20000460
 8001b20:	20000464 	.word	0x20000464
 8001b24:	20000468 	.word	0x20000468

08001b28 <DPS368_fifo>:
	printbinaryMSB(reg);
//	UNSET_BME_DPS();
}

void DPS368_fifo(uint8_t endis)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af04      	add	r7, sp, #16
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	SET_DPS368();
 8001b32:	f001 fde9 	bl	8003708 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8001b36:	23fa      	movs	r3, #250	; 0xfa
 8001b38:	9302      	str	r3, [sp, #8]
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	f107 030f 	add.w	r3, r7, #15
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2301      	movs	r3, #1
 8001b46:	2209      	movs	r2, #9
 8001b48:	21ee      	movs	r1, #238	; 0xee
 8001b4a:	4810      	ldr	r0, [pc, #64]	; (8001b8c <DPS368_fifo+0x64>)
 8001b4c:	f004 fda2 	bl	8006694 <HAL_I2C_Mem_Read>
//	printf("(fifo) CFG REG READ (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	setBit(&reg,1,endis);
 8001b50:	79fa      	ldrb	r2, [r7, #7]
 8001b52:	f107 030f 	add.w	r3, r7, #15
 8001b56:	2101      	movs	r1, #1
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 fceb 	bl	8003534 <setBit>
//	printf("SET FIFO EN\r\n");
//	printf("(fifo) CFG REG WRITE (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8001b5e:	23fa      	movs	r3, #250	; 0xfa
 8001b60:	9302      	str	r3, [sp, #8]
 8001b62:	2301      	movs	r3, #1
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	f107 030f 	add.w	r3, r7, #15
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	2209      	movs	r2, #9
 8001b70:	21ee      	movs	r1, #238	; 0xee
 8001b72:	4806      	ldr	r0, [pc, #24]	; (8001b8c <DPS368_fifo+0x64>)
 8001b74:	f004 fc7a 	bl	800646c <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f002 f8cb 	bl	8003d14 <HAL_Delay>
	UNSET_BME_DPS();
 8001b7e:	f001 fdca 	bl	8003716 <UNSET_BME_DPS>
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000594 	.word	0x20000594

08001b90 <DPS368_conf_int>:

void DPS368_conf_int(uint8_t ints)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af04      	add	r7, sp, #16
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	SET_DPS368();
 8001b9a:	f001 fdb5 	bl	8003708 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8001b9e:	23fa      	movs	r3, #250	; 0xfa
 8001ba0:	9302      	str	r3, [sp, #8]
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	f107 030f 	add.w	r3, r7, #15
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2301      	movs	r3, #1
 8001bae:	2209      	movs	r2, #9
 8001bb0:	21ee      	movs	r1, #238	; 0xee
 8001bb2:	4810      	ldr	r0, [pc, #64]	; (8001bf4 <DPS368_conf_int+0x64>)
 8001bb4:	f004 fd6e 	bl	8006694 <HAL_I2C_Mem_Read>
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	modifyRegister(&reg, 0xF0, ints);
 8001bb8:	79fa      	ldrb	r2, [r7, #7]
 8001bba:	f107 030f 	add.w	r3, r7, #15
 8001bbe:	21f0      	movs	r1, #240	; 0xf0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f001 fce6 	bl	8003592 <modifyRegister>
//	printf("SET INT \r\n");
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8001bc6:	23fa      	movs	r3, #250	; 0xfa
 8001bc8:	9302      	str	r3, [sp, #8]
 8001bca:	2301      	movs	r3, #1
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	f107 030f 	add.w	r3, r7, #15
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	2209      	movs	r2, #9
 8001bd8:	21ee      	movs	r1, #238	; 0xee
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <DPS368_conf_int+0x64>)
 8001bdc:	f004 fc46 	bl	800646c <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f002 f897 	bl	8003d14 <HAL_Delay>
	UNSET_BME_DPS();
 8001be6:	f001 fd96 	bl	8003716 <UNSET_BME_DPS>
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000594 	.word	0x20000594

08001bf8 <DPS368_temp_source>:

void DPS368_temp_source()
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af04      	add	r7, sp, #16
	uint8_t reg, reg_mod;
	SET_DPS368();
 8001bfe:	f001 fd83 	bl	8003708 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8001c02:	23fa      	movs	r3, #250	; 0xfa
 8001c04:	9302      	str	r3, [sp, #8]
 8001c06:	2301      	movs	r3, #1
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	1dbb      	adds	r3, r7, #6
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2301      	movs	r3, #1
 8001c10:	2207      	movs	r2, #7
 8001c12:	21ee      	movs	r1, #238	; 0xee
 8001c14:	4818      	ldr	r0, [pc, #96]	; (8001c78 <DPS368_temp_source+0x80>)
 8001c16:	f004 fd3d 	bl	8006694 <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x07 (hex) (NOMOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x28, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8001c1a:	23fa      	movs	r3, #250	; 0xfa
 8001c1c:	9302      	str	r3, [sp, #8]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	1dfb      	adds	r3, r7, #7
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2301      	movs	r3, #1
 8001c28:	2228      	movs	r2, #40	; 0x28
 8001c2a:	21ee      	movs	r1, #238	; 0xee
 8001c2c:	4812      	ldr	r0, [pc, #72]	; (8001c78 <DPS368_temp_source+0x80>)
 8001c2e:	f004 fd31 	bl	8006694 <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x28 (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	if((reg & 0x80) == 0) {
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db06      	blt.n	8001c48 <DPS368_temp_source+0x50>
//		printf("Internal Temp\r\n");
		setBit(&reg_mod, 7, 0);
 8001c3a:	1dbb      	adds	r3, r7, #6
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2107      	movs	r1, #7
 8001c40:	4618      	mov	r0, r3
 8001c42:	f001 fc77 	bl	8003534 <setBit>
 8001c46:	e005      	b.n	8001c54 <DPS368_temp_source+0x5c>
	} else {
//		printf("External Temp\r\n");
		setBit(&reg_mod, 7, 1);
 8001c48:	1dbb      	adds	r3, r7, #6
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	2107      	movs	r1, #7
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f001 fc70 	bl	8003534 <setBit>
		}
//	printf("CFG TEMP SRC 0x07 (hex) (MOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8001c54:	23fa      	movs	r3, #250	; 0xfa
 8001c56:	9302      	str	r3, [sp, #8]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	1dbb      	adds	r3, r7, #6
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2301      	movs	r3, #1
 8001c62:	2207      	movs	r2, #7
 8001c64:	21ee      	movs	r1, #238	; 0xee
 8001c66:	4804      	ldr	r0, [pc, #16]	; (8001c78 <DPS368_temp_source+0x80>)
 8001c68:	f004 fc00 	bl	800646c <HAL_I2C_Mem_Write>
	UNSET_BME_DPS();
 8001c6c:	f001 fd53 	bl	8003716 <UNSET_BME_DPS>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000594 	.word	0x20000594

08001c7c <DPS368_conf_temp>:



void DPS368_conf_temp(uint8_t ovr, uint8_t rate)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af04      	add	r7, sp, #16
 8001c82:	4603      	mov	r3, r0
 8001c84:	460a      	mov	r2, r1
 8001c86:	71fb      	strb	r3, [r7, #7]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	71bb      	strb	r3, [r7, #6]
	uint8_t reg;
	SET_DPS368();
 8001c8c:	f001 fd3c 	bl	8003708 <SET_DPS368>
	reg = ovr + rate;
 8001c90:	79fa      	ldrb	r2, [r7, #7]
 8001c92:	79bb      	ldrb	r3, [r7, #6]
 8001c94:	4413      	add	r3, r2
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8001c9a:	23fa      	movs	r3, #250	; 0xfa
 8001c9c:	9302      	str	r3, [sp, #8]
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	f107 030f 	add.w	r3, r7, #15
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	2207      	movs	r2, #7
 8001cac:	21ee      	movs	r1, #238	; 0xee
 8001cae:	4835      	ldr	r0, [pc, #212]	; (8001d84 <DPS368_conf_temp+0x108>)
 8001cb0:	f004 fbdc 	bl	800646c <HAL_I2C_Mem_Write>
    switch (ovr)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	2b07      	cmp	r3, #7
 8001cb8:	d83a      	bhi.n	8001d30 <DPS368_conf_temp+0xb4>
 8001cba:	a201      	add	r2, pc, #4	; (adr r2, 8001cc0 <DPS368_conf_temp+0x44>)
 8001cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc0:	08001ce1 	.word	0x08001ce1
 8001cc4:	08001ceb 	.word	0x08001ceb
 8001cc8:	08001cf5 	.word	0x08001cf5
 8001ccc:	08001cff 	.word	0x08001cff
 8001cd0:	08001d09 	.word	0x08001d09
 8001cd4:	08001d13 	.word	0x08001d13
 8001cd8:	08001d1d 	.word	0x08001d1d
 8001cdc:	08001d27 	.word	0x08001d27
    {
        case DPS_OVERSAMPLE_1:
            Kt_coef = DPS_OSR_SF_1;
 8001ce0:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <DPS368_conf_temp+0x10c>)
 8001ce2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ce6:	601a      	str	r2, [r3, #0]
            break;
 8001ce8:	e022      	b.n	8001d30 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_2:
        	Kt_coef = DPS_OSR_SF_2;
 8001cea:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <DPS368_conf_temp+0x10c>)
 8001cec:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8001cf0:	601a      	str	r2, [r3, #0]
            break;
 8001cf2:	e01d      	b.n	8001d30 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_4:
        	Kt_coef = DPS_OSR_SF_4;
 8001cf4:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <DPS368_conf_temp+0x10c>)
 8001cf6:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8001cfa:	601a      	str	r2, [r3, #0]
            break;
 8001cfc:	e018      	b.n	8001d30 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_8:
        	Kt_coef = DPS_OSR_SF_8;
 8001cfe:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <DPS368_conf_temp+0x10c>)
 8001d00:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8001d04:	601a      	str	r2, [r3, #0]
            break;
 8001d06:	e013      	b.n	8001d30 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_16:
        	Kt_coef = DPS_OSR_SF_16;
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <DPS368_conf_temp+0x10c>)
 8001d0a:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 8001d0e:	601a      	str	r2, [r3, #0]
            break;
 8001d10:	e00e      	b.n	8001d30 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_32:
        	Kt_coef = DPS_OSR_SF_32;
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <DPS368_conf_temp+0x10c>)
 8001d14:	f44f 22fc 	mov.w	r2, #516096	; 0x7e000
 8001d18:	601a      	str	r2, [r3, #0]
            break;
 8001d1a:	e009      	b.n	8001d30 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_64:
        	Kt_coef = DPS_OSR_SF_64;
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <DPS368_conf_temp+0x10c>)
 8001d1e:	f44f 227e 	mov.w	r2, #1040384	; 0xfe000
 8001d22:	601a      	str	r2, [r3, #0]
            break;
 8001d24:	e004      	b.n	8001d30 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_128:
        	Kt_coef = DPS_OSR_SF_128;
 8001d26:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <DPS368_conf_temp+0x10c>)
 8001d28:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8001d2c:	601a      	str	r2, [r3, #0]
            break;
 8001d2e:	bf00      	nop
    }
//    printf("Kt_coef set: %lu\r\n",Kt_coef);

   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8001d30:	23fa      	movs	r3, #250	; 0xfa
 8001d32:	9302      	str	r3, [sp, #8]
 8001d34:	2301      	movs	r3, #1
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	f107 030f 	add.w	r3, r7, #15
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	2209      	movs	r2, #9
 8001d42:	21ee      	movs	r1, #238	; 0xee
 8001d44:	480f      	ldr	r0, [pc, #60]	; (8001d84 <DPS368_conf_temp+0x108>)
 8001d46:	f004 fca5 	bl	8006694 <HAL_I2C_Mem_Read>
    if(ovr > DPS_OSR_SF_8) setBit(&reg, 3, 1);
    else setBit(&reg, 3, 0);
 8001d4a:	f107 030f 	add.w	r3, r7, #15
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2103      	movs	r1, #3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 fbee 	bl	8003534 <setBit>
   	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8001d58:	23fa      	movs	r3, #250	; 0xfa
 8001d5a:	9302      	str	r3, [sp, #8]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	f107 030f 	add.w	r3, r7, #15
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2301      	movs	r3, #1
 8001d68:	2209      	movs	r2, #9
 8001d6a:	21ee      	movs	r1, #238	; 0xee
 8001d6c:	4805      	ldr	r0, [pc, #20]	; (8001d84 <DPS368_conf_temp+0x108>)
 8001d6e:	f004 fb7d 	bl	800646c <HAL_I2C_Mem_Write>

	DPS368_temp_source();
 8001d72:	f7ff ff41 	bl	8001bf8 <DPS368_temp_source>
	UNSET_BME_DPS();
 8001d76:	f001 fcce 	bl	8003716 <UNSET_BME_DPS>
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000594 	.word	0x20000594
 8001d88:	2000046c 	.word	0x2000046c

08001d8c <DPS368_temp_correct>:
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
	UNSET_BME_DPS();
}

void DPS368_temp_correct()
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af04      	add	r7, sp, #16
	SET_DPS368();
 8001d92:	f001 fcb9 	bl	8003708 <SET_DPS368>
	HAL_StatusTypeDef status;
	uint8_t write_data = 0xA5;
 8001d96:	23a5      	movs	r3, #165	; 0xa5
 8001d98:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8001d9a:	23fa      	movs	r3, #250	; 0xfa
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	2301      	movs	r3, #1
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	1dbb      	adds	r3, r7, #6
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2301      	movs	r3, #1
 8001da8:	220e      	movs	r2, #14
 8001daa:	21ee      	movs	r1, #238	; 0xee
 8001dac:	482e      	ldr	r0, [pc, #184]	; (8001e68 <DPS368_temp_correct+0xdc>)
 8001dae:	f004 fb5d 	bl	800646c <HAL_I2C_Mem_Write>
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK) {
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10f      	bne.n	8001ddc <DPS368_temp_correct+0x50>
        write_data = 0x96;
 8001dbc:	2396      	movs	r3, #150	; 0x96
 8001dbe:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8001dc0:	23fa      	movs	r3, #250	; 0xfa
 8001dc2:	9302      	str	r3, [sp, #8]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	1dbb      	adds	r3, r7, #6
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2301      	movs	r3, #1
 8001dce:	220f      	movs	r2, #15
 8001dd0:	21ee      	movs	r1, #238	; 0xee
 8001dd2:	4825      	ldr	r0, [pc, #148]	; (8001e68 <DPS368_temp_correct+0xdc>)
 8001dd4:	f004 fb4a 	bl	800646c <HAL_I2C_Mem_Write>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71fb      	strb	r3, [r7, #7]
	}
	if (status == HAL_OK) {
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10f      	bne.n	8001e02 <DPS368_temp_correct+0x76>
        write_data = 0x02;
 8001de2:	2302      	movs	r3, #2
 8001de4:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x62, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8001de6:	23fa      	movs	r3, #250	; 0xfa
 8001de8:	9302      	str	r3, [sp, #8]
 8001dea:	2301      	movs	r3, #1
 8001dec:	9301      	str	r3, [sp, #4]
 8001dee:	1dbb      	adds	r3, r7, #6
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2301      	movs	r3, #1
 8001df4:	2262      	movs	r2, #98	; 0x62
 8001df6:	21ee      	movs	r1, #238	; 0xee
 8001df8:	481b      	ldr	r0, [pc, #108]	; (8001e68 <DPS368_temp_correct+0xdc>)
 8001dfa:	f004 fb37 	bl	800646c <HAL_I2C_Mem_Write>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
	}
	if (status == HAL_OK) {
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10f      	bne.n	8001e28 <DPS368_temp_correct+0x9c>
        write_data = 0x00;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8001e0c:	23fa      	movs	r3, #250	; 0xfa
 8001e0e:	9302      	str	r3, [sp, #8]
 8001e10:	2301      	movs	r3, #1
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	1dbb      	adds	r3, r7, #6
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	220e      	movs	r2, #14
 8001e1c:	21ee      	movs	r1, #238	; 0xee
 8001e1e:	4812      	ldr	r0, [pc, #72]	; (8001e68 <DPS368_temp_correct+0xdc>)
 8001e20:	f004 fb24 	bl	800646c <HAL_I2C_Mem_Write>
 8001e24:	4603      	mov	r3, r0
 8001e26:	71fb      	strb	r3, [r7, #7]
	}
	if (status == HAL_OK) {
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <DPS368_temp_correct+0xc2>
        write_data = 0x00;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8001e32:	23fa      	movs	r3, #250	; 0xfa
 8001e34:	9302      	str	r3, [sp, #8]
 8001e36:	2301      	movs	r3, #1
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	1dbb      	adds	r3, r7, #6
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2301      	movs	r3, #1
 8001e40:	220f      	movs	r2, #15
 8001e42:	21ee      	movs	r1, #238	; 0xee
 8001e44:	4808      	ldr	r0, [pc, #32]	; (8001e68 <DPS368_temp_correct+0xdc>)
 8001e46:	f004 fb11 	bl	800646c <HAL_I2C_Mem_Write>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
	}
	DPS368_conf_temp(DPS_OVERSAMPLE_1, DPS_RATE_1);
 8001e4e:	2100      	movs	r1, #0
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7ff ff13 	bl	8001c7c <DPS368_conf_temp>
	DPS368_run_mode(MODE_CMD_TEMP);
 8001e56:	2002      	movs	r0, #2
 8001e58:	f000 f808 	bl	8001e6c <DPS368_run_mode>
	UNSET_BME_DPS();
 8001e5c:	f001 fc5b 	bl	8003716 <UNSET_BME_DPS>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000594 	.word	0x20000594

08001e6c <DPS368_run_mode>:


void DPS368_run_mode(uint8_t mode)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af04      	add	r7, sp, #16
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
	SET_DPS368();
 8001e76:	f001 fc47 	bl	8003708 <SET_DPS368>
	uint8_t reg;
//	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
//	reg = (reg & 0x0E) | mode;
	reg = mode;
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8001e7e:	23fa      	movs	r3, #250	; 0xfa
 8001e80:	9302      	str	r3, [sp, #8]
 8001e82:	2301      	movs	r3, #1
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	f107 030f 	add.w	r3, r7, #15
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	2208      	movs	r2, #8
 8001e90:	21ee      	movs	r1, #238	; 0xee
 8001e92:	4806      	ldr	r0, [pc, #24]	; (8001eac <DPS368_run_mode+0x40>)
 8001e94:	f004 faea 	bl	800646c <HAL_I2C_Mem_Write>
	HAL_Delay(2);
 8001e98:	2002      	movs	r0, #2
 8001e9a:	f001 ff3b 	bl	8003d14 <HAL_Delay>
	UNSET_BME_DPS();
 8001e9e:	f001 fc3a 	bl	8003716 <UNSET_BME_DPS>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000594 	.word	0x20000594

08001eb0 <DPS368_init>:
    // formula from datasheet (optimized)
    return (((uint32_t)20U) + ((uint32_t)16U << ((uint16_t)osr)));
}

void DPS368_init(uint8_t fifo, uint8_t int_m)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	460a      	mov	r2, r1
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
	DPS368_read_coeff();
 8001ec0:	f7ff fd8c 	bl	80019dc <DPS368_read_coeff>
	DPS368_conf_int(int_m);
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fe62 	bl	8001b90 <DPS368_conf_int>
	DPS368_fifo(fifo);
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fe2a 	bl	8001b28 <DPS368_fifo>
	DPS368_run_mode(MODE_IDLE);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff ffc9 	bl	8001e6c <DPS368_run_mode>
	DPS368_temp_correct();
 8001eda:	f7ff ff57 	bl	8001d8c <DPS368_temp_correct>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eee:	f001 fe9c 	bl	8003c2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef2:	f000 f9a7 	bl	8002244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef6:	f000 fc5b 	bl	80027b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001efa:	f000 fc3b 	bl	8002774 <MX_DMA_Init>
  MX_ADC1_Init();
 8001efe:	f000 fa05 	bl	800230c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001f02:	f000 fa9f 	bl	8002444 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001f06:	f000 fadd 	bl	80024c4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001f0a:	f000 fb1b 	bl	8002544 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001f0e:	f000 fbd1 	bl	80026b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001f12:	f000 fbff 	bl	8002714 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001f16:	f000 fa69 	bl	80023ec <MX_CRC_Init>
  MX_TIM16_Init();
 8001f1a:	f000 fb53 	bl	80025c4 <MX_TIM16_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001f1e:	f000 f9e0 	bl	80022e2 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);	// LED2 na PWM
 8001f22:	2100      	movs	r1, #0
 8001f24:	48af      	ldr	r0, [pc, #700]	; (80021e4 <main+0x2fc>)
 8001f26:	f006 fbed 	bl	8008704 <HAL_TIM_PWM_Start>
  HAL_UART_RxCpltCallback(&huart1); //CLI
 8001f2a:	48af      	ldr	r0, [pc, #700]	; (80021e8 <main+0x300>)
 8001f2c:	f7ff fb34 	bl	8001598 <HAL_UART_RxCpltCallback>
  HAL_UART_RxCpltCallback(&huart2); //SIM
 8001f30:	48ae      	ldr	r0, [pc, #696]	; (80021ec <main+0x304>)
 8001f32:	f7ff fb31 	bl	8001598 <HAL_UART_RxCpltCallback>
  check_powerOn();
 8001f36:	f001 f9f9 	bl	800332c <check_powerOn>
  printf("Initializing ...\r\n");
 8001f3a:	48ad      	ldr	r0, [pc, #692]	; (80021f0 <main+0x308>)
 8001f3c:	f009 f9e2 	bl	800b304 <puts>
  charger_state = BQ25798_check();
 8001f40:	f7ff fa98 	bl	8001474 <BQ25798_check>
 8001f44:	4603      	mov	r3, r0
 8001f46:	461a      	mov	r2, r3
 8001f48:	4baa      	ldr	r3, [pc, #680]	; (80021f4 <main+0x30c>)
 8001f4a:	701a      	strb	r2, [r3, #0]
  LED1_ON();
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2120      	movs	r1, #32
 8001f50:	48a9      	ldr	r0, [pc, #676]	; (80021f8 <main+0x310>)
 8001f52:	f003 ffdf 	bl	8005f14 <HAL_GPIO_WritePin>
  LED2_OFF();
 8001f56:	2000      	movs	r0, #0
 8001f58:	f001 f9d6 	bl	8003308 <setLed2>
  ADC_DMA_Start();
 8001f5c:	f7fe fff2 	bl	8000f44 <ADC_DMA_Start>
  uint32_t ticks1s = HAL_GetTick();
 8001f60:	f001 fecc 	bl	8003cfc <HAL_GetTick>
 8001f64:	6078      	str	r0, [r7, #4]
  uint32_t ticks30ms = HAL_GetTick();
 8001f66:	f001 fec9 	bl	8003cfc <HAL_GetTick>
 8001f6a:	6038      	str	r0, [r7, #0]
  I2C2TCA_RST();
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f76:	f003 ffcd 	bl	8005f14 <HAL_GPIO_WritePin>
  // i2c_scan(&hi2c1, 0x38, 0xA0);
  TMP117_temp_sensor.sensor_present = TMP117_check();
 8001f7a:	f001 fbd3 	bl	8003724 <TMP117_check>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	b2d9      	uxtb	r1, r3
 8001f86:	4a9d      	ldr	r2, [pc, #628]	; (80021fc <main+0x314>)
 8001f88:	7813      	ldrb	r3, [r2, #0]
 8001f8a:	f361 0300 	bfi	r3, r1, #0, #1
 8001f8e:	7013      	strb	r3, [r2, #0]
  MS8607_temp_sensor.sensor_present = MS8607_check();
 8001f90:	f001 fc00 	bl	8003794 <MS8607_check>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	b2d9      	uxtb	r1, r3
 8001f9c:	4a98      	ldr	r2, [pc, #608]	; (8002200 <main+0x318>)
 8001f9e:	7813      	ldrb	r3, [r2, #0]
 8001fa0:	f361 0300 	bfi	r3, r1, #0, #1
 8001fa4:	7013      	strb	r3, [r2, #0]
  if(MS8607_temp_sensor.sensor_present) {
 8001fa6:	4b96      	ldr	r3, [pc, #600]	; (8002200 <main+0x318>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <main+0xe2>
	  MS8607_press_sensor.sensor_present = 1;
 8001fb4:	4a93      	ldr	r2, [pc, #588]	; (8002204 <main+0x31c>)
 8001fb6:	7813      	ldrb	r3, [r2, #0]
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	7013      	strb	r3, [r2, #0]
	  MS8607_hum_sensor.sensor_present = 1;
 8001fbe:	4a92      	ldr	r2, [pc, #584]	; (8002208 <main+0x320>)
 8001fc0:	7813      	ldrb	r3, [r2, #0]
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	7013      	strb	r3, [r2, #0]
 8001fc8:	e009      	b.n	8001fde <main+0xf6>
  } else {
	  MS8607_press_sensor.sensor_present = 0;
 8001fca:	4a8e      	ldr	r2, [pc, #568]	; (8002204 <main+0x31c>)
 8001fcc:	7813      	ldrb	r3, [r2, #0]
 8001fce:	f36f 0300 	bfc	r3, #0, #1
 8001fd2:	7013      	strb	r3, [r2, #0]
	  MS8607_hum_sensor.sensor_present = 0;
 8001fd4:	4a8c      	ldr	r2, [pc, #560]	; (8002208 <main+0x320>)
 8001fd6:	7813      	ldrb	r3, [r2, #0]
 8001fd8:	f36f 0300 	bfc	r3, #0, #1
 8001fdc:	7013      	strb	r3, [r2, #0]
  }
  SHTC3_temp_sensor.sensor_present = SHTC3_check();
 8001fde:	f001 fc31 	bl	8003844 <SHTC3_check>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	b2d9      	uxtb	r1, r3
 8001fea:	4a88      	ldr	r2, [pc, #544]	; (800220c <main+0x324>)
 8001fec:	7813      	ldrb	r3, [r2, #0]
 8001fee:	f361 0300 	bfi	r3, r1, #0, #1
 8001ff2:	7013      	strb	r3, [r2, #0]
  if(SHTC3_temp_sensor.sensor_present) SHTC3_hum_sensor.sensor_present = 1; else SHTC3_hum_sensor.sensor_present = 0;
 8001ff4:	4b85      	ldr	r3, [pc, #532]	; (800220c <main+0x324>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <main+0x126>
 8002002:	4a83      	ldr	r2, [pc, #524]	; (8002210 <main+0x328>)
 8002004:	7813      	ldrb	r3, [r2, #0]
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	7013      	strb	r3, [r2, #0]
 800200c:	e004      	b.n	8002018 <main+0x130>
 800200e:	4a80      	ldr	r2, [pc, #512]	; (8002210 <main+0x328>)
 8002010:	7813      	ldrb	r3, [r2, #0]
 8002012:	f36f 0300 	bfc	r3, #0, #1
 8002016:	7013      	strb	r3, [r2, #0]

  BME280_temp_sensor.sensor_present = BME280_check();
 8002018:	f001 fd48 	bl	8003aac <BME280_check>
 800201c:	4603      	mov	r3, r0
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	b2d9      	uxtb	r1, r3
 8002024:	4a7b      	ldr	r2, [pc, #492]	; (8002214 <main+0x32c>)
 8002026:	7813      	ldrb	r3, [r2, #0]
 8002028:	f361 0300 	bfi	r3, r1, #0, #1
 800202c:	7013      	strb	r3, [r2, #0]
  if(BME280_temp_sensor.sensor_present) {
 800202e:	4b79      	ldr	r3, [pc, #484]	; (8002214 <main+0x32c>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <main+0x16a>
	  BME280_press_sensor.sensor_present = 1;
 800203c:	4a76      	ldr	r2, [pc, #472]	; (8002218 <main+0x330>)
 800203e:	7813      	ldrb	r3, [r2, #0]
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	7013      	strb	r3, [r2, #0]
	  BME280_hum_sensor.sensor_present = 1;
 8002046:	4a75      	ldr	r2, [pc, #468]	; (800221c <main+0x334>)
 8002048:	7813      	ldrb	r3, [r2, #0]
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	7013      	strb	r3, [r2, #0]
 8002050:	e009      	b.n	8002066 <main+0x17e>
  } else {
	  BME280_press_sensor.sensor_present = 0;
 8002052:	4a71      	ldr	r2, [pc, #452]	; (8002218 <main+0x330>)
 8002054:	7813      	ldrb	r3, [r2, #0]
 8002056:	f36f 0300 	bfc	r3, #0, #1
 800205a:	7013      	strb	r3, [r2, #0]
	  BME280_hum_sensor.sensor_present = 0;
 800205c:	4a6f      	ldr	r2, [pc, #444]	; (800221c <main+0x334>)
 800205e:	7813      	ldrb	r3, [r2, #0]
 8002060:	f36f 0300 	bfc	r3, #0, #1
 8002064:	7013      	strb	r3, [r2, #0]
  }

  DPS368_temp_sensor.sensor_present = DPS368_check();
 8002066:	f7ff fc59 	bl	800191c <DPS368_check>
 800206a:	4603      	mov	r3, r0
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	b2d9      	uxtb	r1, r3
 8002072:	4a6b      	ldr	r2, [pc, #428]	; (8002220 <main+0x338>)
 8002074:	7813      	ldrb	r3, [r2, #0]
 8002076:	f361 0300 	bfi	r3, r1, #0, #1
 800207a:	7013      	strb	r3, [r2, #0]
  if(DPS368_temp_sensor.sensor_present) {
 800207c:	4b68      	ldr	r3, [pc, #416]	; (8002220 <main+0x338>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <main+0x1b8>
	  DPS368_press_sensor.sensor_present = 1;
 800208a:	4a66      	ldr	r2, [pc, #408]	; (8002224 <main+0x33c>)
 800208c:	7813      	ldrb	r3, [r2, #0]
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	7013      	strb	r3, [r2, #0]
	  DPS368_hum_sensor.sensor_present = 1;
 8002094:	4a64      	ldr	r2, [pc, #400]	; (8002228 <main+0x340>)
 8002096:	7813      	ldrb	r3, [r2, #0]
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	7013      	strb	r3, [r2, #0]
 800209e:	e009      	b.n	80020b4 <main+0x1cc>
  } else {
	  DPS368_press_sensor.sensor_present = 0;
 80020a0:	4a60      	ldr	r2, [pc, #384]	; (8002224 <main+0x33c>)
 80020a2:	7813      	ldrb	r3, [r2, #0]
 80020a4:	f36f 0300 	bfc	r3, #0, #1
 80020a8:	7013      	strb	r3, [r2, #0]
	  DPS368_hum_sensor.sensor_present = 0;
 80020aa:	4a5f      	ldr	r2, [pc, #380]	; (8002228 <main+0x340>)
 80020ac:	7813      	ldrb	r3, [r2, #0]
 80020ae:	f36f 0300 	bfc	r3, #0, #1
 80020b2:	7013      	strb	r3, [r2, #0]
  }

  BME280_init_config(1, BMP280_STANDARD, BMP280_STANDARD, BMP280_STANDARD, BMP280_FILTER_OFF);
 80020b4:	2300      	movs	r3, #0
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2303      	movs	r3, #3
 80020ba:	2203      	movs	r2, #3
 80020bc:	2103      	movs	r1, #3
 80020be:	2001      	movs	r0, #1
 80020c0:	f001 fd32 	bl	8003b28 <BME280_init_config>

  DPS368_init(FIFO_DIS, INT_NONE);
 80020c4:	2100      	movs	r1, #0
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff fef2 	bl	8001eb0 <DPS368_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  thp_loop();
 80020cc:	f001 f9a4 	bl	8003418 <thp_loop>
	  if(HAL_GetTick()-ticks1s >= 10000)
 80020d0:	f001 fe14 	bl	8003cfc <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f242 720f 	movw	r2, #9999	; 0x270f
 80020de:	4293      	cmp	r3, r2
 80020e0:	d96d      	bls.n	80021be <main+0x2d6>
	  {
		  if(cyclic) {
 80020e2:	4b52      	ldr	r3, [pc, #328]	; (800222c <main+0x344>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d068      	beq.n	80021be <main+0x2d6>
			  ticks1s = HAL_GetTick();
 80020ec:	f001 fe06 	bl	8003cfc <HAL_GetTick>
 80020f0:	6078      	str	r0, [r7, #4]
//			  TMP117_temp_sensor.temperature=TMP117_get_temp(avg8);
//			  MS8607_temp_sensor.temperature=MS8607_get_temp();
//			  MS8607_press_sensor.pressure=MS8607_get_press();
			  SHTC3_temp_sensor.temperature=SHTC3_get_temp(0);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f001 fc06 	bl	8003904 <SHTC3_get_temp>
 80020f8:	eef0 7a40 	vmov.f32	s15, s0
 80020fc:	4b43      	ldr	r3, [pc, #268]	; (800220c <main+0x324>)
 80020fe:	ee17 2a90 	vmov	r2, s15
 8002102:	f8c3 2001 	str.w	r2, [r3, #1]
			  SHTC3_hum_sensor.humidity=SHTC3_get_hum(0);
 8002106:	2000      	movs	r0, #0
 8002108:	f001 fc68 	bl	80039dc <SHTC3_get_hum>
 800210c:	eef0 7a40 	vmov.f32	s15, s0
 8002110:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <main+0x328>)
 8002112:	ee17 2a90 	vmov	r2, s15
 8002116:	f8c3 2001 	str.w	r2, [r3, #1]
//			  BME280_temp_sensor.temperature = BME280_get_temp();
//			  BME280_press_sensor.pressure = BME280_get_press();
//			  printf("Start TEMP DPS\r\n");
//			  DPS368_temp_sensor.temperature = DPS368_get_temp_cmd(DPS_OVERSAMPLE_8);
//			  DPS368_press_sensor.pressure = DPS368_get_press_cmd(DPS_OVERSAMPLE_8);
			  printf("SHTC3 Normal\r\n");
 800211a:	4845      	ldr	r0, [pc, #276]	; (8002230 <main+0x348>)
 800211c:	f009 f8f2 	bl	800b304 <puts>
			  printf("SHTC3: %.3f", SHTC3_temp_sensor.temperature);
 8002120:	4b3a      	ldr	r3, [pc, #232]	; (800220c <main+0x324>)
 8002122:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fa0e 	bl	8000548 <__aeabi_f2d>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4840      	ldr	r0, [pc, #256]	; (8002234 <main+0x34c>)
 8002132:	f009 f881 	bl	800b238 <iprintf>
			  printf("      ");
 8002136:	4840      	ldr	r0, [pc, #256]	; (8002238 <main+0x350>)
 8002138:	f009 f87e 	bl	800b238 <iprintf>
			  printf("SHTC3: %.3f", SHTC3_hum_sensor.humidity);
 800213c:	4b34      	ldr	r3, [pc, #208]	; (8002210 <main+0x328>)
 800213e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa00 	bl	8000548 <__aeabi_f2d>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4839      	ldr	r0, [pc, #228]	; (8002234 <main+0x34c>)
 800214e:	f009 f873 	bl	800b238 <iprintf>
			  printf("\r\n");
 8002152:	483a      	ldr	r0, [pc, #232]	; (800223c <main+0x354>)
 8002154:	f009 f8d6 	bl	800b304 <puts>



			  SHTC3_temp_sensor.temperature=SHTC3_get_temp(1);
 8002158:	2001      	movs	r0, #1
 800215a:	f001 fbd3 	bl	8003904 <SHTC3_get_temp>
 800215e:	eef0 7a40 	vmov.f32	s15, s0
 8002162:	4b2a      	ldr	r3, [pc, #168]	; (800220c <main+0x324>)
 8002164:	ee17 2a90 	vmov	r2, s15
 8002168:	f8c3 2001 	str.w	r2, [r3, #1]
			  SHTC3_hum_sensor.humidity=SHTC3_get_hum(1);
 800216c:	2001      	movs	r0, #1
 800216e:	f001 fc35 	bl	80039dc <SHTC3_get_hum>
 8002172:	eef0 7a40 	vmov.f32	s15, s0
 8002176:	4b26      	ldr	r3, [pc, #152]	; (8002210 <main+0x328>)
 8002178:	ee17 2a90 	vmov	r2, s15
 800217c:	f8c3 2001 	str.w	r2, [r3, #1]

			  printf("SHTC3 LP\r\n");
 8002180:	482f      	ldr	r0, [pc, #188]	; (8002240 <main+0x358>)
 8002182:	f009 f8bf 	bl	800b304 <puts>
			  printf("SHTC3: %.3f", SHTC3_temp_sensor.temperature);
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <main+0x324>)
 8002188:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f9db 	bl	8000548 <__aeabi_f2d>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4827      	ldr	r0, [pc, #156]	; (8002234 <main+0x34c>)
 8002198:	f009 f84e 	bl	800b238 <iprintf>
			  printf("      ");
 800219c:	4826      	ldr	r0, [pc, #152]	; (8002238 <main+0x350>)
 800219e:	f009 f84b 	bl	800b238 <iprintf>
			  printf("SHTC3: %.3f", SHTC3_hum_sensor.humidity);
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <main+0x328>)
 80021a4:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f9cd 	bl	8000548 <__aeabi_f2d>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4820      	ldr	r0, [pc, #128]	; (8002234 <main+0x34c>)
 80021b4:	f009 f840 	bl	800b238 <iprintf>
			  printf("\r\n");
 80021b8:	4820      	ldr	r0, [pc, #128]	; (800223c <main+0x354>)
 80021ba:	f009 f8a3 	bl	800b304 <puts>
//			  printf("BME280: %d %d %d \r\n",BME280_temp_sensor.sensor_present, BME280_press_sensor.sensor_present, BME280_hum_sensor.sensor_present);
//			  printf("DPS368: %d %d %d \r\n",DPS368_temp_sensor.sensor_present, DPS368_press_sensor.sensor_present, DPS368_hum_sensor.sensor_present);

		  }
	  }
	  if(HAL_GetTick()-ticks30ms >= 30)
 80021be:	f001 fd9d 	bl	8003cfc <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b1d      	cmp	r3, #29
 80021ca:	f67f af7f 	bls.w	80020cc <main+0x1e4>
	  {
	  	    ticks30ms = HAL_GetTick();
 80021ce:	f001 fd95 	bl	8003cfc <HAL_GetTick>
 80021d2:	6038      	str	r0, [r7, #0]
	  	    LED1_TOGGLE();
 80021d4:	2120      	movs	r1, #32
 80021d6:	4808      	ldr	r0, [pc, #32]	; (80021f8 <main+0x310>)
 80021d8:	f003 feb4 	bl	8005f44 <HAL_GPIO_TogglePin>
	  	    check_powerOff();
 80021dc:	f001 f8e0 	bl	80033a0 <check_powerOff>
	  thp_loop();
 80021e0:	e774      	b.n	80020cc <main+0x1e4>
 80021e2:	bf00      	nop
 80021e4:	2000063c 	.word	0x2000063c
 80021e8:	20000688 	.word	0x20000688
 80021ec:	2000070c 	.word	0x2000070c
 80021f0:	0800d480 	.word	0x0800d480
 80021f4:	20000790 	.word	0x20000790
 80021f8:	48000400 	.word	0x48000400
 80021fc:	20000794 	.word	0x20000794
 8002200:	200007a0 	.word	0x200007a0
 8002204:	200007d0 	.word	0x200007d0
 8002208:	200007f4 	.word	0x200007f4
 800220c:	200007ac 	.word	0x200007ac
 8002210:	20000800 	.word	0x20000800
 8002214:	200007b8 	.word	0x200007b8
 8002218:	200007dc 	.word	0x200007dc
 800221c:	2000080c 	.word	0x2000080c
 8002220:	200007c4 	.word	0x200007c4
 8002224:	200007e8 	.word	0x200007e8
 8002228:	20000818 	.word	0x20000818
 800222c:	20000000 	.word	0x20000000
 8002230:	0800d494 	.word	0x0800d494
 8002234:	0800d4a4 	.word	0x0800d4a4
 8002238:	0800d4b0 	.word	0x0800d4b0
 800223c:	0800d4b8 	.word	0x0800d4b8
 8002240:	0800d4bc 	.word	0x0800d4bc

08002244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b096      	sub	sp, #88	; 0x58
 8002248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	2244      	movs	r2, #68	; 0x44
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f009 f936 	bl	800b4c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002258:	463b      	mov	r3, r7
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]
 8002264:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002266:	f44f 7000 	mov.w	r0, #512	; 0x200
 800226a:	f004 fffb 	bl	8007264 <HAL_PWREx_ControlVoltageScaling>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002274:	f000 fb8a 	bl	800298c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002278:	2301      	movs	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800227c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002282:	2302      	movs	r3, #2
 8002284:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002286:	2303      	movs	r3, #3
 8002288:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800228a:	2301      	movs	r3, #1
 800228c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800228e:	230a      	movs	r3, #10
 8002290:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002292:	2307      	movs	r3, #7
 8002294:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002296:	2302      	movs	r3, #2
 8002298:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800229a:	2302      	movs	r3, #2
 800229c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4618      	mov	r0, r3
 80022a4:	f005 f834 	bl	8007310 <HAL_RCC_OscConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80022ae:	f000 fb6d 	bl	800298c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b2:	230f      	movs	r3, #15
 80022b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022b6:	2303      	movs	r3, #3
 80022b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022c6:	463b      	mov	r3, r7
 80022c8:	2102      	movs	r1, #2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f005 fc34 	bl	8007b38 <HAL_RCC_ClockConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80022d6:	f000 fb59 	bl	800298c <Error_Handler>
  }
}
 80022da:	bf00      	nop
 80022dc:	3758      	adds	r7, #88	; 0x58
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	2025      	movs	r0, #37	; 0x25
 80022ec:	f002 ffcf 	bl	800528e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022f0:	2025      	movs	r0, #37	; 0x25
 80022f2:	f002 ffe8 	bl	80052c6 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2100      	movs	r1, #0
 80022fa:	2026      	movs	r0, #38	; 0x26
 80022fc:	f002 ffc7 	bl	800528e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002300:	2026      	movs	r0, #38	; 0x26
 8002302:	f002 ffe0 	bl	80052c6 <HAL_NVIC_EnableIRQ>
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002312:	463b      	mov	r3, r7
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
 8002320:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002322:	4b2f      	ldr	r3, [pc, #188]	; (80023e0 <MX_ADC1_Init+0xd4>)
 8002324:	4a2f      	ldr	r2, [pc, #188]	; (80023e4 <MX_ADC1_Init+0xd8>)
 8002326:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <MX_ADC1_Init+0xd4>)
 800232a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800232e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002330:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <MX_ADC1_Init+0xd4>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002336:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <MX_ADC1_Init+0xd4>)
 8002338:	2200      	movs	r2, #0
 800233a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800233c:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <MX_ADC1_Init+0xd4>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002342:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <MX_ADC1_Init+0xd4>)
 8002344:	2204      	movs	r2, #4
 8002346:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002348:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <MX_ADC1_Init+0xd4>)
 800234a:	2200      	movs	r2, #0
 800234c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800234e:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <MX_ADC1_Init+0xd4>)
 8002350:	2201      	movs	r2, #1
 8002352:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002354:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <MX_ADC1_Init+0xd4>)
 8002356:	2201      	movs	r2, #1
 8002358:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800235a:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <MX_ADC1_Init+0xd4>)
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <MX_ADC1_Init+0xd4>)
 8002364:	2200      	movs	r2, #0
 8002366:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002368:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <MX_ADC1_Init+0xd4>)
 800236a:	2200      	movs	r2, #0
 800236c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <MX_ADC1_Init+0xd4>)
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <MX_ADC1_Init+0xd4>)
 8002378:	2200      	movs	r2, #0
 800237a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <MX_ADC1_Init+0xd4>)
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <MX_ADC1_Init+0xd4>)
 8002386:	220c      	movs	r2, #12
 8002388:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <MX_ADC1_Init+0xd4>)
 800238c:	2200      	movs	r2, #0
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <MX_ADC1_Init+0xd4>)
 8002392:	2200      	movs	r2, #0
 8002394:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <MX_ADC1_Init+0xd4>)
 8002398:	2201      	movs	r2, #1
 800239a:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800239c:	4810      	ldr	r0, [pc, #64]	; (80023e0 <MX_ADC1_Init+0xd4>)
 800239e:	f001 fecb 	bl	8004138 <HAL_ADC_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80023a8:	f000 faf0 	bl	800298c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_ADC1_Init+0xdc>)
 80023ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023b0:	2306      	movs	r3, #6
 80023b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80023b4:	2307      	movs	r3, #7
 80023b6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023b8:	237f      	movs	r3, #127	; 0x7f
 80023ba:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023bc:	2304      	movs	r3, #4
 80023be:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023c4:	463b      	mov	r3, r7
 80023c6:	4619      	mov	r1, r3
 80023c8:	4805      	ldr	r0, [pc, #20]	; (80023e0 <MX_ADC1_Init+0xd4>)
 80023ca:	f002 f89f 	bl	800450c <HAL_ADC_ConfigChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80023d4:	f000 fada 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023d8:	bf00      	nop
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000470 	.word	0x20000470
 80023e4:	50040000 	.word	0x50040000
 80023e8:	c7520000 	.word	0xc7520000

080023ec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <MX_CRC_Init+0x50>)
 80023f2:	4a13      	ldr	r2, [pc, #76]	; (8002440 <MX_CRC_Init+0x54>)
 80023f4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <MX_CRC_Init+0x50>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <MX_CRC_Init+0x50>)
 80023fe:	2201      	movs	r2, #1
 8002400:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 0x31;
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_CRC_Init+0x50>)
 8002404:	2231      	movs	r2, #49	; 0x31
 8002406:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <MX_CRC_Init+0x50>)
 800240a:	2210      	movs	r2, #16
 800240c:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFF;
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <MX_CRC_Init+0x50>)
 8002410:	22ff      	movs	r2, #255	; 0xff
 8002412:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <MX_CRC_Init+0x50>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <MX_CRC_Init+0x50>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_CRC_Init+0x50>)
 8002422:	2201      	movs	r2, #1
 8002424:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002426:	4805      	ldr	r0, [pc, #20]	; (800243c <MX_CRC_Init+0x50>)
 8002428:	f002 ff6e 	bl	8005308 <HAL_CRC_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8002432:	f000 faab 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2000051c 	.word	0x2000051c
 8002440:	40023000 	.word	0x40023000

08002444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <MX_I2C1_Init+0x74>)
 800244a:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <MX_I2C1_Init+0x78>)
 800244c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301347;
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <MX_I2C1_Init+0x74>)
 8002450:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <MX_I2C1_Init+0x7c>)
 8002452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <MX_I2C1_Init+0x74>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800245a:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <MX_I2C1_Init+0x74>)
 800245c:	2201      	movs	r2, #1
 800245e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002460:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <MX_I2C1_Init+0x74>)
 8002462:	2200      	movs	r2, #0
 8002464:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_I2C1_Init+0x74>)
 8002468:	2200      	movs	r2, #0
 800246a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <MX_I2C1_Init+0x74>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <MX_I2C1_Init+0x74>)
 8002474:	2200      	movs	r2, #0
 8002476:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_I2C1_Init+0x74>)
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800247e:	480e      	ldr	r0, [pc, #56]	; (80024b8 <MX_I2C1_Init+0x74>)
 8002480:	f003 fd7a 	bl	8005f78 <HAL_I2C_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800248a:	f000 fa7f 	bl	800298c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800248e:	2100      	movs	r1, #0
 8002490:	4809      	ldr	r0, [pc, #36]	; (80024b8 <MX_I2C1_Init+0x74>)
 8002492:	f004 fe41 	bl	8007118 <HAL_I2CEx_ConfigAnalogFilter>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800249c:	f000 fa76 	bl	800298c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80024a0:	2100      	movs	r1, #0
 80024a2:	4805      	ldr	r0, [pc, #20]	; (80024b8 <MX_I2C1_Init+0x74>)
 80024a4:	f004 fe83 	bl	80071ae <HAL_I2CEx_ConfigDigitalFilter>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80024ae:	f000 fa6d 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000540 	.word	0x20000540
 80024bc:	40005400 	.word	0x40005400
 80024c0:	00301347 	.word	0x00301347

080024c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <MX_I2C2_Init+0x74>)
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <MX_I2C2_Init+0x78>)
 80024cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301347;
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <MX_I2C2_Init+0x74>)
 80024d0:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <MX_I2C2_Init+0x7c>)
 80024d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80024d4:	4b18      	ldr	r3, [pc, #96]	; (8002538 <MX_I2C2_Init+0x74>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024da:	4b17      	ldr	r3, [pc, #92]	; (8002538 <MX_I2C2_Init+0x74>)
 80024dc:	2201      	movs	r2, #1
 80024de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e0:	4b15      	ldr	r3, [pc, #84]	; (8002538 <MX_I2C2_Init+0x74>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024e6:	4b14      	ldr	r3, [pc, #80]	; (8002538 <MX_I2C2_Init+0x74>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <MX_I2C2_Init+0x74>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <MX_I2C2_Init+0x74>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <MX_I2C2_Init+0x74>)
 80024fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002500:	480d      	ldr	r0, [pc, #52]	; (8002538 <MX_I2C2_Init+0x74>)
 8002502:	f003 fd39 	bl	8005f78 <HAL_I2C_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800250c:	f000 fa3e 	bl	800298c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002510:	2100      	movs	r1, #0
 8002512:	4809      	ldr	r0, [pc, #36]	; (8002538 <MX_I2C2_Init+0x74>)
 8002514:	f004 fe00 	bl	8007118 <HAL_I2CEx_ConfigAnalogFilter>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800251e:	f000 fa35 	bl	800298c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002522:	2100      	movs	r1, #0
 8002524:	4804      	ldr	r0, [pc, #16]	; (8002538 <MX_I2C2_Init+0x74>)
 8002526:	f004 fe42 	bl	80071ae <HAL_I2CEx_ConfigDigitalFilter>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002530:	f000 fa2c 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000594 	.word	0x20000594
 800253c:	40005800 	.word	0x40005800
 8002540:	00301347 	.word	0x00301347

08002544 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <MX_I2C3_Init+0x74>)
 800254a:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <MX_I2C3_Init+0x78>)
 800254c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00301347;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <MX_I2C3_Init+0x74>)
 8002550:	4a1b      	ldr	r2, [pc, #108]	; (80025c0 <MX_I2C3_Init+0x7c>)
 8002552:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <MX_I2C3_Init+0x74>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <MX_I2C3_Init+0x74>)
 800255c:	2201      	movs	r2, #1
 800255e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <MX_I2C3_Init+0x74>)
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <MX_I2C3_Init+0x74>)
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <MX_I2C3_Init+0x74>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <MX_I2C3_Init+0x74>)
 8002574:	2200      	movs	r2, #0
 8002576:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <MX_I2C3_Init+0x74>)
 800257a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800257e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002580:	480d      	ldr	r0, [pc, #52]	; (80025b8 <MX_I2C3_Init+0x74>)
 8002582:	f003 fcf9 	bl	8005f78 <HAL_I2C_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800258c:	f000 f9fe 	bl	800298c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002590:	2100      	movs	r1, #0
 8002592:	4809      	ldr	r0, [pc, #36]	; (80025b8 <MX_I2C3_Init+0x74>)
 8002594:	f004 fdc0 	bl	8007118 <HAL_I2CEx_ConfigAnalogFilter>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800259e:	f000 f9f5 	bl	800298c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80025a2:	2100      	movs	r1, #0
 80025a4:	4804      	ldr	r0, [pc, #16]	; (80025b8 <MX_I2C3_Init+0x74>)
 80025a6:	f004 fe02 	bl	80071ae <HAL_I2CEx_ConfigDigitalFilter>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80025b0:	f000 f9ec 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	200005e8 	.word	0x200005e8
 80025bc:	40005c00 	.word	0x40005c00
 80025c0:	00301347 	.word	0x00301347

080025c4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b092      	sub	sp, #72	; 0x48
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	611a      	str	r2, [r3, #16]
 80025da:	615a      	str	r2, [r3, #20]
 80025dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025de:	463b      	mov	r3, r7
 80025e0:	222c      	movs	r2, #44	; 0x2c
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f008 ff6d 	bl	800b4c4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <MX_TIM16_Init+0xe8>)
 80025ec:	4a30      	ldr	r2, [pc, #192]	; (80026b0 <MX_TIM16_Init+0xec>)
 80025ee:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 312;
 80025f0:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <MX_TIM16_Init+0xe8>)
 80025f2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80025f6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f8:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <MX_TIM16_Init+0xe8>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 256;
 80025fe:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <MX_TIM16_Init+0xe8>)
 8002600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002604:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002606:	4b29      	ldr	r3, [pc, #164]	; (80026ac <MX_TIM16_Init+0xe8>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <MX_TIM16_Init+0xe8>)
 800260e:	2200      	movs	r2, #0
 8002610:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <MX_TIM16_Init+0xe8>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002618:	4824      	ldr	r0, [pc, #144]	; (80026ac <MX_TIM16_Init+0xe8>)
 800261a:	f005 ffbb 	bl	8008594 <HAL_TIM_Base_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8002624:	f000 f9b2 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002628:	4820      	ldr	r0, [pc, #128]	; (80026ac <MX_TIM16_Init+0xe8>)
 800262a:	f006 f80a 	bl	8008642 <HAL_TIM_PWM_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8002634:	f000 f9aa 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002638:	2360      	movs	r3, #96	; 0x60
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002640:	2302      	movs	r3, #2
 8002642:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002644:	2300      	movs	r3, #0
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002648:	2304      	movs	r3, #4
 800264a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800264c:	2300      	movs	r3, #0
 800264e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002650:	2300      	movs	r3, #0
 8002652:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002654:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002658:	2200      	movs	r2, #0
 800265a:	4619      	mov	r1, r3
 800265c:	4813      	ldr	r0, [pc, #76]	; (80026ac <MX_TIM16_Init+0xe8>)
 800265e:	f006 f92f 	bl	80088c0 <HAL_TIM_PWM_ConfigChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8002668:	f000 f990 	bl	800298c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002684:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800268a:	463b      	mov	r3, r7
 800268c:	4619      	mov	r1, r3
 800268e:	4807      	ldr	r0, [pc, #28]	; (80026ac <MX_TIM16_Init+0xe8>)
 8002690:	f006 fd32 	bl	80090f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 800269a:	f000 f977 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800269e:	4803      	ldr	r0, [pc, #12]	; (80026ac <MX_TIM16_Init+0xe8>)
 80026a0:	f000 fbde 	bl	8002e60 <HAL_TIM_MspPostInit>

}
 80026a4:	bf00      	nop
 80026a6:	3748      	adds	r7, #72	; 0x48
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	2000063c 	.word	0x2000063c
 80026b0:	40014400 	.word	0x40014400

080026b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <MX_USART1_UART_Init+0x58>)
 80026ba:	4a15      	ldr	r2, [pc, #84]	; (8002710 <MX_USART1_UART_Init+0x5c>)
 80026bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <MX_USART1_UART_Init+0x58>)
 80026c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <MX_USART1_UART_Init+0x58>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <MX_USART1_UART_Init+0x58>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <MX_USART1_UART_Init+0x58>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <MX_USART1_UART_Init+0x58>)
 80026da:	220c      	movs	r2, #12
 80026dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <MX_USART1_UART_Init+0x58>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <MX_USART1_UART_Init+0x58>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <MX_USART1_UART_Init+0x58>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <MX_USART1_UART_Init+0x58>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026f6:	4805      	ldr	r0, [pc, #20]	; (800270c <MX_USART1_UART_Init+0x58>)
 80026f8:	f006 fd76 	bl	80091e8 <HAL_UART_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002702:	f000 f943 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000688 	.word	0x20000688
 8002710:	40013800 	.word	0x40013800

08002714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <MX_USART2_UART_Init+0x58>)
 800271a:	4a15      	ldr	r2, [pc, #84]	; (8002770 <MX_USART2_UART_Init+0x5c>)
 800271c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <MX_USART2_UART_Init+0x58>)
 8002720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <MX_USART2_UART_Init+0x58>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <MX_USART2_UART_Init+0x58>)
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002732:	4b0e      	ldr	r3, [pc, #56]	; (800276c <MX_USART2_UART_Init+0x58>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <MX_USART2_UART_Init+0x58>)
 800273a:	220c      	movs	r2, #12
 800273c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <MX_USART2_UART_Init+0x58>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <MX_USART2_UART_Init+0x58>)
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <MX_USART2_UART_Init+0x58>)
 800274c:	2200      	movs	r2, #0
 800274e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <MX_USART2_UART_Init+0x58>)
 8002752:	2200      	movs	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002756:	4805      	ldr	r0, [pc, #20]	; (800276c <MX_USART2_UART_Init+0x58>)
 8002758:	f006 fd46 	bl	80091e8 <HAL_UART_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002762:	f000 f913 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	2000070c 	.word	0x2000070c
 8002770:	40004400 	.word	0x40004400

08002774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <MX_DMA_Init+0x38>)
 800277c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277e:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <MX_DMA_Init+0x38>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6493      	str	r3, [r2, #72]	; 0x48
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <MX_DMA_Init+0x38>)
 8002788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	200b      	movs	r0, #11
 8002798:	f002 fd79 	bl	800528e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800279c:	200b      	movs	r0, #11
 800279e:	f002 fd92 	bl	80052c6 <HAL_NVIC_EnableIRQ>

}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000

080027b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
 80027c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c6:	4b6d      	ldr	r3, [pc, #436]	; (800297c <MX_GPIO_Init+0x1cc>)
 80027c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ca:	4a6c      	ldr	r2, [pc, #432]	; (800297c <MX_GPIO_Init+0x1cc>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d2:	4b6a      	ldr	r3, [pc, #424]	; (800297c <MX_GPIO_Init+0x1cc>)
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027de:	4b67      	ldr	r3, [pc, #412]	; (800297c <MX_GPIO_Init+0x1cc>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	4a66      	ldr	r2, [pc, #408]	; (800297c <MX_GPIO_Init+0x1cc>)
 80027e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ea:	4b64      	ldr	r3, [pc, #400]	; (800297c <MX_GPIO_Init+0x1cc>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f6:	4b61      	ldr	r3, [pc, #388]	; (800297c <MX_GPIO_Init+0x1cc>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a60      	ldr	r2, [pc, #384]	; (800297c <MX_GPIO_Init+0x1cc>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002802:	4b5e      	ldr	r3, [pc, #376]	; (800297c <MX_GPIO_Init+0x1cc>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800280e:	4b5b      	ldr	r3, [pc, #364]	; (800297c <MX_GPIO_Init+0x1cc>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	4a5a      	ldr	r2, [pc, #360]	; (800297c <MX_GPIO_Init+0x1cc>)
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281a:	4b58      	ldr	r3, [pc, #352]	; (800297c <MX_GPIO_Init+0x1cc>)
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIM_UART_DTR_Pin|SIM_GPS_Pin|RST2_Pin|BQ_QON_Pin
 8002826:	2200      	movs	r2, #0
 8002828:	f44f 51cb 	mov.w	r1, #6496	; 0x1960
 800282c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002830:	f003 fb70 	bl	8005f14 <HAL_GPIO_WritePin>
                          |BQ_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIM_PWR_Pin|RST3_Pin|LED1_Pin|Main_SW_Pin, GPIO_PIN_RESET);
 8002834:	2200      	movs	r2, #0
 8002836:	f248 2121 	movw	r1, #33313	; 0x8221
 800283a:	4851      	ldr	r0, [pc, #324]	; (8002980 <MX_GPIO_Init+0x1d0>)
 800283c:	f003 fb6a 	bl	8005f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : But_ONOFF_Pin */
  GPIO_InitStruct.Pin = But_ONOFF_Pin;
 8002840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	4619      	mov	r1, r3
 8002854:	484b      	ldr	r0, [pc, #300]	; (8002984 <MX_GPIO_Init+0x1d4>)
 8002856:	f003 f9cb 	bl	8005bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800285a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800285e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002860:	2303      	movs	r3, #3
 8002862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4619      	mov	r1, r3
 800286e:	4845      	ldr	r0, [pc, #276]	; (8002984 <MX_GPIO_Init+0x1d4>)
 8002870:	f003 f9be 	bl	8005bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002874:	f248 0302 	movw	r3, #32770	; 0x8002
 8002878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800287a:	2303      	movs	r3, #3
 800287c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800288c:	f003 f9b0 	bl	8005bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_UART_RI_Pin */
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 8002890:	2310      	movs	r3, #16
 8002892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	4619      	mov	r1, r3
 80028a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a6:	f003 f9a3 	bl	8005bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_UART_DTR_Pin SIM_GPS_Pin BQ_QON_Pin BQ_CE_Pin */
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|SIM_GPS_Pin|BQ_QON_Pin|BQ_CE_Pin;
 80028aa:	f44f 53c3 	mov.w	r3, #6240	; 0x1860
 80028ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b0:	2301      	movs	r3, #1
 80028b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4619      	mov	r1, r3
 80028c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c6:	f003 f993 	bl	8005bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_PWR_Pin LED1_Pin Main_SW_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin|LED1_Pin|Main_SW_Pin;
 80028ca:	f240 2321 	movw	r3, #545	; 0x221
 80028ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d0:	2301      	movs	r3, #1
 80028d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	4619      	mov	r1, r3
 80028e2:	4827      	ldr	r0, [pc, #156]	; (8002980 <MX_GPIO_Init+0x1d0>)
 80028e4:	f003 f984 	bl	8005bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_WDT_Pin BQ_INT_Pin */
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 80028e8:	f241 0302 	movw	r3, #4098	; 0x1002
 80028ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4619      	mov	r1, r3
 80028fc:	4820      	ldr	r0, [pc, #128]	; (8002980 <MX_GPIO_Init+0x1d0>)
 80028fe:	f003 f977 	bl	8005bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP7_Pin TP8_Pin PB11 PB3 */
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8002902:	f640 430c 	movw	r3, #3084	; 0xc0c
 8002906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002908:	2303      	movs	r3, #3
 800290a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4619      	mov	r1, r3
 8002916:	481a      	ldr	r0, [pc, #104]	; (8002980 <MX_GPIO_Init+0x1d0>)
 8002918:	f003 f96a 	bl	8005bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST3_Pin */
  GPIO_InitStruct.Pin = RST3_Pin;
 800291c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002922:	2301      	movs	r3, #1
 8002924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002926:	2301      	movs	r3, #1
 8002928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2300      	movs	r3, #0
 800292c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST3_GPIO_Port, &GPIO_InitStruct);
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4619      	mov	r1, r3
 8002934:	4812      	ldr	r0, [pc, #72]	; (8002980 <MX_GPIO_Init+0x1d0>)
 8002936:	f003 f95b 	bl	8005bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST2_Pin */
  GPIO_InitStruct.Pin = RST2_Pin;
 800293a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800293e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002940:	2301      	movs	r3, #1
 8002942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002944:	2301      	movs	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST2_GPIO_Port, &GPIO_InitStruct);
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	4619      	mov	r1, r3
 8002952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002956:	f003 f94b 	bl	8005bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800295a:	2308      	movs	r3, #8
 800295c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800295e:	2303      	movs	r3, #3
 8002960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	4619      	mov	r1, r3
 800296c:	4806      	ldr	r0, [pc, #24]	; (8002988 <MX_GPIO_Init+0x1d8>)
 800296e:	f003 f93f 	bl	8005bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002972:	bf00      	nop
 8002974:	3728      	adds	r7, #40	; 0x28
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
 8002980:	48000400 	.word	0x48000400
 8002984:	48000800 	.word	0x48000800
 8002988:	48001c00 	.word	0x48001c00

0800298c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002990:	b672      	cpsid	i
}
 8002992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LED1_OFF();
 8002994:	2201      	movs	r2, #1
 8002996:	2120      	movs	r1, #32
 8002998:	4803      	ldr	r0, [pc, #12]	; (80029a8 <Error_Handler+0x1c>)
 800299a:	f003 fabb 	bl	8005f14 <HAL_GPIO_WritePin>
  LED2_ON();
 800299e:	201f      	movs	r0, #31
 80029a0:	f000 fcb2 	bl	8003308 <setLed2>
  while (1)
 80029a4:	e7fe      	b.n	80029a4 <Error_Handler+0x18>
 80029a6:	bf00      	nop
 80029a8:	48000400 	.word	0x48000400

080029ac <ms8607_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the ms8607 device.
 */
void ms8607_init(void)
{	
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
	hsensor_i2c_master_mode = ms8607_i2c_no_hold;
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <ms8607_init+0x18>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <ms8607_init+0x1c>)
 80029b8:	2205      	movs	r2, #5
 80029ba:	701a      	strb	r2, [r3, #0]
	
	/* Initialize and enable device with config. */
	i2c_master_init();
 80029bc:	f000 f84c 	bl	8002a58 <i2c_master_init>
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000858 	.word	0x20000858
 80029c8:	20000859 	.word	0x20000859

080029cc <ms8607_is_connected>:
 * \return bool : status of MS8607
 *       - true : Device is present
 *       - false : Device is not acknowledging I2C address
  */
bool ms8607_is_connected(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
	return (hsensor_is_connected() && psensor_is_connected());
 80029d0:	f000 f810 	bl	80029f4 <hsensor_is_connected>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d006      	beq.n	80029e8 <ms8607_is_connected+0x1c>
 80029da:	f000 f824 	bl	8002a26 <psensor_is_connected>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <ms8607_is_connected+0x1c>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <ms8607_is_connected+0x1e>
 80029e8:	2300      	movs	r3, #0
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	b2db      	uxtb	r3, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <hsensor_is_connected>:
 * \return bool : status of humidity sensor
 *       - true : Device is present
 *       - false : Device is not acknowledging I2C address
  */
bool hsensor_is_connected(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
	enum status_code i2c_status;
	
	struct i2c_master_packet transfer = {
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	80bb      	strh	r3, [r7, #4]
 80029fe:	2300      	movs	r3, #0
 8002a00:	80fb      	strh	r3, [r7, #6]
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
		.address     = HSENSOR_ADDR,
		.data_length = 0,
		.data        = NULL,
	};
	/* Do the transfer */
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 f82d 	bl	8002a68 <i2c_master_write_packet_wait>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	73fb      	strb	r3, [r7, #15]
	if( i2c_status != STATUS_OK)
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <hsensor_is_connected+0x28>
		return false;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e000      	b.n	8002a1e <hsensor_is_connected+0x2a>
	
	return true;
 8002a1c:	2301      	movs	r3, #1
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <psensor_is_connected>:
 * \return bool : status of Pressure sensor
 *       - true : Device is present
 *       - false : Device is not acknowledging I2C address
  */
bool psensor_is_connected(void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
	enum status_code i2c_status;
	
	struct i2c_master_packet transfer = {
 8002a2c:	23ec      	movs	r3, #236	; 0xec
 8002a2e:	80bb      	strh	r3, [r7, #4]
 8002a30:	2300      	movs	r3, #0
 8002a32:	80fb      	strh	r3, [r7, #6]
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
		.address     = PSENSOR_ADDR,
		.data_length = 0,
		.data        = NULL,
	};
	/* Do the transfer */
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f814 	bl	8002a68 <i2c_master_write_packet_wait>
 8002a40:	4603      	mov	r3, r0
 8002a42:	73fb      	strb	r3, [r7, #15]
	if( i2c_status != STATUS_OK)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <psensor_is_connected+0x28>
		return false;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e000      	b.n	8002a50 <psensor_is_connected+0x2a>
	
	return true;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <i2c_master_init>:

#include "ms8607.h"
#include "ms8607_i2c.h"

void i2c_master_init(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <i2c_master_write_packet_wait>:
    return (enum status_code)res;
}


enum status_code i2c_master_write_packet_wait(struct i2c_master_packet *const packet)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	6078      	str	r0, [r7, #4]
    uint8_t res = HAL_I2C_Master_Transmit(&hi2c2, packet->address, packet->data, packet->data_length, 20);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8819      	ldrh	r1, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	885b      	ldrh	r3, [r3, #2]
 8002a7c:	2014      	movs	r0, #20
 8002a7e:	9000      	str	r0, [sp, #0]
 8002a80:	4804      	ldr	r0, [pc, #16]	; (8002a94 <i2c_master_write_packet_wait+0x2c>)
 8002a82:	f003 fb09 	bl	8006098 <HAL_I2C_Master_Transmit>
 8002a86:	4603      	mov	r3, r0
 8002a88:	73fb      	strb	r3, [r7, #15]
    return (enum status_code)res;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000594 	.word	0x20000594

08002a98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <HAL_MspInit+0x48>)
 8002aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa2:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <HAL_MspInit+0x48>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <HAL_MspInit+0x48>)
 8002aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_MspInit+0x48>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <HAL_MspInit+0x48>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ac2:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <HAL_MspInit+0x48>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2005      	movs	r0, #5
 8002ad4:	f002 fbdb 	bl	800528e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b09a      	sub	sp, #104	; 0x68
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002aec:	f107 030c 	add.w	r3, r7, #12
 8002af0:	225c      	movs	r2, #92	; 0x5c
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f008 fce5 	bl	800b4c4 <memset>
  if(hadc->Instance==ADC1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <HAL_ADC_MspInit+0xd4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d155      	bne.n	8002bb0 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b08:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002b0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002b10:	2303      	movs	r3, #3
 8002b12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002b14:	2301      	movs	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002b18:	2308      	movs	r3, #8
 8002b1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002b1c:	2307      	movs	r3, #7
 8002b1e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002b20:	2302      	movs	r3, #2
 8002b22:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002b24:	2302      	movs	r3, #2
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b2e:	f107 030c 	add.w	r3, r7, #12
 8002b32:	4618      	mov	r0, r3
 8002b34:	f005 fa24 	bl	8007f80 <HAL_RCCEx_PeriphCLKConfig>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 8002b3e:	f7ff ff25 	bl	800298c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_ADC_MspInit+0xd8>)
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <HAL_ADC_MspInit+0xd8>)
 8002b48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_ADC_MspInit+0xd8>)
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_ADC_MspInit+0xdc>)
 8002b5c:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <HAL_ADC_MspInit+0xe0>)
 8002b5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002b60:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <HAL_ADC_MspInit+0xdc>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <HAL_ADC_MspInit+0xdc>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_ADC_MspInit+0xdc>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <HAL_ADC_MspInit+0xdc>)
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_ADC_MspInit+0xdc>)
 8002b7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b7e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <HAL_ADC_MspInit+0xdc>)
 8002b82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b86:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_ADC_MspInit+0xdc>)
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <HAL_ADC_MspInit+0xdc>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b94:	480a      	ldr	r0, [pc, #40]	; (8002bc0 <HAL_ADC_MspInit+0xdc>)
 8002b96:	f002 fdb5 	bl	8005704 <HAL_DMA_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8002ba0:	f7ff fef4 	bl	800298c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <HAL_ADC_MspInit+0xdc>)
 8002ba8:	64da      	str	r2, [r3, #76]	; 0x4c
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <HAL_ADC_MspInit+0xdc>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bb0:	bf00      	nop
 8002bb2:	3768      	adds	r7, #104	; 0x68
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	50040000 	.word	0x50040000
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	200004d4 	.word	0x200004d4
 8002bc4:	40020008 	.word	0x40020008

08002bc8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <HAL_CRC_MspInit+0x38>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d10b      	bne.n	8002bf2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_CRC_MspInit+0x3c>)
 8002bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bde:	4a09      	ldr	r2, [pc, #36]	; (8002c04 <HAL_CRC_MspInit+0x3c>)
 8002be0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002be4:	6493      	str	r3, [r2, #72]	; 0x48
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <HAL_CRC_MspInit+0x3c>)
 8002be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40023000 	.word	0x40023000
 8002c04:	40021000 	.word	0x40021000

08002c08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b0a6      	sub	sp, #152	; 0x98
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c24:	225c      	movs	r2, #92	; 0x5c
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f008 fc4b 	bl	800b4c4 <memset>
  if(hi2c->Instance==I2C1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a76      	ldr	r2, [pc, #472]	; (8002e0c <HAL_I2C_MspInit+0x204>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d13e      	bne.n	8002cb6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c38:	2340      	movs	r3, #64	; 0x40
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8002c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c40:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c46:	4618      	mov	r0, r3
 8002c48:	f005 f99a 	bl	8007f80 <HAL_RCCEx_PeriphCLKConfig>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c52:	f7ff fe9b 	bl	800298c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c56:	4b6e      	ldr	r3, [pc, #440]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	4a6d      	ldr	r2, [pc, #436]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c62:	4b6b      	ldr	r3, [pc, #428]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c76:	2312      	movs	r3, #18
 8002c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c82:	2303      	movs	r3, #3
 8002c84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c88:	2304      	movs	r3, #4
 8002c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c92:	4619      	mov	r1, r3
 8002c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c98:	f002 ffaa 	bl	8005bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c9c:	4b5c      	ldr	r3, [pc, #368]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca0:	4a5b      	ldr	r2, [pc, #364]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002ca2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ca8:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002cb4:	e0a6      	b.n	8002e04 <HAL_I2C_MspInit+0x1fc>
  else if(hi2c->Instance==I2C2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a56      	ldr	r2, [pc, #344]	; (8002e14 <HAL_I2C_MspInit+0x20c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d13d      	bne.n	8002d3c <HAL_I2C_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8002cc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f005 f956 	bl	8007f80 <HAL_RCCEx_PeriphCLKConfig>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002cda:	f7ff fe57 	bl	800298c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	4b4c      	ldr	r3, [pc, #304]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce2:	4a4b      	ldr	r2, [pc, #300]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cea:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002cf6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002cfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cfe:	2312      	movs	r3, #18
 8002d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d10:	2304      	movs	r3, #4
 8002d12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d16:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	483e      	ldr	r0, [pc, #248]	; (8002e18 <HAL_I2C_MspInit+0x210>)
 8002d1e:	f002 ff67 	bl	8005bf0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d22:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	4a3a      	ldr	r2, [pc, #232]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002d28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d2e:	4b38      	ldr	r3, [pc, #224]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	69bb      	ldr	r3, [r7, #24]
}
 8002d3a:	e063      	b.n	8002e04 <HAL_I2C_MspInit+0x1fc>
  else if(hi2c->Instance==I2C3)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a36      	ldr	r2, [pc, #216]	; (8002e1c <HAL_I2C_MspInit+0x214>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d15e      	bne.n	8002e04 <HAL_I2C_MspInit+0x1fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8002d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d50:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d56:	4618      	mov	r0, r3
 8002d58:	f005 f912 	bl	8007f80 <HAL_RCCEx_PeriphCLKConfig>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_MspInit+0x15e>
      Error_Handler();
 8002d62:	f7ff fe13 	bl	800298c <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d66:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6a:	4a29      	ldr	r2, [pc, #164]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d72:	4b27      	ldr	r3, [pc, #156]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7e:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	4a23      	ldr	r2, [pc, #140]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d8a:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d9c:	2312      	movs	r3, #18
 8002d9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da8:	2303      	movs	r3, #3
 8002daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002dae:	2304      	movs	r3, #4
 8002db0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002db8:	4619      	mov	r1, r3
 8002dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dbe:	f002 ff17 	bl	8005bf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002dc2:	2310      	movs	r3, #16
 8002dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dc8:	2312      	movs	r3, #18
 8002dca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002dda:	2304      	movs	r3, #4
 8002ddc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002de4:	4619      	mov	r1, r3
 8002de6:	480c      	ldr	r0, [pc, #48]	; (8002e18 <HAL_I2C_MspInit+0x210>)
 8002de8:	f002 ff02 	bl	8005bf0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df0:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002df2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002df6:	6593      	str	r3, [r2, #88]	; 0x58
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_I2C_MspInit+0x208>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
}
 8002e04:	bf00      	nop
 8002e06:	3798      	adds	r7, #152	; 0x98
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40005400 	.word	0x40005400
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40005800 	.word	0x40005800
 8002e18:	48000400 	.word	0x48000400
 8002e1c:	40005c00 	.word	0x40005c00

08002e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <HAL_TIM_Base_MspInit+0x38>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d10b      	bne.n	8002e4a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_TIM_Base_MspInit+0x3c>)
 8002e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_TIM_Base_MspInit+0x3c>)
 8002e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3c:	6613      	str	r3, [r2, #96]	; 0x60
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <HAL_TIM_Base_MspInit+0x3c>)
 8002e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40021000 	.word	0x40021000

08002e60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e68:	f107 030c 	add.w	r3, r7, #12
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <HAL_TIM_MspPostInit+0x64>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d11c      	bne.n	8002ebc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_TIM_MspPostInit+0x68>)
 8002e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e86:	4a10      	ldr	r2, [pc, #64]	; (8002ec8 <HAL_TIM_MspPostInit+0x68>)
 8002e88:	f043 0302 	orr.w	r3, r3, #2
 8002e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <HAL_TIM_MspPostInit+0x68>)
 8002e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = LED2_Pin;
 8002e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002eac:	230e      	movs	r3, #14
 8002eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002eb0:	f107 030c 	add.w	r3, r7, #12
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4805      	ldr	r0, [pc, #20]	; (8002ecc <HAL_TIM_MspPostInit+0x6c>)
 8002eb8:	f002 fe9a 	bl	8005bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002ebc:	bf00      	nop
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40014400 	.word	0x40014400
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	48000400 	.word	0x48000400

08002ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b0a2      	sub	sp, #136	; 0x88
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ee8:	f107 0318 	add.w	r3, r7, #24
 8002eec:	225c      	movs	r2, #92	; 0x5c
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f008 fae7 	bl	800b4c4 <memset>
  if(huart->Instance==USART1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a3f      	ldr	r2, [pc, #252]	; (8002ff8 <HAL_UART_MspInit+0x128>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d138      	bne.n	8002f72 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f00:	2301      	movs	r3, #1
 8002f02:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8002f04:	2301      	movs	r3, #1
 8002f06:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f08:	f107 0318 	add.w	r3, r7, #24
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f005 f837 	bl	8007f80 <HAL_RCCEx_PeriphCLKConfig>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f18:	f7ff fd38 	bl	800298c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f1c:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <HAL_UART_MspInit+0x12c>)
 8002f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f20:	4a36      	ldr	r2, [pc, #216]	; (8002ffc <HAL_UART_MspInit+0x12c>)
 8002f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f26:	6613      	str	r3, [r2, #96]	; 0x60
 8002f28:	4b34      	ldr	r3, [pc, #208]	; (8002ffc <HAL_UART_MspInit+0x12c>)
 8002f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f34:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <HAL_UART_MspInit+0x12c>)
 8002f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f38:	4a30      	ldr	r2, [pc, #192]	; (8002ffc <HAL_UART_MspInit+0x12c>)
 8002f3a:	f043 0302 	orr.w	r3, r3, #2
 8002f3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f40:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <HAL_UART_MspInit+0x12c>)
 8002f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f4c:	23c0      	movs	r3, #192	; 0xc0
 8002f4e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f5e:	2307      	movs	r3, #7
 8002f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4825      	ldr	r0, [pc, #148]	; (8003000 <HAL_UART_MspInit+0x130>)
 8002f6c:	f002 fe40 	bl	8005bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f70:	e03d      	b.n	8002fee <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART2)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a23      	ldr	r2, [pc, #140]	; (8003004 <HAL_UART_MspInit+0x134>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d138      	bne.n	8002fee <HAL_UART_MspInit+0x11e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002f80:	2304      	movs	r3, #4
 8002f82:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f84:	f107 0318 	add.w	r3, r7, #24
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f004 fff9 	bl	8007f80 <HAL_RCCEx_PeriphCLKConfig>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8002f94:	f7ff fcfa 	bl	800298c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f98:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_UART_MspInit+0x12c>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <HAL_UART_MspInit+0x12c>)
 8002f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa4:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <HAL_UART_MspInit+0x12c>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb0:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <HAL_UART_MspInit+0x12c>)
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb4:	4a11      	ldr	r2, [pc, #68]	; (8002ffc <HAL_UART_MspInit+0x12c>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <HAL_UART_MspInit+0x12c>)
 8002fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin|SIM_UART_RX_Pin;
 8002fc8:	230c      	movs	r3, #12
 8002fca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fda:	2307      	movs	r3, #7
 8002fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fea:	f002 fe01 	bl	8005bf0 <HAL_GPIO_Init>
}
 8002fee:	bf00      	nop
 8002ff0:	3788      	adds	r7, #136	; 0x88
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40013800 	.word	0x40013800
 8002ffc:	40021000 	.word	0x40021000
 8003000:	48000400 	.word	0x48000400
 8003004:	40004400 	.word	0x40004400

08003008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800300c:	e7fe      	b.n	800300c <NMI_Handler+0x4>

0800300e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003012:	e7fe      	b.n	8003012 <HardFault_Handler+0x4>

08003014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003018:	e7fe      	b.n	8003018 <MemManage_Handler+0x4>

0800301a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800301e:	e7fe      	b.n	800301e <BusFault_Handler+0x4>

08003020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003024:	e7fe      	b.n	8003024 <UsageFault_Handler+0x4>

08003026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003054:	f000 fe3e 	bl	8003cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003058:	f002 f94f 	bl	80052fa <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800305c:	bf00      	nop
 800305e:	bd80      	pop	{r7, pc}

08003060 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <DMA1_Channel1_IRQHandler+0x10>)
 8003066:	f002 fce4 	bl	8005a32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200004d4 	.word	0x200004d4

08003074 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003078:	4802      	ldr	r0, [pc, #8]	; (8003084 <USART1_IRQHandler+0x10>)
 800307a:	f006 f9ed 	bl	8009458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000688 	.word	0x20000688

08003088 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800308c:	4802      	ldr	r0, [pc, #8]	; (8003098 <USART2_IRQHandler+0x10>)
 800308e:	f006 f9e3 	bl	8009458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	2000070c 	.word	0x2000070c

0800309c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return 1;
 80030a0:	2301      	movs	r3, #1
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <_kill>:

int _kill(int pid, int sig)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030b6:	f008 fa57 	bl	800b568 <__errno>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2216      	movs	r2, #22
 80030be:	601a      	str	r2, [r3, #0]
  return -1;
 80030c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <_exit>:

void _exit (int status)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030d4:	f04f 31ff 	mov.w	r1, #4294967295
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff ffe7 	bl	80030ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80030de:	e7fe      	b.n	80030de <_exit+0x12>

080030e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	e00a      	b.n	8003108 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030f2:	f3af 8000 	nop.w
 80030f6:	4601      	mov	r1, r0
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	60ba      	str	r2, [r7, #8]
 80030fe:	b2ca      	uxtb	r2, r1
 8003100:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	3301      	adds	r3, #1
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	dbf0      	blt.n	80030f2 <_read+0x12>
  }

  return len;
 8003110:	687b      	ldr	r3, [r7, #4]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <_close>:
  }
  return len;
}

int _close(int file)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003142:	605a      	str	r2, [r3, #4]
  return 0;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <_isatty>:

int _isatty(int file)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800315a:	2301      	movs	r3, #1
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800318c:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <_sbrk+0x5c>)
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <_sbrk+0x60>)
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003198:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <_sbrk+0x64>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031a0:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <_sbrk+0x64>)
 80031a2:	4a12      	ldr	r2, [pc, #72]	; (80031ec <_sbrk+0x68>)
 80031a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <_sbrk+0x64>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d207      	bcs.n	80031c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031b4:	f008 f9d8 	bl	800b568 <__errno>
 80031b8:	4603      	mov	r3, r0
 80031ba:	220c      	movs	r2, #12
 80031bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031be:	f04f 33ff 	mov.w	r3, #4294967295
 80031c2:	e009      	b.n	80031d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <_sbrk+0x64>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ca:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <_sbrk+0x64>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	4a05      	ldr	r2, [pc, #20]	; (80031e8 <_sbrk+0x64>)
 80031d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031d6:	68fb      	ldr	r3, [r7, #12]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20010000 	.word	0x20010000
 80031e4:	00000400 	.word	0x00000400
 80031e8:	2000085c 	.word	0x2000085c
 80031ec:	200009c8 	.word	0x200009c8

080031f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <SystemInit+0x20>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	4a05      	ldr	r2, [pc, #20]	; (8003210 <SystemInit+0x20>)
 80031fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <HAL_SYSTICK_Callback>:
volatile uint8_t device_state = 0;
volatile uint32_t offTim;


void HAL_SYSTICK_Callback(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
	static uint32_t led2swp, led2lev;

    if(led2_tim && ++led2swp >= led2_tim)
 8003218:	4b2e      	ldr	r3, [pc, #184]	; (80032d4 <HAL_SYSTICK_Callback+0xc0>)
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d04b      	beq.n	80032b8 <HAL_SYSTICK_Callback+0xa4>
 8003220:	4b2d      	ldr	r3, [pc, #180]	; (80032d8 <HAL_SYSTICK_Callback+0xc4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3301      	adds	r3, #1
 8003226:	4a2c      	ldr	r2, [pc, #176]	; (80032d8 <HAL_SYSTICK_Callback+0xc4>)
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_SYSTICK_Callback+0xc4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a29      	ldr	r2, [pc, #164]	; (80032d4 <HAL_SYSTICK_Callback+0xc0>)
 8003230:	8812      	ldrh	r2, [r2, #0]
 8003232:	4293      	cmp	r3, r2
 8003234:	d340      	bcc.n	80032b8 <HAL_SYSTICK_Callback+0xa4>
    {
        led2swp = 0;
 8003236:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <HAL_SYSTICK_Callback+0xc4>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
        if(++led2lev >= 64 + (led2_cycles>>16))
 800323c:	4b27      	ldr	r3, [pc, #156]	; (80032dc <HAL_SYSTICK_Callback+0xc8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3301      	adds	r3, #1
 8003242:	4a26      	ldr	r2, [pc, #152]	; (80032dc <HAL_SYSTICK_Callback+0xc8>)
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b25      	ldr	r3, [pc, #148]	; (80032dc <HAL_SYSTICK_Callback+0xc8>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <HAL_SYSTICK_Callback+0xcc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	0c1b      	lsrs	r3, r3, #16
 8003250:	3340      	adds	r3, #64	; 0x40
 8003252:	429a      	cmp	r2, r3
 8003254:	d316      	bcc.n	8003284 <HAL_SYSTICK_Callback+0x70>
        {
            led2lev = 0;
 8003256:	4b21      	ldr	r3, [pc, #132]	; (80032dc <HAL_SYSTICK_Callback+0xc8>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
            if((led2_cycles & 0xFFFF) != 0xFFFF) led2_cycles--;
 800325c:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_SYSTICK_Callback+0xcc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	b29b      	uxth	r3, r3
 8003262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003266:	4293      	cmp	r3, r2
 8003268:	d004      	beq.n	8003274 <HAL_SYSTICK_Callback+0x60>
 800326a:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_SYSTICK_Callback+0xcc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3b01      	subs	r3, #1
 8003270:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <HAL_SYSTICK_Callback+0xcc>)
 8003272:	6013      	str	r3, [r2, #0]
            if((led2_cycles & 0xFFFF) == 0) led2_tim = 0;
 8003274:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <HAL_SYSTICK_Callback+0xcc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <HAL_SYSTICK_Callback+0x70>
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <HAL_SYSTICK_Callback+0xc0>)
 8003280:	2200      	movs	r2, #0
 8003282:	801a      	strh	r2, [r3, #0]
        }
        if(led2lev>=64) setLed2(0); else setLed2((led2lev<32) ? led2lev : 63-led2lev);
 8003284:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_SYSTICK_Callback+0xc8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b3f      	cmp	r3, #63	; 0x3f
 800328a:	d903      	bls.n	8003294 <HAL_SYSTICK_Callback+0x80>
 800328c:	2000      	movs	r0, #0
 800328e:	f000 f83b 	bl	8003308 <setLed2>
 8003292:	e01c      	b.n	80032ce <HAL_SYSTICK_Callback+0xba>
 8003294:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_SYSTICK_Callback+0xc8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b1f      	cmp	r3, #31
 800329a:	d906      	bls.n	80032aa <HAL_SYSTICK_Callback+0x96>
 800329c:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <HAL_SYSTICK_Callback+0xc8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	e002      	b.n	80032b0 <HAL_SYSTICK_Callback+0x9c>
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_SYSTICK_Callback+0xc8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 f829 	bl	8003308 <setLed2>
 80032b6:	e00a      	b.n	80032ce <HAL_SYSTICK_Callback+0xba>
     } else if(led2_tim == 0) {led2swp=0; led2lev=0;}
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_SYSTICK_Callback+0xc0>)
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d106      	bne.n	80032ce <HAL_SYSTICK_Callback+0xba>
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_SYSTICK_Callback+0xc4>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_SYSTICK_Callback+0xc8>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

}
 80032cc:	e7ff      	b.n	80032ce <HAL_SYSTICK_Callback+0xba>
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000860 	.word	0x20000860
 80032d8:	2000086c 	.word	0x2000086c
 80032dc:	20000870 	.word	0x20000870
 80032e0:	20000864 	.word	0x20000864

080032e4 <setPwmLed>:


void setPwmLed(uint8_t pwm)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, pwm);
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <setPwmLed+0x20>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	79fa      	ldrb	r2, [r7, #7]
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	2000063c 	.word	0x2000063c

08003308 <setLed2>:

void setLed2(uint8_t bri)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
    setPwmLed(bri_corr[bri]);
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	4a04      	ldr	r2, [pc, #16]	; (8003328 <setLed2+0x20>)
 8003316:	5cd3      	ldrb	r3, [r2, r3]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ffe3 	bl	80032e4 <setPwmLed>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	0800d64c 	.word	0x0800d64c

0800332c <check_powerOn>:
    led2_tim = spd;
    led2_cycles = cnt | (wait<<16);
}

void check_powerOn()
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
	  POWER_OFF();
 8003332:	2200      	movs	r2, #0
 8003334:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003338:	4815      	ldr	r0, [pc, #84]	; (8003390 <check_powerOn+0x64>)
 800333a:	f002 fdeb 	bl	8005f14 <HAL_GPIO_WritePin>
	  printf("1. Check Power ON\r\n");
 800333e:	4815      	ldr	r0, [pc, #84]	; (8003394 <check_powerOn+0x68>)
 8003340:	f007 ffe0 	bl	800b304 <puts>
	  uint32_t timon = HAL_GetTick();
 8003344:	f000 fcda 	bl	8003cfc <HAL_GetTick>
 8003348:	6078      	str	r0, [r7, #4]
	  while(Power_SW_READ() == GPIO_PIN_SET)
 800334a:	e014      	b.n	8003376 <check_powerOn+0x4a>
	  {
//		  printf("2. Check Power BUT\r\n");
	    if(HAL_GetTick() - timon > 1000)     // 1 sec pushing
 800334c:	f000 fcd6 	bl	8003cfc <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800335a:	d90c      	bls.n	8003376 <check_powerOn+0x4a>
	    {
	    	timon = HAL_GetTick();
 800335c:	f000 fcce 	bl	8003cfc <HAL_GetTick>
 8003360:	6078      	str	r0, [r7, #4]
	        POWER_ON();    // pull-up power supply
 8003362:	2201      	movs	r2, #1
 8003364:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003368:	4809      	ldr	r0, [pc, #36]	; (8003390 <check_powerOn+0x64>)
 800336a:	f002 fdd3 	bl	8005f14 <HAL_GPIO_WritePin>
	    	printf("Power ON\r\n");
 800336e:	480a      	ldr	r0, [pc, #40]	; (8003398 <check_powerOn+0x6c>)
 8003370:	f007 ffc8 	bl	800b304 <puts>
	        break;                // break while loop
 8003374:	e008      	b.n	8003388 <check_powerOn+0x5c>
	  while(Power_SW_READ() == GPIO_PIN_SET)
 8003376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800337a:	4808      	ldr	r0, [pc, #32]	; (800339c <check_powerOn+0x70>)
 800337c:	f002 fdb2 	bl	8005ee4 <HAL_GPIO_ReadPin>
 8003380:	4603      	mov	r3, r0
 8003382:	2b01      	cmp	r3, #1
 8003384:	d0e2      	beq.n	800334c <check_powerOn+0x20>
	    }
	  }
}
 8003386:	bf00      	nop
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	48000400 	.word	0x48000400
 8003394:	0800d4c8 	.word	0x0800d4c8
 8003398:	0800d4dc 	.word	0x0800d4dc
 800339c:	48000800 	.word	0x48000800

080033a0 <check_powerOff>:

void check_powerOff()
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  if(Power_SW_READ()) //power button pressed
 80033a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033a8:	4817      	ldr	r0, [pc, #92]	; (8003408 <check_powerOff+0x68>)
 80033aa:	f002 fd9b 	bl	8005ee4 <HAL_GPIO_ReadPin>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d022      	beq.n	80033fa <check_powerOff+0x5a>
  {
     if(offTim && HAL_GetTick() - offTim > 2000)    // 2 sec pressed
 80033b4:	4b15      	ldr	r3, [pc, #84]	; (800340c <check_powerOff+0x6c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d023      	beq.n	8003404 <check_powerOff+0x64>
 80033bc:	f000 fc9e 	bl	8003cfc <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b12      	ldr	r3, [pc, #72]	; (800340c <check_powerOff+0x6c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033cc:	d91a      	bls.n	8003404 <check_powerOff+0x64>
     {
    	 printf("Power off\r\n");
 80033ce:	4810      	ldr	r0, [pc, #64]	; (8003410 <check_powerOff+0x70>)
 80033d0:	f007 ff98 	bl	800b304 <puts>
    	 POWER_OFF();
 80033d4:	2200      	movs	r2, #0
 80033d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033da:	480e      	ldr	r0, [pc, #56]	; (8003414 <check_powerOff+0x74>)
 80033dc:	f002 fd9a 	bl	8005f14 <HAL_GPIO_WritePin>
    	 HAL_Delay(3000);
 80033e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80033e4:	f000 fc96 	bl	8003d14 <HAL_Delay>
    	 LED1_OFF();
 80033e8:	2201      	movs	r2, #1
 80033ea:	2120      	movs	r1, #32
 80033ec:	4809      	ldr	r0, [pc, #36]	; (8003414 <check_powerOff+0x74>)
 80033ee:	f002 fd91 	bl	8005f14 <HAL_GPIO_WritePin>
    	 LED2_OFF();
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7ff ff88 	bl	8003308 <setLed2>
     }
  } else offTim = HAL_GetTick();   // button released, update offTim

}
 80033f8:	e004      	b.n	8003404 <check_powerOff+0x64>
  } else offTim = HAL_GetTick();   // button released, update offTim
 80033fa:	f000 fc7f 	bl	8003cfc <HAL_GetTick>
 80033fe:	4603      	mov	r3, r0
 8003400:	4a02      	ldr	r2, [pc, #8]	; (800340c <check_powerOff+0x6c>)
 8003402:	6013      	str	r3, [r2, #0]
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}
 8003408:	48000800 	.word	0x48000800
 800340c:	20000868 	.word	0x20000868
 8003410:	0800d4e8 	.word	0x0800d4e8
 8003414:	48000400 	.word	0x48000400

08003418 <thp_loop>:
    POWER_OFF();
    HAL_PWR_EnterSTANDBYMode();
}

void thp_loop()
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
	CLI();
 800341c:	f7fe f978 	bl	8001710 <CLI>
}
 8003420:	bf00      	nop
 8003422:	bd80      	pop	{r7, pc}

08003424 <HALcalculateCRC>:

uint8_t HALcalculateCRC(uint8_t* data, uint8_t len)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	70fb      	strb	r3, [r7, #3]
    HAL_CRC_Init(&hcrc);
 8003430:	480b      	ldr	r0, [pc, #44]	; (8003460 <HALcalculateCRC+0x3c>)
 8003432:	f001 ff69 	bl	8005308 <HAL_CRC_Init>
    __HAL_CRC_DR_RESET(&hcrc);
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HALcalculateCRC+0x3c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	4b08      	ldr	r3, [pc, #32]	; (8003460 <HALcalculateCRC+0x3c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0201 	orr.w	r2, r2, #1
 8003444:	609a      	str	r2, [r3, #8]
    uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, len);
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	461a      	mov	r2, r3
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4804      	ldr	r0, [pc, #16]	; (8003460 <HALcalculateCRC+0x3c>)
 800344e:	f001 ffbf 	bl	80053d0 <HAL_CRC_Calculate>
 8003452:	60f8      	str	r0, [r7, #12]
    return (uint8_t)(crc & 0xFF);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	b2db      	uxtb	r3, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	2000051c 	.word	0x2000051c

08003464 <i2c_read8>:
#include <math.h>



uint8_t i2c_read8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t *value, uint8_t addr)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08a      	sub	sp, #40	; 0x28
 8003468:	af04      	add	r7, sp, #16
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	461a      	mov	r2, r3
 8003470:	460b      	mov	r3, r1
 8003472:	817b      	strh	r3, [r7, #10]
 8003474:	4613      	mov	r3, r2
 8003476:	727b      	strb	r3, [r7, #9]
	uint8_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8003478:	7a7b      	ldrb	r3, [r7, #9]
 800347a:	b299      	uxth	r1, r3
 800347c:	897a      	ldrh	r2, [r7, #10]
 800347e:	2308      	movs	r3, #8
 8003480:	9302      	str	r3, [sp, #8]
 8003482:	2301      	movs	r3, #1
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	f107 0316 	add.w	r3, r7, #22
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	2301      	movs	r3, #1
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f003 f900 	bl	8006694 <HAL_I2C_Mem_Read>
 8003494:	4603      	mov	r3, r0
 8003496:	75fb      	strb	r3, [r7, #23]
    *value = tmp;
 8003498:	7dba      	ldrb	r2, [r7, #22]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	701a      	strb	r2, [r3, #0]
    return res;
 800349e:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <i2c_read16>:

uint8_t i2c_read16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t *value, uint8_t addr)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af04      	add	r7, sp, #16
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	461a      	mov	r2, r3
 80034b4:	460b      	mov	r3, r1
 80034b6:	817b      	strh	r3, [r7, #10]
 80034b8:	4613      	mov	r3, r2
 80034ba:	727b      	strb	r3, [r7, #9]
	uint16_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80034bc:	7a7b      	ldrb	r3, [r7, #9]
 80034be:	b299      	uxth	r1, r3
 80034c0:	897a      	ldrh	r2, [r7, #10]
 80034c2:	2308      	movs	r3, #8
 80034c4:	9302      	str	r3, [sp, #8]
 80034c6:	2302      	movs	r3, #2
 80034c8:	9301      	str	r3, [sp, #4]
 80034ca:	f107 0314 	add.w	r3, r7, #20
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2301      	movs	r3, #1
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f003 f8de 	bl	8006694 <HAL_I2C_Mem_Read>
 80034d8:	4603      	mov	r3, r0
 80034da:	75fb      	strb	r3, [r7, #23]
    *value = tmp;
 80034dc:	8aba      	ldrh	r2, [r7, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	801a      	strh	r2, [r3, #0]
    return res;
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <i2c_write8>:
    *value = tmp;
    return res;
}

uint8_t i2c_write8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t value, uint8_t addr)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af04      	add	r7, sp, #16
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	4608      	mov	r0, r1
 80034f6:	4611      	mov	r1, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	807b      	strh	r3, [r7, #2]
 80034fe:	460b      	mov	r3, r1
 8003500:	707b      	strb	r3, [r7, #1]
 8003502:	4613      	mov	r3, r2
 8003504:	703b      	strb	r3, [r7, #0]
	uint8_t tmp = value;
 8003506:	787b      	ldrb	r3, [r7, #1]
 8003508:	73bb      	strb	r3, [r7, #14]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 800350a:	783b      	ldrb	r3, [r7, #0]
 800350c:	b299      	uxth	r1, r3
 800350e:	887a      	ldrh	r2, [r7, #2]
 8003510:	2308      	movs	r3, #8
 8003512:	9302      	str	r3, [sp, #8]
 8003514:	2301      	movs	r3, #1
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	f107 030e 	add.w	r3, r7, #14
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	2301      	movs	r3, #1
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f002 ffa3 	bl	800646c <HAL_I2C_Mem_Write>
 8003526:	4603      	mov	r3, r0
 8003528:	73fb      	strb	r3, [r7, #15]
    return res;
 800352a:	7bfb      	ldrb	r3, [r7, #15]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <setBit>:
    i2c_read16(i2c, sub_address, &old_word, addr);
    old_word |= new_word;
    i2c_write16(i2c, sub_address, old_word, addr);
}

void setBit(unsigned char* reg, int bitNumber, int value) {
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
    if (value == 0) {
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10f      	bne.n	8003566 <setBit+0x32>
        *reg &= ~(1 << bitNumber);  // Ustawienie bitu na 0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	b25a      	sxtb	r2, r3
 800354c:	2101      	movs	r1, #1
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	b25b      	sxtb	r3, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	b25b      	sxtb	r3, r3
 800355a:	4013      	ands	r3, r2
 800355c:	b25b      	sxtb	r3, r3
 800355e:	b2da      	uxtb	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	701a      	strb	r2, [r3, #0]
    } else if (value == 1) {
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
    }
}
 8003564:	e00f      	b.n	8003586 <setBit+0x52>
    } else if (value == 1) {
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d10c      	bne.n	8003586 <setBit+0x52>
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	b25a      	sxtb	r2, r3
 8003572:	2101      	movs	r1, #1
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	b25b      	sxtb	r3, r3
 800357c:	4313      	orrs	r3, r2
 800357e:	b25b      	sxtb	r3, r3
 8003580:	b2da      	uxtb	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	701a      	strb	r2, [r3, #0]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <modifyRegister>:

void modifyRegister(unsigned char* reg, unsigned char mask, unsigned char value) {
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	460b      	mov	r3, r1
 800359c:	70fb      	strb	r3, [r7, #3]
 800359e:	4613      	mov	r3, r2
 80035a0:	70bb      	strb	r3, [r7, #2]
    *reg = (*reg & ~mask) | (value & mask);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	b25a      	sxtb	r2, r3
 80035a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	b25b      	sxtb	r3, r3
 80035b0:	4013      	ands	r3, r2
 80035b2:	b25a      	sxtb	r2, r3
 80035b4:	78b9      	ldrb	r1, [r7, #2]
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	400b      	ands	r3, r1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	b25b      	sxtb	r3, r3
 80035be:	4313      	orrs	r3, r2
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	701a      	strb	r2, [r3, #0]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <i2c_scan>:

void i2c_scan(I2C_HandleTypeDef * i2c, uint8_t addr_min, uint8_t addr_max)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	70fb      	strb	r3, [r7, #3]
 80035e0:	4613      	mov	r3, r2
 80035e2:	70bb      	strb	r3, [r7, #2]
	printf("Scanning I2C devices ...\r\n");
 80035e4:	4818      	ldr	r0, [pc, #96]	; (8003648 <i2c_scan+0x74>)
 80035e6:	f007 fe8d 	bl	800b304 <puts>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	73fb      	strb	r3, [r7, #15]
 80035ee:	e022      	b.n	8003636 <i2c_scan+0x62>
	{
		HAL_StatusTypeDef status;
		status = HAL_I2C_IsDeviceReady(i2c, addr << 1, 3, 500);
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	b299      	uxth	r1, r3
 80035f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80035fc:	2203      	movs	r2, #3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f003 f962 	bl	80068c8 <HAL_I2C_IsDeviceReady>
 8003604:	4603      	mov	r3, r0
 8003606:	73bb      	strb	r3, [r7, #14]
		HAL_Delay(100);
 8003608:	2064      	movs	r0, #100	; 0x64
 800360a:	f000 fb83 	bl	8003d14 <HAL_Delay>
		if (status == HAL_OK) {
 800360e:	7bbb      	ldrb	r3, [r7, #14]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d105      	bne.n	8003620 <i2c_scan+0x4c>
			    	printf("Device found on %#x \r\n", addr);
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	4619      	mov	r1, r3
 8003618:	480c      	ldr	r0, [pc, #48]	; (800364c <i2c_scan+0x78>)
 800361a:	f007 fe0d 	bl	800b238 <iprintf>
 800361e:	e007      	b.n	8003630 <i2c_scan+0x5c>
			    } else {
			    	printf("Device NOTfound on %#x \r\n", addr);
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	4619      	mov	r1, r3
 8003624:	480a      	ldr	r0, [pc, #40]	; (8003650 <i2c_scan+0x7c>)
 8003626:	f007 fe07 	bl	800b238 <iprintf>
			    	HAL_Delay(100);
 800362a:	2064      	movs	r0, #100	; 0x64
 800362c:	f000 fb72 	bl	8003d14 <HAL_Delay>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	3301      	adds	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
 8003636:	7bfa      	ldrb	r2, [r7, #15]
 8003638:	78bb      	ldrb	r3, [r7, #2]
 800363a:	429a      	cmp	r2, r3
 800363c:	d9d8      	bls.n	80035f0 <i2c_scan+0x1c>
			    }
	}
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	0800d4fc 	.word	0x0800d4fc
 800364c:	0800d518 	.word	0x0800d518
 8003650:	0800d530 	.word	0x0800d530

08003654 <byteswap16>:

uint16_t byteswap16 (uint16_t bytes)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	80fb      	strh	r3, [r7, #6]
	return ((bytes & 0xFF) << 8) | ((bytes >> 8) & 0xFF);
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	b21a      	sxth	r2, r3
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	b29b      	uxth	r3, r3
 800366a:	b21b      	sxth	r3, r3
 800366c:	4313      	orrs	r3, r2
 800366e:	b21b      	sxth	r3, r3
 8003670:	b29b      	uxth	r3, r3
}
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <TCA9543A_SelectChannel>:
  }
  printf("\r\n");
}

void TCA9543A_SelectChannel(uint8_t channel)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af02      	add	r7, sp, #8
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
	if (channel == 1 || channel == 2) {
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d002      	beq.n	8003696 <TCA9543A_SelectChannel+0x16>
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d11f      	bne.n	80036d6 <TCA9543A_SelectChannel+0x56>
			I2C2TCA_NRST();
 8003696:	2201      	movs	r2, #1
 8003698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800369c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036a0:	f002 fc38 	bl	8005f14 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80036a4:	2001      	movs	r0, #1
 80036a6:	f000 fb35 	bl	8003d14 <HAL_Delay>
		    uint8_t data = (1 << (channel - 1));
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	2201      	movs	r2, #1
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	73fb      	strb	r3, [r7, #15]
		    HAL_I2C_Master_Transmit(&hi2c2, TCA9543A_ADDRESS, &data, sizeof(data), HAL_MAX_DELAY);
 80036b8:	f107 020f 	add.w	r2, r7, #15
 80036bc:	f04f 33ff 	mov.w	r3, #4294967295
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	2301      	movs	r3, #1
 80036c4:	21e4      	movs	r1, #228	; 0xe4
 80036c6:	480e      	ldr	r0, [pc, #56]	; (8003700 <TCA9543A_SelectChannel+0x80>)
 80036c8:	f002 fce6 	bl	8006098 <HAL_I2C_Master_Transmit>
		    HAL_Delay(1);
 80036cc:	2001      	movs	r0, #1
 80036ce:	f000 fb21 	bl	8003d14 <HAL_Delay>
	if (channel == 1 || channel == 2) {
 80036d2:	bf00      	nop
	} else if (channel == 0) {I2C2TCA_RST(); HAL_Delay(1);}
	else printf("Wrong parameter\r\n");
}
 80036d4:	e010      	b.n	80036f8 <TCA9543A_SelectChannel+0x78>
	} else if (channel == 0) {I2C2TCA_RST(); HAL_Delay(1);}
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <TCA9543A_SelectChannel+0x72>
 80036dc:	2200      	movs	r2, #0
 80036de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036e6:	f002 fc15 	bl	8005f14 <HAL_GPIO_WritePin>
 80036ea:	2001      	movs	r0, #1
 80036ec:	f000 fb12 	bl	8003d14 <HAL_Delay>
}
 80036f0:	e002      	b.n	80036f8 <TCA9543A_SelectChannel+0x78>
	else printf("Wrong parameter\r\n");
 80036f2:	4804      	ldr	r0, [pc, #16]	; (8003704 <TCA9543A_SelectChannel+0x84>)
 80036f4:	f007 fe06 	bl	800b304 <puts>
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20000594 	.word	0x20000594
 8003704:	0800d550 	.word	0x0800d550

08003708 <SET_DPS368>:
{
	TCA9543A_SelectChannel(1);
}

void SET_DPS368()
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
	TCA9543A_SelectChannel(2);
 800370c:	2002      	movs	r0, #2
 800370e:	f7ff ffb7 	bl	8003680 <TCA9543A_SelectChannel>
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}

08003716 <UNSET_BME_DPS>:

void UNSET_BME_DPS()
{
 8003716:	b580      	push	{r7, lr}
 8003718:	af00      	add	r7, sp, #0
	TCA9543A_SelectChannel(0);
 800371a:	2000      	movs	r0, #0
 800371c:	f7ff ffb0 	bl	8003680 <TCA9543A_SelectChannel>
}
 8003720:	bf00      	nop
 8003722:	bd80      	pop	{r7, pc}

08003724 <TMP117_check>:


uint8_t TMP117_check()
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR << 1, 3, 500);
 800372a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800372e:	2203      	movs	r2, #3
 8003730:	2192      	movs	r1, #146	; 0x92
 8003732:	4814      	ldr	r0, [pc, #80]	; (8003784 <TMP117_check+0x60>)
 8003734:	f003 f8c8 	bl	80068c8 <HAL_I2C_IsDeviceReady>
 8003738:	4603      	mov	r3, r0
 800373a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 800373c:	2064      	movs	r0, #100	; 0x64
 800373e:	f000 fae9 	bl	8003d14 <HAL_Delay>
	if (status == HAL_OK) {
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d114      	bne.n	8003772 <TMP117_check+0x4e>
		uint16_t value;
		i2c_read16(&hi2c2, TMP117_ID_REG, &value, TMP117_ADDR << 1);
 8003748:	1d3a      	adds	r2, r7, #4
 800374a:	2392      	movs	r3, #146	; 0x92
 800374c:	210f      	movs	r1, #15
 800374e:	480d      	ldr	r0, [pc, #52]	; (8003784 <TMP117_check+0x60>)
 8003750:	f7ff feaa 	bl	80034a8 <i2c_read16>
		if(value == TMP117_ID) {printf("TMP117 OK\r\n"); return 1;} else {printf("NOT TMP117\r\n"); return 0;}
 8003754:	88bb      	ldrh	r3, [r7, #4]
 8003756:	f241 7201 	movw	r2, #5889	; 0x1701
 800375a:	4293      	cmp	r3, r2
 800375c:	d104      	bne.n	8003768 <TMP117_check+0x44>
 800375e:	480a      	ldr	r0, [pc, #40]	; (8003788 <TMP117_check+0x64>)
 8003760:	f007 fdd0 	bl	800b304 <puts>
 8003764:	2301      	movs	r3, #1
 8003766:	e008      	b.n	800377a <TMP117_check+0x56>
 8003768:	4808      	ldr	r0, [pc, #32]	; (800378c <TMP117_check+0x68>)
 800376a:	f007 fdcb 	bl	800b304 <puts>
 800376e:	2300      	movs	r3, #0
 8003770:	e003      	b.n	800377a <TMP117_check+0x56>
	} else {printf("TMP117 FAILED\r\n"); return 0;}
 8003772:	4807      	ldr	r0, [pc, #28]	; (8003790 <TMP117_check+0x6c>)
 8003774:	f007 fdc6 	bl	800b304 <puts>
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000594 	.word	0x20000594
 8003788:	0800d564 	.word	0x0800d564
 800378c:	0800d570 	.word	0x0800d570
 8003790:	0800d57c 	.word	0x0800d57c

08003794 <MS8607_check>:
    return (float)byteswap16(value) * TMP117_RESOLUTION;
}


uint8_t MS8607_check()
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
	ms8607_init();
 8003798:	f7ff f908 	bl	80029ac <ms8607_init>
	if(ms8607_is_connected()) {printf("MS8607 OK\r\n"); return 1;
 800379c:	f7ff f916 	bl	80029cc <ms8607_is_connected>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d004      	beq.n	80037b0 <MS8607_check+0x1c>
 80037a6:	4805      	ldr	r0, [pc, #20]	; (80037bc <MS8607_check+0x28>)
 80037a8:	f007 fdac 	bl	800b304 <puts>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e003      	b.n	80037b8 <MS8607_check+0x24>
	} else {printf("MS8607 FAIL\r\n"); return 0;};
 80037b0:	4803      	ldr	r0, [pc, #12]	; (80037c0 <MS8607_check+0x2c>)
 80037b2:	f007 fda7 	bl	800b304 <puts>
 80037b6:	2300      	movs	r3, #0
	ms8607_reset();
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	0800d58c 	.word	0x0800d58c
 80037c0:	0800d598 	.word	0x0800d598

080037c4 <SHTC3_wakeup>:
//	printf("MS Hum: %f\r\n",hum);
	return hum;
}

uint8_t SHTC3_wakeup()
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status;
	uint16_t command = SHTC3_CMD_WAKEUP;
 80037ca:	f241 7335 	movw	r3, #5941	; 0x1735
 80037ce:	80bb      	strh	r3, [r7, #4]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 3, 150);
 80037d0:	1d3a      	adds	r2, r7, #4
 80037d2:	2396      	movs	r3, #150	; 0x96
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2303      	movs	r3, #3
 80037d8:	21e0      	movs	r1, #224	; 0xe0
 80037da:	4809      	ldr	r0, [pc, #36]	; (8003800 <SHTC3_wakeup+0x3c>)
 80037dc:	f002 fc5c 	bl	8006098 <HAL_I2C_Master_Transmit>
 80037e0:	4603      	mov	r3, r0
 80037e2:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(13);
 80037e4:	200d      	movs	r0, #13
 80037e6:	f000 fa95 	bl	8003d14 <HAL_Delay>
	if(status == HAL_OK) return 1;
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <SHTC3_wakeup+0x30>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <SHTC3_wakeup+0x32>
	else return 0;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000594 	.word	0x20000594

08003804 <SHTC3_sleep>:

uint8_t SHTC3_sleep()
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status;
	uint16_t command = SHTC3_CMD_SLEEP;
 800380a:	f649 03b0 	movw	r3, #39088	; 0x98b0
 800380e:	80bb      	strh	r3, [r7, #4]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 3, 150);
 8003810:	1d3a      	adds	r2, r7, #4
 8003812:	2396      	movs	r3, #150	; 0x96
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2303      	movs	r3, #3
 8003818:	21e0      	movs	r1, #224	; 0xe0
 800381a:	4809      	ldr	r0, [pc, #36]	; (8003840 <SHTC3_sleep+0x3c>)
 800381c:	f002 fc3c 	bl	8006098 <HAL_I2C_Master_Transmit>
 8003820:	4603      	mov	r3, r0
 8003822:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8003824:	2002      	movs	r0, #2
 8003826:	f000 fa75 	bl	8003d14 <HAL_Delay>
	if(status == HAL_OK) return 1;
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <SHTC3_sleep+0x30>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <SHTC3_sleep+0x32>
	else return 0;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000594 	.word	0x20000594

08003844 <SHTC3_check>:


uint8_t SHTC3_check()
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status, status2;
	uint8_t data[2];
	status = HAL_I2C_IsDeviceReady(&hi2c2, SHTC3_ADDR_WRITE, 3, 500);
 800384a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800384e:	2203      	movs	r2, #3
 8003850:	21e0      	movs	r1, #224	; 0xe0
 8003852:	4828      	ldr	r0, [pc, #160]	; (80038f4 <SHTC3_check+0xb0>)
 8003854:	f003 f838 	bl	80068c8 <HAL_I2C_IsDeviceReady>
 8003858:	4603      	mov	r3, r0
 800385a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 800385c:	2002      	movs	r0, #2
 800385e:	f000 fa59 	bl	8003d14 <HAL_Delay>
	if (status == HAL_OK) {
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d13b      	bne.n	80038e0 <SHTC3_check+0x9c>
		SHTC3_wakeup();
 8003868:	f7ff ffac 	bl	80037c4 <SHTC3_wakeup>
		uint16_t command = SHTC3_CMD_READ_ID;
 800386c:	f64c 03ef 	movw	r3, #51439	; 0xc8ef
 8003870:	80fb      	strh	r3, [r7, #6]
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8003872:	1dba      	adds	r2, r7, #6
 8003874:	2396      	movs	r3, #150	; 0x96
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	2302      	movs	r3, #2
 800387a:	21e0      	movs	r1, #224	; 0xe0
 800387c:	481d      	ldr	r0, [pc, #116]	; (80038f4 <SHTC3_check+0xb0>)
 800387e:	f002 fc0b 	bl	8006098 <HAL_I2C_Master_Transmit>
 8003882:	4603      	mov	r3, r0
 8003884:	73bb      	strb	r3, [r7, #14]
		status2 = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 2, 150);
 8003886:	f107 0208 	add.w	r2, r7, #8
 800388a:	2396      	movs	r3, #150	; 0x96
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	2302      	movs	r3, #2
 8003890:	21e1      	movs	r1, #225	; 0xe1
 8003892:	4818      	ldr	r0, [pc, #96]	; (80038f4 <SHTC3_check+0xb0>)
 8003894:	f002 fcf4 	bl	8006280 <HAL_I2C_Master_Receive>
 8003898:	4603      	mov	r3, r0
 800389a:	73bb      	strb	r3, [r7, #14]
		  if (status2 == HAL_OK) {
 800389c:	7bbb      	ldrb	r3, [r7, #14]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d119      	bne.n	80038d6 <SHTC3_check+0x92>
			  uint16_t id = data[0] << 8 | data[1];
 80038a2:	7a3b      	ldrb	r3, [r7, #8]
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	b21a      	sxth	r2, r3
 80038a8:	7a7b      	ldrb	r3, [r7, #9]
 80038aa:	b21b      	sxth	r3, r3
 80038ac:	4313      	orrs	r3, r2
 80038ae:	b21b      	sxth	r3, r3
 80038b0:	81bb      	strh	r3, [r7, #12]
			  uint16_t code = id & SHTC3_PRODUCT_CODE_MASK;
 80038b2:	89bb      	ldrh	r3, [r7, #12]
 80038b4:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 80038b8:	051b      	lsls	r3, r3, #20
 80038ba:	0d1b      	lsrs	r3, r3, #20
 80038bc:	817b      	strh	r3, [r7, #10]
			  if (code == 0x807) {
 80038be:	897b      	ldrh	r3, [r7, #10]
 80038c0:	f640 0207 	movw	r2, #2055	; 0x807
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d110      	bne.n	80038ea <SHTC3_check+0xa6>
				  printf("SHTC3 OK\r\n");
 80038c8:	480b      	ldr	r0, [pc, #44]	; (80038f8 <SHTC3_check+0xb4>)
 80038ca:	f007 fd1b 	bl	800b304 <puts>
				  SHTC3_sleep();
 80038ce:	f7ff ff99 	bl	8003804 <SHTC3_sleep>
				  return 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00a      	b.n	80038ec <SHTC3_check+0xa8>
			  }
		  } else {printf("NO SHTC3\r\n"); return 0;}
 80038d6:	4809      	ldr	r0, [pc, #36]	; (80038fc <SHTC3_check+0xb8>)
 80038d8:	f007 fd14 	bl	800b304 <puts>
 80038dc:	2300      	movs	r3, #0
 80038de:	e005      	b.n	80038ec <SHTC3_check+0xa8>
	} else {printf("SHTC3 FAILED\r\n"); return 0;}
 80038e0:	4807      	ldr	r0, [pc, #28]	; (8003900 <SHTC3_check+0xbc>)
 80038e2:	f007 fd0f 	bl	800b304 <puts>
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <SHTC3_check+0xa8>
	return 0;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000594 	.word	0x20000594
 80038f8:	0800d5a8 	.word	0x0800d5a8
 80038fc:	0800d5b4 	.word	0x0800d5b4
 8003900:	0800d5c0 	.word	0x0800d5c0

08003904 <SHTC3_get_temp>:

float SHTC3_get_temp(uint8_t mode)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af02      	add	r7, sp, #8
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	uint8_t data[3];
	uint16_t command;
		SHTC3_wakeup();
 800390e:	f7ff ff59 	bl	80037c4 <SHTC3_wakeup>
		if(mode == 0) command = SHTC3_CMD_TEMP_HUM;
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d103      	bne.n	8003920 <SHTC3_get_temp+0x1c>
 8003918:	f24a 237c 	movw	r3, #41596	; 0xa27c
 800391c:	81fb      	strh	r3, [r7, #14]
 800391e:	e002      	b.n	8003926 <SHTC3_get_temp+0x22>
		else command = SHTC3_CMD_TEMP_HUM_LP;
 8003920:	f645 0364 	movw	r3, #22628	; 0x5864
 8003924:	81fb      	strh	r3, [r7, #14]
		status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8003926:	f107 020e 	add.w	r2, r7, #14
 800392a:	2396      	movs	r3, #150	; 0x96
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	2302      	movs	r3, #2
 8003930:	21e0      	movs	r1, #224	; 0xe0
 8003932:	4824      	ldr	r0, [pc, #144]	; (80039c4 <SHTC3_get_temp+0xc0>)
 8003934:	f002 fbb0 	bl	8006098 <HAL_I2C_Master_Transmit>
 8003938:	4603      	mov	r3, r0
 800393a:	75fb      	strb	r3, [r7, #23]
		HAL_Delay(20);
 800393c:	2014      	movs	r0, #20
 800393e:	f000 f9e9 	bl	8003d14 <HAL_Delay>
		status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 3, 150);
 8003942:	f107 0210 	add.w	r2, r7, #16
 8003946:	2396      	movs	r3, #150	; 0x96
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2303      	movs	r3, #3
 800394c:	21e1      	movs	r1, #225	; 0xe1
 800394e:	481d      	ldr	r0, [pc, #116]	; (80039c4 <SHTC3_get_temp+0xc0>)
 8003950:	f002 fc96 	bl	8006280 <HAL_I2C_Master_Receive>
 8003954:	4603      	mov	r3, r0
 8003956:	75fb      	strb	r3, [r7, #23]
		if (status == HAL_OK) {
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d127      	bne.n	80039ae <SHTC3_get_temp+0xaa>
		uint16_t raw_temp = data[0] << 8 | data[1];
 800395e:	7c3b      	ldrb	r3, [r7, #16]
 8003960:	021b      	lsls	r3, r3, #8
 8003962:	b21a      	sxth	r2, r3
 8003964:	7c7b      	ldrb	r3, [r7, #17]
 8003966:	b21b      	sxth	r3, r3
 8003968:	4313      	orrs	r3, r2
 800396a:	b21b      	sxth	r3, r3
 800396c:	82bb      	strh	r3, [r7, #20]
		uint8_t crc_hal = HALcalculateCRC(data,2);
 800396e:	f107 0310 	add.w	r3, r7, #16
 8003972:	2102      	movs	r1, #2
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fd55 	bl	8003424 <HALcalculateCRC>
 800397a:	4603      	mov	r3, r0
 800397c:	74fb      	strb	r3, [r7, #19]
		if(data[2] == crc_hal) {
 800397e:	7cbb      	ldrb	r3, [r7, #18]
 8003980:	7cfa      	ldrb	r2, [r7, #19]
 8003982:	429a      	cmp	r2, r3
 8003984:	d116      	bne.n	80039b4 <SHTC3_get_temp+0xb0>
			SHTC3_sleep();
 8003986:	f7ff ff3d 	bl	8003804 <SHTC3_sleep>
			return (float)(((raw_temp * 175.0f) / 65535.0f) - 45.0f);
 800398a:	8abb      	ldrh	r3, [r7, #20]
 800398c:	ee07 3a90 	vmov	s15, r3
 8003990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003994:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80039c8 <SHTC3_get_temp+0xc4>
 8003998:	ee27 7a87 	vmul.f32	s14, s15, s14
 800399c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80039cc <SHTC3_get_temp+0xc8>
 80039a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039a4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80039d0 <SHTC3_get_temp+0xcc>
 80039a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039ac:	e004      	b.n	80039b8 <SHTC3_get_temp+0xb4>
		}
	} else {printf("SHTC3 Busy\r\n");};
 80039ae:	4809      	ldr	r0, [pc, #36]	; (80039d4 <SHTC3_get_temp+0xd0>)
 80039b0:	f007 fca8 	bl	800b304 <puts>
	return -1000.0;
 80039b4:	eddf 7a08 	vldr	s15, [pc, #32]	; 80039d8 <SHTC3_get_temp+0xd4>
}
 80039b8:	eeb0 0a67 	vmov.f32	s0, s15
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000594 	.word	0x20000594
 80039c8:	432f0000 	.word	0x432f0000
 80039cc:	477fff00 	.word	0x477fff00
 80039d0:	42340000 	.word	0x42340000
 80039d4:	0800d5d0 	.word	0x0800d5d0
 80039d8:	c47a0000 	.word	0xc47a0000

080039dc <SHTC3_get_hum>:

float SHTC3_get_hum(uint8_t mode)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	uint8_t data[3];
	uint16_t command;
	SHTC3_wakeup();
 80039e6:	f7ff feed 	bl	80037c4 <SHTC3_wakeup>
	if(mode == 0) command = SHTC3_CMD_HUM_TEMP;
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d103      	bne.n	80039f8 <SHTC3_get_hum+0x1c>
 80039f0:	f242 435c 	movw	r3, #9308	; 0x245c
 80039f4:	81fb      	strh	r3, [r7, #14]
 80039f6:	e002      	b.n	80039fe <SHTC3_get_hum+0x22>
	else command = SHTC3_CMD_HUM_TEMP_LP;
 80039f8:	f64d 6344 	movw	r3, #56900	; 0xde44
 80039fc:	81fb      	strh	r3, [r7, #14]
		status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80039fe:	f107 020e 	add.w	r2, r7, #14
 8003a02:	2396      	movs	r3, #150	; 0x96
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	2302      	movs	r3, #2
 8003a08:	21e0      	movs	r1, #224	; 0xe0
 8003a0a:	4823      	ldr	r0, [pc, #140]	; (8003a98 <SHTC3_get_hum+0xbc>)
 8003a0c:	f002 fb44 	bl	8006098 <HAL_I2C_Master_Transmit>
 8003a10:	4603      	mov	r3, r0
 8003a12:	75fb      	strb	r3, [r7, #23]
		HAL_Delay(20);
 8003a14:	2014      	movs	r0, #20
 8003a16:	f000 f97d 	bl	8003d14 <HAL_Delay>
		status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 3, 150);
 8003a1a:	f107 0210 	add.w	r2, r7, #16
 8003a1e:	2396      	movs	r3, #150	; 0x96
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2303      	movs	r3, #3
 8003a24:	21e1      	movs	r1, #225	; 0xe1
 8003a26:	481c      	ldr	r0, [pc, #112]	; (8003a98 <SHTC3_get_hum+0xbc>)
 8003a28:	f002 fc2a 	bl	8006280 <HAL_I2C_Master_Receive>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	75fb      	strb	r3, [r7, #23]
		if (status == HAL_OK) {
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d123      	bne.n	8003a7e <SHTC3_get_hum+0xa2>
		uint16_t raw_hum = data[0] << 8 | data[1];
 8003a36:	7c3b      	ldrb	r3, [r7, #16]
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	b21a      	sxth	r2, r3
 8003a3c:	7c7b      	ldrb	r3, [r7, #17]
 8003a3e:	b21b      	sxth	r3, r3
 8003a40:	4313      	orrs	r3, r2
 8003a42:	b21b      	sxth	r3, r3
 8003a44:	82bb      	strh	r3, [r7, #20]
		uint8_t crc_hal = HALcalculateCRC(data,2);
 8003a46:	f107 0310 	add.w	r3, r7, #16
 8003a4a:	2102      	movs	r1, #2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff fce9 	bl	8003424 <HALcalculateCRC>
 8003a52:	4603      	mov	r3, r0
 8003a54:	74fb      	strb	r3, [r7, #19]

		if(data[2] == crc_hal) {
 8003a56:	7cbb      	ldrb	r3, [r7, #18]
 8003a58:	7cfa      	ldrb	r2, [r7, #19]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d112      	bne.n	8003a84 <SHTC3_get_hum+0xa8>
			SHTC3_sleep();
 8003a5e:	f7ff fed1 	bl	8003804 <SHTC3_sleep>
			return (float)((raw_hum * 100.0f) / 65535.0f);
 8003a62:	8abb      	ldrh	r3, [r7, #20]
 8003a64:	ee07 3a90 	vmov	s15, r3
 8003a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a6c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003a9c <SHTC3_get_hum+0xc0>
 8003a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a74:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003aa0 <SHTC3_get_hum+0xc4>
 8003a78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003a7c:	e004      	b.n	8003a88 <SHTC3_get_hum+0xac>
		}
	} else {printf("SHTC3 Busy\r\n");};
 8003a7e:	4809      	ldr	r0, [pc, #36]	; (8003aa4 <SHTC3_get_hum+0xc8>)
 8003a80:	f007 fc40 	bl	800b304 <puts>
	return -1000.0;
 8003a84:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003aa8 <SHTC3_get_hum+0xcc>
}
 8003a88:	eef0 7a47 	vmov.f32	s15, s14
 8003a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000594 	.word	0x20000594
 8003a9c:	42c80000 	.word	0x42c80000
 8003aa0:	477fff00 	.word	0x477fff00
 8003aa4:	0800d5d0 	.word	0x0800d5d0
 8003aa8:	c47a0000 	.word	0xc47a0000

08003aac <BME280_check>:

uint8_t BME280_check()
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
	uint8_t value;
	TCA9543A_SelectChannel(1);
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	f7ff fde4 	bl	8003680 <TCA9543A_SelectChannel>
	HAL_Delay(1);
 8003ab8:	2001      	movs	r0, #1
 8003aba:	f000 f92b 	bl	8003d14 <HAL_Delay>
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, BMP280_I2C_ADDRESS_1 << 1, 3, 150);
 8003abe:	2396      	movs	r3, #150	; 0x96
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	21ee      	movs	r1, #238	; 0xee
 8003ac4:	4814      	ldr	r0, [pc, #80]	; (8003b18 <BME280_check+0x6c>)
 8003ac6:	f002 feff 	bl	80068c8 <HAL_I2C_IsDeviceReady>
 8003aca:	4603      	mov	r3, r0
 8003acc:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8003ace:	2064      	movs	r0, #100	; 0x64
 8003ad0:	f000 f920 	bl	8003d14 <HAL_Delay>
	if (status == HAL_OK) {
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d115      	bne.n	8003b06 <BME280_check+0x5a>
		i2c_read8(&hi2c2, BMP280_REG_ID, &value, BMP280_I2C_ADDRESS_1 << 1);
 8003ada:	1dba      	adds	r2, r7, #6
 8003adc:	23ee      	movs	r3, #238	; 0xee
 8003ade:	21d0      	movs	r1, #208	; 0xd0
 8003ae0:	480d      	ldr	r0, [pc, #52]	; (8003b18 <BME280_check+0x6c>)
 8003ae2:	f7ff fcbf 	bl	8003464 <i2c_read8>
		TCA9543A_SelectChannel(0);
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f7ff fdca 	bl	8003680 <TCA9543A_SelectChannel>
		if(value == BME280_CHIP_ID) {printf("BME280 OK\r\n"); return 1;} else {printf("NOT BME280\r\n"); return 0;}
 8003aec:	79bb      	ldrb	r3, [r7, #6]
 8003aee:	2b60      	cmp	r3, #96	; 0x60
 8003af0:	d104      	bne.n	8003afc <BME280_check+0x50>
 8003af2:	480a      	ldr	r0, [pc, #40]	; (8003b1c <BME280_check+0x70>)
 8003af4:	f007 fc06 	bl	800b304 <puts>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e008      	b.n	8003b0e <BME280_check+0x62>
 8003afc:	4808      	ldr	r0, [pc, #32]	; (8003b20 <BME280_check+0x74>)
 8003afe:	f007 fc01 	bl	800b304 <puts>
 8003b02:	2300      	movs	r3, #0
 8003b04:	e003      	b.n	8003b0e <BME280_check+0x62>
	} else {printf("BME280 FAILED\r\n"); return 0;}
 8003b06:	4807      	ldr	r0, [pc, #28]	; (8003b24 <BME280_check+0x78>)
 8003b08:	f007 fbfc 	bl	800b304 <puts>
 8003b0c:	2300      	movs	r3, #0
	return 0;

}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000594 	.word	0x20000594
 8003b1c:	0800d5dc 	.word	0x0800d5dc
 8003b20:	0800d5e8 	.word	0x0800d5e8
 8003b24:	0800d5f4 	.word	0x0800d5f4

08003b28 <BME280_init_config>:

void BME280_init_config(uint8_t conf_mode, uint8_t ovr_temp, uint8_t ovr_press, uint8_t ovr_hum, uint8_t coeff)
{
 8003b28:	b590      	push	{r4, r7, lr}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4604      	mov	r4, r0
 8003b30:	4608      	mov	r0, r1
 8003b32:	4611      	mov	r1, r2
 8003b34:	461a      	mov	r2, r3
 8003b36:	4623      	mov	r3, r4
 8003b38:	71fb      	strb	r3, [r7, #7]
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71bb      	strb	r3, [r7, #6]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	717b      	strb	r3, [r7, #5]
 8003b42:	4613      	mov	r3, r2
 8003b44:	713b      	strb	r3, [r7, #4]
	TCA9543A_SelectChannel(1);
 8003b46:	2001      	movs	r0, #1
 8003b48:	f7ff fd9a 	bl	8003680 <TCA9543A_SelectChannel>
	HAL_Delay(1);
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	f000 f8e1 	bl	8003d14 <HAL_Delay>
//	bmp280_init_default_params(&bmp280.params);

	bmp280.params.filter = coeff;
 8003b52:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <BME280_init_config+0xa4>)
 8003b54:	7e3b      	ldrb	r3, [r7, #24]
 8003b56:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
	bmp280.params.oversampling_pressure = ovr_press;
 8003b5a:	4a1c      	ldr	r2, [pc, #112]	; (8003bcc <BME280_init_config+0xa4>)
 8003b5c:	797b      	ldrb	r3, [r7, #5]
 8003b5e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	bmp280.params.oversampling_temperature = ovr_temp;
 8003b62:	4a1a      	ldr	r2, [pc, #104]	; (8003bcc <BME280_init_config+0xa4>)
 8003b64:	79bb      	ldrb	r3, [r7, #6]
 8003b66:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	bmp280.params.oversampling_humidity = ovr_hum;
 8003b6a:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <BME280_init_config+0xa4>)
 8003b6c:	793b      	ldrb	r3, [r7, #4]
 8003b6e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	bmp280.params.standby = BMP280_STANDBY_250;
 8003b72:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <BME280_init_config+0xa4>)
 8003b74:	2203      	movs	r2, #3
 8003b76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	bmp280.addr = BMP280_I2C_ADDRESS_1;
 8003b7a:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <BME280_init_config+0xa4>)
 8003b7c:	2277      	movs	r2, #119	; 0x77
 8003b7e:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c2;
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <BME280_init_config+0xa4>)
 8003b82:	4a13      	ldr	r2, [pc, #76]	; (8003bd0 <BME280_init_config+0xa8>)
 8003b84:	629a      	str	r2, [r3, #40]	; 0x28

	switch (conf_mode)
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d002      	beq.n	8003b92 <BME280_init_config+0x6a>
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d005      	beq.n	8003b9c <BME280_init_config+0x74>
 8003b90:	e009      	b.n	8003ba6 <BME280_init_config+0x7e>
	{
	case 1:
		bmp280.params.mode = BMP280_MODE_FORCED;
 8003b92:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <BME280_init_config+0xa4>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		break;
 8003b9a:	e008      	b.n	8003bae <BME280_init_config+0x86>
	case 2:
		bmp280.params.mode = BMP280_MODE_NORMAL;
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <BME280_init_config+0xa4>)
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		break;
 8003ba4:	e003      	b.n	8003bae <BME280_init_config+0x86>
	default:
		bmp280.params.mode = BMP280_MODE_NORMAL;
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <BME280_init_config+0xa4>)
 8003ba8:	2203      	movs	r2, #3
 8003baa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	  }
	bmp280_init(&bmp280, &bmp280.params);
 8003bae:	4909      	ldr	r1, [pc, #36]	; (8003bd4 <BME280_init_config+0xac>)
 8003bb0:	4806      	ldr	r0, [pc, #24]	; (8003bcc <BME280_init_config+0xa4>)
 8003bb2:	f7fd fbb1 	bl	8001318 <bmp280_init>
	HAL_Delay(1);
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	f000 f8ac 	bl	8003d14 <HAL_Delay>
	TCA9543A_SelectChannel(0);
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	f7ff fd5f 	bl	8003680 <TCA9543A_SelectChannel>
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd90      	pop	{r4, r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000824 	.word	0x20000824
 8003bd0:	20000594 	.word	0x20000594
 8003bd4:	20000850 	.word	0x20000850

08003bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003bdc:	f7ff fb08 	bl	80031f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8003be2:	490d      	ldr	r1, [pc, #52]	; (8003c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003be4:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <LoopForever+0xe>)
  movs r3, #0
 8003be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003be8:	e002      	b.n	8003bf0 <LoopCopyDataInit>

08003bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bee:	3304      	adds	r3, #4

08003bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bf4:	d3f9      	bcc.n	8003bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003bf8:	4c0a      	ldr	r4, [pc, #40]	; (8003c24 <LoopForever+0x16>)
  movs r3, #0
 8003bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bfc:	e001      	b.n	8003c02 <LoopFillZerobss>

08003bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c00:	3204      	adds	r2, #4

08003c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c04:	d3fb      	bcc.n	8003bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c06:	f007 fcb5 	bl	800b574 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c0a:	f7fe f96d 	bl	8001ee8 <main>

08003c0e <LoopForever>:

LoopForever:
    b LoopForever
 8003c0e:	e7fe      	b.n	8003c0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003c10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c18:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003c1c:	0800d9ec 	.word	0x0800d9ec
  ldr r2, =_sbss
 8003c20:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003c24:	200009c4 	.word	0x200009c4

08003c28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c28:	e7fe      	b.n	8003c28 <ADC1_IRQHandler>

08003c2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c34:	2003      	movs	r0, #3
 8003c36:	f001 fb1f 	bl	8005278 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c3a:	200f      	movs	r0, #15
 8003c3c:	f000 f80e 	bl	8003c5c <HAL_InitTick>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	71fb      	strb	r3, [r7, #7]
 8003c4a:	e001      	b.n	8003c50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c4c:	f7fe ff24 	bl	8002a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c50:	79fb      	ldrb	r3, [r7, #7]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003c68:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <HAL_InitTick+0x6c>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d023      	beq.n	8003cb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003c70:	4b16      	ldr	r3, [pc, #88]	; (8003ccc <HAL_InitTick+0x70>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <HAL_InitTick+0x6c>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 fb2b 	bl	80052e2 <HAL_SYSTICK_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10f      	bne.n	8003cb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b0f      	cmp	r3, #15
 8003c96:	d809      	bhi.n	8003cac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c98:	2200      	movs	r2, #0
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca0:	f001 faf5 	bl	800528e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ca4:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <HAL_InitTick+0x74>)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e007      	b.n	8003cbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	e004      	b.n	8003cbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
 8003cb6:	e001      	b.n	8003cbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2000000c 	.word	0x2000000c
 8003ccc:	20000004 	.word	0x20000004
 8003cd0:	20000008 	.word	0x20000008

08003cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_IncTick+0x20>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_IncTick+0x24>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <HAL_IncTick+0x24>)
 8003ce6:	6013      	str	r3, [r2, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	2000000c 	.word	0x2000000c
 8003cf8:	20000874 	.word	0x20000874

08003cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8003d00:	4b03      	ldr	r3, [pc, #12]	; (8003d10 <HAL_GetTick+0x14>)
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000874 	.word	0x20000874

08003d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d1c:	f7ff ffee 	bl	8003cfc <HAL_GetTick>
 8003d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d005      	beq.n	8003d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_Delay+0x44>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d3a:	bf00      	nop
 8003d3c:	f7ff ffde 	bl	8003cfc <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d8f7      	bhi.n	8003d3c <HAL_Delay+0x28>
  {
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	2000000c 	.word	0x2000000c

08003d5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	609a      	str	r2, [r3, #8]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3360      	adds	r3, #96	; 0x60
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <LL_ADC_SetOffset+0x44>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003dfc:	bf00      	nop
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	03fff000 	.word	0x03fff000

08003e0c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3360      	adds	r3, #96	; 0x60
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3360      	adds	r3, #96	; 0x60
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3330      	adds	r3, #48	; 0x30
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	0a1b      	lsrs	r3, r3, #8
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	4413      	add	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	211f      	movs	r1, #31
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	0e9b      	lsrs	r3, r3, #26
 8003ecc:	f003 011f 	and.w	r1, r3, #31
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eda:	431a      	orrs	r2, r3
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ee0:	bf00      	nop
 8003ee2:	371c      	adds	r7, #28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3314      	adds	r3, #20
 8003efc:	461a      	mov	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	0e5b      	lsrs	r3, r3, #25
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	4413      	add	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	0d1b      	lsrs	r3, r3, #20
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	2107      	movs	r1, #7
 8003f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	401a      	ands	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	0d1b      	lsrs	r3, r3, #20
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f30:	431a      	orrs	r2, r3
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	401a      	ands	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f003 0318 	and.w	r3, r3, #24
 8003f66:	4908      	ldr	r1, [pc, #32]	; (8003f88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f68:	40d9      	lsrs	r1, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f72:	431a      	orrs	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	0007ffff 	.word	0x0007ffff

08003f8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003f9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6093      	str	r3, [r2, #8]
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fc4:	d101      	bne.n	8003fca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003fe8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004010:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004014:	d101      	bne.n	800401a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004038:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800403c:	f043 0201 	orr.w	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004060:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004064:	f043 0202 	orr.w	r2, r3, #2
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <LL_ADC_IsEnabled+0x18>
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <LL_ADC_IsEnabled+0x1a>
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d101      	bne.n	80040b6 <LL_ADC_IsDisableOngoing+0x18>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <LL_ADC_IsDisableOngoing+0x1a>
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040d8:	f043 0204 	orr.w	r2, r3, #4
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d101      	bne.n	8004104 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b08      	cmp	r3, #8
 8004124:	d101      	bne.n	800412a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004144:	2300      	movs	r3, #0
 8004146:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e12c      	b.n	80043ac <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	2b00      	cmp	r3, #0
 800415e:	d109      	bne.n	8004174 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fe fcbf 	bl	8002ae4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff ff19 	bl	8003fb0 <LL_ADC_IsDeepPowerDownEnabled>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d004      	beq.n	800418e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff feff 	bl	8003f8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff ff34 	bl	8004000 <LL_ADC_IsInternalRegulatorEnabled>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d115      	bne.n	80041ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff ff18 	bl	8003fd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041a8:	4b82      	ldr	r3, [pc, #520]	; (80043b4 <HAL_ADC_Init+0x27c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	099b      	lsrs	r3, r3, #6
 80041ae:	4a82      	ldr	r2, [pc, #520]	; (80043b8 <HAL_ADC_Init+0x280>)
 80041b0:	fba2 2303 	umull	r2, r3, r2, r3
 80041b4:	099b      	lsrs	r3, r3, #6
 80041b6:	3301      	adds	r3, #1
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041bc:	e002      	b.n	80041c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f9      	bne.n	80041be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff ff16 	bl	8004000 <LL_ADC_IsInternalRegulatorEnabled>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10d      	bne.n	80041f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f043 0210 	orr.w	r2, r3, #16
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	f043 0201 	orr.w	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff ff76 	bl	80040ec <LL_ADC_REG_IsConversionOngoing>
 8004200:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b00      	cmp	r3, #0
 800420c:	f040 80c5 	bne.w	800439a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 80c1 	bne.w	800439a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004220:	f043 0202 	orr.w	r2, r3, #2
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff ff23 	bl	8004078 <LL_ADC_IsEnabled>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10b      	bne.n	8004250 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004238:	4860      	ldr	r0, [pc, #384]	; (80043bc <HAL_ADC_Init+0x284>)
 800423a:	f7ff ff1d 	bl	8004078 <LL_ADC_IsEnabled>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4619      	mov	r1, r3
 800424a:	485d      	ldr	r0, [pc, #372]	; (80043c0 <HAL_ADC_Init+0x288>)
 800424c:	f7ff fd86 	bl	8003d5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	7e5b      	ldrb	r3, [r3, #25]
 8004254:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800425a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004260:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004266:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800426e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d106      	bne.n	800428c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	3b01      	subs	r3, #1
 8004284:	045b      	lsls	r3, r3, #17
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4313      	orrs	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	4b45      	ldr	r3, [pc, #276]	; (80043c4 <HAL_ADC_Init+0x28c>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	69b9      	ldr	r1, [r7, #24]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff13 	bl	80040ec <LL_ADC_REG_IsConversionOngoing>
 80042c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff ff20 	bl	8004112 <LL_ADC_INJ_IsConversionOngoing>
 80042d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d13d      	bne.n	8004356 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d13a      	bne.n	8004356 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80042e4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042ec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042fc:	f023 0302 	bic.w	r3, r3, #2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	430b      	orrs	r3, r1
 8004308:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004310:	2b01      	cmp	r3, #1
 8004312:	d118      	bne.n	8004346 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800431e:	f023 0304 	bic.w	r3, r3, #4
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800432a:	4311      	orrs	r1, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004330:	4311      	orrs	r1, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004336:	430a      	orrs	r2, r1
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	611a      	str	r2, [r3, #16]
 8004344:	e007      	b.n	8004356 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d10c      	bne.n	8004378 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	f023 010f 	bic.w	r1, r3, #15
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	1e5a      	subs	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
 8004376:	e007      	b.n	8004388 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 020f 	bic.w	r2, r2, #15
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438c:	f023 0303 	bic.w	r3, r3, #3
 8004390:	f043 0201 	orr.w	r2, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	655a      	str	r2, [r3, #84]	; 0x54
 8004398:	e007      	b.n	80043aa <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	f043 0210 	orr.w	r2, r3, #16
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3720      	adds	r7, #32
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000004 	.word	0x20000004
 80043b8:	053e2d63 	.word	0x053e2d63
 80043bc:	50040000 	.word	0x50040000
 80043c0:	50040300 	.word	0x50040300
 80043c4:	fff0c007 	.word	0xfff0c007

080043c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fe87 	bl	80040ec <LL_ADC_REG_IsConversionOngoing>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d167      	bne.n	80044b4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_ADC_Start_DMA+0x2a>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e063      	b.n	80044ba <HAL_ADC_Start_DMA+0xf2>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fc66 	bl	8004ccc <ADC_Enable>
 8004400:	4603      	mov	r3, r0
 8004402:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d14f      	bne.n	80044aa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d006      	beq.n	8004438 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	f023 0206 	bic.w	r2, r3, #6
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	659a      	str	r2, [r3, #88]	; 0x58
 8004436:	e002      	b.n	800443e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	4a20      	ldr	r2, [pc, #128]	; (80044c4 <HAL_ADC_Start_DMA+0xfc>)
 8004444:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444a:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <HAL_ADC_Start_DMA+0x100>)
 800444c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004452:	4a1e      	ldr	r2, [pc, #120]	; (80044cc <HAL_ADC_Start_DMA+0x104>)
 8004454:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	221c      	movs	r2, #28
 800445c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0210 	orr.w	r2, r2, #16
 8004474:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3340      	adds	r3, #64	; 0x40
 8004490:	4619      	mov	r1, r3
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f001 f9ed 	bl	8005874 <HAL_DMA_Start_IT>
 800449a:	4603      	mov	r3, r0
 800449c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fe0e 	bl	80040c4 <LL_ADC_REG_StartConversion>
 80044a8:	e006      	b.n	80044b8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80044b2:	e001      	b.n	80044b8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
 80044b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	08004e97 	.word	0x08004e97
 80044c8:	08004f6f 	.word	0x08004f6f
 80044cc:	08004f8b 	.word	0x08004f8b

080044d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b0b6      	sub	sp, #216	; 0xd8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_ADC_ConfigChannel+0x22>
 800452a:	2302      	movs	r3, #2
 800452c:	e3b9      	b.n	8004ca2 <HAL_ADC_ConfigChannel+0x796>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fdd6 	bl	80040ec <LL_ADC_REG_IsConversionOngoing>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	f040 839e 	bne.w	8004c84 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b05      	cmp	r3, #5
 800454e:	d824      	bhi.n	800459a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	3b02      	subs	r3, #2
 8004556:	2b03      	cmp	r3, #3
 8004558:	d81b      	bhi.n	8004592 <HAL_ADC_ConfigChannel+0x86>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <HAL_ADC_ConfigChannel+0x54>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004571 	.word	0x08004571
 8004564:	08004579 	.word	0x08004579
 8004568:	08004581 	.word	0x08004581
 800456c:	08004589 	.word	0x08004589
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	220c      	movs	r2, #12
 8004574:	605a      	str	r2, [r3, #4]
          break;
 8004576:	e010      	b.n	800459a <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2212      	movs	r2, #18
 800457c:	605a      	str	r2, [r3, #4]
          break;
 800457e:	e00c      	b.n	800459a <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2218      	movs	r2, #24
 8004584:	605a      	str	r2, [r3, #4]
          break;
 8004586:	e008      	b.n	800459a <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800458e:	605a      	str	r2, [r3, #4]
          break;
 8004590:	e003      	b.n	800459a <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2206      	movs	r2, #6
 8004596:	605a      	str	r2, [r3, #4]
          break;
 8004598:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	6859      	ldr	r1, [r3, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	f7ff fc74 	bl	8003e94 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fd9b 	bl	80040ec <LL_ADC_REG_IsConversionOngoing>
 80045b6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fda7 	bl	8004112 <LL_ADC_INJ_IsConversionOngoing>
 80045c4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f040 81a6 	bne.w	800491e <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f040 81a1 	bne.w	800491e <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	461a      	mov	r2, r3
 80045ea:	f7ff fc7f 	bl	8003eec <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	08db      	lsrs	r3, r3, #3
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b04      	cmp	r3, #4
 800460e:	d00a      	beq.n	8004626 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	6919      	ldr	r1, [r3, #16]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004620:	f7ff fbd0 	bl	8003dc4 <LL_ADC_SetOffset>
 8004624:	e17b      	b.n	800491e <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fbed 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004632:	4603      	mov	r3, r0
 8004634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <HAL_ADC_ConfigChannel+0x146>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2100      	movs	r1, #0
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fbe2 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004648:	4603      	mov	r3, r0
 800464a:	0e9b      	lsrs	r3, r3, #26
 800464c:	f003 021f 	and.w	r2, r3, #31
 8004650:	e01e      	b.n	8004690 <HAL_ADC_ConfigChannel+0x184>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2100      	movs	r1, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fbd7 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 800465e:	4603      	mov	r3, r0
 8004660:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004674:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004678:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8004680:	2320      	movs	r3, #32
 8004682:	e004      	b.n	800468e <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8004684:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004688:	fab3 f383 	clz	r3, r3
 800468c:	b2db      	uxtb	r3, r3
 800468e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x19c>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	0e9b      	lsrs	r3, r3, #26
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	e018      	b.n	80046da <HAL_ADC_ConfigChannel+0x1ce>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80046bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80046c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 80046cc:	2320      	movs	r3, #32
 80046ce:	e004      	b.n	80046da <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 80046d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046d4:	fab3 f383 	clz	r3, r3
 80046d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80046da:	429a      	cmp	r2, r3
 80046dc:	d106      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2200      	movs	r2, #0
 80046e4:	2100      	movs	r1, #0
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fba6 	bl	8003e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2101      	movs	r1, #1
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff fb8a 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x20c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2101      	movs	r1, #1
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fb7f 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 800470e:	4603      	mov	r3, r0
 8004710:	0e9b      	lsrs	r3, r3, #26
 8004712:	f003 021f 	and.w	r2, r3, #31
 8004716:	e01e      	b.n	8004756 <HAL_ADC_ConfigChannel+0x24a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2101      	movs	r1, #1
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fb74 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004724:	4603      	mov	r3, r0
 8004726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800473a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800473e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8004746:	2320      	movs	r3, #32
 8004748:	e004      	b.n	8004754 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 800474a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475e:	2b00      	cmp	r3, #0
 8004760:	d105      	bne.n	800476e <HAL_ADC_ConfigChannel+0x262>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	0e9b      	lsrs	r3, r3, #26
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	e018      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x294>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004776:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004782:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004786:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800478a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8004792:	2320      	movs	r3, #32
 8004794:	e004      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8004796:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d106      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2200      	movs	r2, #0
 80047aa:	2101      	movs	r1, #1
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff fb43 	bl	8003e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2102      	movs	r1, #2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff fb27 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 80047be:	4603      	mov	r3, r0
 80047c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <HAL_ADC_ConfigChannel+0x2d2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2102      	movs	r1, #2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fb1c 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 80047d4:	4603      	mov	r3, r0
 80047d6:	0e9b      	lsrs	r3, r3, #26
 80047d8:	f003 021f 	and.w	r2, r3, #31
 80047dc:	e01e      	b.n	800481c <HAL_ADC_ConfigChannel+0x310>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2102      	movs	r1, #2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff fb11 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047f4:	fa93 f3a3 	rbit	r3, r3
 80047f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80047fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004800:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800480c:	2320      	movs	r3, #32
 800480e:	e004      	b.n	800481a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004810:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004814:	fab3 f383 	clz	r3, r3
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x328>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0e9b      	lsrs	r3, r3, #26
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	e016      	b.n	8004862 <HAL_ADC_ConfigChannel+0x356>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004840:	fa93 f3a3 	rbit	r3, r3
 8004844:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004846:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800484c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8004854:	2320      	movs	r3, #32
 8004856:	e004      	b.n	8004862 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8004858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800485c:	fab3 f383 	clz	r3, r3
 8004860:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004862:	429a      	cmp	r2, r3
 8004864:	d106      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2200      	movs	r2, #0
 800486c:	2102      	movs	r1, #2
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fae2 	bl	8003e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2103      	movs	r1, #3
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff fac6 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004880:	4603      	mov	r3, r0
 8004882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10a      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x394>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2103      	movs	r1, #3
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fabb 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 8004896:	4603      	mov	r3, r0
 8004898:	0e9b      	lsrs	r3, r3, #26
 800489a:	f003 021f 	and.w	r2, r3, #31
 800489e:	e017      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x3c4>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2103      	movs	r1, #3
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fab0 	bl	8003e0c <LL_ADC_GetOffsetChannel>
 80048ac:	4603      	mov	r3, r0
 80048ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80048b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048ba:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80048bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80048c2:	2320      	movs	r3, #32
 80048c4:	e003      	b.n	80048ce <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 80048c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c8:	fab3 f383 	clz	r3, r3
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x3dc>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	0e9b      	lsrs	r3, r3, #26
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	e011      	b.n	800490c <HAL_ADC_ConfigChannel+0x400>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048f0:	fa93 f3a3 	rbit	r3, r3
 80048f4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80048f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80048fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8004900:	2320      	movs	r3, #32
 8004902:	e003      	b.n	800490c <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8004904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800490c:	429a      	cmp	r2, r3
 800490e:	d106      	bne.n	800491e <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2200      	movs	r2, #0
 8004916:	2103      	movs	r1, #3
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fa8d 	bl	8003e38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff fba8 	bl	8004078 <LL_ADC_IsEnabled>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 8140 	bne.w	8004bb0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	6819      	ldr	r1, [r3, #0]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	461a      	mov	r2, r3
 800493e:	f7ff fb01 	bl	8003f44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	4a8f      	ldr	r2, [pc, #572]	; (8004b84 <HAL_ADC_ConfigChannel+0x678>)
 8004948:	4293      	cmp	r3, r2
 800494a:	f040 8131 	bne.w	8004bb0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10b      	bne.n	8004976 <HAL_ADC_ConfigChannel+0x46a>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	0e9b      	lsrs	r3, r3, #26
 8004964:	3301      	adds	r3, #1
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	2b09      	cmp	r3, #9
 800496c:	bf94      	ite	ls
 800496e:	2301      	movls	r3, #1
 8004970:	2300      	movhi	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	e019      	b.n	80049aa <HAL_ADC_ConfigChannel+0x49e>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004986:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 800498e:	2320      	movs	r3, #32
 8004990:	e003      	b.n	800499a <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8004992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004994:	fab3 f383 	clz	r3, r3
 8004998:	b2db      	uxtb	r3, r3
 800499a:	3301      	adds	r3, #1
 800499c:	f003 031f 	and.w	r3, r3, #31
 80049a0:	2b09      	cmp	r3, #9
 80049a2:	bf94      	ite	ls
 80049a4:	2301      	movls	r3, #1
 80049a6:	2300      	movhi	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d079      	beq.n	8004aa2 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d107      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x4be>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	0e9b      	lsrs	r3, r3, #26
 80049c0:	3301      	adds	r3, #1
 80049c2:	069b      	lsls	r3, r3, #26
 80049c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049c8:	e015      	b.n	80049f6 <HAL_ADC_ConfigChannel+0x4ea>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d2:	fa93 f3a3 	rbit	r3, r3
 80049d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80049d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049da:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80049dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80049e2:	2320      	movs	r3, #32
 80049e4:	e003      	b.n	80049ee <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80049e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e8:	fab3 f383 	clz	r3, r3
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	3301      	adds	r3, #1
 80049f0:	069b      	lsls	r3, r3, #26
 80049f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x50a>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	0e9b      	lsrs	r3, r3, #26
 8004a08:	3301      	adds	r3, #1
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	2101      	movs	r1, #1
 8004a10:	fa01 f303 	lsl.w	r3, r1, r3
 8004a14:	e017      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x53a>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1e:	fa93 f3a3 	rbit	r3, r3
 8004a22:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8004a2e:	2320      	movs	r3, #32
 8004a30:	e003      	b.n	8004a3a <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8004a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a34:	fab3 f383 	clz	r3, r3
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	2101      	movs	r1, #1
 8004a42:	fa01 f303 	lsl.w	r3, r1, r3
 8004a46:	ea42 0103 	orr.w	r1, r2, r3
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x560>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	0e9b      	lsrs	r3, r3, #26
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	f003 021f 	and.w	r2, r3, #31
 8004a62:	4613      	mov	r3, r2
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	4413      	add	r3, r2
 8004a68:	051b      	lsls	r3, r3, #20
 8004a6a:	e018      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x592>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	fa93 f3a3 	rbit	r3, r3
 8004a78:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8004a84:	2320      	movs	r3, #32
 8004a86:	e003      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8004a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8a:	fab3 f383 	clz	r3, r3
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	3301      	adds	r3, #1
 8004a92:	f003 021f 	and.w	r2, r3, #31
 8004a96:	4613      	mov	r3, r2
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	4413      	add	r3, r2
 8004a9c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	e081      	b.n	8004ba6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d107      	bne.n	8004abe <HAL_ADC_ConfigChannel+0x5b2>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	0e9b      	lsrs	r3, r3, #26
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	069b      	lsls	r3, r3, #26
 8004ab8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004abc:	e015      	b.n	8004aea <HAL_ADC_ConfigChannel+0x5de>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac6:	fa93 f3a3 	rbit	r3, r3
 8004aca:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8004ad6:	2320      	movs	r3, #32
 8004ad8:	e003      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	fab3 f383 	clz	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	069b      	lsls	r3, r3, #26
 8004ae6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0x5fe>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	0e9b      	lsrs	r3, r3, #26
 8004afc:	3301      	adds	r3, #1
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	2101      	movs	r1, #1
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	e017      	b.n	8004b3a <HAL_ADC_ConfigChannel+0x62e>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	fa93 f3a3 	rbit	r3, r3
 8004b16:	61fb      	str	r3, [r7, #28]
  return result;
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8004b22:	2320      	movs	r3, #32
 8004b24:	e003      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	fab3 f383 	clz	r3, r3
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	3301      	adds	r3, #1
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	2101      	movs	r1, #1
 8004b36:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3a:	ea42 0103 	orr.w	r1, r2, r3
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10d      	bne.n	8004b66 <HAL_ADC_ConfigChannel+0x65a>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	0e9b      	lsrs	r3, r3, #26
 8004b50:	3301      	adds	r3, #1
 8004b52:	f003 021f 	and.w	r2, r3, #31
 8004b56:	4613      	mov	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3b1e      	subs	r3, #30
 8004b5e:	051b      	lsls	r3, r3, #20
 8004b60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b64:	e01e      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x698>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	fa93 f3a3 	rbit	r3, r3
 8004b72:	613b      	str	r3, [r7, #16]
  return result;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d104      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004b7e:	2320      	movs	r3, #32
 8004b80:	e006      	b.n	8004b90 <HAL_ADC_ConfigChannel+0x684>
 8004b82:	bf00      	nop
 8004b84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	fab3 f383 	clz	r3, r3
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	3301      	adds	r3, #1
 8004b92:	f003 021f 	and.w	r2, r3, #31
 8004b96:	4613      	mov	r3, r2
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3b1e      	subs	r3, #30
 8004b9e:	051b      	lsls	r3, r3, #20
 8004ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	6892      	ldr	r2, [r2, #8]
 8004baa:	4619      	mov	r1, r3
 8004bac:	f7ff f99e 	bl	8003eec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4b3d      	ldr	r3, [pc, #244]	; (8004cac <HAL_ADC_ConfigChannel+0x7a0>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d06c      	beq.n	8004c96 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bbc:	483c      	ldr	r0, [pc, #240]	; (8004cb0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004bbe:	f7ff f8f3 	bl	8003da8 <LL_ADC_GetCommonPathInternalCh>
 8004bc2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a3a      	ldr	r2, [pc, #232]	; (8004cb4 <HAL_ADC_ConfigChannel+0x7a8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d127      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d121      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a35      	ldr	r2, [pc, #212]	; (8004cb8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d157      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004be6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bee:	4619      	mov	r1, r3
 8004bf0:	482f      	ldr	r0, [pc, #188]	; (8004cb0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004bf2:	f7ff f8c6 	bl	8003d82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bf6:	4b31      	ldr	r3, [pc, #196]	; (8004cbc <HAL_ADC_ConfigChannel+0x7b0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	099b      	lsrs	r3, r3, #6
 8004bfc:	4a30      	ldr	r2, [pc, #192]	; (8004cc0 <HAL_ADC_ConfigChannel+0x7b4>)
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	099b      	lsrs	r3, r3, #6
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	4613      	mov	r3, r2
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c10:	e002      	b.n	8004c18 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f9      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c1e:	e03a      	b.n	8004c96 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a27      	ldr	r2, [pc, #156]	; (8004cc4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d113      	bne.n	8004c52 <HAL_ADC_ConfigChannel+0x746>
 8004c2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10d      	bne.n	8004c52 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1f      	ldr	r2, [pc, #124]	; (8004cb8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d12a      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4819      	ldr	r0, [pc, #100]	; (8004cb0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c4c:	f7ff f899 	bl	8003d82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c50:	e021      	b.n	8004c96 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <HAL_ADC_ConfigChannel+0x7bc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d11c      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d116      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a12      	ldr	r2, [pc, #72]	; (8004cb8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d111      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	480c      	ldr	r0, [pc, #48]	; (8004cb0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c7e:	f7ff f880 	bl	8003d82 <LL_ADC_SetCommonPathInternalCh>
 8004c82:	e008      	b.n	8004c96 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	37d8      	adds	r7, #216	; 0xd8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	80080000 	.word	0x80080000
 8004cb0:	50040300 	.word	0x50040300
 8004cb4:	c7520000 	.word	0xc7520000
 8004cb8:	50040000 	.word	0x50040000
 8004cbc:	20000004 	.word	0x20000004
 8004cc0:	053e2d63 	.word	0x053e2d63
 8004cc4:	cb840000 	.word	0xcb840000
 8004cc8:	80000001 	.word	0x80000001

08004ccc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff f9cb 	bl	8004078 <LL_ADC_IsEnabled>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d169      	bne.n	8004dbc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	4b36      	ldr	r3, [pc, #216]	; (8004dc8 <ADC_Enable+0xfc>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00d      	beq.n	8004d12 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	f043 0210 	orr.w	r2, r3, #16
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d06:	f043 0201 	orr.w	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e055      	b.n	8004dbe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff f986 	bl	8004028 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004d1c:	482b      	ldr	r0, [pc, #172]	; (8004dcc <ADC_Enable+0x100>)
 8004d1e:	f7ff f843 	bl	8003da8 <LL_ADC_GetCommonPathInternalCh>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d013      	beq.n	8004d54 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d2c:	4b28      	ldr	r3, [pc, #160]	; (8004dd0 <ADC_Enable+0x104>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	099b      	lsrs	r3, r3, #6
 8004d32:	4a28      	ldr	r2, [pc, #160]	; (8004dd4 <ADC_Enable+0x108>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	099b      	lsrs	r3, r3, #6
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004d46:	e002      	b.n	8004d4e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f9      	bne.n	8004d48 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004d54:	f7fe ffd2 	bl	8003cfc <HAL_GetTick>
 8004d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d5a:	e028      	b.n	8004dae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff f989 	bl	8004078 <LL_ADC_IsEnabled>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d104      	bne.n	8004d76 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff f959 	bl	8004028 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d76:	f7fe ffc1 	bl	8003cfc <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d914      	bls.n	8004dae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d00d      	beq.n	8004dae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	f043 0210 	orr.w	r2, r3, #16
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da2:	f043 0201 	orr.w	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e007      	b.n	8004dbe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d1cf      	bne.n	8004d5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	8000003f 	.word	0x8000003f
 8004dcc:	50040300 	.word	0x50040300
 8004dd0:	20000004 	.word	0x20000004
 8004dd4:	053e2d63 	.word	0x053e2d63

08004dd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff f95a 	bl	800409e <LL_ADC_IsDisableOngoing>
 8004dea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff f941 	bl	8004078 <LL_ADC_IsEnabled>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d047      	beq.n	8004e8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d144      	bne.n	8004e8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 030d 	and.w	r3, r3, #13
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d10c      	bne.n	8004e2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff f91b 	bl	8004050 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2203      	movs	r2, #3
 8004e20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e22:	f7fe ff6b 	bl	8003cfc <HAL_GetTick>
 8004e26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e28:	e029      	b.n	8004e7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2e:	f043 0210 	orr.w	r2, r3, #16
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3a:	f043 0201 	orr.w	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e023      	b.n	8004e8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e46:	f7fe ff59 	bl	8003cfc <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d914      	bls.n	8004e7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f043 0210 	orr.w	r2, r3, #16
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	f043 0201 	orr.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e007      	b.n	8004e8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1dc      	bne.n	8004e46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d14b      	bne.n	8004f48 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d021      	beq.n	8004f0e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fe ffcd 	bl	8003e6e <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d032      	beq.n	8004f40 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d12b      	bne.n	8004f40 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d11f      	bne.n	8004f40 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f04:	f043 0201 	orr.w	r2, r3, #1
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	655a      	str	r2, [r3, #84]	; 0x54
 8004f0c:	e018      	b.n	8004f40 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d111      	bne.n	8004f40 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d105      	bne.n	8004f40 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f38:	f043 0201 	orr.w	r2, r3, #1
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f7ff fac5 	bl	80044d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f46:	e00e      	b.n	8004f66 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff facf 	bl	80044f8 <HAL_ADC_ErrorCallback>
}
 8004f5a:	e004      	b.n	8004f66 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	4798      	blx	r3
}
 8004f66:	bf00      	nop
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f7ff fab1 	bl	80044e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f82:	bf00      	nop
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa8:	f043 0204 	orr.w	r2, r3, #4
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f7ff faa1 	bl	80044f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <LL_ADC_StartCalibration>:
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004fd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	609a      	str	r2, [r3, #8]
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <LL_ADC_IsCalibrationOnGoing>:
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005004:	d101      	bne.n	800500a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005022:	2300      	movs	r3, #0
 8005024:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_ADCEx_Calibration_Start+0x1c>
 8005030:	2302      	movs	r3, #2
 8005032:	e04d      	b.n	80050d0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff fecb 	bl	8004dd8 <ADC_Disable>
 8005042:	4603      	mov	r3, r0
 8005044:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d136      	bne.n	80050ba <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005050:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005054:	f023 0302 	bic.w	r3, r3, #2
 8005058:	f043 0202 	orr.w	r2, r3, #2
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff ffa9 	bl	8004fbe <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800506c:	e014      	b.n	8005098 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	3301      	adds	r3, #1
 8005072:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800507a:	d30d      	bcc.n	8005098 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005080:	f023 0312 	bic.w	r3, r3, #18
 8005084:	f043 0210 	orr.w	r2, r3, #16
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e01b      	b.n	80050d0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ffa7 	bl	8004ff0 <LL_ADC_IsCalibrationOnGoing>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e2      	bne.n	800506e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ac:	f023 0303 	bic.w	r3, r3, #3
 80050b0:	f043 0201 	orr.w	r2, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	655a      	str	r2, [r3, #84]	; 0x54
 80050b8:	e005      	b.n	80050c6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	f043 0210 	orr.w	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050e8:	4b0c      	ldr	r3, [pc, #48]	; (800511c <__NVIC_SetPriorityGrouping+0x44>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050f4:	4013      	ands	r3, r2
 80050f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800510a:	4a04      	ldr	r2, [pc, #16]	; (800511c <__NVIC_SetPriorityGrouping+0x44>)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	60d3      	str	r3, [r2, #12]
}
 8005110:	bf00      	nop
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	e000ed00 	.word	0xe000ed00

08005120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005124:	4b04      	ldr	r3, [pc, #16]	; (8005138 <__NVIC_GetPriorityGrouping+0x18>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	0a1b      	lsrs	r3, r3, #8
 800512a:	f003 0307 	and.w	r3, r3, #7
}
 800512e:	4618      	mov	r0, r3
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	e000ed00 	.word	0xe000ed00

0800513c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514a:	2b00      	cmp	r3, #0
 800514c:	db0b      	blt.n	8005166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	f003 021f 	and.w	r2, r3, #31
 8005154:	4907      	ldr	r1, [pc, #28]	; (8005174 <__NVIC_EnableIRQ+0x38>)
 8005156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	2001      	movs	r0, #1
 800515e:	fa00 f202 	lsl.w	r2, r0, r2
 8005162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	e000e100 	.word	0xe000e100

08005178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	6039      	str	r1, [r7, #0]
 8005182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005188:	2b00      	cmp	r3, #0
 800518a:	db0a      	blt.n	80051a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	b2da      	uxtb	r2, r3
 8005190:	490c      	ldr	r1, [pc, #48]	; (80051c4 <__NVIC_SetPriority+0x4c>)
 8005192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005196:	0112      	lsls	r2, r2, #4
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	440b      	add	r3, r1
 800519c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051a0:	e00a      	b.n	80051b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	4908      	ldr	r1, [pc, #32]	; (80051c8 <__NVIC_SetPriority+0x50>)
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	3b04      	subs	r3, #4
 80051b0:	0112      	lsls	r2, r2, #4
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	440b      	add	r3, r1
 80051b6:	761a      	strb	r2, [r3, #24]
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	e000e100 	.word	0xe000e100
 80051c8:	e000ed00 	.word	0xe000ed00

080051cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b089      	sub	sp, #36	; 0x24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f1c3 0307 	rsb	r3, r3, #7
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	bf28      	it	cs
 80051ea:	2304      	movcs	r3, #4
 80051ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	3304      	adds	r3, #4
 80051f2:	2b06      	cmp	r3, #6
 80051f4:	d902      	bls.n	80051fc <NVIC_EncodePriority+0x30>
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	3b03      	subs	r3, #3
 80051fa:	e000      	b.n	80051fe <NVIC_EncodePriority+0x32>
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005200:	f04f 32ff 	mov.w	r2, #4294967295
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43da      	mvns	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	401a      	ands	r2, r3
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005214:	f04f 31ff 	mov.w	r1, #4294967295
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	fa01 f303 	lsl.w	r3, r1, r3
 800521e:	43d9      	mvns	r1, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005224:	4313      	orrs	r3, r2
         );
}
 8005226:	4618      	mov	r0, r3
 8005228:	3724      	adds	r7, #36	; 0x24
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
	...

08005234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3b01      	subs	r3, #1
 8005240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005244:	d301      	bcc.n	800524a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005246:	2301      	movs	r3, #1
 8005248:	e00f      	b.n	800526a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800524a:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <SysTick_Config+0x40>)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3b01      	subs	r3, #1
 8005250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005252:	210f      	movs	r1, #15
 8005254:	f04f 30ff 	mov.w	r0, #4294967295
 8005258:	f7ff ff8e 	bl	8005178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <SysTick_Config+0x40>)
 800525e:	2200      	movs	r2, #0
 8005260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005262:	4b04      	ldr	r3, [pc, #16]	; (8005274 <SysTick_Config+0x40>)
 8005264:	2207      	movs	r2, #7
 8005266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	e000e010 	.word	0xe000e010

08005278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff ff29 	bl	80050d8 <__NVIC_SetPriorityGrouping>
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b086      	sub	sp, #24
 8005292:	af00      	add	r7, sp, #0
 8005294:	4603      	mov	r3, r0
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
 800529a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052a0:	f7ff ff3e 	bl	8005120 <__NVIC_GetPriorityGrouping>
 80052a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	6978      	ldr	r0, [r7, #20]
 80052ac:	f7ff ff8e 	bl	80051cc <NVIC_EncodePriority>
 80052b0:	4602      	mov	r2, r0
 80052b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff ff5d 	bl	8005178 <__NVIC_SetPriority>
}
 80052be:	bf00      	nop
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b082      	sub	sp, #8
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	4603      	mov	r3, r0
 80052ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff ff31 	bl	800513c <__NVIC_EnableIRQ>
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff ffa2 	bl	8005234 <SysTick_Config>
 80052f0:	4603      	mov	r3, r0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80052fe:	f7fd ff89 	bl	8003214 <HAL_SYSTICK_Callback>
}
 8005302:	bf00      	nop
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e054      	b.n	80053c4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	7f5b      	ldrb	r3, [r3, #29]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d105      	bne.n	8005330 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fd fc4c 	bl	8002bc8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	791b      	ldrb	r3, [r3, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10c      	bne.n	8005358 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a22      	ldr	r2, [pc, #136]	; (80053cc <HAL_CRC_Init+0xc4>)
 8005344:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0218 	bic.w	r2, r2, #24
 8005354:	609a      	str	r2, [r3, #8]
 8005356:	e00c      	b.n	8005372 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6899      	ldr	r1, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	461a      	mov	r2, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f948 	bl	80055f8 <HAL_CRCEx_Polynomial_Set>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e028      	b.n	80053c4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	795b      	ldrb	r3, [r3, #5]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d105      	bne.n	8005386 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f04f 32ff 	mov.w	r2, #4294967295
 8005382:	611a      	str	r2, [r3, #16]
 8005384:	e004      	b.n	8005390 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6912      	ldr	r2, [r2, #16]
 800538e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699a      	ldr	r2, [r3, #24]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	04c11db7 	.word	0x04c11db7

080053d0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80053dc:	2300      	movs	r3, #0
 80053de:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2202      	movs	r2, #2
 80053e4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0201 	orr.w	r2, r2, #1
 80053f4:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d006      	beq.n	800540c <HAL_CRC_Calculate+0x3c>
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d829      	bhi.n	8005456 <HAL_CRC_Calculate+0x86>
 8005402:	2b01      	cmp	r3, #1
 8005404:	d019      	beq.n	800543a <HAL_CRC_Calculate+0x6a>
 8005406:	2b02      	cmp	r3, #2
 8005408:	d01e      	beq.n	8005448 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800540a:	e024      	b.n	8005456 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800540c:	2300      	movs	r3, #0
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	e00a      	b.n	8005428 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	441a      	add	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	3301      	adds	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	429a      	cmp	r2, r3
 800542e:	d3f0      	bcc.n	8005412 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	613b      	str	r3, [r7, #16]
      break;
 8005438:	e00e      	b.n	8005458 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f812 	bl	8005468 <CRC_Handle_8>
 8005444:	6138      	str	r0, [r7, #16]
      break;
 8005446:	e007      	b.n	8005458 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f899 	bl	8005584 <CRC_Handle_16>
 8005452:	6138      	str	r0, [r7, #16]
      break;
 8005454:	e000      	b.n	8005458 <HAL_CRC_Calculate+0x88>
      break;
 8005456:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800545e:	693b      	ldr	r3, [r7, #16]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005468:	b480      	push	{r7}
 800546a:	b089      	sub	sp, #36	; 0x24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005474:	2300      	movs	r3, #0
 8005476:	61fb      	str	r3, [r7, #28]
 8005478:	e023      	b.n	80054c2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4413      	add	r3, r2
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	3301      	adds	r3, #1
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	440b      	add	r3, r1
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005494:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	3302      	adds	r3, #2
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	440b      	add	r3, r1
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80054a4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	3303      	adds	r3, #3
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	440b      	add	r3, r1
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80054b8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80054ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	3301      	adds	r3, #1
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	089b      	lsrs	r3, r3, #2
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d3d6      	bcc.n	800547a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d04d      	beq.n	8005572 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d107      	bne.n	80054f0 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	4413      	add	r3, r2
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d116      	bne.n	8005528 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	4413      	add	r3, r2
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	b21a      	sxth	r2, r3
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	3301      	adds	r3, #1
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	440b      	add	r3, r1
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	b21b      	sxth	r3, r3
 8005516:	4313      	orrs	r3, r2
 8005518:	b21b      	sxth	r3, r3
 800551a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	8b7a      	ldrh	r2, [r7, #26]
 8005526:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b03      	cmp	r3, #3
 8005530:	d11f      	bne.n	8005572 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	4413      	add	r3, r2
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	b21a      	sxth	r2, r3
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	3301      	adds	r3, #1
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	440b      	add	r3, r1
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	b21b      	sxth	r3, r3
 800554e:	4313      	orrs	r3, r2
 8005550:	b21b      	sxth	r3, r3
 8005552:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	8b7a      	ldrh	r2, [r7, #26]
 800555e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	3302      	adds	r3, #2
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	4413      	add	r3, r2
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3724      	adds	r7, #36	; 0x24
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	e013      	b.n	80055be <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	4413      	add	r3, r2
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	041a      	lsls	r2, r3, #16
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	3302      	adds	r3, #2
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	440b      	add	r3, r1
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	4619      	mov	r1, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	3301      	adds	r3, #1
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	085b      	lsrs	r3, r3, #1
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d3e6      	bcc.n	8005596 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	4413      	add	r3, r2
 80055e0:	881a      	ldrh	r2, [r3, #0]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005608:	231f      	movs	r3, #31
 800560a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800560c:	bf00      	nop
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1e5a      	subs	r2, r3, #1
 8005612:	613a      	str	r2, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d009      	beq.n	800562c <HAL_CRCEx_Polynomial_Set+0x34>
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0f0      	beq.n	800560e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b18      	cmp	r3, #24
 8005630:	d846      	bhi.n	80056c0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005632:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005638:	080056c7 	.word	0x080056c7
 800563c:	080056c1 	.word	0x080056c1
 8005640:	080056c1 	.word	0x080056c1
 8005644:	080056c1 	.word	0x080056c1
 8005648:	080056c1 	.word	0x080056c1
 800564c:	080056c1 	.word	0x080056c1
 8005650:	080056c1 	.word	0x080056c1
 8005654:	080056c1 	.word	0x080056c1
 8005658:	080056b5 	.word	0x080056b5
 800565c:	080056c1 	.word	0x080056c1
 8005660:	080056c1 	.word	0x080056c1
 8005664:	080056c1 	.word	0x080056c1
 8005668:	080056c1 	.word	0x080056c1
 800566c:	080056c1 	.word	0x080056c1
 8005670:	080056c1 	.word	0x080056c1
 8005674:	080056c1 	.word	0x080056c1
 8005678:	080056a9 	.word	0x080056a9
 800567c:	080056c1 	.word	0x080056c1
 8005680:	080056c1 	.word	0x080056c1
 8005684:	080056c1 	.word	0x080056c1
 8005688:	080056c1 	.word	0x080056c1
 800568c:	080056c1 	.word	0x080056c1
 8005690:	080056c1 	.word	0x080056c1
 8005694:	080056c1 	.word	0x080056c1
 8005698:	0800569d 	.word	0x0800569d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	2b06      	cmp	r3, #6
 80056a0:	d913      	bls.n	80056ca <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80056a6:	e010      	b.n	80056ca <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b07      	cmp	r3, #7
 80056ac:	d90f      	bls.n	80056ce <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80056b2:	e00c      	b.n	80056ce <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b0f      	cmp	r3, #15
 80056b8:	d90b      	bls.n	80056d2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80056be:	e008      	b.n	80056d2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	75fb      	strb	r3, [r7, #23]
      break;
 80056c4:	e006      	b.n	80056d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80056c6:	bf00      	nop
 80056c8:	e004      	b.n	80056d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80056ca:	bf00      	nop
 80056cc:	e002      	b.n	80056d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80056ce:	bf00      	nop
 80056d0:	e000      	b.n	80056d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80056d2:	bf00      	nop
  }
  if (status == HAL_OK)
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10d      	bne.n	80056f6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f023 0118 	bic.w	r1, r3, #24
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e098      	b.n	8005848 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	4b4d      	ldr	r3, [pc, #308]	; (8005854 <HAL_DMA_Init+0x150>)
 800571e:	429a      	cmp	r2, r3
 8005720:	d80f      	bhi.n	8005742 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	4b4b      	ldr	r3, [pc, #300]	; (8005858 <HAL_DMA_Init+0x154>)
 800572a:	4413      	add	r3, r2
 800572c:	4a4b      	ldr	r2, [pc, #300]	; (800585c <HAL_DMA_Init+0x158>)
 800572e:	fba2 2303 	umull	r2, r3, r2, r3
 8005732:	091b      	lsrs	r3, r3, #4
 8005734:	009a      	lsls	r2, r3, #2
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a48      	ldr	r2, [pc, #288]	; (8005860 <HAL_DMA_Init+0x15c>)
 800573e:	641a      	str	r2, [r3, #64]	; 0x40
 8005740:	e00e      	b.n	8005760 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	4b46      	ldr	r3, [pc, #280]	; (8005864 <HAL_DMA_Init+0x160>)
 800574a:	4413      	add	r3, r2
 800574c:	4a43      	ldr	r2, [pc, #268]	; (800585c <HAL_DMA_Init+0x158>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	009a      	lsls	r2, r3, #2
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a42      	ldr	r2, [pc, #264]	; (8005868 <HAL_DMA_Init+0x164>)
 800575e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800579c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ba:	d039      	beq.n	8005830 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	4a27      	ldr	r2, [pc, #156]	; (8005860 <HAL_DMA_Init+0x15c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d11a      	bne.n	80057fc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80057c6:	4b29      	ldr	r3, [pc, #164]	; (800586c <HAL_DMA_Init+0x168>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ce:	f003 031c 	and.w	r3, r3, #28
 80057d2:	210f      	movs	r1, #15
 80057d4:	fa01 f303 	lsl.w	r3, r1, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	4924      	ldr	r1, [pc, #144]	; (800586c <HAL_DMA_Init+0x168>)
 80057dc:	4013      	ands	r3, r2
 80057de:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80057e0:	4b22      	ldr	r3, [pc, #136]	; (800586c <HAL_DMA_Init+0x168>)
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6859      	ldr	r1, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ec:	f003 031c 	and.w	r3, r3, #28
 80057f0:	fa01 f303 	lsl.w	r3, r1, r3
 80057f4:	491d      	ldr	r1, [pc, #116]	; (800586c <HAL_DMA_Init+0x168>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	600b      	str	r3, [r1, #0]
 80057fa:	e019      	b.n	8005830 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80057fc:	4b1c      	ldr	r3, [pc, #112]	; (8005870 <HAL_DMA_Init+0x16c>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005804:	f003 031c 	and.w	r3, r3, #28
 8005808:	210f      	movs	r1, #15
 800580a:	fa01 f303 	lsl.w	r3, r1, r3
 800580e:	43db      	mvns	r3, r3
 8005810:	4917      	ldr	r1, [pc, #92]	; (8005870 <HAL_DMA_Init+0x16c>)
 8005812:	4013      	ands	r3, r2
 8005814:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005816:	4b16      	ldr	r3, [pc, #88]	; (8005870 <HAL_DMA_Init+0x16c>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6859      	ldr	r1, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005822:	f003 031c 	and.w	r3, r3, #28
 8005826:	fa01 f303 	lsl.w	r3, r1, r3
 800582a:	4911      	ldr	r1, [pc, #68]	; (8005870 <HAL_DMA_Init+0x16c>)
 800582c:	4313      	orrs	r3, r2
 800582e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	40020407 	.word	0x40020407
 8005858:	bffdfff8 	.word	0xbffdfff8
 800585c:	cccccccd 	.word	0xcccccccd
 8005860:	40020000 	.word	0x40020000
 8005864:	bffdfbf8 	.word	0xbffdfbf8
 8005868:	40020400 	.word	0x40020400
 800586c:	400200a8 	.word	0x400200a8
 8005870:	400204a8 	.word	0x400204a8

08005874 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_DMA_Start_IT+0x20>
 8005890:	2302      	movs	r3, #2
 8005892:	e04b      	b.n	800592c <HAL_DMA_Start_IT+0xb8>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d13a      	bne.n	800591e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0201 	bic.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 f95f 	bl	8005b90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d008      	beq.n	80058ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 020e 	orr.w	r2, r2, #14
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	e00f      	b.n	800590c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0204 	bic.w	r2, r2, #4
 80058fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 020a 	orr.w	r2, r2, #10
 800590a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0201 	orr.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	e005      	b.n	800592a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005926:	2302      	movs	r3, #2
 8005928:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d008      	beq.n	800595e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2204      	movs	r2, #4
 8005950:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e022      	b.n	80059a4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 020e 	bic.w	r2, r2, #14
 800596c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005982:	f003 021c 	and.w	r2, r3, #28
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	2101      	movs	r1, #1
 800598c:	fa01 f202 	lsl.w	r2, r1, r2
 8005990:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d005      	beq.n	80059d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2204      	movs	r2, #4
 80059cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
 80059d2:	e029      	b.n	8005a28 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 020e 	bic.w	r2, r2, #14
 80059e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0201 	bic.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f8:	f003 021c 	and.w	r2, r3, #28
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	2101      	movs	r1, #1
 8005a02:	fa01 f202 	lsl.w	r2, r1, r2
 8005a06:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	4798      	blx	r3
    }
  }
  return status;
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4e:	f003 031c 	and.w	r3, r3, #28
 8005a52:	2204      	movs	r2, #4
 8005a54:	409a      	lsls	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d026      	beq.n	8005aac <HAL_DMA_IRQHandler+0x7a>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d021      	beq.n	8005aac <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d107      	bne.n	8005a86 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0204 	bic.w	r2, r2, #4
 8005a84:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8a:	f003 021c 	and.w	r2, r3, #28
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	2104      	movs	r1, #4
 8005a94:	fa01 f202 	lsl.w	r2, r1, r2
 8005a98:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d071      	beq.n	8005b86 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005aaa:	e06c      	b.n	8005b86 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab0:	f003 031c 	and.w	r3, r3, #28
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	409a      	lsls	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d02e      	beq.n	8005b1e <HAL_DMA_IRQHandler+0xec>
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d029      	beq.n	8005b1e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0320 	and.w	r3, r3, #32
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10b      	bne.n	8005af0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 020a 	bic.w	r2, r2, #10
 8005ae6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af4:	f003 021c 	and.w	r2, r3, #28
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	2102      	movs	r1, #2
 8005afe:	fa01 f202 	lsl.w	r2, r1, r2
 8005b02:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d038      	beq.n	8005b86 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005b1c:	e033      	b.n	8005b86 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	f003 031c 	and.w	r3, r3, #28
 8005b26:	2208      	movs	r2, #8
 8005b28:	409a      	lsls	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d02a      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x156>
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d025      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 020e 	bic.w	r2, r2, #14
 8005b4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b50:	f003 021c 	and.w	r2, r3, #28
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	2101      	movs	r1, #1
 8005b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d004      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005b86:	bf00      	nop
 8005b88:	bf00      	nop
}
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba2:	f003 021c 	and.w	r2, r3, #28
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	2101      	movs	r1, #1
 8005bac:	fa01 f202 	lsl.w	r2, r1, r2
 8005bb0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	2b10      	cmp	r3, #16
 8005bc0:	d108      	bne.n	8005bd4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005bd2:	e007      	b.n	8005be4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	60da      	str	r2, [r3, #12]
}
 8005be4:	bf00      	nop
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bfe:	e154      	b.n	8005eaa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	2101      	movs	r1, #1
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 8146 	beq.w	8005ea4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d005      	beq.n	8005c30 <HAL_GPIO_Init+0x40>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d130      	bne.n	8005c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	2203      	movs	r2, #3
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	43db      	mvns	r3, r3
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4013      	ands	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c66:	2201      	movs	r2, #1
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4013      	ands	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	091b      	lsrs	r3, r3, #4
 8005c7c:	f003 0201 	and.w	r2, r3, #1
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d017      	beq.n	8005cce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	2203      	movs	r2, #3
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d123      	bne.n	8005d22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	08da      	lsrs	r2, r3, #3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3208      	adds	r2, #8
 8005ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	220f      	movs	r2, #15
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	43db      	mvns	r3, r3
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	691a      	ldr	r2, [r3, #16]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	08da      	lsrs	r2, r3, #3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3208      	adds	r2, #8
 8005d1c:	6939      	ldr	r1, [r7, #16]
 8005d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	43db      	mvns	r3, r3
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4013      	ands	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f003 0203 	and.w	r2, r3, #3
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 80a0 	beq.w	8005ea4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d64:	4b58      	ldr	r3, [pc, #352]	; (8005ec8 <HAL_GPIO_Init+0x2d8>)
 8005d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d68:	4a57      	ldr	r2, [pc, #348]	; (8005ec8 <HAL_GPIO_Init+0x2d8>)
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	6613      	str	r3, [r2, #96]	; 0x60
 8005d70:	4b55      	ldr	r3, [pc, #340]	; (8005ec8 <HAL_GPIO_Init+0x2d8>)
 8005d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005d7c:	4a53      	ldr	r2, [pc, #332]	; (8005ecc <HAL_GPIO_Init+0x2dc>)
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	089b      	lsrs	r3, r3, #2
 8005d82:	3302      	adds	r3, #2
 8005d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	220f      	movs	r2, #15
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005da6:	d019      	beq.n	8005ddc <HAL_GPIO_Init+0x1ec>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a49      	ldr	r2, [pc, #292]	; (8005ed0 <HAL_GPIO_Init+0x2e0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d013      	beq.n	8005dd8 <HAL_GPIO_Init+0x1e8>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a48      	ldr	r2, [pc, #288]	; (8005ed4 <HAL_GPIO_Init+0x2e4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00d      	beq.n	8005dd4 <HAL_GPIO_Init+0x1e4>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a47      	ldr	r2, [pc, #284]	; (8005ed8 <HAL_GPIO_Init+0x2e8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d007      	beq.n	8005dd0 <HAL_GPIO_Init+0x1e0>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a46      	ldr	r2, [pc, #280]	; (8005edc <HAL_GPIO_Init+0x2ec>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d101      	bne.n	8005dcc <HAL_GPIO_Init+0x1dc>
 8005dc8:	2304      	movs	r3, #4
 8005dca:	e008      	b.n	8005dde <HAL_GPIO_Init+0x1ee>
 8005dcc:	2307      	movs	r3, #7
 8005dce:	e006      	b.n	8005dde <HAL_GPIO_Init+0x1ee>
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e004      	b.n	8005dde <HAL_GPIO_Init+0x1ee>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e002      	b.n	8005dde <HAL_GPIO_Init+0x1ee>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <HAL_GPIO_Init+0x1ee>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	f002 0203 	and.w	r2, r2, #3
 8005de4:	0092      	lsls	r2, r2, #2
 8005de6:	4093      	lsls	r3, r2
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005dee:	4937      	ldr	r1, [pc, #220]	; (8005ecc <HAL_GPIO_Init+0x2dc>)
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	089b      	lsrs	r3, r3, #2
 8005df4:	3302      	adds	r3, #2
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005dfc:	4b38      	ldr	r3, [pc, #224]	; (8005ee0 <HAL_GPIO_Init+0x2f0>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	43db      	mvns	r3, r3
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e20:	4a2f      	ldr	r2, [pc, #188]	; (8005ee0 <HAL_GPIO_Init+0x2f0>)
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005e26:	4b2e      	ldr	r3, [pc, #184]	; (8005ee0 <HAL_GPIO_Init+0x2f0>)
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	43db      	mvns	r3, r3
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4013      	ands	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e4a:	4a25      	ldr	r2, [pc, #148]	; (8005ee0 <HAL_GPIO_Init+0x2f0>)
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005e50:	4b23      	ldr	r3, [pc, #140]	; (8005ee0 <HAL_GPIO_Init+0x2f0>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e74:	4a1a      	ldr	r2, [pc, #104]	; (8005ee0 <HAL_GPIO_Init+0x2f0>)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005e7a:	4b19      	ldr	r3, [pc, #100]	; (8005ee0 <HAL_GPIO_Init+0x2f0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	43db      	mvns	r3, r3
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4013      	ands	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e9e:	4a10      	ldr	r2, [pc, #64]	; (8005ee0 <HAL_GPIO_Init+0x2f0>)
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f47f aea3 	bne.w	8005c00 <HAL_GPIO_Init+0x10>
  }
}
 8005eba:	bf00      	nop
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	48000400 	.word	0x48000400
 8005ed4:	48000800 	.word	0x48000800
 8005ed8:	48000c00 	.word	0x48000c00
 8005edc:	48001000 	.word	0x48001000
 8005ee0:	40010400 	.word	0x40010400

08005ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	887b      	ldrh	r3, [r7, #2]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005efc:	2301      	movs	r3, #1
 8005efe:	73fb      	strb	r3, [r7, #15]
 8005f00:	e001      	b.n	8005f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f02:	2300      	movs	r3, #0
 8005f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	807b      	strh	r3, [r7, #2]
 8005f20:	4613      	mov	r3, r2
 8005f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f24:	787b      	ldrb	r3, [r7, #1]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f2a:	887a      	ldrh	r2, [r7, #2]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f30:	e002      	b.n	8005f38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f32:	887a      	ldrh	r2, [r7, #2]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f56:	887a      	ldrh	r2, [r7, #2]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	041a      	lsls	r2, r3, #16
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	43d9      	mvns	r1, r3
 8005f62:	887b      	ldrh	r3, [r7, #2]
 8005f64:	400b      	ands	r3, r1
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	619a      	str	r2, [r3, #24]
}
 8005f6c:	bf00      	nop
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e081      	b.n	800608e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fc fe32 	bl	8002c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2224      	movs	r2, #36	; 0x24
 8005fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0201 	bic.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d107      	bne.n	8005ff2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	e006      	b.n	8006000 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ffe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d104      	bne.n	8006012 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006010:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006024:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006034:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69d9      	ldr	r1, [r3, #28]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1a      	ldr	r2, [r3, #32]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af02      	add	r7, sp, #8
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	607a      	str	r2, [r7, #4]
 80060a2:	461a      	mov	r2, r3
 80060a4:	460b      	mov	r3, r1
 80060a6:	817b      	strh	r3, [r7, #10]
 80060a8:	4613      	mov	r3, r2
 80060aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	f040 80da 	bne.w	800626e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_I2C_Master_Transmit+0x30>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e0d3      	b.n	8006270 <HAL_I2C_Master_Transmit+0x1d8>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060d0:	f7fd fe14 	bl	8003cfc <HAL_GetTick>
 80060d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	2319      	movs	r3, #25
 80060dc:	2201      	movs	r2, #1
 80060de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 fdc4 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e0be      	b.n	8006270 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2221      	movs	r2, #33	; 0x21
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2210      	movs	r2, #16
 80060fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	893a      	ldrh	r2, [r7, #8]
 8006112:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611e:	b29b      	uxth	r3, r3
 8006120:	2bff      	cmp	r3, #255	; 0xff
 8006122:	d90e      	bls.n	8006142 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	22ff      	movs	r2, #255	; 0xff
 8006128:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612e:	b2da      	uxtb	r2, r3
 8006130:	8979      	ldrh	r1, [r7, #10]
 8006132:	4b51      	ldr	r3, [pc, #324]	; (8006278 <HAL_I2C_Master_Transmit+0x1e0>)
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 ffba 	bl	80070b4 <I2C_TransferConfig>
 8006140:	e06c      	b.n	800621c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006150:	b2da      	uxtb	r2, r3
 8006152:	8979      	ldrh	r1, [r7, #10]
 8006154:	4b48      	ldr	r3, [pc, #288]	; (8006278 <HAL_I2C_Master_Transmit+0x1e0>)
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 ffa9 	bl	80070b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006162:	e05b      	b.n	800621c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	6a39      	ldr	r1, [r7, #32]
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fdc1 	bl	8006cf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e07b      	b.n	8006270 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	781a      	ldrb	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d034      	beq.n	800621c <HAL_I2C_Master_Transmit+0x184>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d130      	bne.n	800621c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	2200      	movs	r2, #0
 80061c2:	2180      	movs	r1, #128	; 0x80
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fd53 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e04d      	b.n	8006270 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2bff      	cmp	r3, #255	; 0xff
 80061dc:	d90e      	bls.n	80061fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	22ff      	movs	r2, #255	; 0xff
 80061e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	8979      	ldrh	r1, [r7, #10]
 80061ec:	2300      	movs	r3, #0
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 ff5d 	bl	80070b4 <I2C_TransferConfig>
 80061fa:	e00f      	b.n	800621c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620a:	b2da      	uxtb	r2, r3
 800620c:	8979      	ldrh	r1, [r7, #10]
 800620e:	2300      	movs	r3, #0
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 ff4c 	bl	80070b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d19e      	bne.n	8006164 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	6a39      	ldr	r1, [r7, #32]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 fda0 	bl	8006d70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e01a      	b.n	8006270 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2220      	movs	r2, #32
 8006240:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6859      	ldr	r1, [r3, #4]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	4b0b      	ldr	r3, [pc, #44]	; (800627c <HAL_I2C_Master_Transmit+0x1e4>)
 800624e:	400b      	ands	r3, r1
 8006250:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2220      	movs	r2, #32
 8006256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	e000      	b.n	8006270 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800626e:	2302      	movs	r3, #2
  }
}
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	80002000 	.word	0x80002000
 800627c:	fe00e800 	.word	0xfe00e800

08006280 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	461a      	mov	r2, r3
 800628c:	460b      	mov	r3, r1
 800628e:	817b      	strh	r3, [r7, #10]
 8006290:	4613      	mov	r3, r2
 8006292:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b20      	cmp	r3, #32
 800629e:	f040 80db 	bne.w	8006458 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_I2C_Master_Receive+0x30>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e0d4      	b.n	800645a <HAL_I2C_Master_Receive+0x1da>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062b8:	f7fd fd20 	bl	8003cfc <HAL_GetTick>
 80062bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	2319      	movs	r3, #25
 80062c4:	2201      	movs	r2, #1
 80062c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fcd0 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e0bf      	b.n	800645a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2222      	movs	r2, #34	; 0x22
 80062de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2210      	movs	r2, #16
 80062e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	893a      	ldrh	r2, [r7, #8]
 80062fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006306:	b29b      	uxth	r3, r3
 8006308:	2bff      	cmp	r3, #255	; 0xff
 800630a:	d90e      	bls.n	800632a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	22ff      	movs	r2, #255	; 0xff
 8006310:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006316:	b2da      	uxtb	r2, r3
 8006318:	8979      	ldrh	r1, [r7, #10]
 800631a:	4b52      	ldr	r3, [pc, #328]	; (8006464 <HAL_I2C_Master_Receive+0x1e4>)
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fec6 	bl	80070b4 <I2C_TransferConfig>
 8006328:	e06d      	b.n	8006406 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006338:	b2da      	uxtb	r2, r3
 800633a:	8979      	ldrh	r1, [r7, #10]
 800633c:	4b49      	ldr	r3, [pc, #292]	; (8006464 <HAL_I2C_Master_Receive+0x1e4>)
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 feb5 	bl	80070b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800634a:	e05c      	b.n	8006406 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	6a39      	ldr	r1, [r7, #32]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 fd49 	bl	8006de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e07c      	b.n	800645a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637c:	3b01      	subs	r3, #1
 800637e:	b29a      	uxth	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d034      	beq.n	8006406 <HAL_I2C_Master_Receive+0x186>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d130      	bne.n	8006406 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	2200      	movs	r2, #0
 80063ac:	2180      	movs	r1, #128	; 0x80
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 fc5e 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e04d      	b.n	800645a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2bff      	cmp	r3, #255	; 0xff
 80063c6:	d90e      	bls.n	80063e6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	22ff      	movs	r2, #255	; 0xff
 80063cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	8979      	ldrh	r1, [r7, #10]
 80063d6:	2300      	movs	r3, #0
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 fe68 	bl	80070b4 <I2C_TransferConfig>
 80063e4:	e00f      	b.n	8006406 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	8979      	ldrh	r1, [r7, #10]
 80063f8:	2300      	movs	r3, #0
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 fe57 	bl	80070b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d19d      	bne.n	800634c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	6a39      	ldr	r1, [r7, #32]
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 fcab 	bl	8006d70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e01a      	b.n	800645a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2220      	movs	r2, #32
 800642a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6859      	ldr	r1, [r3, #4]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <HAL_I2C_Master_Receive+0x1e8>)
 8006438:	400b      	ands	r3, r1
 800643a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	e000      	b.n	800645a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006458:	2302      	movs	r3, #2
  }
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	80002400 	.word	0x80002400
 8006468:	fe00e800 	.word	0xfe00e800

0800646c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af02      	add	r7, sp, #8
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	4608      	mov	r0, r1
 8006476:	4611      	mov	r1, r2
 8006478:	461a      	mov	r2, r3
 800647a:	4603      	mov	r3, r0
 800647c:	817b      	strh	r3, [r7, #10]
 800647e:	460b      	mov	r3, r1
 8006480:	813b      	strh	r3, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b20      	cmp	r3, #32
 8006490:	f040 80f9 	bne.w	8006686 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <HAL_I2C_Mem_Write+0x34>
 800649a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800649c:	2b00      	cmp	r3, #0
 800649e:	d105      	bne.n	80064ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e0ed      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_I2C_Mem_Write+0x4e>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e0e6      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064c2:	f7fd fc1b 	bl	8003cfc <HAL_GetTick>
 80064c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	2319      	movs	r3, #25
 80064ce:	2201      	movs	r2, #1
 80064d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 fbcb 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0d1      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2221      	movs	r2, #33	; 0x21
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2240      	movs	r2, #64	; 0x40
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a3a      	ldr	r2, [r7, #32]
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006504:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800650c:	88f8      	ldrh	r0, [r7, #6]
 800650e:	893a      	ldrh	r2, [r7, #8]
 8006510:	8979      	ldrh	r1, [r7, #10]
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	4603      	mov	r3, r0
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 fadb 	bl	8006ad8 <I2C_RequestMemoryWrite>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0a9      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	2bff      	cmp	r3, #255	; 0xff
 800653c:	d90e      	bls.n	800655c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	22ff      	movs	r2, #255	; 0xff
 8006542:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006548:	b2da      	uxtb	r2, r3
 800654a:	8979      	ldrh	r1, [r7, #10]
 800654c:	2300      	movs	r3, #0
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 fdad 	bl	80070b4 <I2C_TransferConfig>
 800655a:	e00f      	b.n	800657c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656a:	b2da      	uxtb	r2, r3
 800656c:	8979      	ldrh	r1, [r7, #10]
 800656e:	2300      	movs	r3, #0
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 fd9c 	bl	80070b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fbb5 	bl	8006cf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e07b      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d034      	beq.n	8006634 <HAL_I2C_Mem_Write+0x1c8>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d130      	bne.n	8006634 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	2200      	movs	r2, #0
 80065da:	2180      	movs	r1, #128	; 0x80
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 fb47 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e04d      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2bff      	cmp	r3, #255	; 0xff
 80065f4:	d90e      	bls.n	8006614 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	22ff      	movs	r2, #255	; 0xff
 80065fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006600:	b2da      	uxtb	r2, r3
 8006602:	8979      	ldrh	r1, [r7, #10]
 8006604:	2300      	movs	r3, #0
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fd51 	bl	80070b4 <I2C_TransferConfig>
 8006612:	e00f      	b.n	8006634 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006622:	b2da      	uxtb	r2, r3
 8006624:	8979      	ldrh	r1, [r7, #10]
 8006626:	2300      	movs	r3, #0
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 fd40 	bl	80070b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d19e      	bne.n	800657c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 fb94 	bl	8006d70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e01a      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2220      	movs	r2, #32
 8006658:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6859      	ldr	r1, [r3, #4]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <HAL_I2C_Mem_Write+0x224>)
 8006666:	400b      	ands	r3, r1
 8006668:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	e000      	b.n	8006688 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006686:	2302      	movs	r3, #2
  }
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	fe00e800 	.word	0xfe00e800

08006694 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	4608      	mov	r0, r1
 800669e:	4611      	mov	r1, r2
 80066a0:	461a      	mov	r2, r3
 80066a2:	4603      	mov	r3, r0
 80066a4:	817b      	strh	r3, [r7, #10]
 80066a6:	460b      	mov	r3, r1
 80066a8:	813b      	strh	r3, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	f040 80fd 	bne.w	80068b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_I2C_Mem_Read+0x34>
 80066c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d105      	bne.n	80066d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0f1      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_I2C_Mem_Read+0x4e>
 80066de:	2302      	movs	r3, #2
 80066e0:	e0ea      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80066ea:	f7fd fb07 	bl	8003cfc <HAL_GetTick>
 80066ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	2319      	movs	r3, #25
 80066f6:	2201      	movs	r2, #1
 80066f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 fab7 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e0d5      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2222      	movs	r2, #34	; 0x22
 8006710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2240      	movs	r2, #64	; 0x40
 8006718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a3a      	ldr	r2, [r7, #32]
 8006726:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800672c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006734:	88f8      	ldrh	r0, [r7, #6]
 8006736:	893a      	ldrh	r2, [r7, #8]
 8006738:	8979      	ldrh	r1, [r7, #10]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	4603      	mov	r3, r0
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 fa1b 	bl	8006b80 <I2C_RequestMemoryRead>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e0ad      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006760:	b29b      	uxth	r3, r3
 8006762:	2bff      	cmp	r3, #255	; 0xff
 8006764:	d90e      	bls.n	8006784 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	22ff      	movs	r2, #255	; 0xff
 800676a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006770:	b2da      	uxtb	r2, r3
 8006772:	8979      	ldrh	r1, [r7, #10]
 8006774:	4b52      	ldr	r3, [pc, #328]	; (80068c0 <HAL_I2C_Mem_Read+0x22c>)
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fc99 	bl	80070b4 <I2C_TransferConfig>
 8006782:	e00f      	b.n	80067a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006788:	b29a      	uxth	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006792:	b2da      	uxtb	r2, r3
 8006794:	8979      	ldrh	r1, [r7, #10]
 8006796:	4b4a      	ldr	r3, [pc, #296]	; (80068c0 <HAL_I2C_Mem_Read+0x22c>)
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 fc88 	bl	80070b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	2200      	movs	r2, #0
 80067ac:	2104      	movs	r1, #4
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fa5e 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e07c      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d034      	beq.n	8006864 <HAL_I2C_Mem_Read+0x1d0>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d130      	bne.n	8006864 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006808:	2200      	movs	r2, #0
 800680a:	2180      	movs	r1, #128	; 0x80
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 fa2f 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e04d      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006820:	b29b      	uxth	r3, r3
 8006822:	2bff      	cmp	r3, #255	; 0xff
 8006824:	d90e      	bls.n	8006844 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	22ff      	movs	r2, #255	; 0xff
 800682a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006830:	b2da      	uxtb	r2, r3
 8006832:	8979      	ldrh	r1, [r7, #10]
 8006834:	2300      	movs	r3, #0
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 fc39 	bl	80070b4 <I2C_TransferConfig>
 8006842:	e00f      	b.n	8006864 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006848:	b29a      	uxth	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006852:	b2da      	uxtb	r2, r3
 8006854:	8979      	ldrh	r1, [r7, #10]
 8006856:	2300      	movs	r3, #0
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 fc28 	bl	80070b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d19a      	bne.n	80067a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 fa7c 	bl	8006d70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e01a      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2220      	movs	r2, #32
 8006888:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6859      	ldr	r1, [r3, #4]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <HAL_I2C_Mem_Read+0x230>)
 8006896:	400b      	ands	r3, r1
 8006898:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2220      	movs	r2, #32
 800689e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	e000      	b.n	80068b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80068b6:	2302      	movs	r3, #2
  }
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	80002400 	.word	0x80002400
 80068c4:	fe00e800 	.word	0xfe00e800

080068c8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	; 0x28
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	460b      	mov	r3, r1
 80068d6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80068d8:	2300      	movs	r3, #0
 80068da:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	f040 80f1 	bne.w	8006acc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f8:	d101      	bne.n	80068fe <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80068fa:	2302      	movs	r3, #2
 80068fc:	e0e7      	b.n	8006ace <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_I2C_IsDeviceReady+0x44>
 8006908:	2302      	movs	r3, #2
 800690a:	e0e0      	b.n	8006ace <HAL_I2C_IsDeviceReady+0x206>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2224      	movs	r2, #36	; 0x24
 8006918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d107      	bne.n	800693a <HAL_I2C_IsDeviceReady+0x72>
 800692a:	897b      	ldrh	r3, [r7, #10]
 800692c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006930:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006934:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006938:	e004      	b.n	8006944 <HAL_I2C_IsDeviceReady+0x7c>
 800693a:	897b      	ldrh	r3, [r7, #10]
 800693c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006940:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800694a:	f7fd f9d7 	bl	8003cfc <HAL_GetTick>
 800694e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b20      	cmp	r3, #32
 800695c:	bf0c      	ite	eq
 800695e:	2301      	moveq	r3, #1
 8006960:	2300      	movne	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	f003 0310 	and.w	r3, r3, #16
 8006970:	2b10      	cmp	r3, #16
 8006972:	bf0c      	ite	eq
 8006974:	2301      	moveq	r3, #1
 8006976:	2300      	movne	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800697c:	e034      	b.n	80069e8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d01a      	beq.n	80069bc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006986:	f7fd f9b9 	bl	8003cfc <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	429a      	cmp	r2, r3
 8006994:	d302      	bcc.n	800699c <HAL_I2C_IsDeviceReady+0xd4>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10f      	bne.n	80069bc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e088      	b.n	8006ace <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	bf0c      	ite	eq
 80069ca:	2301      	moveq	r3, #1
 80069cc:	2300      	movne	r3, #0
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f003 0310 	and.w	r3, r3, #16
 80069dc:	2b10      	cmp	r3, #16
 80069de:	bf0c      	ite	eq
 80069e0:	2301      	moveq	r3, #1
 80069e2:	2300      	movne	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80069e8:	7ffb      	ldrb	r3, [r7, #31]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d102      	bne.n	80069f4 <HAL_I2C_IsDeviceReady+0x12c>
 80069ee:	7fbb      	ldrb	r3, [r7, #30]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0c4      	beq.n	800697e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f003 0310 	and.w	r3, r3, #16
 80069fe:	2b10      	cmp	r3, #16
 8006a00:	d01a      	beq.n	8006a38 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2120      	movs	r1, #32
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 f92f 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e058      	b.n	8006ace <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2220      	movs	r2, #32
 8006a22:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	e04a      	b.n	8006ace <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2120      	movs	r1, #32
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f914 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e03d      	b.n	8006ace <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2210      	movs	r2, #16
 8006a58:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d118      	bne.n	8006a9c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a78:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2200      	movs	r2, #0
 8006a82:	2120      	movs	r1, #32
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 f8f3 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e01c      	b.n	8006ace <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	f63f af3b 	bhi.w	8006922 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab8:	f043 0220 	orr.w	r2, r3, #32
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006acc:	2302      	movs	r3, #2
  }
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	817b      	strh	r3, [r7, #10]
 8006aea:	460b      	mov	r3, r1
 8006aec:	813b      	strh	r3, [r7, #8]
 8006aee:	4613      	mov	r3, r2
 8006af0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	8979      	ldrh	r1, [r7, #10]
 8006af8:	4b20      	ldr	r3, [pc, #128]	; (8006b7c <I2C_RequestMemoryWrite+0xa4>)
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fad7 	bl	80070b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b06:	69fa      	ldr	r2, [r7, #28]
 8006b08:	69b9      	ldr	r1, [r7, #24]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 f8f0 	bl	8006cf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e02c      	b.n	8006b74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b1a:	88fb      	ldrh	r3, [r7, #6]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d105      	bne.n	8006b2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b20:	893b      	ldrh	r3, [r7, #8]
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	629a      	str	r2, [r3, #40]	; 0x28
 8006b2a:	e015      	b.n	8006b58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b2c:	893b      	ldrh	r3, [r7, #8]
 8006b2e:	0a1b      	lsrs	r3, r3, #8
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	69b9      	ldr	r1, [r7, #24]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f8d6 	bl	8006cf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e012      	b.n	8006b74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b4e:	893b      	ldrh	r3, [r7, #8]
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2180      	movs	r1, #128	; 0x80
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 f884 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	80002000 	.word	0x80002000

08006b80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	4608      	mov	r0, r1
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	817b      	strh	r3, [r7, #10]
 8006b92:	460b      	mov	r3, r1
 8006b94:	813b      	strh	r3, [r7, #8]
 8006b96:	4613      	mov	r3, r2
 8006b98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006b9a:	88fb      	ldrh	r3, [r7, #6]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	8979      	ldrh	r1, [r7, #10]
 8006ba0:	4b20      	ldr	r3, [pc, #128]	; (8006c24 <I2C_RequestMemoryRead+0xa4>)
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fa84 	bl	80070b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	69b9      	ldr	r1, [r7, #24]
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f89d 	bl	8006cf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e02c      	b.n	8006c1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bc0:	88fb      	ldrh	r3, [r7, #6]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d105      	bne.n	8006bd2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bc6:	893b      	ldrh	r3, [r7, #8]
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	629a      	str	r2, [r3, #40]	; 0x28
 8006bd0:	e015      	b.n	8006bfe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006bd2:	893b      	ldrh	r3, [r7, #8]
 8006bd4:	0a1b      	lsrs	r3, r3, #8
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	69b9      	ldr	r1, [r7, #24]
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f883 	bl	8006cf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e012      	b.n	8006c1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bf4:	893b      	ldrh	r3, [r7, #8]
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	2200      	movs	r2, #0
 8006c06:	2140      	movs	r1, #64	; 0x40
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 f831 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e000      	b.n	8006c1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	80002000 	.word	0x80002000

08006c28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d103      	bne.n	8006c46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2200      	movs	r2, #0
 8006c44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d007      	beq.n	8006c64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699a      	ldr	r2, [r3, #24]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0201 	orr.w	r2, r2, #1
 8006c62:	619a      	str	r2, [r3, #24]
  }
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c80:	e022      	b.n	8006cc8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c88:	d01e      	beq.n	8006cc8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c8a:	f7fd f837 	bl	8003cfc <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d302      	bcc.n	8006ca0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d113      	bne.n	8006cc8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca4:	f043 0220 	orr.w	r2, r3, #32
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e00f      	b.n	8006ce8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	bf0c      	ite	eq
 8006cd8:	2301      	moveq	r3, #1
 8006cda:	2300      	movne	r3, #0
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	461a      	mov	r2, r3
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d0cd      	beq.n	8006c82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cfc:	e02c      	b.n	8006d58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 f8ea 	bl	8006edc <I2C_IsErrorOccurred>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e02a      	b.n	8006d68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d01e      	beq.n	8006d58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1a:	f7fc ffef 	bl	8003cfc <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d302      	bcc.n	8006d30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d113      	bne.n	8006d58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d34:	f043 0220 	orr.w	r2, r3, #32
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e007      	b.n	8006d68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d1cb      	bne.n	8006cfe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d7c:	e028      	b.n	8006dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	68b9      	ldr	r1, [r7, #8]
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 f8aa 	bl	8006edc <I2C_IsErrorOccurred>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e026      	b.n	8006de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d92:	f7fc ffb3 	bl	8003cfc <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d302      	bcc.n	8006da8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d113      	bne.n	8006dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dac:	f043 0220 	orr.w	r2, r3, #32
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e007      	b.n	8006de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d1cf      	bne.n	8006d7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006df4:	e064      	b.n	8006ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f86e 	bl	8006edc <I2C_IsErrorOccurred>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e062      	b.n	8006ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f003 0320 	and.w	r3, r3, #32
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d138      	bne.n	8006e8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f003 0304 	and.w	r3, r3, #4
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d105      	bne.n	8006e32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e04e      	b.n	8006ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	f003 0310 	and.w	r3, r3, #16
 8006e3c:	2b10      	cmp	r3, #16
 8006e3e:	d107      	bne.n	8006e50 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2210      	movs	r2, #16
 8006e46:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2204      	movs	r2, #4
 8006e4c:	645a      	str	r2, [r3, #68]	; 0x44
 8006e4e:	e002      	b.n	8006e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6859      	ldr	r1, [r3, #4]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	4b1b      	ldr	r3, [pc, #108]	; (8006ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006e6a:	400b      	ands	r3, r1
 8006e6c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e022      	b.n	8006ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e8a:	f7fc ff37 	bl	8003cfc <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d302      	bcc.n	8006ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10f      	bne.n	8006ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea4:	f043 0220 	orr.w	r2, r3, #32
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e007      	b.n	8006ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d193      	bne.n	8006df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	fe00e800 	.word	0xfe00e800

08006edc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08a      	sub	sp, #40	; 0x28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	f003 0310 	and.w	r3, r3, #16
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d075      	beq.n	8006ff4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2210      	movs	r2, #16
 8006f0e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f10:	e056      	b.n	8006fc0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d052      	beq.n	8006fc0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f1a:	f7fc feef 	bl	8003cfc <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <I2C_IsErrorOccurred+0x54>
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d147      	bne.n	8006fc0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f42:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f52:	d12e      	bne.n	8006fb2 <I2C_IsErrorOccurred+0xd6>
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f5a:	d02a      	beq.n	8006fb2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006f5c:	7cfb      	ldrb	r3, [r7, #19]
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	d027      	beq.n	8006fb2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f70:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006f72:	f7fc fec3 	bl	8003cfc <HAL_GetTick>
 8006f76:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f78:	e01b      	b.n	8006fb2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006f7a:	f7fc febf 	bl	8003cfc <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b19      	cmp	r3, #25
 8006f86:	d914      	bls.n	8006fb2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8c:	f043 0220 	orr.w	r2, r3, #32
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	f003 0320 	and.w	r3, r3, #32
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	d1dc      	bne.n	8006f7a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d003      	beq.n	8006fd6 <I2C_IsErrorOccurred+0xfa>
 8006fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d09d      	beq.n	8006f12 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d103      	bne.n	8006fe6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	f043 0304 	orr.w	r3, r3, #4
 8006fec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00b      	beq.n	800701e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	f043 0301 	orr.w	r3, r3, #1
 800700c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007016:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	f043 0308 	orr.w	r3, r3, #8
 800702e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007038:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00b      	beq.n	8007062 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	f043 0302 	orr.w	r3, r3, #2
 8007050:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800705a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01c      	beq.n	80070a4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f7ff fddc 	bl	8006c28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6859      	ldr	r1, [r3, #4]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <I2C_IsErrorOccurred+0x1d4>)
 800707c:	400b      	ands	r3, r1
 800707e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	431a      	orrs	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80070a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3728      	adds	r7, #40	; 0x28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	fe00e800 	.word	0xfe00e800

080070b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	607b      	str	r3, [r7, #4]
 80070be:	460b      	mov	r3, r1
 80070c0:	817b      	strh	r3, [r7, #10]
 80070c2:	4613      	mov	r3, r2
 80070c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070c6:	897b      	ldrh	r3, [r7, #10]
 80070c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070cc:	7a7b      	ldrb	r3, [r7, #9]
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	4313      	orrs	r3, r2
 80070de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	0d5b      	lsrs	r3, r3, #21
 80070ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80070f2:	4b08      	ldr	r3, [pc, #32]	; (8007114 <I2C_TransferConfig+0x60>)
 80070f4:	430b      	orrs	r3, r1
 80070f6:	43db      	mvns	r3, r3
 80070f8:	ea02 0103 	and.w	r1, r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	430a      	orrs	r2, r1
 8007104:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007106:	bf00      	nop
 8007108:	371c      	adds	r7, #28
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	03ff63ff 	.word	0x03ff63ff

08007118 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b20      	cmp	r3, #32
 800712c:	d138      	bne.n	80071a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007134:	2b01      	cmp	r3, #1
 8007136:	d101      	bne.n	800713c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007138:	2302      	movs	r3, #2
 800713a:	e032      	b.n	80071a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2224      	movs	r2, #36	; 0x24
 8007148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0201 	bic.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800716a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6819      	ldr	r1, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	430a      	orrs	r2, r1
 800717a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0201 	orr.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2220      	movs	r2, #32
 8007190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	e000      	b.n	80071a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071a0:	2302      	movs	r3, #2
  }
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	d139      	bne.n	8007238 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d101      	bne.n	80071d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071ce:	2302      	movs	r3, #2
 80071d0:	e033      	b.n	800723a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2224      	movs	r2, #36	; 0x24
 80071de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0201 	bic.w	r2, r2, #1
 80071f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007200:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f042 0201 	orr.w	r2, r2, #1
 8007222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2220      	movs	r2, #32
 8007228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	e000      	b.n	800723a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007238:	2302      	movs	r3, #2
  }
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
	...

08007248 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007248:	b480      	push	{r7}
 800724a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800724c:	4b04      	ldr	r3, [pc, #16]	; (8007260 <HAL_PWREx_GetVoltageRange+0x18>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007254:	4618      	mov	r0, r3
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	40007000 	.word	0x40007000

08007264 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007272:	d130      	bne.n	80072d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007274:	4b23      	ldr	r3, [pc, #140]	; (8007304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800727c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007280:	d038      	beq.n	80072f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007282:	4b20      	ldr	r3, [pc, #128]	; (8007304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800728a:	4a1e      	ldr	r2, [pc, #120]	; (8007304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800728c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007290:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007292:	4b1d      	ldr	r3, [pc, #116]	; (8007308 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2232      	movs	r2, #50	; 0x32
 8007298:	fb02 f303 	mul.w	r3, r2, r3
 800729c:	4a1b      	ldr	r2, [pc, #108]	; (800730c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800729e:	fba2 2303 	umull	r2, r3, r2, r3
 80072a2:	0c9b      	lsrs	r3, r3, #18
 80072a4:	3301      	adds	r3, #1
 80072a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072a8:	e002      	b.n	80072b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072b0:	4b14      	ldr	r3, [pc, #80]	; (8007304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072bc:	d102      	bne.n	80072c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1f2      	bne.n	80072aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80072c4:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072d0:	d110      	bne.n	80072f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e00f      	b.n	80072f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80072d6:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80072de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072e2:	d007      	beq.n	80072f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80072e4:	4b07      	ldr	r3, [pc, #28]	; (8007304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80072ec:	4a05      	ldr	r2, [pc, #20]	; (8007304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80072ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	40007000 	.word	0x40007000
 8007308:	20000004 	.word	0x20000004
 800730c:	431bde83 	.word	0x431bde83

08007310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d102      	bne.n	8007324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	f000 bc02 	b.w	8007b28 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007324:	4b96      	ldr	r3, [pc, #600]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 030c 	and.w	r3, r3, #12
 800732c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800732e:	4b94      	ldr	r3, [pc, #592]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0310 	and.w	r3, r3, #16
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 80e4 	beq.w	800750e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d007      	beq.n	800735c <HAL_RCC_OscConfig+0x4c>
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	2b0c      	cmp	r3, #12
 8007350:	f040 808b 	bne.w	800746a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	2b01      	cmp	r3, #1
 8007358:	f040 8087 	bne.w	800746a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800735c:	4b88      	ldr	r3, [pc, #544]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d005      	beq.n	8007374 <HAL_RCC_OscConfig+0x64>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e3d9      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1a      	ldr	r2, [r3, #32]
 8007378:	4b81      	ldr	r3, [pc, #516]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0308 	and.w	r3, r3, #8
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <HAL_RCC_OscConfig+0x7e>
 8007384:	4b7e      	ldr	r3, [pc, #504]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800738c:	e005      	b.n	800739a <HAL_RCC_OscConfig+0x8a>
 800738e:	4b7c      	ldr	r3, [pc, #496]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007394:	091b      	lsrs	r3, r3, #4
 8007396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800739a:	4293      	cmp	r3, r2
 800739c:	d223      	bcs.n	80073e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fd8c 	bl	8007ec0 <RCC_SetFlashLatencyFromMSIRange>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e3ba      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073b2:	4b73      	ldr	r3, [pc, #460]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a72      	ldr	r2, [pc, #456]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80073b8:	f043 0308 	orr.w	r3, r3, #8
 80073bc:	6013      	str	r3, [r2, #0]
 80073be:	4b70      	ldr	r3, [pc, #448]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	496d      	ldr	r1, [pc, #436]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073d0:	4b6b      	ldr	r3, [pc, #428]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	4968      	ldr	r1, [pc, #416]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	604b      	str	r3, [r1, #4]
 80073e4:	e025      	b.n	8007432 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073e6:	4b66      	ldr	r3, [pc, #408]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a65      	ldr	r2, [pc, #404]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80073ec:	f043 0308 	orr.w	r3, r3, #8
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	4b63      	ldr	r3, [pc, #396]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	4960      	ldr	r1, [pc, #384]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007400:	4313      	orrs	r3, r2
 8007402:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007404:	4b5e      	ldr	r3, [pc, #376]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	021b      	lsls	r3, r3, #8
 8007412:	495b      	ldr	r1, [pc, #364]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007414:	4313      	orrs	r3, r2
 8007416:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fd4c 	bl	8007ec0 <RCC_SetFlashLatencyFromMSIRange>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e37a      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007432:	f000 fc81 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8007436:	4602      	mov	r2, r0
 8007438:	4b51      	ldr	r3, [pc, #324]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	091b      	lsrs	r3, r3, #4
 800743e:	f003 030f 	and.w	r3, r3, #15
 8007442:	4950      	ldr	r1, [pc, #320]	; (8007584 <HAL_RCC_OscConfig+0x274>)
 8007444:	5ccb      	ldrb	r3, [r1, r3]
 8007446:	f003 031f 	and.w	r3, r3, #31
 800744a:	fa22 f303 	lsr.w	r3, r2, r3
 800744e:	4a4e      	ldr	r2, [pc, #312]	; (8007588 <HAL_RCC_OscConfig+0x278>)
 8007450:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007452:	4b4e      	ldr	r3, [pc, #312]	; (800758c <HAL_RCC_OscConfig+0x27c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4618      	mov	r0, r3
 8007458:	f7fc fc00 	bl	8003c5c <HAL_InitTick>
 800745c:	4603      	mov	r3, r0
 800745e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d052      	beq.n	800750c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	e35e      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d032      	beq.n	80074d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007472:	4b43      	ldr	r3, [pc, #268]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a42      	ldr	r2, [pc, #264]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007478:	f043 0301 	orr.w	r3, r3, #1
 800747c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800747e:	f7fc fc3d 	bl	8003cfc <HAL_GetTick>
 8007482:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007484:	e008      	b.n	8007498 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007486:	f7fc fc39 	bl	8003cfc <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d901      	bls.n	8007498 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e347      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007498:	4b39      	ldr	r3, [pc, #228]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d0f0      	beq.n	8007486 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80074a4:	4b36      	ldr	r3, [pc, #216]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a35      	ldr	r2, [pc, #212]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80074aa:	f043 0308 	orr.w	r3, r3, #8
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	4b33      	ldr	r3, [pc, #204]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	4930      	ldr	r1, [pc, #192]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074c2:	4b2f      	ldr	r3, [pc, #188]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	021b      	lsls	r3, r3, #8
 80074d0:	492b      	ldr	r1, [pc, #172]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	604b      	str	r3, [r1, #4]
 80074d6:	e01a      	b.n	800750e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80074d8:	4b29      	ldr	r3, [pc, #164]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a28      	ldr	r2, [pc, #160]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 80074de:	f023 0301 	bic.w	r3, r3, #1
 80074e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80074e4:	f7fc fc0a 	bl	8003cfc <HAL_GetTick>
 80074e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80074ea:	e008      	b.n	80074fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80074ec:	f7fc fc06 	bl	8003cfc <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e314      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80074fe:	4b20      	ldr	r3, [pc, #128]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1f0      	bne.n	80074ec <HAL_RCC_OscConfig+0x1dc>
 800750a:	e000      	b.n	800750e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800750c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d073      	beq.n	8007602 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	2b08      	cmp	r3, #8
 800751e:	d005      	beq.n	800752c <HAL_RCC_OscConfig+0x21c>
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	2b0c      	cmp	r3, #12
 8007524:	d10e      	bne.n	8007544 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b03      	cmp	r3, #3
 800752a:	d10b      	bne.n	8007544 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800752c:	4b14      	ldr	r3, [pc, #80]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d063      	beq.n	8007600 <HAL_RCC_OscConfig+0x2f0>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d15f      	bne.n	8007600 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e2f1      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800754c:	d106      	bne.n	800755c <HAL_RCC_OscConfig+0x24c>
 800754e:	4b0c      	ldr	r3, [pc, #48]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a0b      	ldr	r2, [pc, #44]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	e025      	b.n	80075a8 <HAL_RCC_OscConfig+0x298>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007564:	d114      	bne.n	8007590 <HAL_RCC_OscConfig+0x280>
 8007566:	4b06      	ldr	r3, [pc, #24]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a05      	ldr	r2, [pc, #20]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 800756c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	4b03      	ldr	r3, [pc, #12]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a02      	ldr	r2, [pc, #8]	; (8007580 <HAL_RCC_OscConfig+0x270>)
 8007578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	e013      	b.n	80075a8 <HAL_RCC_OscConfig+0x298>
 8007580:	40021000 	.word	0x40021000
 8007584:	0800d604 	.word	0x0800d604
 8007588:	20000004 	.word	0x20000004
 800758c:	20000008 	.word	0x20000008
 8007590:	4ba0      	ldr	r3, [pc, #640]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a9f      	ldr	r2, [pc, #636]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 8007596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	4b9d      	ldr	r3, [pc, #628]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a9c      	ldr	r2, [pc, #624]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 80075a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d013      	beq.n	80075d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b0:	f7fc fba4 	bl	8003cfc <HAL_GetTick>
 80075b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075b6:	e008      	b.n	80075ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075b8:	f7fc fba0 	bl	8003cfc <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	2b64      	cmp	r3, #100	; 0x64
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e2ae      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075ca:	4b92      	ldr	r3, [pc, #584]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d0f0      	beq.n	80075b8 <HAL_RCC_OscConfig+0x2a8>
 80075d6:	e014      	b.n	8007602 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d8:	f7fc fb90 	bl	8003cfc <HAL_GetTick>
 80075dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075e0:	f7fc fb8c 	bl	8003cfc <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b64      	cmp	r3, #100	; 0x64
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e29a      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075f2:	4b88      	ldr	r3, [pc, #544]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1f0      	bne.n	80075e0 <HAL_RCC_OscConfig+0x2d0>
 80075fe:	e000      	b.n	8007602 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d060      	beq.n	80076d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b04      	cmp	r3, #4
 8007612:	d005      	beq.n	8007620 <HAL_RCC_OscConfig+0x310>
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	2b0c      	cmp	r3, #12
 8007618:	d119      	bne.n	800764e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d116      	bne.n	800764e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007620:	4b7c      	ldr	r3, [pc, #496]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <HAL_RCC_OscConfig+0x328>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e277      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007638:	4b76      	ldr	r3, [pc, #472]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	061b      	lsls	r3, r3, #24
 8007646:	4973      	ldr	r1, [pc, #460]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 8007648:	4313      	orrs	r3, r2
 800764a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800764c:	e040      	b.n	80076d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d023      	beq.n	800769e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007656:	4b6f      	ldr	r3, [pc, #444]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a6e      	ldr	r2, [pc, #440]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 800765c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007662:	f7fc fb4b 	bl	8003cfc <HAL_GetTick>
 8007666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007668:	e008      	b.n	800767c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800766a:	f7fc fb47 	bl	8003cfc <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	2b02      	cmp	r3, #2
 8007676:	d901      	bls.n	800767c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e255      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800767c:	4b65      	ldr	r3, [pc, #404]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0f0      	beq.n	800766a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007688:	4b62      	ldr	r3, [pc, #392]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	061b      	lsls	r3, r3, #24
 8007696:	495f      	ldr	r1, [pc, #380]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 8007698:	4313      	orrs	r3, r2
 800769a:	604b      	str	r3, [r1, #4]
 800769c:	e018      	b.n	80076d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800769e:	4b5d      	ldr	r3, [pc, #372]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a5c      	ldr	r2, [pc, #368]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 80076a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076aa:	f7fc fb27 	bl	8003cfc <HAL_GetTick>
 80076ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076b0:	e008      	b.n	80076c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076b2:	f7fc fb23 	bl	8003cfc <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d901      	bls.n	80076c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e231      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076c4:	4b53      	ldr	r3, [pc, #332]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1f0      	bne.n	80076b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0308 	and.w	r3, r3, #8
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d03c      	beq.n	8007756 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d01c      	beq.n	800771e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076e4:	4b4b      	ldr	r3, [pc, #300]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 80076e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076ea:	4a4a      	ldr	r2, [pc, #296]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 80076ec:	f043 0301 	orr.w	r3, r3, #1
 80076f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076f4:	f7fc fb02 	bl	8003cfc <HAL_GetTick>
 80076f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076fa:	e008      	b.n	800770e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076fc:	f7fc fafe 	bl	8003cfc <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	2b02      	cmp	r3, #2
 8007708:	d901      	bls.n	800770e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e20c      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800770e:	4b41      	ldr	r3, [pc, #260]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 8007710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d0ef      	beq.n	80076fc <HAL_RCC_OscConfig+0x3ec>
 800771c:	e01b      	b.n	8007756 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800771e:	4b3d      	ldr	r3, [pc, #244]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 8007720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007724:	4a3b      	ldr	r2, [pc, #236]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 8007726:	f023 0301 	bic.w	r3, r3, #1
 800772a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800772e:	f7fc fae5 	bl	8003cfc <HAL_GetTick>
 8007732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007734:	e008      	b.n	8007748 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007736:	f7fc fae1 	bl	8003cfc <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d901      	bls.n	8007748 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e1ef      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007748:	4b32      	ldr	r3, [pc, #200]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 800774a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1ef      	bne.n	8007736 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0304 	and.w	r3, r3, #4
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 80a6 	beq.w	80078b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007764:	2300      	movs	r3, #0
 8007766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007768:	4b2a      	ldr	r3, [pc, #168]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 800776a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10d      	bne.n	8007790 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007774:	4b27      	ldr	r3, [pc, #156]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 8007776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007778:	4a26      	ldr	r2, [pc, #152]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 800777a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800777e:	6593      	str	r3, [r2, #88]	; 0x58
 8007780:	4b24      	ldr	r3, [pc, #144]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 8007782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007788:	60bb      	str	r3, [r7, #8]
 800778a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800778c:	2301      	movs	r3, #1
 800778e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007790:	4b21      	ldr	r3, [pc, #132]	; (8007818 <HAL_RCC_OscConfig+0x508>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007798:	2b00      	cmp	r3, #0
 800779a:	d118      	bne.n	80077ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800779c:	4b1e      	ldr	r3, [pc, #120]	; (8007818 <HAL_RCC_OscConfig+0x508>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a1d      	ldr	r2, [pc, #116]	; (8007818 <HAL_RCC_OscConfig+0x508>)
 80077a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077a8:	f7fc faa8 	bl	8003cfc <HAL_GetTick>
 80077ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077ae:	e008      	b.n	80077c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077b0:	f7fc faa4 	bl	8003cfc <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d901      	bls.n	80077c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e1b2      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077c2:	4b15      	ldr	r3, [pc, #84]	; (8007818 <HAL_RCC_OscConfig+0x508>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0f0      	beq.n	80077b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d108      	bne.n	80077e8 <HAL_RCC_OscConfig+0x4d8>
 80077d6:	4b0f      	ldr	r3, [pc, #60]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 80077d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077dc:	4a0d      	ldr	r2, [pc, #52]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 80077de:	f043 0301 	orr.w	r3, r3, #1
 80077e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077e6:	e029      	b.n	800783c <HAL_RCC_OscConfig+0x52c>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	2b05      	cmp	r3, #5
 80077ee:	d115      	bne.n	800781c <HAL_RCC_OscConfig+0x50c>
 80077f0:	4b08      	ldr	r3, [pc, #32]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 80077f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f6:	4a07      	ldr	r2, [pc, #28]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 80077f8:	f043 0304 	orr.w	r3, r3, #4
 80077fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007800:	4b04      	ldr	r3, [pc, #16]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 8007802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007806:	4a03      	ldr	r2, [pc, #12]	; (8007814 <HAL_RCC_OscConfig+0x504>)
 8007808:	f043 0301 	orr.w	r3, r3, #1
 800780c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007810:	e014      	b.n	800783c <HAL_RCC_OscConfig+0x52c>
 8007812:	bf00      	nop
 8007814:	40021000 	.word	0x40021000
 8007818:	40007000 	.word	0x40007000
 800781c:	4b9a      	ldr	r3, [pc, #616]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 800781e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007822:	4a99      	ldr	r2, [pc, #612]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 8007824:	f023 0301 	bic.w	r3, r3, #1
 8007828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800782c:	4b96      	ldr	r3, [pc, #600]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 800782e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007832:	4a95      	ldr	r2, [pc, #596]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 8007834:	f023 0304 	bic.w	r3, r3, #4
 8007838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d016      	beq.n	8007872 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007844:	f7fc fa5a 	bl	8003cfc <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800784a:	e00a      	b.n	8007862 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800784c:	f7fc fa56 	bl	8003cfc <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	f241 3288 	movw	r2, #5000	; 0x1388
 800785a:	4293      	cmp	r3, r2
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e162      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007862:	4b89      	ldr	r3, [pc, #548]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 8007864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007868:	f003 0302 	and.w	r3, r3, #2
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0ed      	beq.n	800784c <HAL_RCC_OscConfig+0x53c>
 8007870:	e015      	b.n	800789e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007872:	f7fc fa43 	bl	8003cfc <HAL_GetTick>
 8007876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007878:	e00a      	b.n	8007890 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800787a:	f7fc fa3f 	bl	8003cfc <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	f241 3288 	movw	r2, #5000	; 0x1388
 8007888:	4293      	cmp	r3, r2
 800788a:	d901      	bls.n	8007890 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e14b      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007890:	4b7d      	ldr	r3, [pc, #500]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 8007892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1ed      	bne.n	800787a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800789e:	7ffb      	ldrb	r3, [r7, #31]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d105      	bne.n	80078b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078a4:	4b78      	ldr	r3, [pc, #480]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 80078a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a8:	4a77      	ldr	r2, [pc, #476]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 80078aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0320 	and.w	r3, r3, #32
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d03c      	beq.n	8007936 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d01c      	beq.n	80078fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078c4:	4b70      	ldr	r3, [pc, #448]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 80078c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078ca:	4a6f      	ldr	r2, [pc, #444]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 80078cc:	f043 0301 	orr.w	r3, r3, #1
 80078d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d4:	f7fc fa12 	bl	8003cfc <HAL_GetTick>
 80078d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078da:	e008      	b.n	80078ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078dc:	f7fc fa0e 	bl	8003cfc <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e11c      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078ee:	4b66      	ldr	r3, [pc, #408]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 80078f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0ef      	beq.n	80078dc <HAL_RCC_OscConfig+0x5cc>
 80078fc:	e01b      	b.n	8007936 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078fe:	4b62      	ldr	r3, [pc, #392]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 8007900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007904:	4a60      	ldr	r2, [pc, #384]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 8007906:	f023 0301 	bic.w	r3, r3, #1
 800790a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800790e:	f7fc f9f5 	bl	8003cfc <HAL_GetTick>
 8007912:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007914:	e008      	b.n	8007928 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007916:	f7fc f9f1 	bl	8003cfc <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d901      	bls.n	8007928 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e0ff      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007928:	4b57      	ldr	r3, [pc, #348]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 800792a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800792e:	f003 0302 	and.w	r3, r3, #2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1ef      	bne.n	8007916 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 80f3 	beq.w	8007b26 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007944:	2b02      	cmp	r3, #2
 8007946:	f040 80c9 	bne.w	8007adc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800794a:	4b4f      	ldr	r3, [pc, #316]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f003 0203 	and.w	r2, r3, #3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795a:	429a      	cmp	r2, r3
 800795c:	d12c      	bne.n	80079b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007968:	3b01      	subs	r3, #1
 800796a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800796c:	429a      	cmp	r2, r3
 800796e:	d123      	bne.n	80079b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800797c:	429a      	cmp	r2, r3
 800797e:	d11b      	bne.n	80079b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800798c:	429a      	cmp	r2, r3
 800798e:	d113      	bne.n	80079b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799a:	085b      	lsrs	r3, r3, #1
 800799c:	3b01      	subs	r3, #1
 800799e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d109      	bne.n	80079b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	085b      	lsrs	r3, r3, #1
 80079b0:	3b01      	subs	r3, #1
 80079b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d06b      	beq.n	8007a90 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	2b0c      	cmp	r3, #12
 80079bc:	d062      	beq.n	8007a84 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80079be:	4b32      	ldr	r3, [pc, #200]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e0ac      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80079ce:	4b2e      	ldr	r3, [pc, #184]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a2d      	ldr	r2, [pc, #180]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 80079d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80079da:	f7fc f98f 	bl	8003cfc <HAL_GetTick>
 80079de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079e0:	e008      	b.n	80079f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079e2:	f7fc f98b 	bl	8003cfc <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d901      	bls.n	80079f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e099      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079f4:	4b24      	ldr	r3, [pc, #144]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1f0      	bne.n	80079e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a00:	4b21      	ldr	r3, [pc, #132]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 8007a02:	68da      	ldr	r2, [r3, #12]
 8007a04:	4b21      	ldr	r3, [pc, #132]	; (8007a8c <HAL_RCC_OscConfig+0x77c>)
 8007a06:	4013      	ands	r3, r2
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007a10:	3a01      	subs	r2, #1
 8007a12:	0112      	lsls	r2, r2, #4
 8007a14:	4311      	orrs	r1, r2
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a1a:	0212      	lsls	r2, r2, #8
 8007a1c:	4311      	orrs	r1, r2
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a22:	0852      	lsrs	r2, r2, #1
 8007a24:	3a01      	subs	r2, #1
 8007a26:	0552      	lsls	r2, r2, #21
 8007a28:	4311      	orrs	r1, r2
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007a2e:	0852      	lsrs	r2, r2, #1
 8007a30:	3a01      	subs	r2, #1
 8007a32:	0652      	lsls	r2, r2, #25
 8007a34:	4311      	orrs	r1, r2
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a3a:	06d2      	lsls	r2, r2, #27
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	4912      	ldr	r1, [pc, #72]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007a44:	4b10      	ldr	r3, [pc, #64]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a0f      	ldr	r2, [pc, #60]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 8007a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a50:	4b0d      	ldr	r3, [pc, #52]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	4a0c      	ldr	r2, [pc, #48]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 8007a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a5c:	f7fc f94e 	bl	8003cfc <HAL_GetTick>
 8007a60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a62:	e008      	b.n	8007a76 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a64:	f7fc f94a 	bl	8003cfc <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d901      	bls.n	8007a76 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e058      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a76:	4b04      	ldr	r3, [pc, #16]	; (8007a88 <HAL_RCC_OscConfig+0x778>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0f0      	beq.n	8007a64 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a82:	e050      	b.n	8007b26 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e04f      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
 8007a88:	40021000 	.word	0x40021000
 8007a8c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a90:	4b27      	ldr	r3, [pc, #156]	; (8007b30 <HAL_RCC_OscConfig+0x820>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d144      	bne.n	8007b26 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007a9c:	4b24      	ldr	r3, [pc, #144]	; (8007b30 <HAL_RCC_OscConfig+0x820>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a23      	ldr	r2, [pc, #140]	; (8007b30 <HAL_RCC_OscConfig+0x820>)
 8007aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007aa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007aa8:	4b21      	ldr	r3, [pc, #132]	; (8007b30 <HAL_RCC_OscConfig+0x820>)
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	4a20      	ldr	r2, [pc, #128]	; (8007b30 <HAL_RCC_OscConfig+0x820>)
 8007aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ab2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ab4:	f7fc f922 	bl	8003cfc <HAL_GetTick>
 8007ab8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007aba:	e008      	b.n	8007ace <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007abc:	f7fc f91e 	bl	8003cfc <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e02c      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ace:	4b18      	ldr	r3, [pc, #96]	; (8007b30 <HAL_RCC_OscConfig+0x820>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0f0      	beq.n	8007abc <HAL_RCC_OscConfig+0x7ac>
 8007ada:	e024      	b.n	8007b26 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	2b0c      	cmp	r3, #12
 8007ae0:	d01f      	beq.n	8007b22 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ae2:	4b13      	ldr	r3, [pc, #76]	; (8007b30 <HAL_RCC_OscConfig+0x820>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a12      	ldr	r2, [pc, #72]	; (8007b30 <HAL_RCC_OscConfig+0x820>)
 8007ae8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aee:	f7fc f905 	bl	8003cfc <HAL_GetTick>
 8007af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007af4:	e008      	b.n	8007b08 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007af6:	f7fc f901 	bl	8003cfc <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d901      	bls.n	8007b08 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e00f      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b08:	4b09      	ldr	r3, [pc, #36]	; (8007b30 <HAL_RCC_OscConfig+0x820>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1f0      	bne.n	8007af6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007b14:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <HAL_RCC_OscConfig+0x820>)
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	4905      	ldr	r1, [pc, #20]	; (8007b30 <HAL_RCC_OscConfig+0x820>)
 8007b1a:	4b06      	ldr	r3, [pc, #24]	; (8007b34 <HAL_RCC_OscConfig+0x824>)
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	60cb      	str	r3, [r1, #12]
 8007b20:	e001      	b.n	8007b26 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e000      	b.n	8007b28 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3720      	adds	r7, #32
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40021000 	.word	0x40021000
 8007b34:	feeefffc 	.word	0xfeeefffc

08007b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e0e7      	b.n	8007d1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b4c:	4b75      	ldr	r3, [pc, #468]	; (8007d24 <HAL_RCC_ClockConfig+0x1ec>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0307 	and.w	r3, r3, #7
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d910      	bls.n	8007b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b5a:	4b72      	ldr	r3, [pc, #456]	; (8007d24 <HAL_RCC_ClockConfig+0x1ec>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f023 0207 	bic.w	r2, r3, #7
 8007b62:	4970      	ldr	r1, [pc, #448]	; (8007d24 <HAL_RCC_ClockConfig+0x1ec>)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b6a:	4b6e      	ldr	r3, [pc, #440]	; (8007d24 <HAL_RCC_ClockConfig+0x1ec>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d001      	beq.n	8007b7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e0cf      	b.n	8007d1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d010      	beq.n	8007baa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	4b66      	ldr	r3, [pc, #408]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d908      	bls.n	8007baa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b98:	4b63      	ldr	r3, [pc, #396]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	4960      	ldr	r1, [pc, #384]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d04c      	beq.n	8007c50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d107      	bne.n	8007bce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bbe:	4b5a      	ldr	r3, [pc, #360]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d121      	bne.n	8007c0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e0a6      	b.n	8007d1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d107      	bne.n	8007be6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bd6:	4b54      	ldr	r3, [pc, #336]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d115      	bne.n	8007c0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e09a      	b.n	8007d1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d107      	bne.n	8007bfe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007bee:	4b4e      	ldr	r3, [pc, #312]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d109      	bne.n	8007c0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e08e      	b.n	8007d1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007bfe:	4b4a      	ldr	r3, [pc, #296]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e086      	b.n	8007d1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c0e:	4b46      	ldr	r3, [pc, #280]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f023 0203 	bic.w	r2, r3, #3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	4943      	ldr	r1, [pc, #268]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c20:	f7fc f86c 	bl	8003cfc <HAL_GetTick>
 8007c24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c26:	e00a      	b.n	8007c3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c28:	f7fc f868 	bl	8003cfc <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d901      	bls.n	8007c3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e06e      	b.n	8007d1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c3e:	4b3a      	ldr	r3, [pc, #232]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f003 020c 	and.w	r2, r3, #12
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d1eb      	bne.n	8007c28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d010      	beq.n	8007c7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	4b31      	ldr	r3, [pc, #196]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d208      	bcs.n	8007c7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c6c:	4b2e      	ldr	r3, [pc, #184]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	492b      	ldr	r1, [pc, #172]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c7e:	4b29      	ldr	r3, [pc, #164]	; (8007d24 <HAL_RCC_ClockConfig+0x1ec>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d210      	bcs.n	8007cae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c8c:	4b25      	ldr	r3, [pc, #148]	; (8007d24 <HAL_RCC_ClockConfig+0x1ec>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f023 0207 	bic.w	r2, r3, #7
 8007c94:	4923      	ldr	r1, [pc, #140]	; (8007d24 <HAL_RCC_ClockConfig+0x1ec>)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c9c:	4b21      	ldr	r3, [pc, #132]	; (8007d24 <HAL_RCC_ClockConfig+0x1ec>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0307 	and.w	r3, r3, #7
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d001      	beq.n	8007cae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e036      	b.n	8007d1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0304 	and.w	r3, r3, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d008      	beq.n	8007ccc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cba:	4b1b      	ldr	r3, [pc, #108]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	4918      	ldr	r1, [pc, #96]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d009      	beq.n	8007cec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cd8:	4b13      	ldr	r3, [pc, #76]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	4910      	ldr	r1, [pc, #64]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007cec:	f000 f824 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	4b0d      	ldr	r3, [pc, #52]	; (8007d28 <HAL_RCC_ClockConfig+0x1f0>)
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	091b      	lsrs	r3, r3, #4
 8007cf8:	f003 030f 	and.w	r3, r3, #15
 8007cfc:	490b      	ldr	r1, [pc, #44]	; (8007d2c <HAL_RCC_ClockConfig+0x1f4>)
 8007cfe:	5ccb      	ldrb	r3, [r1, r3]
 8007d00:	f003 031f 	and.w	r3, r3, #31
 8007d04:	fa22 f303 	lsr.w	r3, r2, r3
 8007d08:	4a09      	ldr	r2, [pc, #36]	; (8007d30 <HAL_RCC_ClockConfig+0x1f8>)
 8007d0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007d0c:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <HAL_RCC_ClockConfig+0x1fc>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fb ffa3 	bl	8003c5c <HAL_InitTick>
 8007d16:	4603      	mov	r3, r0
 8007d18:	72fb      	strb	r3, [r7, #11]

  return status;
 8007d1a:	7afb      	ldrb	r3, [r7, #11]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	40022000 	.word	0x40022000
 8007d28:	40021000 	.word	0x40021000
 8007d2c:	0800d604 	.word	0x0800d604
 8007d30:	20000004 	.word	0x20000004
 8007d34:	20000008 	.word	0x20000008

08007d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b089      	sub	sp, #36	; 0x24
 8007d3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	61fb      	str	r3, [r7, #28]
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d46:	4b3e      	ldr	r3, [pc, #248]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f003 030c 	and.w	r3, r3, #12
 8007d4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d50:	4b3b      	ldr	r3, [pc, #236]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f003 0303 	and.w	r3, r3, #3
 8007d58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d005      	beq.n	8007d6c <HAL_RCC_GetSysClockFreq+0x34>
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	2b0c      	cmp	r3, #12
 8007d64:	d121      	bne.n	8007daa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d11e      	bne.n	8007daa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007d6c:	4b34      	ldr	r3, [pc, #208]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0308 	and.w	r3, r3, #8
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d107      	bne.n	8007d88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007d78:	4b31      	ldr	r3, [pc, #196]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d7e:	0a1b      	lsrs	r3, r3, #8
 8007d80:	f003 030f 	and.w	r3, r3, #15
 8007d84:	61fb      	str	r3, [r7, #28]
 8007d86:	e005      	b.n	8007d94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007d88:	4b2d      	ldr	r3, [pc, #180]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	091b      	lsrs	r3, r3, #4
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007d94:	4a2b      	ldr	r2, [pc, #172]	; (8007e44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10d      	bne.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007da8:	e00a      	b.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d102      	bne.n	8007db6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007db0:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8007db2:	61bb      	str	r3, [r7, #24]
 8007db4:	e004      	b.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d101      	bne.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007dbc:	4b23      	ldr	r3, [pc, #140]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x114>)
 8007dbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	2b0c      	cmp	r3, #12
 8007dc4:	d134      	bne.n	8007e30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007dc6:	4b1e      	ldr	r3, [pc, #120]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f003 0303 	and.w	r3, r3, #3
 8007dce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d003      	beq.n	8007dde <HAL_RCC_GetSysClockFreq+0xa6>
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d003      	beq.n	8007de4 <HAL_RCC_GetSysClockFreq+0xac>
 8007ddc:	e005      	b.n	8007dea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007dde:	4b1a      	ldr	r3, [pc, #104]	; (8007e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8007de0:	617b      	str	r3, [r7, #20]
      break;
 8007de2:	e005      	b.n	8007df0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007de4:	4b19      	ldr	r3, [pc, #100]	; (8007e4c <HAL_RCC_GetSysClockFreq+0x114>)
 8007de6:	617b      	str	r3, [r7, #20]
      break;
 8007de8:	e002      	b.n	8007df0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	617b      	str	r3, [r7, #20]
      break;
 8007dee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007df0:	4b13      	ldr	r3, [pc, #76]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	091b      	lsrs	r3, r3, #4
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007dfe:	4b10      	ldr	r3, [pc, #64]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	0a1b      	lsrs	r3, r3, #8
 8007e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	fb03 f202 	mul.w	r2, r3, r2
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e16:	4b0a      	ldr	r3, [pc, #40]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	0e5b      	lsrs	r3, r3, #25
 8007e1c:	f003 0303 	and.w	r3, r3, #3
 8007e20:	3301      	adds	r3, #1
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007e30:	69bb      	ldr	r3, [r7, #24]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3724      	adds	r7, #36	; 0x24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40021000 	.word	0x40021000
 8007e44:	0800d61c 	.word	0x0800d61c
 8007e48:	00f42400 	.word	0x00f42400
 8007e4c:	007a1200 	.word	0x007a1200

08007e50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e54:	4b03      	ldr	r3, [pc, #12]	; (8007e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e56:	681b      	ldr	r3, [r3, #0]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	20000004 	.word	0x20000004

08007e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007e6c:	f7ff fff0 	bl	8007e50 <HAL_RCC_GetHCLKFreq>
 8007e70:	4602      	mov	r2, r0
 8007e72:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	0a1b      	lsrs	r3, r3, #8
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	4904      	ldr	r1, [pc, #16]	; (8007e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e7e:	5ccb      	ldrb	r3, [r1, r3]
 8007e80:	f003 031f 	and.w	r3, r3, #31
 8007e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	40021000 	.word	0x40021000
 8007e90:	0800d614 	.word	0x0800d614

08007e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007e98:	f7ff ffda 	bl	8007e50 <HAL_RCC_GetHCLKFreq>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	0adb      	lsrs	r3, r3, #11
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	4904      	ldr	r1, [pc, #16]	; (8007ebc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007eaa:	5ccb      	ldrb	r3, [r1, r3]
 8007eac:	f003 031f 	and.w	r3, r3, #31
 8007eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	40021000 	.word	0x40021000
 8007ebc:	0800d614 	.word	0x0800d614

08007ec0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007ec8:	2300      	movs	r3, #0
 8007eca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007ecc:	4b2a      	ldr	r3, [pc, #168]	; (8007f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007ed8:	f7ff f9b6 	bl	8007248 <HAL_PWREx_GetVoltageRange>
 8007edc:	6178      	str	r0, [r7, #20]
 8007ede:	e014      	b.n	8007f0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ee0:	4b25      	ldr	r3, [pc, #148]	; (8007f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee4:	4a24      	ldr	r2, [pc, #144]	; (8007f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eea:	6593      	str	r3, [r2, #88]	; 0x58
 8007eec:	4b22      	ldr	r3, [pc, #136]	; (8007f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ef4:	60fb      	str	r3, [r7, #12]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007ef8:	f7ff f9a6 	bl	8007248 <HAL_PWREx_GetVoltageRange>
 8007efc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007efe:	4b1e      	ldr	r3, [pc, #120]	; (8007f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f02:	4a1d      	ldr	r2, [pc, #116]	; (8007f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f10:	d10b      	bne.n	8007f2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b80      	cmp	r3, #128	; 0x80
 8007f16:	d919      	bls.n	8007f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2ba0      	cmp	r3, #160	; 0xa0
 8007f1c:	d902      	bls.n	8007f24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007f1e:	2302      	movs	r3, #2
 8007f20:	613b      	str	r3, [r7, #16]
 8007f22:	e013      	b.n	8007f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007f24:	2301      	movs	r3, #1
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	e010      	b.n	8007f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b80      	cmp	r3, #128	; 0x80
 8007f2e:	d902      	bls.n	8007f36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007f30:	2303      	movs	r3, #3
 8007f32:	613b      	str	r3, [r7, #16]
 8007f34:	e00a      	b.n	8007f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b80      	cmp	r3, #128	; 0x80
 8007f3a:	d102      	bne.n	8007f42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	613b      	str	r3, [r7, #16]
 8007f40:	e004      	b.n	8007f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b70      	cmp	r3, #112	; 0x70
 8007f46:	d101      	bne.n	8007f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007f48:	2301      	movs	r3, #1
 8007f4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007f4c:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f023 0207 	bic.w	r2, r3, #7
 8007f54:	4909      	ldr	r1, [pc, #36]	; (8007f7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007f5c:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0307 	and.w	r3, r3, #7
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d001      	beq.n	8007f6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e000      	b.n	8007f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	40021000 	.word	0x40021000
 8007f7c:	40022000 	.word	0x40022000

08007f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f88:	2300      	movs	r3, #0
 8007f8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d031      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007fa4:	d01a      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007fa6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007faa:	d814      	bhi.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d009      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007fb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fb4:	d10f      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007fb6:	4b5d      	ldr	r3, [pc, #372]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	4a5c      	ldr	r2, [pc, #368]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fc0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007fc2:	e00c      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	2100      	movs	r1, #0
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 f9f0 	bl	80083b0 <RCCEx_PLLSAI1_Config>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007fd4:	e003      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	74fb      	strb	r3, [r7, #19]
      break;
 8007fda:	e000      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fde:	7cfb      	ldrb	r3, [r7, #19]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10b      	bne.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fe4:	4b51      	ldr	r3, [pc, #324]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff2:	494e      	ldr	r1, [pc, #312]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007ffa:	e001      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ffc:	7cfb      	ldrb	r3, [r7, #19]
 8007ffe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 809e 	beq.w	800814a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800800e:	2300      	movs	r3, #0
 8008010:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008012:	4b46      	ldr	r3, [pc, #280]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800801e:	2301      	movs	r3, #1
 8008020:	e000      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008022:	2300      	movs	r3, #0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00d      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008028:	4b40      	ldr	r3, [pc, #256]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800802a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800802c:	4a3f      	ldr	r2, [pc, #252]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800802e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008032:	6593      	str	r3, [r2, #88]	; 0x58
 8008034:	4b3d      	ldr	r3, [pc, #244]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800803c:	60bb      	str	r3, [r7, #8]
 800803e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008040:	2301      	movs	r3, #1
 8008042:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008044:	4b3a      	ldr	r3, [pc, #232]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a39      	ldr	r2, [pc, #228]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800804a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800804e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008050:	f7fb fe54 	bl	8003cfc <HAL_GetTick>
 8008054:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008056:	e009      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008058:	f7fb fe50 	bl	8003cfc <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	2b02      	cmp	r3, #2
 8008064:	d902      	bls.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	74fb      	strb	r3, [r7, #19]
        break;
 800806a:	e005      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800806c:	4b30      	ldr	r3, [pc, #192]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008074:	2b00      	cmp	r3, #0
 8008076:	d0ef      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008078:	7cfb      	ldrb	r3, [r7, #19]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d15a      	bne.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800807e:	4b2b      	ldr	r3, [pc, #172]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008088:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01e      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	429a      	cmp	r2, r3
 8008098:	d019      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800809a:	4b24      	ldr	r3, [pc, #144]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800809c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080a6:	4b21      	ldr	r3, [pc, #132]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80080a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ac:	4a1f      	ldr	r2, [pc, #124]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80080ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080b6:	4b1d      	ldr	r3, [pc, #116]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80080b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080bc:	4a1b      	ldr	r2, [pc, #108]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80080be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80080c6:	4a19      	ldr	r2, [pc, #100]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d016      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d8:	f7fb fe10 	bl	8003cfc <HAL_GetTick>
 80080dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080de:	e00b      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080e0:	f7fb fe0c 	bl	8003cfc <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d902      	bls.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	74fb      	strb	r3, [r7, #19]
            break;
 80080f6:	e006      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080f8:	4b0c      	ldr	r3, [pc, #48]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80080fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0ec      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008106:	7cfb      	ldrb	r3, [r7, #19]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10b      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800810c:	4b07      	ldr	r3, [pc, #28]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800810e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008112:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811a:	4904      	ldr	r1, [pc, #16]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800811c:	4313      	orrs	r3, r2
 800811e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008122:	e009      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008124:	7cfb      	ldrb	r3, [r7, #19]
 8008126:	74bb      	strb	r3, [r7, #18]
 8008128:	e006      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800812a:	bf00      	nop
 800812c:	40021000 	.word	0x40021000
 8008130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008134:	7cfb      	ldrb	r3, [r7, #19]
 8008136:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008138:	7c7b      	ldrb	r3, [r7, #17]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d105      	bne.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800813e:	4b9b      	ldr	r3, [pc, #620]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008142:	4a9a      	ldr	r2, [pc, #616]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008148:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008156:	4b95      	ldr	r3, [pc, #596]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815c:	f023 0203 	bic.w	r2, r3, #3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	4991      	ldr	r1, [pc, #580]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008166:	4313      	orrs	r3, r2
 8008168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008178:	4b8c      	ldr	r3, [pc, #560]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800817a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800817e:	f023 020c 	bic.w	r2, r3, #12
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	4989      	ldr	r1, [pc, #548]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008188:	4313      	orrs	r3, r2
 800818a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0304 	and.w	r3, r3, #4
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800819a:	4b84      	ldr	r3, [pc, #528]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800819c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a8:	4980      	ldr	r1, [pc, #512]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0320 	and.w	r3, r3, #32
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80081bc:	4b7b      	ldr	r3, [pc, #492]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ca:	4978      	ldr	r1, [pc, #480]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081de:	4b73      	ldr	r3, [pc, #460]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ec:	496f      	ldr	r1, [pc, #444]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00a      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008200:	4b6a      	ldr	r3, [pc, #424]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008206:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	4967      	ldr	r1, [pc, #412]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008210:	4313      	orrs	r3, r2
 8008212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00a      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008222:	4b62      	ldr	r3, [pc, #392]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008228:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008230:	495e      	ldr	r1, [pc, #376]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008232:	4313      	orrs	r3, r2
 8008234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00a      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008244:	4b59      	ldr	r3, [pc, #356]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800824a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008252:	4956      	ldr	r1, [pc, #344]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008254:	4313      	orrs	r3, r2
 8008256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00a      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008266:	4b51      	ldr	r3, [pc, #324]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800826c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008274:	494d      	ldr	r1, [pc, #308]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008276:	4313      	orrs	r3, r2
 8008278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d028      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008288:	4b48      	ldr	r3, [pc, #288]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800828a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008296:	4945      	ldr	r1, [pc, #276]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008298:	4313      	orrs	r3, r2
 800829a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082a6:	d106      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082a8:	4b40      	ldr	r3, [pc, #256]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	4a3f      	ldr	r2, [pc, #252]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80082ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082b2:	60d3      	str	r3, [r2, #12]
 80082b4:	e011      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082be:	d10c      	bne.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3304      	adds	r3, #4
 80082c4:	2101      	movs	r1, #1
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f872 	bl	80083b0 <RCCEx_PLLSAI1_Config>
 80082cc:	4603      	mov	r3, r0
 80082ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80082d0:	7cfb      	ldrb	r3, [r7, #19]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80082d6:	7cfb      	ldrb	r3, [r7, #19]
 80082d8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d028      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082e6:	4b31      	ldr	r3, [pc, #196]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80082e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082f4:	492d      	ldr	r1, [pc, #180]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008304:	d106      	bne.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008306:	4b29      	ldr	r3, [pc, #164]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	4a28      	ldr	r2, [pc, #160]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800830c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008310:	60d3      	str	r3, [r2, #12]
 8008312:	e011      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008318:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800831c:	d10c      	bne.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3304      	adds	r3, #4
 8008322:	2101      	movs	r1, #1
 8008324:	4618      	mov	r0, r3
 8008326:	f000 f843 	bl	80083b0 <RCCEx_PLLSAI1_Config>
 800832a:	4603      	mov	r3, r0
 800832c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800832e:	7cfb      	ldrb	r3, [r7, #19]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8008334:	7cfb      	ldrb	r3, [r7, #19]
 8008336:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d01c      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008344:	4b19      	ldr	r3, [pc, #100]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800834a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008352:	4916      	ldr	r1, [pc, #88]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008354:	4313      	orrs	r3, r2
 8008356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008362:	d10c      	bne.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3304      	adds	r3, #4
 8008368:	2102      	movs	r1, #2
 800836a:	4618      	mov	r0, r3
 800836c:	f000 f820 	bl	80083b0 <RCCEx_PLLSAI1_Config>
 8008370:	4603      	mov	r3, r0
 8008372:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008374:	7cfb      	ldrb	r3, [r7, #19]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800837a:	7cfb      	ldrb	r3, [r7, #19]
 800837c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800838a:	4b08      	ldr	r3, [pc, #32]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800838c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008390:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008398:	4904      	ldr	r1, [pc, #16]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800839a:	4313      	orrs	r3, r2
 800839c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80083a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	40021000 	.word	0x40021000

080083b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80083be:	4b74      	ldr	r3, [pc, #464]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	f003 0303 	and.w	r3, r3, #3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d018      	beq.n	80083fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80083ca:	4b71      	ldr	r3, [pc, #452]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	f003 0203 	and.w	r2, r3, #3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d10d      	bne.n	80083f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
       ||
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d009      	beq.n	80083f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80083e2:	4b6b      	ldr	r3, [pc, #428]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	091b      	lsrs	r3, r3, #4
 80083e8:	f003 0307 	and.w	r3, r3, #7
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
       ||
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d047      	beq.n	8008486 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	73fb      	strb	r3, [r7, #15]
 80083fa:	e044      	b.n	8008486 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b03      	cmp	r3, #3
 8008402:	d018      	beq.n	8008436 <RCCEx_PLLSAI1_Config+0x86>
 8008404:	2b03      	cmp	r3, #3
 8008406:	d825      	bhi.n	8008454 <RCCEx_PLLSAI1_Config+0xa4>
 8008408:	2b01      	cmp	r3, #1
 800840a:	d002      	beq.n	8008412 <RCCEx_PLLSAI1_Config+0x62>
 800840c:	2b02      	cmp	r3, #2
 800840e:	d009      	beq.n	8008424 <RCCEx_PLLSAI1_Config+0x74>
 8008410:	e020      	b.n	8008454 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008412:	4b5f      	ldr	r3, [pc, #380]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b00      	cmp	r3, #0
 800841c:	d11d      	bne.n	800845a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008422:	e01a      	b.n	800845a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008424:	4b5a      	ldr	r3, [pc, #360]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800842c:	2b00      	cmp	r3, #0
 800842e:	d116      	bne.n	800845e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008434:	e013      	b.n	800845e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008436:	4b56      	ldr	r3, [pc, #344]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10f      	bne.n	8008462 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008442:	4b53      	ldr	r3, [pc, #332]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d109      	bne.n	8008462 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008452:	e006      	b.n	8008462 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	73fb      	strb	r3, [r7, #15]
      break;
 8008458:	e004      	b.n	8008464 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800845a:	bf00      	nop
 800845c:	e002      	b.n	8008464 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800845e:	bf00      	nop
 8008460:	e000      	b.n	8008464 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008462:	bf00      	nop
    }

    if(status == HAL_OK)
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10d      	bne.n	8008486 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800846a:	4b49      	ldr	r3, [pc, #292]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6819      	ldr	r1, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	3b01      	subs	r3, #1
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	430b      	orrs	r3, r1
 8008480:	4943      	ldr	r1, [pc, #268]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008482:	4313      	orrs	r3, r2
 8008484:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008486:	7bfb      	ldrb	r3, [r7, #15]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d17c      	bne.n	8008586 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800848c:	4b40      	ldr	r3, [pc, #256]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a3f      	ldr	r2, [pc, #252]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008492:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008498:	f7fb fc30 	bl	8003cfc <HAL_GetTick>
 800849c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800849e:	e009      	b.n	80084b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80084a0:	f7fb fc2c 	bl	8003cfc <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d902      	bls.n	80084b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	73fb      	strb	r3, [r7, #15]
        break;
 80084b2:	e005      	b.n	80084c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80084b4:	4b36      	ldr	r3, [pc, #216]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1ef      	bne.n	80084a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d15f      	bne.n	8008586 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d110      	bne.n	80084ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80084cc:	4b30      	ldr	r3, [pc, #192]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80084d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6892      	ldr	r2, [r2, #8]
 80084dc:	0211      	lsls	r1, r2, #8
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	68d2      	ldr	r2, [r2, #12]
 80084e2:	06d2      	lsls	r2, r2, #27
 80084e4:	430a      	orrs	r2, r1
 80084e6:	492a      	ldr	r1, [pc, #168]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	610b      	str	r3, [r1, #16]
 80084ec:	e027      	b.n	800853e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d112      	bne.n	800851a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80084f4:	4b26      	ldr	r3, [pc, #152]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80084fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	6892      	ldr	r2, [r2, #8]
 8008504:	0211      	lsls	r1, r2, #8
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	6912      	ldr	r2, [r2, #16]
 800850a:	0852      	lsrs	r2, r2, #1
 800850c:	3a01      	subs	r2, #1
 800850e:	0552      	lsls	r2, r2, #21
 8008510:	430a      	orrs	r2, r1
 8008512:	491f      	ldr	r1, [pc, #124]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008514:	4313      	orrs	r3, r2
 8008516:	610b      	str	r3, [r1, #16]
 8008518:	e011      	b.n	800853e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800851a:	4b1d      	ldr	r3, [pc, #116]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008522:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	6892      	ldr	r2, [r2, #8]
 800852a:	0211      	lsls	r1, r2, #8
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6952      	ldr	r2, [r2, #20]
 8008530:	0852      	lsrs	r2, r2, #1
 8008532:	3a01      	subs	r2, #1
 8008534:	0652      	lsls	r2, r2, #25
 8008536:	430a      	orrs	r2, r1
 8008538:	4915      	ldr	r1, [pc, #84]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 800853a:	4313      	orrs	r3, r2
 800853c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800853e:	4b14      	ldr	r3, [pc, #80]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a13      	ldr	r2, [pc, #76]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008544:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008548:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800854a:	f7fb fbd7 	bl	8003cfc <HAL_GetTick>
 800854e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008550:	e009      	b.n	8008566 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008552:	f7fb fbd3 	bl	8003cfc <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	2b02      	cmp	r3, #2
 800855e:	d902      	bls.n	8008566 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	73fb      	strb	r3, [r7, #15]
          break;
 8008564:	e005      	b.n	8008572 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008566:	4b0a      	ldr	r3, [pc, #40]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0ef      	beq.n	8008552 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d106      	bne.n	8008586 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008578:	4b05      	ldr	r3, [pc, #20]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 800857a:	691a      	ldr	r2, [r3, #16]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	4903      	ldr	r1, [pc, #12]	; (8008590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008582:	4313      	orrs	r3, r2
 8008584:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008586:	7bfb      	ldrb	r3, [r7, #15]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	40021000 	.word	0x40021000

08008594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e049      	b.n	800863a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7fa fc30 	bl	8002e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3304      	adds	r3, #4
 80085d0:	4619      	mov	r1, r3
 80085d2:	4610      	mov	r0, r2
 80085d4:	f000 fa88 	bl	8008ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b082      	sub	sp, #8
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e049      	b.n	80086e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800865a:	b2db      	uxtb	r3, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	d106      	bne.n	800866e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f841 	bl	80086f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2202      	movs	r2, #2
 8008672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	3304      	adds	r3, #4
 800867e:	4619      	mov	r1, r3
 8008680:	4610      	mov	r0, r2
 8008682:	f000 fa31 	bl	8008ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d109      	bne.n	8008728 <HAL_TIM_PWM_Start+0x24>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b01      	cmp	r3, #1
 800871e:	bf14      	ite	ne
 8008720:	2301      	movne	r3, #1
 8008722:	2300      	moveq	r3, #0
 8008724:	b2db      	uxtb	r3, r3
 8008726:	e03c      	b.n	80087a2 <HAL_TIM_PWM_Start+0x9e>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2b04      	cmp	r3, #4
 800872c:	d109      	bne.n	8008742 <HAL_TIM_PWM_Start+0x3e>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b01      	cmp	r3, #1
 8008738:	bf14      	ite	ne
 800873a:	2301      	movne	r3, #1
 800873c:	2300      	moveq	r3, #0
 800873e:	b2db      	uxtb	r3, r3
 8008740:	e02f      	b.n	80087a2 <HAL_TIM_PWM_Start+0x9e>
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	2b08      	cmp	r3, #8
 8008746:	d109      	bne.n	800875c <HAL_TIM_PWM_Start+0x58>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b01      	cmp	r3, #1
 8008752:	bf14      	ite	ne
 8008754:	2301      	movne	r3, #1
 8008756:	2300      	moveq	r3, #0
 8008758:	b2db      	uxtb	r3, r3
 800875a:	e022      	b.n	80087a2 <HAL_TIM_PWM_Start+0x9e>
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	2b0c      	cmp	r3, #12
 8008760:	d109      	bne.n	8008776 <HAL_TIM_PWM_Start+0x72>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b01      	cmp	r3, #1
 800876c:	bf14      	ite	ne
 800876e:	2301      	movne	r3, #1
 8008770:	2300      	moveq	r3, #0
 8008772:	b2db      	uxtb	r3, r3
 8008774:	e015      	b.n	80087a2 <HAL_TIM_PWM_Start+0x9e>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b10      	cmp	r3, #16
 800877a:	d109      	bne.n	8008790 <HAL_TIM_PWM_Start+0x8c>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b01      	cmp	r3, #1
 8008786:	bf14      	ite	ne
 8008788:	2301      	movne	r3, #1
 800878a:	2300      	moveq	r3, #0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	e008      	b.n	80087a2 <HAL_TIM_PWM_Start+0x9e>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b01      	cmp	r3, #1
 800879a:	bf14      	ite	ne
 800879c:	2301      	movne	r3, #1
 800879e:	2300      	moveq	r3, #0
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e07e      	b.n	80088a8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d104      	bne.n	80087ba <HAL_TIM_PWM_Start+0xb6>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087b8:	e023      	b.n	8008802 <HAL_TIM_PWM_Start+0xfe>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b04      	cmp	r3, #4
 80087be:	d104      	bne.n	80087ca <HAL_TIM_PWM_Start+0xc6>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087c8:	e01b      	b.n	8008802 <HAL_TIM_PWM_Start+0xfe>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	d104      	bne.n	80087da <HAL_TIM_PWM_Start+0xd6>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087d8:	e013      	b.n	8008802 <HAL_TIM_PWM_Start+0xfe>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b0c      	cmp	r3, #12
 80087de:	d104      	bne.n	80087ea <HAL_TIM_PWM_Start+0xe6>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087e8:	e00b      	b.n	8008802 <HAL_TIM_PWM_Start+0xfe>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b10      	cmp	r3, #16
 80087ee:	d104      	bne.n	80087fa <HAL_TIM_PWM_Start+0xf6>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087f8:	e003      	b.n	8008802 <HAL_TIM_PWM_Start+0xfe>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2202      	movs	r2, #2
 80087fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2201      	movs	r2, #1
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	4618      	mov	r0, r3
 800880c:	f000 fc4e 	bl	80090ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a26      	ldr	r2, [pc, #152]	; (80088b0 <HAL_TIM_PWM_Start+0x1ac>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d009      	beq.n	800882e <HAL_TIM_PWM_Start+0x12a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a25      	ldr	r2, [pc, #148]	; (80088b4 <HAL_TIM_PWM_Start+0x1b0>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d004      	beq.n	800882e <HAL_TIM_PWM_Start+0x12a>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a23      	ldr	r2, [pc, #140]	; (80088b8 <HAL_TIM_PWM_Start+0x1b4>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d101      	bne.n	8008832 <HAL_TIM_PWM_Start+0x12e>
 800882e:	2301      	movs	r3, #1
 8008830:	e000      	b.n	8008834 <HAL_TIM_PWM_Start+0x130>
 8008832:	2300      	movs	r3, #0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d007      	beq.n	8008848 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008846:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a18      	ldr	r2, [pc, #96]	; (80088b0 <HAL_TIM_PWM_Start+0x1ac>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d009      	beq.n	8008866 <HAL_TIM_PWM_Start+0x162>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800885a:	d004      	beq.n	8008866 <HAL_TIM_PWM_Start+0x162>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a14      	ldr	r2, [pc, #80]	; (80088b4 <HAL_TIM_PWM_Start+0x1b0>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d115      	bne.n	8008892 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	4b13      	ldr	r3, [pc, #76]	; (80088bc <HAL_TIM_PWM_Start+0x1b8>)
 800886e:	4013      	ands	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b06      	cmp	r3, #6
 8008876:	d015      	beq.n	80088a4 <HAL_TIM_PWM_Start+0x1a0>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800887e:	d011      	beq.n	80088a4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f042 0201 	orr.w	r2, r2, #1
 800888e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008890:	e008      	b.n	80088a4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f042 0201 	orr.w	r2, r2, #1
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	e000      	b.n	80088a6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	40012c00 	.word	0x40012c00
 80088b4:	40014000 	.word	0x40014000
 80088b8:	40014400 	.word	0x40014400
 80088bc:	00010007 	.word	0x00010007

080088c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d101      	bne.n	80088de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088da:	2302      	movs	r3, #2
 80088dc:	e0ff      	b.n	8008ade <HAL_TIM_PWM_ConfigChannel+0x21e>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b14      	cmp	r3, #20
 80088ea:	f200 80f0 	bhi.w	8008ace <HAL_TIM_PWM_ConfigChannel+0x20e>
 80088ee:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	08008949 	.word	0x08008949
 80088f8:	08008acf 	.word	0x08008acf
 80088fc:	08008acf 	.word	0x08008acf
 8008900:	08008acf 	.word	0x08008acf
 8008904:	08008989 	.word	0x08008989
 8008908:	08008acf 	.word	0x08008acf
 800890c:	08008acf 	.word	0x08008acf
 8008910:	08008acf 	.word	0x08008acf
 8008914:	080089cb 	.word	0x080089cb
 8008918:	08008acf 	.word	0x08008acf
 800891c:	08008acf 	.word	0x08008acf
 8008920:	08008acf 	.word	0x08008acf
 8008924:	08008a0b 	.word	0x08008a0b
 8008928:	08008acf 	.word	0x08008acf
 800892c:	08008acf 	.word	0x08008acf
 8008930:	08008acf 	.word	0x08008acf
 8008934:	08008a4d 	.word	0x08008a4d
 8008938:	08008acf 	.word	0x08008acf
 800893c:	08008acf 	.word	0x08008acf
 8008940:	08008acf 	.word	0x08008acf
 8008944:	08008a8d 	.word	0x08008a8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68b9      	ldr	r1, [r7, #8]
 800894e:	4618      	mov	r0, r3
 8008950:	f000 f92e 	bl	8008bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	699a      	ldr	r2, [r3, #24]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f042 0208 	orr.w	r2, r2, #8
 8008962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699a      	ldr	r2, [r3, #24]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f022 0204 	bic.w	r2, r2, #4
 8008972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6999      	ldr	r1, [r3, #24]
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	691a      	ldr	r2, [r3, #16]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	619a      	str	r2, [r3, #24]
      break;
 8008986:	e0a5      	b.n	8008ad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68b9      	ldr	r1, [r7, #8]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 f98a 	bl	8008ca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	699a      	ldr	r2, [r3, #24]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	699a      	ldr	r2, [r3, #24]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6999      	ldr	r1, [r3, #24]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	021a      	lsls	r2, r3, #8
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	430a      	orrs	r2, r1
 80089c6:	619a      	str	r2, [r3, #24]
      break;
 80089c8:	e084      	b.n	8008ad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68b9      	ldr	r1, [r7, #8]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 f9e3 	bl	8008d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	69da      	ldr	r2, [r3, #28]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f042 0208 	orr.w	r2, r2, #8
 80089e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	69da      	ldr	r2, [r3, #28]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0204 	bic.w	r2, r2, #4
 80089f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	69d9      	ldr	r1, [r3, #28]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	691a      	ldr	r2, [r3, #16]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	430a      	orrs	r2, r1
 8008a06:	61da      	str	r2, [r3, #28]
      break;
 8008a08:	e064      	b.n	8008ad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68b9      	ldr	r1, [r7, #8]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fa3b 	bl	8008e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69da      	ldr	r2, [r3, #28]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	69da      	ldr	r2, [r3, #28]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	69d9      	ldr	r1, [r3, #28]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	021a      	lsls	r2, r3, #8
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	61da      	str	r2, [r3, #28]
      break;
 8008a4a:	e043      	b.n	8008ad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fa78 	bl	8008f48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f042 0208 	orr.w	r2, r2, #8
 8008a66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 0204 	bic.w	r2, r2, #4
 8008a76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	691a      	ldr	r2, [r3, #16]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a8a:	e023      	b.n	8008ad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68b9      	ldr	r1, [r7, #8]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 fab0 	bl	8008ff8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aa6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ab6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	021a      	lsls	r2, r3, #8
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008acc:	e002      	b.n	8008ad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ad2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop

08008ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a2a      	ldr	r2, [pc, #168]	; (8008ba4 <TIM_Base_SetConfig+0xbc>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d003      	beq.n	8008b08 <TIM_Base_SetConfig+0x20>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b06:	d108      	bne.n	8008b1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a21      	ldr	r2, [pc, #132]	; (8008ba4 <TIM_Base_SetConfig+0xbc>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d00b      	beq.n	8008b3a <TIM_Base_SetConfig+0x52>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b28:	d007      	beq.n	8008b3a <TIM_Base_SetConfig+0x52>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a1e      	ldr	r2, [pc, #120]	; (8008ba8 <TIM_Base_SetConfig+0xc0>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d003      	beq.n	8008b3a <TIM_Base_SetConfig+0x52>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a1d      	ldr	r2, [pc, #116]	; (8008bac <TIM_Base_SetConfig+0xc4>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d108      	bne.n	8008b4c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a0c      	ldr	r2, [pc, #48]	; (8008ba4 <TIM_Base_SetConfig+0xbc>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d007      	beq.n	8008b88 <TIM_Base_SetConfig+0xa0>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a0b      	ldr	r2, [pc, #44]	; (8008ba8 <TIM_Base_SetConfig+0xc0>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d003      	beq.n	8008b88 <TIM_Base_SetConfig+0xa0>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a0a      	ldr	r2, [pc, #40]	; (8008bac <TIM_Base_SetConfig+0xc4>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d103      	bne.n	8008b90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	691a      	ldr	r2, [r3, #16]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	615a      	str	r2, [r3, #20]
}
 8008b96:	bf00      	nop
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	40012c00 	.word	0x40012c00
 8008ba8:	40014000 	.word	0x40014000
 8008bac:	40014400 	.word	0x40014400

08008bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	f023 0201 	bic.w	r2, r3, #1
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 0303 	bic.w	r3, r3, #3
 8008bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f023 0302 	bic.w	r3, r3, #2
 8008bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a24      	ldr	r2, [pc, #144]	; (8008c9c <TIM_OC1_SetConfig+0xec>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d007      	beq.n	8008c20 <TIM_OC1_SetConfig+0x70>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a23      	ldr	r2, [pc, #140]	; (8008ca0 <TIM_OC1_SetConfig+0xf0>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d003      	beq.n	8008c20 <TIM_OC1_SetConfig+0x70>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a22      	ldr	r2, [pc, #136]	; (8008ca4 <TIM_OC1_SetConfig+0xf4>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d10c      	bne.n	8008c3a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f023 0308 	bic.w	r3, r3, #8
 8008c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f023 0304 	bic.w	r3, r3, #4
 8008c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a17      	ldr	r2, [pc, #92]	; (8008c9c <TIM_OC1_SetConfig+0xec>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d007      	beq.n	8008c52 <TIM_OC1_SetConfig+0xa2>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a16      	ldr	r2, [pc, #88]	; (8008ca0 <TIM_OC1_SetConfig+0xf0>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d003      	beq.n	8008c52 <TIM_OC1_SetConfig+0xa2>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a15      	ldr	r2, [pc, #84]	; (8008ca4 <TIM_OC1_SetConfig+0xf4>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d111      	bne.n	8008c76 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	621a      	str	r2, [r3, #32]
}
 8008c90:	bf00      	nop
 8008c92:	371c      	adds	r7, #28
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	40012c00 	.word	0x40012c00
 8008ca0:	40014000 	.word	0x40014000
 8008ca4:	40014400 	.word	0x40014400

08008ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	f023 0210 	bic.w	r2, r3, #16
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	021b      	lsls	r3, r3, #8
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f023 0320 	bic.w	r3, r3, #32
 8008cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	011b      	lsls	r3, r3, #4
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a22      	ldr	r2, [pc, #136]	; (8008d90 <TIM_OC2_SetConfig+0xe8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d10d      	bne.n	8008d28 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	011b      	lsls	r3, r3, #4
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a19      	ldr	r2, [pc, #100]	; (8008d90 <TIM_OC2_SetConfig+0xe8>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d007      	beq.n	8008d40 <TIM_OC2_SetConfig+0x98>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a18      	ldr	r2, [pc, #96]	; (8008d94 <TIM_OC2_SetConfig+0xec>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d003      	beq.n	8008d40 <TIM_OC2_SetConfig+0x98>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a17      	ldr	r2, [pc, #92]	; (8008d98 <TIM_OC2_SetConfig+0xf0>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d113      	bne.n	8008d68 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	621a      	str	r2, [r3, #32]
}
 8008d82:	bf00      	nop
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40012c00 	.word	0x40012c00
 8008d94:	40014000 	.word	0x40014000
 8008d98:	40014400 	.word	0x40014400

08008d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b087      	sub	sp, #28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f023 0303 	bic.w	r3, r3, #3
 8008dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	021b      	lsls	r3, r3, #8
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a21      	ldr	r2, [pc, #132]	; (8008e80 <TIM_OC3_SetConfig+0xe4>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d10d      	bne.n	8008e1a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	021b      	lsls	r3, r3, #8
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a18      	ldr	r2, [pc, #96]	; (8008e80 <TIM_OC3_SetConfig+0xe4>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d007      	beq.n	8008e32 <TIM_OC3_SetConfig+0x96>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a17      	ldr	r2, [pc, #92]	; (8008e84 <TIM_OC3_SetConfig+0xe8>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d003      	beq.n	8008e32 <TIM_OC3_SetConfig+0x96>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a16      	ldr	r2, [pc, #88]	; (8008e88 <TIM_OC3_SetConfig+0xec>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d113      	bne.n	8008e5a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	011b      	lsls	r3, r3, #4
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	011b      	lsls	r3, r3, #4
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	621a      	str	r2, [r3, #32]
}
 8008e74:	bf00      	nop
 8008e76:	371c      	adds	r7, #28
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	40012c00 	.word	0x40012c00
 8008e84:	40014000 	.word	0x40014000
 8008e88:	40014400 	.word	0x40014400

08008e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	021b      	lsls	r3, r3, #8
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008eda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	031b      	lsls	r3, r3, #12
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a14      	ldr	r2, [pc, #80]	; (8008f3c <TIM_OC4_SetConfig+0xb0>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d007      	beq.n	8008f00 <TIM_OC4_SetConfig+0x74>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a13      	ldr	r2, [pc, #76]	; (8008f40 <TIM_OC4_SetConfig+0xb4>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d003      	beq.n	8008f00 <TIM_OC4_SetConfig+0x74>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a12      	ldr	r2, [pc, #72]	; (8008f44 <TIM_OC4_SetConfig+0xb8>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d109      	bne.n	8008f14 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	695b      	ldr	r3, [r3, #20]
 8008f0c:	019b      	lsls	r3, r3, #6
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	621a      	str	r2, [r3, #32]
}
 8008f2e:	bf00      	nop
 8008f30:	371c      	adds	r7, #28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	40012c00 	.word	0x40012c00
 8008f40:	40014000 	.word	0x40014000
 8008f44:	40014400 	.word	0x40014400

08008f48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a1b      	ldr	r3, [r3, #32]
 8008f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008f8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	041b      	lsls	r3, r3, #16
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a13      	ldr	r2, [pc, #76]	; (8008fec <TIM_OC5_SetConfig+0xa4>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d007      	beq.n	8008fb2 <TIM_OC5_SetConfig+0x6a>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a12      	ldr	r2, [pc, #72]	; (8008ff0 <TIM_OC5_SetConfig+0xa8>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d003      	beq.n	8008fb2 <TIM_OC5_SetConfig+0x6a>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a11      	ldr	r2, [pc, #68]	; (8008ff4 <TIM_OC5_SetConfig+0xac>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d109      	bne.n	8008fc6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	685a      	ldr	r2, [r3, #4]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	621a      	str	r2, [r3, #32]
}
 8008fe0:	bf00      	nop
 8008fe2:	371c      	adds	r7, #28
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	40012c00 	.word	0x40012c00
 8008ff0:	40014000 	.word	0x40014000
 8008ff4:	40014400 	.word	0x40014400

08008ff8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a1b      	ldr	r3, [r3, #32]
 8009006:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800901e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800902a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	021b      	lsls	r3, r3, #8
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	4313      	orrs	r3, r2
 8009036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800903e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	051b      	lsls	r3, r3, #20
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	4313      	orrs	r3, r2
 800904a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a14      	ldr	r2, [pc, #80]	; (80090a0 <TIM_OC6_SetConfig+0xa8>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d007      	beq.n	8009064 <TIM_OC6_SetConfig+0x6c>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a13      	ldr	r2, [pc, #76]	; (80090a4 <TIM_OC6_SetConfig+0xac>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d003      	beq.n	8009064 <TIM_OC6_SetConfig+0x6c>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a12      	ldr	r2, [pc, #72]	; (80090a8 <TIM_OC6_SetConfig+0xb0>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d109      	bne.n	8009078 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800906a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	029b      	lsls	r3, r3, #10
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	4313      	orrs	r3, r2
 8009076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	685a      	ldr	r2, [r3, #4]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	621a      	str	r2, [r3, #32]
}
 8009092:	bf00      	nop
 8009094:	371c      	adds	r7, #28
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	40012c00 	.word	0x40012c00
 80090a4:	40014000 	.word	0x40014000
 80090a8:	40014400 	.word	0x40014400

080090ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	f003 031f 	and.w	r3, r3, #31
 80090be:	2201      	movs	r2, #1
 80090c0:	fa02 f303 	lsl.w	r3, r2, r3
 80090c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6a1a      	ldr	r2, [r3, #32]
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	43db      	mvns	r3, r3
 80090ce:	401a      	ands	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6a1a      	ldr	r2, [r3, #32]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f003 031f 	and.w	r3, r3, #31
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	fa01 f303 	lsl.w	r3, r1, r3
 80090e4:	431a      	orrs	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	621a      	str	r2, [r3, #32]
}
 80090ea:	bf00      	nop
 80090ec:	371c      	adds	r7, #28
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
	...

080090f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009110:	2302      	movs	r3, #2
 8009112:	e060      	b.n	80091d6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	4313      	orrs	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	4313      	orrs	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	4313      	orrs	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4313      	orrs	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	4313      	orrs	r3, r2
 8009160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	695b      	ldr	r3, [r3, #20]
 800916c:	4313      	orrs	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917a:	4313      	orrs	r3, r2
 800917c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	041b      	lsls	r3, r3, #16
 800918a:	4313      	orrs	r3, r2
 800918c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a14      	ldr	r2, [pc, #80]	; (80091e4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d115      	bne.n	80091c4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	051b      	lsls	r3, r3, #20
 80091a4:	4313      	orrs	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	6a1b      	ldr	r3, [r3, #32]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	40012c00 	.word	0x40012c00

080091e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e040      	b.n	800927c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7f9 fe60 	bl	8002ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2224      	movs	r2, #36	; 0x24
 8009214:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 0201 	bic.w	r2, r2, #1
 8009224:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fc0e 	bl	8009a48 <UART_SetConfig>
 800922c:	4603      	mov	r3, r0
 800922e:	2b01      	cmp	r3, #1
 8009230:	d101      	bne.n	8009236 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e022      	b.n	800927c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	2b00      	cmp	r3, #0
 800923c:	d002      	beq.n	8009244 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fe5c 	bl	8009efc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009252:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	689a      	ldr	r2, [r3, #8]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009262:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0201 	orr.w	r2, r2, #1
 8009272:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fee3 	bl	800a040 <UART_CheckIdleState>
 800927a:	4603      	mov	r3, r0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b08a      	sub	sp, #40	; 0x28
 8009288:	af02      	add	r7, sp, #8
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	4613      	mov	r3, r2
 8009292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009298:	2b20      	cmp	r3, #32
 800929a:	f040 8082 	bne.w	80093a2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <HAL_UART_Transmit+0x26>
 80092a4:	88fb      	ldrh	r3, [r7, #6]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e07a      	b.n	80093a4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d101      	bne.n	80092bc <HAL_UART_Transmit+0x38>
 80092b8:	2302      	movs	r3, #2
 80092ba:	e073      	b.n	80093a4 <HAL_UART_Transmit+0x120>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2221      	movs	r2, #33	; 0x21
 80092d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092d2:	f7fa fd13 	bl	8003cfc <HAL_GetTick>
 80092d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	88fa      	ldrh	r2, [r7, #6]
 80092dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	88fa      	ldrh	r2, [r7, #6]
 80092e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092f0:	d108      	bne.n	8009304 <HAL_UART_Transmit+0x80>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d104      	bne.n	8009304 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80092fa:	2300      	movs	r3, #0
 80092fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	61bb      	str	r3, [r7, #24]
 8009302:	e003      	b.n	800930c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009308:	2300      	movs	r3, #0
 800930a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009314:	e02d      	b.n	8009372 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2200      	movs	r2, #0
 800931e:	2180      	movs	r1, #128	; 0x80
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f000 fed6 	bl	800a0d2 <UART_WaitOnFlagUntilTimeout>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e039      	b.n	80093a4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10b      	bne.n	800934e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	881a      	ldrh	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009342:	b292      	uxth	r2, r2
 8009344:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	3302      	adds	r3, #2
 800934a:	61bb      	str	r3, [r7, #24]
 800934c:	e008      	b.n	8009360 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	781a      	ldrb	r2, [r3, #0]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	b292      	uxth	r2, r2
 8009358:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	3301      	adds	r3, #1
 800935e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009366:	b29b      	uxth	r3, r3
 8009368:	3b01      	subs	r3, #1
 800936a:	b29a      	uxth	r2, r3
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009378:	b29b      	uxth	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1cb      	bne.n	8009316 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2200      	movs	r2, #0
 8009386:	2140      	movs	r1, #64	; 0x40
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 fea2 	bl	800a0d2 <UART_WaitOnFlagUntilTimeout>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e005      	b.n	80093a4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2220      	movs	r2, #32
 800939c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	e000      	b.n	80093a4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80093a2:	2302      	movs	r3, #2
  }
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3720      	adds	r7, #32
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b08a      	sub	sp, #40	; 0x28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	4613      	mov	r3, r2
 80093b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093be:	2b20      	cmp	r3, #32
 80093c0:	d142      	bne.n	8009448 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <HAL_UART_Receive_IT+0x22>
 80093c8:	88fb      	ldrh	r3, [r7, #6]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e03b      	b.n	800944a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d101      	bne.n	80093e0 <HAL_UART_Receive_IT+0x34>
 80093dc:	2302      	movs	r3, #2
 80093de:	e034      	b.n	800944a <HAL_UART_Receive_IT+0x9e>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a18      	ldr	r2, [pc, #96]	; (8009454 <HAL_UART_Receive_IT+0xa8>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d01f      	beq.n	8009438 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d018      	beq.n	8009438 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	e853 3f00 	ldrex	r3, [r3]
 8009412:	613b      	str	r3, [r7, #16]
   return(result);
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800941a:	627b      	str	r3, [r7, #36]	; 0x24
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	461a      	mov	r2, r3
 8009422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009424:	623b      	str	r3, [r7, #32]
 8009426:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009428:	69f9      	ldr	r1, [r7, #28]
 800942a:	6a3a      	ldr	r2, [r7, #32]
 800942c:	e841 2300 	strex	r3, r2, [r1]
 8009430:	61bb      	str	r3, [r7, #24]
   return(result);
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1e6      	bne.n	8009406 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009438:	88fb      	ldrh	r3, [r7, #6]
 800943a:	461a      	mov	r2, r3
 800943c:	68b9      	ldr	r1, [r7, #8]
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 ff0c 	bl	800a25c <UART_Start_Receive_IT>
 8009444:	4603      	mov	r3, r0
 8009446:	e000      	b.n	800944a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009448:	2302      	movs	r3, #2
  }
}
 800944a:	4618      	mov	r0, r3
 800944c:	3728      	adds	r7, #40	; 0x28
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	40008000 	.word	0x40008000

08009458 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b0ba      	sub	sp, #232	; 0xe8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800947e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009482:	f640 030f 	movw	r3, #2063	; 0x80f
 8009486:	4013      	ands	r3, r2
 8009488:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800948c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009490:	2b00      	cmp	r3, #0
 8009492:	d115      	bne.n	80094c0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009498:	f003 0320 	and.w	r3, r3, #32
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00f      	beq.n	80094c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80094a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094a4:	f003 0320 	and.w	r3, r3, #32
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d009      	beq.n	80094c0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 82a6 	beq.w	8009a02 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	4798      	blx	r3
      }
      return;
 80094be:	e2a0      	b.n	8009a02 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80094c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 8117 	beq.w	80096f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80094ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094ce:	f003 0301 	and.w	r3, r3, #1
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d106      	bne.n	80094e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80094d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80094da:	4b85      	ldr	r3, [pc, #532]	; (80096f0 <HAL_UART_IRQHandler+0x298>)
 80094dc:	4013      	ands	r3, r2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f000 810a 	beq.w	80096f8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d011      	beq.n	8009514 <HAL_UART_IRQHandler+0xbc>
 80094f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00b      	beq.n	8009514 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2201      	movs	r2, #1
 8009502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800950a:	f043 0201 	orr.w	r2, r3, #1
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009518:	f003 0302 	and.w	r3, r3, #2
 800951c:	2b00      	cmp	r3, #0
 800951e:	d011      	beq.n	8009544 <HAL_UART_IRQHandler+0xec>
 8009520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00b      	beq.n	8009544 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2202      	movs	r2, #2
 8009532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800953a:	f043 0204 	orr.w	r2, r3, #4
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009548:	f003 0304 	and.w	r3, r3, #4
 800954c:	2b00      	cmp	r3, #0
 800954e:	d011      	beq.n	8009574 <HAL_UART_IRQHandler+0x11c>
 8009550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00b      	beq.n	8009574 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2204      	movs	r2, #4
 8009562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800956a:	f043 0202 	orr.w	r2, r3, #2
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009578:	f003 0308 	and.w	r3, r3, #8
 800957c:	2b00      	cmp	r3, #0
 800957e:	d017      	beq.n	80095b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009584:	f003 0320 	and.w	r3, r3, #32
 8009588:	2b00      	cmp	r3, #0
 800958a:	d105      	bne.n	8009598 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800958c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009590:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00b      	beq.n	80095b0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2208      	movs	r2, #8
 800959e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095a6:	f043 0208 	orr.w	r2, r3, #8
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80095b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d012      	beq.n	80095e2 <HAL_UART_IRQHandler+0x18a>
 80095bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00c      	beq.n	80095e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095d8:	f043 0220 	orr.w	r2, r3, #32
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f000 820c 	beq.w	8009a06 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80095ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095f2:	f003 0320 	and.w	r3, r3, #32
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00d      	beq.n	8009616 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80095fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095fe:	f003 0320 	and.w	r3, r3, #32
 8009602:	2b00      	cmp	r3, #0
 8009604:	d007      	beq.n	8009616 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800960a:	2b00      	cmp	r3, #0
 800960c:	d003      	beq.n	8009616 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800961c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962a:	2b40      	cmp	r3, #64	; 0x40
 800962c:	d005      	beq.n	800963a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800962e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009632:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009636:	2b00      	cmp	r3, #0
 8009638:	d04f      	beq.n	80096da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fed8 	bl	800a3f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964a:	2b40      	cmp	r3, #64	; 0x40
 800964c:	d141      	bne.n	80096d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3308      	adds	r3, #8
 8009654:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800966c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3308      	adds	r3, #8
 8009676:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800967a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800967e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009682:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009686:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800968a:	e841 2300 	strex	r3, r2, [r1]
 800968e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1d9      	bne.n	800964e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d013      	beq.n	80096ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a6:	4a13      	ldr	r2, [pc, #76]	; (80096f4 <HAL_UART_IRQHandler+0x29c>)
 80096a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fc f97e 	bl	80059b0 <HAL_DMA_Abort_IT>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d017      	beq.n	80096ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80096c4:	4610      	mov	r0, r2
 80096c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c8:	e00f      	b.n	80096ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f7f7 ff88 	bl	80015e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d0:	e00b      	b.n	80096ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7f7 ff84 	bl	80015e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d8:	e007      	b.n	80096ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7f7 ff80 	bl	80015e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80096e8:	e18d      	b.n	8009a06 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ea:	bf00      	nop
    return;
 80096ec:	e18b      	b.n	8009a06 <HAL_UART_IRQHandler+0x5ae>
 80096ee:	bf00      	nop
 80096f0:	04000120 	.word	0x04000120
 80096f4:	0800a4b7 	.word	0x0800a4b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	f040 8146 	bne.w	800998e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009706:	f003 0310 	and.w	r3, r3, #16
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 813f 	beq.w	800998e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009714:	f003 0310 	and.w	r3, r3, #16
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 8138 	beq.w	800998e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2210      	movs	r2, #16
 8009724:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009730:	2b40      	cmp	r3, #64	; 0x40
 8009732:	f040 80b4 	bne.w	800989e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009742:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 815f 	beq.w	8009a0a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009756:	429a      	cmp	r2, r3
 8009758:	f080 8157 	bcs.w	8009a0a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009762:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 0320 	and.w	r3, r3, #32
 8009772:	2b00      	cmp	r3, #0
 8009774:	f040 8085 	bne.w	8009882 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009780:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009784:	e853 3f00 	ldrex	r3, [r3]
 8009788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800978c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009794:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	461a      	mov	r2, r3
 800979e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80097a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80097ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097b2:	e841 2300 	strex	r3, r2, [r1]
 80097b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80097ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1da      	bne.n	8009778 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3308      	adds	r3, #8
 80097c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097cc:	e853 3f00 	ldrex	r3, [r3]
 80097d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80097d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097d4:	f023 0301 	bic.w	r3, r3, #1
 80097d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3308      	adds	r3, #8
 80097e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80097e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80097ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80097ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80097f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e1      	bne.n	80097c2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3308      	adds	r3, #8
 8009804:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800980e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3308      	adds	r3, #8
 800981e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009822:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009824:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009826:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009828:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1e3      	bne.n	80097fe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2220      	movs	r2, #32
 800983a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800984a:	e853 3f00 	ldrex	r3, [r3]
 800984e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009852:	f023 0310 	bic.w	r3, r3, #16
 8009856:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	461a      	mov	r2, r3
 8009860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009864:	65bb      	str	r3, [r7, #88]	; 0x58
 8009866:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009868:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800986a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800986c:	e841 2300 	strex	r3, r2, [r1]
 8009870:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1e4      	bne.n	8009842 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987c:	4618      	mov	r0, r3
 800987e:	f7fc f859 	bl	8005934 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800988e:	b29b      	uxth	r3, r3
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	b29b      	uxth	r3, r3
 8009894:	4619      	mov	r1, r3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f8ca 	bl	8009a30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800989c:	e0b5      	b.n	8009a0a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 80a7 	beq.w	8009a0e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80098c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 80a2 	beq.w	8009a0e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d2:	e853 3f00 	ldrex	r3, [r3]
 80098d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	461a      	mov	r2, r3
 80098e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80098ec:	647b      	str	r3, [r7, #68]	; 0x44
 80098ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098f4:	e841 2300 	strex	r3, r2, [r1]
 80098f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e4      	bne.n	80098ca <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3308      	adds	r3, #8
 8009906:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	623b      	str	r3, [r7, #32]
   return(result);
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	f023 0301 	bic.w	r3, r3, #1
 8009916:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3308      	adds	r3, #8
 8009920:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009924:	633a      	str	r2, [r7, #48]	; 0x30
 8009926:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800992a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800992c:	e841 2300 	strex	r3, r2, [r1]
 8009930:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1e3      	bne.n	8009900 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2220      	movs	r2, #32
 800993c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	e853 3f00 	ldrex	r3, [r3]
 8009956:	60fb      	str	r3, [r7, #12]
   return(result);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f023 0310 	bic.w	r3, r3, #16
 800995e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	461a      	mov	r2, r3
 8009968:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800996c:	61fb      	str	r3, [r7, #28]
 800996e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009970:	69b9      	ldr	r1, [r7, #24]
 8009972:	69fa      	ldr	r2, [r7, #28]
 8009974:	e841 2300 	strex	r3, r2, [r1]
 8009978:	617b      	str	r3, [r7, #20]
   return(result);
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1e4      	bne.n	800994a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009980:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f852 	bl	8009a30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800998c:	e03f      	b.n	8009a0e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800998e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00e      	beq.n	80099b8 <HAL_UART_IRQHandler+0x560>
 800999a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800999e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d008      	beq.n	80099b8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80099ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 ff20 	bl	800a7f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099b6:	e02d      	b.n	8009a14 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80099b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00e      	beq.n	80099e2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80099c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d008      	beq.n	80099e2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d01c      	beq.n	8009a12 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	4798      	blx	r3
    }
    return;
 80099e0:	e017      	b.n	8009a12 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80099e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d012      	beq.n	8009a14 <HAL_UART_IRQHandler+0x5bc>
 80099ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00c      	beq.n	8009a14 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fd71 	bl	800a4e2 <UART_EndTransmit_IT>
    return;
 8009a00:	e008      	b.n	8009a14 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009a02:	bf00      	nop
 8009a04:	e006      	b.n	8009a14 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009a06:	bf00      	nop
 8009a08:	e004      	b.n	8009a14 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009a0a:	bf00      	nop
 8009a0c:	e002      	b.n	8009a14 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009a0e:	bf00      	nop
 8009a10:	e000      	b.n	8009a14 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009a12:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009a14:	37e8      	adds	r7, #232	; 0xe8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop

08009a1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a4c:	b08a      	sub	sp, #40	; 0x28
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	689a      	ldr	r2, [r3, #8]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	431a      	orrs	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	431a      	orrs	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	69db      	ldr	r3, [r3, #28]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	4b9e      	ldr	r3, [pc, #632]	; (8009cf0 <UART_SetConfig+0x2a8>)
 8009a78:	4013      	ands	r3, r2
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	6812      	ldr	r2, [r2, #0]
 8009a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a80:	430b      	orrs	r3, r1
 8009a82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	68da      	ldr	r2, [r3, #12]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	430a      	orrs	r2, r1
 8009a98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a93      	ldr	r2, [pc, #588]	; (8009cf4 <UART_SetConfig+0x2ac>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d004      	beq.n	8009ab4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a8a      	ldr	r2, [pc, #552]	; (8009cf8 <UART_SetConfig+0x2b0>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d126      	bne.n	8009b20 <UART_SetConfig+0xd8>
 8009ad2:	4b8a      	ldr	r3, [pc, #552]	; (8009cfc <UART_SetConfig+0x2b4>)
 8009ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad8:	f003 0303 	and.w	r3, r3, #3
 8009adc:	2b03      	cmp	r3, #3
 8009ade:	d81b      	bhi.n	8009b18 <UART_SetConfig+0xd0>
 8009ae0:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <UART_SetConfig+0xa0>)
 8009ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae6:	bf00      	nop
 8009ae8:	08009af9 	.word	0x08009af9
 8009aec:	08009b09 	.word	0x08009b09
 8009af0:	08009b01 	.word	0x08009b01
 8009af4:	08009b11 	.word	0x08009b11
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009afe:	e0ab      	b.n	8009c58 <UART_SetConfig+0x210>
 8009b00:	2302      	movs	r3, #2
 8009b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b06:	e0a7      	b.n	8009c58 <UART_SetConfig+0x210>
 8009b08:	2304      	movs	r3, #4
 8009b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b0e:	e0a3      	b.n	8009c58 <UART_SetConfig+0x210>
 8009b10:	2308      	movs	r3, #8
 8009b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b16:	e09f      	b.n	8009c58 <UART_SetConfig+0x210>
 8009b18:	2310      	movs	r3, #16
 8009b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b1e:	e09b      	b.n	8009c58 <UART_SetConfig+0x210>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a76      	ldr	r2, [pc, #472]	; (8009d00 <UART_SetConfig+0x2b8>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d138      	bne.n	8009b9c <UART_SetConfig+0x154>
 8009b2a:	4b74      	ldr	r3, [pc, #464]	; (8009cfc <UART_SetConfig+0x2b4>)
 8009b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b30:	f003 030c 	and.w	r3, r3, #12
 8009b34:	2b0c      	cmp	r3, #12
 8009b36:	d82d      	bhi.n	8009b94 <UART_SetConfig+0x14c>
 8009b38:	a201      	add	r2, pc, #4	; (adr r2, 8009b40 <UART_SetConfig+0xf8>)
 8009b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3e:	bf00      	nop
 8009b40:	08009b75 	.word	0x08009b75
 8009b44:	08009b95 	.word	0x08009b95
 8009b48:	08009b95 	.word	0x08009b95
 8009b4c:	08009b95 	.word	0x08009b95
 8009b50:	08009b85 	.word	0x08009b85
 8009b54:	08009b95 	.word	0x08009b95
 8009b58:	08009b95 	.word	0x08009b95
 8009b5c:	08009b95 	.word	0x08009b95
 8009b60:	08009b7d 	.word	0x08009b7d
 8009b64:	08009b95 	.word	0x08009b95
 8009b68:	08009b95 	.word	0x08009b95
 8009b6c:	08009b95 	.word	0x08009b95
 8009b70:	08009b8d 	.word	0x08009b8d
 8009b74:	2300      	movs	r3, #0
 8009b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b7a:	e06d      	b.n	8009c58 <UART_SetConfig+0x210>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b82:	e069      	b.n	8009c58 <UART_SetConfig+0x210>
 8009b84:	2304      	movs	r3, #4
 8009b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b8a:	e065      	b.n	8009c58 <UART_SetConfig+0x210>
 8009b8c:	2308      	movs	r3, #8
 8009b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b92:	e061      	b.n	8009c58 <UART_SetConfig+0x210>
 8009b94:	2310      	movs	r3, #16
 8009b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b9a:	e05d      	b.n	8009c58 <UART_SetConfig+0x210>
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a58      	ldr	r2, [pc, #352]	; (8009d04 <UART_SetConfig+0x2bc>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d125      	bne.n	8009bf2 <UART_SetConfig+0x1aa>
 8009ba6:	4b55      	ldr	r3, [pc, #340]	; (8009cfc <UART_SetConfig+0x2b4>)
 8009ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009bb0:	2b30      	cmp	r3, #48	; 0x30
 8009bb2:	d016      	beq.n	8009be2 <UART_SetConfig+0x19a>
 8009bb4:	2b30      	cmp	r3, #48	; 0x30
 8009bb6:	d818      	bhi.n	8009bea <UART_SetConfig+0x1a2>
 8009bb8:	2b20      	cmp	r3, #32
 8009bba:	d00a      	beq.n	8009bd2 <UART_SetConfig+0x18a>
 8009bbc:	2b20      	cmp	r3, #32
 8009bbe:	d814      	bhi.n	8009bea <UART_SetConfig+0x1a2>
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <UART_SetConfig+0x182>
 8009bc4:	2b10      	cmp	r3, #16
 8009bc6:	d008      	beq.n	8009bda <UART_SetConfig+0x192>
 8009bc8:	e00f      	b.n	8009bea <UART_SetConfig+0x1a2>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009bd0:	e042      	b.n	8009c58 <UART_SetConfig+0x210>
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009bd8:	e03e      	b.n	8009c58 <UART_SetConfig+0x210>
 8009bda:	2304      	movs	r3, #4
 8009bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009be0:	e03a      	b.n	8009c58 <UART_SetConfig+0x210>
 8009be2:	2308      	movs	r3, #8
 8009be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009be8:	e036      	b.n	8009c58 <UART_SetConfig+0x210>
 8009bea:	2310      	movs	r3, #16
 8009bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009bf0:	e032      	b.n	8009c58 <UART_SetConfig+0x210>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a3f      	ldr	r2, [pc, #252]	; (8009cf4 <UART_SetConfig+0x2ac>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d12a      	bne.n	8009c52 <UART_SetConfig+0x20a>
 8009bfc:	4b3f      	ldr	r3, [pc, #252]	; (8009cfc <UART_SetConfig+0x2b4>)
 8009bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009c06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c0a:	d01a      	beq.n	8009c42 <UART_SetConfig+0x1fa>
 8009c0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c10:	d81b      	bhi.n	8009c4a <UART_SetConfig+0x202>
 8009c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c16:	d00c      	beq.n	8009c32 <UART_SetConfig+0x1ea>
 8009c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c1c:	d815      	bhi.n	8009c4a <UART_SetConfig+0x202>
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <UART_SetConfig+0x1e2>
 8009c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c26:	d008      	beq.n	8009c3a <UART_SetConfig+0x1f2>
 8009c28:	e00f      	b.n	8009c4a <UART_SetConfig+0x202>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c30:	e012      	b.n	8009c58 <UART_SetConfig+0x210>
 8009c32:	2302      	movs	r3, #2
 8009c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c38:	e00e      	b.n	8009c58 <UART_SetConfig+0x210>
 8009c3a:	2304      	movs	r3, #4
 8009c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c40:	e00a      	b.n	8009c58 <UART_SetConfig+0x210>
 8009c42:	2308      	movs	r3, #8
 8009c44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c48:	e006      	b.n	8009c58 <UART_SetConfig+0x210>
 8009c4a:	2310      	movs	r3, #16
 8009c4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c50:	e002      	b.n	8009c58 <UART_SetConfig+0x210>
 8009c52:	2310      	movs	r3, #16
 8009c54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a25      	ldr	r2, [pc, #148]	; (8009cf4 <UART_SetConfig+0x2ac>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	f040 808a 	bne.w	8009d78 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c68:	2b08      	cmp	r3, #8
 8009c6a:	d824      	bhi.n	8009cb6 <UART_SetConfig+0x26e>
 8009c6c:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <UART_SetConfig+0x22c>)
 8009c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c72:	bf00      	nop
 8009c74:	08009c99 	.word	0x08009c99
 8009c78:	08009cb7 	.word	0x08009cb7
 8009c7c:	08009ca1 	.word	0x08009ca1
 8009c80:	08009cb7 	.word	0x08009cb7
 8009c84:	08009ca7 	.word	0x08009ca7
 8009c88:	08009cb7 	.word	0x08009cb7
 8009c8c:	08009cb7 	.word	0x08009cb7
 8009c90:	08009cb7 	.word	0x08009cb7
 8009c94:	08009caf 	.word	0x08009caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c98:	f7fe f8e6 	bl	8007e68 <HAL_RCC_GetPCLK1Freq>
 8009c9c:	61f8      	str	r0, [r7, #28]
        break;
 8009c9e:	e010      	b.n	8009cc2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ca0:	4b19      	ldr	r3, [pc, #100]	; (8009d08 <UART_SetConfig+0x2c0>)
 8009ca2:	61fb      	str	r3, [r7, #28]
        break;
 8009ca4:	e00d      	b.n	8009cc2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ca6:	f7fe f847 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8009caa:	61f8      	str	r0, [r7, #28]
        break;
 8009cac:	e009      	b.n	8009cc2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cb2:	61fb      	str	r3, [r7, #28]
        break;
 8009cb4:	e005      	b.n	8009cc2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009cc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f000 8109 	beq.w	8009edc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	4413      	add	r3, r2
 8009cd4:	69fa      	ldr	r2, [r7, #28]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d305      	bcc.n	8009ce6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009ce0:	69fa      	ldr	r2, [r7, #28]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d912      	bls.n	8009d0c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009cec:	e0f6      	b.n	8009edc <UART_SetConfig+0x494>
 8009cee:	bf00      	nop
 8009cf0:	efff69f3 	.word	0xefff69f3
 8009cf4:	40008000 	.word	0x40008000
 8009cf8:	40013800 	.word	0x40013800
 8009cfc:	40021000 	.word	0x40021000
 8009d00:	40004400 	.word	0x40004400
 8009d04:	40004800 	.word	0x40004800
 8009d08:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	461c      	mov	r4, r3
 8009d12:	4615      	mov	r5, r2
 8009d14:	f04f 0200 	mov.w	r2, #0
 8009d18:	f04f 0300 	mov.w	r3, #0
 8009d1c:	022b      	lsls	r3, r5, #8
 8009d1e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009d22:	0222      	lsls	r2, r4, #8
 8009d24:	68f9      	ldr	r1, [r7, #12]
 8009d26:	6849      	ldr	r1, [r1, #4]
 8009d28:	0849      	lsrs	r1, r1, #1
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	4688      	mov	r8, r1
 8009d2e:	4681      	mov	r9, r0
 8009d30:	eb12 0a08 	adds.w	sl, r2, r8
 8009d34:	eb43 0b09 	adc.w	fp, r3, r9
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	603b      	str	r3, [r7, #0]
 8009d40:	607a      	str	r2, [r7, #4]
 8009d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d46:	4650      	mov	r0, sl
 8009d48:	4659      	mov	r1, fp
 8009d4a:	f7f6 ff7d 	bl	8000c48 <__aeabi_uldivmod>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	4613      	mov	r3, r2
 8009d54:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d5c:	d308      	bcc.n	8009d70 <UART_SetConfig+0x328>
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d64:	d204      	bcs.n	8009d70 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	60da      	str	r2, [r3, #12]
 8009d6e:	e0b5      	b.n	8009edc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009d76:	e0b1      	b.n	8009edc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	69db      	ldr	r3, [r3, #28]
 8009d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d80:	d15d      	bne.n	8009e3e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8009d82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d86:	2b08      	cmp	r3, #8
 8009d88:	d827      	bhi.n	8009dda <UART_SetConfig+0x392>
 8009d8a:	a201      	add	r2, pc, #4	; (adr r2, 8009d90 <UART_SetConfig+0x348>)
 8009d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d90:	08009db5 	.word	0x08009db5
 8009d94:	08009dbd 	.word	0x08009dbd
 8009d98:	08009dc5 	.word	0x08009dc5
 8009d9c:	08009ddb 	.word	0x08009ddb
 8009da0:	08009dcb 	.word	0x08009dcb
 8009da4:	08009ddb 	.word	0x08009ddb
 8009da8:	08009ddb 	.word	0x08009ddb
 8009dac:	08009ddb 	.word	0x08009ddb
 8009db0:	08009dd3 	.word	0x08009dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009db4:	f7fe f858 	bl	8007e68 <HAL_RCC_GetPCLK1Freq>
 8009db8:	61f8      	str	r0, [r7, #28]
        break;
 8009dba:	e014      	b.n	8009de6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dbc:	f7fe f86a 	bl	8007e94 <HAL_RCC_GetPCLK2Freq>
 8009dc0:	61f8      	str	r0, [r7, #28]
        break;
 8009dc2:	e010      	b.n	8009de6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dc4:	4b4c      	ldr	r3, [pc, #304]	; (8009ef8 <UART_SetConfig+0x4b0>)
 8009dc6:	61fb      	str	r3, [r7, #28]
        break;
 8009dc8:	e00d      	b.n	8009de6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dca:	f7fd ffb5 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8009dce:	61f8      	str	r0, [r7, #28]
        break;
 8009dd0:	e009      	b.n	8009de6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dd6:	61fb      	str	r3, [r7, #28]
        break;
 8009dd8:	e005      	b.n	8009de6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009de4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d077      	beq.n	8009edc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	005a      	lsls	r2, r3, #1
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	085b      	lsrs	r3, r3, #1
 8009df6:	441a      	add	r2, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	2b0f      	cmp	r3, #15
 8009e06:	d916      	bls.n	8009e36 <UART_SetConfig+0x3ee>
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e0e:	d212      	bcs.n	8009e36 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	f023 030f 	bic.w	r3, r3, #15
 8009e18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	085b      	lsrs	r3, r3, #1
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	f003 0307 	and.w	r3, r3, #7
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	8afb      	ldrh	r3, [r7, #22]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	8afa      	ldrh	r2, [r7, #22]
 8009e32:	60da      	str	r2, [r3, #12]
 8009e34:	e052      	b.n	8009edc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009e3c:	e04e      	b.n	8009edc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e42:	2b08      	cmp	r3, #8
 8009e44:	d827      	bhi.n	8009e96 <UART_SetConfig+0x44e>
 8009e46:	a201      	add	r2, pc, #4	; (adr r2, 8009e4c <UART_SetConfig+0x404>)
 8009e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4c:	08009e71 	.word	0x08009e71
 8009e50:	08009e79 	.word	0x08009e79
 8009e54:	08009e81 	.word	0x08009e81
 8009e58:	08009e97 	.word	0x08009e97
 8009e5c:	08009e87 	.word	0x08009e87
 8009e60:	08009e97 	.word	0x08009e97
 8009e64:	08009e97 	.word	0x08009e97
 8009e68:	08009e97 	.word	0x08009e97
 8009e6c:	08009e8f 	.word	0x08009e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e70:	f7fd fffa 	bl	8007e68 <HAL_RCC_GetPCLK1Freq>
 8009e74:	61f8      	str	r0, [r7, #28]
        break;
 8009e76:	e014      	b.n	8009ea2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e78:	f7fe f80c 	bl	8007e94 <HAL_RCC_GetPCLK2Freq>
 8009e7c:	61f8      	str	r0, [r7, #28]
        break;
 8009e7e:	e010      	b.n	8009ea2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e80:	4b1d      	ldr	r3, [pc, #116]	; (8009ef8 <UART_SetConfig+0x4b0>)
 8009e82:	61fb      	str	r3, [r7, #28]
        break;
 8009e84:	e00d      	b.n	8009ea2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e86:	f7fd ff57 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8009e8a:	61f8      	str	r0, [r7, #28]
        break;
 8009e8c:	e009      	b.n	8009ea2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e92:	61fb      	str	r3, [r7, #28]
        break;
 8009e94:	e005      	b.n	8009ea2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8009e96:	2300      	movs	r3, #0
 8009e98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009ea0:	bf00      	nop
    }

    if (pclk != 0U)
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d019      	beq.n	8009edc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	085a      	lsrs	r2, r3, #1
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	441a      	add	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	2b0f      	cmp	r3, #15
 8009ec0:	d909      	bls.n	8009ed6 <UART_SetConfig+0x48e>
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ec8:	d205      	bcs.n	8009ed6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60da      	str	r2, [r3, #12]
 8009ed4:	e002      	b.n	8009edc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009ee8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3728      	adds	r7, #40	; 0x28
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ef6:	bf00      	nop
 8009ef8:	00f42400 	.word	0x00f42400

08009efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f08:	f003 0301 	and.w	r3, r3, #1
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00a      	beq.n	8009f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2a:	f003 0302 	and.w	r3, r3, #2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00a      	beq.n	8009f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	430a      	orrs	r2, r1
 8009f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	f003 0304 	and.w	r3, r3, #4
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00a      	beq.n	8009f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6e:	f003 0308 	and.w	r3, r3, #8
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00a      	beq.n	8009f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	430a      	orrs	r2, r1
 8009f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f90:	f003 0310 	and.w	r3, r3, #16
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00a      	beq.n	8009fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	f003 0320 	and.w	r3, r3, #32
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	430a      	orrs	r2, r1
 8009fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d01a      	beq.n	800a012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ffa:	d10a      	bne.n	800a012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	430a      	orrs	r2, r1
 800a010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00a      	beq.n	800a034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	430a      	orrs	r2, r1
 800a032:	605a      	str	r2, [r3, #4]
  }
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af02      	add	r7, sp, #8
 800a046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a050:	f7f9 fe54 	bl	8003cfc <HAL_GetTick>
 800a054:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0308 	and.w	r3, r3, #8
 800a060:	2b08      	cmp	r3, #8
 800a062:	d10e      	bne.n	800a082 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f82d 	bl	800a0d2 <UART_WaitOnFlagUntilTimeout>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e023      	b.n	800a0ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 0304 	and.w	r3, r3, #4
 800a08c:	2b04      	cmp	r3, #4
 800a08e:	d10e      	bne.n	800a0ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a090:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f817 	bl	800a0d2 <UART_WaitOnFlagUntilTimeout>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e00d      	b.n	800a0ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b09c      	sub	sp, #112	; 0x70
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	603b      	str	r3, [r7, #0]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0e2:	e0a5      	b.n	800a230 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ea:	f000 80a1 	beq.w	800a230 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0ee:	f7f9 fe05 	bl	8003cfc <HAL_GetTick>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d302      	bcc.n	800a104 <UART_WaitOnFlagUntilTimeout+0x32>
 800a0fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a100:	2b00      	cmp	r3, #0
 800a102:	d13e      	bne.n	800a182 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a10c:	e853 3f00 	ldrex	r3, [r3]
 800a110:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a114:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a118:	667b      	str	r3, [r7, #100]	; 0x64
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	461a      	mov	r2, r3
 800a120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a122:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a124:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a126:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a128:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a12a:	e841 2300 	strex	r3, r2, [r1]
 800a12e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1e6      	bne.n	800a104 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	3308      	adds	r3, #8
 800a13c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a140:	e853 3f00 	ldrex	r3, [r3]
 800a144:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a148:	f023 0301 	bic.w	r3, r3, #1
 800a14c:	663b      	str	r3, [r7, #96]	; 0x60
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3308      	adds	r3, #8
 800a154:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a156:	64ba      	str	r2, [r7, #72]	; 0x48
 800a158:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a15c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a15e:	e841 2300 	strex	r3, r2, [r1]
 800a162:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1e5      	bne.n	800a136 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2220      	movs	r2, #32
 800a16e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2220      	movs	r2, #32
 800a174:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e067      	b.n	800a252 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 0304 	and.w	r3, r3, #4
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d04f      	beq.n	800a230 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a19a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a19e:	d147      	bne.n	800a230 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b2:	e853 3f00 	ldrex	r3, [r3]
 800a1b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a1be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a1ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1d0:	e841 2300 	strex	r3, r2, [r1]
 800a1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e6      	bne.n	800a1aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	e853 3f00 	ldrex	r3, [r3]
 800a1ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f023 0301 	bic.w	r3, r3, #1
 800a1f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	3308      	adds	r3, #8
 800a1fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a1fc:	623a      	str	r2, [r7, #32]
 800a1fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a200:	69f9      	ldr	r1, [r7, #28]
 800a202:	6a3a      	ldr	r2, [r7, #32]
 800a204:	e841 2300 	strex	r3, r2, [r1]
 800a208:	61bb      	str	r3, [r7, #24]
   return(result);
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1e5      	bne.n	800a1dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2220      	movs	r2, #32
 800a214:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2220      	movs	r2, #32
 800a21a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2220      	movs	r2, #32
 800a220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e010      	b.n	800a252 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	69da      	ldr	r2, [r3, #28]
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	4013      	ands	r3, r2
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	bf0c      	ite	eq
 800a240:	2301      	moveq	r3, #1
 800a242:	2300      	movne	r3, #0
 800a244:	b2db      	uxtb	r3, r3
 800a246:	461a      	mov	r2, r3
 800a248:	79fb      	ldrb	r3, [r7, #7]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	f43f af4a 	beq.w	800a0e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3770      	adds	r7, #112	; 0x70
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b097      	sub	sp, #92	; 0x5c
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	4613      	mov	r3, r2
 800a268:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	88fa      	ldrh	r2, [r7, #6]
 800a274:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	88fa      	ldrh	r2, [r7, #6]
 800a27c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a28e:	d10e      	bne.n	800a2ae <UART_Start_Receive_IT+0x52>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d105      	bne.n	800a2a4 <UART_Start_Receive_IT+0x48>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a29e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2a2:	e02d      	b.n	800a300 <UART_Start_Receive_IT+0xa4>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	22ff      	movs	r2, #255	; 0xff
 800a2a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2ac:	e028      	b.n	800a300 <UART_Start_Receive_IT+0xa4>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10d      	bne.n	800a2d2 <UART_Start_Receive_IT+0x76>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d104      	bne.n	800a2c8 <UART_Start_Receive_IT+0x6c>
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	22ff      	movs	r2, #255	; 0xff
 800a2c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2c6:	e01b      	b.n	800a300 <UART_Start_Receive_IT+0xa4>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	227f      	movs	r2, #127	; 0x7f
 800a2cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2d0:	e016      	b.n	800a300 <UART_Start_Receive_IT+0xa4>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2da:	d10d      	bne.n	800a2f8 <UART_Start_Receive_IT+0x9c>
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d104      	bne.n	800a2ee <UART_Start_Receive_IT+0x92>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	227f      	movs	r2, #127	; 0x7f
 800a2e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2ec:	e008      	b.n	800a300 <UART_Start_Receive_IT+0xa4>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	223f      	movs	r2, #63	; 0x3f
 800a2f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2f6:	e003      	b.n	800a300 <UART_Start_Receive_IT+0xa4>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2222      	movs	r2, #34	; 0x22
 800a30c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3308      	adds	r3, #8
 800a314:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a318:	e853 3f00 	ldrex	r3, [r3]
 800a31c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	f043 0301 	orr.w	r3, r3, #1
 800a324:	657b      	str	r3, [r7, #84]	; 0x54
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3308      	adds	r3, #8
 800a32c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a32e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a330:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a332:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a336:	e841 2300 	strex	r3, r2, [r1]
 800a33a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1e5      	bne.n	800a30e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a34a:	d107      	bne.n	800a35c <UART_Start_Receive_IT+0x100>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d103      	bne.n	800a35c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4a24      	ldr	r2, [pc, #144]	; (800a3e8 <UART_Start_Receive_IT+0x18c>)
 800a358:	665a      	str	r2, [r3, #100]	; 0x64
 800a35a:	e002      	b.n	800a362 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4a23      	ldr	r2, [pc, #140]	; (800a3ec <UART_Start_Receive_IT+0x190>)
 800a360:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d019      	beq.n	800a3a6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37a:	e853 3f00 	ldrex	r3, [r3]
 800a37e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a382:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a386:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	461a      	mov	r2, r3
 800a38e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a390:	637b      	str	r3, [r7, #52]	; 0x34
 800a392:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a394:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a398:	e841 2300 	strex	r3, r2, [r1]
 800a39c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1e6      	bne.n	800a372 <UART_Start_Receive_IT+0x116>
 800a3a4:	e018      	b.n	800a3d8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	e853 3f00 	ldrex	r3, [r3]
 800a3b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	f043 0320 	orr.w	r3, r3, #32
 800a3ba:	653b      	str	r3, [r7, #80]	; 0x50
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3c4:	623b      	str	r3, [r7, #32]
 800a3c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c8:	69f9      	ldr	r1, [r7, #28]
 800a3ca:	6a3a      	ldr	r2, [r7, #32]
 800a3cc:	e841 2300 	strex	r3, r2, [r1]
 800a3d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e6      	bne.n	800a3a6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	375c      	adds	r7, #92	; 0x5c
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	0800a697 	.word	0x0800a697
 800a3ec:	0800a537 	.word	0x0800a537

0800a3f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b095      	sub	sp, #84	; 0x54
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a400:	e853 3f00 	ldrex	r3, [r3]
 800a404:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a40c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	461a      	mov	r2, r3
 800a414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a416:	643b      	str	r3, [r7, #64]	; 0x40
 800a418:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a41c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a41e:	e841 2300 	strex	r3, r2, [r1]
 800a422:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1e6      	bne.n	800a3f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3308      	adds	r3, #8
 800a430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	e853 3f00 	ldrex	r3, [r3]
 800a438:	61fb      	str	r3, [r7, #28]
   return(result);
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	f023 0301 	bic.w	r3, r3, #1
 800a440:	64bb      	str	r3, [r7, #72]	; 0x48
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3308      	adds	r3, #8
 800a448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a44a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a44c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a452:	e841 2300 	strex	r3, r2, [r1]
 800a456:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1e5      	bne.n	800a42a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a462:	2b01      	cmp	r3, #1
 800a464:	d118      	bne.n	800a498 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	e853 3f00 	ldrex	r3, [r3]
 800a472:	60bb      	str	r3, [r7, #8]
   return(result);
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f023 0310 	bic.w	r3, r3, #16
 800a47a:	647b      	str	r3, [r7, #68]	; 0x44
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	461a      	mov	r2, r3
 800a482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a484:	61bb      	str	r3, [r7, #24]
 800a486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a488:	6979      	ldr	r1, [r7, #20]
 800a48a:	69ba      	ldr	r2, [r7, #24]
 800a48c:	e841 2300 	strex	r3, r2, [r1]
 800a490:	613b      	str	r3, [r7, #16]
   return(result);
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1e6      	bne.n	800a466 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2220      	movs	r2, #32
 800a49c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a4aa:	bf00      	nop
 800a4ac:	3754      	adds	r7, #84	; 0x54
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f7f7 f883 	bl	80015e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4da:	bf00      	nop
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b088      	sub	sp, #32
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	e853 3f00 	ldrex	r3, [r3]
 800a4f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4fe:	61fb      	str	r3, [r7, #28]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	461a      	mov	r2, r3
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	61bb      	str	r3, [r7, #24]
 800a50a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50c:	6979      	ldr	r1, [r7, #20]
 800a50e:	69ba      	ldr	r2, [r7, #24]
 800a510:	e841 2300 	strex	r3, r2, [r1]
 800a514:	613b      	str	r3, [r7, #16]
   return(result);
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d1e6      	bne.n	800a4ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2220      	movs	r2, #32
 800a520:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f7ff fa77 	bl	8009a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a52e:	bf00      	nop
 800a530:	3720      	adds	r7, #32
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b096      	sub	sp, #88	; 0x58
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a544:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a54c:	2b22      	cmp	r3, #34	; 0x22
 800a54e:	f040 8094 	bne.w	800a67a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a558:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a55c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a560:	b2d9      	uxtb	r1, r3
 800a562:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a566:	b2da      	uxtb	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a56c:	400a      	ands	r2, r1
 800a56e:	b2d2      	uxtb	r2, r2
 800a570:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a582:	b29b      	uxth	r3, r3
 800a584:	3b01      	subs	r3, #1
 800a586:	b29a      	uxth	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a594:	b29b      	uxth	r3, r3
 800a596:	2b00      	cmp	r3, #0
 800a598:	d179      	bne.n	800a68e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	e853 3f00 	ldrex	r3, [r3]
 800a5a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5ae:	653b      	str	r3, [r7, #80]	; 0x50
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5b8:	647b      	str	r3, [r7, #68]	; 0x44
 800a5ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a5be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5c0:	e841 2300 	strex	r3, r2, [r1]
 800a5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1e6      	bne.n	800a59a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	e853 3f00 	ldrex	r3, [r3]
 800a5da:	623b      	str	r3, [r7, #32]
   return(result);
 800a5dc:	6a3b      	ldr	r3, [r7, #32]
 800a5de:	f023 0301 	bic.w	r3, r3, #1
 800a5e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	3308      	adds	r3, #8
 800a5ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a5ec:	633a      	str	r2, [r7, #48]	; 0x30
 800a5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5f4:	e841 2300 	strex	r3, r2, [r1]
 800a5f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d1e5      	bne.n	800a5cc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2220      	movs	r2, #32
 800a604:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a610:	2b01      	cmp	r3, #1
 800a612:	d12e      	bne.n	800a672 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	e853 3f00 	ldrex	r3, [r3]
 800a626:	60fb      	str	r3, [r7, #12]
   return(result);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f023 0310 	bic.w	r3, r3, #16
 800a62e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	461a      	mov	r2, r3
 800a636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a638:	61fb      	str	r3, [r7, #28]
 800a63a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63c:	69b9      	ldr	r1, [r7, #24]
 800a63e:	69fa      	ldr	r2, [r7, #28]
 800a640:	e841 2300 	strex	r3, r2, [r1]
 800a644:	617b      	str	r3, [r7, #20]
   return(result);
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1e6      	bne.n	800a61a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	69db      	ldr	r3, [r3, #28]
 800a652:	f003 0310 	and.w	r3, r3, #16
 800a656:	2b10      	cmp	r3, #16
 800a658:	d103      	bne.n	800a662 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2210      	movs	r2, #16
 800a660:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a668:	4619      	mov	r1, r3
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7ff f9e0 	bl	8009a30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a670:	e00d      	b.n	800a68e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f7f6 ff90 	bl	8001598 <HAL_UART_RxCpltCallback>
}
 800a678:	e009      	b.n	800a68e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	8b1b      	ldrh	r3, [r3, #24]
 800a680:	b29a      	uxth	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f042 0208 	orr.w	r2, r2, #8
 800a68a:	b292      	uxth	r2, r2
 800a68c:	831a      	strh	r2, [r3, #24]
}
 800a68e:	bf00      	nop
 800a690:	3758      	adds	r7, #88	; 0x58
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b096      	sub	sp, #88	; 0x58
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a6a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ac:	2b22      	cmp	r3, #34	; 0x22
 800a6ae:	f040 8094 	bne.w	800a7da <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a6b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6c0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a6c2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a6c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d6:	1c9a      	adds	r2, r3, #2
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d179      	bne.n	800a7ee <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a702:	e853 3f00 	ldrex	r3, [r3]
 800a706:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a70e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	461a      	mov	r2, r3
 800a716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a718:	643b      	str	r3, [r7, #64]	; 0x40
 800a71a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a71e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a720:	e841 2300 	strex	r3, r2, [r1]
 800a724:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e6      	bne.n	800a6fa <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3308      	adds	r3, #8
 800a732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	e853 3f00 	ldrex	r3, [r3]
 800a73a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	f023 0301 	bic.w	r3, r3, #1
 800a742:	64bb      	str	r3, [r7, #72]	; 0x48
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	3308      	adds	r3, #8
 800a74a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a74c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a74e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a754:	e841 2300 	strex	r3, r2, [r1]
 800a758:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1e5      	bne.n	800a72c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2220      	movs	r2, #32
 800a764:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a770:	2b01      	cmp	r3, #1
 800a772:	d12e      	bne.n	800a7d2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	e853 3f00 	ldrex	r3, [r3]
 800a786:	60bb      	str	r3, [r7, #8]
   return(result);
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	f023 0310 	bic.w	r3, r3, #16
 800a78e:	647b      	str	r3, [r7, #68]	; 0x44
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	461a      	mov	r2, r3
 800a796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a798:	61bb      	str	r3, [r7, #24]
 800a79a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79c:	6979      	ldr	r1, [r7, #20]
 800a79e:	69ba      	ldr	r2, [r7, #24]
 800a7a0:	e841 2300 	strex	r3, r2, [r1]
 800a7a4:	613b      	str	r3, [r7, #16]
   return(result);
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1e6      	bne.n	800a77a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	69db      	ldr	r3, [r3, #28]
 800a7b2:	f003 0310 	and.w	r3, r3, #16
 800a7b6:	2b10      	cmp	r3, #16
 800a7b8:	d103      	bne.n	800a7c2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2210      	movs	r2, #16
 800a7c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f7ff f930 	bl	8009a30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7d0:	e00d      	b.n	800a7ee <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7f6 fee0 	bl	8001598 <HAL_UART_RxCpltCallback>
}
 800a7d8:	e009      	b.n	800a7ee <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	8b1b      	ldrh	r3, [r3, #24]
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f042 0208 	orr.w	r2, r2, #8
 800a7ea:	b292      	uxth	r2, r2
 800a7ec:	831a      	strh	r2, [r3, #24]
}
 800a7ee:	bf00      	nop
 800a7f0:	3758      	adds	r7, #88	; 0x58
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7fe:	bf00      	nop
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <__cvt>:
 800a80a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a80e:	ec55 4b10 	vmov	r4, r5, d0
 800a812:	2d00      	cmp	r5, #0
 800a814:	460e      	mov	r6, r1
 800a816:	4619      	mov	r1, r3
 800a818:	462b      	mov	r3, r5
 800a81a:	bfbb      	ittet	lt
 800a81c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a820:	461d      	movlt	r5, r3
 800a822:	2300      	movge	r3, #0
 800a824:	232d      	movlt	r3, #45	; 0x2d
 800a826:	700b      	strb	r3, [r1, #0]
 800a828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a82a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a82e:	4691      	mov	r9, r2
 800a830:	f023 0820 	bic.w	r8, r3, #32
 800a834:	bfbc      	itt	lt
 800a836:	4622      	movlt	r2, r4
 800a838:	4614      	movlt	r4, r2
 800a83a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a83e:	d005      	beq.n	800a84c <__cvt+0x42>
 800a840:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a844:	d100      	bne.n	800a848 <__cvt+0x3e>
 800a846:	3601      	adds	r6, #1
 800a848:	2102      	movs	r1, #2
 800a84a:	e000      	b.n	800a84e <__cvt+0x44>
 800a84c:	2103      	movs	r1, #3
 800a84e:	ab03      	add	r3, sp, #12
 800a850:	9301      	str	r3, [sp, #4]
 800a852:	ab02      	add	r3, sp, #8
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	ec45 4b10 	vmov	d0, r4, r5
 800a85a:	4653      	mov	r3, sl
 800a85c:	4632      	mov	r2, r6
 800a85e:	f000 ff37 	bl	800b6d0 <_dtoa_r>
 800a862:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a866:	4607      	mov	r7, r0
 800a868:	d102      	bne.n	800a870 <__cvt+0x66>
 800a86a:	f019 0f01 	tst.w	r9, #1
 800a86e:	d022      	beq.n	800a8b6 <__cvt+0xac>
 800a870:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a874:	eb07 0906 	add.w	r9, r7, r6
 800a878:	d110      	bne.n	800a89c <__cvt+0x92>
 800a87a:	783b      	ldrb	r3, [r7, #0]
 800a87c:	2b30      	cmp	r3, #48	; 0x30
 800a87e:	d10a      	bne.n	800a896 <__cvt+0x8c>
 800a880:	2200      	movs	r2, #0
 800a882:	2300      	movs	r3, #0
 800a884:	4620      	mov	r0, r4
 800a886:	4629      	mov	r1, r5
 800a888:	f7f6 f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a88c:	b918      	cbnz	r0, 800a896 <__cvt+0x8c>
 800a88e:	f1c6 0601 	rsb	r6, r6, #1
 800a892:	f8ca 6000 	str.w	r6, [sl]
 800a896:	f8da 3000 	ldr.w	r3, [sl]
 800a89a:	4499      	add	r9, r3
 800a89c:	2200      	movs	r2, #0
 800a89e:	2300      	movs	r3, #0
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	f7f6 f910 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8a8:	b108      	cbz	r0, 800a8ae <__cvt+0xa4>
 800a8aa:	f8cd 900c 	str.w	r9, [sp, #12]
 800a8ae:	2230      	movs	r2, #48	; 0x30
 800a8b0:	9b03      	ldr	r3, [sp, #12]
 800a8b2:	454b      	cmp	r3, r9
 800a8b4:	d307      	bcc.n	800a8c6 <__cvt+0xbc>
 800a8b6:	9b03      	ldr	r3, [sp, #12]
 800a8b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8ba:	1bdb      	subs	r3, r3, r7
 800a8bc:	4638      	mov	r0, r7
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	b004      	add	sp, #16
 800a8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c6:	1c59      	adds	r1, r3, #1
 800a8c8:	9103      	str	r1, [sp, #12]
 800a8ca:	701a      	strb	r2, [r3, #0]
 800a8cc:	e7f0      	b.n	800a8b0 <__cvt+0xa6>

0800a8ce <__exponent>:
 800a8ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2900      	cmp	r1, #0
 800a8d4:	bfb8      	it	lt
 800a8d6:	4249      	neglt	r1, r1
 800a8d8:	f803 2b02 	strb.w	r2, [r3], #2
 800a8dc:	bfb4      	ite	lt
 800a8de:	222d      	movlt	r2, #45	; 0x2d
 800a8e0:	222b      	movge	r2, #43	; 0x2b
 800a8e2:	2909      	cmp	r1, #9
 800a8e4:	7042      	strb	r2, [r0, #1]
 800a8e6:	dd2a      	ble.n	800a93e <__exponent+0x70>
 800a8e8:	f10d 0207 	add.w	r2, sp, #7
 800a8ec:	4617      	mov	r7, r2
 800a8ee:	260a      	movs	r6, #10
 800a8f0:	4694      	mov	ip, r2
 800a8f2:	fb91 f5f6 	sdiv	r5, r1, r6
 800a8f6:	fb06 1415 	mls	r4, r6, r5, r1
 800a8fa:	3430      	adds	r4, #48	; 0x30
 800a8fc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a900:	460c      	mov	r4, r1
 800a902:	2c63      	cmp	r4, #99	; 0x63
 800a904:	f102 32ff 	add.w	r2, r2, #4294967295
 800a908:	4629      	mov	r1, r5
 800a90a:	dcf1      	bgt.n	800a8f0 <__exponent+0x22>
 800a90c:	3130      	adds	r1, #48	; 0x30
 800a90e:	f1ac 0402 	sub.w	r4, ip, #2
 800a912:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a916:	1c41      	adds	r1, r0, #1
 800a918:	4622      	mov	r2, r4
 800a91a:	42ba      	cmp	r2, r7
 800a91c:	d30a      	bcc.n	800a934 <__exponent+0x66>
 800a91e:	f10d 0209 	add.w	r2, sp, #9
 800a922:	eba2 020c 	sub.w	r2, r2, ip
 800a926:	42bc      	cmp	r4, r7
 800a928:	bf88      	it	hi
 800a92a:	2200      	movhi	r2, #0
 800a92c:	4413      	add	r3, r2
 800a92e:	1a18      	subs	r0, r3, r0
 800a930:	b003      	add	sp, #12
 800a932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a934:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a938:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a93c:	e7ed      	b.n	800a91a <__exponent+0x4c>
 800a93e:	2330      	movs	r3, #48	; 0x30
 800a940:	3130      	adds	r1, #48	; 0x30
 800a942:	7083      	strb	r3, [r0, #2]
 800a944:	70c1      	strb	r1, [r0, #3]
 800a946:	1d03      	adds	r3, r0, #4
 800a948:	e7f1      	b.n	800a92e <__exponent+0x60>
	...

0800a94c <_printf_float>:
 800a94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a950:	ed2d 8b02 	vpush	{d8}
 800a954:	b08d      	sub	sp, #52	; 0x34
 800a956:	460c      	mov	r4, r1
 800a958:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a95c:	4616      	mov	r6, r2
 800a95e:	461f      	mov	r7, r3
 800a960:	4605      	mov	r5, r0
 800a962:	f000 fdb7 	bl	800b4d4 <_localeconv_r>
 800a966:	f8d0 a000 	ldr.w	sl, [r0]
 800a96a:	4650      	mov	r0, sl
 800a96c:	f7f5 fc80 	bl	8000270 <strlen>
 800a970:	2300      	movs	r3, #0
 800a972:	930a      	str	r3, [sp, #40]	; 0x28
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	9305      	str	r3, [sp, #20]
 800a978:	f8d8 3000 	ldr.w	r3, [r8]
 800a97c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a980:	3307      	adds	r3, #7
 800a982:	f023 0307 	bic.w	r3, r3, #7
 800a986:	f103 0208 	add.w	r2, r3, #8
 800a98a:	f8c8 2000 	str.w	r2, [r8]
 800a98e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a992:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a996:	9307      	str	r3, [sp, #28]
 800a998:	f8cd 8018 	str.w	r8, [sp, #24]
 800a99c:	ee08 0a10 	vmov	s16, r0
 800a9a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a9a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9a8:	4b9e      	ldr	r3, [pc, #632]	; (800ac24 <_printf_float+0x2d8>)
 800a9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ae:	f7f6 f8bd 	bl	8000b2c <__aeabi_dcmpun>
 800a9b2:	bb88      	cbnz	r0, 800aa18 <_printf_float+0xcc>
 800a9b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9b8:	4b9a      	ldr	r3, [pc, #616]	; (800ac24 <_printf_float+0x2d8>)
 800a9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a9be:	f7f6 f897 	bl	8000af0 <__aeabi_dcmple>
 800a9c2:	bb48      	cbnz	r0, 800aa18 <_printf_float+0xcc>
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	4640      	mov	r0, r8
 800a9ca:	4649      	mov	r1, r9
 800a9cc:	f7f6 f886 	bl	8000adc <__aeabi_dcmplt>
 800a9d0:	b110      	cbz	r0, 800a9d8 <_printf_float+0x8c>
 800a9d2:	232d      	movs	r3, #45	; 0x2d
 800a9d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9d8:	4a93      	ldr	r2, [pc, #588]	; (800ac28 <_printf_float+0x2dc>)
 800a9da:	4b94      	ldr	r3, [pc, #592]	; (800ac2c <_printf_float+0x2e0>)
 800a9dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a9e0:	bf94      	ite	ls
 800a9e2:	4690      	movls	r8, r2
 800a9e4:	4698      	movhi	r8, r3
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	6123      	str	r3, [r4, #16]
 800a9ea:	9b05      	ldr	r3, [sp, #20]
 800a9ec:	f023 0304 	bic.w	r3, r3, #4
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	f04f 0900 	mov.w	r9, #0
 800a9f6:	9700      	str	r7, [sp, #0]
 800a9f8:	4633      	mov	r3, r6
 800a9fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	4628      	mov	r0, r5
 800aa00:	f000 f9da 	bl	800adb8 <_printf_common>
 800aa04:	3001      	adds	r0, #1
 800aa06:	f040 8090 	bne.w	800ab2a <_printf_float+0x1de>
 800aa0a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0e:	b00d      	add	sp, #52	; 0x34
 800aa10:	ecbd 8b02 	vpop	{d8}
 800aa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa18:	4642      	mov	r2, r8
 800aa1a:	464b      	mov	r3, r9
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	4649      	mov	r1, r9
 800aa20:	f7f6 f884 	bl	8000b2c <__aeabi_dcmpun>
 800aa24:	b140      	cbz	r0, 800aa38 <_printf_float+0xec>
 800aa26:	464b      	mov	r3, r9
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	bfbc      	itt	lt
 800aa2c:	232d      	movlt	r3, #45	; 0x2d
 800aa2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa32:	4a7f      	ldr	r2, [pc, #508]	; (800ac30 <_printf_float+0x2e4>)
 800aa34:	4b7f      	ldr	r3, [pc, #508]	; (800ac34 <_printf_float+0x2e8>)
 800aa36:	e7d1      	b.n	800a9dc <_printf_float+0x90>
 800aa38:	6863      	ldr	r3, [r4, #4]
 800aa3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aa3e:	9206      	str	r2, [sp, #24]
 800aa40:	1c5a      	adds	r2, r3, #1
 800aa42:	d13f      	bne.n	800aac4 <_printf_float+0x178>
 800aa44:	2306      	movs	r3, #6
 800aa46:	6063      	str	r3, [r4, #4]
 800aa48:	9b05      	ldr	r3, [sp, #20]
 800aa4a:	6861      	ldr	r1, [r4, #4]
 800aa4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aa50:	2300      	movs	r3, #0
 800aa52:	9303      	str	r3, [sp, #12]
 800aa54:	ab0a      	add	r3, sp, #40	; 0x28
 800aa56:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aa5a:	ab09      	add	r3, sp, #36	; 0x24
 800aa5c:	ec49 8b10 	vmov	d0, r8, r9
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	6022      	str	r2, [r4, #0]
 800aa64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aa68:	4628      	mov	r0, r5
 800aa6a:	f7ff fece 	bl	800a80a <__cvt>
 800aa6e:	9b06      	ldr	r3, [sp, #24]
 800aa70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa72:	2b47      	cmp	r3, #71	; 0x47
 800aa74:	4680      	mov	r8, r0
 800aa76:	d108      	bne.n	800aa8a <_printf_float+0x13e>
 800aa78:	1cc8      	adds	r0, r1, #3
 800aa7a:	db02      	blt.n	800aa82 <_printf_float+0x136>
 800aa7c:	6863      	ldr	r3, [r4, #4]
 800aa7e:	4299      	cmp	r1, r3
 800aa80:	dd41      	ble.n	800ab06 <_printf_float+0x1ba>
 800aa82:	f1ab 0302 	sub.w	r3, fp, #2
 800aa86:	fa5f fb83 	uxtb.w	fp, r3
 800aa8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa8e:	d820      	bhi.n	800aad2 <_printf_float+0x186>
 800aa90:	3901      	subs	r1, #1
 800aa92:	465a      	mov	r2, fp
 800aa94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aa98:	9109      	str	r1, [sp, #36]	; 0x24
 800aa9a:	f7ff ff18 	bl	800a8ce <__exponent>
 800aa9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaa0:	1813      	adds	r3, r2, r0
 800aaa2:	2a01      	cmp	r2, #1
 800aaa4:	4681      	mov	r9, r0
 800aaa6:	6123      	str	r3, [r4, #16]
 800aaa8:	dc02      	bgt.n	800aab0 <_printf_float+0x164>
 800aaaa:	6822      	ldr	r2, [r4, #0]
 800aaac:	07d2      	lsls	r2, r2, #31
 800aaae:	d501      	bpl.n	800aab4 <_printf_float+0x168>
 800aab0:	3301      	adds	r3, #1
 800aab2:	6123      	str	r3, [r4, #16]
 800aab4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d09c      	beq.n	800a9f6 <_printf_float+0xaa>
 800aabc:	232d      	movs	r3, #45	; 0x2d
 800aabe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aac2:	e798      	b.n	800a9f6 <_printf_float+0xaa>
 800aac4:	9a06      	ldr	r2, [sp, #24]
 800aac6:	2a47      	cmp	r2, #71	; 0x47
 800aac8:	d1be      	bne.n	800aa48 <_printf_float+0xfc>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1bc      	bne.n	800aa48 <_printf_float+0xfc>
 800aace:	2301      	movs	r3, #1
 800aad0:	e7b9      	b.n	800aa46 <_printf_float+0xfa>
 800aad2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aad6:	d118      	bne.n	800ab0a <_printf_float+0x1be>
 800aad8:	2900      	cmp	r1, #0
 800aada:	6863      	ldr	r3, [r4, #4]
 800aadc:	dd0b      	ble.n	800aaf6 <_printf_float+0x1aa>
 800aade:	6121      	str	r1, [r4, #16]
 800aae0:	b913      	cbnz	r3, 800aae8 <_printf_float+0x19c>
 800aae2:	6822      	ldr	r2, [r4, #0]
 800aae4:	07d0      	lsls	r0, r2, #31
 800aae6:	d502      	bpl.n	800aaee <_printf_float+0x1a2>
 800aae8:	3301      	adds	r3, #1
 800aaea:	440b      	add	r3, r1
 800aaec:	6123      	str	r3, [r4, #16]
 800aaee:	65a1      	str	r1, [r4, #88]	; 0x58
 800aaf0:	f04f 0900 	mov.w	r9, #0
 800aaf4:	e7de      	b.n	800aab4 <_printf_float+0x168>
 800aaf6:	b913      	cbnz	r3, 800aafe <_printf_float+0x1b2>
 800aaf8:	6822      	ldr	r2, [r4, #0]
 800aafa:	07d2      	lsls	r2, r2, #31
 800aafc:	d501      	bpl.n	800ab02 <_printf_float+0x1b6>
 800aafe:	3302      	adds	r3, #2
 800ab00:	e7f4      	b.n	800aaec <_printf_float+0x1a0>
 800ab02:	2301      	movs	r3, #1
 800ab04:	e7f2      	b.n	800aaec <_printf_float+0x1a0>
 800ab06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab0c:	4299      	cmp	r1, r3
 800ab0e:	db05      	blt.n	800ab1c <_printf_float+0x1d0>
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	6121      	str	r1, [r4, #16]
 800ab14:	07d8      	lsls	r0, r3, #31
 800ab16:	d5ea      	bpl.n	800aaee <_printf_float+0x1a2>
 800ab18:	1c4b      	adds	r3, r1, #1
 800ab1a:	e7e7      	b.n	800aaec <_printf_float+0x1a0>
 800ab1c:	2900      	cmp	r1, #0
 800ab1e:	bfd4      	ite	le
 800ab20:	f1c1 0202 	rsble	r2, r1, #2
 800ab24:	2201      	movgt	r2, #1
 800ab26:	4413      	add	r3, r2
 800ab28:	e7e0      	b.n	800aaec <_printf_float+0x1a0>
 800ab2a:	6823      	ldr	r3, [r4, #0]
 800ab2c:	055a      	lsls	r2, r3, #21
 800ab2e:	d407      	bmi.n	800ab40 <_printf_float+0x1f4>
 800ab30:	6923      	ldr	r3, [r4, #16]
 800ab32:	4642      	mov	r2, r8
 800ab34:	4631      	mov	r1, r6
 800ab36:	4628      	mov	r0, r5
 800ab38:	47b8      	blx	r7
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	d12c      	bne.n	800ab98 <_printf_float+0x24c>
 800ab3e:	e764      	b.n	800aa0a <_printf_float+0xbe>
 800ab40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab44:	f240 80e0 	bls.w	800ad08 <_printf_float+0x3bc>
 800ab48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f7f5 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d034      	beq.n	800abc2 <_printf_float+0x276>
 800ab58:	4a37      	ldr	r2, [pc, #220]	; (800ac38 <_printf_float+0x2ec>)
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	4631      	mov	r1, r6
 800ab5e:	4628      	mov	r0, r5
 800ab60:	47b8      	blx	r7
 800ab62:	3001      	adds	r0, #1
 800ab64:	f43f af51 	beq.w	800aa0a <_printf_float+0xbe>
 800ab68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	db02      	blt.n	800ab76 <_printf_float+0x22a>
 800ab70:	6823      	ldr	r3, [r4, #0]
 800ab72:	07d8      	lsls	r0, r3, #31
 800ab74:	d510      	bpl.n	800ab98 <_printf_float+0x24c>
 800ab76:	ee18 3a10 	vmov	r3, s16
 800ab7a:	4652      	mov	r2, sl
 800ab7c:	4631      	mov	r1, r6
 800ab7e:	4628      	mov	r0, r5
 800ab80:	47b8      	blx	r7
 800ab82:	3001      	adds	r0, #1
 800ab84:	f43f af41 	beq.w	800aa0a <_printf_float+0xbe>
 800ab88:	f04f 0800 	mov.w	r8, #0
 800ab8c:	f104 091a 	add.w	r9, r4, #26
 800ab90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab92:	3b01      	subs	r3, #1
 800ab94:	4543      	cmp	r3, r8
 800ab96:	dc09      	bgt.n	800abac <_printf_float+0x260>
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	079b      	lsls	r3, r3, #30
 800ab9c:	f100 8107 	bmi.w	800adae <_printf_float+0x462>
 800aba0:	68e0      	ldr	r0, [r4, #12]
 800aba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aba4:	4298      	cmp	r0, r3
 800aba6:	bfb8      	it	lt
 800aba8:	4618      	movlt	r0, r3
 800abaa:	e730      	b.n	800aa0e <_printf_float+0xc2>
 800abac:	2301      	movs	r3, #1
 800abae:	464a      	mov	r2, r9
 800abb0:	4631      	mov	r1, r6
 800abb2:	4628      	mov	r0, r5
 800abb4:	47b8      	blx	r7
 800abb6:	3001      	adds	r0, #1
 800abb8:	f43f af27 	beq.w	800aa0a <_printf_float+0xbe>
 800abbc:	f108 0801 	add.w	r8, r8, #1
 800abc0:	e7e6      	b.n	800ab90 <_printf_float+0x244>
 800abc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	dc39      	bgt.n	800ac3c <_printf_float+0x2f0>
 800abc8:	4a1b      	ldr	r2, [pc, #108]	; (800ac38 <_printf_float+0x2ec>)
 800abca:	2301      	movs	r3, #1
 800abcc:	4631      	mov	r1, r6
 800abce:	4628      	mov	r0, r5
 800abd0:	47b8      	blx	r7
 800abd2:	3001      	adds	r0, #1
 800abd4:	f43f af19 	beq.w	800aa0a <_printf_float+0xbe>
 800abd8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800abdc:	4313      	orrs	r3, r2
 800abde:	d102      	bne.n	800abe6 <_printf_float+0x29a>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	07d9      	lsls	r1, r3, #31
 800abe4:	d5d8      	bpl.n	800ab98 <_printf_float+0x24c>
 800abe6:	ee18 3a10 	vmov	r3, s16
 800abea:	4652      	mov	r2, sl
 800abec:	4631      	mov	r1, r6
 800abee:	4628      	mov	r0, r5
 800abf0:	47b8      	blx	r7
 800abf2:	3001      	adds	r0, #1
 800abf4:	f43f af09 	beq.w	800aa0a <_printf_float+0xbe>
 800abf8:	f04f 0900 	mov.w	r9, #0
 800abfc:	f104 0a1a 	add.w	sl, r4, #26
 800ac00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac02:	425b      	negs	r3, r3
 800ac04:	454b      	cmp	r3, r9
 800ac06:	dc01      	bgt.n	800ac0c <_printf_float+0x2c0>
 800ac08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac0a:	e792      	b.n	800ab32 <_printf_float+0x1e6>
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	4652      	mov	r2, sl
 800ac10:	4631      	mov	r1, r6
 800ac12:	4628      	mov	r0, r5
 800ac14:	47b8      	blx	r7
 800ac16:	3001      	adds	r0, #1
 800ac18:	f43f aef7 	beq.w	800aa0a <_printf_float+0xbe>
 800ac1c:	f109 0901 	add.w	r9, r9, #1
 800ac20:	e7ee      	b.n	800ac00 <_printf_float+0x2b4>
 800ac22:	bf00      	nop
 800ac24:	7fefffff 	.word	0x7fefffff
 800ac28:	0800d76d 	.word	0x0800d76d
 800ac2c:	0800d771 	.word	0x0800d771
 800ac30:	0800d775 	.word	0x0800d775
 800ac34:	0800d779 	.word	0x0800d779
 800ac38:	0800d77d 	.word	0x0800d77d
 800ac3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac40:	429a      	cmp	r2, r3
 800ac42:	bfa8      	it	ge
 800ac44:	461a      	movge	r2, r3
 800ac46:	2a00      	cmp	r2, #0
 800ac48:	4691      	mov	r9, r2
 800ac4a:	dc37      	bgt.n	800acbc <_printf_float+0x370>
 800ac4c:	f04f 0b00 	mov.w	fp, #0
 800ac50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac54:	f104 021a 	add.w	r2, r4, #26
 800ac58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac5a:	9305      	str	r3, [sp, #20]
 800ac5c:	eba3 0309 	sub.w	r3, r3, r9
 800ac60:	455b      	cmp	r3, fp
 800ac62:	dc33      	bgt.n	800accc <_printf_float+0x380>
 800ac64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	db3b      	blt.n	800ace4 <_printf_float+0x398>
 800ac6c:	6823      	ldr	r3, [r4, #0]
 800ac6e:	07da      	lsls	r2, r3, #31
 800ac70:	d438      	bmi.n	800ace4 <_printf_float+0x398>
 800ac72:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ac76:	eba2 0903 	sub.w	r9, r2, r3
 800ac7a:	9b05      	ldr	r3, [sp, #20]
 800ac7c:	1ad2      	subs	r2, r2, r3
 800ac7e:	4591      	cmp	r9, r2
 800ac80:	bfa8      	it	ge
 800ac82:	4691      	movge	r9, r2
 800ac84:	f1b9 0f00 	cmp.w	r9, #0
 800ac88:	dc35      	bgt.n	800acf6 <_printf_float+0x3aa>
 800ac8a:	f04f 0800 	mov.w	r8, #0
 800ac8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac92:	f104 0a1a 	add.w	sl, r4, #26
 800ac96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac9a:	1a9b      	subs	r3, r3, r2
 800ac9c:	eba3 0309 	sub.w	r3, r3, r9
 800aca0:	4543      	cmp	r3, r8
 800aca2:	f77f af79 	ble.w	800ab98 <_printf_float+0x24c>
 800aca6:	2301      	movs	r3, #1
 800aca8:	4652      	mov	r2, sl
 800acaa:	4631      	mov	r1, r6
 800acac:	4628      	mov	r0, r5
 800acae:	47b8      	blx	r7
 800acb0:	3001      	adds	r0, #1
 800acb2:	f43f aeaa 	beq.w	800aa0a <_printf_float+0xbe>
 800acb6:	f108 0801 	add.w	r8, r8, #1
 800acba:	e7ec      	b.n	800ac96 <_printf_float+0x34a>
 800acbc:	4613      	mov	r3, r2
 800acbe:	4631      	mov	r1, r6
 800acc0:	4642      	mov	r2, r8
 800acc2:	4628      	mov	r0, r5
 800acc4:	47b8      	blx	r7
 800acc6:	3001      	adds	r0, #1
 800acc8:	d1c0      	bne.n	800ac4c <_printf_float+0x300>
 800acca:	e69e      	b.n	800aa0a <_printf_float+0xbe>
 800accc:	2301      	movs	r3, #1
 800acce:	4631      	mov	r1, r6
 800acd0:	4628      	mov	r0, r5
 800acd2:	9205      	str	r2, [sp, #20]
 800acd4:	47b8      	blx	r7
 800acd6:	3001      	adds	r0, #1
 800acd8:	f43f ae97 	beq.w	800aa0a <_printf_float+0xbe>
 800acdc:	9a05      	ldr	r2, [sp, #20]
 800acde:	f10b 0b01 	add.w	fp, fp, #1
 800ace2:	e7b9      	b.n	800ac58 <_printf_float+0x30c>
 800ace4:	ee18 3a10 	vmov	r3, s16
 800ace8:	4652      	mov	r2, sl
 800acea:	4631      	mov	r1, r6
 800acec:	4628      	mov	r0, r5
 800acee:	47b8      	blx	r7
 800acf0:	3001      	adds	r0, #1
 800acf2:	d1be      	bne.n	800ac72 <_printf_float+0x326>
 800acf4:	e689      	b.n	800aa0a <_printf_float+0xbe>
 800acf6:	9a05      	ldr	r2, [sp, #20]
 800acf8:	464b      	mov	r3, r9
 800acfa:	4442      	add	r2, r8
 800acfc:	4631      	mov	r1, r6
 800acfe:	4628      	mov	r0, r5
 800ad00:	47b8      	blx	r7
 800ad02:	3001      	adds	r0, #1
 800ad04:	d1c1      	bne.n	800ac8a <_printf_float+0x33e>
 800ad06:	e680      	b.n	800aa0a <_printf_float+0xbe>
 800ad08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad0a:	2a01      	cmp	r2, #1
 800ad0c:	dc01      	bgt.n	800ad12 <_printf_float+0x3c6>
 800ad0e:	07db      	lsls	r3, r3, #31
 800ad10:	d53a      	bpl.n	800ad88 <_printf_float+0x43c>
 800ad12:	2301      	movs	r3, #1
 800ad14:	4642      	mov	r2, r8
 800ad16:	4631      	mov	r1, r6
 800ad18:	4628      	mov	r0, r5
 800ad1a:	47b8      	blx	r7
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	f43f ae74 	beq.w	800aa0a <_printf_float+0xbe>
 800ad22:	ee18 3a10 	vmov	r3, s16
 800ad26:	4652      	mov	r2, sl
 800ad28:	4631      	mov	r1, r6
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	47b8      	blx	r7
 800ad2e:	3001      	adds	r0, #1
 800ad30:	f43f ae6b 	beq.w	800aa0a <_printf_float+0xbe>
 800ad34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad38:	2200      	movs	r2, #0
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ad40:	f7f5 fec2 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad44:	b9d8      	cbnz	r0, 800ad7e <_printf_float+0x432>
 800ad46:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ad4a:	f108 0201 	add.w	r2, r8, #1
 800ad4e:	4631      	mov	r1, r6
 800ad50:	4628      	mov	r0, r5
 800ad52:	47b8      	blx	r7
 800ad54:	3001      	adds	r0, #1
 800ad56:	d10e      	bne.n	800ad76 <_printf_float+0x42a>
 800ad58:	e657      	b.n	800aa0a <_printf_float+0xbe>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	4652      	mov	r2, sl
 800ad5e:	4631      	mov	r1, r6
 800ad60:	4628      	mov	r0, r5
 800ad62:	47b8      	blx	r7
 800ad64:	3001      	adds	r0, #1
 800ad66:	f43f ae50 	beq.w	800aa0a <_printf_float+0xbe>
 800ad6a:	f108 0801 	add.w	r8, r8, #1
 800ad6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad70:	3b01      	subs	r3, #1
 800ad72:	4543      	cmp	r3, r8
 800ad74:	dcf1      	bgt.n	800ad5a <_printf_float+0x40e>
 800ad76:	464b      	mov	r3, r9
 800ad78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ad7c:	e6da      	b.n	800ab34 <_printf_float+0x1e8>
 800ad7e:	f04f 0800 	mov.w	r8, #0
 800ad82:	f104 0a1a 	add.w	sl, r4, #26
 800ad86:	e7f2      	b.n	800ad6e <_printf_float+0x422>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	4642      	mov	r2, r8
 800ad8c:	e7df      	b.n	800ad4e <_printf_float+0x402>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	464a      	mov	r2, r9
 800ad92:	4631      	mov	r1, r6
 800ad94:	4628      	mov	r0, r5
 800ad96:	47b8      	blx	r7
 800ad98:	3001      	adds	r0, #1
 800ad9a:	f43f ae36 	beq.w	800aa0a <_printf_float+0xbe>
 800ad9e:	f108 0801 	add.w	r8, r8, #1
 800ada2:	68e3      	ldr	r3, [r4, #12]
 800ada4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ada6:	1a5b      	subs	r3, r3, r1
 800ada8:	4543      	cmp	r3, r8
 800adaa:	dcf0      	bgt.n	800ad8e <_printf_float+0x442>
 800adac:	e6f8      	b.n	800aba0 <_printf_float+0x254>
 800adae:	f04f 0800 	mov.w	r8, #0
 800adb2:	f104 0919 	add.w	r9, r4, #25
 800adb6:	e7f4      	b.n	800ada2 <_printf_float+0x456>

0800adb8 <_printf_common>:
 800adb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adbc:	4616      	mov	r6, r2
 800adbe:	4699      	mov	r9, r3
 800adc0:	688a      	ldr	r2, [r1, #8]
 800adc2:	690b      	ldr	r3, [r1, #16]
 800adc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800adc8:	4293      	cmp	r3, r2
 800adca:	bfb8      	it	lt
 800adcc:	4613      	movlt	r3, r2
 800adce:	6033      	str	r3, [r6, #0]
 800add0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800add4:	4607      	mov	r7, r0
 800add6:	460c      	mov	r4, r1
 800add8:	b10a      	cbz	r2, 800adde <_printf_common+0x26>
 800adda:	3301      	adds	r3, #1
 800addc:	6033      	str	r3, [r6, #0]
 800adde:	6823      	ldr	r3, [r4, #0]
 800ade0:	0699      	lsls	r1, r3, #26
 800ade2:	bf42      	ittt	mi
 800ade4:	6833      	ldrmi	r3, [r6, #0]
 800ade6:	3302      	addmi	r3, #2
 800ade8:	6033      	strmi	r3, [r6, #0]
 800adea:	6825      	ldr	r5, [r4, #0]
 800adec:	f015 0506 	ands.w	r5, r5, #6
 800adf0:	d106      	bne.n	800ae00 <_printf_common+0x48>
 800adf2:	f104 0a19 	add.w	sl, r4, #25
 800adf6:	68e3      	ldr	r3, [r4, #12]
 800adf8:	6832      	ldr	r2, [r6, #0]
 800adfa:	1a9b      	subs	r3, r3, r2
 800adfc:	42ab      	cmp	r3, r5
 800adfe:	dc26      	bgt.n	800ae4e <_printf_common+0x96>
 800ae00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae04:	1e13      	subs	r3, r2, #0
 800ae06:	6822      	ldr	r2, [r4, #0]
 800ae08:	bf18      	it	ne
 800ae0a:	2301      	movne	r3, #1
 800ae0c:	0692      	lsls	r2, r2, #26
 800ae0e:	d42b      	bmi.n	800ae68 <_printf_common+0xb0>
 800ae10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae14:	4649      	mov	r1, r9
 800ae16:	4638      	mov	r0, r7
 800ae18:	47c0      	blx	r8
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	d01e      	beq.n	800ae5c <_printf_common+0xa4>
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	6922      	ldr	r2, [r4, #16]
 800ae22:	f003 0306 	and.w	r3, r3, #6
 800ae26:	2b04      	cmp	r3, #4
 800ae28:	bf02      	ittt	eq
 800ae2a:	68e5      	ldreq	r5, [r4, #12]
 800ae2c:	6833      	ldreq	r3, [r6, #0]
 800ae2e:	1aed      	subeq	r5, r5, r3
 800ae30:	68a3      	ldr	r3, [r4, #8]
 800ae32:	bf0c      	ite	eq
 800ae34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae38:	2500      	movne	r5, #0
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	bfc4      	itt	gt
 800ae3e:	1a9b      	subgt	r3, r3, r2
 800ae40:	18ed      	addgt	r5, r5, r3
 800ae42:	2600      	movs	r6, #0
 800ae44:	341a      	adds	r4, #26
 800ae46:	42b5      	cmp	r5, r6
 800ae48:	d11a      	bne.n	800ae80 <_printf_common+0xc8>
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	e008      	b.n	800ae60 <_printf_common+0xa8>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	4652      	mov	r2, sl
 800ae52:	4649      	mov	r1, r9
 800ae54:	4638      	mov	r0, r7
 800ae56:	47c0      	blx	r8
 800ae58:	3001      	adds	r0, #1
 800ae5a:	d103      	bne.n	800ae64 <_printf_common+0xac>
 800ae5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae64:	3501      	adds	r5, #1
 800ae66:	e7c6      	b.n	800adf6 <_printf_common+0x3e>
 800ae68:	18e1      	adds	r1, r4, r3
 800ae6a:	1c5a      	adds	r2, r3, #1
 800ae6c:	2030      	movs	r0, #48	; 0x30
 800ae6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae72:	4422      	add	r2, r4
 800ae74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae7c:	3302      	adds	r3, #2
 800ae7e:	e7c7      	b.n	800ae10 <_printf_common+0x58>
 800ae80:	2301      	movs	r3, #1
 800ae82:	4622      	mov	r2, r4
 800ae84:	4649      	mov	r1, r9
 800ae86:	4638      	mov	r0, r7
 800ae88:	47c0      	blx	r8
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	d0e6      	beq.n	800ae5c <_printf_common+0xa4>
 800ae8e:	3601      	adds	r6, #1
 800ae90:	e7d9      	b.n	800ae46 <_printf_common+0x8e>
	...

0800ae94 <_printf_i>:
 800ae94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae98:	7e0f      	ldrb	r7, [r1, #24]
 800ae9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae9c:	2f78      	cmp	r7, #120	; 0x78
 800ae9e:	4691      	mov	r9, r2
 800aea0:	4680      	mov	r8, r0
 800aea2:	460c      	mov	r4, r1
 800aea4:	469a      	mov	sl, r3
 800aea6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aeaa:	d807      	bhi.n	800aebc <_printf_i+0x28>
 800aeac:	2f62      	cmp	r7, #98	; 0x62
 800aeae:	d80a      	bhi.n	800aec6 <_printf_i+0x32>
 800aeb0:	2f00      	cmp	r7, #0
 800aeb2:	f000 80d4 	beq.w	800b05e <_printf_i+0x1ca>
 800aeb6:	2f58      	cmp	r7, #88	; 0x58
 800aeb8:	f000 80c0 	beq.w	800b03c <_printf_i+0x1a8>
 800aebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aec4:	e03a      	b.n	800af3c <_printf_i+0xa8>
 800aec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aeca:	2b15      	cmp	r3, #21
 800aecc:	d8f6      	bhi.n	800aebc <_printf_i+0x28>
 800aece:	a101      	add	r1, pc, #4	; (adr r1, 800aed4 <_printf_i+0x40>)
 800aed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aed4:	0800af2d 	.word	0x0800af2d
 800aed8:	0800af41 	.word	0x0800af41
 800aedc:	0800aebd 	.word	0x0800aebd
 800aee0:	0800aebd 	.word	0x0800aebd
 800aee4:	0800aebd 	.word	0x0800aebd
 800aee8:	0800aebd 	.word	0x0800aebd
 800aeec:	0800af41 	.word	0x0800af41
 800aef0:	0800aebd 	.word	0x0800aebd
 800aef4:	0800aebd 	.word	0x0800aebd
 800aef8:	0800aebd 	.word	0x0800aebd
 800aefc:	0800aebd 	.word	0x0800aebd
 800af00:	0800b045 	.word	0x0800b045
 800af04:	0800af6d 	.word	0x0800af6d
 800af08:	0800afff 	.word	0x0800afff
 800af0c:	0800aebd 	.word	0x0800aebd
 800af10:	0800aebd 	.word	0x0800aebd
 800af14:	0800b067 	.word	0x0800b067
 800af18:	0800aebd 	.word	0x0800aebd
 800af1c:	0800af6d 	.word	0x0800af6d
 800af20:	0800aebd 	.word	0x0800aebd
 800af24:	0800aebd 	.word	0x0800aebd
 800af28:	0800b007 	.word	0x0800b007
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	1d1a      	adds	r2, r3, #4
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	602a      	str	r2, [r5, #0]
 800af34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af3c:	2301      	movs	r3, #1
 800af3e:	e09f      	b.n	800b080 <_printf_i+0x1ec>
 800af40:	6820      	ldr	r0, [r4, #0]
 800af42:	682b      	ldr	r3, [r5, #0]
 800af44:	0607      	lsls	r7, r0, #24
 800af46:	f103 0104 	add.w	r1, r3, #4
 800af4a:	6029      	str	r1, [r5, #0]
 800af4c:	d501      	bpl.n	800af52 <_printf_i+0xbe>
 800af4e:	681e      	ldr	r6, [r3, #0]
 800af50:	e003      	b.n	800af5a <_printf_i+0xc6>
 800af52:	0646      	lsls	r6, r0, #25
 800af54:	d5fb      	bpl.n	800af4e <_printf_i+0xba>
 800af56:	f9b3 6000 	ldrsh.w	r6, [r3]
 800af5a:	2e00      	cmp	r6, #0
 800af5c:	da03      	bge.n	800af66 <_printf_i+0xd2>
 800af5e:	232d      	movs	r3, #45	; 0x2d
 800af60:	4276      	negs	r6, r6
 800af62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af66:	485a      	ldr	r0, [pc, #360]	; (800b0d0 <_printf_i+0x23c>)
 800af68:	230a      	movs	r3, #10
 800af6a:	e012      	b.n	800af92 <_printf_i+0xfe>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	6820      	ldr	r0, [r4, #0]
 800af70:	1d19      	adds	r1, r3, #4
 800af72:	6029      	str	r1, [r5, #0]
 800af74:	0605      	lsls	r5, r0, #24
 800af76:	d501      	bpl.n	800af7c <_printf_i+0xe8>
 800af78:	681e      	ldr	r6, [r3, #0]
 800af7a:	e002      	b.n	800af82 <_printf_i+0xee>
 800af7c:	0641      	lsls	r1, r0, #25
 800af7e:	d5fb      	bpl.n	800af78 <_printf_i+0xe4>
 800af80:	881e      	ldrh	r6, [r3, #0]
 800af82:	4853      	ldr	r0, [pc, #332]	; (800b0d0 <_printf_i+0x23c>)
 800af84:	2f6f      	cmp	r7, #111	; 0x6f
 800af86:	bf0c      	ite	eq
 800af88:	2308      	moveq	r3, #8
 800af8a:	230a      	movne	r3, #10
 800af8c:	2100      	movs	r1, #0
 800af8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af92:	6865      	ldr	r5, [r4, #4]
 800af94:	60a5      	str	r5, [r4, #8]
 800af96:	2d00      	cmp	r5, #0
 800af98:	bfa2      	ittt	ge
 800af9a:	6821      	ldrge	r1, [r4, #0]
 800af9c:	f021 0104 	bicge.w	r1, r1, #4
 800afa0:	6021      	strge	r1, [r4, #0]
 800afa2:	b90e      	cbnz	r6, 800afa8 <_printf_i+0x114>
 800afa4:	2d00      	cmp	r5, #0
 800afa6:	d04b      	beq.n	800b040 <_printf_i+0x1ac>
 800afa8:	4615      	mov	r5, r2
 800afaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800afae:	fb03 6711 	mls	r7, r3, r1, r6
 800afb2:	5dc7      	ldrb	r7, [r0, r7]
 800afb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800afb8:	4637      	mov	r7, r6
 800afba:	42bb      	cmp	r3, r7
 800afbc:	460e      	mov	r6, r1
 800afbe:	d9f4      	bls.n	800afaa <_printf_i+0x116>
 800afc0:	2b08      	cmp	r3, #8
 800afc2:	d10b      	bne.n	800afdc <_printf_i+0x148>
 800afc4:	6823      	ldr	r3, [r4, #0]
 800afc6:	07de      	lsls	r6, r3, #31
 800afc8:	d508      	bpl.n	800afdc <_printf_i+0x148>
 800afca:	6923      	ldr	r3, [r4, #16]
 800afcc:	6861      	ldr	r1, [r4, #4]
 800afce:	4299      	cmp	r1, r3
 800afd0:	bfde      	ittt	le
 800afd2:	2330      	movle	r3, #48	; 0x30
 800afd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800afd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800afdc:	1b52      	subs	r2, r2, r5
 800afde:	6122      	str	r2, [r4, #16]
 800afe0:	f8cd a000 	str.w	sl, [sp]
 800afe4:	464b      	mov	r3, r9
 800afe6:	aa03      	add	r2, sp, #12
 800afe8:	4621      	mov	r1, r4
 800afea:	4640      	mov	r0, r8
 800afec:	f7ff fee4 	bl	800adb8 <_printf_common>
 800aff0:	3001      	adds	r0, #1
 800aff2:	d14a      	bne.n	800b08a <_printf_i+0x1f6>
 800aff4:	f04f 30ff 	mov.w	r0, #4294967295
 800aff8:	b004      	add	sp, #16
 800affa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800affe:	6823      	ldr	r3, [r4, #0]
 800b000:	f043 0320 	orr.w	r3, r3, #32
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	4833      	ldr	r0, [pc, #204]	; (800b0d4 <_printf_i+0x240>)
 800b008:	2778      	movs	r7, #120	; 0x78
 800b00a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	6829      	ldr	r1, [r5, #0]
 800b012:	061f      	lsls	r7, r3, #24
 800b014:	f851 6b04 	ldr.w	r6, [r1], #4
 800b018:	d402      	bmi.n	800b020 <_printf_i+0x18c>
 800b01a:	065f      	lsls	r7, r3, #25
 800b01c:	bf48      	it	mi
 800b01e:	b2b6      	uxthmi	r6, r6
 800b020:	07df      	lsls	r7, r3, #31
 800b022:	bf48      	it	mi
 800b024:	f043 0320 	orrmi.w	r3, r3, #32
 800b028:	6029      	str	r1, [r5, #0]
 800b02a:	bf48      	it	mi
 800b02c:	6023      	strmi	r3, [r4, #0]
 800b02e:	b91e      	cbnz	r6, 800b038 <_printf_i+0x1a4>
 800b030:	6823      	ldr	r3, [r4, #0]
 800b032:	f023 0320 	bic.w	r3, r3, #32
 800b036:	6023      	str	r3, [r4, #0]
 800b038:	2310      	movs	r3, #16
 800b03a:	e7a7      	b.n	800af8c <_printf_i+0xf8>
 800b03c:	4824      	ldr	r0, [pc, #144]	; (800b0d0 <_printf_i+0x23c>)
 800b03e:	e7e4      	b.n	800b00a <_printf_i+0x176>
 800b040:	4615      	mov	r5, r2
 800b042:	e7bd      	b.n	800afc0 <_printf_i+0x12c>
 800b044:	682b      	ldr	r3, [r5, #0]
 800b046:	6826      	ldr	r6, [r4, #0]
 800b048:	6961      	ldr	r1, [r4, #20]
 800b04a:	1d18      	adds	r0, r3, #4
 800b04c:	6028      	str	r0, [r5, #0]
 800b04e:	0635      	lsls	r5, r6, #24
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	d501      	bpl.n	800b058 <_printf_i+0x1c4>
 800b054:	6019      	str	r1, [r3, #0]
 800b056:	e002      	b.n	800b05e <_printf_i+0x1ca>
 800b058:	0670      	lsls	r0, r6, #25
 800b05a:	d5fb      	bpl.n	800b054 <_printf_i+0x1c0>
 800b05c:	8019      	strh	r1, [r3, #0]
 800b05e:	2300      	movs	r3, #0
 800b060:	6123      	str	r3, [r4, #16]
 800b062:	4615      	mov	r5, r2
 800b064:	e7bc      	b.n	800afe0 <_printf_i+0x14c>
 800b066:	682b      	ldr	r3, [r5, #0]
 800b068:	1d1a      	adds	r2, r3, #4
 800b06a:	602a      	str	r2, [r5, #0]
 800b06c:	681d      	ldr	r5, [r3, #0]
 800b06e:	6862      	ldr	r2, [r4, #4]
 800b070:	2100      	movs	r1, #0
 800b072:	4628      	mov	r0, r5
 800b074:	f7f5 f8ac 	bl	80001d0 <memchr>
 800b078:	b108      	cbz	r0, 800b07e <_printf_i+0x1ea>
 800b07a:	1b40      	subs	r0, r0, r5
 800b07c:	6060      	str	r0, [r4, #4]
 800b07e:	6863      	ldr	r3, [r4, #4]
 800b080:	6123      	str	r3, [r4, #16]
 800b082:	2300      	movs	r3, #0
 800b084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b088:	e7aa      	b.n	800afe0 <_printf_i+0x14c>
 800b08a:	6923      	ldr	r3, [r4, #16]
 800b08c:	462a      	mov	r2, r5
 800b08e:	4649      	mov	r1, r9
 800b090:	4640      	mov	r0, r8
 800b092:	47d0      	blx	sl
 800b094:	3001      	adds	r0, #1
 800b096:	d0ad      	beq.n	800aff4 <_printf_i+0x160>
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	079b      	lsls	r3, r3, #30
 800b09c:	d413      	bmi.n	800b0c6 <_printf_i+0x232>
 800b09e:	68e0      	ldr	r0, [r4, #12]
 800b0a0:	9b03      	ldr	r3, [sp, #12]
 800b0a2:	4298      	cmp	r0, r3
 800b0a4:	bfb8      	it	lt
 800b0a6:	4618      	movlt	r0, r3
 800b0a8:	e7a6      	b.n	800aff8 <_printf_i+0x164>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	4632      	mov	r2, r6
 800b0ae:	4649      	mov	r1, r9
 800b0b0:	4640      	mov	r0, r8
 800b0b2:	47d0      	blx	sl
 800b0b4:	3001      	adds	r0, #1
 800b0b6:	d09d      	beq.n	800aff4 <_printf_i+0x160>
 800b0b8:	3501      	adds	r5, #1
 800b0ba:	68e3      	ldr	r3, [r4, #12]
 800b0bc:	9903      	ldr	r1, [sp, #12]
 800b0be:	1a5b      	subs	r3, r3, r1
 800b0c0:	42ab      	cmp	r3, r5
 800b0c2:	dcf2      	bgt.n	800b0aa <_printf_i+0x216>
 800b0c4:	e7eb      	b.n	800b09e <_printf_i+0x20a>
 800b0c6:	2500      	movs	r5, #0
 800b0c8:	f104 0619 	add.w	r6, r4, #25
 800b0cc:	e7f5      	b.n	800b0ba <_printf_i+0x226>
 800b0ce:	bf00      	nop
 800b0d0:	0800d77f 	.word	0x0800d77f
 800b0d4:	0800d790 	.word	0x0800d790

0800b0d8 <std>:
 800b0d8:	2300      	movs	r3, #0
 800b0da:	b510      	push	{r4, lr}
 800b0dc:	4604      	mov	r4, r0
 800b0de:	e9c0 3300 	strd	r3, r3, [r0]
 800b0e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0e6:	6083      	str	r3, [r0, #8]
 800b0e8:	8181      	strh	r1, [r0, #12]
 800b0ea:	6643      	str	r3, [r0, #100]	; 0x64
 800b0ec:	81c2      	strh	r2, [r0, #14]
 800b0ee:	6183      	str	r3, [r0, #24]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	2208      	movs	r2, #8
 800b0f4:	305c      	adds	r0, #92	; 0x5c
 800b0f6:	f000 f9e5 	bl	800b4c4 <memset>
 800b0fa:	4b05      	ldr	r3, [pc, #20]	; (800b110 <std+0x38>)
 800b0fc:	6263      	str	r3, [r4, #36]	; 0x24
 800b0fe:	4b05      	ldr	r3, [pc, #20]	; (800b114 <std+0x3c>)
 800b100:	62a3      	str	r3, [r4, #40]	; 0x28
 800b102:	4b05      	ldr	r3, [pc, #20]	; (800b118 <std+0x40>)
 800b104:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b106:	4b05      	ldr	r3, [pc, #20]	; (800b11c <std+0x44>)
 800b108:	6224      	str	r4, [r4, #32]
 800b10a:	6323      	str	r3, [r4, #48]	; 0x30
 800b10c:	bd10      	pop	{r4, pc}
 800b10e:	bf00      	nop
 800b110:	0800b315 	.word	0x0800b315
 800b114:	0800b337 	.word	0x0800b337
 800b118:	0800b36f 	.word	0x0800b36f
 800b11c:	0800b393 	.word	0x0800b393

0800b120 <stdio_exit_handler>:
 800b120:	4a02      	ldr	r2, [pc, #8]	; (800b12c <stdio_exit_handler+0xc>)
 800b122:	4903      	ldr	r1, [pc, #12]	; (800b130 <stdio_exit_handler+0x10>)
 800b124:	4803      	ldr	r0, [pc, #12]	; (800b134 <stdio_exit_handler+0x14>)
 800b126:	f000 b869 	b.w	800b1fc <_fwalk_sglue>
 800b12a:	bf00      	nop
 800b12c:	20000010 	.word	0x20000010
 800b130:	0800cf41 	.word	0x0800cf41
 800b134:	2000001c 	.word	0x2000001c

0800b138 <cleanup_stdio>:
 800b138:	6841      	ldr	r1, [r0, #4]
 800b13a:	4b0c      	ldr	r3, [pc, #48]	; (800b16c <cleanup_stdio+0x34>)
 800b13c:	4299      	cmp	r1, r3
 800b13e:	b510      	push	{r4, lr}
 800b140:	4604      	mov	r4, r0
 800b142:	d001      	beq.n	800b148 <cleanup_stdio+0x10>
 800b144:	f001 fefc 	bl	800cf40 <_fflush_r>
 800b148:	68a1      	ldr	r1, [r4, #8]
 800b14a:	4b09      	ldr	r3, [pc, #36]	; (800b170 <cleanup_stdio+0x38>)
 800b14c:	4299      	cmp	r1, r3
 800b14e:	d002      	beq.n	800b156 <cleanup_stdio+0x1e>
 800b150:	4620      	mov	r0, r4
 800b152:	f001 fef5 	bl	800cf40 <_fflush_r>
 800b156:	68e1      	ldr	r1, [r4, #12]
 800b158:	4b06      	ldr	r3, [pc, #24]	; (800b174 <cleanup_stdio+0x3c>)
 800b15a:	4299      	cmp	r1, r3
 800b15c:	d004      	beq.n	800b168 <cleanup_stdio+0x30>
 800b15e:	4620      	mov	r0, r4
 800b160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b164:	f001 beec 	b.w	800cf40 <_fflush_r>
 800b168:	bd10      	pop	{r4, pc}
 800b16a:	bf00      	nop
 800b16c:	20000878 	.word	0x20000878
 800b170:	200008e0 	.word	0x200008e0
 800b174:	20000948 	.word	0x20000948

0800b178 <global_stdio_init.part.0>:
 800b178:	b510      	push	{r4, lr}
 800b17a:	4b0b      	ldr	r3, [pc, #44]	; (800b1a8 <global_stdio_init.part.0+0x30>)
 800b17c:	4c0b      	ldr	r4, [pc, #44]	; (800b1ac <global_stdio_init.part.0+0x34>)
 800b17e:	4a0c      	ldr	r2, [pc, #48]	; (800b1b0 <global_stdio_init.part.0+0x38>)
 800b180:	601a      	str	r2, [r3, #0]
 800b182:	4620      	mov	r0, r4
 800b184:	2200      	movs	r2, #0
 800b186:	2104      	movs	r1, #4
 800b188:	f7ff ffa6 	bl	800b0d8 <std>
 800b18c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b190:	2201      	movs	r2, #1
 800b192:	2109      	movs	r1, #9
 800b194:	f7ff ffa0 	bl	800b0d8 <std>
 800b198:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b19c:	2202      	movs	r2, #2
 800b19e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1a2:	2112      	movs	r1, #18
 800b1a4:	f7ff bf98 	b.w	800b0d8 <std>
 800b1a8:	200009b0 	.word	0x200009b0
 800b1ac:	20000878 	.word	0x20000878
 800b1b0:	0800b121 	.word	0x0800b121

0800b1b4 <__sfp_lock_acquire>:
 800b1b4:	4801      	ldr	r0, [pc, #4]	; (800b1bc <__sfp_lock_acquire+0x8>)
 800b1b6:	f000 ba01 	b.w	800b5bc <__retarget_lock_acquire_recursive>
 800b1ba:	bf00      	nop
 800b1bc:	200009b9 	.word	0x200009b9

0800b1c0 <__sfp_lock_release>:
 800b1c0:	4801      	ldr	r0, [pc, #4]	; (800b1c8 <__sfp_lock_release+0x8>)
 800b1c2:	f000 b9fc 	b.w	800b5be <__retarget_lock_release_recursive>
 800b1c6:	bf00      	nop
 800b1c8:	200009b9 	.word	0x200009b9

0800b1cc <__sinit>:
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	f7ff fff0 	bl	800b1b4 <__sfp_lock_acquire>
 800b1d4:	6a23      	ldr	r3, [r4, #32]
 800b1d6:	b11b      	cbz	r3, 800b1e0 <__sinit+0x14>
 800b1d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1dc:	f7ff bff0 	b.w	800b1c0 <__sfp_lock_release>
 800b1e0:	4b04      	ldr	r3, [pc, #16]	; (800b1f4 <__sinit+0x28>)
 800b1e2:	6223      	str	r3, [r4, #32]
 800b1e4:	4b04      	ldr	r3, [pc, #16]	; (800b1f8 <__sinit+0x2c>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d1f5      	bne.n	800b1d8 <__sinit+0xc>
 800b1ec:	f7ff ffc4 	bl	800b178 <global_stdio_init.part.0>
 800b1f0:	e7f2      	b.n	800b1d8 <__sinit+0xc>
 800b1f2:	bf00      	nop
 800b1f4:	0800b139 	.word	0x0800b139
 800b1f8:	200009b0 	.word	0x200009b0

0800b1fc <_fwalk_sglue>:
 800b1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b200:	4607      	mov	r7, r0
 800b202:	4688      	mov	r8, r1
 800b204:	4614      	mov	r4, r2
 800b206:	2600      	movs	r6, #0
 800b208:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b20c:	f1b9 0901 	subs.w	r9, r9, #1
 800b210:	d505      	bpl.n	800b21e <_fwalk_sglue+0x22>
 800b212:	6824      	ldr	r4, [r4, #0]
 800b214:	2c00      	cmp	r4, #0
 800b216:	d1f7      	bne.n	800b208 <_fwalk_sglue+0xc>
 800b218:	4630      	mov	r0, r6
 800b21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b21e:	89ab      	ldrh	r3, [r5, #12]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d907      	bls.n	800b234 <_fwalk_sglue+0x38>
 800b224:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b228:	3301      	adds	r3, #1
 800b22a:	d003      	beq.n	800b234 <_fwalk_sglue+0x38>
 800b22c:	4629      	mov	r1, r5
 800b22e:	4638      	mov	r0, r7
 800b230:	47c0      	blx	r8
 800b232:	4306      	orrs	r6, r0
 800b234:	3568      	adds	r5, #104	; 0x68
 800b236:	e7e9      	b.n	800b20c <_fwalk_sglue+0x10>

0800b238 <iprintf>:
 800b238:	b40f      	push	{r0, r1, r2, r3}
 800b23a:	b507      	push	{r0, r1, r2, lr}
 800b23c:	4906      	ldr	r1, [pc, #24]	; (800b258 <iprintf+0x20>)
 800b23e:	ab04      	add	r3, sp, #16
 800b240:	6808      	ldr	r0, [r1, #0]
 800b242:	f853 2b04 	ldr.w	r2, [r3], #4
 800b246:	6881      	ldr	r1, [r0, #8]
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	f001 fcd9 	bl	800cc00 <_vfiprintf_r>
 800b24e:	b003      	add	sp, #12
 800b250:	f85d eb04 	ldr.w	lr, [sp], #4
 800b254:	b004      	add	sp, #16
 800b256:	4770      	bx	lr
 800b258:	20000068 	.word	0x20000068

0800b25c <_puts_r>:
 800b25c:	6a03      	ldr	r3, [r0, #32]
 800b25e:	b570      	push	{r4, r5, r6, lr}
 800b260:	6884      	ldr	r4, [r0, #8]
 800b262:	4605      	mov	r5, r0
 800b264:	460e      	mov	r6, r1
 800b266:	b90b      	cbnz	r3, 800b26c <_puts_r+0x10>
 800b268:	f7ff ffb0 	bl	800b1cc <__sinit>
 800b26c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b26e:	07db      	lsls	r3, r3, #31
 800b270:	d405      	bmi.n	800b27e <_puts_r+0x22>
 800b272:	89a3      	ldrh	r3, [r4, #12]
 800b274:	0598      	lsls	r0, r3, #22
 800b276:	d402      	bmi.n	800b27e <_puts_r+0x22>
 800b278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b27a:	f000 f99f 	bl	800b5bc <__retarget_lock_acquire_recursive>
 800b27e:	89a3      	ldrh	r3, [r4, #12]
 800b280:	0719      	lsls	r1, r3, #28
 800b282:	d513      	bpl.n	800b2ac <_puts_r+0x50>
 800b284:	6923      	ldr	r3, [r4, #16]
 800b286:	b18b      	cbz	r3, 800b2ac <_puts_r+0x50>
 800b288:	3e01      	subs	r6, #1
 800b28a:	68a3      	ldr	r3, [r4, #8]
 800b28c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b290:	3b01      	subs	r3, #1
 800b292:	60a3      	str	r3, [r4, #8]
 800b294:	b9e9      	cbnz	r1, 800b2d2 <_puts_r+0x76>
 800b296:	2b00      	cmp	r3, #0
 800b298:	da2e      	bge.n	800b2f8 <_puts_r+0x9c>
 800b29a:	4622      	mov	r2, r4
 800b29c:	210a      	movs	r1, #10
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f000 f87b 	bl	800b39a <__swbuf_r>
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	d007      	beq.n	800b2b8 <_puts_r+0x5c>
 800b2a8:	250a      	movs	r5, #10
 800b2aa:	e007      	b.n	800b2bc <_puts_r+0x60>
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	f000 f8b0 	bl	800b414 <__swsetup_r>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d0e7      	beq.n	800b288 <_puts_r+0x2c>
 800b2b8:	f04f 35ff 	mov.w	r5, #4294967295
 800b2bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2be:	07da      	lsls	r2, r3, #31
 800b2c0:	d405      	bmi.n	800b2ce <_puts_r+0x72>
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	059b      	lsls	r3, r3, #22
 800b2c6:	d402      	bmi.n	800b2ce <_puts_r+0x72>
 800b2c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2ca:	f000 f978 	bl	800b5be <__retarget_lock_release_recursive>
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	bd70      	pop	{r4, r5, r6, pc}
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	da04      	bge.n	800b2e0 <_puts_r+0x84>
 800b2d6:	69a2      	ldr	r2, [r4, #24]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	dc06      	bgt.n	800b2ea <_puts_r+0x8e>
 800b2dc:	290a      	cmp	r1, #10
 800b2de:	d004      	beq.n	800b2ea <_puts_r+0x8e>
 800b2e0:	6823      	ldr	r3, [r4, #0]
 800b2e2:	1c5a      	adds	r2, r3, #1
 800b2e4:	6022      	str	r2, [r4, #0]
 800b2e6:	7019      	strb	r1, [r3, #0]
 800b2e8:	e7cf      	b.n	800b28a <_puts_r+0x2e>
 800b2ea:	4622      	mov	r2, r4
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	f000 f854 	bl	800b39a <__swbuf_r>
 800b2f2:	3001      	adds	r0, #1
 800b2f4:	d1c9      	bne.n	800b28a <_puts_r+0x2e>
 800b2f6:	e7df      	b.n	800b2b8 <_puts_r+0x5c>
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	250a      	movs	r5, #10
 800b2fc:	1c5a      	adds	r2, r3, #1
 800b2fe:	6022      	str	r2, [r4, #0]
 800b300:	701d      	strb	r5, [r3, #0]
 800b302:	e7db      	b.n	800b2bc <_puts_r+0x60>

0800b304 <puts>:
 800b304:	4b02      	ldr	r3, [pc, #8]	; (800b310 <puts+0xc>)
 800b306:	4601      	mov	r1, r0
 800b308:	6818      	ldr	r0, [r3, #0]
 800b30a:	f7ff bfa7 	b.w	800b25c <_puts_r>
 800b30e:	bf00      	nop
 800b310:	20000068 	.word	0x20000068

0800b314 <__sread>:
 800b314:	b510      	push	{r4, lr}
 800b316:	460c      	mov	r4, r1
 800b318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b31c:	f000 f900 	bl	800b520 <_read_r>
 800b320:	2800      	cmp	r0, #0
 800b322:	bfab      	itete	ge
 800b324:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b326:	89a3      	ldrhlt	r3, [r4, #12]
 800b328:	181b      	addge	r3, r3, r0
 800b32a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b32e:	bfac      	ite	ge
 800b330:	6563      	strge	r3, [r4, #84]	; 0x54
 800b332:	81a3      	strhlt	r3, [r4, #12]
 800b334:	bd10      	pop	{r4, pc}

0800b336 <__swrite>:
 800b336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b33a:	461f      	mov	r7, r3
 800b33c:	898b      	ldrh	r3, [r1, #12]
 800b33e:	05db      	lsls	r3, r3, #23
 800b340:	4605      	mov	r5, r0
 800b342:	460c      	mov	r4, r1
 800b344:	4616      	mov	r6, r2
 800b346:	d505      	bpl.n	800b354 <__swrite+0x1e>
 800b348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34c:	2302      	movs	r3, #2
 800b34e:	2200      	movs	r2, #0
 800b350:	f000 f8d4 	bl	800b4fc <_lseek_r>
 800b354:	89a3      	ldrh	r3, [r4, #12]
 800b356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b35a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b35e:	81a3      	strh	r3, [r4, #12]
 800b360:	4632      	mov	r2, r6
 800b362:	463b      	mov	r3, r7
 800b364:	4628      	mov	r0, r5
 800b366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b36a:	f000 b8eb 	b.w	800b544 <_write_r>

0800b36e <__sseek>:
 800b36e:	b510      	push	{r4, lr}
 800b370:	460c      	mov	r4, r1
 800b372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b376:	f000 f8c1 	bl	800b4fc <_lseek_r>
 800b37a:	1c43      	adds	r3, r0, #1
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	bf15      	itete	ne
 800b380:	6560      	strne	r0, [r4, #84]	; 0x54
 800b382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b38a:	81a3      	strheq	r3, [r4, #12]
 800b38c:	bf18      	it	ne
 800b38e:	81a3      	strhne	r3, [r4, #12]
 800b390:	bd10      	pop	{r4, pc}

0800b392 <__sclose>:
 800b392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b396:	f000 b8a1 	b.w	800b4dc <_close_r>

0800b39a <__swbuf_r>:
 800b39a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39c:	460e      	mov	r6, r1
 800b39e:	4614      	mov	r4, r2
 800b3a0:	4605      	mov	r5, r0
 800b3a2:	b118      	cbz	r0, 800b3ac <__swbuf_r+0x12>
 800b3a4:	6a03      	ldr	r3, [r0, #32]
 800b3a6:	b90b      	cbnz	r3, 800b3ac <__swbuf_r+0x12>
 800b3a8:	f7ff ff10 	bl	800b1cc <__sinit>
 800b3ac:	69a3      	ldr	r3, [r4, #24]
 800b3ae:	60a3      	str	r3, [r4, #8]
 800b3b0:	89a3      	ldrh	r3, [r4, #12]
 800b3b2:	071a      	lsls	r2, r3, #28
 800b3b4:	d525      	bpl.n	800b402 <__swbuf_r+0x68>
 800b3b6:	6923      	ldr	r3, [r4, #16]
 800b3b8:	b31b      	cbz	r3, 800b402 <__swbuf_r+0x68>
 800b3ba:	6823      	ldr	r3, [r4, #0]
 800b3bc:	6922      	ldr	r2, [r4, #16]
 800b3be:	1a98      	subs	r0, r3, r2
 800b3c0:	6963      	ldr	r3, [r4, #20]
 800b3c2:	b2f6      	uxtb	r6, r6
 800b3c4:	4283      	cmp	r3, r0
 800b3c6:	4637      	mov	r7, r6
 800b3c8:	dc04      	bgt.n	800b3d4 <__swbuf_r+0x3a>
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	f001 fdb7 	bl	800cf40 <_fflush_r>
 800b3d2:	b9e0      	cbnz	r0, 800b40e <__swbuf_r+0x74>
 800b3d4:	68a3      	ldr	r3, [r4, #8]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	60a3      	str	r3, [r4, #8]
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	1c5a      	adds	r2, r3, #1
 800b3de:	6022      	str	r2, [r4, #0]
 800b3e0:	701e      	strb	r6, [r3, #0]
 800b3e2:	6962      	ldr	r2, [r4, #20]
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d004      	beq.n	800b3f4 <__swbuf_r+0x5a>
 800b3ea:	89a3      	ldrh	r3, [r4, #12]
 800b3ec:	07db      	lsls	r3, r3, #31
 800b3ee:	d506      	bpl.n	800b3fe <__swbuf_r+0x64>
 800b3f0:	2e0a      	cmp	r6, #10
 800b3f2:	d104      	bne.n	800b3fe <__swbuf_r+0x64>
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f001 fda2 	bl	800cf40 <_fflush_r>
 800b3fc:	b938      	cbnz	r0, 800b40e <__swbuf_r+0x74>
 800b3fe:	4638      	mov	r0, r7
 800b400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b402:	4621      	mov	r1, r4
 800b404:	4628      	mov	r0, r5
 800b406:	f000 f805 	bl	800b414 <__swsetup_r>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d0d5      	beq.n	800b3ba <__swbuf_r+0x20>
 800b40e:	f04f 37ff 	mov.w	r7, #4294967295
 800b412:	e7f4      	b.n	800b3fe <__swbuf_r+0x64>

0800b414 <__swsetup_r>:
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	4b2a      	ldr	r3, [pc, #168]	; (800b4c0 <__swsetup_r+0xac>)
 800b418:	4605      	mov	r5, r0
 800b41a:	6818      	ldr	r0, [r3, #0]
 800b41c:	460c      	mov	r4, r1
 800b41e:	b118      	cbz	r0, 800b428 <__swsetup_r+0x14>
 800b420:	6a03      	ldr	r3, [r0, #32]
 800b422:	b90b      	cbnz	r3, 800b428 <__swsetup_r+0x14>
 800b424:	f7ff fed2 	bl	800b1cc <__sinit>
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b42e:	0718      	lsls	r0, r3, #28
 800b430:	d422      	bmi.n	800b478 <__swsetup_r+0x64>
 800b432:	06d9      	lsls	r1, r3, #27
 800b434:	d407      	bmi.n	800b446 <__swsetup_r+0x32>
 800b436:	2309      	movs	r3, #9
 800b438:	602b      	str	r3, [r5, #0]
 800b43a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b43e:	81a3      	strh	r3, [r4, #12]
 800b440:	f04f 30ff 	mov.w	r0, #4294967295
 800b444:	e034      	b.n	800b4b0 <__swsetup_r+0x9c>
 800b446:	0758      	lsls	r0, r3, #29
 800b448:	d512      	bpl.n	800b470 <__swsetup_r+0x5c>
 800b44a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b44c:	b141      	cbz	r1, 800b460 <__swsetup_r+0x4c>
 800b44e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b452:	4299      	cmp	r1, r3
 800b454:	d002      	beq.n	800b45c <__swsetup_r+0x48>
 800b456:	4628      	mov	r0, r5
 800b458:	f000 ff2c 	bl	800c2b4 <_free_r>
 800b45c:	2300      	movs	r3, #0
 800b45e:	6363      	str	r3, [r4, #52]	; 0x34
 800b460:	89a3      	ldrh	r3, [r4, #12]
 800b462:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b466:	81a3      	strh	r3, [r4, #12]
 800b468:	2300      	movs	r3, #0
 800b46a:	6063      	str	r3, [r4, #4]
 800b46c:	6923      	ldr	r3, [r4, #16]
 800b46e:	6023      	str	r3, [r4, #0]
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	f043 0308 	orr.w	r3, r3, #8
 800b476:	81a3      	strh	r3, [r4, #12]
 800b478:	6923      	ldr	r3, [r4, #16]
 800b47a:	b94b      	cbnz	r3, 800b490 <__swsetup_r+0x7c>
 800b47c:	89a3      	ldrh	r3, [r4, #12]
 800b47e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b486:	d003      	beq.n	800b490 <__swsetup_r+0x7c>
 800b488:	4621      	mov	r1, r4
 800b48a:	4628      	mov	r0, r5
 800b48c:	f001 fda6 	bl	800cfdc <__smakebuf_r>
 800b490:	89a0      	ldrh	r0, [r4, #12]
 800b492:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b496:	f010 0301 	ands.w	r3, r0, #1
 800b49a:	d00a      	beq.n	800b4b2 <__swsetup_r+0x9e>
 800b49c:	2300      	movs	r3, #0
 800b49e:	60a3      	str	r3, [r4, #8]
 800b4a0:	6963      	ldr	r3, [r4, #20]
 800b4a2:	425b      	negs	r3, r3
 800b4a4:	61a3      	str	r3, [r4, #24]
 800b4a6:	6923      	ldr	r3, [r4, #16]
 800b4a8:	b943      	cbnz	r3, 800b4bc <__swsetup_r+0xa8>
 800b4aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4ae:	d1c4      	bne.n	800b43a <__swsetup_r+0x26>
 800b4b0:	bd38      	pop	{r3, r4, r5, pc}
 800b4b2:	0781      	lsls	r1, r0, #30
 800b4b4:	bf58      	it	pl
 800b4b6:	6963      	ldrpl	r3, [r4, #20]
 800b4b8:	60a3      	str	r3, [r4, #8]
 800b4ba:	e7f4      	b.n	800b4a6 <__swsetup_r+0x92>
 800b4bc:	2000      	movs	r0, #0
 800b4be:	e7f7      	b.n	800b4b0 <__swsetup_r+0x9c>
 800b4c0:	20000068 	.word	0x20000068

0800b4c4 <memset>:
 800b4c4:	4402      	add	r2, r0
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d100      	bne.n	800b4ce <memset+0xa>
 800b4cc:	4770      	bx	lr
 800b4ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b4d2:	e7f9      	b.n	800b4c8 <memset+0x4>

0800b4d4 <_localeconv_r>:
 800b4d4:	4800      	ldr	r0, [pc, #0]	; (800b4d8 <_localeconv_r+0x4>)
 800b4d6:	4770      	bx	lr
 800b4d8:	2000015c 	.word	0x2000015c

0800b4dc <_close_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	4d06      	ldr	r5, [pc, #24]	; (800b4f8 <_close_r+0x1c>)
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	4608      	mov	r0, r1
 800b4e6:	602b      	str	r3, [r5, #0]
 800b4e8:	f7f7 fe17 	bl	800311a <_close>
 800b4ec:	1c43      	adds	r3, r0, #1
 800b4ee:	d102      	bne.n	800b4f6 <_close_r+0x1a>
 800b4f0:	682b      	ldr	r3, [r5, #0]
 800b4f2:	b103      	cbz	r3, 800b4f6 <_close_r+0x1a>
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	bd38      	pop	{r3, r4, r5, pc}
 800b4f8:	200009b4 	.word	0x200009b4

0800b4fc <_lseek_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	4d07      	ldr	r5, [pc, #28]	; (800b51c <_lseek_r+0x20>)
 800b500:	4604      	mov	r4, r0
 800b502:	4608      	mov	r0, r1
 800b504:	4611      	mov	r1, r2
 800b506:	2200      	movs	r2, #0
 800b508:	602a      	str	r2, [r5, #0]
 800b50a:	461a      	mov	r2, r3
 800b50c:	f7f7 fe2c 	bl	8003168 <_lseek>
 800b510:	1c43      	adds	r3, r0, #1
 800b512:	d102      	bne.n	800b51a <_lseek_r+0x1e>
 800b514:	682b      	ldr	r3, [r5, #0]
 800b516:	b103      	cbz	r3, 800b51a <_lseek_r+0x1e>
 800b518:	6023      	str	r3, [r4, #0]
 800b51a:	bd38      	pop	{r3, r4, r5, pc}
 800b51c:	200009b4 	.word	0x200009b4

0800b520 <_read_r>:
 800b520:	b538      	push	{r3, r4, r5, lr}
 800b522:	4d07      	ldr	r5, [pc, #28]	; (800b540 <_read_r+0x20>)
 800b524:	4604      	mov	r4, r0
 800b526:	4608      	mov	r0, r1
 800b528:	4611      	mov	r1, r2
 800b52a:	2200      	movs	r2, #0
 800b52c:	602a      	str	r2, [r5, #0]
 800b52e:	461a      	mov	r2, r3
 800b530:	f7f7 fdd6 	bl	80030e0 <_read>
 800b534:	1c43      	adds	r3, r0, #1
 800b536:	d102      	bne.n	800b53e <_read_r+0x1e>
 800b538:	682b      	ldr	r3, [r5, #0]
 800b53a:	b103      	cbz	r3, 800b53e <_read_r+0x1e>
 800b53c:	6023      	str	r3, [r4, #0]
 800b53e:	bd38      	pop	{r3, r4, r5, pc}
 800b540:	200009b4 	.word	0x200009b4

0800b544 <_write_r>:
 800b544:	b538      	push	{r3, r4, r5, lr}
 800b546:	4d07      	ldr	r5, [pc, #28]	; (800b564 <_write_r+0x20>)
 800b548:	4604      	mov	r4, r0
 800b54a:	4608      	mov	r0, r1
 800b54c:	4611      	mov	r1, r2
 800b54e:	2200      	movs	r2, #0
 800b550:	602a      	str	r2, [r5, #0]
 800b552:	461a      	mov	r2, r3
 800b554:	f7f6 f80a 	bl	800156c <_write>
 800b558:	1c43      	adds	r3, r0, #1
 800b55a:	d102      	bne.n	800b562 <_write_r+0x1e>
 800b55c:	682b      	ldr	r3, [r5, #0]
 800b55e:	b103      	cbz	r3, 800b562 <_write_r+0x1e>
 800b560:	6023      	str	r3, [r4, #0]
 800b562:	bd38      	pop	{r3, r4, r5, pc}
 800b564:	200009b4 	.word	0x200009b4

0800b568 <__errno>:
 800b568:	4b01      	ldr	r3, [pc, #4]	; (800b570 <__errno+0x8>)
 800b56a:	6818      	ldr	r0, [r3, #0]
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	20000068 	.word	0x20000068

0800b574 <__libc_init_array>:
 800b574:	b570      	push	{r4, r5, r6, lr}
 800b576:	4d0d      	ldr	r5, [pc, #52]	; (800b5ac <__libc_init_array+0x38>)
 800b578:	4c0d      	ldr	r4, [pc, #52]	; (800b5b0 <__libc_init_array+0x3c>)
 800b57a:	1b64      	subs	r4, r4, r5
 800b57c:	10a4      	asrs	r4, r4, #2
 800b57e:	2600      	movs	r6, #0
 800b580:	42a6      	cmp	r6, r4
 800b582:	d109      	bne.n	800b598 <__libc_init_array+0x24>
 800b584:	4d0b      	ldr	r5, [pc, #44]	; (800b5b4 <__libc_init_array+0x40>)
 800b586:	4c0c      	ldr	r4, [pc, #48]	; (800b5b8 <__libc_init_array+0x44>)
 800b588:	f001 fe56 	bl	800d238 <_init>
 800b58c:	1b64      	subs	r4, r4, r5
 800b58e:	10a4      	asrs	r4, r4, #2
 800b590:	2600      	movs	r6, #0
 800b592:	42a6      	cmp	r6, r4
 800b594:	d105      	bne.n	800b5a2 <__libc_init_array+0x2e>
 800b596:	bd70      	pop	{r4, r5, r6, pc}
 800b598:	f855 3b04 	ldr.w	r3, [r5], #4
 800b59c:	4798      	blx	r3
 800b59e:	3601      	adds	r6, #1
 800b5a0:	e7ee      	b.n	800b580 <__libc_init_array+0xc>
 800b5a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5a6:	4798      	blx	r3
 800b5a8:	3601      	adds	r6, #1
 800b5aa:	e7f2      	b.n	800b592 <__libc_init_array+0x1e>
 800b5ac:	0800d9e4 	.word	0x0800d9e4
 800b5b0:	0800d9e4 	.word	0x0800d9e4
 800b5b4:	0800d9e4 	.word	0x0800d9e4
 800b5b8:	0800d9e8 	.word	0x0800d9e8

0800b5bc <__retarget_lock_acquire_recursive>:
 800b5bc:	4770      	bx	lr

0800b5be <__retarget_lock_release_recursive>:
 800b5be:	4770      	bx	lr

0800b5c0 <quorem>:
 800b5c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c4:	6903      	ldr	r3, [r0, #16]
 800b5c6:	690c      	ldr	r4, [r1, #16]
 800b5c8:	42a3      	cmp	r3, r4
 800b5ca:	4607      	mov	r7, r0
 800b5cc:	db7e      	blt.n	800b6cc <quorem+0x10c>
 800b5ce:	3c01      	subs	r4, #1
 800b5d0:	f101 0814 	add.w	r8, r1, #20
 800b5d4:	f100 0514 	add.w	r5, r0, #20
 800b5d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5dc:	9301      	str	r3, [sp, #4]
 800b5de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b5ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5f2:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5f6:	d331      	bcc.n	800b65c <quorem+0x9c>
 800b5f8:	f04f 0e00 	mov.w	lr, #0
 800b5fc:	4640      	mov	r0, r8
 800b5fe:	46ac      	mov	ip, r5
 800b600:	46f2      	mov	sl, lr
 800b602:	f850 2b04 	ldr.w	r2, [r0], #4
 800b606:	b293      	uxth	r3, r2
 800b608:	fb06 e303 	mla	r3, r6, r3, lr
 800b60c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b610:	0c1a      	lsrs	r2, r3, #16
 800b612:	b29b      	uxth	r3, r3
 800b614:	ebaa 0303 	sub.w	r3, sl, r3
 800b618:	f8dc a000 	ldr.w	sl, [ip]
 800b61c:	fa13 f38a 	uxtah	r3, r3, sl
 800b620:	fb06 220e 	mla	r2, r6, lr, r2
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	9b00      	ldr	r3, [sp, #0]
 800b628:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b62c:	b292      	uxth	r2, r2
 800b62e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b632:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b636:	f8bd 3000 	ldrh.w	r3, [sp]
 800b63a:	4581      	cmp	r9, r0
 800b63c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b640:	f84c 3b04 	str.w	r3, [ip], #4
 800b644:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b648:	d2db      	bcs.n	800b602 <quorem+0x42>
 800b64a:	f855 300b 	ldr.w	r3, [r5, fp]
 800b64e:	b92b      	cbnz	r3, 800b65c <quorem+0x9c>
 800b650:	9b01      	ldr	r3, [sp, #4]
 800b652:	3b04      	subs	r3, #4
 800b654:	429d      	cmp	r5, r3
 800b656:	461a      	mov	r2, r3
 800b658:	d32c      	bcc.n	800b6b4 <quorem+0xf4>
 800b65a:	613c      	str	r4, [r7, #16]
 800b65c:	4638      	mov	r0, r7
 800b65e:	f001 f9a5 	bl	800c9ac <__mcmp>
 800b662:	2800      	cmp	r0, #0
 800b664:	db22      	blt.n	800b6ac <quorem+0xec>
 800b666:	3601      	adds	r6, #1
 800b668:	4629      	mov	r1, r5
 800b66a:	2000      	movs	r0, #0
 800b66c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b670:	f8d1 c000 	ldr.w	ip, [r1]
 800b674:	b293      	uxth	r3, r2
 800b676:	1ac3      	subs	r3, r0, r3
 800b678:	0c12      	lsrs	r2, r2, #16
 800b67a:	fa13 f38c 	uxtah	r3, r3, ip
 800b67e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b682:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b686:	b29b      	uxth	r3, r3
 800b688:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b68c:	45c1      	cmp	r9, r8
 800b68e:	f841 3b04 	str.w	r3, [r1], #4
 800b692:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b696:	d2e9      	bcs.n	800b66c <quorem+0xac>
 800b698:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b69c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6a0:	b922      	cbnz	r2, 800b6ac <quorem+0xec>
 800b6a2:	3b04      	subs	r3, #4
 800b6a4:	429d      	cmp	r5, r3
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	d30a      	bcc.n	800b6c0 <quorem+0x100>
 800b6aa:	613c      	str	r4, [r7, #16]
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	b003      	add	sp, #12
 800b6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b4:	6812      	ldr	r2, [r2, #0]
 800b6b6:	3b04      	subs	r3, #4
 800b6b8:	2a00      	cmp	r2, #0
 800b6ba:	d1ce      	bne.n	800b65a <quorem+0x9a>
 800b6bc:	3c01      	subs	r4, #1
 800b6be:	e7c9      	b.n	800b654 <quorem+0x94>
 800b6c0:	6812      	ldr	r2, [r2, #0]
 800b6c2:	3b04      	subs	r3, #4
 800b6c4:	2a00      	cmp	r2, #0
 800b6c6:	d1f0      	bne.n	800b6aa <quorem+0xea>
 800b6c8:	3c01      	subs	r4, #1
 800b6ca:	e7eb      	b.n	800b6a4 <quorem+0xe4>
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	e7ee      	b.n	800b6ae <quorem+0xee>

0800b6d0 <_dtoa_r>:
 800b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	ed2d 8b04 	vpush	{d8-d9}
 800b6d8:	69c5      	ldr	r5, [r0, #28]
 800b6da:	b093      	sub	sp, #76	; 0x4c
 800b6dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b6e0:	ec57 6b10 	vmov	r6, r7, d0
 800b6e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b6e8:	9107      	str	r1, [sp, #28]
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	920a      	str	r2, [sp, #40]	; 0x28
 800b6ee:	930d      	str	r3, [sp, #52]	; 0x34
 800b6f0:	b975      	cbnz	r5, 800b710 <_dtoa_r+0x40>
 800b6f2:	2010      	movs	r0, #16
 800b6f4:	f000 fe2a 	bl	800c34c <malloc>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	61e0      	str	r0, [r4, #28]
 800b6fc:	b920      	cbnz	r0, 800b708 <_dtoa_r+0x38>
 800b6fe:	4bae      	ldr	r3, [pc, #696]	; (800b9b8 <_dtoa_r+0x2e8>)
 800b700:	21ef      	movs	r1, #239	; 0xef
 800b702:	48ae      	ldr	r0, [pc, #696]	; (800b9bc <_dtoa_r+0x2ec>)
 800b704:	f001 fce6 	bl	800d0d4 <__assert_func>
 800b708:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b70c:	6005      	str	r5, [r0, #0]
 800b70e:	60c5      	str	r5, [r0, #12]
 800b710:	69e3      	ldr	r3, [r4, #28]
 800b712:	6819      	ldr	r1, [r3, #0]
 800b714:	b151      	cbz	r1, 800b72c <_dtoa_r+0x5c>
 800b716:	685a      	ldr	r2, [r3, #4]
 800b718:	604a      	str	r2, [r1, #4]
 800b71a:	2301      	movs	r3, #1
 800b71c:	4093      	lsls	r3, r2
 800b71e:	608b      	str	r3, [r1, #8]
 800b720:	4620      	mov	r0, r4
 800b722:	f000 ff07 	bl	800c534 <_Bfree>
 800b726:	69e3      	ldr	r3, [r4, #28]
 800b728:	2200      	movs	r2, #0
 800b72a:	601a      	str	r2, [r3, #0]
 800b72c:	1e3b      	subs	r3, r7, #0
 800b72e:	bfbb      	ittet	lt
 800b730:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b734:	9303      	strlt	r3, [sp, #12]
 800b736:	2300      	movge	r3, #0
 800b738:	2201      	movlt	r2, #1
 800b73a:	bfac      	ite	ge
 800b73c:	f8c8 3000 	strge.w	r3, [r8]
 800b740:	f8c8 2000 	strlt.w	r2, [r8]
 800b744:	4b9e      	ldr	r3, [pc, #632]	; (800b9c0 <_dtoa_r+0x2f0>)
 800b746:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b74a:	ea33 0308 	bics.w	r3, r3, r8
 800b74e:	d11b      	bne.n	800b788 <_dtoa_r+0xb8>
 800b750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b752:	f242 730f 	movw	r3, #9999	; 0x270f
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b75c:	4333      	orrs	r3, r6
 800b75e:	f000 8593 	beq.w	800c288 <_dtoa_r+0xbb8>
 800b762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b764:	b963      	cbnz	r3, 800b780 <_dtoa_r+0xb0>
 800b766:	4b97      	ldr	r3, [pc, #604]	; (800b9c4 <_dtoa_r+0x2f4>)
 800b768:	e027      	b.n	800b7ba <_dtoa_r+0xea>
 800b76a:	4b97      	ldr	r3, [pc, #604]	; (800b9c8 <_dtoa_r+0x2f8>)
 800b76c:	9300      	str	r3, [sp, #0]
 800b76e:	3308      	adds	r3, #8
 800b770:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b772:	6013      	str	r3, [r2, #0]
 800b774:	9800      	ldr	r0, [sp, #0]
 800b776:	b013      	add	sp, #76	; 0x4c
 800b778:	ecbd 8b04 	vpop	{d8-d9}
 800b77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b780:	4b90      	ldr	r3, [pc, #576]	; (800b9c4 <_dtoa_r+0x2f4>)
 800b782:	9300      	str	r3, [sp, #0]
 800b784:	3303      	adds	r3, #3
 800b786:	e7f3      	b.n	800b770 <_dtoa_r+0xa0>
 800b788:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b78c:	2200      	movs	r2, #0
 800b78e:	ec51 0b17 	vmov	r0, r1, d7
 800b792:	eeb0 8a47 	vmov.f32	s16, s14
 800b796:	eef0 8a67 	vmov.f32	s17, s15
 800b79a:	2300      	movs	r3, #0
 800b79c:	f7f5 f994 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7a0:	4681      	mov	r9, r0
 800b7a2:	b160      	cbz	r0, 800b7be <_dtoa_r+0xee>
 800b7a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	6013      	str	r3, [r2, #0]
 800b7aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f000 8568 	beq.w	800c282 <_dtoa_r+0xbb2>
 800b7b2:	4b86      	ldr	r3, [pc, #536]	; (800b9cc <_dtoa_r+0x2fc>)
 800b7b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b7b6:	6013      	str	r3, [r2, #0]
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	9300      	str	r3, [sp, #0]
 800b7bc:	e7da      	b.n	800b774 <_dtoa_r+0xa4>
 800b7be:	aa10      	add	r2, sp, #64	; 0x40
 800b7c0:	a911      	add	r1, sp, #68	; 0x44
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	eeb0 0a48 	vmov.f32	s0, s16
 800b7c8:	eef0 0a68 	vmov.f32	s1, s17
 800b7cc:	f001 f994 	bl	800caf8 <__d2b>
 800b7d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b7d4:	4682      	mov	sl, r0
 800b7d6:	2d00      	cmp	r5, #0
 800b7d8:	d07f      	beq.n	800b8da <_dtoa_r+0x20a>
 800b7da:	ee18 3a90 	vmov	r3, s17
 800b7de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b7e6:	ec51 0b18 	vmov	r0, r1, d8
 800b7ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b7ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b7f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	4b75      	ldr	r3, [pc, #468]	; (800b9d0 <_dtoa_r+0x300>)
 800b7fc:	f7f4 fd44 	bl	8000288 <__aeabi_dsub>
 800b800:	a367      	add	r3, pc, #412	; (adr r3, 800b9a0 <_dtoa_r+0x2d0>)
 800b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b806:	f7f4 fef7 	bl	80005f8 <__aeabi_dmul>
 800b80a:	a367      	add	r3, pc, #412	; (adr r3, 800b9a8 <_dtoa_r+0x2d8>)
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	f7f4 fd3c 	bl	800028c <__adddf3>
 800b814:	4606      	mov	r6, r0
 800b816:	4628      	mov	r0, r5
 800b818:	460f      	mov	r7, r1
 800b81a:	f7f4 fe83 	bl	8000524 <__aeabi_i2d>
 800b81e:	a364      	add	r3, pc, #400	; (adr r3, 800b9b0 <_dtoa_r+0x2e0>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f7f4 fee8 	bl	80005f8 <__aeabi_dmul>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	4630      	mov	r0, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	f7f4 fd2c 	bl	800028c <__adddf3>
 800b834:	4606      	mov	r6, r0
 800b836:	460f      	mov	r7, r1
 800b838:	f7f5 f98e 	bl	8000b58 <__aeabi_d2iz>
 800b83c:	2200      	movs	r2, #0
 800b83e:	4683      	mov	fp, r0
 800b840:	2300      	movs	r3, #0
 800b842:	4630      	mov	r0, r6
 800b844:	4639      	mov	r1, r7
 800b846:	f7f5 f949 	bl	8000adc <__aeabi_dcmplt>
 800b84a:	b148      	cbz	r0, 800b860 <_dtoa_r+0x190>
 800b84c:	4658      	mov	r0, fp
 800b84e:	f7f4 fe69 	bl	8000524 <__aeabi_i2d>
 800b852:	4632      	mov	r2, r6
 800b854:	463b      	mov	r3, r7
 800b856:	f7f5 f937 	bl	8000ac8 <__aeabi_dcmpeq>
 800b85a:	b908      	cbnz	r0, 800b860 <_dtoa_r+0x190>
 800b85c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b860:	f1bb 0f16 	cmp.w	fp, #22
 800b864:	d857      	bhi.n	800b916 <_dtoa_r+0x246>
 800b866:	4b5b      	ldr	r3, [pc, #364]	; (800b9d4 <_dtoa_r+0x304>)
 800b868:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	ec51 0b18 	vmov	r0, r1, d8
 800b874:	f7f5 f932 	bl	8000adc <__aeabi_dcmplt>
 800b878:	2800      	cmp	r0, #0
 800b87a:	d04e      	beq.n	800b91a <_dtoa_r+0x24a>
 800b87c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b880:	2300      	movs	r3, #0
 800b882:	930c      	str	r3, [sp, #48]	; 0x30
 800b884:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b886:	1b5b      	subs	r3, r3, r5
 800b888:	1e5a      	subs	r2, r3, #1
 800b88a:	bf45      	ittet	mi
 800b88c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b890:	9305      	strmi	r3, [sp, #20]
 800b892:	2300      	movpl	r3, #0
 800b894:	2300      	movmi	r3, #0
 800b896:	9206      	str	r2, [sp, #24]
 800b898:	bf54      	ite	pl
 800b89a:	9305      	strpl	r3, [sp, #20]
 800b89c:	9306      	strmi	r3, [sp, #24]
 800b89e:	f1bb 0f00 	cmp.w	fp, #0
 800b8a2:	db3c      	blt.n	800b91e <_dtoa_r+0x24e>
 800b8a4:	9b06      	ldr	r3, [sp, #24]
 800b8a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b8aa:	445b      	add	r3, fp
 800b8ac:	9306      	str	r3, [sp, #24]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	9308      	str	r3, [sp, #32]
 800b8b2:	9b07      	ldr	r3, [sp, #28]
 800b8b4:	2b09      	cmp	r3, #9
 800b8b6:	d868      	bhi.n	800b98a <_dtoa_r+0x2ba>
 800b8b8:	2b05      	cmp	r3, #5
 800b8ba:	bfc4      	itt	gt
 800b8bc:	3b04      	subgt	r3, #4
 800b8be:	9307      	strgt	r3, [sp, #28]
 800b8c0:	9b07      	ldr	r3, [sp, #28]
 800b8c2:	f1a3 0302 	sub.w	r3, r3, #2
 800b8c6:	bfcc      	ite	gt
 800b8c8:	2500      	movgt	r5, #0
 800b8ca:	2501      	movle	r5, #1
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	f200 8085 	bhi.w	800b9dc <_dtoa_r+0x30c>
 800b8d2:	e8df f003 	tbb	[pc, r3]
 800b8d6:	3b2e      	.short	0x3b2e
 800b8d8:	5839      	.short	0x5839
 800b8da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b8de:	441d      	add	r5, r3
 800b8e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b8e4:	2b20      	cmp	r3, #32
 800b8e6:	bfc1      	itttt	gt
 800b8e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b8ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800b8f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b8f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b8f8:	bfd6      	itet	le
 800b8fa:	f1c3 0320 	rsble	r3, r3, #32
 800b8fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800b902:	fa06 f003 	lslle.w	r0, r6, r3
 800b906:	f7f4 fdfd 	bl	8000504 <__aeabi_ui2d>
 800b90a:	2201      	movs	r2, #1
 800b90c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b910:	3d01      	subs	r5, #1
 800b912:	920e      	str	r2, [sp, #56]	; 0x38
 800b914:	e76f      	b.n	800b7f6 <_dtoa_r+0x126>
 800b916:	2301      	movs	r3, #1
 800b918:	e7b3      	b.n	800b882 <_dtoa_r+0x1b2>
 800b91a:	900c      	str	r0, [sp, #48]	; 0x30
 800b91c:	e7b2      	b.n	800b884 <_dtoa_r+0x1b4>
 800b91e:	9b05      	ldr	r3, [sp, #20]
 800b920:	eba3 030b 	sub.w	r3, r3, fp
 800b924:	9305      	str	r3, [sp, #20]
 800b926:	f1cb 0300 	rsb	r3, fp, #0
 800b92a:	9308      	str	r3, [sp, #32]
 800b92c:	2300      	movs	r3, #0
 800b92e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b930:	e7bf      	b.n	800b8b2 <_dtoa_r+0x1e2>
 800b932:	2300      	movs	r3, #0
 800b934:	9309      	str	r3, [sp, #36]	; 0x24
 800b936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b938:	2b00      	cmp	r3, #0
 800b93a:	dc52      	bgt.n	800b9e2 <_dtoa_r+0x312>
 800b93c:	2301      	movs	r3, #1
 800b93e:	9301      	str	r3, [sp, #4]
 800b940:	9304      	str	r3, [sp, #16]
 800b942:	461a      	mov	r2, r3
 800b944:	920a      	str	r2, [sp, #40]	; 0x28
 800b946:	e00b      	b.n	800b960 <_dtoa_r+0x290>
 800b948:	2301      	movs	r3, #1
 800b94a:	e7f3      	b.n	800b934 <_dtoa_r+0x264>
 800b94c:	2300      	movs	r3, #0
 800b94e:	9309      	str	r3, [sp, #36]	; 0x24
 800b950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b952:	445b      	add	r3, fp
 800b954:	9301      	str	r3, [sp, #4]
 800b956:	3301      	adds	r3, #1
 800b958:	2b01      	cmp	r3, #1
 800b95a:	9304      	str	r3, [sp, #16]
 800b95c:	bfb8      	it	lt
 800b95e:	2301      	movlt	r3, #1
 800b960:	69e0      	ldr	r0, [r4, #28]
 800b962:	2100      	movs	r1, #0
 800b964:	2204      	movs	r2, #4
 800b966:	f102 0614 	add.w	r6, r2, #20
 800b96a:	429e      	cmp	r6, r3
 800b96c:	d93d      	bls.n	800b9ea <_dtoa_r+0x31a>
 800b96e:	6041      	str	r1, [r0, #4]
 800b970:	4620      	mov	r0, r4
 800b972:	f000 fd9f 	bl	800c4b4 <_Balloc>
 800b976:	9000      	str	r0, [sp, #0]
 800b978:	2800      	cmp	r0, #0
 800b97a:	d139      	bne.n	800b9f0 <_dtoa_r+0x320>
 800b97c:	4b16      	ldr	r3, [pc, #88]	; (800b9d8 <_dtoa_r+0x308>)
 800b97e:	4602      	mov	r2, r0
 800b980:	f240 11af 	movw	r1, #431	; 0x1af
 800b984:	e6bd      	b.n	800b702 <_dtoa_r+0x32>
 800b986:	2301      	movs	r3, #1
 800b988:	e7e1      	b.n	800b94e <_dtoa_r+0x27e>
 800b98a:	2501      	movs	r5, #1
 800b98c:	2300      	movs	r3, #0
 800b98e:	9307      	str	r3, [sp, #28]
 800b990:	9509      	str	r5, [sp, #36]	; 0x24
 800b992:	f04f 33ff 	mov.w	r3, #4294967295
 800b996:	9301      	str	r3, [sp, #4]
 800b998:	9304      	str	r3, [sp, #16]
 800b99a:	2200      	movs	r2, #0
 800b99c:	2312      	movs	r3, #18
 800b99e:	e7d1      	b.n	800b944 <_dtoa_r+0x274>
 800b9a0:	636f4361 	.word	0x636f4361
 800b9a4:	3fd287a7 	.word	0x3fd287a7
 800b9a8:	8b60c8b3 	.word	0x8b60c8b3
 800b9ac:	3fc68a28 	.word	0x3fc68a28
 800b9b0:	509f79fb 	.word	0x509f79fb
 800b9b4:	3fd34413 	.word	0x3fd34413
 800b9b8:	0800d7ae 	.word	0x0800d7ae
 800b9bc:	0800d7c5 	.word	0x0800d7c5
 800b9c0:	7ff00000 	.word	0x7ff00000
 800b9c4:	0800d7aa 	.word	0x0800d7aa
 800b9c8:	0800d7a1 	.word	0x0800d7a1
 800b9cc:	0800d77e 	.word	0x0800d77e
 800b9d0:	3ff80000 	.word	0x3ff80000
 800b9d4:	0800d8b0 	.word	0x0800d8b0
 800b9d8:	0800d81d 	.word	0x0800d81d
 800b9dc:	2301      	movs	r3, #1
 800b9de:	9309      	str	r3, [sp, #36]	; 0x24
 800b9e0:	e7d7      	b.n	800b992 <_dtoa_r+0x2c2>
 800b9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9e4:	9301      	str	r3, [sp, #4]
 800b9e6:	9304      	str	r3, [sp, #16]
 800b9e8:	e7ba      	b.n	800b960 <_dtoa_r+0x290>
 800b9ea:	3101      	adds	r1, #1
 800b9ec:	0052      	lsls	r2, r2, #1
 800b9ee:	e7ba      	b.n	800b966 <_dtoa_r+0x296>
 800b9f0:	69e3      	ldr	r3, [r4, #28]
 800b9f2:	9a00      	ldr	r2, [sp, #0]
 800b9f4:	601a      	str	r2, [r3, #0]
 800b9f6:	9b04      	ldr	r3, [sp, #16]
 800b9f8:	2b0e      	cmp	r3, #14
 800b9fa:	f200 80a8 	bhi.w	800bb4e <_dtoa_r+0x47e>
 800b9fe:	2d00      	cmp	r5, #0
 800ba00:	f000 80a5 	beq.w	800bb4e <_dtoa_r+0x47e>
 800ba04:	f1bb 0f00 	cmp.w	fp, #0
 800ba08:	dd38      	ble.n	800ba7c <_dtoa_r+0x3ac>
 800ba0a:	4bc0      	ldr	r3, [pc, #768]	; (800bd0c <_dtoa_r+0x63c>)
 800ba0c:	f00b 020f 	and.w	r2, fp, #15
 800ba10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ba18:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ba1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ba20:	d019      	beq.n	800ba56 <_dtoa_r+0x386>
 800ba22:	4bbb      	ldr	r3, [pc, #748]	; (800bd10 <_dtoa_r+0x640>)
 800ba24:	ec51 0b18 	vmov	r0, r1, d8
 800ba28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba2c:	f7f4 ff0e 	bl	800084c <__aeabi_ddiv>
 800ba30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba34:	f008 080f 	and.w	r8, r8, #15
 800ba38:	2503      	movs	r5, #3
 800ba3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bd10 <_dtoa_r+0x640>
 800ba3e:	f1b8 0f00 	cmp.w	r8, #0
 800ba42:	d10a      	bne.n	800ba5a <_dtoa_r+0x38a>
 800ba44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba48:	4632      	mov	r2, r6
 800ba4a:	463b      	mov	r3, r7
 800ba4c:	f7f4 fefe 	bl	800084c <__aeabi_ddiv>
 800ba50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba54:	e02b      	b.n	800baae <_dtoa_r+0x3de>
 800ba56:	2502      	movs	r5, #2
 800ba58:	e7ef      	b.n	800ba3a <_dtoa_r+0x36a>
 800ba5a:	f018 0f01 	tst.w	r8, #1
 800ba5e:	d008      	beq.n	800ba72 <_dtoa_r+0x3a2>
 800ba60:	4630      	mov	r0, r6
 800ba62:	4639      	mov	r1, r7
 800ba64:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ba68:	f7f4 fdc6 	bl	80005f8 <__aeabi_dmul>
 800ba6c:	3501      	adds	r5, #1
 800ba6e:	4606      	mov	r6, r0
 800ba70:	460f      	mov	r7, r1
 800ba72:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ba76:	f109 0908 	add.w	r9, r9, #8
 800ba7a:	e7e0      	b.n	800ba3e <_dtoa_r+0x36e>
 800ba7c:	f000 809f 	beq.w	800bbbe <_dtoa_r+0x4ee>
 800ba80:	f1cb 0600 	rsb	r6, fp, #0
 800ba84:	4ba1      	ldr	r3, [pc, #644]	; (800bd0c <_dtoa_r+0x63c>)
 800ba86:	4fa2      	ldr	r7, [pc, #648]	; (800bd10 <_dtoa_r+0x640>)
 800ba88:	f006 020f 	and.w	r2, r6, #15
 800ba8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	ec51 0b18 	vmov	r0, r1, d8
 800ba98:	f7f4 fdae 	bl	80005f8 <__aeabi_dmul>
 800ba9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baa0:	1136      	asrs	r6, r6, #4
 800baa2:	2300      	movs	r3, #0
 800baa4:	2502      	movs	r5, #2
 800baa6:	2e00      	cmp	r6, #0
 800baa8:	d17e      	bne.n	800bba8 <_dtoa_r+0x4d8>
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d1d0      	bne.n	800ba50 <_dtoa_r+0x380>
 800baae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bab0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f000 8084 	beq.w	800bbc2 <_dtoa_r+0x4f2>
 800baba:	4b96      	ldr	r3, [pc, #600]	; (800bd14 <_dtoa_r+0x644>)
 800babc:	2200      	movs	r2, #0
 800babe:	4640      	mov	r0, r8
 800bac0:	4649      	mov	r1, r9
 800bac2:	f7f5 f80b 	bl	8000adc <__aeabi_dcmplt>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d07b      	beq.n	800bbc2 <_dtoa_r+0x4f2>
 800baca:	9b04      	ldr	r3, [sp, #16]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d078      	beq.n	800bbc2 <_dtoa_r+0x4f2>
 800bad0:	9b01      	ldr	r3, [sp, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	dd39      	ble.n	800bb4a <_dtoa_r+0x47a>
 800bad6:	4b90      	ldr	r3, [pc, #576]	; (800bd18 <_dtoa_r+0x648>)
 800bad8:	2200      	movs	r2, #0
 800bada:	4640      	mov	r0, r8
 800badc:	4649      	mov	r1, r9
 800bade:	f7f4 fd8b 	bl	80005f8 <__aeabi_dmul>
 800bae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bae6:	9e01      	ldr	r6, [sp, #4]
 800bae8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800baec:	3501      	adds	r5, #1
 800baee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800baf2:	4628      	mov	r0, r5
 800baf4:	f7f4 fd16 	bl	8000524 <__aeabi_i2d>
 800baf8:	4642      	mov	r2, r8
 800bafa:	464b      	mov	r3, r9
 800bafc:	f7f4 fd7c 	bl	80005f8 <__aeabi_dmul>
 800bb00:	4b86      	ldr	r3, [pc, #536]	; (800bd1c <_dtoa_r+0x64c>)
 800bb02:	2200      	movs	r2, #0
 800bb04:	f7f4 fbc2 	bl	800028c <__adddf3>
 800bb08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bb0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb10:	9303      	str	r3, [sp, #12]
 800bb12:	2e00      	cmp	r6, #0
 800bb14:	d158      	bne.n	800bbc8 <_dtoa_r+0x4f8>
 800bb16:	4b82      	ldr	r3, [pc, #520]	; (800bd20 <_dtoa_r+0x650>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	4640      	mov	r0, r8
 800bb1c:	4649      	mov	r1, r9
 800bb1e:	f7f4 fbb3 	bl	8000288 <__aeabi_dsub>
 800bb22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb26:	4680      	mov	r8, r0
 800bb28:	4689      	mov	r9, r1
 800bb2a:	f7f4 fff5 	bl	8000b18 <__aeabi_dcmpgt>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	f040 8296 	bne.w	800c060 <_dtoa_r+0x990>
 800bb34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bb38:	4640      	mov	r0, r8
 800bb3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb3e:	4649      	mov	r1, r9
 800bb40:	f7f4 ffcc 	bl	8000adc <__aeabi_dcmplt>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	f040 8289 	bne.w	800c05c <_dtoa_r+0x98c>
 800bb4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bb4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f2c0 814e 	blt.w	800bdf2 <_dtoa_r+0x722>
 800bb56:	f1bb 0f0e 	cmp.w	fp, #14
 800bb5a:	f300 814a 	bgt.w	800bdf2 <_dtoa_r+0x722>
 800bb5e:	4b6b      	ldr	r3, [pc, #428]	; (800bd0c <_dtoa_r+0x63c>)
 800bb60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bb64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f280 80dc 	bge.w	800bd28 <_dtoa_r+0x658>
 800bb70:	9b04      	ldr	r3, [sp, #16]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f300 80d8 	bgt.w	800bd28 <_dtoa_r+0x658>
 800bb78:	f040 826f 	bne.w	800c05a <_dtoa_r+0x98a>
 800bb7c:	4b68      	ldr	r3, [pc, #416]	; (800bd20 <_dtoa_r+0x650>)
 800bb7e:	2200      	movs	r2, #0
 800bb80:	4640      	mov	r0, r8
 800bb82:	4649      	mov	r1, r9
 800bb84:	f7f4 fd38 	bl	80005f8 <__aeabi_dmul>
 800bb88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb8c:	f7f4 ffba 	bl	8000b04 <__aeabi_dcmpge>
 800bb90:	9e04      	ldr	r6, [sp, #16]
 800bb92:	4637      	mov	r7, r6
 800bb94:	2800      	cmp	r0, #0
 800bb96:	f040 8245 	bne.w	800c024 <_dtoa_r+0x954>
 800bb9a:	9d00      	ldr	r5, [sp, #0]
 800bb9c:	2331      	movs	r3, #49	; 0x31
 800bb9e:	f805 3b01 	strb.w	r3, [r5], #1
 800bba2:	f10b 0b01 	add.w	fp, fp, #1
 800bba6:	e241      	b.n	800c02c <_dtoa_r+0x95c>
 800bba8:	07f2      	lsls	r2, r6, #31
 800bbaa:	d505      	bpl.n	800bbb8 <_dtoa_r+0x4e8>
 800bbac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbb0:	f7f4 fd22 	bl	80005f8 <__aeabi_dmul>
 800bbb4:	3501      	adds	r5, #1
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	1076      	asrs	r6, r6, #1
 800bbba:	3708      	adds	r7, #8
 800bbbc:	e773      	b.n	800baa6 <_dtoa_r+0x3d6>
 800bbbe:	2502      	movs	r5, #2
 800bbc0:	e775      	b.n	800baae <_dtoa_r+0x3de>
 800bbc2:	9e04      	ldr	r6, [sp, #16]
 800bbc4:	465f      	mov	r7, fp
 800bbc6:	e792      	b.n	800baee <_dtoa_r+0x41e>
 800bbc8:	9900      	ldr	r1, [sp, #0]
 800bbca:	4b50      	ldr	r3, [pc, #320]	; (800bd0c <_dtoa_r+0x63c>)
 800bbcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbd0:	4431      	add	r1, r6
 800bbd2:	9102      	str	r1, [sp, #8]
 800bbd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbd6:	eeb0 9a47 	vmov.f32	s18, s14
 800bbda:	eef0 9a67 	vmov.f32	s19, s15
 800bbde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bbe2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbe6:	2900      	cmp	r1, #0
 800bbe8:	d044      	beq.n	800bc74 <_dtoa_r+0x5a4>
 800bbea:	494e      	ldr	r1, [pc, #312]	; (800bd24 <_dtoa_r+0x654>)
 800bbec:	2000      	movs	r0, #0
 800bbee:	f7f4 fe2d 	bl	800084c <__aeabi_ddiv>
 800bbf2:	ec53 2b19 	vmov	r2, r3, d9
 800bbf6:	f7f4 fb47 	bl	8000288 <__aeabi_dsub>
 800bbfa:	9d00      	ldr	r5, [sp, #0]
 800bbfc:	ec41 0b19 	vmov	d9, r0, r1
 800bc00:	4649      	mov	r1, r9
 800bc02:	4640      	mov	r0, r8
 800bc04:	f7f4 ffa8 	bl	8000b58 <__aeabi_d2iz>
 800bc08:	4606      	mov	r6, r0
 800bc0a:	f7f4 fc8b 	bl	8000524 <__aeabi_i2d>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	460b      	mov	r3, r1
 800bc12:	4640      	mov	r0, r8
 800bc14:	4649      	mov	r1, r9
 800bc16:	f7f4 fb37 	bl	8000288 <__aeabi_dsub>
 800bc1a:	3630      	adds	r6, #48	; 0x30
 800bc1c:	f805 6b01 	strb.w	r6, [r5], #1
 800bc20:	ec53 2b19 	vmov	r2, r3, d9
 800bc24:	4680      	mov	r8, r0
 800bc26:	4689      	mov	r9, r1
 800bc28:	f7f4 ff58 	bl	8000adc <__aeabi_dcmplt>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d164      	bne.n	800bcfa <_dtoa_r+0x62a>
 800bc30:	4642      	mov	r2, r8
 800bc32:	464b      	mov	r3, r9
 800bc34:	4937      	ldr	r1, [pc, #220]	; (800bd14 <_dtoa_r+0x644>)
 800bc36:	2000      	movs	r0, #0
 800bc38:	f7f4 fb26 	bl	8000288 <__aeabi_dsub>
 800bc3c:	ec53 2b19 	vmov	r2, r3, d9
 800bc40:	f7f4 ff4c 	bl	8000adc <__aeabi_dcmplt>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	f040 80b6 	bne.w	800bdb6 <_dtoa_r+0x6e6>
 800bc4a:	9b02      	ldr	r3, [sp, #8]
 800bc4c:	429d      	cmp	r5, r3
 800bc4e:	f43f af7c 	beq.w	800bb4a <_dtoa_r+0x47a>
 800bc52:	4b31      	ldr	r3, [pc, #196]	; (800bd18 <_dtoa_r+0x648>)
 800bc54:	ec51 0b19 	vmov	r0, r1, d9
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f7f4 fccd 	bl	80005f8 <__aeabi_dmul>
 800bc5e:	4b2e      	ldr	r3, [pc, #184]	; (800bd18 <_dtoa_r+0x648>)
 800bc60:	ec41 0b19 	vmov	d9, r0, r1
 800bc64:	2200      	movs	r2, #0
 800bc66:	4640      	mov	r0, r8
 800bc68:	4649      	mov	r1, r9
 800bc6a:	f7f4 fcc5 	bl	80005f8 <__aeabi_dmul>
 800bc6e:	4680      	mov	r8, r0
 800bc70:	4689      	mov	r9, r1
 800bc72:	e7c5      	b.n	800bc00 <_dtoa_r+0x530>
 800bc74:	ec51 0b17 	vmov	r0, r1, d7
 800bc78:	f7f4 fcbe 	bl	80005f8 <__aeabi_dmul>
 800bc7c:	9b02      	ldr	r3, [sp, #8]
 800bc7e:	9d00      	ldr	r5, [sp, #0]
 800bc80:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc82:	ec41 0b19 	vmov	d9, r0, r1
 800bc86:	4649      	mov	r1, r9
 800bc88:	4640      	mov	r0, r8
 800bc8a:	f7f4 ff65 	bl	8000b58 <__aeabi_d2iz>
 800bc8e:	4606      	mov	r6, r0
 800bc90:	f7f4 fc48 	bl	8000524 <__aeabi_i2d>
 800bc94:	3630      	adds	r6, #48	; 0x30
 800bc96:	4602      	mov	r2, r0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4640      	mov	r0, r8
 800bc9c:	4649      	mov	r1, r9
 800bc9e:	f7f4 faf3 	bl	8000288 <__aeabi_dsub>
 800bca2:	f805 6b01 	strb.w	r6, [r5], #1
 800bca6:	9b02      	ldr	r3, [sp, #8]
 800bca8:	429d      	cmp	r5, r3
 800bcaa:	4680      	mov	r8, r0
 800bcac:	4689      	mov	r9, r1
 800bcae:	f04f 0200 	mov.w	r2, #0
 800bcb2:	d124      	bne.n	800bcfe <_dtoa_r+0x62e>
 800bcb4:	4b1b      	ldr	r3, [pc, #108]	; (800bd24 <_dtoa_r+0x654>)
 800bcb6:	ec51 0b19 	vmov	r0, r1, d9
 800bcba:	f7f4 fae7 	bl	800028c <__adddf3>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	4649      	mov	r1, r9
 800bcc6:	f7f4 ff27 	bl	8000b18 <__aeabi_dcmpgt>
 800bcca:	2800      	cmp	r0, #0
 800bccc:	d173      	bne.n	800bdb6 <_dtoa_r+0x6e6>
 800bcce:	ec53 2b19 	vmov	r2, r3, d9
 800bcd2:	4914      	ldr	r1, [pc, #80]	; (800bd24 <_dtoa_r+0x654>)
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	f7f4 fad7 	bl	8000288 <__aeabi_dsub>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4640      	mov	r0, r8
 800bce0:	4649      	mov	r1, r9
 800bce2:	f7f4 fefb 	bl	8000adc <__aeabi_dcmplt>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	f43f af2f 	beq.w	800bb4a <_dtoa_r+0x47a>
 800bcec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bcee:	1e6b      	subs	r3, r5, #1
 800bcf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bcf6:	2b30      	cmp	r3, #48	; 0x30
 800bcf8:	d0f8      	beq.n	800bcec <_dtoa_r+0x61c>
 800bcfa:	46bb      	mov	fp, r7
 800bcfc:	e04a      	b.n	800bd94 <_dtoa_r+0x6c4>
 800bcfe:	4b06      	ldr	r3, [pc, #24]	; (800bd18 <_dtoa_r+0x648>)
 800bd00:	f7f4 fc7a 	bl	80005f8 <__aeabi_dmul>
 800bd04:	4680      	mov	r8, r0
 800bd06:	4689      	mov	r9, r1
 800bd08:	e7bd      	b.n	800bc86 <_dtoa_r+0x5b6>
 800bd0a:	bf00      	nop
 800bd0c:	0800d8b0 	.word	0x0800d8b0
 800bd10:	0800d888 	.word	0x0800d888
 800bd14:	3ff00000 	.word	0x3ff00000
 800bd18:	40240000 	.word	0x40240000
 800bd1c:	401c0000 	.word	0x401c0000
 800bd20:	40140000 	.word	0x40140000
 800bd24:	3fe00000 	.word	0x3fe00000
 800bd28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bd2c:	9d00      	ldr	r5, [sp, #0]
 800bd2e:	4642      	mov	r2, r8
 800bd30:	464b      	mov	r3, r9
 800bd32:	4630      	mov	r0, r6
 800bd34:	4639      	mov	r1, r7
 800bd36:	f7f4 fd89 	bl	800084c <__aeabi_ddiv>
 800bd3a:	f7f4 ff0d 	bl	8000b58 <__aeabi_d2iz>
 800bd3e:	9001      	str	r0, [sp, #4]
 800bd40:	f7f4 fbf0 	bl	8000524 <__aeabi_i2d>
 800bd44:	4642      	mov	r2, r8
 800bd46:	464b      	mov	r3, r9
 800bd48:	f7f4 fc56 	bl	80005f8 <__aeabi_dmul>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	4630      	mov	r0, r6
 800bd52:	4639      	mov	r1, r7
 800bd54:	f7f4 fa98 	bl	8000288 <__aeabi_dsub>
 800bd58:	9e01      	ldr	r6, [sp, #4]
 800bd5a:	9f04      	ldr	r7, [sp, #16]
 800bd5c:	3630      	adds	r6, #48	; 0x30
 800bd5e:	f805 6b01 	strb.w	r6, [r5], #1
 800bd62:	9e00      	ldr	r6, [sp, #0]
 800bd64:	1bae      	subs	r6, r5, r6
 800bd66:	42b7      	cmp	r7, r6
 800bd68:	4602      	mov	r2, r0
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	d134      	bne.n	800bdd8 <_dtoa_r+0x708>
 800bd6e:	f7f4 fa8d 	bl	800028c <__adddf3>
 800bd72:	4642      	mov	r2, r8
 800bd74:	464b      	mov	r3, r9
 800bd76:	4606      	mov	r6, r0
 800bd78:	460f      	mov	r7, r1
 800bd7a:	f7f4 fecd 	bl	8000b18 <__aeabi_dcmpgt>
 800bd7e:	b9c8      	cbnz	r0, 800bdb4 <_dtoa_r+0x6e4>
 800bd80:	4642      	mov	r2, r8
 800bd82:	464b      	mov	r3, r9
 800bd84:	4630      	mov	r0, r6
 800bd86:	4639      	mov	r1, r7
 800bd88:	f7f4 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd8c:	b110      	cbz	r0, 800bd94 <_dtoa_r+0x6c4>
 800bd8e:	9b01      	ldr	r3, [sp, #4]
 800bd90:	07db      	lsls	r3, r3, #31
 800bd92:	d40f      	bmi.n	800bdb4 <_dtoa_r+0x6e4>
 800bd94:	4651      	mov	r1, sl
 800bd96:	4620      	mov	r0, r4
 800bd98:	f000 fbcc 	bl	800c534 <_Bfree>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bda0:	702b      	strb	r3, [r5, #0]
 800bda2:	f10b 0301 	add.w	r3, fp, #1
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f43f ace2 	beq.w	800b774 <_dtoa_r+0xa4>
 800bdb0:	601d      	str	r5, [r3, #0]
 800bdb2:	e4df      	b.n	800b774 <_dtoa_r+0xa4>
 800bdb4:	465f      	mov	r7, fp
 800bdb6:	462b      	mov	r3, r5
 800bdb8:	461d      	mov	r5, r3
 800bdba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdbe:	2a39      	cmp	r2, #57	; 0x39
 800bdc0:	d106      	bne.n	800bdd0 <_dtoa_r+0x700>
 800bdc2:	9a00      	ldr	r2, [sp, #0]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d1f7      	bne.n	800bdb8 <_dtoa_r+0x6e8>
 800bdc8:	9900      	ldr	r1, [sp, #0]
 800bdca:	2230      	movs	r2, #48	; 0x30
 800bdcc:	3701      	adds	r7, #1
 800bdce:	700a      	strb	r2, [r1, #0]
 800bdd0:	781a      	ldrb	r2, [r3, #0]
 800bdd2:	3201      	adds	r2, #1
 800bdd4:	701a      	strb	r2, [r3, #0]
 800bdd6:	e790      	b.n	800bcfa <_dtoa_r+0x62a>
 800bdd8:	4ba3      	ldr	r3, [pc, #652]	; (800c068 <_dtoa_r+0x998>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	f7f4 fc0c 	bl	80005f8 <__aeabi_dmul>
 800bde0:	2200      	movs	r2, #0
 800bde2:	2300      	movs	r3, #0
 800bde4:	4606      	mov	r6, r0
 800bde6:	460f      	mov	r7, r1
 800bde8:	f7f4 fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d09e      	beq.n	800bd2e <_dtoa_r+0x65e>
 800bdf0:	e7d0      	b.n	800bd94 <_dtoa_r+0x6c4>
 800bdf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdf4:	2a00      	cmp	r2, #0
 800bdf6:	f000 80ca 	beq.w	800bf8e <_dtoa_r+0x8be>
 800bdfa:	9a07      	ldr	r2, [sp, #28]
 800bdfc:	2a01      	cmp	r2, #1
 800bdfe:	f300 80ad 	bgt.w	800bf5c <_dtoa_r+0x88c>
 800be02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be04:	2a00      	cmp	r2, #0
 800be06:	f000 80a5 	beq.w	800bf54 <_dtoa_r+0x884>
 800be0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be0e:	9e08      	ldr	r6, [sp, #32]
 800be10:	9d05      	ldr	r5, [sp, #20]
 800be12:	9a05      	ldr	r2, [sp, #20]
 800be14:	441a      	add	r2, r3
 800be16:	9205      	str	r2, [sp, #20]
 800be18:	9a06      	ldr	r2, [sp, #24]
 800be1a:	2101      	movs	r1, #1
 800be1c:	441a      	add	r2, r3
 800be1e:	4620      	mov	r0, r4
 800be20:	9206      	str	r2, [sp, #24]
 800be22:	f000 fc3d 	bl	800c6a0 <__i2b>
 800be26:	4607      	mov	r7, r0
 800be28:	b165      	cbz	r5, 800be44 <_dtoa_r+0x774>
 800be2a:	9b06      	ldr	r3, [sp, #24]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	dd09      	ble.n	800be44 <_dtoa_r+0x774>
 800be30:	42ab      	cmp	r3, r5
 800be32:	9a05      	ldr	r2, [sp, #20]
 800be34:	bfa8      	it	ge
 800be36:	462b      	movge	r3, r5
 800be38:	1ad2      	subs	r2, r2, r3
 800be3a:	9205      	str	r2, [sp, #20]
 800be3c:	9a06      	ldr	r2, [sp, #24]
 800be3e:	1aed      	subs	r5, r5, r3
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	9306      	str	r3, [sp, #24]
 800be44:	9b08      	ldr	r3, [sp, #32]
 800be46:	b1f3      	cbz	r3, 800be86 <_dtoa_r+0x7b6>
 800be48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f000 80a3 	beq.w	800bf96 <_dtoa_r+0x8c6>
 800be50:	2e00      	cmp	r6, #0
 800be52:	dd10      	ble.n	800be76 <_dtoa_r+0x7a6>
 800be54:	4639      	mov	r1, r7
 800be56:	4632      	mov	r2, r6
 800be58:	4620      	mov	r0, r4
 800be5a:	f000 fce1 	bl	800c820 <__pow5mult>
 800be5e:	4652      	mov	r2, sl
 800be60:	4601      	mov	r1, r0
 800be62:	4607      	mov	r7, r0
 800be64:	4620      	mov	r0, r4
 800be66:	f000 fc31 	bl	800c6cc <__multiply>
 800be6a:	4651      	mov	r1, sl
 800be6c:	4680      	mov	r8, r0
 800be6e:	4620      	mov	r0, r4
 800be70:	f000 fb60 	bl	800c534 <_Bfree>
 800be74:	46c2      	mov	sl, r8
 800be76:	9b08      	ldr	r3, [sp, #32]
 800be78:	1b9a      	subs	r2, r3, r6
 800be7a:	d004      	beq.n	800be86 <_dtoa_r+0x7b6>
 800be7c:	4651      	mov	r1, sl
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 fcce 	bl	800c820 <__pow5mult>
 800be84:	4682      	mov	sl, r0
 800be86:	2101      	movs	r1, #1
 800be88:	4620      	mov	r0, r4
 800be8a:	f000 fc09 	bl	800c6a0 <__i2b>
 800be8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be90:	2b00      	cmp	r3, #0
 800be92:	4606      	mov	r6, r0
 800be94:	f340 8081 	ble.w	800bf9a <_dtoa_r+0x8ca>
 800be98:	461a      	mov	r2, r3
 800be9a:	4601      	mov	r1, r0
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 fcbf 	bl	800c820 <__pow5mult>
 800bea2:	9b07      	ldr	r3, [sp, #28]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	4606      	mov	r6, r0
 800bea8:	dd7a      	ble.n	800bfa0 <_dtoa_r+0x8d0>
 800beaa:	f04f 0800 	mov.w	r8, #0
 800beae:	6933      	ldr	r3, [r6, #16]
 800beb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800beb4:	6918      	ldr	r0, [r3, #16]
 800beb6:	f000 fba5 	bl	800c604 <__hi0bits>
 800beba:	f1c0 0020 	rsb	r0, r0, #32
 800bebe:	9b06      	ldr	r3, [sp, #24]
 800bec0:	4418      	add	r0, r3
 800bec2:	f010 001f 	ands.w	r0, r0, #31
 800bec6:	f000 8094 	beq.w	800bff2 <_dtoa_r+0x922>
 800beca:	f1c0 0320 	rsb	r3, r0, #32
 800bece:	2b04      	cmp	r3, #4
 800bed0:	f340 8085 	ble.w	800bfde <_dtoa_r+0x90e>
 800bed4:	9b05      	ldr	r3, [sp, #20]
 800bed6:	f1c0 001c 	rsb	r0, r0, #28
 800beda:	4403      	add	r3, r0
 800bedc:	9305      	str	r3, [sp, #20]
 800bede:	9b06      	ldr	r3, [sp, #24]
 800bee0:	4403      	add	r3, r0
 800bee2:	4405      	add	r5, r0
 800bee4:	9306      	str	r3, [sp, #24]
 800bee6:	9b05      	ldr	r3, [sp, #20]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	dd05      	ble.n	800bef8 <_dtoa_r+0x828>
 800beec:	4651      	mov	r1, sl
 800beee:	461a      	mov	r2, r3
 800bef0:	4620      	mov	r0, r4
 800bef2:	f000 fcef 	bl	800c8d4 <__lshift>
 800bef6:	4682      	mov	sl, r0
 800bef8:	9b06      	ldr	r3, [sp, #24]
 800befa:	2b00      	cmp	r3, #0
 800befc:	dd05      	ble.n	800bf0a <_dtoa_r+0x83a>
 800befe:	4631      	mov	r1, r6
 800bf00:	461a      	mov	r2, r3
 800bf02:	4620      	mov	r0, r4
 800bf04:	f000 fce6 	bl	800c8d4 <__lshift>
 800bf08:	4606      	mov	r6, r0
 800bf0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d072      	beq.n	800bff6 <_dtoa_r+0x926>
 800bf10:	4631      	mov	r1, r6
 800bf12:	4650      	mov	r0, sl
 800bf14:	f000 fd4a 	bl	800c9ac <__mcmp>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	da6c      	bge.n	800bff6 <_dtoa_r+0x926>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	4651      	mov	r1, sl
 800bf20:	220a      	movs	r2, #10
 800bf22:	4620      	mov	r0, r4
 800bf24:	f000 fb28 	bl	800c578 <__multadd>
 800bf28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf2e:	4682      	mov	sl, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f000 81b0 	beq.w	800c296 <_dtoa_r+0xbc6>
 800bf36:	2300      	movs	r3, #0
 800bf38:	4639      	mov	r1, r7
 800bf3a:	220a      	movs	r2, #10
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f000 fb1b 	bl	800c578 <__multadd>
 800bf42:	9b01      	ldr	r3, [sp, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	4607      	mov	r7, r0
 800bf48:	f300 8096 	bgt.w	800c078 <_dtoa_r+0x9a8>
 800bf4c:	9b07      	ldr	r3, [sp, #28]
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	dc59      	bgt.n	800c006 <_dtoa_r+0x936>
 800bf52:	e091      	b.n	800c078 <_dtoa_r+0x9a8>
 800bf54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf5a:	e758      	b.n	800be0e <_dtoa_r+0x73e>
 800bf5c:	9b04      	ldr	r3, [sp, #16]
 800bf5e:	1e5e      	subs	r6, r3, #1
 800bf60:	9b08      	ldr	r3, [sp, #32]
 800bf62:	42b3      	cmp	r3, r6
 800bf64:	bfbf      	itttt	lt
 800bf66:	9b08      	ldrlt	r3, [sp, #32]
 800bf68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bf6a:	9608      	strlt	r6, [sp, #32]
 800bf6c:	1af3      	sublt	r3, r6, r3
 800bf6e:	bfb4      	ite	lt
 800bf70:	18d2      	addlt	r2, r2, r3
 800bf72:	1b9e      	subge	r6, r3, r6
 800bf74:	9b04      	ldr	r3, [sp, #16]
 800bf76:	bfbc      	itt	lt
 800bf78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bf7a:	2600      	movlt	r6, #0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	bfb7      	itett	lt
 800bf80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bf84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bf88:	1a9d      	sublt	r5, r3, r2
 800bf8a:	2300      	movlt	r3, #0
 800bf8c:	e741      	b.n	800be12 <_dtoa_r+0x742>
 800bf8e:	9e08      	ldr	r6, [sp, #32]
 800bf90:	9d05      	ldr	r5, [sp, #20]
 800bf92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bf94:	e748      	b.n	800be28 <_dtoa_r+0x758>
 800bf96:	9a08      	ldr	r2, [sp, #32]
 800bf98:	e770      	b.n	800be7c <_dtoa_r+0x7ac>
 800bf9a:	9b07      	ldr	r3, [sp, #28]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	dc19      	bgt.n	800bfd4 <_dtoa_r+0x904>
 800bfa0:	9b02      	ldr	r3, [sp, #8]
 800bfa2:	b9bb      	cbnz	r3, 800bfd4 <_dtoa_r+0x904>
 800bfa4:	9b03      	ldr	r3, [sp, #12]
 800bfa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfaa:	b99b      	cbnz	r3, 800bfd4 <_dtoa_r+0x904>
 800bfac:	9b03      	ldr	r3, [sp, #12]
 800bfae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfb2:	0d1b      	lsrs	r3, r3, #20
 800bfb4:	051b      	lsls	r3, r3, #20
 800bfb6:	b183      	cbz	r3, 800bfda <_dtoa_r+0x90a>
 800bfb8:	9b05      	ldr	r3, [sp, #20]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	9305      	str	r3, [sp, #20]
 800bfbe:	9b06      	ldr	r3, [sp, #24]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	9306      	str	r3, [sp, #24]
 800bfc4:	f04f 0801 	mov.w	r8, #1
 800bfc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f47f af6f 	bne.w	800beae <_dtoa_r+0x7de>
 800bfd0:	2001      	movs	r0, #1
 800bfd2:	e774      	b.n	800bebe <_dtoa_r+0x7ee>
 800bfd4:	f04f 0800 	mov.w	r8, #0
 800bfd8:	e7f6      	b.n	800bfc8 <_dtoa_r+0x8f8>
 800bfda:	4698      	mov	r8, r3
 800bfdc:	e7f4      	b.n	800bfc8 <_dtoa_r+0x8f8>
 800bfde:	d082      	beq.n	800bee6 <_dtoa_r+0x816>
 800bfe0:	9a05      	ldr	r2, [sp, #20]
 800bfe2:	331c      	adds	r3, #28
 800bfe4:	441a      	add	r2, r3
 800bfe6:	9205      	str	r2, [sp, #20]
 800bfe8:	9a06      	ldr	r2, [sp, #24]
 800bfea:	441a      	add	r2, r3
 800bfec:	441d      	add	r5, r3
 800bfee:	9206      	str	r2, [sp, #24]
 800bff0:	e779      	b.n	800bee6 <_dtoa_r+0x816>
 800bff2:	4603      	mov	r3, r0
 800bff4:	e7f4      	b.n	800bfe0 <_dtoa_r+0x910>
 800bff6:	9b04      	ldr	r3, [sp, #16]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	dc37      	bgt.n	800c06c <_dtoa_r+0x99c>
 800bffc:	9b07      	ldr	r3, [sp, #28]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	dd34      	ble.n	800c06c <_dtoa_r+0x99c>
 800c002:	9b04      	ldr	r3, [sp, #16]
 800c004:	9301      	str	r3, [sp, #4]
 800c006:	9b01      	ldr	r3, [sp, #4]
 800c008:	b963      	cbnz	r3, 800c024 <_dtoa_r+0x954>
 800c00a:	4631      	mov	r1, r6
 800c00c:	2205      	movs	r2, #5
 800c00e:	4620      	mov	r0, r4
 800c010:	f000 fab2 	bl	800c578 <__multadd>
 800c014:	4601      	mov	r1, r0
 800c016:	4606      	mov	r6, r0
 800c018:	4650      	mov	r0, sl
 800c01a:	f000 fcc7 	bl	800c9ac <__mcmp>
 800c01e:	2800      	cmp	r0, #0
 800c020:	f73f adbb 	bgt.w	800bb9a <_dtoa_r+0x4ca>
 800c024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c026:	9d00      	ldr	r5, [sp, #0]
 800c028:	ea6f 0b03 	mvn.w	fp, r3
 800c02c:	f04f 0800 	mov.w	r8, #0
 800c030:	4631      	mov	r1, r6
 800c032:	4620      	mov	r0, r4
 800c034:	f000 fa7e 	bl	800c534 <_Bfree>
 800c038:	2f00      	cmp	r7, #0
 800c03a:	f43f aeab 	beq.w	800bd94 <_dtoa_r+0x6c4>
 800c03e:	f1b8 0f00 	cmp.w	r8, #0
 800c042:	d005      	beq.n	800c050 <_dtoa_r+0x980>
 800c044:	45b8      	cmp	r8, r7
 800c046:	d003      	beq.n	800c050 <_dtoa_r+0x980>
 800c048:	4641      	mov	r1, r8
 800c04a:	4620      	mov	r0, r4
 800c04c:	f000 fa72 	bl	800c534 <_Bfree>
 800c050:	4639      	mov	r1, r7
 800c052:	4620      	mov	r0, r4
 800c054:	f000 fa6e 	bl	800c534 <_Bfree>
 800c058:	e69c      	b.n	800bd94 <_dtoa_r+0x6c4>
 800c05a:	2600      	movs	r6, #0
 800c05c:	4637      	mov	r7, r6
 800c05e:	e7e1      	b.n	800c024 <_dtoa_r+0x954>
 800c060:	46bb      	mov	fp, r7
 800c062:	4637      	mov	r7, r6
 800c064:	e599      	b.n	800bb9a <_dtoa_r+0x4ca>
 800c066:	bf00      	nop
 800c068:	40240000 	.word	0x40240000
 800c06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f000 80c8 	beq.w	800c204 <_dtoa_r+0xb34>
 800c074:	9b04      	ldr	r3, [sp, #16]
 800c076:	9301      	str	r3, [sp, #4]
 800c078:	2d00      	cmp	r5, #0
 800c07a:	dd05      	ble.n	800c088 <_dtoa_r+0x9b8>
 800c07c:	4639      	mov	r1, r7
 800c07e:	462a      	mov	r2, r5
 800c080:	4620      	mov	r0, r4
 800c082:	f000 fc27 	bl	800c8d4 <__lshift>
 800c086:	4607      	mov	r7, r0
 800c088:	f1b8 0f00 	cmp.w	r8, #0
 800c08c:	d05b      	beq.n	800c146 <_dtoa_r+0xa76>
 800c08e:	6879      	ldr	r1, [r7, #4]
 800c090:	4620      	mov	r0, r4
 800c092:	f000 fa0f 	bl	800c4b4 <_Balloc>
 800c096:	4605      	mov	r5, r0
 800c098:	b928      	cbnz	r0, 800c0a6 <_dtoa_r+0x9d6>
 800c09a:	4b83      	ldr	r3, [pc, #524]	; (800c2a8 <_dtoa_r+0xbd8>)
 800c09c:	4602      	mov	r2, r0
 800c09e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c0a2:	f7ff bb2e 	b.w	800b702 <_dtoa_r+0x32>
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	3202      	adds	r2, #2
 800c0aa:	0092      	lsls	r2, r2, #2
 800c0ac:	f107 010c 	add.w	r1, r7, #12
 800c0b0:	300c      	adds	r0, #12
 800c0b2:	f001 f801 	bl	800d0b8 <memcpy>
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f000 fc0a 	bl	800c8d4 <__lshift>
 800c0c0:	9b00      	ldr	r3, [sp, #0]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	9304      	str	r3, [sp, #16]
 800c0c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	9308      	str	r3, [sp, #32]
 800c0ce:	9b02      	ldr	r3, [sp, #8]
 800c0d0:	f003 0301 	and.w	r3, r3, #1
 800c0d4:	46b8      	mov	r8, r7
 800c0d6:	9306      	str	r3, [sp, #24]
 800c0d8:	4607      	mov	r7, r0
 800c0da:	9b04      	ldr	r3, [sp, #16]
 800c0dc:	4631      	mov	r1, r6
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	4650      	mov	r0, sl
 800c0e2:	9301      	str	r3, [sp, #4]
 800c0e4:	f7ff fa6c 	bl	800b5c0 <quorem>
 800c0e8:	4641      	mov	r1, r8
 800c0ea:	9002      	str	r0, [sp, #8]
 800c0ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c0f0:	4650      	mov	r0, sl
 800c0f2:	f000 fc5b 	bl	800c9ac <__mcmp>
 800c0f6:	463a      	mov	r2, r7
 800c0f8:	9005      	str	r0, [sp, #20]
 800c0fa:	4631      	mov	r1, r6
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f000 fc71 	bl	800c9e4 <__mdiff>
 800c102:	68c2      	ldr	r2, [r0, #12]
 800c104:	4605      	mov	r5, r0
 800c106:	bb02      	cbnz	r2, 800c14a <_dtoa_r+0xa7a>
 800c108:	4601      	mov	r1, r0
 800c10a:	4650      	mov	r0, sl
 800c10c:	f000 fc4e 	bl	800c9ac <__mcmp>
 800c110:	4602      	mov	r2, r0
 800c112:	4629      	mov	r1, r5
 800c114:	4620      	mov	r0, r4
 800c116:	9209      	str	r2, [sp, #36]	; 0x24
 800c118:	f000 fa0c 	bl	800c534 <_Bfree>
 800c11c:	9b07      	ldr	r3, [sp, #28]
 800c11e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c120:	9d04      	ldr	r5, [sp, #16]
 800c122:	ea43 0102 	orr.w	r1, r3, r2
 800c126:	9b06      	ldr	r3, [sp, #24]
 800c128:	4319      	orrs	r1, r3
 800c12a:	d110      	bne.n	800c14e <_dtoa_r+0xa7e>
 800c12c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c130:	d029      	beq.n	800c186 <_dtoa_r+0xab6>
 800c132:	9b05      	ldr	r3, [sp, #20]
 800c134:	2b00      	cmp	r3, #0
 800c136:	dd02      	ble.n	800c13e <_dtoa_r+0xa6e>
 800c138:	9b02      	ldr	r3, [sp, #8]
 800c13a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c13e:	9b01      	ldr	r3, [sp, #4]
 800c140:	f883 9000 	strb.w	r9, [r3]
 800c144:	e774      	b.n	800c030 <_dtoa_r+0x960>
 800c146:	4638      	mov	r0, r7
 800c148:	e7ba      	b.n	800c0c0 <_dtoa_r+0x9f0>
 800c14a:	2201      	movs	r2, #1
 800c14c:	e7e1      	b.n	800c112 <_dtoa_r+0xa42>
 800c14e:	9b05      	ldr	r3, [sp, #20]
 800c150:	2b00      	cmp	r3, #0
 800c152:	db04      	blt.n	800c15e <_dtoa_r+0xa8e>
 800c154:	9907      	ldr	r1, [sp, #28]
 800c156:	430b      	orrs	r3, r1
 800c158:	9906      	ldr	r1, [sp, #24]
 800c15a:	430b      	orrs	r3, r1
 800c15c:	d120      	bne.n	800c1a0 <_dtoa_r+0xad0>
 800c15e:	2a00      	cmp	r2, #0
 800c160:	dded      	ble.n	800c13e <_dtoa_r+0xa6e>
 800c162:	4651      	mov	r1, sl
 800c164:	2201      	movs	r2, #1
 800c166:	4620      	mov	r0, r4
 800c168:	f000 fbb4 	bl	800c8d4 <__lshift>
 800c16c:	4631      	mov	r1, r6
 800c16e:	4682      	mov	sl, r0
 800c170:	f000 fc1c 	bl	800c9ac <__mcmp>
 800c174:	2800      	cmp	r0, #0
 800c176:	dc03      	bgt.n	800c180 <_dtoa_r+0xab0>
 800c178:	d1e1      	bne.n	800c13e <_dtoa_r+0xa6e>
 800c17a:	f019 0f01 	tst.w	r9, #1
 800c17e:	d0de      	beq.n	800c13e <_dtoa_r+0xa6e>
 800c180:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c184:	d1d8      	bne.n	800c138 <_dtoa_r+0xa68>
 800c186:	9a01      	ldr	r2, [sp, #4]
 800c188:	2339      	movs	r3, #57	; 0x39
 800c18a:	7013      	strb	r3, [r2, #0]
 800c18c:	462b      	mov	r3, r5
 800c18e:	461d      	mov	r5, r3
 800c190:	3b01      	subs	r3, #1
 800c192:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c196:	2a39      	cmp	r2, #57	; 0x39
 800c198:	d06c      	beq.n	800c274 <_dtoa_r+0xba4>
 800c19a:	3201      	adds	r2, #1
 800c19c:	701a      	strb	r2, [r3, #0]
 800c19e:	e747      	b.n	800c030 <_dtoa_r+0x960>
 800c1a0:	2a00      	cmp	r2, #0
 800c1a2:	dd07      	ble.n	800c1b4 <_dtoa_r+0xae4>
 800c1a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c1a8:	d0ed      	beq.n	800c186 <_dtoa_r+0xab6>
 800c1aa:	9a01      	ldr	r2, [sp, #4]
 800c1ac:	f109 0301 	add.w	r3, r9, #1
 800c1b0:	7013      	strb	r3, [r2, #0]
 800c1b2:	e73d      	b.n	800c030 <_dtoa_r+0x960>
 800c1b4:	9b04      	ldr	r3, [sp, #16]
 800c1b6:	9a08      	ldr	r2, [sp, #32]
 800c1b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d043      	beq.n	800c248 <_dtoa_r+0xb78>
 800c1c0:	4651      	mov	r1, sl
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	220a      	movs	r2, #10
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f000 f9d6 	bl	800c578 <__multadd>
 800c1cc:	45b8      	cmp	r8, r7
 800c1ce:	4682      	mov	sl, r0
 800c1d0:	f04f 0300 	mov.w	r3, #0
 800c1d4:	f04f 020a 	mov.w	r2, #10
 800c1d8:	4641      	mov	r1, r8
 800c1da:	4620      	mov	r0, r4
 800c1dc:	d107      	bne.n	800c1ee <_dtoa_r+0xb1e>
 800c1de:	f000 f9cb 	bl	800c578 <__multadd>
 800c1e2:	4680      	mov	r8, r0
 800c1e4:	4607      	mov	r7, r0
 800c1e6:	9b04      	ldr	r3, [sp, #16]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	9304      	str	r3, [sp, #16]
 800c1ec:	e775      	b.n	800c0da <_dtoa_r+0xa0a>
 800c1ee:	f000 f9c3 	bl	800c578 <__multadd>
 800c1f2:	4639      	mov	r1, r7
 800c1f4:	4680      	mov	r8, r0
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	220a      	movs	r2, #10
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f000 f9bc 	bl	800c578 <__multadd>
 800c200:	4607      	mov	r7, r0
 800c202:	e7f0      	b.n	800c1e6 <_dtoa_r+0xb16>
 800c204:	9b04      	ldr	r3, [sp, #16]
 800c206:	9301      	str	r3, [sp, #4]
 800c208:	9d00      	ldr	r5, [sp, #0]
 800c20a:	4631      	mov	r1, r6
 800c20c:	4650      	mov	r0, sl
 800c20e:	f7ff f9d7 	bl	800b5c0 <quorem>
 800c212:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c216:	9b00      	ldr	r3, [sp, #0]
 800c218:	f805 9b01 	strb.w	r9, [r5], #1
 800c21c:	1aea      	subs	r2, r5, r3
 800c21e:	9b01      	ldr	r3, [sp, #4]
 800c220:	4293      	cmp	r3, r2
 800c222:	dd07      	ble.n	800c234 <_dtoa_r+0xb64>
 800c224:	4651      	mov	r1, sl
 800c226:	2300      	movs	r3, #0
 800c228:	220a      	movs	r2, #10
 800c22a:	4620      	mov	r0, r4
 800c22c:	f000 f9a4 	bl	800c578 <__multadd>
 800c230:	4682      	mov	sl, r0
 800c232:	e7ea      	b.n	800c20a <_dtoa_r+0xb3a>
 800c234:	9b01      	ldr	r3, [sp, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	bfc8      	it	gt
 800c23a:	461d      	movgt	r5, r3
 800c23c:	9b00      	ldr	r3, [sp, #0]
 800c23e:	bfd8      	it	le
 800c240:	2501      	movle	r5, #1
 800c242:	441d      	add	r5, r3
 800c244:	f04f 0800 	mov.w	r8, #0
 800c248:	4651      	mov	r1, sl
 800c24a:	2201      	movs	r2, #1
 800c24c:	4620      	mov	r0, r4
 800c24e:	f000 fb41 	bl	800c8d4 <__lshift>
 800c252:	4631      	mov	r1, r6
 800c254:	4682      	mov	sl, r0
 800c256:	f000 fba9 	bl	800c9ac <__mcmp>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	dc96      	bgt.n	800c18c <_dtoa_r+0xabc>
 800c25e:	d102      	bne.n	800c266 <_dtoa_r+0xb96>
 800c260:	f019 0f01 	tst.w	r9, #1
 800c264:	d192      	bne.n	800c18c <_dtoa_r+0xabc>
 800c266:	462b      	mov	r3, r5
 800c268:	461d      	mov	r5, r3
 800c26a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c26e:	2a30      	cmp	r2, #48	; 0x30
 800c270:	d0fa      	beq.n	800c268 <_dtoa_r+0xb98>
 800c272:	e6dd      	b.n	800c030 <_dtoa_r+0x960>
 800c274:	9a00      	ldr	r2, [sp, #0]
 800c276:	429a      	cmp	r2, r3
 800c278:	d189      	bne.n	800c18e <_dtoa_r+0xabe>
 800c27a:	f10b 0b01 	add.w	fp, fp, #1
 800c27e:	2331      	movs	r3, #49	; 0x31
 800c280:	e796      	b.n	800c1b0 <_dtoa_r+0xae0>
 800c282:	4b0a      	ldr	r3, [pc, #40]	; (800c2ac <_dtoa_r+0xbdc>)
 800c284:	f7ff ba99 	b.w	800b7ba <_dtoa_r+0xea>
 800c288:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	f47f aa6d 	bne.w	800b76a <_dtoa_r+0x9a>
 800c290:	4b07      	ldr	r3, [pc, #28]	; (800c2b0 <_dtoa_r+0xbe0>)
 800c292:	f7ff ba92 	b.w	800b7ba <_dtoa_r+0xea>
 800c296:	9b01      	ldr	r3, [sp, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	dcb5      	bgt.n	800c208 <_dtoa_r+0xb38>
 800c29c:	9b07      	ldr	r3, [sp, #28]
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	f73f aeb1 	bgt.w	800c006 <_dtoa_r+0x936>
 800c2a4:	e7b0      	b.n	800c208 <_dtoa_r+0xb38>
 800c2a6:	bf00      	nop
 800c2a8:	0800d81d 	.word	0x0800d81d
 800c2ac:	0800d77d 	.word	0x0800d77d
 800c2b0:	0800d7a1 	.word	0x0800d7a1

0800c2b4 <_free_r>:
 800c2b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2b6:	2900      	cmp	r1, #0
 800c2b8:	d044      	beq.n	800c344 <_free_r+0x90>
 800c2ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2be:	9001      	str	r0, [sp, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f1a1 0404 	sub.w	r4, r1, #4
 800c2c6:	bfb8      	it	lt
 800c2c8:	18e4      	addlt	r4, r4, r3
 800c2ca:	f000 f8e7 	bl	800c49c <__malloc_lock>
 800c2ce:	4a1e      	ldr	r2, [pc, #120]	; (800c348 <_free_r+0x94>)
 800c2d0:	9801      	ldr	r0, [sp, #4]
 800c2d2:	6813      	ldr	r3, [r2, #0]
 800c2d4:	b933      	cbnz	r3, 800c2e4 <_free_r+0x30>
 800c2d6:	6063      	str	r3, [r4, #4]
 800c2d8:	6014      	str	r4, [r2, #0]
 800c2da:	b003      	add	sp, #12
 800c2dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2e0:	f000 b8e2 	b.w	800c4a8 <__malloc_unlock>
 800c2e4:	42a3      	cmp	r3, r4
 800c2e6:	d908      	bls.n	800c2fa <_free_r+0x46>
 800c2e8:	6825      	ldr	r5, [r4, #0]
 800c2ea:	1961      	adds	r1, r4, r5
 800c2ec:	428b      	cmp	r3, r1
 800c2ee:	bf01      	itttt	eq
 800c2f0:	6819      	ldreq	r1, [r3, #0]
 800c2f2:	685b      	ldreq	r3, [r3, #4]
 800c2f4:	1949      	addeq	r1, r1, r5
 800c2f6:	6021      	streq	r1, [r4, #0]
 800c2f8:	e7ed      	b.n	800c2d6 <_free_r+0x22>
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	b10b      	cbz	r3, 800c304 <_free_r+0x50>
 800c300:	42a3      	cmp	r3, r4
 800c302:	d9fa      	bls.n	800c2fa <_free_r+0x46>
 800c304:	6811      	ldr	r1, [r2, #0]
 800c306:	1855      	adds	r5, r2, r1
 800c308:	42a5      	cmp	r5, r4
 800c30a:	d10b      	bne.n	800c324 <_free_r+0x70>
 800c30c:	6824      	ldr	r4, [r4, #0]
 800c30e:	4421      	add	r1, r4
 800c310:	1854      	adds	r4, r2, r1
 800c312:	42a3      	cmp	r3, r4
 800c314:	6011      	str	r1, [r2, #0]
 800c316:	d1e0      	bne.n	800c2da <_free_r+0x26>
 800c318:	681c      	ldr	r4, [r3, #0]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	6053      	str	r3, [r2, #4]
 800c31e:	440c      	add	r4, r1
 800c320:	6014      	str	r4, [r2, #0]
 800c322:	e7da      	b.n	800c2da <_free_r+0x26>
 800c324:	d902      	bls.n	800c32c <_free_r+0x78>
 800c326:	230c      	movs	r3, #12
 800c328:	6003      	str	r3, [r0, #0]
 800c32a:	e7d6      	b.n	800c2da <_free_r+0x26>
 800c32c:	6825      	ldr	r5, [r4, #0]
 800c32e:	1961      	adds	r1, r4, r5
 800c330:	428b      	cmp	r3, r1
 800c332:	bf04      	itt	eq
 800c334:	6819      	ldreq	r1, [r3, #0]
 800c336:	685b      	ldreq	r3, [r3, #4]
 800c338:	6063      	str	r3, [r4, #4]
 800c33a:	bf04      	itt	eq
 800c33c:	1949      	addeq	r1, r1, r5
 800c33e:	6021      	streq	r1, [r4, #0]
 800c340:	6054      	str	r4, [r2, #4]
 800c342:	e7ca      	b.n	800c2da <_free_r+0x26>
 800c344:	b003      	add	sp, #12
 800c346:	bd30      	pop	{r4, r5, pc}
 800c348:	200009bc 	.word	0x200009bc

0800c34c <malloc>:
 800c34c:	4b02      	ldr	r3, [pc, #8]	; (800c358 <malloc+0xc>)
 800c34e:	4601      	mov	r1, r0
 800c350:	6818      	ldr	r0, [r3, #0]
 800c352:	f000 b823 	b.w	800c39c <_malloc_r>
 800c356:	bf00      	nop
 800c358:	20000068 	.word	0x20000068

0800c35c <sbrk_aligned>:
 800c35c:	b570      	push	{r4, r5, r6, lr}
 800c35e:	4e0e      	ldr	r6, [pc, #56]	; (800c398 <sbrk_aligned+0x3c>)
 800c360:	460c      	mov	r4, r1
 800c362:	6831      	ldr	r1, [r6, #0]
 800c364:	4605      	mov	r5, r0
 800c366:	b911      	cbnz	r1, 800c36e <sbrk_aligned+0x12>
 800c368:	f000 fe96 	bl	800d098 <_sbrk_r>
 800c36c:	6030      	str	r0, [r6, #0]
 800c36e:	4621      	mov	r1, r4
 800c370:	4628      	mov	r0, r5
 800c372:	f000 fe91 	bl	800d098 <_sbrk_r>
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	d00a      	beq.n	800c390 <sbrk_aligned+0x34>
 800c37a:	1cc4      	adds	r4, r0, #3
 800c37c:	f024 0403 	bic.w	r4, r4, #3
 800c380:	42a0      	cmp	r0, r4
 800c382:	d007      	beq.n	800c394 <sbrk_aligned+0x38>
 800c384:	1a21      	subs	r1, r4, r0
 800c386:	4628      	mov	r0, r5
 800c388:	f000 fe86 	bl	800d098 <_sbrk_r>
 800c38c:	3001      	adds	r0, #1
 800c38e:	d101      	bne.n	800c394 <sbrk_aligned+0x38>
 800c390:	f04f 34ff 	mov.w	r4, #4294967295
 800c394:	4620      	mov	r0, r4
 800c396:	bd70      	pop	{r4, r5, r6, pc}
 800c398:	200009c0 	.word	0x200009c0

0800c39c <_malloc_r>:
 800c39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a0:	1ccd      	adds	r5, r1, #3
 800c3a2:	f025 0503 	bic.w	r5, r5, #3
 800c3a6:	3508      	adds	r5, #8
 800c3a8:	2d0c      	cmp	r5, #12
 800c3aa:	bf38      	it	cc
 800c3ac:	250c      	movcc	r5, #12
 800c3ae:	2d00      	cmp	r5, #0
 800c3b0:	4607      	mov	r7, r0
 800c3b2:	db01      	blt.n	800c3b8 <_malloc_r+0x1c>
 800c3b4:	42a9      	cmp	r1, r5
 800c3b6:	d905      	bls.n	800c3c4 <_malloc_r+0x28>
 800c3b8:	230c      	movs	r3, #12
 800c3ba:	603b      	str	r3, [r7, #0]
 800c3bc:	2600      	movs	r6, #0
 800c3be:	4630      	mov	r0, r6
 800c3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c498 <_malloc_r+0xfc>
 800c3c8:	f000 f868 	bl	800c49c <__malloc_lock>
 800c3cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c3d0:	461c      	mov	r4, r3
 800c3d2:	bb5c      	cbnz	r4, 800c42c <_malloc_r+0x90>
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	f7ff ffc0 	bl	800c35c <sbrk_aligned>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	4604      	mov	r4, r0
 800c3e0:	d155      	bne.n	800c48e <_malloc_r+0xf2>
 800c3e2:	f8d8 4000 	ldr.w	r4, [r8]
 800c3e6:	4626      	mov	r6, r4
 800c3e8:	2e00      	cmp	r6, #0
 800c3ea:	d145      	bne.n	800c478 <_malloc_r+0xdc>
 800c3ec:	2c00      	cmp	r4, #0
 800c3ee:	d048      	beq.n	800c482 <_malloc_r+0xe6>
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	4631      	mov	r1, r6
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	eb04 0903 	add.w	r9, r4, r3
 800c3fa:	f000 fe4d 	bl	800d098 <_sbrk_r>
 800c3fe:	4581      	cmp	r9, r0
 800c400:	d13f      	bne.n	800c482 <_malloc_r+0xe6>
 800c402:	6821      	ldr	r1, [r4, #0]
 800c404:	1a6d      	subs	r5, r5, r1
 800c406:	4629      	mov	r1, r5
 800c408:	4638      	mov	r0, r7
 800c40a:	f7ff ffa7 	bl	800c35c <sbrk_aligned>
 800c40e:	3001      	adds	r0, #1
 800c410:	d037      	beq.n	800c482 <_malloc_r+0xe6>
 800c412:	6823      	ldr	r3, [r4, #0]
 800c414:	442b      	add	r3, r5
 800c416:	6023      	str	r3, [r4, #0]
 800c418:	f8d8 3000 	ldr.w	r3, [r8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d038      	beq.n	800c492 <_malloc_r+0xf6>
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	42a2      	cmp	r2, r4
 800c424:	d12b      	bne.n	800c47e <_malloc_r+0xe2>
 800c426:	2200      	movs	r2, #0
 800c428:	605a      	str	r2, [r3, #4]
 800c42a:	e00f      	b.n	800c44c <_malloc_r+0xb0>
 800c42c:	6822      	ldr	r2, [r4, #0]
 800c42e:	1b52      	subs	r2, r2, r5
 800c430:	d41f      	bmi.n	800c472 <_malloc_r+0xd6>
 800c432:	2a0b      	cmp	r2, #11
 800c434:	d917      	bls.n	800c466 <_malloc_r+0xca>
 800c436:	1961      	adds	r1, r4, r5
 800c438:	42a3      	cmp	r3, r4
 800c43a:	6025      	str	r5, [r4, #0]
 800c43c:	bf18      	it	ne
 800c43e:	6059      	strne	r1, [r3, #4]
 800c440:	6863      	ldr	r3, [r4, #4]
 800c442:	bf08      	it	eq
 800c444:	f8c8 1000 	streq.w	r1, [r8]
 800c448:	5162      	str	r2, [r4, r5]
 800c44a:	604b      	str	r3, [r1, #4]
 800c44c:	4638      	mov	r0, r7
 800c44e:	f104 060b 	add.w	r6, r4, #11
 800c452:	f000 f829 	bl	800c4a8 <__malloc_unlock>
 800c456:	f026 0607 	bic.w	r6, r6, #7
 800c45a:	1d23      	adds	r3, r4, #4
 800c45c:	1af2      	subs	r2, r6, r3
 800c45e:	d0ae      	beq.n	800c3be <_malloc_r+0x22>
 800c460:	1b9b      	subs	r3, r3, r6
 800c462:	50a3      	str	r3, [r4, r2]
 800c464:	e7ab      	b.n	800c3be <_malloc_r+0x22>
 800c466:	42a3      	cmp	r3, r4
 800c468:	6862      	ldr	r2, [r4, #4]
 800c46a:	d1dd      	bne.n	800c428 <_malloc_r+0x8c>
 800c46c:	f8c8 2000 	str.w	r2, [r8]
 800c470:	e7ec      	b.n	800c44c <_malloc_r+0xb0>
 800c472:	4623      	mov	r3, r4
 800c474:	6864      	ldr	r4, [r4, #4]
 800c476:	e7ac      	b.n	800c3d2 <_malloc_r+0x36>
 800c478:	4634      	mov	r4, r6
 800c47a:	6876      	ldr	r6, [r6, #4]
 800c47c:	e7b4      	b.n	800c3e8 <_malloc_r+0x4c>
 800c47e:	4613      	mov	r3, r2
 800c480:	e7cc      	b.n	800c41c <_malloc_r+0x80>
 800c482:	230c      	movs	r3, #12
 800c484:	603b      	str	r3, [r7, #0]
 800c486:	4638      	mov	r0, r7
 800c488:	f000 f80e 	bl	800c4a8 <__malloc_unlock>
 800c48c:	e797      	b.n	800c3be <_malloc_r+0x22>
 800c48e:	6025      	str	r5, [r4, #0]
 800c490:	e7dc      	b.n	800c44c <_malloc_r+0xb0>
 800c492:	605b      	str	r3, [r3, #4]
 800c494:	deff      	udf	#255	; 0xff
 800c496:	bf00      	nop
 800c498:	200009bc 	.word	0x200009bc

0800c49c <__malloc_lock>:
 800c49c:	4801      	ldr	r0, [pc, #4]	; (800c4a4 <__malloc_lock+0x8>)
 800c49e:	f7ff b88d 	b.w	800b5bc <__retarget_lock_acquire_recursive>
 800c4a2:	bf00      	nop
 800c4a4:	200009b8 	.word	0x200009b8

0800c4a8 <__malloc_unlock>:
 800c4a8:	4801      	ldr	r0, [pc, #4]	; (800c4b0 <__malloc_unlock+0x8>)
 800c4aa:	f7ff b888 	b.w	800b5be <__retarget_lock_release_recursive>
 800c4ae:	bf00      	nop
 800c4b0:	200009b8 	.word	0x200009b8

0800c4b4 <_Balloc>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	69c6      	ldr	r6, [r0, #28]
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	460d      	mov	r5, r1
 800c4bc:	b976      	cbnz	r6, 800c4dc <_Balloc+0x28>
 800c4be:	2010      	movs	r0, #16
 800c4c0:	f7ff ff44 	bl	800c34c <malloc>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	61e0      	str	r0, [r4, #28]
 800c4c8:	b920      	cbnz	r0, 800c4d4 <_Balloc+0x20>
 800c4ca:	4b18      	ldr	r3, [pc, #96]	; (800c52c <_Balloc+0x78>)
 800c4cc:	4818      	ldr	r0, [pc, #96]	; (800c530 <_Balloc+0x7c>)
 800c4ce:	216b      	movs	r1, #107	; 0x6b
 800c4d0:	f000 fe00 	bl	800d0d4 <__assert_func>
 800c4d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4d8:	6006      	str	r6, [r0, #0]
 800c4da:	60c6      	str	r6, [r0, #12]
 800c4dc:	69e6      	ldr	r6, [r4, #28]
 800c4de:	68f3      	ldr	r3, [r6, #12]
 800c4e0:	b183      	cbz	r3, 800c504 <_Balloc+0x50>
 800c4e2:	69e3      	ldr	r3, [r4, #28]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4ea:	b9b8      	cbnz	r0, 800c51c <_Balloc+0x68>
 800c4ec:	2101      	movs	r1, #1
 800c4ee:	fa01 f605 	lsl.w	r6, r1, r5
 800c4f2:	1d72      	adds	r2, r6, #5
 800c4f4:	0092      	lsls	r2, r2, #2
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f000 fe0a 	bl	800d110 <_calloc_r>
 800c4fc:	b160      	cbz	r0, 800c518 <_Balloc+0x64>
 800c4fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c502:	e00e      	b.n	800c522 <_Balloc+0x6e>
 800c504:	2221      	movs	r2, #33	; 0x21
 800c506:	2104      	movs	r1, #4
 800c508:	4620      	mov	r0, r4
 800c50a:	f000 fe01 	bl	800d110 <_calloc_r>
 800c50e:	69e3      	ldr	r3, [r4, #28]
 800c510:	60f0      	str	r0, [r6, #12]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1e4      	bne.n	800c4e2 <_Balloc+0x2e>
 800c518:	2000      	movs	r0, #0
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
 800c51c:	6802      	ldr	r2, [r0, #0]
 800c51e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c522:	2300      	movs	r3, #0
 800c524:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c528:	e7f7      	b.n	800c51a <_Balloc+0x66>
 800c52a:	bf00      	nop
 800c52c:	0800d7ae 	.word	0x0800d7ae
 800c530:	0800d82e 	.word	0x0800d82e

0800c534 <_Bfree>:
 800c534:	b570      	push	{r4, r5, r6, lr}
 800c536:	69c6      	ldr	r6, [r0, #28]
 800c538:	4605      	mov	r5, r0
 800c53a:	460c      	mov	r4, r1
 800c53c:	b976      	cbnz	r6, 800c55c <_Bfree+0x28>
 800c53e:	2010      	movs	r0, #16
 800c540:	f7ff ff04 	bl	800c34c <malloc>
 800c544:	4602      	mov	r2, r0
 800c546:	61e8      	str	r0, [r5, #28]
 800c548:	b920      	cbnz	r0, 800c554 <_Bfree+0x20>
 800c54a:	4b09      	ldr	r3, [pc, #36]	; (800c570 <_Bfree+0x3c>)
 800c54c:	4809      	ldr	r0, [pc, #36]	; (800c574 <_Bfree+0x40>)
 800c54e:	218f      	movs	r1, #143	; 0x8f
 800c550:	f000 fdc0 	bl	800d0d4 <__assert_func>
 800c554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c558:	6006      	str	r6, [r0, #0]
 800c55a:	60c6      	str	r6, [r0, #12]
 800c55c:	b13c      	cbz	r4, 800c56e <_Bfree+0x3a>
 800c55e:	69eb      	ldr	r3, [r5, #28]
 800c560:	6862      	ldr	r2, [r4, #4]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c568:	6021      	str	r1, [r4, #0]
 800c56a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c56e:	bd70      	pop	{r4, r5, r6, pc}
 800c570:	0800d7ae 	.word	0x0800d7ae
 800c574:	0800d82e 	.word	0x0800d82e

0800c578 <__multadd>:
 800c578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c57c:	690d      	ldr	r5, [r1, #16]
 800c57e:	4607      	mov	r7, r0
 800c580:	460c      	mov	r4, r1
 800c582:	461e      	mov	r6, r3
 800c584:	f101 0c14 	add.w	ip, r1, #20
 800c588:	2000      	movs	r0, #0
 800c58a:	f8dc 3000 	ldr.w	r3, [ip]
 800c58e:	b299      	uxth	r1, r3
 800c590:	fb02 6101 	mla	r1, r2, r1, r6
 800c594:	0c1e      	lsrs	r6, r3, #16
 800c596:	0c0b      	lsrs	r3, r1, #16
 800c598:	fb02 3306 	mla	r3, r2, r6, r3
 800c59c:	b289      	uxth	r1, r1
 800c59e:	3001      	adds	r0, #1
 800c5a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c5a4:	4285      	cmp	r5, r0
 800c5a6:	f84c 1b04 	str.w	r1, [ip], #4
 800c5aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5ae:	dcec      	bgt.n	800c58a <__multadd+0x12>
 800c5b0:	b30e      	cbz	r6, 800c5f6 <__multadd+0x7e>
 800c5b2:	68a3      	ldr	r3, [r4, #8]
 800c5b4:	42ab      	cmp	r3, r5
 800c5b6:	dc19      	bgt.n	800c5ec <__multadd+0x74>
 800c5b8:	6861      	ldr	r1, [r4, #4]
 800c5ba:	4638      	mov	r0, r7
 800c5bc:	3101      	adds	r1, #1
 800c5be:	f7ff ff79 	bl	800c4b4 <_Balloc>
 800c5c2:	4680      	mov	r8, r0
 800c5c4:	b928      	cbnz	r0, 800c5d2 <__multadd+0x5a>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	4b0c      	ldr	r3, [pc, #48]	; (800c5fc <__multadd+0x84>)
 800c5ca:	480d      	ldr	r0, [pc, #52]	; (800c600 <__multadd+0x88>)
 800c5cc:	21ba      	movs	r1, #186	; 0xba
 800c5ce:	f000 fd81 	bl	800d0d4 <__assert_func>
 800c5d2:	6922      	ldr	r2, [r4, #16]
 800c5d4:	3202      	adds	r2, #2
 800c5d6:	f104 010c 	add.w	r1, r4, #12
 800c5da:	0092      	lsls	r2, r2, #2
 800c5dc:	300c      	adds	r0, #12
 800c5de:	f000 fd6b 	bl	800d0b8 <memcpy>
 800c5e2:	4621      	mov	r1, r4
 800c5e4:	4638      	mov	r0, r7
 800c5e6:	f7ff ffa5 	bl	800c534 <_Bfree>
 800c5ea:	4644      	mov	r4, r8
 800c5ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5f0:	3501      	adds	r5, #1
 800c5f2:	615e      	str	r6, [r3, #20]
 800c5f4:	6125      	str	r5, [r4, #16]
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5fc:	0800d81d 	.word	0x0800d81d
 800c600:	0800d82e 	.word	0x0800d82e

0800c604 <__hi0bits>:
 800c604:	0c03      	lsrs	r3, r0, #16
 800c606:	041b      	lsls	r3, r3, #16
 800c608:	b9d3      	cbnz	r3, 800c640 <__hi0bits+0x3c>
 800c60a:	0400      	lsls	r0, r0, #16
 800c60c:	2310      	movs	r3, #16
 800c60e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c612:	bf04      	itt	eq
 800c614:	0200      	lsleq	r0, r0, #8
 800c616:	3308      	addeq	r3, #8
 800c618:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c61c:	bf04      	itt	eq
 800c61e:	0100      	lsleq	r0, r0, #4
 800c620:	3304      	addeq	r3, #4
 800c622:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c626:	bf04      	itt	eq
 800c628:	0080      	lsleq	r0, r0, #2
 800c62a:	3302      	addeq	r3, #2
 800c62c:	2800      	cmp	r0, #0
 800c62e:	db05      	blt.n	800c63c <__hi0bits+0x38>
 800c630:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c634:	f103 0301 	add.w	r3, r3, #1
 800c638:	bf08      	it	eq
 800c63a:	2320      	moveq	r3, #32
 800c63c:	4618      	mov	r0, r3
 800c63e:	4770      	bx	lr
 800c640:	2300      	movs	r3, #0
 800c642:	e7e4      	b.n	800c60e <__hi0bits+0xa>

0800c644 <__lo0bits>:
 800c644:	6803      	ldr	r3, [r0, #0]
 800c646:	f013 0207 	ands.w	r2, r3, #7
 800c64a:	d00c      	beq.n	800c666 <__lo0bits+0x22>
 800c64c:	07d9      	lsls	r1, r3, #31
 800c64e:	d422      	bmi.n	800c696 <__lo0bits+0x52>
 800c650:	079a      	lsls	r2, r3, #30
 800c652:	bf49      	itett	mi
 800c654:	085b      	lsrmi	r3, r3, #1
 800c656:	089b      	lsrpl	r3, r3, #2
 800c658:	6003      	strmi	r3, [r0, #0]
 800c65a:	2201      	movmi	r2, #1
 800c65c:	bf5c      	itt	pl
 800c65e:	6003      	strpl	r3, [r0, #0]
 800c660:	2202      	movpl	r2, #2
 800c662:	4610      	mov	r0, r2
 800c664:	4770      	bx	lr
 800c666:	b299      	uxth	r1, r3
 800c668:	b909      	cbnz	r1, 800c66e <__lo0bits+0x2a>
 800c66a:	0c1b      	lsrs	r3, r3, #16
 800c66c:	2210      	movs	r2, #16
 800c66e:	b2d9      	uxtb	r1, r3
 800c670:	b909      	cbnz	r1, 800c676 <__lo0bits+0x32>
 800c672:	3208      	adds	r2, #8
 800c674:	0a1b      	lsrs	r3, r3, #8
 800c676:	0719      	lsls	r1, r3, #28
 800c678:	bf04      	itt	eq
 800c67a:	091b      	lsreq	r3, r3, #4
 800c67c:	3204      	addeq	r2, #4
 800c67e:	0799      	lsls	r1, r3, #30
 800c680:	bf04      	itt	eq
 800c682:	089b      	lsreq	r3, r3, #2
 800c684:	3202      	addeq	r2, #2
 800c686:	07d9      	lsls	r1, r3, #31
 800c688:	d403      	bmi.n	800c692 <__lo0bits+0x4e>
 800c68a:	085b      	lsrs	r3, r3, #1
 800c68c:	f102 0201 	add.w	r2, r2, #1
 800c690:	d003      	beq.n	800c69a <__lo0bits+0x56>
 800c692:	6003      	str	r3, [r0, #0]
 800c694:	e7e5      	b.n	800c662 <__lo0bits+0x1e>
 800c696:	2200      	movs	r2, #0
 800c698:	e7e3      	b.n	800c662 <__lo0bits+0x1e>
 800c69a:	2220      	movs	r2, #32
 800c69c:	e7e1      	b.n	800c662 <__lo0bits+0x1e>
	...

0800c6a0 <__i2b>:
 800c6a0:	b510      	push	{r4, lr}
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	2101      	movs	r1, #1
 800c6a6:	f7ff ff05 	bl	800c4b4 <_Balloc>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	b928      	cbnz	r0, 800c6ba <__i2b+0x1a>
 800c6ae:	4b05      	ldr	r3, [pc, #20]	; (800c6c4 <__i2b+0x24>)
 800c6b0:	4805      	ldr	r0, [pc, #20]	; (800c6c8 <__i2b+0x28>)
 800c6b2:	f240 1145 	movw	r1, #325	; 0x145
 800c6b6:	f000 fd0d 	bl	800d0d4 <__assert_func>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	6144      	str	r4, [r0, #20]
 800c6be:	6103      	str	r3, [r0, #16]
 800c6c0:	bd10      	pop	{r4, pc}
 800c6c2:	bf00      	nop
 800c6c4:	0800d81d 	.word	0x0800d81d
 800c6c8:	0800d82e 	.word	0x0800d82e

0800c6cc <__multiply>:
 800c6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d0:	4691      	mov	r9, r2
 800c6d2:	690a      	ldr	r2, [r1, #16]
 800c6d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	bfb8      	it	lt
 800c6dc:	460b      	movlt	r3, r1
 800c6de:	460c      	mov	r4, r1
 800c6e0:	bfbc      	itt	lt
 800c6e2:	464c      	movlt	r4, r9
 800c6e4:	4699      	movlt	r9, r3
 800c6e6:	6927      	ldr	r7, [r4, #16]
 800c6e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c6ec:	68a3      	ldr	r3, [r4, #8]
 800c6ee:	6861      	ldr	r1, [r4, #4]
 800c6f0:	eb07 060a 	add.w	r6, r7, sl
 800c6f4:	42b3      	cmp	r3, r6
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	bfb8      	it	lt
 800c6fa:	3101      	addlt	r1, #1
 800c6fc:	f7ff feda 	bl	800c4b4 <_Balloc>
 800c700:	b930      	cbnz	r0, 800c710 <__multiply+0x44>
 800c702:	4602      	mov	r2, r0
 800c704:	4b44      	ldr	r3, [pc, #272]	; (800c818 <__multiply+0x14c>)
 800c706:	4845      	ldr	r0, [pc, #276]	; (800c81c <__multiply+0x150>)
 800c708:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c70c:	f000 fce2 	bl	800d0d4 <__assert_func>
 800c710:	f100 0514 	add.w	r5, r0, #20
 800c714:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c718:	462b      	mov	r3, r5
 800c71a:	2200      	movs	r2, #0
 800c71c:	4543      	cmp	r3, r8
 800c71e:	d321      	bcc.n	800c764 <__multiply+0x98>
 800c720:	f104 0314 	add.w	r3, r4, #20
 800c724:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c728:	f109 0314 	add.w	r3, r9, #20
 800c72c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c730:	9202      	str	r2, [sp, #8]
 800c732:	1b3a      	subs	r2, r7, r4
 800c734:	3a15      	subs	r2, #21
 800c736:	f022 0203 	bic.w	r2, r2, #3
 800c73a:	3204      	adds	r2, #4
 800c73c:	f104 0115 	add.w	r1, r4, #21
 800c740:	428f      	cmp	r7, r1
 800c742:	bf38      	it	cc
 800c744:	2204      	movcc	r2, #4
 800c746:	9201      	str	r2, [sp, #4]
 800c748:	9a02      	ldr	r2, [sp, #8]
 800c74a:	9303      	str	r3, [sp, #12]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d80c      	bhi.n	800c76a <__multiply+0x9e>
 800c750:	2e00      	cmp	r6, #0
 800c752:	dd03      	ble.n	800c75c <__multiply+0x90>
 800c754:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d05b      	beq.n	800c814 <__multiply+0x148>
 800c75c:	6106      	str	r6, [r0, #16]
 800c75e:	b005      	add	sp, #20
 800c760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c764:	f843 2b04 	str.w	r2, [r3], #4
 800c768:	e7d8      	b.n	800c71c <__multiply+0x50>
 800c76a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c76e:	f1ba 0f00 	cmp.w	sl, #0
 800c772:	d024      	beq.n	800c7be <__multiply+0xf2>
 800c774:	f104 0e14 	add.w	lr, r4, #20
 800c778:	46a9      	mov	r9, r5
 800c77a:	f04f 0c00 	mov.w	ip, #0
 800c77e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c782:	f8d9 1000 	ldr.w	r1, [r9]
 800c786:	fa1f fb82 	uxth.w	fp, r2
 800c78a:	b289      	uxth	r1, r1
 800c78c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c790:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c794:	f8d9 2000 	ldr.w	r2, [r9]
 800c798:	4461      	add	r1, ip
 800c79a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c79e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c7a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7a6:	b289      	uxth	r1, r1
 800c7a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7ac:	4577      	cmp	r7, lr
 800c7ae:	f849 1b04 	str.w	r1, [r9], #4
 800c7b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7b6:	d8e2      	bhi.n	800c77e <__multiply+0xb2>
 800c7b8:	9a01      	ldr	r2, [sp, #4]
 800c7ba:	f845 c002 	str.w	ip, [r5, r2]
 800c7be:	9a03      	ldr	r2, [sp, #12]
 800c7c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	f1b9 0f00 	cmp.w	r9, #0
 800c7ca:	d021      	beq.n	800c810 <__multiply+0x144>
 800c7cc:	6829      	ldr	r1, [r5, #0]
 800c7ce:	f104 0c14 	add.w	ip, r4, #20
 800c7d2:	46ae      	mov	lr, r5
 800c7d4:	f04f 0a00 	mov.w	sl, #0
 800c7d8:	f8bc b000 	ldrh.w	fp, [ip]
 800c7dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c7e0:	fb09 220b 	mla	r2, r9, fp, r2
 800c7e4:	4452      	add	r2, sl
 800c7e6:	b289      	uxth	r1, r1
 800c7e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7ec:	f84e 1b04 	str.w	r1, [lr], #4
 800c7f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c7f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7f8:	f8be 1000 	ldrh.w	r1, [lr]
 800c7fc:	fb09 110a 	mla	r1, r9, sl, r1
 800c800:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c804:	4567      	cmp	r7, ip
 800c806:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c80a:	d8e5      	bhi.n	800c7d8 <__multiply+0x10c>
 800c80c:	9a01      	ldr	r2, [sp, #4]
 800c80e:	50a9      	str	r1, [r5, r2]
 800c810:	3504      	adds	r5, #4
 800c812:	e799      	b.n	800c748 <__multiply+0x7c>
 800c814:	3e01      	subs	r6, #1
 800c816:	e79b      	b.n	800c750 <__multiply+0x84>
 800c818:	0800d81d 	.word	0x0800d81d
 800c81c:	0800d82e 	.word	0x0800d82e

0800c820 <__pow5mult>:
 800c820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c824:	4615      	mov	r5, r2
 800c826:	f012 0203 	ands.w	r2, r2, #3
 800c82a:	4606      	mov	r6, r0
 800c82c:	460f      	mov	r7, r1
 800c82e:	d007      	beq.n	800c840 <__pow5mult+0x20>
 800c830:	4c25      	ldr	r4, [pc, #148]	; (800c8c8 <__pow5mult+0xa8>)
 800c832:	3a01      	subs	r2, #1
 800c834:	2300      	movs	r3, #0
 800c836:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c83a:	f7ff fe9d 	bl	800c578 <__multadd>
 800c83e:	4607      	mov	r7, r0
 800c840:	10ad      	asrs	r5, r5, #2
 800c842:	d03d      	beq.n	800c8c0 <__pow5mult+0xa0>
 800c844:	69f4      	ldr	r4, [r6, #28]
 800c846:	b97c      	cbnz	r4, 800c868 <__pow5mult+0x48>
 800c848:	2010      	movs	r0, #16
 800c84a:	f7ff fd7f 	bl	800c34c <malloc>
 800c84e:	4602      	mov	r2, r0
 800c850:	61f0      	str	r0, [r6, #28]
 800c852:	b928      	cbnz	r0, 800c860 <__pow5mult+0x40>
 800c854:	4b1d      	ldr	r3, [pc, #116]	; (800c8cc <__pow5mult+0xac>)
 800c856:	481e      	ldr	r0, [pc, #120]	; (800c8d0 <__pow5mult+0xb0>)
 800c858:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c85c:	f000 fc3a 	bl	800d0d4 <__assert_func>
 800c860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c864:	6004      	str	r4, [r0, #0]
 800c866:	60c4      	str	r4, [r0, #12]
 800c868:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c86c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c870:	b94c      	cbnz	r4, 800c886 <__pow5mult+0x66>
 800c872:	f240 2171 	movw	r1, #625	; 0x271
 800c876:	4630      	mov	r0, r6
 800c878:	f7ff ff12 	bl	800c6a0 <__i2b>
 800c87c:	2300      	movs	r3, #0
 800c87e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c882:	4604      	mov	r4, r0
 800c884:	6003      	str	r3, [r0, #0]
 800c886:	f04f 0900 	mov.w	r9, #0
 800c88a:	07eb      	lsls	r3, r5, #31
 800c88c:	d50a      	bpl.n	800c8a4 <__pow5mult+0x84>
 800c88e:	4639      	mov	r1, r7
 800c890:	4622      	mov	r2, r4
 800c892:	4630      	mov	r0, r6
 800c894:	f7ff ff1a 	bl	800c6cc <__multiply>
 800c898:	4639      	mov	r1, r7
 800c89a:	4680      	mov	r8, r0
 800c89c:	4630      	mov	r0, r6
 800c89e:	f7ff fe49 	bl	800c534 <_Bfree>
 800c8a2:	4647      	mov	r7, r8
 800c8a4:	106d      	asrs	r5, r5, #1
 800c8a6:	d00b      	beq.n	800c8c0 <__pow5mult+0xa0>
 800c8a8:	6820      	ldr	r0, [r4, #0]
 800c8aa:	b938      	cbnz	r0, 800c8bc <__pow5mult+0x9c>
 800c8ac:	4622      	mov	r2, r4
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	f7ff ff0b 	bl	800c6cc <__multiply>
 800c8b6:	6020      	str	r0, [r4, #0]
 800c8b8:	f8c0 9000 	str.w	r9, [r0]
 800c8bc:	4604      	mov	r4, r0
 800c8be:	e7e4      	b.n	800c88a <__pow5mult+0x6a>
 800c8c0:	4638      	mov	r0, r7
 800c8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8c6:	bf00      	nop
 800c8c8:	0800d978 	.word	0x0800d978
 800c8cc:	0800d7ae 	.word	0x0800d7ae
 800c8d0:	0800d82e 	.word	0x0800d82e

0800c8d4 <__lshift>:
 800c8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d8:	460c      	mov	r4, r1
 800c8da:	6849      	ldr	r1, [r1, #4]
 800c8dc:	6923      	ldr	r3, [r4, #16]
 800c8de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8e2:	68a3      	ldr	r3, [r4, #8]
 800c8e4:	4607      	mov	r7, r0
 800c8e6:	4691      	mov	r9, r2
 800c8e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8ec:	f108 0601 	add.w	r6, r8, #1
 800c8f0:	42b3      	cmp	r3, r6
 800c8f2:	db0b      	blt.n	800c90c <__lshift+0x38>
 800c8f4:	4638      	mov	r0, r7
 800c8f6:	f7ff fddd 	bl	800c4b4 <_Balloc>
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	b948      	cbnz	r0, 800c912 <__lshift+0x3e>
 800c8fe:	4602      	mov	r2, r0
 800c900:	4b28      	ldr	r3, [pc, #160]	; (800c9a4 <__lshift+0xd0>)
 800c902:	4829      	ldr	r0, [pc, #164]	; (800c9a8 <__lshift+0xd4>)
 800c904:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c908:	f000 fbe4 	bl	800d0d4 <__assert_func>
 800c90c:	3101      	adds	r1, #1
 800c90e:	005b      	lsls	r3, r3, #1
 800c910:	e7ee      	b.n	800c8f0 <__lshift+0x1c>
 800c912:	2300      	movs	r3, #0
 800c914:	f100 0114 	add.w	r1, r0, #20
 800c918:	f100 0210 	add.w	r2, r0, #16
 800c91c:	4618      	mov	r0, r3
 800c91e:	4553      	cmp	r3, sl
 800c920:	db33      	blt.n	800c98a <__lshift+0xb6>
 800c922:	6920      	ldr	r0, [r4, #16]
 800c924:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c928:	f104 0314 	add.w	r3, r4, #20
 800c92c:	f019 091f 	ands.w	r9, r9, #31
 800c930:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c934:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c938:	d02b      	beq.n	800c992 <__lshift+0xbe>
 800c93a:	f1c9 0e20 	rsb	lr, r9, #32
 800c93e:	468a      	mov	sl, r1
 800c940:	2200      	movs	r2, #0
 800c942:	6818      	ldr	r0, [r3, #0]
 800c944:	fa00 f009 	lsl.w	r0, r0, r9
 800c948:	4310      	orrs	r0, r2
 800c94a:	f84a 0b04 	str.w	r0, [sl], #4
 800c94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c952:	459c      	cmp	ip, r3
 800c954:	fa22 f20e 	lsr.w	r2, r2, lr
 800c958:	d8f3      	bhi.n	800c942 <__lshift+0x6e>
 800c95a:	ebac 0304 	sub.w	r3, ip, r4
 800c95e:	3b15      	subs	r3, #21
 800c960:	f023 0303 	bic.w	r3, r3, #3
 800c964:	3304      	adds	r3, #4
 800c966:	f104 0015 	add.w	r0, r4, #21
 800c96a:	4584      	cmp	ip, r0
 800c96c:	bf38      	it	cc
 800c96e:	2304      	movcc	r3, #4
 800c970:	50ca      	str	r2, [r1, r3]
 800c972:	b10a      	cbz	r2, 800c978 <__lshift+0xa4>
 800c974:	f108 0602 	add.w	r6, r8, #2
 800c978:	3e01      	subs	r6, #1
 800c97a:	4638      	mov	r0, r7
 800c97c:	612e      	str	r6, [r5, #16]
 800c97e:	4621      	mov	r1, r4
 800c980:	f7ff fdd8 	bl	800c534 <_Bfree>
 800c984:	4628      	mov	r0, r5
 800c986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c98a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c98e:	3301      	adds	r3, #1
 800c990:	e7c5      	b.n	800c91e <__lshift+0x4a>
 800c992:	3904      	subs	r1, #4
 800c994:	f853 2b04 	ldr.w	r2, [r3], #4
 800c998:	f841 2f04 	str.w	r2, [r1, #4]!
 800c99c:	459c      	cmp	ip, r3
 800c99e:	d8f9      	bhi.n	800c994 <__lshift+0xc0>
 800c9a0:	e7ea      	b.n	800c978 <__lshift+0xa4>
 800c9a2:	bf00      	nop
 800c9a4:	0800d81d 	.word	0x0800d81d
 800c9a8:	0800d82e 	.word	0x0800d82e

0800c9ac <__mcmp>:
 800c9ac:	b530      	push	{r4, r5, lr}
 800c9ae:	6902      	ldr	r2, [r0, #16]
 800c9b0:	690c      	ldr	r4, [r1, #16]
 800c9b2:	1b12      	subs	r2, r2, r4
 800c9b4:	d10e      	bne.n	800c9d4 <__mcmp+0x28>
 800c9b6:	f100 0314 	add.w	r3, r0, #20
 800c9ba:	3114      	adds	r1, #20
 800c9bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c9c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c9c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c9c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c9cc:	42a5      	cmp	r5, r4
 800c9ce:	d003      	beq.n	800c9d8 <__mcmp+0x2c>
 800c9d0:	d305      	bcc.n	800c9de <__mcmp+0x32>
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	bd30      	pop	{r4, r5, pc}
 800c9d8:	4283      	cmp	r3, r0
 800c9da:	d3f3      	bcc.n	800c9c4 <__mcmp+0x18>
 800c9dc:	e7fa      	b.n	800c9d4 <__mcmp+0x28>
 800c9de:	f04f 32ff 	mov.w	r2, #4294967295
 800c9e2:	e7f7      	b.n	800c9d4 <__mcmp+0x28>

0800c9e4 <__mdiff>:
 800c9e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e8:	460c      	mov	r4, r1
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	4690      	mov	r8, r2
 800c9f2:	f7ff ffdb 	bl	800c9ac <__mcmp>
 800c9f6:	1e05      	subs	r5, r0, #0
 800c9f8:	d110      	bne.n	800ca1c <__mdiff+0x38>
 800c9fa:	4629      	mov	r1, r5
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	f7ff fd59 	bl	800c4b4 <_Balloc>
 800ca02:	b930      	cbnz	r0, 800ca12 <__mdiff+0x2e>
 800ca04:	4b3a      	ldr	r3, [pc, #232]	; (800caf0 <__mdiff+0x10c>)
 800ca06:	4602      	mov	r2, r0
 800ca08:	f240 2137 	movw	r1, #567	; 0x237
 800ca0c:	4839      	ldr	r0, [pc, #228]	; (800caf4 <__mdiff+0x110>)
 800ca0e:	f000 fb61 	bl	800d0d4 <__assert_func>
 800ca12:	2301      	movs	r3, #1
 800ca14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1c:	bfa4      	itt	ge
 800ca1e:	4643      	movge	r3, r8
 800ca20:	46a0      	movge	r8, r4
 800ca22:	4630      	mov	r0, r6
 800ca24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca28:	bfa6      	itte	ge
 800ca2a:	461c      	movge	r4, r3
 800ca2c:	2500      	movge	r5, #0
 800ca2e:	2501      	movlt	r5, #1
 800ca30:	f7ff fd40 	bl	800c4b4 <_Balloc>
 800ca34:	b920      	cbnz	r0, 800ca40 <__mdiff+0x5c>
 800ca36:	4b2e      	ldr	r3, [pc, #184]	; (800caf0 <__mdiff+0x10c>)
 800ca38:	4602      	mov	r2, r0
 800ca3a:	f240 2145 	movw	r1, #581	; 0x245
 800ca3e:	e7e5      	b.n	800ca0c <__mdiff+0x28>
 800ca40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca44:	6926      	ldr	r6, [r4, #16]
 800ca46:	60c5      	str	r5, [r0, #12]
 800ca48:	f104 0914 	add.w	r9, r4, #20
 800ca4c:	f108 0514 	add.w	r5, r8, #20
 800ca50:	f100 0e14 	add.w	lr, r0, #20
 800ca54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca5c:	f108 0210 	add.w	r2, r8, #16
 800ca60:	46f2      	mov	sl, lr
 800ca62:	2100      	movs	r1, #0
 800ca64:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca6c:	fa11 f88b 	uxtah	r8, r1, fp
 800ca70:	b299      	uxth	r1, r3
 800ca72:	0c1b      	lsrs	r3, r3, #16
 800ca74:	eba8 0801 	sub.w	r8, r8, r1
 800ca78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca7c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca80:	fa1f f888 	uxth.w	r8, r8
 800ca84:	1419      	asrs	r1, r3, #16
 800ca86:	454e      	cmp	r6, r9
 800ca88:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca8c:	f84a 3b04 	str.w	r3, [sl], #4
 800ca90:	d8e8      	bhi.n	800ca64 <__mdiff+0x80>
 800ca92:	1b33      	subs	r3, r6, r4
 800ca94:	3b15      	subs	r3, #21
 800ca96:	f023 0303 	bic.w	r3, r3, #3
 800ca9a:	3304      	adds	r3, #4
 800ca9c:	3415      	adds	r4, #21
 800ca9e:	42a6      	cmp	r6, r4
 800caa0:	bf38      	it	cc
 800caa2:	2304      	movcc	r3, #4
 800caa4:	441d      	add	r5, r3
 800caa6:	4473      	add	r3, lr
 800caa8:	469e      	mov	lr, r3
 800caaa:	462e      	mov	r6, r5
 800caac:	4566      	cmp	r6, ip
 800caae:	d30e      	bcc.n	800cace <__mdiff+0xea>
 800cab0:	f10c 0203 	add.w	r2, ip, #3
 800cab4:	1b52      	subs	r2, r2, r5
 800cab6:	f022 0203 	bic.w	r2, r2, #3
 800caba:	3d03      	subs	r5, #3
 800cabc:	45ac      	cmp	ip, r5
 800cabe:	bf38      	it	cc
 800cac0:	2200      	movcc	r2, #0
 800cac2:	4413      	add	r3, r2
 800cac4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cac8:	b17a      	cbz	r2, 800caea <__mdiff+0x106>
 800caca:	6107      	str	r7, [r0, #16]
 800cacc:	e7a4      	b.n	800ca18 <__mdiff+0x34>
 800cace:	f856 8b04 	ldr.w	r8, [r6], #4
 800cad2:	fa11 f288 	uxtah	r2, r1, r8
 800cad6:	1414      	asrs	r4, r2, #16
 800cad8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cadc:	b292      	uxth	r2, r2
 800cade:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cae2:	f84e 2b04 	str.w	r2, [lr], #4
 800cae6:	1421      	asrs	r1, r4, #16
 800cae8:	e7e0      	b.n	800caac <__mdiff+0xc8>
 800caea:	3f01      	subs	r7, #1
 800caec:	e7ea      	b.n	800cac4 <__mdiff+0xe0>
 800caee:	bf00      	nop
 800caf0:	0800d81d 	.word	0x0800d81d
 800caf4:	0800d82e 	.word	0x0800d82e

0800caf8 <__d2b>:
 800caf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cafc:	460f      	mov	r7, r1
 800cafe:	2101      	movs	r1, #1
 800cb00:	ec59 8b10 	vmov	r8, r9, d0
 800cb04:	4616      	mov	r6, r2
 800cb06:	f7ff fcd5 	bl	800c4b4 <_Balloc>
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	b930      	cbnz	r0, 800cb1c <__d2b+0x24>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	4b24      	ldr	r3, [pc, #144]	; (800cba4 <__d2b+0xac>)
 800cb12:	4825      	ldr	r0, [pc, #148]	; (800cba8 <__d2b+0xb0>)
 800cb14:	f240 310f 	movw	r1, #783	; 0x30f
 800cb18:	f000 fadc 	bl	800d0d4 <__assert_func>
 800cb1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb24:	bb2d      	cbnz	r5, 800cb72 <__d2b+0x7a>
 800cb26:	9301      	str	r3, [sp, #4]
 800cb28:	f1b8 0300 	subs.w	r3, r8, #0
 800cb2c:	d026      	beq.n	800cb7c <__d2b+0x84>
 800cb2e:	4668      	mov	r0, sp
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	f7ff fd87 	bl	800c644 <__lo0bits>
 800cb36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb3a:	b1e8      	cbz	r0, 800cb78 <__d2b+0x80>
 800cb3c:	f1c0 0320 	rsb	r3, r0, #32
 800cb40:	fa02 f303 	lsl.w	r3, r2, r3
 800cb44:	430b      	orrs	r3, r1
 800cb46:	40c2      	lsrs	r2, r0
 800cb48:	6163      	str	r3, [r4, #20]
 800cb4a:	9201      	str	r2, [sp, #4]
 800cb4c:	9b01      	ldr	r3, [sp, #4]
 800cb4e:	61a3      	str	r3, [r4, #24]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	bf14      	ite	ne
 800cb54:	2202      	movne	r2, #2
 800cb56:	2201      	moveq	r2, #1
 800cb58:	6122      	str	r2, [r4, #16]
 800cb5a:	b1bd      	cbz	r5, 800cb8c <__d2b+0x94>
 800cb5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb60:	4405      	add	r5, r0
 800cb62:	603d      	str	r5, [r7, #0]
 800cb64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb68:	6030      	str	r0, [r6, #0]
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	b003      	add	sp, #12
 800cb6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb76:	e7d6      	b.n	800cb26 <__d2b+0x2e>
 800cb78:	6161      	str	r1, [r4, #20]
 800cb7a:	e7e7      	b.n	800cb4c <__d2b+0x54>
 800cb7c:	a801      	add	r0, sp, #4
 800cb7e:	f7ff fd61 	bl	800c644 <__lo0bits>
 800cb82:	9b01      	ldr	r3, [sp, #4]
 800cb84:	6163      	str	r3, [r4, #20]
 800cb86:	3020      	adds	r0, #32
 800cb88:	2201      	movs	r2, #1
 800cb8a:	e7e5      	b.n	800cb58 <__d2b+0x60>
 800cb8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb94:	6038      	str	r0, [r7, #0]
 800cb96:	6918      	ldr	r0, [r3, #16]
 800cb98:	f7ff fd34 	bl	800c604 <__hi0bits>
 800cb9c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cba0:	e7e2      	b.n	800cb68 <__d2b+0x70>
 800cba2:	bf00      	nop
 800cba4:	0800d81d 	.word	0x0800d81d
 800cba8:	0800d82e 	.word	0x0800d82e

0800cbac <__sfputc_r>:
 800cbac:	6893      	ldr	r3, [r2, #8]
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	b410      	push	{r4}
 800cbb4:	6093      	str	r3, [r2, #8]
 800cbb6:	da08      	bge.n	800cbca <__sfputc_r+0x1e>
 800cbb8:	6994      	ldr	r4, [r2, #24]
 800cbba:	42a3      	cmp	r3, r4
 800cbbc:	db01      	blt.n	800cbc2 <__sfputc_r+0x16>
 800cbbe:	290a      	cmp	r1, #10
 800cbc0:	d103      	bne.n	800cbca <__sfputc_r+0x1e>
 800cbc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbc6:	f7fe bbe8 	b.w	800b39a <__swbuf_r>
 800cbca:	6813      	ldr	r3, [r2, #0]
 800cbcc:	1c58      	adds	r0, r3, #1
 800cbce:	6010      	str	r0, [r2, #0]
 800cbd0:	7019      	strb	r1, [r3, #0]
 800cbd2:	4608      	mov	r0, r1
 800cbd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbd8:	4770      	bx	lr

0800cbda <__sfputs_r>:
 800cbda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbdc:	4606      	mov	r6, r0
 800cbde:	460f      	mov	r7, r1
 800cbe0:	4614      	mov	r4, r2
 800cbe2:	18d5      	adds	r5, r2, r3
 800cbe4:	42ac      	cmp	r4, r5
 800cbe6:	d101      	bne.n	800cbec <__sfputs_r+0x12>
 800cbe8:	2000      	movs	r0, #0
 800cbea:	e007      	b.n	800cbfc <__sfputs_r+0x22>
 800cbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf0:	463a      	mov	r2, r7
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	f7ff ffda 	bl	800cbac <__sfputc_r>
 800cbf8:	1c43      	adds	r3, r0, #1
 800cbfa:	d1f3      	bne.n	800cbe4 <__sfputs_r+0xa>
 800cbfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc00 <_vfiprintf_r>:
 800cc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc04:	460d      	mov	r5, r1
 800cc06:	b09d      	sub	sp, #116	; 0x74
 800cc08:	4614      	mov	r4, r2
 800cc0a:	4698      	mov	r8, r3
 800cc0c:	4606      	mov	r6, r0
 800cc0e:	b118      	cbz	r0, 800cc18 <_vfiprintf_r+0x18>
 800cc10:	6a03      	ldr	r3, [r0, #32]
 800cc12:	b90b      	cbnz	r3, 800cc18 <_vfiprintf_r+0x18>
 800cc14:	f7fe fada 	bl	800b1cc <__sinit>
 800cc18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc1a:	07d9      	lsls	r1, r3, #31
 800cc1c:	d405      	bmi.n	800cc2a <_vfiprintf_r+0x2a>
 800cc1e:	89ab      	ldrh	r3, [r5, #12]
 800cc20:	059a      	lsls	r2, r3, #22
 800cc22:	d402      	bmi.n	800cc2a <_vfiprintf_r+0x2a>
 800cc24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc26:	f7fe fcc9 	bl	800b5bc <__retarget_lock_acquire_recursive>
 800cc2a:	89ab      	ldrh	r3, [r5, #12]
 800cc2c:	071b      	lsls	r3, r3, #28
 800cc2e:	d501      	bpl.n	800cc34 <_vfiprintf_r+0x34>
 800cc30:	692b      	ldr	r3, [r5, #16]
 800cc32:	b99b      	cbnz	r3, 800cc5c <_vfiprintf_r+0x5c>
 800cc34:	4629      	mov	r1, r5
 800cc36:	4630      	mov	r0, r6
 800cc38:	f7fe fbec 	bl	800b414 <__swsetup_r>
 800cc3c:	b170      	cbz	r0, 800cc5c <_vfiprintf_r+0x5c>
 800cc3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc40:	07dc      	lsls	r4, r3, #31
 800cc42:	d504      	bpl.n	800cc4e <_vfiprintf_r+0x4e>
 800cc44:	f04f 30ff 	mov.w	r0, #4294967295
 800cc48:	b01d      	add	sp, #116	; 0x74
 800cc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4e:	89ab      	ldrh	r3, [r5, #12]
 800cc50:	0598      	lsls	r0, r3, #22
 800cc52:	d4f7      	bmi.n	800cc44 <_vfiprintf_r+0x44>
 800cc54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc56:	f7fe fcb2 	bl	800b5be <__retarget_lock_release_recursive>
 800cc5a:	e7f3      	b.n	800cc44 <_vfiprintf_r+0x44>
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc60:	2320      	movs	r3, #32
 800cc62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc66:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc6a:	2330      	movs	r3, #48	; 0x30
 800cc6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ce20 <_vfiprintf_r+0x220>
 800cc70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc74:	f04f 0901 	mov.w	r9, #1
 800cc78:	4623      	mov	r3, r4
 800cc7a:	469a      	mov	sl, r3
 800cc7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc80:	b10a      	cbz	r2, 800cc86 <_vfiprintf_r+0x86>
 800cc82:	2a25      	cmp	r2, #37	; 0x25
 800cc84:	d1f9      	bne.n	800cc7a <_vfiprintf_r+0x7a>
 800cc86:	ebba 0b04 	subs.w	fp, sl, r4
 800cc8a:	d00b      	beq.n	800cca4 <_vfiprintf_r+0xa4>
 800cc8c:	465b      	mov	r3, fp
 800cc8e:	4622      	mov	r2, r4
 800cc90:	4629      	mov	r1, r5
 800cc92:	4630      	mov	r0, r6
 800cc94:	f7ff ffa1 	bl	800cbda <__sfputs_r>
 800cc98:	3001      	adds	r0, #1
 800cc9a:	f000 80a9 	beq.w	800cdf0 <_vfiprintf_r+0x1f0>
 800cc9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cca0:	445a      	add	r2, fp
 800cca2:	9209      	str	r2, [sp, #36]	; 0x24
 800cca4:	f89a 3000 	ldrb.w	r3, [sl]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f000 80a1 	beq.w	800cdf0 <_vfiprintf_r+0x1f0>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccb8:	f10a 0a01 	add.w	sl, sl, #1
 800ccbc:	9304      	str	r3, [sp, #16]
 800ccbe:	9307      	str	r3, [sp, #28]
 800ccc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccc4:	931a      	str	r3, [sp, #104]	; 0x68
 800ccc6:	4654      	mov	r4, sl
 800ccc8:	2205      	movs	r2, #5
 800ccca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccce:	4854      	ldr	r0, [pc, #336]	; (800ce20 <_vfiprintf_r+0x220>)
 800ccd0:	f7f3 fa7e 	bl	80001d0 <memchr>
 800ccd4:	9a04      	ldr	r2, [sp, #16]
 800ccd6:	b9d8      	cbnz	r0, 800cd10 <_vfiprintf_r+0x110>
 800ccd8:	06d1      	lsls	r1, r2, #27
 800ccda:	bf44      	itt	mi
 800ccdc:	2320      	movmi	r3, #32
 800ccde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cce2:	0713      	lsls	r3, r2, #28
 800cce4:	bf44      	itt	mi
 800cce6:	232b      	movmi	r3, #43	; 0x2b
 800cce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccec:	f89a 3000 	ldrb.w	r3, [sl]
 800ccf0:	2b2a      	cmp	r3, #42	; 0x2a
 800ccf2:	d015      	beq.n	800cd20 <_vfiprintf_r+0x120>
 800ccf4:	9a07      	ldr	r2, [sp, #28]
 800ccf6:	4654      	mov	r4, sl
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	f04f 0c0a 	mov.w	ip, #10
 800ccfe:	4621      	mov	r1, r4
 800cd00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd04:	3b30      	subs	r3, #48	; 0x30
 800cd06:	2b09      	cmp	r3, #9
 800cd08:	d94d      	bls.n	800cda6 <_vfiprintf_r+0x1a6>
 800cd0a:	b1b0      	cbz	r0, 800cd3a <_vfiprintf_r+0x13a>
 800cd0c:	9207      	str	r2, [sp, #28]
 800cd0e:	e014      	b.n	800cd3a <_vfiprintf_r+0x13a>
 800cd10:	eba0 0308 	sub.w	r3, r0, r8
 800cd14:	fa09 f303 	lsl.w	r3, r9, r3
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	9304      	str	r3, [sp, #16]
 800cd1c:	46a2      	mov	sl, r4
 800cd1e:	e7d2      	b.n	800ccc6 <_vfiprintf_r+0xc6>
 800cd20:	9b03      	ldr	r3, [sp, #12]
 800cd22:	1d19      	adds	r1, r3, #4
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	9103      	str	r1, [sp, #12]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	bfbb      	ittet	lt
 800cd2c:	425b      	neglt	r3, r3
 800cd2e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd32:	9307      	strge	r3, [sp, #28]
 800cd34:	9307      	strlt	r3, [sp, #28]
 800cd36:	bfb8      	it	lt
 800cd38:	9204      	strlt	r2, [sp, #16]
 800cd3a:	7823      	ldrb	r3, [r4, #0]
 800cd3c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd3e:	d10c      	bne.n	800cd5a <_vfiprintf_r+0x15a>
 800cd40:	7863      	ldrb	r3, [r4, #1]
 800cd42:	2b2a      	cmp	r3, #42	; 0x2a
 800cd44:	d134      	bne.n	800cdb0 <_vfiprintf_r+0x1b0>
 800cd46:	9b03      	ldr	r3, [sp, #12]
 800cd48:	1d1a      	adds	r2, r3, #4
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	9203      	str	r2, [sp, #12]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	bfb8      	it	lt
 800cd52:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd56:	3402      	adds	r4, #2
 800cd58:	9305      	str	r3, [sp, #20]
 800cd5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ce30 <_vfiprintf_r+0x230>
 800cd5e:	7821      	ldrb	r1, [r4, #0]
 800cd60:	2203      	movs	r2, #3
 800cd62:	4650      	mov	r0, sl
 800cd64:	f7f3 fa34 	bl	80001d0 <memchr>
 800cd68:	b138      	cbz	r0, 800cd7a <_vfiprintf_r+0x17a>
 800cd6a:	9b04      	ldr	r3, [sp, #16]
 800cd6c:	eba0 000a 	sub.w	r0, r0, sl
 800cd70:	2240      	movs	r2, #64	; 0x40
 800cd72:	4082      	lsls	r2, r0
 800cd74:	4313      	orrs	r3, r2
 800cd76:	3401      	adds	r4, #1
 800cd78:	9304      	str	r3, [sp, #16]
 800cd7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd7e:	4829      	ldr	r0, [pc, #164]	; (800ce24 <_vfiprintf_r+0x224>)
 800cd80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd84:	2206      	movs	r2, #6
 800cd86:	f7f3 fa23 	bl	80001d0 <memchr>
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	d03f      	beq.n	800ce0e <_vfiprintf_r+0x20e>
 800cd8e:	4b26      	ldr	r3, [pc, #152]	; (800ce28 <_vfiprintf_r+0x228>)
 800cd90:	bb1b      	cbnz	r3, 800cdda <_vfiprintf_r+0x1da>
 800cd92:	9b03      	ldr	r3, [sp, #12]
 800cd94:	3307      	adds	r3, #7
 800cd96:	f023 0307 	bic.w	r3, r3, #7
 800cd9a:	3308      	adds	r3, #8
 800cd9c:	9303      	str	r3, [sp, #12]
 800cd9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cda0:	443b      	add	r3, r7
 800cda2:	9309      	str	r3, [sp, #36]	; 0x24
 800cda4:	e768      	b.n	800cc78 <_vfiprintf_r+0x78>
 800cda6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdaa:	460c      	mov	r4, r1
 800cdac:	2001      	movs	r0, #1
 800cdae:	e7a6      	b.n	800ccfe <_vfiprintf_r+0xfe>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	3401      	adds	r4, #1
 800cdb4:	9305      	str	r3, [sp, #20]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	f04f 0c0a 	mov.w	ip, #10
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdc2:	3a30      	subs	r2, #48	; 0x30
 800cdc4:	2a09      	cmp	r2, #9
 800cdc6:	d903      	bls.n	800cdd0 <_vfiprintf_r+0x1d0>
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d0c6      	beq.n	800cd5a <_vfiprintf_r+0x15a>
 800cdcc:	9105      	str	r1, [sp, #20]
 800cdce:	e7c4      	b.n	800cd5a <_vfiprintf_r+0x15a>
 800cdd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e7f0      	b.n	800cdbc <_vfiprintf_r+0x1bc>
 800cdda:	ab03      	add	r3, sp, #12
 800cddc:	9300      	str	r3, [sp, #0]
 800cdde:	462a      	mov	r2, r5
 800cde0:	4b12      	ldr	r3, [pc, #72]	; (800ce2c <_vfiprintf_r+0x22c>)
 800cde2:	a904      	add	r1, sp, #16
 800cde4:	4630      	mov	r0, r6
 800cde6:	f7fd fdb1 	bl	800a94c <_printf_float>
 800cdea:	4607      	mov	r7, r0
 800cdec:	1c78      	adds	r0, r7, #1
 800cdee:	d1d6      	bne.n	800cd9e <_vfiprintf_r+0x19e>
 800cdf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdf2:	07d9      	lsls	r1, r3, #31
 800cdf4:	d405      	bmi.n	800ce02 <_vfiprintf_r+0x202>
 800cdf6:	89ab      	ldrh	r3, [r5, #12]
 800cdf8:	059a      	lsls	r2, r3, #22
 800cdfa:	d402      	bmi.n	800ce02 <_vfiprintf_r+0x202>
 800cdfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdfe:	f7fe fbde 	bl	800b5be <__retarget_lock_release_recursive>
 800ce02:	89ab      	ldrh	r3, [r5, #12]
 800ce04:	065b      	lsls	r3, r3, #25
 800ce06:	f53f af1d 	bmi.w	800cc44 <_vfiprintf_r+0x44>
 800ce0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce0c:	e71c      	b.n	800cc48 <_vfiprintf_r+0x48>
 800ce0e:	ab03      	add	r3, sp, #12
 800ce10:	9300      	str	r3, [sp, #0]
 800ce12:	462a      	mov	r2, r5
 800ce14:	4b05      	ldr	r3, [pc, #20]	; (800ce2c <_vfiprintf_r+0x22c>)
 800ce16:	a904      	add	r1, sp, #16
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f7fe f83b 	bl	800ae94 <_printf_i>
 800ce1e:	e7e4      	b.n	800cdea <_vfiprintf_r+0x1ea>
 800ce20:	0800d984 	.word	0x0800d984
 800ce24:	0800d98e 	.word	0x0800d98e
 800ce28:	0800a94d 	.word	0x0800a94d
 800ce2c:	0800cbdb 	.word	0x0800cbdb
 800ce30:	0800d98a 	.word	0x0800d98a

0800ce34 <__sflush_r>:
 800ce34:	898a      	ldrh	r2, [r1, #12]
 800ce36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3a:	4605      	mov	r5, r0
 800ce3c:	0710      	lsls	r0, r2, #28
 800ce3e:	460c      	mov	r4, r1
 800ce40:	d458      	bmi.n	800cef4 <__sflush_r+0xc0>
 800ce42:	684b      	ldr	r3, [r1, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	dc05      	bgt.n	800ce54 <__sflush_r+0x20>
 800ce48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	dc02      	bgt.n	800ce54 <__sflush_r+0x20>
 800ce4e:	2000      	movs	r0, #0
 800ce50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce56:	2e00      	cmp	r6, #0
 800ce58:	d0f9      	beq.n	800ce4e <__sflush_r+0x1a>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce60:	682f      	ldr	r7, [r5, #0]
 800ce62:	6a21      	ldr	r1, [r4, #32]
 800ce64:	602b      	str	r3, [r5, #0]
 800ce66:	d032      	beq.n	800cece <__sflush_r+0x9a>
 800ce68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce6a:	89a3      	ldrh	r3, [r4, #12]
 800ce6c:	075a      	lsls	r2, r3, #29
 800ce6e:	d505      	bpl.n	800ce7c <__sflush_r+0x48>
 800ce70:	6863      	ldr	r3, [r4, #4]
 800ce72:	1ac0      	subs	r0, r0, r3
 800ce74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce76:	b10b      	cbz	r3, 800ce7c <__sflush_r+0x48>
 800ce78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce7a:	1ac0      	subs	r0, r0, r3
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	4602      	mov	r2, r0
 800ce80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce82:	6a21      	ldr	r1, [r4, #32]
 800ce84:	4628      	mov	r0, r5
 800ce86:	47b0      	blx	r6
 800ce88:	1c43      	adds	r3, r0, #1
 800ce8a:	89a3      	ldrh	r3, [r4, #12]
 800ce8c:	d106      	bne.n	800ce9c <__sflush_r+0x68>
 800ce8e:	6829      	ldr	r1, [r5, #0]
 800ce90:	291d      	cmp	r1, #29
 800ce92:	d82b      	bhi.n	800ceec <__sflush_r+0xb8>
 800ce94:	4a29      	ldr	r2, [pc, #164]	; (800cf3c <__sflush_r+0x108>)
 800ce96:	410a      	asrs	r2, r1
 800ce98:	07d6      	lsls	r6, r2, #31
 800ce9a:	d427      	bmi.n	800ceec <__sflush_r+0xb8>
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	6062      	str	r2, [r4, #4]
 800cea0:	04d9      	lsls	r1, r3, #19
 800cea2:	6922      	ldr	r2, [r4, #16]
 800cea4:	6022      	str	r2, [r4, #0]
 800cea6:	d504      	bpl.n	800ceb2 <__sflush_r+0x7e>
 800cea8:	1c42      	adds	r2, r0, #1
 800ceaa:	d101      	bne.n	800ceb0 <__sflush_r+0x7c>
 800ceac:	682b      	ldr	r3, [r5, #0]
 800ceae:	b903      	cbnz	r3, 800ceb2 <__sflush_r+0x7e>
 800ceb0:	6560      	str	r0, [r4, #84]	; 0x54
 800ceb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ceb4:	602f      	str	r7, [r5, #0]
 800ceb6:	2900      	cmp	r1, #0
 800ceb8:	d0c9      	beq.n	800ce4e <__sflush_r+0x1a>
 800ceba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cebe:	4299      	cmp	r1, r3
 800cec0:	d002      	beq.n	800cec8 <__sflush_r+0x94>
 800cec2:	4628      	mov	r0, r5
 800cec4:	f7ff f9f6 	bl	800c2b4 <_free_r>
 800cec8:	2000      	movs	r0, #0
 800ceca:	6360      	str	r0, [r4, #52]	; 0x34
 800cecc:	e7c0      	b.n	800ce50 <__sflush_r+0x1c>
 800cece:	2301      	movs	r3, #1
 800ced0:	4628      	mov	r0, r5
 800ced2:	47b0      	blx	r6
 800ced4:	1c41      	adds	r1, r0, #1
 800ced6:	d1c8      	bne.n	800ce6a <__sflush_r+0x36>
 800ced8:	682b      	ldr	r3, [r5, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d0c5      	beq.n	800ce6a <__sflush_r+0x36>
 800cede:	2b1d      	cmp	r3, #29
 800cee0:	d001      	beq.n	800cee6 <__sflush_r+0xb2>
 800cee2:	2b16      	cmp	r3, #22
 800cee4:	d101      	bne.n	800ceea <__sflush_r+0xb6>
 800cee6:	602f      	str	r7, [r5, #0]
 800cee8:	e7b1      	b.n	800ce4e <__sflush_r+0x1a>
 800ceea:	89a3      	ldrh	r3, [r4, #12]
 800ceec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cef0:	81a3      	strh	r3, [r4, #12]
 800cef2:	e7ad      	b.n	800ce50 <__sflush_r+0x1c>
 800cef4:	690f      	ldr	r7, [r1, #16]
 800cef6:	2f00      	cmp	r7, #0
 800cef8:	d0a9      	beq.n	800ce4e <__sflush_r+0x1a>
 800cefa:	0793      	lsls	r3, r2, #30
 800cefc:	680e      	ldr	r6, [r1, #0]
 800cefe:	bf08      	it	eq
 800cf00:	694b      	ldreq	r3, [r1, #20]
 800cf02:	600f      	str	r7, [r1, #0]
 800cf04:	bf18      	it	ne
 800cf06:	2300      	movne	r3, #0
 800cf08:	eba6 0807 	sub.w	r8, r6, r7
 800cf0c:	608b      	str	r3, [r1, #8]
 800cf0e:	f1b8 0f00 	cmp.w	r8, #0
 800cf12:	dd9c      	ble.n	800ce4e <__sflush_r+0x1a>
 800cf14:	6a21      	ldr	r1, [r4, #32]
 800cf16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf18:	4643      	mov	r3, r8
 800cf1a:	463a      	mov	r2, r7
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	47b0      	blx	r6
 800cf20:	2800      	cmp	r0, #0
 800cf22:	dc06      	bgt.n	800cf32 <__sflush_r+0xfe>
 800cf24:	89a3      	ldrh	r3, [r4, #12]
 800cf26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf2a:	81a3      	strh	r3, [r4, #12]
 800cf2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf30:	e78e      	b.n	800ce50 <__sflush_r+0x1c>
 800cf32:	4407      	add	r7, r0
 800cf34:	eba8 0800 	sub.w	r8, r8, r0
 800cf38:	e7e9      	b.n	800cf0e <__sflush_r+0xda>
 800cf3a:	bf00      	nop
 800cf3c:	dfbffffe 	.word	0xdfbffffe

0800cf40 <_fflush_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	690b      	ldr	r3, [r1, #16]
 800cf44:	4605      	mov	r5, r0
 800cf46:	460c      	mov	r4, r1
 800cf48:	b913      	cbnz	r3, 800cf50 <_fflush_r+0x10>
 800cf4a:	2500      	movs	r5, #0
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	bd38      	pop	{r3, r4, r5, pc}
 800cf50:	b118      	cbz	r0, 800cf5a <_fflush_r+0x1a>
 800cf52:	6a03      	ldr	r3, [r0, #32]
 800cf54:	b90b      	cbnz	r3, 800cf5a <_fflush_r+0x1a>
 800cf56:	f7fe f939 	bl	800b1cc <__sinit>
 800cf5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d0f3      	beq.n	800cf4a <_fflush_r+0xa>
 800cf62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf64:	07d0      	lsls	r0, r2, #31
 800cf66:	d404      	bmi.n	800cf72 <_fflush_r+0x32>
 800cf68:	0599      	lsls	r1, r3, #22
 800cf6a:	d402      	bmi.n	800cf72 <_fflush_r+0x32>
 800cf6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf6e:	f7fe fb25 	bl	800b5bc <__retarget_lock_acquire_recursive>
 800cf72:	4628      	mov	r0, r5
 800cf74:	4621      	mov	r1, r4
 800cf76:	f7ff ff5d 	bl	800ce34 <__sflush_r>
 800cf7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf7c:	07da      	lsls	r2, r3, #31
 800cf7e:	4605      	mov	r5, r0
 800cf80:	d4e4      	bmi.n	800cf4c <_fflush_r+0xc>
 800cf82:	89a3      	ldrh	r3, [r4, #12]
 800cf84:	059b      	lsls	r3, r3, #22
 800cf86:	d4e1      	bmi.n	800cf4c <_fflush_r+0xc>
 800cf88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf8a:	f7fe fb18 	bl	800b5be <__retarget_lock_release_recursive>
 800cf8e:	e7dd      	b.n	800cf4c <_fflush_r+0xc>

0800cf90 <__swhatbuf_r>:
 800cf90:	b570      	push	{r4, r5, r6, lr}
 800cf92:	460c      	mov	r4, r1
 800cf94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf98:	2900      	cmp	r1, #0
 800cf9a:	b096      	sub	sp, #88	; 0x58
 800cf9c:	4615      	mov	r5, r2
 800cf9e:	461e      	mov	r6, r3
 800cfa0:	da0d      	bge.n	800cfbe <__swhatbuf_r+0x2e>
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cfa8:	f04f 0100 	mov.w	r1, #0
 800cfac:	bf0c      	ite	eq
 800cfae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cfb2:	2340      	movne	r3, #64	; 0x40
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	6031      	str	r1, [r6, #0]
 800cfb8:	602b      	str	r3, [r5, #0]
 800cfba:	b016      	add	sp, #88	; 0x58
 800cfbc:	bd70      	pop	{r4, r5, r6, pc}
 800cfbe:	466a      	mov	r2, sp
 800cfc0:	f000 f848 	bl	800d054 <_fstat_r>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	dbec      	blt.n	800cfa2 <__swhatbuf_r+0x12>
 800cfc8:	9901      	ldr	r1, [sp, #4]
 800cfca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cfce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cfd2:	4259      	negs	r1, r3
 800cfd4:	4159      	adcs	r1, r3
 800cfd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfda:	e7eb      	b.n	800cfb4 <__swhatbuf_r+0x24>

0800cfdc <__smakebuf_r>:
 800cfdc:	898b      	ldrh	r3, [r1, #12]
 800cfde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfe0:	079d      	lsls	r5, r3, #30
 800cfe2:	4606      	mov	r6, r0
 800cfe4:	460c      	mov	r4, r1
 800cfe6:	d507      	bpl.n	800cff8 <__smakebuf_r+0x1c>
 800cfe8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	6123      	str	r3, [r4, #16]
 800cff0:	2301      	movs	r3, #1
 800cff2:	6163      	str	r3, [r4, #20]
 800cff4:	b002      	add	sp, #8
 800cff6:	bd70      	pop	{r4, r5, r6, pc}
 800cff8:	ab01      	add	r3, sp, #4
 800cffa:	466a      	mov	r2, sp
 800cffc:	f7ff ffc8 	bl	800cf90 <__swhatbuf_r>
 800d000:	9900      	ldr	r1, [sp, #0]
 800d002:	4605      	mov	r5, r0
 800d004:	4630      	mov	r0, r6
 800d006:	f7ff f9c9 	bl	800c39c <_malloc_r>
 800d00a:	b948      	cbnz	r0, 800d020 <__smakebuf_r+0x44>
 800d00c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d010:	059a      	lsls	r2, r3, #22
 800d012:	d4ef      	bmi.n	800cff4 <__smakebuf_r+0x18>
 800d014:	f023 0303 	bic.w	r3, r3, #3
 800d018:	f043 0302 	orr.w	r3, r3, #2
 800d01c:	81a3      	strh	r3, [r4, #12]
 800d01e:	e7e3      	b.n	800cfe8 <__smakebuf_r+0xc>
 800d020:	89a3      	ldrh	r3, [r4, #12]
 800d022:	6020      	str	r0, [r4, #0]
 800d024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d028:	81a3      	strh	r3, [r4, #12]
 800d02a:	9b00      	ldr	r3, [sp, #0]
 800d02c:	6163      	str	r3, [r4, #20]
 800d02e:	9b01      	ldr	r3, [sp, #4]
 800d030:	6120      	str	r0, [r4, #16]
 800d032:	b15b      	cbz	r3, 800d04c <__smakebuf_r+0x70>
 800d034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d038:	4630      	mov	r0, r6
 800d03a:	f000 f81d 	bl	800d078 <_isatty_r>
 800d03e:	b128      	cbz	r0, 800d04c <__smakebuf_r+0x70>
 800d040:	89a3      	ldrh	r3, [r4, #12]
 800d042:	f023 0303 	bic.w	r3, r3, #3
 800d046:	f043 0301 	orr.w	r3, r3, #1
 800d04a:	81a3      	strh	r3, [r4, #12]
 800d04c:	89a3      	ldrh	r3, [r4, #12]
 800d04e:	431d      	orrs	r5, r3
 800d050:	81a5      	strh	r5, [r4, #12]
 800d052:	e7cf      	b.n	800cff4 <__smakebuf_r+0x18>

0800d054 <_fstat_r>:
 800d054:	b538      	push	{r3, r4, r5, lr}
 800d056:	4d07      	ldr	r5, [pc, #28]	; (800d074 <_fstat_r+0x20>)
 800d058:	2300      	movs	r3, #0
 800d05a:	4604      	mov	r4, r0
 800d05c:	4608      	mov	r0, r1
 800d05e:	4611      	mov	r1, r2
 800d060:	602b      	str	r3, [r5, #0]
 800d062:	f7f6 f866 	bl	8003132 <_fstat>
 800d066:	1c43      	adds	r3, r0, #1
 800d068:	d102      	bne.n	800d070 <_fstat_r+0x1c>
 800d06a:	682b      	ldr	r3, [r5, #0]
 800d06c:	b103      	cbz	r3, 800d070 <_fstat_r+0x1c>
 800d06e:	6023      	str	r3, [r4, #0]
 800d070:	bd38      	pop	{r3, r4, r5, pc}
 800d072:	bf00      	nop
 800d074:	200009b4 	.word	0x200009b4

0800d078 <_isatty_r>:
 800d078:	b538      	push	{r3, r4, r5, lr}
 800d07a:	4d06      	ldr	r5, [pc, #24]	; (800d094 <_isatty_r+0x1c>)
 800d07c:	2300      	movs	r3, #0
 800d07e:	4604      	mov	r4, r0
 800d080:	4608      	mov	r0, r1
 800d082:	602b      	str	r3, [r5, #0]
 800d084:	f7f6 f865 	bl	8003152 <_isatty>
 800d088:	1c43      	adds	r3, r0, #1
 800d08a:	d102      	bne.n	800d092 <_isatty_r+0x1a>
 800d08c:	682b      	ldr	r3, [r5, #0]
 800d08e:	b103      	cbz	r3, 800d092 <_isatty_r+0x1a>
 800d090:	6023      	str	r3, [r4, #0]
 800d092:	bd38      	pop	{r3, r4, r5, pc}
 800d094:	200009b4 	.word	0x200009b4

0800d098 <_sbrk_r>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	4d06      	ldr	r5, [pc, #24]	; (800d0b4 <_sbrk_r+0x1c>)
 800d09c:	2300      	movs	r3, #0
 800d09e:	4604      	mov	r4, r0
 800d0a0:	4608      	mov	r0, r1
 800d0a2:	602b      	str	r3, [r5, #0]
 800d0a4:	f7f6 f86e 	bl	8003184 <_sbrk>
 800d0a8:	1c43      	adds	r3, r0, #1
 800d0aa:	d102      	bne.n	800d0b2 <_sbrk_r+0x1a>
 800d0ac:	682b      	ldr	r3, [r5, #0]
 800d0ae:	b103      	cbz	r3, 800d0b2 <_sbrk_r+0x1a>
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	bd38      	pop	{r3, r4, r5, pc}
 800d0b4:	200009b4 	.word	0x200009b4

0800d0b8 <memcpy>:
 800d0b8:	440a      	add	r2, r1
 800d0ba:	4291      	cmp	r1, r2
 800d0bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0c0:	d100      	bne.n	800d0c4 <memcpy+0xc>
 800d0c2:	4770      	bx	lr
 800d0c4:	b510      	push	{r4, lr}
 800d0c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0ce:	4291      	cmp	r1, r2
 800d0d0:	d1f9      	bne.n	800d0c6 <memcpy+0xe>
 800d0d2:	bd10      	pop	{r4, pc}

0800d0d4 <__assert_func>:
 800d0d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0d6:	4614      	mov	r4, r2
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4b09      	ldr	r3, [pc, #36]	; (800d100 <__assert_func+0x2c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4605      	mov	r5, r0
 800d0e0:	68d8      	ldr	r0, [r3, #12]
 800d0e2:	b14c      	cbz	r4, 800d0f8 <__assert_func+0x24>
 800d0e4:	4b07      	ldr	r3, [pc, #28]	; (800d104 <__assert_func+0x30>)
 800d0e6:	9100      	str	r1, [sp, #0]
 800d0e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0ec:	4906      	ldr	r1, [pc, #24]	; (800d108 <__assert_func+0x34>)
 800d0ee:	462b      	mov	r3, r5
 800d0f0:	f000 f844 	bl	800d17c <fiprintf>
 800d0f4:	f000 f854 	bl	800d1a0 <abort>
 800d0f8:	4b04      	ldr	r3, [pc, #16]	; (800d10c <__assert_func+0x38>)
 800d0fa:	461c      	mov	r4, r3
 800d0fc:	e7f3      	b.n	800d0e6 <__assert_func+0x12>
 800d0fe:	bf00      	nop
 800d100:	20000068 	.word	0x20000068
 800d104:	0800d99f 	.word	0x0800d99f
 800d108:	0800d9ac 	.word	0x0800d9ac
 800d10c:	0800d9da 	.word	0x0800d9da

0800d110 <_calloc_r>:
 800d110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d112:	fba1 2402 	umull	r2, r4, r1, r2
 800d116:	b94c      	cbnz	r4, 800d12c <_calloc_r+0x1c>
 800d118:	4611      	mov	r1, r2
 800d11a:	9201      	str	r2, [sp, #4]
 800d11c:	f7ff f93e 	bl	800c39c <_malloc_r>
 800d120:	9a01      	ldr	r2, [sp, #4]
 800d122:	4605      	mov	r5, r0
 800d124:	b930      	cbnz	r0, 800d134 <_calloc_r+0x24>
 800d126:	4628      	mov	r0, r5
 800d128:	b003      	add	sp, #12
 800d12a:	bd30      	pop	{r4, r5, pc}
 800d12c:	220c      	movs	r2, #12
 800d12e:	6002      	str	r2, [r0, #0]
 800d130:	2500      	movs	r5, #0
 800d132:	e7f8      	b.n	800d126 <_calloc_r+0x16>
 800d134:	4621      	mov	r1, r4
 800d136:	f7fe f9c5 	bl	800b4c4 <memset>
 800d13a:	e7f4      	b.n	800d126 <_calloc_r+0x16>

0800d13c <__ascii_mbtowc>:
 800d13c:	b082      	sub	sp, #8
 800d13e:	b901      	cbnz	r1, 800d142 <__ascii_mbtowc+0x6>
 800d140:	a901      	add	r1, sp, #4
 800d142:	b142      	cbz	r2, 800d156 <__ascii_mbtowc+0x1a>
 800d144:	b14b      	cbz	r3, 800d15a <__ascii_mbtowc+0x1e>
 800d146:	7813      	ldrb	r3, [r2, #0]
 800d148:	600b      	str	r3, [r1, #0]
 800d14a:	7812      	ldrb	r2, [r2, #0]
 800d14c:	1e10      	subs	r0, r2, #0
 800d14e:	bf18      	it	ne
 800d150:	2001      	movne	r0, #1
 800d152:	b002      	add	sp, #8
 800d154:	4770      	bx	lr
 800d156:	4610      	mov	r0, r2
 800d158:	e7fb      	b.n	800d152 <__ascii_mbtowc+0x16>
 800d15a:	f06f 0001 	mvn.w	r0, #1
 800d15e:	e7f8      	b.n	800d152 <__ascii_mbtowc+0x16>

0800d160 <__ascii_wctomb>:
 800d160:	b149      	cbz	r1, 800d176 <__ascii_wctomb+0x16>
 800d162:	2aff      	cmp	r2, #255	; 0xff
 800d164:	bf85      	ittet	hi
 800d166:	238a      	movhi	r3, #138	; 0x8a
 800d168:	6003      	strhi	r3, [r0, #0]
 800d16a:	700a      	strbls	r2, [r1, #0]
 800d16c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d170:	bf98      	it	ls
 800d172:	2001      	movls	r0, #1
 800d174:	4770      	bx	lr
 800d176:	4608      	mov	r0, r1
 800d178:	4770      	bx	lr
	...

0800d17c <fiprintf>:
 800d17c:	b40e      	push	{r1, r2, r3}
 800d17e:	b503      	push	{r0, r1, lr}
 800d180:	4601      	mov	r1, r0
 800d182:	ab03      	add	r3, sp, #12
 800d184:	4805      	ldr	r0, [pc, #20]	; (800d19c <fiprintf+0x20>)
 800d186:	f853 2b04 	ldr.w	r2, [r3], #4
 800d18a:	6800      	ldr	r0, [r0, #0]
 800d18c:	9301      	str	r3, [sp, #4]
 800d18e:	f7ff fd37 	bl	800cc00 <_vfiprintf_r>
 800d192:	b002      	add	sp, #8
 800d194:	f85d eb04 	ldr.w	lr, [sp], #4
 800d198:	b003      	add	sp, #12
 800d19a:	4770      	bx	lr
 800d19c:	20000068 	.word	0x20000068

0800d1a0 <abort>:
 800d1a0:	b508      	push	{r3, lr}
 800d1a2:	2006      	movs	r0, #6
 800d1a4:	f000 f82c 	bl	800d200 <raise>
 800d1a8:	2001      	movs	r0, #1
 800d1aa:	f7f5 ff8f 	bl	80030cc <_exit>

0800d1ae <_raise_r>:
 800d1ae:	291f      	cmp	r1, #31
 800d1b0:	b538      	push	{r3, r4, r5, lr}
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	460d      	mov	r5, r1
 800d1b6:	d904      	bls.n	800d1c2 <_raise_r+0x14>
 800d1b8:	2316      	movs	r3, #22
 800d1ba:	6003      	str	r3, [r0, #0]
 800d1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c0:	bd38      	pop	{r3, r4, r5, pc}
 800d1c2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d1c4:	b112      	cbz	r2, 800d1cc <_raise_r+0x1e>
 800d1c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1ca:	b94b      	cbnz	r3, 800d1e0 <_raise_r+0x32>
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	f000 f831 	bl	800d234 <_getpid_r>
 800d1d2:	462a      	mov	r2, r5
 800d1d4:	4601      	mov	r1, r0
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1dc:	f000 b818 	b.w	800d210 <_kill_r>
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d00a      	beq.n	800d1fa <_raise_r+0x4c>
 800d1e4:	1c59      	adds	r1, r3, #1
 800d1e6:	d103      	bne.n	800d1f0 <_raise_r+0x42>
 800d1e8:	2316      	movs	r3, #22
 800d1ea:	6003      	str	r3, [r0, #0]
 800d1ec:	2001      	movs	r0, #1
 800d1ee:	e7e7      	b.n	800d1c0 <_raise_r+0x12>
 800d1f0:	2400      	movs	r4, #0
 800d1f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	4798      	blx	r3
 800d1fa:	2000      	movs	r0, #0
 800d1fc:	e7e0      	b.n	800d1c0 <_raise_r+0x12>
	...

0800d200 <raise>:
 800d200:	4b02      	ldr	r3, [pc, #8]	; (800d20c <raise+0xc>)
 800d202:	4601      	mov	r1, r0
 800d204:	6818      	ldr	r0, [r3, #0]
 800d206:	f7ff bfd2 	b.w	800d1ae <_raise_r>
 800d20a:	bf00      	nop
 800d20c:	20000068 	.word	0x20000068

0800d210 <_kill_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4d07      	ldr	r5, [pc, #28]	; (800d230 <_kill_r+0x20>)
 800d214:	2300      	movs	r3, #0
 800d216:	4604      	mov	r4, r0
 800d218:	4608      	mov	r0, r1
 800d21a:	4611      	mov	r1, r2
 800d21c:	602b      	str	r3, [r5, #0]
 800d21e:	f7f5 ff45 	bl	80030ac <_kill>
 800d222:	1c43      	adds	r3, r0, #1
 800d224:	d102      	bne.n	800d22c <_kill_r+0x1c>
 800d226:	682b      	ldr	r3, [r5, #0]
 800d228:	b103      	cbz	r3, 800d22c <_kill_r+0x1c>
 800d22a:	6023      	str	r3, [r4, #0]
 800d22c:	bd38      	pop	{r3, r4, r5, pc}
 800d22e:	bf00      	nop
 800d230:	200009b4 	.word	0x200009b4

0800d234 <_getpid_r>:
 800d234:	f7f5 bf32 	b.w	800309c <_getpid>

0800d238 <_init>:
 800d238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23a:	bf00      	nop
 800d23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d23e:	bc08      	pop	{r3}
 800d240:	469e      	mov	lr, r3
 800d242:	4770      	bx	lr

0800d244 <_fini>:
 800d244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d246:	bf00      	nop
 800d248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d24a:	bc08      	pop	{r3}
 800d24c:	469e      	mov	lr, r3
 800d24e:	4770      	bx	lr
