
THPFW-testy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014070  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003808  08014200  08014200  00015200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a08  08017a08  00019204  2**0
                  CONTENTS
  4 .ARM          00000008  08017a08  08017a08  00018a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a10  08017a10  00019204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017a10  08017a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017a14  08017a14  00018a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08017a18  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c8c  20000208  08017c1c  00019208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005e94  08017c1c  00019e94  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00019204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049469  00000000  00000000  00019238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009856  00000000  00000000  000626a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001c0c9  00000000  00000000  0006bef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002338  00000000  00000000  00087fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000380c  00000000  00000000  0008a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031045  00000000  00000000  0008db04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004dae8  00000000  00000000  000beb49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7a49  00000000  00000000  0010c631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0020407a  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000004  00000000  00000000  002040c0  2**2
                  CONTENTS, READONLY
 22 .debug_frame  000085b0  00000000  00000000  002040c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004f  00000000  00000000  0020c674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080141e8 	.word	0x080141e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	080141e8 	.word	0x080141e8

080001d0 <cmox_initialize>:
 80001d0:	b538      	push	{r3, r4, r5, lr}
 80001d2:	2800      	cmp	r0, #0
 80001d4:	bf1c      	itt	ne
 80001d6:	6801      	ldrne	r1, [r0, #0]
 80001d8:	2900      	cmpne	r1, #0
 80001da:	4a18      	ldr	r2, [pc, #96]	@ (800023c <cmox_initialize+0x6c>)
 80001dc:	d123      	bne.n	8000226 <cmox_initialize+0x56>
 80001de:	4b18      	ldr	r3, [pc, #96]	@ (8000240 <cmox_initialize+0x70>)
 80001e0:	681c      	ldr	r4, [r3, #0]
 80001e2:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 80001e6:	400c      	ands	r4, r1
 80001e8:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80001ec:	42ac      	cmp	r4, r5
 80001ee:	bf1f      	itttt	ne
 80001f0:	681b      	ldrne	r3, [r3, #0]
 80001f2:	4019      	andne	r1, r3
 80001f4:	f24c 2470 	movwne	r4, #49776	@ 0xc270
 80001f8:	42a1      	cmpne	r1, r4
 80001fa:	d112      	bne.n	8000222 <cmox_initialize+0x52>
 80001fc:	4d11      	ldr	r5, [pc, #68]	@ (8000244 <cmox_initialize+0x74>)
 80001fe:	6829      	ldr	r1, [r5, #0]
 8000200:	b979      	cbnz	r1, 8000222 <cmox_initialize+0x52>
 8000202:	4911      	ldr	r1, [pc, #68]	@ (8000248 <cmox_initialize+0x78>)
 8000204:	680b      	ldr	r3, [r1, #0]
 8000206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800020a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800020e:	bf1f      	itttt	ne
 8000210:	6809      	ldrne	r1, [r1, #0]
 8000212:	f3c1 010b 	ubfxne	r1, r1, #0, #12
 8000216:	f240 4383 	movwne	r3, #1155	@ 0x483
 800021a:	4299      	cmpne	r1, r3
 800021c:	bf04      	itt	eq
 800021e:	2101      	moveq	r1, #1
 8000220:	7011      	strbeq	r1, [r2, #0]
 8000222:	b928      	cbnz	r0, 8000230 <cmox_initialize+0x60>
 8000224:	e005      	b.n	8000232 <cmox_initialize+0x62>
 8000226:	4b09      	ldr	r3, [pc, #36]	@ (800024c <cmox_initialize+0x7c>)
 8000228:	4299      	cmp	r1, r3
 800022a:	bf04      	itt	eq
 800022c:	2101      	moveq	r1, #1
 800022e:	7011      	strbeq	r1, [r2, #0]
 8000230:	6840      	ldr	r0, [r0, #4]
 8000232:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 8000236:	f005 bbd7 	b.w	80059e8 <cmox_ll_init>
 800023a:	bf00      	nop
 800023c:	20000224 	.word	0x20000224
 8000240:	e000ed00 	.word	0xe000ed00
 8000244:	e0042000 	.word	0xe0042000
 8000248:	5c001000 	.word	0x5c001000
 800024c:	48370000 	.word	0x48370000

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	@ 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__aeabi_dmul>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800067e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000682:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000686:	bf1d      	ittte	ne
 8000688:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800068c:	ea94 0f0c 	teqne	r4, ip
 8000690:	ea95 0f0c 	teqne	r5, ip
 8000694:	f000 f8de 	bleq	8000854 <__aeabi_dmul+0x1dc>
 8000698:	442c      	add	r4, r5
 800069a:	ea81 0603 	eor.w	r6, r1, r3
 800069e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006aa:	bf18      	it	ne
 80006ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006b8:	d038      	beq.n	800072c <__aeabi_dmul+0xb4>
 80006ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80006be:	f04f 0500 	mov.w	r5, #0
 80006c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ce:	f04f 0600 	mov.w	r6, #0
 80006d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006d6:	f09c 0f00 	teq	ip, #0
 80006da:	bf18      	it	ne
 80006dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ec:	d204      	bcs.n	80006f8 <__aeabi_dmul+0x80>
 80006ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006f2:	416d      	adcs	r5, r5
 80006f4:	eb46 0606 	adc.w	r6, r6, r6
 80006f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000700:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000704:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000708:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800070c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000710:	bf88      	it	hi
 8000712:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000716:	d81e      	bhi.n	8000756 <__aeabi_dmul+0xde>
 8000718:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800071c:	bf08      	it	eq
 800071e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000722:	f150 0000 	adcs.w	r0, r0, #0
 8000726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000730:	ea46 0101 	orr.w	r1, r6, r1
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000740:	bfc2      	ittt	gt
 8000742:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000746:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800074a:	bd70      	popgt	{r4, r5, r6, pc}
 800074c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000750:	f04f 0e00 	mov.w	lr, #0
 8000754:	3c01      	subs	r4, #1
 8000756:	f300 80ab 	bgt.w	80008b0 <__aeabi_dmul+0x238>
 800075a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800075e:	bfde      	ittt	le
 8000760:	2000      	movle	r0, #0
 8000762:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000766:	bd70      	pople	{r4, r5, r6, pc}
 8000768:	f1c4 0400 	rsb	r4, r4, #0
 800076c:	3c20      	subs	r4, #32
 800076e:	da35      	bge.n	80007dc <__aeabi_dmul+0x164>
 8000770:	340c      	adds	r4, #12
 8000772:	dc1b      	bgt.n	80007ac <__aeabi_dmul+0x134>
 8000774:	f104 0414 	add.w	r4, r4, #20
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f305 	lsl.w	r3, r0, r5
 8000780:	fa20 f004 	lsr.w	r0, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000798:	fa21 f604 	lsr.w	r6, r1, r4
 800079c:	eb42 0106 	adc.w	r1, r2, r6
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 040c 	rsb	r4, r4, #12
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f304 	lsl.w	r3, r0, r4
 80007b8:	fa20 f005 	lsr.w	r0, r0, r5
 80007bc:	fa01 f204 	lsl.w	r2, r1, r4
 80007c0:	ea40 0002 	orr.w	r0, r0, r2
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007cc:	f141 0100 	adc.w	r1, r1, #0
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 0520 	rsb	r5, r4, #32
 80007e0:	fa00 f205 	lsl.w	r2, r0, r5
 80007e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ec:	fa01 f205 	lsl.w	r2, r1, r5
 80007f0:	ea43 0302 	orr.w	r3, r3, r2
 80007f4:	fa21 f004 	lsr.w	r0, r1, r4
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000800:	ea20 0002 	bic.w	r0, r0, r2
 8000804:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800080c:	bf08      	it	eq
 800080e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f094 0f00 	teq	r4, #0
 8000818:	d10f      	bne.n	800083a <__aeabi_dmul+0x1c2>
 800081a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800081e:	0040      	lsls	r0, r0, #1
 8000820:	eb41 0101 	adc.w	r1, r1, r1
 8000824:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3c01      	subeq	r4, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1a6>
 800082e:	ea41 0106 	orr.w	r1, r1, r6
 8000832:	f095 0f00 	teq	r5, #0
 8000836:	bf18      	it	ne
 8000838:	4770      	bxne	lr
 800083a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	eb43 0303 	adc.w	r3, r3, r3
 8000844:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000848:	bf08      	it	eq
 800084a:	3d01      	subeq	r5, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1c6>
 800084e:	ea43 0306 	orr.w	r3, r3, r6
 8000852:	4770      	bx	lr
 8000854:	ea94 0f0c 	teq	r4, ip
 8000858:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800085c:	bf18      	it	ne
 800085e:	ea95 0f0c 	teqne	r5, ip
 8000862:	d00c      	beq.n	800087e <__aeabi_dmul+0x206>
 8000864:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000868:	bf18      	it	ne
 800086a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086e:	d1d1      	bne.n	8000814 <__aeabi_dmul+0x19c>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	bd70      	pop	{r4, r5, r6, pc}
 800087e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000882:	bf06      	itte	eq
 8000884:	4610      	moveq	r0, r2
 8000886:	4619      	moveq	r1, r3
 8000888:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088c:	d019      	beq.n	80008c2 <__aeabi_dmul+0x24a>
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	d102      	bne.n	800089a <__aeabi_dmul+0x222>
 8000894:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000898:	d113      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 800089a:	ea95 0f0c 	teq	r5, ip
 800089e:	d105      	bne.n	80008ac <__aeabi_dmul+0x234>
 80008a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008a4:	bf1c      	itt	ne
 80008a6:	4610      	movne	r0, r2
 80008a8:	4619      	movne	r1, r3
 80008aa:	d10a      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 80008ac:	ea81 0103 	eor.w	r1, r1, r3
 80008b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
 80008c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ca:	bd70      	pop	{r4, r5, r6, pc}

080008cc <__aeabi_ddiv>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008da:	bf1d      	ittte	ne
 80008dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008e0:	ea94 0f0c 	teqne	r4, ip
 80008e4:	ea95 0f0c 	teqne	r5, ip
 80008e8:	f000 f8a7 	bleq	8000a3a <__aeabi_ddiv+0x16e>
 80008ec:	eba4 0405 	sub.w	r4, r4, r5
 80008f0:	ea81 0e03 	eor.w	lr, r1, r3
 80008f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008fc:	f000 8088 	beq.w	8000a10 <__aeabi_ddiv+0x144>
 8000900:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000904:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000908:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800090c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000910:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000914:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000918:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800091c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000920:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000924:	429d      	cmp	r5, r3
 8000926:	bf08      	it	eq
 8000928:	4296      	cmpeq	r6, r2
 800092a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800092e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000932:	d202      	bcs.n	800093a <__aeabi_ddiv+0x6e>
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	1ab6      	subs	r6, r6, r2
 800093c:	eb65 0503 	sbc.w	r5, r5, r3
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800094a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ac:	d018      	beq.n	80009e0 <__aeabi_ddiv+0x114>
 80009ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ca:	d1c0      	bne.n	800094e <__aeabi_ddiv+0x82>
 80009cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d0:	d10b      	bne.n	80009ea <__aeabi_ddiv+0x11e>
 80009d2:	ea41 0100 	orr.w	r1, r1, r0
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009de:	e7b6      	b.n	800094e <__aeabi_ddiv+0x82>
 80009e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009e4:	bf04      	itt	eq
 80009e6:	4301      	orreq	r1, r0
 80009e8:	2000      	moveq	r0, #0
 80009ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ee:	bf88      	it	hi
 80009f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009f4:	f63f aeaf 	bhi.w	8000756 <__aeabi_dmul+0xde>
 80009f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009fc:	bf04      	itt	eq
 80009fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a06:	f150 0000 	adcs.w	r0, r0, #0
 8000a0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a1c:	bfc2      	ittt	gt
 8000a1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a26:	bd70      	popgt	{r4, r5, r6, pc}
 8000a28:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a2c:	f04f 0e00 	mov.w	lr, #0
 8000a30:	3c01      	subs	r4, #1
 8000a32:	e690      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a34:	ea45 0e06 	orr.w	lr, r5, r6
 8000a38:	e68d      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a3e:	ea94 0f0c 	teq	r4, ip
 8000a42:	bf08      	it	eq
 8000a44:	ea95 0f0c 	teqeq	r5, ip
 8000a48:	f43f af3b 	beq.w	80008c2 <__aeabi_dmul+0x24a>
 8000a4c:	ea94 0f0c 	teq	r4, ip
 8000a50:	d10a      	bne.n	8000a68 <__aeabi_ddiv+0x19c>
 8000a52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a56:	f47f af34 	bne.w	80008c2 <__aeabi_dmul+0x24a>
 8000a5a:	ea95 0f0c 	teq	r5, ip
 8000a5e:	f47f af25 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a62:	4610      	mov	r0, r2
 8000a64:	4619      	mov	r1, r3
 8000a66:	e72c      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a68:	ea95 0f0c 	teq	r5, ip
 8000a6c:	d106      	bne.n	8000a7c <__aeabi_ddiv+0x1b0>
 8000a6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a72:	f43f aefd 	beq.w	8000870 <__aeabi_dmul+0x1f8>
 8000a76:	4610      	mov	r0, r2
 8000a78:	4619      	mov	r1, r3
 8000a7a:	e722      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a86:	f47f aec5 	bne.w	8000814 <__aeabi_dmul+0x19c>
 8000a8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a8e:	f47f af0d 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a96:	f47f aeeb 	bne.w	8000870 <__aeabi_dmul+0x1f8>
 8000a9a:	e712      	b.n	80008c2 <__aeabi_dmul+0x24a>

08000a9c <__gedf2>:
 8000a9c:	f04f 3cff 	mov.w	ip, #4294967295
 8000aa0:	e006      	b.n	8000ab0 <__cmpdf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__ledf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	e002      	b.n	8000ab0 <__cmpdf2+0x4>
 8000aaa:	bf00      	nop

08000aac <__cmpdf2>:
 8000aac:	f04f 0c01 	mov.w	ip, #1
 8000ab0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ac6:	d01b      	beq.n	8000b00 <__cmpdf2+0x54>
 8000ac8:	b001      	add	sp, #4
 8000aca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ace:	bf0c      	ite	eq
 8000ad0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ad4:	ea91 0f03 	teqne	r1, r3
 8000ad8:	bf02      	ittt	eq
 8000ada:	ea90 0f02 	teqeq	r0, r2
 8000ade:	2000      	moveq	r0, #0
 8000ae0:	4770      	bxeq	lr
 8000ae2:	f110 0f00 	cmn.w	r0, #0
 8000ae6:	ea91 0f03 	teq	r1, r3
 8000aea:	bf58      	it	pl
 8000aec:	4299      	cmppl	r1, r3
 8000aee:	bf08      	it	eq
 8000af0:	4290      	cmpeq	r0, r2
 8000af2:	bf2c      	ite	cs
 8000af4:	17d8      	asrcs	r0, r3, #31
 8000af6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000afa:	f040 0001 	orr.w	r0, r0, #1
 8000afe:	4770      	bx	lr
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__cmpdf2+0x64>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d107      	bne.n	8000b20 <__cmpdf2+0x74>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d1d6      	bne.n	8000ac8 <__cmpdf2+0x1c>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d0d3      	beq.n	8000ac8 <__cmpdf2+0x1c>
 8000b20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdrcmple>:
 8000b28:	4684      	mov	ip, r0
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4662      	mov	r2, ip
 8000b2e:	468c      	mov	ip, r1
 8000b30:	4619      	mov	r1, r3
 8000b32:	4663      	mov	r3, ip
 8000b34:	e000      	b.n	8000b38 <__aeabi_cdcmpeq>
 8000b36:	bf00      	nop

08000b38 <__aeabi_cdcmpeq>:
 8000b38:	b501      	push	{r0, lr}
 8000b3a:	f7ff ffb7 	bl	8000aac <__cmpdf2>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	bf48      	it	mi
 8000b42:	f110 0f00 	cmnmi.w	r0, #0
 8000b46:	bd01      	pop	{r0, pc}

08000b48 <__aeabi_dcmpeq>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff fff4 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b50:	bf0c      	ite	eq
 8000b52:	2001      	moveq	r0, #1
 8000b54:	2000      	movne	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmplt>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffea 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b64:	bf34      	ite	cc
 8000b66:	2001      	movcc	r0, #1
 8000b68:	2000      	movcs	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmple>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffe0 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b78:	bf94      	ite	ls
 8000b7a:	2001      	movls	r0, #1
 8000b7c:	2000      	movhi	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpge>:
 8000b84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b88:	f7ff ffce 	bl	8000b28 <__aeabi_cdrcmple>
 8000b8c:	bf94      	ite	ls
 8000b8e:	2001      	movls	r0, #1
 8000b90:	2000      	movhi	r0, #0
 8000b92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b96:	bf00      	nop

08000b98 <__aeabi_dcmpgt>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff ffc4 	bl	8000b28 <__aeabi_cdrcmple>
 8000ba0:	bf34      	ite	cc
 8000ba2:	2001      	movcc	r0, #1
 8000ba4:	2000      	movcs	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmpun>:
 8000bac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x10>
 8000bb6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bba:	d10a      	bne.n	8000bd2 <__aeabi_dcmpun+0x26>
 8000bbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc4:	d102      	bne.n	8000bcc <__aeabi_dcmpun+0x20>
 8000bc6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_dcmpun+0x26>
 8000bcc:	f04f 0000 	mov.w	r0, #0
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0001 	mov.w	r0, #1
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2iz>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d215      	bcs.n	8000c0e <__aeabi_d2iz+0x36>
 8000be2:	d511      	bpl.n	8000c08 <__aeabi_d2iz+0x30>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d912      	bls.n	8000c14 <__aeabi_d2iz+0x3c>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	bf18      	it	ne
 8000c04:	4240      	negne	r0, r0
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c12:	d105      	bne.n	8000c20 <__aeabi_d2iz+0x48>
 8000c14:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	bf08      	it	eq
 8000c1a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_d2uiz>:
 8000c28:	004a      	lsls	r2, r1, #1
 8000c2a:	d211      	bcs.n	8000c50 <__aeabi_d2uiz+0x28>
 8000c2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c30:	d211      	bcs.n	8000c56 <__aeabi_d2uiz+0x2e>
 8000c32:	d50d      	bpl.n	8000c50 <__aeabi_d2uiz+0x28>
 8000c34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c3c:	d40e      	bmi.n	8000c5c <__aeabi_d2uiz+0x34>
 8000c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c5a:	d102      	bne.n	8000c62 <__aeabi_d2uiz+0x3a>
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	4770      	bx	lr
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2f>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c70:	bf24      	itt	cs
 8000c72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c7a:	d90d      	bls.n	8000c98 <__aeabi_d2f+0x30>
 8000c7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c9c:	d121      	bne.n	8000ce2 <__aeabi_d2f+0x7a>
 8000c9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ca2:	bfbc      	itt	lt
 8000ca4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ca8:	4770      	bxlt	lr
 8000caa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cb2:	f1c2 0218 	rsb	r2, r2, #24
 8000cb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000cc2:	bf18      	it	ne
 8000cc4:	f040 0001 	orrne.w	r0, r0, #1
 8000cc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ccc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cd4:	ea40 000c 	orr.w	r0, r0, ip
 8000cd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ce0:	e7cc      	b.n	8000c7c <__aeabi_d2f+0x14>
 8000ce2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ce6:	d107      	bne.n	8000cf8 <__aeabi_d2f+0x90>
 8000ce8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cec:	bf1e      	ittt	ne
 8000cee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cf2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cf6:	4770      	bxne	lr
 8000cf8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__aeabi_frsub>:
 8000d08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000d0c:	e002      	b.n	8000d14 <__addsf3>
 8000d0e:	bf00      	nop

08000d10 <__aeabi_fsub>:
 8000d10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000d14 <__addsf3>:
 8000d14:	0042      	lsls	r2, r0, #1
 8000d16:	bf1f      	itttt	ne
 8000d18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000d1c:	ea92 0f03 	teqne	r2, r3
 8000d20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d28:	d06a      	beq.n	8000e00 <__addsf3+0xec>
 8000d2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d32:	bfc1      	itttt	gt
 8000d34:	18d2      	addgt	r2, r2, r3
 8000d36:	4041      	eorgt	r1, r0
 8000d38:	4048      	eorgt	r0, r1
 8000d3a:	4041      	eorgt	r1, r0
 8000d3c:	bfb8      	it	lt
 8000d3e:	425b      	neglt	r3, r3
 8000d40:	2b19      	cmp	r3, #25
 8000d42:	bf88      	it	hi
 8000d44:	4770      	bxhi	lr
 8000d46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d52:	bf18      	it	ne
 8000d54:	4240      	negne	r0, r0
 8000d56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d62:	bf18      	it	ne
 8000d64:	4249      	negne	r1, r1
 8000d66:	ea92 0f03 	teq	r2, r3
 8000d6a:	d03f      	beq.n	8000dec <__addsf3+0xd8>
 8000d6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d70:	fa41 fc03 	asr.w	ip, r1, r3
 8000d74:	eb10 000c 	adds.w	r0, r0, ip
 8000d78:	f1c3 0320 	rsb	r3, r3, #32
 8000d7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d84:	d502      	bpl.n	8000d8c <__addsf3+0x78>
 8000d86:	4249      	negs	r1, r1
 8000d88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d90:	d313      	bcc.n	8000dba <__addsf3+0xa6>
 8000d92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d96:	d306      	bcc.n	8000da6 <__addsf3+0x92>
 8000d98:	0840      	lsrs	r0, r0, #1
 8000d9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d9e:	f102 0201 	add.w	r2, r2, #1
 8000da2:	2afe      	cmp	r2, #254	@ 0xfe
 8000da4:	d251      	bcs.n	8000e4a <__addsf3+0x136>
 8000da6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000daa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dae:	bf08      	it	eq
 8000db0:	f020 0001 	biceq.w	r0, r0, #1
 8000db4:	ea40 0003 	orr.w	r0, r0, r3
 8000db8:	4770      	bx	lr
 8000dba:	0049      	lsls	r1, r1, #1
 8000dbc:	eb40 0000 	adc.w	r0, r0, r0
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000dc8:	d2ed      	bcs.n	8000da6 <__addsf3+0x92>
 8000dca:	fab0 fc80 	clz	ip, r0
 8000dce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000dd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000dd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000dda:	bfaa      	itet	ge
 8000ddc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000de0:	4252      	neglt	r2, r2
 8000de2:	4318      	orrge	r0, r3
 8000de4:	bfbc      	itt	lt
 8000de6:	40d0      	lsrlt	r0, r2
 8000de8:	4318      	orrlt	r0, r3
 8000dea:	4770      	bx	lr
 8000dec:	f092 0f00 	teq	r2, #0
 8000df0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000df4:	bf06      	itte	eq
 8000df6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dfa:	3201      	addeq	r2, #1
 8000dfc:	3b01      	subne	r3, #1
 8000dfe:	e7b5      	b.n	8000d6c <__addsf3+0x58>
 8000e00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e08:	bf18      	it	ne
 8000e0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e0e:	d021      	beq.n	8000e54 <__addsf3+0x140>
 8000e10:	ea92 0f03 	teq	r2, r3
 8000e14:	d004      	beq.n	8000e20 <__addsf3+0x10c>
 8000e16:	f092 0f00 	teq	r2, #0
 8000e1a:	bf08      	it	eq
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	4770      	bx	lr
 8000e20:	ea90 0f01 	teq	r0, r1
 8000e24:	bf1c      	itt	ne
 8000e26:	2000      	movne	r0, #0
 8000e28:	4770      	bxne	lr
 8000e2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000e2e:	d104      	bne.n	8000e3a <__addsf3+0x126>
 8000e30:	0040      	lsls	r0, r0, #1
 8000e32:	bf28      	it	cs
 8000e34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	4770      	bx	lr
 8000e3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e3e:	bf3c      	itt	cc
 8000e40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e44:	4770      	bxcc	lr
 8000e46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e52:	4770      	bx	lr
 8000e54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e58:	bf16      	itet	ne
 8000e5a:	4608      	movne	r0, r1
 8000e5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e60:	4601      	movne	r1, r0
 8000e62:	0242      	lsls	r2, r0, #9
 8000e64:	bf06      	itte	eq
 8000e66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e6a:	ea90 0f01 	teqeq	r0, r1
 8000e6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_ui2f>:
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	e004      	b.n	8000e84 <__aeabi_i2f+0x8>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_i2f>:
 8000e7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e80:	bf48      	it	mi
 8000e82:	4240      	negmi	r0, r0
 8000e84:	ea5f 0c00 	movs.w	ip, r0
 8000e88:	bf08      	it	eq
 8000e8a:	4770      	bxeq	lr
 8000e8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e90:	4601      	mov	r1, r0
 8000e92:	f04f 0000 	mov.w	r0, #0
 8000e96:	e01c      	b.n	8000ed2 <__aeabi_l2f+0x2a>

08000e98 <__aeabi_ul2f>:
 8000e98:	ea50 0201 	orrs.w	r2, r0, r1
 8000e9c:	bf08      	it	eq
 8000e9e:	4770      	bxeq	lr
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	e00a      	b.n	8000ebc <__aeabi_l2f+0x14>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_l2f>:
 8000ea8:	ea50 0201 	orrs.w	r2, r0, r1
 8000eac:	bf08      	it	eq
 8000eae:	4770      	bxeq	lr
 8000eb0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000eb4:	d502      	bpl.n	8000ebc <__aeabi_l2f+0x14>
 8000eb6:	4240      	negs	r0, r0
 8000eb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ebc:	ea5f 0c01 	movs.w	ip, r1
 8000ec0:	bf02      	ittt	eq
 8000ec2:	4684      	moveq	ip, r0
 8000ec4:	4601      	moveq	r1, r0
 8000ec6:	2000      	moveq	r0, #0
 8000ec8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ecc:	bf08      	it	eq
 8000ece:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ed2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ed6:	fabc f28c 	clz	r2, ip
 8000eda:	3a08      	subs	r2, #8
 8000edc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ee0:	db10      	blt.n	8000f04 <__aeabi_l2f+0x5c>
 8000ee2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eec:	f1c2 0220 	rsb	r2, r2, #32
 8000ef0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ef4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ef8:	eb43 0002 	adc.w	r0, r3, r2
 8000efc:	bf08      	it	eq
 8000efe:	f020 0001 	biceq.w	r0, r0, #1
 8000f02:	4770      	bx	lr
 8000f04:	f102 0220 	add.w	r2, r2, #32
 8000f08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f0c:	f1c2 0220 	rsb	r2, r2, #32
 8000f10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f14:	fa21 f202 	lsr.w	r2, r1, r2
 8000f18:	eb43 0002 	adc.w	r0, r3, r2
 8000f1c:	bf08      	it	eq
 8000f1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_ldivmod>:
 8000f24:	b97b      	cbnz	r3, 8000f46 <__aeabi_ldivmod+0x22>
 8000f26:	b972      	cbnz	r2, 8000f46 <__aeabi_ldivmod+0x22>
 8000f28:	2900      	cmp	r1, #0
 8000f2a:	bfbe      	ittt	lt
 8000f2c:	2000      	movlt	r0, #0
 8000f2e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000f32:	e006      	blt.n	8000f42 <__aeabi_ldivmod+0x1e>
 8000f34:	bf08      	it	eq
 8000f36:	2800      	cmpeq	r0, #0
 8000f38:	bf1c      	itt	ne
 8000f3a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000f3e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f42:	f000 b9eb 	b.w	800131c <__aeabi_idiv0>
 8000f46:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f4a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f4e:	2900      	cmp	r1, #0
 8000f50:	db09      	blt.n	8000f66 <__aeabi_ldivmod+0x42>
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db1a      	blt.n	8000f8c <__aeabi_ldivmod+0x68>
 8000f56:	f000 f883 	bl	8001060 <__udivmoddi4>
 8000f5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f62:	b004      	add	sp, #16
 8000f64:	4770      	bx	lr
 8000f66:	4240      	negs	r0, r0
 8000f68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db1b      	blt.n	8000fa8 <__aeabi_ldivmod+0x84>
 8000f70:	f000 f876 	bl	8001060 <__udivmoddi4>
 8000f74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7c:	b004      	add	sp, #16
 8000f7e:	4240      	negs	r0, r0
 8000f80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f84:	4252      	negs	r2, r2
 8000f86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f8a:	4770      	bx	lr
 8000f8c:	4252      	negs	r2, r2
 8000f8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f92:	f000 f865 	bl	8001060 <__udivmoddi4>
 8000f96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f9e:	b004      	add	sp, #16
 8000fa0:	4240      	negs	r0, r0
 8000fa2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa6:	4770      	bx	lr
 8000fa8:	4252      	negs	r2, r2
 8000faa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fae:	f000 f857 	bl	8001060 <__udivmoddi4>
 8000fb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fba:	b004      	add	sp, #16
 8000fbc:	4252      	negs	r2, r2
 8000fbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_uldivmod>:
 8000fc4:	b953      	cbnz	r3, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc6:	b94a      	cbnz	r2, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc8:	2900      	cmp	r1, #0
 8000fca:	bf08      	it	eq
 8000fcc:	2800      	cmpeq	r0, #0
 8000fce:	bf1c      	itt	ne
 8000fd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000fd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000fd8:	f000 b9a0 	b.w	800131c <__aeabi_idiv0>
 8000fdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fe4:	f000 f83c 	bl	8001060 <__udivmoddi4>
 8000fe8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ff0:	b004      	add	sp, #16
 8000ff2:	4770      	bx	lr

08000ff4 <__aeabi_d2lz>:
 8000ff4:	b538      	push	{r3, r4, r5, lr}
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	460d      	mov	r5, r1
 8000ffe:	f7ff fdad 	bl	8000b5c <__aeabi_dcmplt>
 8001002:	b928      	cbnz	r0, 8001010 <__aeabi_d2lz+0x1c>
 8001004:	4620      	mov	r0, r4
 8001006:	4629      	mov	r1, r5
 8001008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800100c:	f000 b80a 	b.w	8001024 <__aeabi_d2ulz>
 8001010:	4620      	mov	r0, r4
 8001012:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001016:	f000 f805 	bl	8001024 <__aeabi_d2ulz>
 800101a:	4240      	negs	r0, r0
 800101c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001020:	bd38      	pop	{r3, r4, r5, pc}
 8001022:	bf00      	nop

08001024 <__aeabi_d2ulz>:
 8001024:	b5d0      	push	{r4, r6, r7, lr}
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <__aeabi_d2ulz+0x34>)
 8001028:	2200      	movs	r2, #0
 800102a:	4606      	mov	r6, r0
 800102c:	460f      	mov	r7, r1
 800102e:	f7ff fb23 	bl	8000678 <__aeabi_dmul>
 8001032:	f7ff fdf9 	bl	8000c28 <__aeabi_d2uiz>
 8001036:	4604      	mov	r4, r0
 8001038:	f7ff faa4 	bl	8000584 <__aeabi_ui2d>
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <__aeabi_d2ulz+0x38>)
 800103e:	2200      	movs	r2, #0
 8001040:	f7ff fb1a 	bl	8000678 <__aeabi_dmul>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4630      	mov	r0, r6
 800104a:	4639      	mov	r1, r7
 800104c:	f7ff f95c 	bl	8000308 <__aeabi_dsub>
 8001050:	f7ff fdea 	bl	8000c28 <__aeabi_d2uiz>
 8001054:	4621      	mov	r1, r4
 8001056:	bdd0      	pop	{r4, r6, r7, pc}
 8001058:	3df00000 	.word	0x3df00000
 800105c:	41f00000 	.word	0x41f00000

08001060 <__udivmoddi4>:
 8001060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001064:	9d08      	ldr	r5, [sp, #32]
 8001066:	460c      	mov	r4, r1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d14e      	bne.n	800110a <__udivmoddi4+0xaa>
 800106c:	4694      	mov	ip, r2
 800106e:	458c      	cmp	ip, r1
 8001070:	4686      	mov	lr, r0
 8001072:	fab2 f282 	clz	r2, r2
 8001076:	d962      	bls.n	800113e <__udivmoddi4+0xde>
 8001078:	b14a      	cbz	r2, 800108e <__udivmoddi4+0x2e>
 800107a:	f1c2 0320 	rsb	r3, r2, #32
 800107e:	4091      	lsls	r1, r2
 8001080:	fa20 f303 	lsr.w	r3, r0, r3
 8001084:	fa0c fc02 	lsl.w	ip, ip, r2
 8001088:	4319      	orrs	r1, r3
 800108a:	fa00 fe02 	lsl.w	lr, r0, r2
 800108e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001092:	fa1f f68c 	uxth.w	r6, ip
 8001096:	fbb1 f4f7 	udiv	r4, r1, r7
 800109a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800109e:	fb07 1114 	mls	r1, r7, r4, r1
 80010a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010a6:	fb04 f106 	mul.w	r1, r4, r6
 80010aa:	4299      	cmp	r1, r3
 80010ac:	d90a      	bls.n	80010c4 <__udivmoddi4+0x64>
 80010ae:	eb1c 0303 	adds.w	r3, ip, r3
 80010b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80010b6:	f080 8112 	bcs.w	80012de <__udivmoddi4+0x27e>
 80010ba:	4299      	cmp	r1, r3
 80010bc:	f240 810f 	bls.w	80012de <__udivmoddi4+0x27e>
 80010c0:	3c02      	subs	r4, #2
 80010c2:	4463      	add	r3, ip
 80010c4:	1a59      	subs	r1, r3, r1
 80010c6:	fa1f f38e 	uxth.w	r3, lr
 80010ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80010ce:	fb07 1110 	mls	r1, r7, r0, r1
 80010d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010d6:	fb00 f606 	mul.w	r6, r0, r6
 80010da:	429e      	cmp	r6, r3
 80010dc:	d90a      	bls.n	80010f4 <__udivmoddi4+0x94>
 80010de:	eb1c 0303 	adds.w	r3, ip, r3
 80010e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80010e6:	f080 80fc 	bcs.w	80012e2 <__udivmoddi4+0x282>
 80010ea:	429e      	cmp	r6, r3
 80010ec:	f240 80f9 	bls.w	80012e2 <__udivmoddi4+0x282>
 80010f0:	4463      	add	r3, ip
 80010f2:	3802      	subs	r0, #2
 80010f4:	1b9b      	subs	r3, r3, r6
 80010f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010fa:	2100      	movs	r1, #0
 80010fc:	b11d      	cbz	r5, 8001106 <__udivmoddi4+0xa6>
 80010fe:	40d3      	lsrs	r3, r2
 8001100:	2200      	movs	r2, #0
 8001102:	e9c5 3200 	strd	r3, r2, [r5]
 8001106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800110a:	428b      	cmp	r3, r1
 800110c:	d905      	bls.n	800111a <__udivmoddi4+0xba>
 800110e:	b10d      	cbz	r5, 8001114 <__udivmoddi4+0xb4>
 8001110:	e9c5 0100 	strd	r0, r1, [r5]
 8001114:	2100      	movs	r1, #0
 8001116:	4608      	mov	r0, r1
 8001118:	e7f5      	b.n	8001106 <__udivmoddi4+0xa6>
 800111a:	fab3 f183 	clz	r1, r3
 800111e:	2900      	cmp	r1, #0
 8001120:	d146      	bne.n	80011b0 <__udivmoddi4+0x150>
 8001122:	42a3      	cmp	r3, r4
 8001124:	d302      	bcc.n	800112c <__udivmoddi4+0xcc>
 8001126:	4290      	cmp	r0, r2
 8001128:	f0c0 80f0 	bcc.w	800130c <__udivmoddi4+0x2ac>
 800112c:	1a86      	subs	r6, r0, r2
 800112e:	eb64 0303 	sbc.w	r3, r4, r3
 8001132:	2001      	movs	r0, #1
 8001134:	2d00      	cmp	r5, #0
 8001136:	d0e6      	beq.n	8001106 <__udivmoddi4+0xa6>
 8001138:	e9c5 6300 	strd	r6, r3, [r5]
 800113c:	e7e3      	b.n	8001106 <__udivmoddi4+0xa6>
 800113e:	2a00      	cmp	r2, #0
 8001140:	f040 8090 	bne.w	8001264 <__udivmoddi4+0x204>
 8001144:	eba1 040c 	sub.w	r4, r1, ip
 8001148:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800114c:	fa1f f78c 	uxth.w	r7, ip
 8001150:	2101      	movs	r1, #1
 8001152:	fbb4 f6f8 	udiv	r6, r4, r8
 8001156:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800115a:	fb08 4416 	mls	r4, r8, r6, r4
 800115e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001162:	fb07 f006 	mul.w	r0, r7, r6
 8001166:	4298      	cmp	r0, r3
 8001168:	d908      	bls.n	800117c <__udivmoddi4+0x11c>
 800116a:	eb1c 0303 	adds.w	r3, ip, r3
 800116e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001172:	d202      	bcs.n	800117a <__udivmoddi4+0x11a>
 8001174:	4298      	cmp	r0, r3
 8001176:	f200 80cd 	bhi.w	8001314 <__udivmoddi4+0x2b4>
 800117a:	4626      	mov	r6, r4
 800117c:	1a1c      	subs	r4, r3, r0
 800117e:	fa1f f38e 	uxth.w	r3, lr
 8001182:	fbb4 f0f8 	udiv	r0, r4, r8
 8001186:	fb08 4410 	mls	r4, r8, r0, r4
 800118a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800118e:	fb00 f707 	mul.w	r7, r0, r7
 8001192:	429f      	cmp	r7, r3
 8001194:	d908      	bls.n	80011a8 <__udivmoddi4+0x148>
 8001196:	eb1c 0303 	adds.w	r3, ip, r3
 800119a:	f100 34ff 	add.w	r4, r0, #4294967295
 800119e:	d202      	bcs.n	80011a6 <__udivmoddi4+0x146>
 80011a0:	429f      	cmp	r7, r3
 80011a2:	f200 80b0 	bhi.w	8001306 <__udivmoddi4+0x2a6>
 80011a6:	4620      	mov	r0, r4
 80011a8:	1bdb      	subs	r3, r3, r7
 80011aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80011ae:	e7a5      	b.n	80010fc <__udivmoddi4+0x9c>
 80011b0:	f1c1 0620 	rsb	r6, r1, #32
 80011b4:	408b      	lsls	r3, r1
 80011b6:	fa22 f706 	lsr.w	r7, r2, r6
 80011ba:	431f      	orrs	r7, r3
 80011bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80011c0:	fa04 f301 	lsl.w	r3, r4, r1
 80011c4:	ea43 030c 	orr.w	r3, r3, ip
 80011c8:	40f4      	lsrs	r4, r6
 80011ca:	fa00 f801 	lsl.w	r8, r0, r1
 80011ce:	0c38      	lsrs	r0, r7, #16
 80011d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80011d4:	fbb4 fef0 	udiv	lr, r4, r0
 80011d8:	fa1f fc87 	uxth.w	ip, r7
 80011dc:	fb00 441e 	mls	r4, r0, lr, r4
 80011e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011e4:	fb0e f90c 	mul.w	r9, lr, ip
 80011e8:	45a1      	cmp	r9, r4
 80011ea:	fa02 f201 	lsl.w	r2, r2, r1
 80011ee:	d90a      	bls.n	8001206 <__udivmoddi4+0x1a6>
 80011f0:	193c      	adds	r4, r7, r4
 80011f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80011f6:	f080 8084 	bcs.w	8001302 <__udivmoddi4+0x2a2>
 80011fa:	45a1      	cmp	r9, r4
 80011fc:	f240 8081 	bls.w	8001302 <__udivmoddi4+0x2a2>
 8001200:	f1ae 0e02 	sub.w	lr, lr, #2
 8001204:	443c      	add	r4, r7
 8001206:	eba4 0409 	sub.w	r4, r4, r9
 800120a:	fa1f f983 	uxth.w	r9, r3
 800120e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001212:	fb00 4413 	mls	r4, r0, r3, r4
 8001216:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800121a:	fb03 fc0c 	mul.w	ip, r3, ip
 800121e:	45a4      	cmp	ip, r4
 8001220:	d907      	bls.n	8001232 <__udivmoddi4+0x1d2>
 8001222:	193c      	adds	r4, r7, r4
 8001224:	f103 30ff 	add.w	r0, r3, #4294967295
 8001228:	d267      	bcs.n	80012fa <__udivmoddi4+0x29a>
 800122a:	45a4      	cmp	ip, r4
 800122c:	d965      	bls.n	80012fa <__udivmoddi4+0x29a>
 800122e:	3b02      	subs	r3, #2
 8001230:	443c      	add	r4, r7
 8001232:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001236:	fba0 9302 	umull	r9, r3, r0, r2
 800123a:	eba4 040c 	sub.w	r4, r4, ip
 800123e:	429c      	cmp	r4, r3
 8001240:	46ce      	mov	lr, r9
 8001242:	469c      	mov	ip, r3
 8001244:	d351      	bcc.n	80012ea <__udivmoddi4+0x28a>
 8001246:	d04e      	beq.n	80012e6 <__udivmoddi4+0x286>
 8001248:	b155      	cbz	r5, 8001260 <__udivmoddi4+0x200>
 800124a:	ebb8 030e 	subs.w	r3, r8, lr
 800124e:	eb64 040c 	sbc.w	r4, r4, ip
 8001252:	fa04 f606 	lsl.w	r6, r4, r6
 8001256:	40cb      	lsrs	r3, r1
 8001258:	431e      	orrs	r6, r3
 800125a:	40cc      	lsrs	r4, r1
 800125c:	e9c5 6400 	strd	r6, r4, [r5]
 8001260:	2100      	movs	r1, #0
 8001262:	e750      	b.n	8001106 <__udivmoddi4+0xa6>
 8001264:	f1c2 0320 	rsb	r3, r2, #32
 8001268:	fa20 f103 	lsr.w	r1, r0, r3
 800126c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001270:	fa24 f303 	lsr.w	r3, r4, r3
 8001274:	4094      	lsls	r4, r2
 8001276:	430c      	orrs	r4, r1
 8001278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800127c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001280:	fa1f f78c 	uxth.w	r7, ip
 8001284:	fbb3 f0f8 	udiv	r0, r3, r8
 8001288:	fb08 3110 	mls	r1, r8, r0, r3
 800128c:	0c23      	lsrs	r3, r4, #16
 800128e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001292:	fb00 f107 	mul.w	r1, r0, r7
 8001296:	4299      	cmp	r1, r3
 8001298:	d908      	bls.n	80012ac <__udivmoddi4+0x24c>
 800129a:	eb1c 0303 	adds.w	r3, ip, r3
 800129e:	f100 36ff 	add.w	r6, r0, #4294967295
 80012a2:	d22c      	bcs.n	80012fe <__udivmoddi4+0x29e>
 80012a4:	4299      	cmp	r1, r3
 80012a6:	d92a      	bls.n	80012fe <__udivmoddi4+0x29e>
 80012a8:	3802      	subs	r0, #2
 80012aa:	4463      	add	r3, ip
 80012ac:	1a5b      	subs	r3, r3, r1
 80012ae:	b2a4      	uxth	r4, r4
 80012b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80012b4:	fb08 3311 	mls	r3, r8, r1, r3
 80012b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012bc:	fb01 f307 	mul.w	r3, r1, r7
 80012c0:	42a3      	cmp	r3, r4
 80012c2:	d908      	bls.n	80012d6 <__udivmoddi4+0x276>
 80012c4:	eb1c 0404 	adds.w	r4, ip, r4
 80012c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80012cc:	d213      	bcs.n	80012f6 <__udivmoddi4+0x296>
 80012ce:	42a3      	cmp	r3, r4
 80012d0:	d911      	bls.n	80012f6 <__udivmoddi4+0x296>
 80012d2:	3902      	subs	r1, #2
 80012d4:	4464      	add	r4, ip
 80012d6:	1ae4      	subs	r4, r4, r3
 80012d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012dc:	e739      	b.n	8001152 <__udivmoddi4+0xf2>
 80012de:	4604      	mov	r4, r0
 80012e0:	e6f0      	b.n	80010c4 <__udivmoddi4+0x64>
 80012e2:	4608      	mov	r0, r1
 80012e4:	e706      	b.n	80010f4 <__udivmoddi4+0x94>
 80012e6:	45c8      	cmp	r8, r9
 80012e8:	d2ae      	bcs.n	8001248 <__udivmoddi4+0x1e8>
 80012ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80012ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80012f2:	3801      	subs	r0, #1
 80012f4:	e7a8      	b.n	8001248 <__udivmoddi4+0x1e8>
 80012f6:	4631      	mov	r1, r6
 80012f8:	e7ed      	b.n	80012d6 <__udivmoddi4+0x276>
 80012fa:	4603      	mov	r3, r0
 80012fc:	e799      	b.n	8001232 <__udivmoddi4+0x1d2>
 80012fe:	4630      	mov	r0, r6
 8001300:	e7d4      	b.n	80012ac <__udivmoddi4+0x24c>
 8001302:	46d6      	mov	lr, sl
 8001304:	e77f      	b.n	8001206 <__udivmoddi4+0x1a6>
 8001306:	4463      	add	r3, ip
 8001308:	3802      	subs	r0, #2
 800130a:	e74d      	b.n	80011a8 <__udivmoddi4+0x148>
 800130c:	4606      	mov	r6, r0
 800130e:	4623      	mov	r3, r4
 8001310:	4608      	mov	r0, r1
 8001312:	e70f      	b.n	8001134 <__udivmoddi4+0xd4>
 8001314:	3e02      	subs	r6, #2
 8001316:	4463      	add	r3, ip
 8001318:	e730      	b.n	800117c <__udivmoddi4+0x11c>
 800131a:	bf00      	nop

0800131c <__aeabi_idiv0>:
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop

08001320 <Calc_config_crc>:
	return crc;
}

void Calc_config_crc(void)		// aktualizacja CRC struktury config
{
	config.checksum = 0xFFFF;
 8001320:	480e      	ldr	r0, [pc, #56]	@ (800135c <Calc_config_crc+0x3c>)
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	f880 30f1 	strb.w	r3, [r0, #241]	@ 0xf1
 800132a:	f880 30f2 	strb.w	r3, [r0, #242]	@ 0xf2
	uint8_t *p = (uint8_t*)&config;
 800132e:	4601      	mov	r1, r0
	config.checksum = 0xFFFF;
 8001330:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001334:	f100 0cf1 	add.w	ip, r0, #241	@ 0xf1
	uint8_t x = crc >> 8 ^ data;
 8001338:	f811 2b01 	ldrb.w	r2, [r1], #1
 800133c:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 8001340:	ea82 1212 	eor.w	r2, r2, r2, lsr #4
 8001344:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001348:	ea83 3302 	eor.w	r3, r3, r2, lsl #12
 800134c:	ea83 1342 	eor.w	r3, r3, r2, lsl #5
	for(int i=0; i<sizeof(config)-2; ++i) config.checksum = Crc16_up(config.checksum, *p++);
 8001350:	4561      	cmp	r1, ip
 8001352:	f8a0 30f1 	strh.w	r3, [r0, #241]	@ 0xf1
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 8001356:	b29b      	uxth	r3, r3
	for(int i=0; i<sizeof(config)-2; ++i) config.checksum = Crc16_up(config.checksum, *p++);
 8001358:	d1ee      	bne.n	8001338 <Calc_config_crc+0x18>
}
 800135a:	4770      	bx	lr
 800135c:	200019c0 	.word	0x200019c0

08001360 <Flash_write_block>:

#define ADDR_FLASH_PAGE_0   ((uint32_t)0x08000000) /* Base @ of Page 0, 2 Kbytes */
#define FLASH_PAGE_ADDRESS 	(ADDR_FLASH_PAGE_0 | (FLASH_PAGE_SIZE * USE_FLASH_PAGE))

uint8_t Flash_write_block(uint32_t blk, uint8_t *buff, uint32_t len)
{
 8001360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001364:	b086      	sub	sp, #24
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError = 0;
 8001366:	2300      	movs	r3, #0
{
 8001368:	4606      	mov	r6, r0
 800136a:	460c      	mov	r4, r1
 800136c:	4690      	mov	r8, r2
	uint32_t PAGEError = 0;
 800136e:	9301      	str	r3, [sp, #4]
//	WDR();
	HAL_FLASH_Unlock();
 8001370:	f009 fd8a 	bl	800ae88 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001374:	4b20      	ldr	r3, [pc, #128]	@ (80013f8 <Flash_write_block+0x98>)
 8001376:	699a      	ldr	r2, [r3, #24]
 8001378:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800137c:	619a      	str	r2, [r3, #24]
 800137e:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8001382:	611a      	str	r2, [r3, #16]
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001384:	2301      	movs	r3, #1
 8001386:	2200      	movs	r2, #0
 8001388:	e9cd 2302 	strd	r2, r3, [sp, #8]
	EraseInitStruct.Banks       = FLASH_BANK_1;
	EraseInitStruct.Page        = blk;                                  // 2kb page
	EraseInitStruct.NbPages     = 1;
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)		// kasuj cala strone
 800138c:	a901      	add	r1, sp, #4
	EraseInitStruct.NbPages     = 1;
 800138e:	2301      	movs	r3, #1
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)		// kasuj cala strone
 8001390:	a802      	add	r0, sp, #8
	EraseInitStruct.NbPages     = 1;
 8001392:	e9cd 6304 	strd	r6, r3, [sp, #16]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)		// kasuj cala strone
 8001396:	f009 fe61 	bl	800b05c <HAL_FLASHEx_Erase>
 800139a:	bb28      	cbnz	r0, 80013e8 <Flash_write_block+0x88>
		return 0;
	}
    blk *= FLASH_PAGE_SIZE;
    blk += ADDR_FLASH_PAGE_0;
	uint64_t data64;
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 800139c:	ebc4 26c6 	rsb	r6, r4, r6, lsl #11
    {
        data64 = *(uint64_t*)buff;
        buff += 8;
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 80013a0:	f106 6600 	add.w	r6, r6, #134217728	@ 0x8000000
 80013a4:	4605      	mov	r5, r0
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 80013a6:	ea4f 08d8 	mov.w	r8, r8, lsr #3
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 80013aa:	3e08      	subs	r6, #8
 80013ac:	e002      	b.n	80013b4 <Flash_write_block+0x54>
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 80013ae:	45a8      	cmp	r8, r5
 80013b0:	d014      	beq.n	80013dc <Flash_write_block+0x7c>
 80013b2:	461d      	mov	r5, r3
        data64 = *(uint64_t*)buff;
 80013b4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 80013b8:	19a7      	adds	r7, r4, r6
 80013ba:	2000      	movs	r0, #0
 80013bc:	4639      	mov	r1, r7
 80013be:	f009 fdad 	bl	800af1c <HAL_FLASH_Program>
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 80013c2:	1c6b      	adds	r3, r5, #1
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d0f2      	beq.n	80013ae <Flash_write_block+0x4e>
        {
            HAL_FLASH_Lock();
 80013c8:	f009 fd72 	bl	800aeb0 <HAL_FLASH_Lock>
//            HAL_IWDG_Refresh(&hiwdg);
            printf("Programming error at %X\r\n",(unsigned int)(8*i + blk));
 80013cc:	4639      	mov	r1, r7
 80013ce:	480b      	ldr	r0, [pc, #44]	@ (80013fc <Flash_write_block+0x9c>)
 80013d0:	f00f fca8 	bl	8010d24 <iprintf>
            return 1;                               // blad
 80013d4:	2001      	movs	r0, #1
        }
    }
	HAL_FLASH_Lock();
//	WDR();
	return 0;										// OK
}
 80013d6:	b006      	add	sp, #24
 80013d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	HAL_FLASH_Lock();
 80013dc:	f009 fd68 	bl	800aeb0 <HAL_FLASH_Lock>
		return 0;
 80013e0:	2000      	movs	r0, #0
}
 80013e2:	b006      	add	sp, #24
 80013e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_FLASH_Lock();			// blad kasowania
 80013e8:	f009 fd62 	bl	800aeb0 <HAL_FLASH_Lock>
		printf("Erase error at %u\r\n", (int)blk);
 80013ec:	4631      	mov	r1, r6
 80013ee:	4804      	ldr	r0, [pc, #16]	@ (8001400 <Flash_write_block+0xa0>)
 80013f0:	f00f fc98 	bl	8010d24 <iprintf>
		return 0;
 80013f4:	e7f4      	b.n	80013e0 <Flash_write_block+0x80>
 80013f6:	bf00      	nop
 80013f8:	40022000 	.word	0x40022000
 80013fc:	0801429c 	.word	0x0801429c
 8001400:	08014288 	.word	0x08014288

08001404 <Save_config>:
    adr += (FLASH_PAGE_SIZE * USE_FLASH_PAGE);
    Flash_read(adr, data, size);
}

uint8_t Save_config(void)
{
 8001404:	b570      	push	{r4, r5, r6, lr}
    uint8_t err = 0;
    uint16_t oldcrc = config.checksum;
 8001406:	4e12      	ldr	r6, [pc, #72]	@ (8001450 <Save_config+0x4c>)
 8001408:	f8b6 40f1 	ldrh.w	r4, [r6, #241]	@ 0xf1
    Calc_config_crc();
 800140c:	f7ff ff88 	bl	8001320 <Calc_config_crc>
    if(config.checksum != oldcrc)
 8001410:	f8b6 30f1 	ldrh.w	r3, [r6, #241]	@ 0xf1
 8001414:	42a3      	cmp	r3, r4
 8001416:	d101      	bne.n	800141c <Save_config+0x18>
    uint8_t err = 0;
 8001418:	2000      	movs	r0, #0
        err  = FLASH_write_block(0, p, sizeof(config));     // zapisz do 1 kopii
        err |= FLASH_write_block(1, p, sizeof(config));     // zapisz do 2 kopii
        err++;
    }
    return err;         // 0=NotNeed, 1=OK, 2=blad
}
 800141a:	bd70      	pop	{r4, r5, r6, pc}
 800141c:	2504      	movs	r5, #4
        err =  Flash_write_block(adr, buff, len);
 800141e:	22f3      	movs	r2, #243	@ 0xf3
 8001420:	4631      	mov	r1, r6
 8001422:	207e      	movs	r0, #126	@ 0x7e
 8001424:	f7ff ff9c 	bl	8001360 <Flash_write_block>
        if(err == 0) break;
 8001428:	4604      	mov	r4, r0
 800142a:	b108      	cbz	r0, 8001430 <Save_config+0x2c>
    for(int i=0; i<4; ++i)
 800142c:	3d01      	subs	r5, #1
 800142e:	d1f6      	bne.n	800141e <Save_config+0x1a>
        err =  Flash_write_block(adr, buff, len);
 8001430:	4e07      	ldr	r6, [pc, #28]	@ (8001450 <Save_config+0x4c>)
 8001432:	2504      	movs	r5, #4
 8001434:	22f3      	movs	r2, #243	@ 0xf3
 8001436:	4631      	mov	r1, r6
 8001438:	207f      	movs	r0, #127	@ 0x7f
 800143a:	f7ff ff91 	bl	8001360 <Flash_write_block>
        if(err == 0) break;
 800143e:	b118      	cbz	r0, 8001448 <Save_config+0x44>
    for(int i=0; i<4; ++i)
 8001440:	3d01      	subs	r5, #1
 8001442:	d1f7      	bne.n	8001434 <Save_config+0x30>
        err |= FLASH_write_block(1, p, sizeof(config));     // zapisz do 2 kopii
 8001444:	4320      	orrs	r0, r4
 8001446:	b2c4      	uxtb	r4, r0
        err++;
 8001448:	1c60      	adds	r0, r4, #1
 800144a:	b2c0      	uxtb	r0, r0
}
 800144c:	bd70      	pop	{r4, r5, r6, pc}
 800144e:	bf00      	nop
 8001450:	200019c0 	.word	0x200019c0

08001454 <Load_defaults>:
    }
    return 0;                                                   // config OK
}

void Load_defaults()
{
 8001454:	b510      	push	{r4, lr}
	memset((uint8_t*)&config, 0, sizeof(config));
 8001456:	4c14      	ldr	r4, [pc, #80]	@ (80014a8 <Load_defaults+0x54>)
 8001458:	22ec      	movs	r2, #236	@ 0xec
 800145a:	2100      	movs	r1, #0
 800145c:	4620      	mov	r0, r4
 800145e:	f00f fe29 	bl	80110b4 <memset>

	config.version = CONFIG_VERSION;
 8001462:	1fe3      	subs	r3, r4, #7
	config.bat_scale = 0.0505f;
 8001464:	4a11      	ldr	r2, [pc, #68]	@ (80014ac <Load_defaults+0x58>)
 8001466:	f844 2c06 	str.w	r2, [r4, #-6]
	config.version = CONFIG_VERSION;
 800146a:	2102      	movs	r1, #2
 800146c:	f804 1c07 	strb.w	r1, [r4, #-7]
	config.batt_alarm = BATT_ALARM_VOLTAGE;  // definicja w main.h
 8001470:	220c      	movs	r2, #12
 8001472:	f06f 011b 	mvn.w	r1, #27
 8001476:	2000      	movs	r0, #0
 8001478:	7159      	strb	r1, [r3, #5]
 800147a:	719a      	strb	r2, [r3, #6]
	config.MS8607_h_use = 1;
	config.MS8607_p_use = 1;
	config.MS8607_t_offset = 0.0f;
	config.MS8607_h_offset = 0.0f;
	config.MS8607_p_offset = 0.0f;
	config.BME280_use = 1;
 800147c:	21f5      	movs	r1, #245	@ 0xf5
	config.MS8607_use = 1;
 800147e:	22e7      	movs	r2, #231	@ 0xe7
	config.DPS368_t_use = 1;
	config.DPS368_p_use = 1;
	config.DPS368_t_offset = 0.0f;
	config.DPS368_p_offset = 0.0f;

	config.tim_interval = 15;			// w minutach zaokraglany do 15min przez system
 8001480:	70a0      	strb	r0, [r4, #2]
	config.MS8607_use = 1;
 8001482:	761a      	strb	r2, [r3, #24]
	config.SHT3_use = 1;
 8001484:	2441      	movs	r4, #65	@ 0x41
	config.DPS368_use = 1;
 8001486:	2271      	movs	r2, #113	@ 0x71
	config.BME280_use = 1;
 8001488:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
	config.measures = 20;
 800148c:	2114      	movs	r1, #20
	config.TMP117_use = 1;
 800148e:	2023      	movs	r0, #35	@ 0x23
	config.SHT3_use = 1;
 8001490:	73dc      	strb	r4, [r3, #15]
	config.DPS368_use = 1;
 8001492:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	config.tim_interval = 15;			// w minutach zaokraglany do 15min przez system
 8001496:	240f      	movs	r4, #15
	config.sendFormat = 1;
 8001498:	2201      	movs	r2, #1
	config.measures = 20;
 800149a:	f883 103b 	strb.w	r1, [r3, #59]	@ 0x3b
	config.tim_interval = 15;			// w minutach zaokraglany do 15min przez system
 800149e:	721c      	strb	r4, [r3, #8]
	config.TMP117_use = 1;
 80014a0:	7298      	strb	r0, [r3, #10]
	config.sendFormat = 1;
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80014a6:	bd10      	pop	{r4, pc}
 80014a8:	200019c7 	.word	0x200019c7
 80014ac:	3d4ed917 	.word	0x3d4ed917

080014b0 <Load_config>:
{
 80014b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b2:	4d39      	ldr	r5, [pc, #228]	@ (8001598 <Load_config+0xe8>)
 80014b4:	f1c5 6400 	rsb	r4, r5, #134217728	@ 0x8000000
 80014b8:	1c6e      	adds	r6, r5, #1
 80014ba:	f105 0ef3 	add.w	lr, r5, #243	@ 0xf3
 80014be:	462b      	mov	r3, r5
 80014c0:	f504 347c 	add.w	r4, r4, #258048	@ 0x3f000
    for(uint32_t i=0; i<size; ++i) data[i] = *psrc++;
 80014c4:	5d1a      	ldrb	r2, [r3, r4]
 80014c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80014ca:	459e      	cmp	lr, r3
 80014cc:	d1fa      	bne.n	80014c4 <Load_config+0x14>
    uint8_t *p = (uint8_t*)&config;
 80014ce:	4933      	ldr	r1, [pc, #204]	@ (800159c <Load_config+0xec>)
    uint16_t chk = 0xFFFF;
 80014d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014d4:	f101 0cf1 	add.w	ip, r1, #241	@ 0xf1
	uint8_t x = crc >> 8 ^ data;
 80014d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014dc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 80014e0:	ea83 1313 	eor.w	r3, r3, r3, lsr #4
 80014e4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80014e8:	ea82 3203 	eor.w	r2, r2, r3, lsl #12
 80014ec:	ea82 1243 	eor.w	r2, r2, r3, lsl #5
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 80014f0:	4561      	cmp	r1, ip
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 80014f2:	b292      	uxth	r2, r2
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 80014f4:	d1f0      	bne.n	80014d8 <Load_config+0x28>
    if(chk == config.checksum) eepok |= 1;                      // zaznacz ze jest ok
 80014f6:	482a      	ldr	r0, [pc, #168]	@ (80015a0 <Load_config+0xf0>)
 80014f8:	f8b6 70f1 	ldrh.w	r7, [r6, #241]	@ 0xf1
 80014fc:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <Load_config+0xe8>)
 80014fe:	1b80      	subs	r0, r0, r6
    for(uint32_t i=0; i<size; ++i) data[i] = *psrc++;
 8001500:	5cc1      	ldrb	r1, [r0, r3]
 8001502:	f803 1f01 	strb.w	r1, [r3, #1]!
 8001506:	459e      	cmp	lr, r3
 8001508:	d1fa      	bne.n	8001500 <Load_config+0x50>
    p = (uint8_t*)&config;
 800150a:	4824      	ldr	r0, [pc, #144]	@ (800159c <Load_config+0xec>)
    chk = 0xFFFF;
 800150c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
	uint8_t x = crc >> 8 ^ data;
 8001510:	f810 1b01 	ldrb.w	r1, [r0], #1
 8001514:	ea81 2113 	eor.w	r1, r1, r3, lsr #8
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 8001518:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800151c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001520:	ea83 3301 	eor.w	r3, r3, r1, lsl #12
 8001524:	ea83 1341 	eor.w	r3, r3, r1, lsl #5
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 8001528:	4560      	cmp	r0, ip
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 800152a:	b29b      	uxth	r3, r3
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 800152c:	d1f0      	bne.n	8001510 <Load_config+0x60>
    if(chk == config.checksum) eepok |= 2;                      // zaznacz ze jest ok
 800152e:	f8b6 10f1 	ldrh.w	r1, [r6, #241]	@ 0xf1
 8001532:	4299      	cmp	r1, r3
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 8001534:	f810 3cf1 	ldrb.w	r3, [r0, #-241]
    if(chk == config.checksum) eepok |= 2;                      // zaznacz ze jest ok
 8001538:	d014      	beq.n	8001564 <Load_config+0xb4>
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 800153a:	2b02      	cmp	r3, #2
 800153c:	d114      	bne.n	8001568 <Load_config+0xb8>
    switch(eepok)
 800153e:	4297      	cmp	r7, r2
 8001540:	d112      	bne.n	8001568 <Load_config+0xb8>
    for(uint32_t i=0; i<size; ++i) data[i] = *psrc++;
 8001542:	5d2b      	ldrb	r3, [r5, r4]
 8001544:	f805 3f01 	strb.w	r3, [r5, #1]!
 8001548:	45ae      	cmp	lr, r5
 800154a:	d1fa      	bne.n	8001542 <Load_config+0x92>
        err =  Flash_write_block(adr, buff, len);
 800154c:	4d13      	ldr	r5, [pc, #76]	@ (800159c <Load_config+0xec>)
 800154e:	2404      	movs	r4, #4
 8001550:	22f3      	movs	r2, #243	@ 0xf3
 8001552:	4629      	mov	r1, r5
 8001554:	207f      	movs	r0, #127	@ 0x7f
 8001556:	f7ff ff03 	bl	8001360 <Flash_write_block>
        if(err == 0) break;
 800155a:	b1d0      	cbz	r0, 8001592 <Load_config+0xe2>
    for(int i=0; i<4; ++i)
 800155c:	3c01      	subs	r4, #1
 800155e:	d1f7      	bne.n	8001550 <Load_config+0xa0>
            if(eepok>1) return 3; else return 2;                // 2=zaladowano defaulty, 3=blad zapisu flash
 8001560:	2003      	movs	r0, #3
}
 8001562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 8001564:	2b02      	cmp	r3, #2
 8001566:	d007      	beq.n	8001578 <Load_config+0xc8>
            Load_defaults();
 8001568:	f7ff ff74 	bl	8001454 <Load_defaults>
            eepok = Save_config();
 800156c:	f7ff ff4a 	bl	8001404 <Save_config>
            if(eepok>1) return 3; else return 2;                // 2=zaladowano defaulty, 3=blad zapisu flash
 8001570:	2801      	cmp	r0, #1
 8001572:	d8f5      	bhi.n	8001560 <Load_config+0xb0>
 8001574:	2002      	movs	r0, #2
}
 8001576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(eepok)
 8001578:	4297      	cmp	r7, r2
 800157a:	d00a      	beq.n	8001592 <Load_config+0xe2>
        err =  Flash_write_block(adr, buff, len);
 800157c:	4d07      	ldr	r5, [pc, #28]	@ (800159c <Load_config+0xec>)
    switch(eepok)
 800157e:	2404      	movs	r4, #4
        err =  Flash_write_block(adr, buff, len);
 8001580:	22f3      	movs	r2, #243	@ 0xf3
 8001582:	4629      	mov	r1, r5
 8001584:	207e      	movs	r0, #126	@ 0x7e
 8001586:	f7ff feeb 	bl	8001360 <Flash_write_block>
        if(err == 0) break;
 800158a:	b110      	cbz	r0, 8001592 <Load_config+0xe2>
    for(int i=0; i<4; ++i)
 800158c:	3c01      	subs	r4, #1
 800158e:	d1f7      	bne.n	8001580 <Load_config+0xd0>
 8001590:	e7e6      	b.n	8001560 <Load_config+0xb0>
    return 0;                                                   // config OK
 8001592:	2000      	movs	r0, #0
}
 8001594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001596:	bf00      	nop
 8001598:	200019bf 	.word	0x200019bf
 800159c:	200019c0 	.word	0x200019c0
 80015a0:	0803f801 	.word	0x0803f801

080015a4 <EEPROM_Print_config>:

void EEPROM_Print_config(void)
{
 80015a4:	b570      	push	{r4, r5, r6, lr}
	printf("================================= \r\n");
 80015a6:	4eb2      	ldr	r6, [pc, #712]	@ (8001870 <EEPROM_Print_config+0x2cc>)
	printf("Config version: %i \r\n", config.version);
 80015a8:	4cb2      	ldr	r4, [pc, #712]	@ (8001874 <EEPROM_Print_config+0x2d0>)
	printf("MQTT IP: %s \r\n", config.mqttIP);
	printf("MQTT Port: %i \r\n", config.mqttPort);
	printf("MQTT User: %s \r\n", config.mqttUser);
	printf("MQTT Pass: %s \r\n", config.mqttPass);

	printf("TMP117 sensor use %i %i \r\n", config.TMP117_use, TMP117.sensor_use);
 80015aa:	4db3      	ldr	r5, [pc, #716]	@ (8001878 <EEPROM_Print_config+0x2d4>)
	printf("================================= \r\n");
 80015ac:	4630      	mov	r0, r6
 80015ae:	f00f fc21 	bl	8010df4 <puts>
	printf("Config version: %i \r\n", config.version);
 80015b2:	7821      	ldrb	r1, [r4, #0]
 80015b4:	48b1      	ldr	r0, [pc, #708]	@ (800187c <EEPROM_Print_config+0x2d8>)
 80015b6:	f00f fbb5 	bl	8010d24 <iprintf>
	printf("Battery scale: %f \r\n", config.bat_scale);
 80015ba:	f8d4 0001 	ldr.w	r0, [r4, #1]
 80015be:	f7ff f803 	bl	80005c8 <__aeabi_f2d>
 80015c2:	460b      	mov	r3, r1
 80015c4:	4602      	mov	r2, r0
 80015c6:	48ae      	ldr	r0, [pc, #696]	@ (8001880 <EEPROM_Print_config+0x2dc>)
 80015c8:	f00f fbac 	bl	8010d24 <iprintf>
	printf("Low Batt alarm: %i \r\n", config.batt_alarm);
 80015cc:	f8b4 1005 	ldrh.w	r1, [r4, #5]
 80015d0:	48ac      	ldr	r0, [pc, #688]	@ (8001884 <EEPROM_Print_config+0x2e0>)
 80015d2:	f00f fba7 	bl	8010d24 <iprintf>
	printf("Meas interval: %i \r\n", config.tim_interval);
 80015d6:	8921      	ldrh	r1, [r4, #8]
 80015d8:	48ab      	ldr	r0, [pc, #684]	@ (8001888 <EEPROM_Print_config+0x2e4>)
 80015da:	f00f fba3 	bl	8010d24 <iprintf>
	printf("Meas count: %i \r\n", config.measures);
 80015de:	f894 103b 	ldrb.w	r1, [r4, #59]	@ 0x3b
 80015e2:	48aa      	ldr	r0, [pc, #680]	@ (800188c <EEPROM_Print_config+0x2e8>)
 80015e4:	f00f fb9e 	bl	8010d24 <iprintf>
	printf("Send Format: %i \r\n", config.sendFormat);
 80015e8:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 80015ec:	48a8      	ldr	r0, [pc, #672]	@ (8001890 <EEPROM_Print_config+0x2ec>)
 80015ee:	f001 0103 	and.w	r1, r1, #3
 80015f2:	f00f fb97 	bl	8010d24 <iprintf>
	printf("Server IP: %s \r\n", config.serverIP);
 80015f6:	f104 014d 	add.w	r1, r4, #77	@ 0x4d
 80015fa:	48a6      	ldr	r0, [pc, #664]	@ (8001894 <EEPROM_Print_config+0x2f0>)
 80015fc:	f00f fb92 	bl	8010d24 <iprintf>
	printf("Server Port: %i \r\n", config.serverPort);
 8001600:	f8b4 107d 	ldrh.w	r1, [r4, #125]	@ 0x7d
 8001604:	48a4      	ldr	r0, [pc, #656]	@ (8001898 <EEPROM_Print_config+0x2f4>)
 8001606:	f00f fb8d 	bl	8010d24 <iprintf>
	printf("MQTT IP: %s \r\n", config.mqttIP);
 800160a:	f104 017f 	add.w	r1, r4, #127	@ 0x7f
 800160e:	48a3      	ldr	r0, [pc, #652]	@ (800189c <EEPROM_Print_config+0x2f8>)
 8001610:	f00f fb88 	bl	8010d24 <iprintf>
	printf("MQTT Port: %i \r\n", config.mqttPort);
 8001614:	f8b4 10af 	ldrh.w	r1, [r4, #175]	@ 0xaf
 8001618:	48a1      	ldr	r0, [pc, #644]	@ (80018a0 <EEPROM_Print_config+0x2fc>)
 800161a:	f00f fb83 	bl	8010d24 <iprintf>
	printf("MQTT User: %s \r\n", config.mqttUser);
 800161e:	f104 01b1 	add.w	r1, r4, #177	@ 0xb1
 8001622:	48a0      	ldr	r0, [pc, #640]	@ (80018a4 <EEPROM_Print_config+0x300>)
 8001624:	f00f fb7e 	bl	8010d24 <iprintf>
	printf("MQTT Pass: %s \r\n", config.mqttPass);
 8001628:	f104 01c1 	add.w	r1, r4, #193	@ 0xc1
 800162c:	489e      	ldr	r0, [pc, #632]	@ (80018a8 <EEPROM_Print_config+0x304>)
 800162e:	f00f fb79 	bl	8010d24 <iprintf>
	printf("TMP117 sensor use %i %i \r\n", config.TMP117_use, TMP117.sensor_use);
 8001632:	782a      	ldrb	r2, [r5, #0]
 8001634:	7aa1      	ldrb	r1, [r4, #10]
 8001636:	489d      	ldr	r0, [pc, #628]	@ (80018ac <EEPROM_Print_config+0x308>)
 8001638:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800163c:	f001 0101 	and.w	r1, r1, #1
 8001640:	f00f fb70 	bl	8010d24 <iprintf>
	printf("TMP117 config %i %i \r\n", config.TMP117_conf, TMP117.sensor_conf);
 8001644:	782a      	ldrb	r2, [r5, #0]
 8001646:	7aa1      	ldrb	r1, [r4, #10]
 8001648:	4899      	ldr	r0, [pc, #612]	@ (80018b0 <EEPROM_Print_config+0x30c>)
 800164a:	f3c2 0283 	ubfx	r2, r2, #2, #4
 800164e:	f3c1 0143 	ubfx	r1, r1, #1, #4
 8001652:	f00f fb67 	bl	8010d24 <iprintf>
	printf("TMP117 temp meas %i %i \r\n", config.TMP117_t_use, TMP117.temp.use_meas);
 8001656:	786a      	ldrb	r2, [r5, #1]
 8001658:	7aa1      	ldrb	r1, [r4, #10]
 800165a:	4896      	ldr	r0, [pc, #600]	@ (80018b4 <EEPROM_Print_config+0x310>)
	printf("TMP117 temp offset: %f \r\n", config.TMP117_t_offset);

	printf("SHTC3 sensor use %i %i \r\n", config.SHT3_use, SHT3.sensor_use);
 800165c:	4d96      	ldr	r5, [pc, #600]	@ (80018b8 <EEPROM_Print_config+0x314>)
	printf("TMP117 temp meas %i %i \r\n", config.TMP117_t_use, TMP117.temp.use_meas);
 800165e:	f002 0201 	and.w	r2, r2, #1
 8001662:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001666:	f00f fb5d 	bl	8010d24 <iprintf>
	printf("TMP117 temp offset: %f \r\n", config.TMP117_t_offset);
 800166a:	f8d4 000b 	ldr.w	r0, [r4, #11]
 800166e:	f7fe ffab 	bl	80005c8 <__aeabi_f2d>
 8001672:	460b      	mov	r3, r1
 8001674:	4602      	mov	r2, r0
 8001676:	4891      	ldr	r0, [pc, #580]	@ (80018bc <EEPROM_Print_config+0x318>)
 8001678:	f00f fb54 	bl	8010d24 <iprintf>
	printf("SHTC3 sensor use %i %i \r\n", config.SHT3_use, SHT3.sensor_use);
 800167c:	7be1      	ldrb	r1, [r4, #15]
 800167e:	782a      	ldrb	r2, [r5, #0]
 8001680:	488f      	ldr	r0, [pc, #572]	@ (80018c0 <EEPROM_Print_config+0x31c>)
 8001682:	f001 0101 	and.w	r1, r1, #1
 8001686:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800168a:	f00f fb4b 	bl	8010d24 <iprintf>
	printf("SHTC3 config %i %i \r\n", config.SHT3_conf, SHT3.sensor_conf);
 800168e:	782a      	ldrb	r2, [r5, #0]
 8001690:	7be1      	ldrb	r1, [r4, #15]
 8001692:	488c      	ldr	r0, [pc, #560]	@ (80018c4 <EEPROM_Print_config+0x320>)
 8001694:	f3c2 0283 	ubfx	r2, r2, #2, #4
 8001698:	f3c1 0143 	ubfx	r1, r1, #1, #4
 800169c:	f00f fb42 	bl	8010d24 <iprintf>
	printf("SHTC3 temp meas %i %i \r\n", config.SHT3_t_use, SHT3.temp.use_meas);
 80016a0:	786a      	ldrb	r2, [r5, #1]
 80016a2:	7be1      	ldrb	r1, [r4, #15]
 80016a4:	4888      	ldr	r0, [pc, #544]	@ (80018c8 <EEPROM_Print_config+0x324>)
 80016a6:	f002 0201 	and.w	r2, r2, #1
 80016aa:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80016ae:	f00f fb39 	bl	8010d24 <iprintf>
	printf("SHTC3 hum meas %i %i \r\n", config.SHT3_h_use, SHT3.hum.use_meas);
 80016b2:	7aaa      	ldrb	r2, [r5, #10]
 80016b4:	7be1      	ldrb	r1, [r4, #15]
 80016b6:	4885      	ldr	r0, [pc, #532]	@ (80018cc <EEPROM_Print_config+0x328>)
	printf("SHTC3 temp offset: %f \r\n", config.SHT3_t_offset);
	printf("SHTC3 hum offset: %f \r\n", config.SHT3_h_offset);

	printf("MS8607 sensor use %i %i \r\n", config.MS8607_use, MS8607.sensor_use);
 80016b8:	4d85      	ldr	r5, [pc, #532]	@ (80018d0 <EEPROM_Print_config+0x32c>)
	printf("SHTC3 hum meas %i %i \r\n", config.SHT3_h_use, SHT3.hum.use_meas);
 80016ba:	f002 0201 	and.w	r2, r2, #1
 80016be:	f3c1 1180 	ubfx	r1, r1, #6, #1
 80016c2:	f00f fb2f 	bl	8010d24 <iprintf>
	printf("SHTC3 temp offset: %f \r\n", config.SHT3_t_offset);
 80016c6:	6920      	ldr	r0, [r4, #16]
 80016c8:	f7fe ff7e 	bl	80005c8 <__aeabi_f2d>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4880      	ldr	r0, [pc, #512]	@ (80018d4 <EEPROM_Print_config+0x330>)
 80016d2:	f00f fb27 	bl	8010d24 <iprintf>
	printf("SHTC3 hum offset: %f \r\n", config.SHT3_h_offset);
 80016d6:	6960      	ldr	r0, [r4, #20]
 80016d8:	f7fe ff76 	bl	80005c8 <__aeabi_f2d>
 80016dc:	460b      	mov	r3, r1
 80016de:	4602      	mov	r2, r0
 80016e0:	487d      	ldr	r0, [pc, #500]	@ (80018d8 <EEPROM_Print_config+0x334>)
 80016e2:	f00f fb1f 	bl	8010d24 <iprintf>
	printf("MS8607 sensor use %i %i \r\n", config.MS8607_use, MS8607.sensor_use);
 80016e6:	7e21      	ldrb	r1, [r4, #24]
 80016e8:	782a      	ldrb	r2, [r5, #0]
 80016ea:	487c      	ldr	r0, [pc, #496]	@ (80018dc <EEPROM_Print_config+0x338>)
 80016ec:	f001 0101 	and.w	r1, r1, #1
 80016f0:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80016f4:	f00f fb16 	bl	8010d24 <iprintf>
	printf("MS8607 config %i %i \r\n", config.MS8607_conf, MS8607.sensor_conf);
 80016f8:	782a      	ldrb	r2, [r5, #0]
 80016fa:	7e21      	ldrb	r1, [r4, #24]
 80016fc:	4878      	ldr	r0, [pc, #480]	@ (80018e0 <EEPROM_Print_config+0x33c>)
 80016fe:	f3c2 0283 	ubfx	r2, r2, #2, #4
 8001702:	f3c1 0143 	ubfx	r1, r1, #1, #4
 8001706:	f00f fb0d 	bl	8010d24 <iprintf>
	printf("MS8607 temp meas %i %i \r\n", config.MS8607_t_use, MS8607.temp.use_meas);
 800170a:	786a      	ldrb	r2, [r5, #1]
 800170c:	7e21      	ldrb	r1, [r4, #24]
 800170e:	4875      	ldr	r0, [pc, #468]	@ (80018e4 <EEPROM_Print_config+0x340>)
 8001710:	f002 0201 	and.w	r2, r2, #1
 8001714:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001718:	f00f fb04 	bl	8010d24 <iprintf>
	printf("MS8607 press meas %i %i \r\n", config.MS8607_p_use, MS8607.press.use_meas);
 800171c:	7cea      	ldrb	r2, [r5, #19]
 800171e:	7e21      	ldrb	r1, [r4, #24]
 8001720:	4871      	ldr	r0, [pc, #452]	@ (80018e8 <EEPROM_Print_config+0x344>)
 8001722:	f002 0201 	and.w	r2, r2, #1
 8001726:	09c9      	lsrs	r1, r1, #7
 8001728:	f00f fafc 	bl	8010d24 <iprintf>
	printf("MS8607 hum meas %i %i \r\n", config.MS8607_h_use, MS8607.hum.use_meas);
 800172c:	7aaa      	ldrb	r2, [r5, #10]
 800172e:	7e21      	ldrb	r1, [r4, #24]
 8001730:	486e      	ldr	r0, [pc, #440]	@ (80018ec <EEPROM_Print_config+0x348>)

	printf("MS8607 temp offset: %f \r\n", config.MS8607_t_offset);
	printf("MS8607 press ofset: %f \r\n", config.MS8607_p_offset);
	printf("MS8607 hum offset: %f  \r\n", config.MS8607_h_offset);

	printf("BME280 sensor use %i %i \r\n", config.BME280_use, BME280.sensor_use);
 8001732:	4d6f      	ldr	r5, [pc, #444]	@ (80018f0 <EEPROM_Print_config+0x34c>)
	printf("MS8607 hum meas %i %i \r\n", config.MS8607_h_use, MS8607.hum.use_meas);
 8001734:	f002 0201 	and.w	r2, r2, #1
 8001738:	f3c1 1180 	ubfx	r1, r1, #6, #1
 800173c:	f00f faf2 	bl	8010d24 <iprintf>
	printf("MS8607 temp offset: %f \r\n", config.MS8607_t_offset);
 8001740:	f8d4 0019 	ldr.w	r0, [r4, #25]
 8001744:	f7fe ff40 	bl	80005c8 <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4869      	ldr	r0, [pc, #420]	@ (80018f4 <EEPROM_Print_config+0x350>)
 800174e:	f00f fae9 	bl	8010d24 <iprintf>
	printf("MS8607 press ofset: %f \r\n", config.MS8607_p_offset);
 8001752:	f8d4 0021 	ldr.w	r0, [r4, #33]	@ 0x21
 8001756:	f7fe ff37 	bl	80005c8 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4866      	ldr	r0, [pc, #408]	@ (80018f8 <EEPROM_Print_config+0x354>)
 8001760:	f00f fae0 	bl	8010d24 <iprintf>
	printf("MS8607 hum offset: %f  \r\n", config.MS8607_h_offset);
 8001764:	f8d4 001d 	ldr.w	r0, [r4, #29]
 8001768:	f7fe ff2e 	bl	80005c8 <__aeabi_f2d>
 800176c:	460b      	mov	r3, r1
 800176e:	4602      	mov	r2, r0
 8001770:	4862      	ldr	r0, [pc, #392]	@ (80018fc <EEPROM_Print_config+0x358>)
 8001772:	f00f fad7 	bl	8010d24 <iprintf>
	printf("BME280 sensor use %i %i \r\n", config.BME280_use, BME280.sensor_use);
 8001776:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 800177a:	782a      	ldrb	r2, [r5, #0]
 800177c:	4860      	ldr	r0, [pc, #384]	@ (8001900 <EEPROM_Print_config+0x35c>)
 800177e:	f001 0101 	and.w	r1, r1, #1
 8001782:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001786:	f00f facd 	bl	8010d24 <iprintf>
	printf("BME280 temp meas %i %i \r\n", config.BME280_t_use, BME280.temp.use_meas);
 800178a:	786a      	ldrb	r2, [r5, #1]
 800178c:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 8001790:	485c      	ldr	r0, [pc, #368]	@ (8001904 <EEPROM_Print_config+0x360>)
 8001792:	f002 0201 	and.w	r2, r2, #1
 8001796:	f3c1 1140 	ubfx	r1, r1, #5, #1
 800179a:	f00f fac3 	bl	8010d24 <iprintf>
	printf("BME280 press meas %i %i \r\n", config.BME280_p_use, BME280.press.use_meas);
 800179e:	7cea      	ldrb	r2, [r5, #19]
 80017a0:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 80017a4:	4858      	ldr	r0, [pc, #352]	@ (8001908 <EEPROM_Print_config+0x364>)
 80017a6:	f002 0201 	and.w	r2, r2, #1
 80017aa:	09c9      	lsrs	r1, r1, #7
 80017ac:	f00f faba 	bl	8010d24 <iprintf>
	printf("BME280 hum meas %i %i \r\n", config.BME280_h_use, BME280.hum.use_meas);
 80017b0:	7aaa      	ldrb	r2, [r5, #10]
 80017b2:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 80017b6:	4855      	ldr	r0, [pc, #340]	@ (800190c <EEPROM_Print_config+0x368>)

	printf("BME280 temp offset: %f \r\n", config.BME280_t_offset);
	printf("BME280 press ofset: %f \r\n", config.BME280_p_offset);
	printf("BME280 hum offset: %f  \r\n", config.BME280_h_offset);

	printf("DPS368 sensor use %i %i \r\n", config.DPS368_use, DPS368.sensor_use);
 80017b8:	4d55      	ldr	r5, [pc, #340]	@ (8001910 <EEPROM_Print_config+0x36c>)
	printf("BME280 hum meas %i %i \r\n", config.BME280_h_use, BME280.hum.use_meas);
 80017ba:	f002 0201 	and.w	r2, r2, #1
 80017be:	f3c1 1180 	ubfx	r1, r1, #6, #1
 80017c2:	f00f faaf 	bl	8010d24 <iprintf>
	printf("BME280 temp offset: %f \r\n", config.BME280_t_offset);
 80017c6:	f8d4 0026 	ldr.w	r0, [r4, #38]	@ 0x26
 80017ca:	f7fe fefd 	bl	80005c8 <__aeabi_f2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4850      	ldr	r0, [pc, #320]	@ (8001914 <EEPROM_Print_config+0x370>)
 80017d4:	f00f faa6 	bl	8010d24 <iprintf>
	printf("BME280 press ofset: %f \r\n", config.BME280_p_offset);
 80017d8:	f8d4 002e 	ldr.w	r0, [r4, #46]	@ 0x2e
 80017dc:	f7fe fef4 	bl	80005c8 <__aeabi_f2d>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	484c      	ldr	r0, [pc, #304]	@ (8001918 <EEPROM_Print_config+0x374>)
 80017e6:	f00f fa9d 	bl	8010d24 <iprintf>
	printf("BME280 hum offset: %f  \r\n", config.BME280_h_offset);
 80017ea:	f8d4 002a 	ldr.w	r0, [r4, #42]	@ 0x2a
 80017ee:	f7fe feeb 	bl	80005c8 <__aeabi_f2d>
 80017f2:	460b      	mov	r3, r1
 80017f4:	4602      	mov	r2, r0
 80017f6:	4849      	ldr	r0, [pc, #292]	@ (800191c <EEPROM_Print_config+0x378>)
 80017f8:	f00f fa94 	bl	8010d24 <iprintf>
	printf("DPS368 sensor use %i %i \r\n", config.DPS368_use, DPS368.sensor_use);
 80017fc:	f894 1032 	ldrb.w	r1, [r4, #50]	@ 0x32
 8001800:	782a      	ldrb	r2, [r5, #0]
 8001802:	4847      	ldr	r0, [pc, #284]	@ (8001920 <EEPROM_Print_config+0x37c>)
 8001804:	f001 0101 	and.w	r1, r1, #1
 8001808:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800180c:	f00f fa8a 	bl	8010d24 <iprintf>
	printf("DPS368 temp meas %i %i \r\n", config.DPS368_t_use, DPS368.temp.use_meas);
 8001810:	786a      	ldrb	r2, [r5, #1]
 8001812:	f894 1032 	ldrb.w	r1, [r4, #50]	@ 0x32
 8001816:	4843      	ldr	r0, [pc, #268]	@ (8001924 <EEPROM_Print_config+0x380>)
 8001818:	f002 0201 	and.w	r2, r2, #1
 800181c:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001820:	f00f fa80 	bl	8010d24 <iprintf>
	printf("DPS368 press meas %i %i \r\n", config.DPS368_p_use, DPS368.press.use_meas);
 8001824:	7aaa      	ldrb	r2, [r5, #10]
 8001826:	f894 1032 	ldrb.w	r1, [r4, #50]	@ 0x32
 800182a:	483f      	ldr	r0, [pc, #252]	@ (8001928 <EEPROM_Print_config+0x384>)
 800182c:	f002 0201 	and.w	r2, r2, #1
 8001830:	f3c1 1180 	ubfx	r1, r1, #6, #1
 8001834:	f00f fa76 	bl	8010d24 <iprintf>
	printf("DPS368 temp offset: %f \r\n", config.DPS368_t_offset);
 8001838:	f8d4 0033 	ldr.w	r0, [r4, #51]	@ 0x33
 800183c:	f7fe fec4 	bl	80005c8 <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4839      	ldr	r0, [pc, #228]	@ (800192c <EEPROM_Print_config+0x388>)
 8001846:	f00f fa6d 	bl	8010d24 <iprintf>
	printf("DPS368 press offset: %f \r\n", config.DPS368_p_offset);
 800184a:	f8d4 0037 	ldr.w	r0, [r4, #55]	@ 0x37
 800184e:	f7fe febb 	bl	80005c8 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4836      	ldr	r0, [pc, #216]	@ (8001930 <EEPROM_Print_config+0x38c>)
 8001858:	f00f fa64 	bl	8010d24 <iprintf>

	printf("CHECKSUM: 0x%4X \r\n", config.checksum);
 800185c:	f8b4 10f1 	ldrh.w	r1, [r4, #241]	@ 0xf1
 8001860:	4834      	ldr	r0, [pc, #208]	@ (8001934 <EEPROM_Print_config+0x390>)
 8001862:	f00f fa5f 	bl	8010d24 <iprintf>
	printf("================================= \r\n");
 8001866:	4630      	mov	r0, r6

}
 8001868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("================================= \r\n");
 800186c:	f00f bac2 	b.w	8010df4 <puts>
 8001870:	080142b8 	.word	0x080142b8
 8001874:	200019c0 	.word	0x200019c0
 8001878:	20001bc0 	.word	0x20001bc0
 800187c:	080142dc 	.word	0x080142dc
 8001880:	080142f4 	.word	0x080142f4
 8001884:	0801430c 	.word	0x0801430c
 8001888:	08014324 	.word	0x08014324
 800188c:	0801433c 	.word	0x0801433c
 8001890:	08014350 	.word	0x08014350
 8001894:	08014364 	.word	0x08014364
 8001898:	08014378 	.word	0x08014378
 800189c:	0801438c 	.word	0x0801438c
 80018a0:	0801439c 	.word	0x0801439c
 80018a4:	080143b0 	.word	0x080143b0
 80018a8:	080143c4 	.word	0x080143c4
 80018ac:	080143d8 	.word	0x080143d8
 80018b0:	080143f4 	.word	0x080143f4
 80018b4:	0801440c 	.word	0x0801440c
 80018b8:	20001ba8 	.word	0x20001ba8
 80018bc:	08014428 	.word	0x08014428
 80018c0:	08014444 	.word	0x08014444
 80018c4:	08014460 	.word	0x08014460
 80018c8:	08014478 	.word	0x08014478
 80018cc:	08014494 	.word	0x08014494
 80018d0:	20001b84 	.word	0x20001b84
 80018d4:	080144ac 	.word	0x080144ac
 80018d8:	080144c8 	.word	0x080144c8
 80018dc:	080144e0 	.word	0x080144e0
 80018e0:	080144fc 	.word	0x080144fc
 80018e4:	08014514 	.word	0x08014514
 80018e8:	08014530 	.word	0x08014530
 80018ec:	0801454c 	.word	0x0801454c
 80018f0:	20001b60 	.word	0x20001b60
 80018f4:	08014568 	.word	0x08014568
 80018f8:	08014584 	.word	0x08014584
 80018fc:	080145a0 	.word	0x080145a0
 8001900:	080145bc 	.word	0x080145bc
 8001904:	080145d8 	.word	0x080145d8
 8001908:	080145f4 	.word	0x080145f4
 800190c:	08014610 	.word	0x08014610
 8001910:	20001b48 	.word	0x20001b48
 8001914:	0801462c 	.word	0x0801462c
 8001918:	08014648 	.word	0x08014648
 800191c:	08014664 	.word	0x08014664
 8001920:	08014680 	.word	0x08014680
 8001924:	0801469c 	.word	0x0801469c
 8001928:	080146b8 	.word	0x080146b8
 800192c:	080146d4 	.word	0x080146d4
 8001930:	080146f0 	.word	0x080146f0
 8001934:	0801470c 	.word	0x0801470c

08001938 <GPRS_SetAPN>:
    return false;
  }
}
//####################################################################################################
bool  GPRS_SetAPN(char *Name,char *username,char *password)
{
 8001938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193a:	b093      	sub	sp, #76	@ 0x4c
  char str[64];
  uint8_t answer;
  sprintf(str,"AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n",Name,username,password);
 800193c:	460b      	mov	r3, r1
 800193e:	9200      	str	r2, [sp, #0]
{
 8001940:	4605      	mov	r5, r0
 8001942:	460e      	mov	r6, r1
 8001944:	4617      	mov	r7, r2
  sprintf(str,"AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n",Name,username,password);
 8001946:	4917      	ldr	r1, [pc, #92]	@ (80019a4 <GPRS_SetAPN+0x6c>)
 8001948:	4602      	mov	r2, r0
 800194a:	a802      	add	r0, sp, #8
 800194c:	f00f fa8e 	bl	8010e6c <siprintf>
  answer = Sim80x_SendAtCommand(str,1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001950:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <GPRS_SetAPN+0x70>)
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	a802      	add	r0, sp, #8
 8001956:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <GPRS_SetAPN+0x74>)
 8001958:	2202      	movs	r2, #2
 800195a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800195e:	f000 fd53 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001962:	2801      	cmp	r0, #1
 8001964:	d008      	beq.n	8001978 <GPRS_SetAPN+0x40>
    return true;
  }
  else
  {
    #if (_SIM80X_DEBUG==1)
    printf("\r\nGPRS_SetAPN(\"%s\",\"%s\",\"%s\") ---> ERROR\r\n",Name,username,password);
 8001966:	463b      	mov	r3, r7
 8001968:	4632      	mov	r2, r6
 800196a:	4629      	mov	r1, r5
 800196c:	4810      	ldr	r0, [pc, #64]	@ (80019b0 <GPRS_SetAPN+0x78>)
 800196e:	f00f f9d9 	bl	8010d24 <iprintf>
    #endif    
    return false;  
 8001972:	2000      	movs	r0, #0
  }  
}
 8001974:	b013      	add	sp, #76	@ 0x4c
 8001976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001978:	4604      	mov	r4, r0
    strcpy(Sim80x.GPRS.APN,Name);
 800197a:	4629      	mov	r1, r5
 800197c:	480d      	ldr	r0, [pc, #52]	@ (80019b4 <GPRS_SetAPN+0x7c>)
 800197e:	f00f fcc3 	bl	8011308 <strcpy>
    strcpy(Sim80x.GPRS.APN_UserName,username);
 8001982:	4631      	mov	r1, r6
 8001984:	480c      	ldr	r0, [pc, #48]	@ (80019b8 <GPRS_SetAPN+0x80>)
 8001986:	f00f fcbf 	bl	8011308 <strcpy>
    strcpy(Sim80x.GPRS.APN_Password,password);
 800198a:	4639      	mov	r1, r7
 800198c:	480b      	ldr	r0, [pc, #44]	@ (80019bc <GPRS_SetAPN+0x84>)
 800198e:	f00f fcbb 	bl	8011308 <strcpy>
    printf("\r\nGPRS_SetAPN(\"%s\",\"%s\",\"%s\") ---> OK\r\n",Name,username,password);
 8001992:	463b      	mov	r3, r7
 8001994:	4632      	mov	r2, r6
 8001996:	4629      	mov	r1, r5
 8001998:	4809      	ldr	r0, [pc, #36]	@ (80019c0 <GPRS_SetAPN+0x88>)
 800199a:	f00f f9c3 	bl	8010d24 <iprintf>
    return true;
 800199e:	4620      	mov	r0, r4
}
 80019a0:	b013      	add	sp, #76	@ 0x4c
 80019a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a4:	08014778 	.word	0x08014778
 80019a8:	0801472c 	.word	0x0801472c
 80019ac:	080153cc 	.word	0x080153cc
 80019b0:	080147bc 	.word	0x080147bc
 80019b4:	20000a17 	.word	0x20000a17
 80019b8:	20000a28 	.word	0x20000a28
 80019bc:	20000a39 	.word	0x20000a39
 80019c0:	08014794 	.word	0x08014794

080019c4 <GPRS_DeactivatePDPContext>:
//####################################################################################################
bool  GPRS_DeactivatePDPContext(void)
{
 80019c4:	b510      	push	{r4, lr}
 80019c6:	b082      	sub	sp, #8
  uint8_t answer;
  answer = Sim80x_SendAtCommand("AT+CIPSHUT\r\n",10000,2,"\r\nSHUT OK\r\n","\r\nERROR\r\n");
 80019c8:	4a0b      	ldr	r2, [pc, #44]	@ (80019f8 <GPRS_DeactivatePDPContext+0x34>)
 80019ca:	9200      	str	r2, [sp, #0]
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <GPRS_DeactivatePDPContext+0x38>)
 80019ce:	480c      	ldr	r0, [pc, #48]	@ (8001a00 <GPRS_DeactivatePDPContext+0x3c>)
 80019d0:	2202      	movs	r2, #2
 80019d2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80019d6:	f000 fd17 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer == 1)
 80019da:	2801      	cmp	r0, #1
 80019dc:	d005      	beq.n	80019ea <GPRS_DeactivatePDPContext+0x26>
    return true;
  }
  else
  {
    #if (_SIM80X_DEBUG==1)
    printf("\r\nGPRS_DeactivatePDPContext() ---> ERROR\r\n");
 80019de:	4809      	ldr	r0, [pc, #36]	@ (8001a04 <GPRS_DeactivatePDPContext+0x40>)
 80019e0:	f00f fa08 	bl	8010df4 <puts>
    #endif    
    return false;  
 80019e4:	2000      	movs	r0, #0
  }
}
 80019e6:	b002      	add	sp, #8
 80019e8:	bd10      	pop	{r4, pc}
 80019ea:	4604      	mov	r4, r0
    printf("\r\nGPRS_DeactivatePDPContext() ---> OK\r\n");
 80019ec:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <GPRS_DeactivatePDPContext+0x44>)
 80019ee:	f00f fa01 	bl	8010df4 <puts>
    return true;
 80019f2:	4620      	mov	r0, r4
}
 80019f4:	b002      	add	sp, #8
 80019f6:	bd10      	pop	{r4, pc}
 80019f8:	0801472c 	.word	0x0801472c
 80019fc:	080147e8 	.word	0x080147e8
 8001a00:	080147f4 	.word	0x080147f4
 8001a04:	0801482c 	.word	0x0801482c
 8001a08:	08014804 	.word	0x08014804

08001a0c <GPRS_SetMultiConnection>:
  #endif  
  return Sim80x.GPRS.MultiConnection;
}
//####################################################################################################
bool  GPRS_SetMultiConnection(bool Enable)
{
 8001a0c:	b530      	push	{r4, r5, lr}
 8001a0e:	b083      	sub	sp, #12
  uint8_t answer;
  if(Enable==true)
    answer = Sim80x_SendAtCommand(" AT+CIPMUX=1\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");  
 8001a10:	4a15      	ldr	r2, [pc, #84]	@ (8001a68 <GPRS_SetMultiConnection+0x5c>)
 8001a12:	9200      	str	r2, [sp, #0]
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <GPRS_SetMultiConnection+0x60>)
  if(Enable==true)
 8001a16:	4605      	mov	r5, r0
    answer = Sim80x_SendAtCommand(" AT+CIPMUX=1\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");  
 8001a18:	2202      	movs	r2, #2
  if(Enable==true)
 8001a1a:	b170      	cbz	r0, 8001a3a <GPRS_SetMultiConnection+0x2e>
    answer = Sim80x_SendAtCommand(" AT+CIPMUX=1\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");  
 8001a1c:	4814      	ldr	r0, [pc, #80]	@ (8001a70 <GPRS_SetMultiConnection+0x64>)
 8001a1e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a22:	f000 fcf1 	bl	8002408 <Sim80x_SendAtCommand>
 8001a26:	4604      	mov	r4, r0
  else
    answer = Sim80x_SendAtCommand(" AT+CIPMUX=0\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");  
  if(answer == 1)
 8001a28:	2c01      	cmp	r4, #1
 8001a2a:	d00e      	beq.n	8001a4a <GPRS_SetMultiConnection+0x3e>
    return true;
  }
  else
  {
    #if (_SIM80X_DEBUG==1)
    printf("\r\nGPRS_SetMultiConnection(%d) ---> ERROR\r\n",Enable);
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	4811      	ldr	r0, [pc, #68]	@ (8001a74 <GPRS_SetMultiConnection+0x68>)
 8001a30:	f00f f978 	bl	8010d24 <iprintf>
    #endif  
    return false;
 8001a34:	2000      	movs	r0, #0
  }
}
 8001a36:	b003      	add	sp, #12
 8001a38:	bd30      	pop	{r4, r5, pc}
    answer = Sim80x_SendAtCommand(" AT+CIPMUX=0\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");  
 8001a3a:	480f      	ldr	r0, [pc, #60]	@ (8001a78 <GPRS_SetMultiConnection+0x6c>)
 8001a3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a40:	f000 fce2 	bl	8002408 <Sim80x_SendAtCommand>
 8001a44:	4604      	mov	r4, r0
  if(answer == 1)
 8001a46:	2c01      	cmp	r4, #1
 8001a48:	d1f0      	bne.n	8001a2c <GPRS_SetMultiConnection+0x20>
    printf("\r\nGPRS_SetMultiConnection(%d) ---> OK\r\n",Enable);
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	480b      	ldr	r0, [pc, #44]	@ (8001a7c <GPRS_SetMultiConnection+0x70>)
 8001a4e:	f00f f969 	bl	8010d24 <iprintf>
    Sim80x.GPRS.MultiConnection=Enable;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <GPRS_SetMultiConnection+0x74>)
 8001a54:	f893 27e6 	ldrb.w	r2, [r3, #2022]	@ 0x7e6
    return true;
 8001a58:	4620      	mov	r0, r4
    Sim80x.GPRS.MultiConnection=Enable;
 8001a5a:	f365 0200 	bfi	r2, r5, #0, #1
 8001a5e:	f883 27e6 	strb.w	r2, [r3, #2022]	@ 0x7e6
}
 8001a62:	b003      	add	sp, #12
 8001a64:	bd30      	pop	{r4, r5, pc}
 8001a66:	bf00      	nop
 8001a68:	0801472c 	.word	0x0801472c
 8001a6c:	080153cc 	.word	0x080153cc
 8001a70:	080148c4 	.word	0x080148c4
 8001a74:	0801490c 	.word	0x0801490c
 8001a78:	080148d4 	.word	0x080148d4
 8001a7c:	080148e4 	.word	0x080148e4
 8001a80:	20000230 	.word	0x20000230

08001a84 <GPRS_ConnectToNetwork>:
//####################################################################################################
//####################################################################################################
//####################################################################################################
bool  GPRS_ConnectToNetwork(char *Name,char *username,char *password,bool EnableMultiConnection)
{
 8001a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a88:	b082      	sub	sp, #8
  answer = Sim80x_SendAtCommand("AT+CIPSHUT\r\n",10000,2,"\r\nSHUT OK\r\n","\r\nERROR\r\n");
 8001a8a:	4f2c      	ldr	r7, [pc, #176]	@ (8001b3c <GPRS_ConnectToNetwork+0xb8>)
 8001a8c:	9700      	str	r7, [sp, #0]
{
 8001a8e:	4604      	mov	r4, r0
 8001a90:	460d      	mov	r5, r1
  answer = Sim80x_SendAtCommand("AT+CIPSHUT\r\n",10000,2,"\r\nSHUT OK\r\n","\r\nERROR\r\n");
 8001a92:	482b      	ldr	r0, [pc, #172]	@ (8001b40 <GPRS_ConnectToNetwork+0xbc>)
{
 8001a94:	4616      	mov	r6, r2
 8001a96:	4698      	mov	r8, r3
  answer = Sim80x_SendAtCommand("AT+CIPSHUT\r\n",10000,2,"\r\nSHUT OK\r\n","\r\nERROR\r\n");
 8001a98:	2202      	movs	r2, #2
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b44 <GPRS_ConnectToNetwork+0xc0>)
 8001a9c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001aa0:	f000 fcb2 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001aa4:	2801      	cmp	r0, #1
 8001aa6:	d00a      	beq.n	8001abe <GPRS_ConnectToNetwork+0x3a>
    printf("\r\nGPRS_DeactivatePDPContext() ---> ERROR\r\n");
 8001aa8:	4827      	ldr	r0, [pc, #156]	@ (8001b48 <GPRS_ConnectToNetwork+0xc4>)
 8001aaa:	f00f f9a3 	bl	8010df4 <puts>
  
  if(GPRS_DeactivatePDPContext()==false)
  {
    #if (_SIM80X_DEBUG==1)
    printf("\r\nGPRS_ConnectToNetwork() ---> ERROR\r\n");
 8001aae:	4827      	ldr	r0, [pc, #156]	@ (8001b4c <GPRS_ConnectToNetwork+0xc8>)
 8001ab0:	f00f f9a0 	bl	8010df4 <puts>
    #endif 
    return false;
 8001ab4:	2400      	movs	r4, #0
  printf("\r\nGPRS_ConnectToNetwork() ---> OK\r\n");
  #endif

  Sim80x_SendAtCommand("AT+CIPHEAD=1\r\n", 500, 1, "\r\nOK\r\n");
  return true;
}
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	b002      	add	sp, #8
 8001aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("\r\nGPRS_DeactivatePDPContext() ---> OK\r\n");
 8001abe:	4824      	ldr	r0, [pc, #144]	@ (8001b50 <GPRS_ConnectToNetwork+0xcc>)
 8001ac0:	f00f f998 	bl	8010df4 <puts>
  GPRS_SetMultiConnection(EnableMultiConnection);
 8001ac4:	4640      	mov	r0, r8
 8001ac6:	f7ff ffa1 	bl	8001a0c <GPRS_SetMultiConnection>
  if(GPRS_SetAPN(Name,username,password)==false)
 8001aca:	4620      	mov	r0, r4
 8001acc:	4632      	mov	r2, r6
 8001ace:	4629      	mov	r1, r5
 8001ad0:	f7ff ff32 	bl	8001938 <GPRS_SetAPN>
 8001ad4:	4604      	mov	r4, r0
 8001ad6:	b180      	cbz	r0, 8001afa <GPRS_ConnectToNetwork+0x76>
  answer = Sim80x_SendAtCommand("AT+CIICR\r\n",85000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <GPRS_ConnectToNetwork+0xd0>)
 8001ada:	491f      	ldr	r1, [pc, #124]	@ (8001b58 <GPRS_ConnectToNetwork+0xd4>)
 8001adc:	481f      	ldr	r0, [pc, #124]	@ (8001b5c <GPRS_ConnectToNetwork+0xd8>)
 8001ade:	9700      	str	r7, [sp, #0]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	f000 fc91 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001ae6:	2801      	cmp	r0, #1
  answer = Sim80x_SendAtCommand("AT+CIICR\r\n",85000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001ae8:	4605      	mov	r5, r0
  if(answer == 1)
 8001aea:	d00a      	beq.n	8001b02 <GPRS_ConnectToNetwork+0x7e>
    printf("\r\nGPRS_StartUpGPRS() --->ERROR\r\n");
 8001aec:	481c      	ldr	r0, [pc, #112]	@ (8001b60 <GPRS_ConnectToNetwork+0xdc>)
 8001aee:	f00f f981 	bl	8010df4 <puts>
    printf("\r\nGPRS_ConnectToNetwork() ---> startup ERROR\r\n");
 8001af2:	481c      	ldr	r0, [pc, #112]	@ (8001b64 <GPRS_ConnectToNetwork+0xe0>)
 8001af4:	f00f f97e 	bl	8010df4 <puts>
    return false;
 8001af8:	e7dc      	b.n	8001ab4 <GPRS_ConnectToNetwork+0x30>
    printf("\r\nGPRS_ConnectToNetwork() ---> apn ERROR\r\n");
 8001afa:	481b      	ldr	r0, [pc, #108]	@ (8001b68 <GPRS_ConnectToNetwork+0xe4>)
 8001afc:	f00f f97a 	bl	8010df4 <puts>
    return false;
 8001b00:	e7d8      	b.n	8001ab4 <GPRS_ConnectToNetwork+0x30>
    printf("\r\nGPRS_StartUpGPRS() ---> OK\r\n");
 8001b02:	481a      	ldr	r0, [pc, #104]	@ (8001b6c <GPRS_ConnectToNetwork+0xe8>)
 8001b04:	f00f f976 	bl	8010df4 <puts>
  answer = Sim80x_SendAtCommand("AT+CIFSR\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <GPRS_ConnectToNetwork+0xd0>)
 8001b0a:	9700      	str	r7, [sp, #0]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b12:	4817      	ldr	r0, [pc, #92]	@ (8001b70 <GPRS_ConnectToNetwork+0xec>)
 8001b14:	f000 fc78 	bl	8002408 <Sim80x_SendAtCommand>
  printf("\r\nGPRS_GetLocalIP(%s) <--- OK\r\n",Sim80x.GPRS.LocalIP);
 8001b18:	4916      	ldr	r1, [pc, #88]	@ (8001b74 <GPRS_ConnectToNetwork+0xf0>)
 8001b1a:	4817      	ldr	r0, [pc, #92]	@ (8001b78 <GPRS_ConnectToNetwork+0xf4>)
 8001b1c:	f00f f902 	bl	8010d24 <iprintf>
  printf("\r\nGPRS_ConnectToNetwork() ---> OK\r\n");
 8001b20:	4816      	ldr	r0, [pc, #88]	@ (8001b7c <GPRS_ConnectToNetwork+0xf8>)
 8001b22:	f00f f967 	bl	8010df4 <puts>
  Sim80x_SendAtCommand("AT+CIPHEAD=1\r\n", 500, 1, "\r\nOK\r\n");
 8001b26:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <GPRS_ConnectToNetwork+0xd0>)
 8001b28:	4815      	ldr	r0, [pc, #84]	@ (8001b80 <GPRS_ConnectToNetwork+0xfc>)
 8001b2a:	462a      	mov	r2, r5
 8001b2c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001b30:	f000 fc6a 	bl	8002408 <Sim80x_SendAtCommand>
}
 8001b34:	4620      	mov	r0, r4
 8001b36:	b002      	add	sp, #8
 8001b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b3c:	0801472c 	.word	0x0801472c
 8001b40:	080147f4 	.word	0x080147f4
 8001b44:	080147e8 	.word	0x080147e8
 8001b48:	0801482c 	.word	0x0801482c
 8001b4c:	08014938 	.word	0x08014938
 8001b50:	08014804 	.word	0x08014804
 8001b54:	080153cc 	.word	0x080153cc
 8001b58:	00014c08 	.word	0x00014c08
 8001b5c:	08014720 	.word	0x08014720
 8001b60:	08014758 	.word	0x08014758
 8001b64:	080149c0 	.word	0x080149c0
 8001b68:	08014960 	.word	0x08014960
 8001b6c:	08014738 	.word	0x08014738
 8001b70:	08014858 	.word	0x08014858
 8001b74:	20000a4a 	.word	0x20000a4a
 8001b78:	08014864 	.word	0x08014864
 8001b7c:	0801498c 	.word	0x0801498c
 8001b80:	080149b0 	.word	0x080149b0

08001b84 <GPRS_ConnectToServer>:
//####################################################################################################
bool GPRS_ConnectToServer(char *ip, uint16_t port)
{
 8001b84:	b510      	push	{r4, lr}
 8001b86:	b092      	sub	sp, #72	@ 0x48
 8001b88:	460c      	mov	r4, r1
 8001b8a:	4603      	mov	r3, r0
	uint8_t answer;
	char buf[64];
	snprintf(buf, sizeof(buf), "AT+CIPSTART=\"TCP\",\"%s\",\"%u\"\r\n", ip, port);
 8001b8c:	4a15      	ldr	r2, [pc, #84]	@ (8001be4 <GPRS_ConnectToServer+0x60>)
 8001b8e:	9400      	str	r4, [sp, #0]
 8001b90:	2140      	movs	r1, #64	@ 0x40
	answer = Sim80x_SendAtCommand(buf, 10000, 2, "\r\nOK\r\n","\r\nERROR\r\n");
 8001b92:	4c15      	ldr	r4, [pc, #84]	@ (8001be8 <GPRS_ConnectToServer+0x64>)
	snprintf(buf, sizeof(buf), "AT+CIPSTART=\"TCP\",\"%s\",\"%u\"\r\n", ip, port);
 8001b94:	a802      	add	r0, sp, #8
 8001b96:	f00f f935 	bl	8010e04 <sniprintf>
	answer = Sim80x_SendAtCommand(buf, 10000, 2, "\r\nOK\r\n","\r\nERROR\r\n");
 8001b9a:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <GPRS_ConnectToServer+0x68>)
 8001b9c:	9400      	str	r4, [sp, #0]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001ba4:	a802      	add	r0, sp, #8
 8001ba6:	f000 fc2f 	bl	8002408 <Sim80x_SendAtCommand>
	if(answer == 1)
 8001baa:	2801      	cmp	r0, #1
 8001bac:	d017      	beq.n	8001bde <GPRS_ConnectToServer+0x5a>
  Sim80x_SendAtCommand(" AT+CIPSTATUS\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");  
 8001bae:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <GPRS_ConnectToServer+0x68>)
 8001bb0:	480f      	ldr	r0, [pc, #60]	@ (8001bf0 <GPRS_ConnectToServer+0x6c>)
 8001bb2:	9400      	str	r4, [sp, #0]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bba:	f000 fc25 	bl	8002408 <Sim80x_SendAtCommand>
  printf("\r\nGPRS_GetCurrentConnectionStatus() <--- OK\r\n");
 8001bbe:	480d      	ldr	r0, [pc, #52]	@ (8001bf4 <GPRS_ConnectToServer+0x70>)
 8001bc0:	f00f f918 	bl	8010df4 <puts>
		return true;
	}
	else
	{
		GPRS_GetCurrentConnectionStatus();
		if(Sim80x.GPRS.Connection == GPRSConnection_AlreadyConnect)
 8001bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf8 <GPRS_ConnectToServer+0x74>)
 8001bc6:	f892 382b 	ldrb.w	r3, [r2, #2091]	@ 0x82b
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d007      	beq.n	8001bde <GPRS_ConnectToServer+0x5a>
		{
			return true;
		}
	}
	if(Sim80x.GPRS.Connection) Sim80x.GPRS.Connection = GPRSConnection_GPRSup;
 8001bce:	b913      	cbnz	r3, 8001bd6 <GPRS_ConnectToServer+0x52>
	return false;
 8001bd0:	2000      	movs	r0, #0
}
 8001bd2:	b012      	add	sp, #72	@ 0x48
 8001bd4:	bd10      	pop	{r4, pc}
	if(Sim80x.GPRS.Connection) Sim80x.GPRS.Connection = GPRSConnection_GPRSup;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f882 382b 	strb.w	r3, [r2, #2091]	@ 0x82b
 8001bdc:	e7f8      	b.n	8001bd0 <GPRS_ConnectToServer+0x4c>
		return true;
 8001bde:	2001      	movs	r0, #1
}
 8001be0:	b012      	add	sp, #72	@ 0x48
 8001be2:	bd10      	pop	{r4, pc}
 8001be4:	080149f0 	.word	0x080149f0
 8001be8:	0801472c 	.word	0x0801472c
 8001bec:	080153cc 	.word	0x080153cc
 8001bf0:	08014884 	.word	0x08014884
 8001bf4:	08014894 	.word	0x08014894
 8001bf8:	20000230 	.word	0x20000230

08001bfc <GPRS_DisconnectFromServer>:
//#################################################################################################################
bool GPRS_DisconnectFromServer()
{
 8001bfc:	b508      	push	{r3, lr}
	uint8_t answer;
	answer = Sim80x_SendAtCommand("AT+CIPCLOSE=0\r\n", 5000, 1, "\r\nOK\r\n");
 8001bfe:	4809      	ldr	r0, [pc, #36]	@ (8001c24 <GPRS_DisconnectFromServer+0x28>)
 8001c00:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <GPRS_DisconnectFromServer+0x2c>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001c08:	f000 fbfe 	bl	8002408 <Sim80x_SendAtCommand>
	if(answer == 1)
 8001c0c:	2801      	cmp	r0, #1
 8001c0e:	d001      	beq.n	8001c14 <GPRS_DisconnectFromServer+0x18>
	{
		if(Sim80x.GPRS.Connection) Sim80x.GPRS.Connection = GPRSConnection_GPRSup;
		return true;
	}
	return false;
 8001c10:	2000      	movs	r0, #0
}
 8001c12:	bd08      	pop	{r3, pc}
		if(Sim80x.GPRS.Connection) Sim80x.GPRS.Connection = GPRSConnection_GPRSup;
 8001c14:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <GPRS_DisconnectFromServer+0x30>)
 8001c16:	f893 282b 	ldrb.w	r2, [r3, #2091]	@ 0x82b
 8001c1a:	b10a      	cbz	r2, 8001c20 <GPRS_DisconnectFromServer+0x24>
 8001c1c:	f883 082b 	strb.w	r0, [r3, #2091]	@ 0x82b
		return true;
 8001c20:	2001      	movs	r0, #1
}
 8001c22:	bd08      	pop	{r3, pc}
 8001c24:	08014a10 	.word	0x08014a10
 8001c28:	080153cc 	.word	0x080153cc
 8001c2c:	20000230 	.word	0x20000230

08001c30 <GPRS_SendString>:
//#################################################################################################################
bool  GPRS_SendString(char *DataString)
{
 8001c30:	b570      	push	{r4, r5, r6, lr}
  uint8_t answer;
  char str[4];
  Sim80x.GPRS.SendStatus = GPRSSendData_SendInProgress;
 8001c32:	4d15      	ldr	r5, [pc, #84]	@ (8001c88 <GPRS_SendString+0x58>)
  answer = Sim80x_SendAtCommand("AT+CIPSEND\r\n",1500,2,"\r\r\n> ","\r\nERROR\r\n");
 8001c34:	4e15      	ldr	r6, [pc, #84]	@ (8001c8c <GPRS_SendString+0x5c>)
 8001c36:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <GPRS_SendString+0x60>)
{
 8001c38:	b084      	sub	sp, #16
  Sim80x.GPRS.SendStatus = GPRSSendData_SendInProgress;
 8001c3a:	2201      	movs	r2, #1
  answer = Sim80x_SendAtCommand("AT+CIPSEND\r\n",1500,2,"\r\r\n> ","\r\nERROR\r\n");
 8001c3c:	9600      	str	r6, [sp, #0]
{
 8001c3e:	4604      	mov	r4, r0
  Sim80x.GPRS.SendStatus = GPRSSendData_SendInProgress;
 8001c40:	f885 282c 	strb.w	r2, [r5, #2092]	@ 0x82c
  answer = Sim80x_SendAtCommand("AT+CIPSEND\r\n",1500,2,"\r\r\n> ","\r\nERROR\r\n");
 8001c44:	4813      	ldr	r0, [pc, #76]	@ (8001c94 <GPRS_SendString+0x64>)
 8001c46:	2202      	movs	r2, #2
 8001c48:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001c4c:	f000 fbdc 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001c50:	2801      	cmp	r0, #1
 8001c52:	d005      	beq.n	8001c60 <GPRS_SendString+0x30>
    Sim80x_SendString(DataString);
    sprintf(str,"%c",26);
    answer = Sim80x_SendAtCommand(str,2000,2,"\r\nSEND OK\r\n","\r\nERROR\r\n");
    if(answer == 1) return true;
  }
  Sim80x.GPRS.SendStatus = GPRSSendData_SendFail;
 8001c54:	2303      	movs	r3, #3
 8001c56:	f885 382c 	strb.w	r3, [r5, #2092]	@ 0x82c
  return false;
 8001c5a:	2000      	movs	r0, #0
}
 8001c5c:	b004      	add	sp, #16
 8001c5e:	bd70      	pop	{r4, r5, r6, pc}
    Sim80x_SendString(DataString);
 8001c60:	4620      	mov	r0, r4
 8001c62:	f000 fb95 	bl	8002390 <Sim80x_SendString>
    sprintf(str,"%c",26);
 8001c66:	490c      	ldr	r1, [pc, #48]	@ (8001c98 <GPRS_SendString+0x68>)
 8001c68:	221a      	movs	r2, #26
 8001c6a:	a803      	add	r0, sp, #12
 8001c6c:	f00f f8fe 	bl	8010e6c <siprintf>
    answer = Sim80x_SendAtCommand(str,2000,2,"\r\nSEND OK\r\n","\r\nERROR\r\n");
 8001c70:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <GPRS_SendString+0x6c>)
 8001c72:	9600      	str	r6, [sp, #0]
 8001c74:	2202      	movs	r2, #2
 8001c76:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001c7a:	a803      	add	r0, sp, #12
 8001c7c:	f000 fbc4 	bl	8002408 <Sim80x_SendAtCommand>
    if(answer == 1) return true;
 8001c80:	2801      	cmp	r0, #1
 8001c82:	d1e7      	bne.n	8001c54 <GPRS_SendString+0x24>
 8001c84:	e7ea      	b.n	8001c5c <GPRS_SendString+0x2c>
 8001c86:	bf00      	nop
 8001c88:	20000230 	.word	0x20000230
 8001c8c:	0801472c 	.word	0x0801472c
 8001c90:	08014a20 	.word	0x08014a20
 8001c94:	08014a28 	.word	0x08014a28
 8001c98:	08014a38 	.word	0x08014a38
 8001c9c:	08014a3c 	.word	0x08014a3c

08001ca0 <GPRS_SendRaw>:
//#################################################################################################################
bool  GPRS_SendRaw(uint8_t *Data, uint16_t len)
{
 8001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t answer;
  char str[20];
  Sim80x.GPRS.SendStatus = GPRSSendData_SendInProgress;
 8001ca2:	4f14      	ldr	r7, [pc, #80]	@ (8001cf4 <GPRS_SendRaw+0x54>)
  snprintf(str,sizeof(str),"AT+CIPSEND=%d\r\n",len);
 8001ca4:	4a14      	ldr	r2, [pc, #80]	@ (8001cf8 <GPRS_SendRaw+0x58>)
{
 8001ca6:	b089      	sub	sp, #36	@ 0x24
  Sim80x.GPRS.SendStatus = GPRSSendData_SendInProgress;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f887 382c 	strb.w	r3, [r7, #2092]	@ 0x82c
{
 8001cae:	460d      	mov	r5, r1
  snprintf(str,sizeof(str),"AT+CIPSEND=%d\r\n",len);
 8001cb0:	460b      	mov	r3, r1
{
 8001cb2:	4606      	mov	r6, r0
  snprintf(str,sizeof(str),"AT+CIPSEND=%d\r\n",len);
 8001cb4:	2114      	movs	r1, #20
 8001cb6:	a803      	add	r0, sp, #12
 8001cb8:	f00f f8a4 	bl	8010e04 <sniprintf>
  answer = Sim80x_SendAtCommand(str,1500,2,"\r\r\n> ","\r\nERROR\r\n");
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <GPRS_SendRaw+0x5c>)
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	a803      	add	r0, sp, #12
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <GPRS_SendRaw+0x60>)
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001cca:	f000 fb9d 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001cce:	2801      	cmp	r0, #1
 8001cd0:	d005      	beq.n	8001cde <GPRS_SendRaw+0x3e>
    return true;
//    str[0] = 0;
//    answer = Sim80x_SendAtCommand(str,2000,2,"\r\nSEND OK\r\n","\r\nERROR\r\n");
//    if(answer == 1) return true;
  }
  Sim80x.GPRS.SendStatus = GPRSSendData_SendFail;
 8001cd2:	2303      	movs	r3, #3
  return false;
 8001cd4:	2000      	movs	r0, #0
  Sim80x.GPRS.SendStatus = GPRSSendData_SendFail;
 8001cd6:	f887 382c 	strb.w	r3, [r7, #2092]	@ 0x82c
}
 8001cda:	b009      	add	sp, #36	@ 0x24
 8001cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cde:	4604      	mov	r4, r0
    Sim80x_SendRaw(Data, len);
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	4630      	mov	r0, r6
 8001ce4:	f000 fb6a 	bl	80023bc <Sim80x_SendRaw>
    osDelay(30);
 8001ce8:	201e      	movs	r0, #30
 8001cea:	f00c f853 	bl	800dd94 <osDelay>
    return true;
 8001cee:	4620      	mov	r0, r4
}
 8001cf0:	b009      	add	sp, #36	@ 0x24
 8001cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf4:	20000230 	.word	0x20000230
 8001cf8:	08014a48 	.word	0x08014a48
 8001cfc:	0801472c 	.word	0x0801472c
 8001d00:	08014a20 	.word	0x08014a20

08001d04 <GPS_SetBaud>:
	}
	return true;
}

bool GPS_SetBaud()
{
 8001d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char *brtab[6] = {"115200","9600","19200","38400","57600","115200"};
 8001d08:	4c31      	ldr	r4, [pc, #196]	@ (8001dd0 <GPS_SetBaud+0xcc>)
 8001d0a:	4f32      	ldr	r7, [pc, #200]	@ (8001dd4 <GPS_SetBaud+0xd0>)
    char str[20];
    while(1)
    {
        tout = 0;
        Sim80x.GPS.RunStatus = 0;
        uint8_t answer = Sim80x_SendAtCommand("AT+CGNSVER\r\n",500,2,"\r\nOK\r\n","\r\nERROR\r\n");  // zapytaj o wersje GPS
 8001d0c:	4e32      	ldr	r6, [pc, #200]	@ (8001dd8 <GPS_SetBaud+0xd4>)
 8001d0e:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8001dec <GPS_SetBaud+0xe8>
            }
            if(Sim80x.GPS.RunStatus == 0)      // brak odpowiedzi lub pakietow URC, testuj kolejne baudrate
            {
                if(++baudrate > 5)  goto reterr;
                #if (_SIM80X_DEBUG==1)
                printf("GPS_Init():Checking %s baud...\r\n", brtab[baudrate]);
 8001d12:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8001df0 <GPS_SetBaud+0xec>
    const char *brtab[6] = {"115200","9600","19200","38400","57600","115200"};
 8001d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
 8001d18:	b08f      	sub	sp, #60	@ 0x3c
    const char *brtab[6] = {"115200","9600","19200","38400","57600","115200"};
 8001d1a:	ad08      	add	r5, sp, #32
 8001d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d22:	4c2e      	ldr	r4, [pc, #184]	@ (8001ddc <GPS_SetBaud+0xd8>)
 8001d24:	e885 0003 	stmia.w	r5, {r0, r1}
    uint8_t baudrate = 255;        // default 115200 baud
 8001d28:	f10d 081c 	add.w	r8, sp, #28
 8001d2c:	25ff      	movs	r5, #255	@ 0xff
        Sim80x.GPS.RunStatus = 0;
 8001d2e:	2100      	movs	r1, #0
        uint8_t answer = Sim80x_SendAtCommand("AT+CGNSVER\r\n",500,2,"\r\nOK\r\n","\r\nERROR\r\n");  // zapytaj o wersje GPS
 8001d30:	9700      	str	r7, [sp, #0]
 8001d32:	4633      	mov	r3, r6
        Sim80x.GPS.RunStatus = 0;
 8001d34:	f884 1b31 	strb.w	r1, [r4, #2865]	@ 0xb31
        uint8_t answer = Sim80x_SendAtCommand("AT+CGNSVER\r\n",500,2,"\r\nOK\r\n","\r\nERROR\r\n");  // zapytaj o wersje GPS
 8001d38:	2202      	movs	r2, #2
 8001d3a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001d3e:	4648      	mov	r0, r9
 8001d40:	f000 fb62 	bl	8002408 <Sim80x_SendAtCommand>
        if(answer == 1)
 8001d44:	2801      	cmp	r0, #1
 8001d46:	d13b      	bne.n	8001dc0 <GPS_SetBaud+0xbc>
 8001d48:	f04f 0b65 	mov.w	fp, #101	@ 0x65
 8001d4c:	e006      	b.n	8001d5c <GPS_SetBaud+0x58>
                osDelay(8);
 8001d4e:	f00c f821 	bl	800dd94 <osDelay>
                if(++tout > 100) break;         // max 800ms na odpowiedz, normalnie prsychodzi po ok 320ms
 8001d52:	f10b 33ff 	add.w	r3, fp, #4294967295
 8001d56:	f013 0bff 	ands.w	fp, r3, #255	@ 0xff
 8001d5a:	d013      	beq.n	8001d84 <GPS_SetBaud+0x80>
            while(Sim80x.GPS.RunStatus == 0)   // czekaj na odpowiedz z GPS z wersja firmware.
 8001d5c:	f894 3b31 	ldrb.w	r3, [r4, #2865]	@ 0xb31
                osDelay(8);
 8001d60:	2008      	movs	r0, #8
            while(Sim80x.GPS.RunStatus == 0)   // czekaj na odpowiedz z GPS z wersja firmware.
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f3      	beq.n	8001d4e <GPS_SetBaud+0x4a>
                continue;
            }
            else                                // przyszla odpowiedz -> baudrate prawidlowe
            {
                #if (_SIM80X_DEBUG==1)
            	if(baudrate == 255) baudrate = 0;
 8001d66:	2dff      	cmp	r5, #255	@ 0xff
 8001d68:	bf08      	it	eq
 8001d6a:	2500      	moveq	r5, #0
                printf("\r\nGPS_Init():GPS Baudrate %s\r\n", brtab[baudrate]);
 8001d6c:	ab0e      	add	r3, sp, #56	@ 0x38
 8001d6e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001d72:	481b      	ldr	r0, [pc, #108]	@ (8001de0 <GPS_SetBaud+0xdc>)
 8001d74:	f855 1c18 	ldr.w	r1, [r5, #-24]
 8001d78:	f00e ffd4 	bl	8010d24 <iprintf>
                #endif
                return true;
 8001d7c:	2001      	movs	r0, #1
        #if (_SIM80X_DEBUG==1)
        printf("\r\nGPS_Init():SetBaudRate ---> ERROR\r\n");
        #endif
        return false;
    }
}
 8001d7e:	b00f      	add	sp, #60	@ 0x3c
 8001d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(Sim80x.GPS.RunStatus == 0)      // brak odpowiedzi lub pakietow URC, testuj kolejne baudrate
 8001d84:	f894 3b31 	ldrb.w	r3, [r4, #2865]	@ 0xb31
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1ec      	bne.n	8001d66 <GPS_SetBaud+0x62>
                if(++baudrate > 5)  goto reterr;
 8001d8c:	3501      	adds	r5, #1
 8001d8e:	b2ed      	uxtb	r5, r5
 8001d90:	2d06      	cmp	r5, #6
 8001d92:	d015      	beq.n	8001dc0 <GPS_SetBaud+0xbc>
                printf("GPS_Init():Checking %s baud...\r\n", brtab[baudrate]);
 8001d94:	f858 bf04 	ldr.w	fp, [r8, #4]!
 8001d98:	4650      	mov	r0, sl
 8001d9a:	4659      	mov	r1, fp
 8001d9c:	f00e ffc2 	bl	8010d24 <iprintf>
                snprintf(str, sizeof(str), "AT+CGNSIPR=%s\r\n", brtab[baudrate]);
 8001da0:	4a10      	ldr	r2, [pc, #64]	@ (8001de4 <GPS_SetBaud+0xe0>)
 8001da2:	465b      	mov	r3, fp
 8001da4:	2114      	movs	r1, #20
 8001da6:	a803      	add	r0, sp, #12
 8001da8:	f00f f82c 	bl	8010e04 <sniprintf>
                answer = Sim80x_SendAtCommand(str, 500, 2, "\r\nOK\r\n","\r\nERROR\r\n");   // zmien baudrate
 8001dac:	9700      	str	r7, [sp, #0]
 8001dae:	4633      	mov	r3, r6
 8001db0:	a803      	add	r0, sp, #12
 8001db2:	2202      	movs	r2, #2
 8001db4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001db8:	f000 fb26 	bl	8002408 <Sim80x_SendAtCommand>
                if(answer == 2)  goto reterr;                                               // blad zmiany baud
 8001dbc:	2802      	cmp	r0, #2
 8001dbe:	d1b6      	bne.n	8001d2e <GPS_SetBaud+0x2a>
        printf("\r\nGPS_Init():SetBaudRate ---> ERROR\r\n");
 8001dc0:	4809      	ldr	r0, [pc, #36]	@ (8001de8 <GPS_SetBaud+0xe4>)
 8001dc2:	f00f f817 	bl	8010df4 <puts>
        return false;
 8001dc6:	2000      	movs	r0, #0
}
 8001dc8:	b00f      	add	sp, #60	@ 0x3c
 8001dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dce:	bf00      	nop
 8001dd0:	08014200 	.word	0x08014200
 8001dd4:	0801472c 	.word	0x0801472c
 8001dd8:	080153cc 	.word	0x080153cc
 8001ddc:	20000230 	.word	0x20000230
 8001de0:	08014be0 	.word	0x08014be0
 8001de4:	08014bd0 	.word	0x08014bd0
 8001de8:	08014c00 	.word	0x08014c00
 8001dec:	08014b9c 	.word	0x08014b9c
 8001df0:	08014bac 	.word	0x08014bac

08001df4 <GPS_SetPower>:


bool  GPS_SetPower(bool TurnOn)
{
 8001df4:	b570      	push	{r4, r5, r6, lr}
	uint8_t answer;
	if(!Sim80x.Status.Power)
 8001df6:	4c7a      	ldr	r4, [pc, #488]	@ (8001fe0 <GPS_SetPower+0x1ec>)
 8001df8:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8001dfc:	075a      	lsls	r2, r3, #29
{
 8001dfe:	b082      	sub	sp, #8
	if(!Sim80x.Status.Power)
 8001e00:	f140 809f 	bpl.w	8001f42 <GPS_SetPower+0x14e>
		#if (_SIM80X_DEBUG==1)
		printf("\r\nGPS_Init():Check power ---> ERROR\r\n");
		#endif
		return false;
	}
	if(TurnOn)
 8001e04:	b9a0      	cbnz	r0, 8001e30 <GPS_SetPower+0x3c>
		return false;
	  }
	}
	else
	{
	  if(Sim80x.GPS.RunStatus)
 8001e06:	f894 2b31 	ldrb.w	r2, [r4, #2865]	@ 0xb31
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	f040 80a2 	bne.w	8001f54 <GPS_SetPower+0x160>
		  // wylacz zasilanie GPS
		  answer = Sim80x_SendAtCommand("AT+CGNSPWR=0\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
		  osDelay(50);
	  } else answer = 1;
	  // wlacz spowrotem slow clk (low power)
	  if(Sim80x.GPRS.Connection == GPRSConnection_Idle) Sim80x.Status.LowPowerMode = 1;
 8001e10:	f894 282b 	ldrb.w	r2, [r4, #2091]	@ 0x82b
 8001e14:	2a00      	cmp	r2, #0
 8001e16:	f000 8098 	beq.w	8001f4a <GPS_SetPower+0x156>
	  if(answer == 1)
	  {
		#if (_SIM80X_DEBUG==1)
		printf("\r\nGPS_PowerOff() ---> OK\r\n");
 8001e1a:	4872      	ldr	r0, [pc, #456]	@ (8001fe4 <GPS_SetPower+0x1f0>)
 8001e1c:	f00e ffea 	bl	8010df4 <puts>
		#endif
		Sim80x.GPS.RunStatus = 0;
		Sim80x.GPS.SatInUse = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f884 3b4c 	strb.w	r3, [r4, #2892]	@ 0xb4c
		Sim80x.GPS.RunStatus = 0;
 8001e26:	f8a4 3b31 	strh.w	r3, [r4, #2865]	@ 0xb31
		return true;
 8001e2a:	2001      	movs	r0, #1
		Sim80x.GPS.SatInUse = 0;
		Sim80x.GPS.Fix = 0;
		return false;
	  }
	}
}
 8001e2c:	b002      	add	sp, #8
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
	  Sim80x.Status.LowPowerMode = 0;
 8001e30:	f36f 1345 	bfc	r3, #5, #1
	  answer = Sim80x_SendAtCommand("AT+CGNSPWR=1\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001e34:	4e6c      	ldr	r6, [pc, #432]	@ (8001fe8 <GPS_SetPower+0x1f4>)
	  Sim80x.Status.LowPowerMode = 0;
 8001e36:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
	  osDelay(100);
 8001e3a:	2064      	movs	r0, #100	@ 0x64
 8001e3c:	f00b ffaa 	bl	800dd94 <osDelay>
	  answer = Sim80x_SendAtCommand("AT+CGNSPWR=1\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001e40:	4b6a      	ldr	r3, [pc, #424]	@ (8001fec <GPS_SetPower+0x1f8>)
 8001e42:	486b      	ldr	r0, [pc, #428]	@ (8001ff0 <GPS_SetPower+0x1fc>)
 8001e44:	9600      	str	r6, [sp, #0]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e4c:	f000 fadc 	bl	8002408 <Sim80x_SendAtCommand>
	  if(answer == 1)
 8001e50:	2801      	cmp	r0, #1
	  answer = Sim80x_SendAtCommand("AT+CGNSPWR=1\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001e52:	4605      	mov	r5, r0
	  if(answer == 1)
 8001e54:	d167      	bne.n	8001f26 <GPS_SetPower+0x132>
		memset(&Sim80x.GPS, 0, sizeof(GPS_t));
 8001e56:	2220      	movs	r2, #32
 8001e58:	2100      	movs	r1, #0
 8001e5a:	f504 6033 	add.w	r0, r4, #2864	@ 0xb30
 8001e5e:	f00f f929 	bl	80110b4 <memset>
		osDelay(700);
 8001e62:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001e66:	f00b ff95 	bl	800dd94 <osDelay>
	uint8_t answer = Sim80x_SendAtCommand("AT+CGNSURC=1\r\n",300,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001e6a:	4b60      	ldr	r3, [pc, #384]	@ (8001fec <GPS_SetPower+0x1f8>)
 8001e6c:	4861      	ldr	r0, [pc, #388]	@ (8001ff4 <GPS_SetPower+0x200>)
 8001e6e:	9600      	str	r6, [sp, #0]
 8001e70:	2202      	movs	r2, #2
 8001e72:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001e76:	f000 fac7 	bl	8002408 <Sim80x_SendAtCommand>
	if(answer == 2)
 8001e7a:	2802      	cmp	r0, #2
 8001e7c:	d050      	beq.n	8001f20 <GPS_SetPower+0x12c>
		osDelay(700);
 8001e7e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001e82:	f00b ff87 	bl	800dd94 <osDelay>
	    if(!GPS_SetBaud()) goto OnErr;					// ustawienie baudrate dla portu 2 simcomma
 8001e86:	f7ff ff3d 	bl	8001d04 <GPS_SetBaud>
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	d04b      	beq.n	8001f26 <GPS_SetPower+0x132>
		osDelay(100);
 8001e8e:	2064      	movs	r0, #100	@ 0x64
 8001e90:	f00b ff80 	bl	800dd94 <osDelay>
		answer = Sim80x_SendAtCommand("AT+CGNSCMD=0,\"$PMTK285,4,600*3F\"\r\n", 500, 1,"\r\nOK\r\n");
 8001e94:	4b55      	ldr	r3, [pc, #340]	@ (8001fec <GPS_SetPower+0x1f8>)
 8001e96:	4858      	ldr	r0, [pc, #352]	@ (8001ff8 <GPS_SetPower+0x204>)
 8001e98:	462a      	mov	r2, r5
 8001e9a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e9e:	f000 fab3 	bl	8002408 <Sim80x_SendAtCommand>
		if(answer != 1) {
 8001ea2:	2801      	cmp	r0, #1
 8001ea4:	f040 8081 	bne.w	8001faa <GPS_SetPower+0x1b6>
		osDelay(20);
 8001ea8:	2014      	movs	r0, #20
 8001eaa:	f00b ff73 	bl	800dd94 <osDelay>
	uint8_t answer = Sim80x_SendAtCommand("AT+CGNSCMD=0,\"$PMTK353,1,1,0,0,0*2B\"\r\n", 300, 2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001eae:	4b4f      	ldr	r3, [pc, #316]	@ (8001fec <GPS_SetPower+0x1f8>)
 8001eb0:	4852      	ldr	r0, [pc, #328]	@ (8001ffc <GPS_SetPower+0x208>)
 8001eb2:	9600      	str	r6, [sp, #0]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001eba:	f000 faa5 	bl	8002408 <Sim80x_SendAtCommand>
	if(answer == 2)
 8001ebe:	2802      	cmp	r0, #2
 8001ec0:	f000 808a 	beq.w	8001fd8 <GPS_SetPower+0x1e4>
		osDelay(20);
 8001ec4:	2014      	movs	r0, #20
 8001ec6:	f00b ff65 	bl	800dd94 <osDelay>
	uint8_t answer = Sim80x_SendAtCommand("AT+CGNSCMD=0,\"$PMTK301,2*2E\"\r\n", 300, 2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001eca:	4b48      	ldr	r3, [pc, #288]	@ (8001fec <GPS_SetPower+0x1f8>)
 8001ecc:	484c      	ldr	r0, [pc, #304]	@ (8002000 <GPS_SetPower+0x20c>)
 8001ece:	9600      	str	r6, [sp, #0]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001ed6:	f000 fa97 	bl	8002408 <Sim80x_SendAtCommand>
	if(answer == 2)
 8001eda:	2802      	cmp	r0, #2
 8001edc:	d078      	beq.n	8001fd0 <GPS_SetPower+0x1dc>
		osDelay(20);
 8001ede:	2014      	movs	r0, #20
 8001ee0:	f00b ff58 	bl	800dd94 <osDelay>
	uint8_t answer = Sim80x_SendAtCommand("AT+CGNSCMD=0,\"$PMTK313,1*2E\"\r\n", 300, 2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001ee4:	4b41      	ldr	r3, [pc, #260]	@ (8001fec <GPS_SetPower+0x1f8>)
 8001ee6:	4847      	ldr	r0, [pc, #284]	@ (8002004 <GPS_SetPower+0x210>)
 8001ee8:	9600      	str	r6, [sp, #0]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001ef0:	f000 fa8a 	bl	8002408 <Sim80x_SendAtCommand>
	if(answer == 2)
 8001ef4:	2802      	cmp	r0, #2
 8001ef6:	d067      	beq.n	8001fc8 <GPS_SetPower+0x1d4>
		osDelay(20);
 8001ef8:	2014      	movs	r0, #20
 8001efa:	f00b ff4b 	bl	800dd94 <osDelay>
	uint8_t answer = Sim80x_SendAtCommand("AT+CGNSCMD=0,\"$PMTK886,1*29\"\r\n", 300, 2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001efe:	4b3b      	ldr	r3, [pc, #236]	@ (8001fec <GPS_SetPower+0x1f8>)
 8001f00:	4841      	ldr	r0, [pc, #260]	@ (8002008 <GPS_SetPower+0x214>)
 8001f02:	9600      	str	r6, [sp, #0]
 8001f04:	2202      	movs	r2, #2
 8001f06:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001f0a:	f000 fa7d 	bl	8002408 <Sim80x_SendAtCommand>
	if(answer == 2)
 8001f0e:	2802      	cmp	r0, #2
 8001f10:	d056      	beq.n	8001fc0 <GPS_SetPower+0x1cc>
		osDelay(50);
 8001f12:	2032      	movs	r0, #50	@ 0x32
 8001f14:	f00b ff3e 	bl	800dd94 <osDelay>
		printf("\r\nGPS_PowerOn() ---> OK\r\n");
 8001f18:	483c      	ldr	r0, [pc, #240]	@ (800200c <GPS_SetPower+0x218>)
 8001f1a:	f00e ff6b 	bl	8010df4 <puts>
		return true;
 8001f1e:	e784      	b.n	8001e2a <GPS_SetPower+0x36>
		printf("\r\nGPS_TurnOnURC() ---> ERROR\r\n");
 8001f20:	483b      	ldr	r0, [pc, #236]	@ (8002010 <GPS_SetPower+0x21c>)
 8001f22:	f00e ff67 	bl	8010df4 <puts>
		printf("\r\nGPS_PowerOn() ---> ERROR\r\n");
 8001f26:	483b      	ldr	r0, [pc, #236]	@ (8002014 <GPS_SetPower+0x220>)
 8001f28:	f00e ff64 	bl	8010df4 <puts>
		if(Sim80x.GPS.RunStatus)
 8001f2c:	f894 3b31 	ldrb.w	r3, [r4, #2865]	@ 0xb31
 8001f30:	bb93      	cbnz	r3, 8001f98 <GPS_SetPower+0x1a4>
		memset(&Sim80x.GPS, 0, sizeof(GPS_t));
 8001f32:	4839      	ldr	r0, [pc, #228]	@ (8002018 <GPS_SetPower+0x224>)
 8001f34:	2220      	movs	r2, #32
 8001f36:	2100      	movs	r1, #0
 8001f38:	f00f f8bc 	bl	80110b4 <memset>
		return false;
 8001f3c:	2000      	movs	r0, #0
}
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd70      	pop	{r4, r5, r6, pc}
		printf("\r\nGPS_Init():Check power ---> ERROR\r\n");
 8001f42:	4836      	ldr	r0, [pc, #216]	@ (800201c <GPS_SetPower+0x228>)
 8001f44:	f00e ff56 	bl	8010df4 <puts>
		return false;
 8001f48:	e7f8      	b.n	8001f3c <GPS_SetPower+0x148>
	  if(Sim80x.GPRS.Connection == GPRSConnection_Idle) Sim80x.Status.LowPowerMode = 1;
 8001f4a:	f043 0320 	orr.w	r3, r3, #32
 8001f4e:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
	  if(answer == 1)
 8001f52:	e762      	b.n	8001e1a <GPS_SetPower+0x26>
		  answer = Sim80x_SendAtCommand("AT+CGNSPWR=0\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001f54:	4824      	ldr	r0, [pc, #144]	@ (8001fe8 <GPS_SetPower+0x1f4>)
 8001f56:	4b25      	ldr	r3, [pc, #148]	@ (8001fec <GPS_SetPower+0x1f8>)
 8001f58:	9000      	str	r0, [sp, #0]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f60:	482f      	ldr	r0, [pc, #188]	@ (8002020 <GPS_SetPower+0x22c>)
 8001f62:	f000 fa51 	bl	8002408 <Sim80x_SendAtCommand>
 8001f66:	4605      	mov	r5, r0
		  osDelay(50);
 8001f68:	2032      	movs	r0, #50	@ 0x32
 8001f6a:	f00b ff13 	bl	800dd94 <osDelay>
	  if(Sim80x.GPRS.Connection == GPRSConnection_Idle) Sim80x.Status.LowPowerMode = 1;
 8001f6e:	f894 382b 	ldrb.w	r3, [r4, #2091]	@ 0x82b
 8001f72:	b92b      	cbnz	r3, 8001f80 <GPS_SetPower+0x18c>
 8001f74:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8001f78:	f043 0320 	orr.w	r3, r3, #32
 8001f7c:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
	  if(answer == 1)
 8001f80:	2d01      	cmp	r5, #1
 8001f82:	f43f af4a 	beq.w	8001e1a <GPS_SetPower+0x26>
		printf("\r\nGPS_PowerOff() ---> ERROR\r\n");
 8001f86:	4827      	ldr	r0, [pc, #156]	@ (8002024 <GPS_SetPower+0x230>)
 8001f88:	f00e ff34 	bl	8010df4 <puts>
		Sim80x.GPS.SatInUse = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f884 3b4c 	strb.w	r3, [r4, #2892]	@ 0xb4c
		Sim80x.GPS.RunStatus = 0;
 8001f92:	f8a4 3b31 	strh.w	r3, [r4, #2865]	@ 0xb31
		return false;
 8001f96:	e7d1      	b.n	8001f3c <GPS_SetPower+0x148>
			Sim80x_SendAtCommand("AT+CGNSPWR=0\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001f98:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <GPS_SetPower+0x1f8>)
 8001f9a:	9600      	str	r6, [sp, #0]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fa2:	481f      	ldr	r0, [pc, #124]	@ (8002020 <GPS_SetPower+0x22c>)
 8001fa4:	f000 fa30 	bl	8002408 <Sim80x_SendAtCommand>
 8001fa8:	e7c3      	b.n	8001f32 <GPS_SetPower+0x13e>
			osDelay(100);
 8001faa:	2064      	movs	r0, #100	@ 0x64
 8001fac:	f00b fef2 	bl	800dd94 <osDelay>
			Sim80x_SendAtCommand("AT+CGNSCMD=0,\"$PMTK285,4,600*3F\"\r\n", 500, 1,"\r\nOK\r\n");
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <GPS_SetPower+0x1f8>)
 8001fb2:	4811      	ldr	r0, [pc, #68]	@ (8001ff8 <GPS_SetPower+0x204>)
 8001fb4:	462a      	mov	r2, r5
 8001fb6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001fba:	f000 fa25 	bl	8002408 <Sim80x_SendAtCommand>
 8001fbe:	e773      	b.n	8001ea8 <GPS_SetPower+0xb4>
		printf("\r\nGPS_TurnOnFitnessMode() ---> ERROR\r\n");
 8001fc0:	4819      	ldr	r0, [pc, #100]	@ (8002028 <GPS_SetPower+0x234>)
 8001fc2:	f00e ff17 	bl	8010df4 <puts>
		return false;
 8001fc6:	e7a4      	b.n	8001f12 <GPS_SetPower+0x11e>
		printf("\r\nGPS_TurnOnSBAS() ---> ERROR\r\n");
 8001fc8:	4818      	ldr	r0, [pc, #96]	@ (800202c <GPS_SetPower+0x238>)
 8001fca:	f00e ff13 	bl	8010df4 <puts>
		return false;
 8001fce:	e793      	b.n	8001ef8 <GPS_SetPower+0x104>
		printf("\r\nGPS_TurnOnWAAS() ---> ERROR\r\n");
 8001fd0:	4817      	ldr	r0, [pc, #92]	@ (8002030 <GPS_SetPower+0x23c>)
 8001fd2:	f00e ff0f 	bl	8010df4 <puts>
		return false;
 8001fd6:	e782      	b.n	8001ede <GPS_SetPower+0xea>
		printf("\r\nGPS_TurnOnGLONASS() ---> ERROR\r\n");
 8001fd8:	4816      	ldr	r0, [pc, #88]	@ (8002034 <GPS_SetPower+0x240>)
 8001fda:	f00e ff0b 	bl	8010df4 <puts>
		return false;
 8001fde:	e771      	b.n	8001ec4 <GPS_SetPower+0xd0>
 8001fe0:	20000230 	.word	0x20000230
 8001fe4:	08014ccc 	.word	0x08014ccc
 8001fe8:	0801472c 	.word	0x0801472c
 8001fec:	080153cc 	.word	0x080153cc
 8001ff0:	08014c50 	.word	0x08014c50
 8001ff4:	08014b6c 	.word	0x08014b6c
 8001ff8:	08014c60 	.word	0x08014c60
 8001ffc:	08014a58 	.word	0x08014a58
 8002000:	08014aa4 	.word	0x08014aa4
 8002004:	08014ae4 	.word	0x08014ae4
 8002008:	08014b24 	.word	0x08014b24
 800200c:	08014c84 	.word	0x08014c84
 8002010:	08014b7c 	.word	0x08014b7c
 8002014:	08014ca0 	.word	0x08014ca0
 8002018:	20000d60 	.word	0x20000d60
 800201c:	08014c28 	.word	0x08014c28
 8002020:	08014cbc 	.word	0x08014cbc
 8002024:	08014ce8 	.word	0x08014ce8
 8002028:	08014b44 	.word	0x08014b44
 800202c:	08014b04 	.word	0x08014b04
 8002030:	08014ac4 	.word	0x08014ac4
 8002034:	08014a80 	.word	0x08014a80

08002038 <Gsm_CallDisconnect>:
  else
    return false;
}
//######################################################################################################
bool  Gsm_CallDisconnect(void)
{
 8002038:	b500      	push	{lr}
 800203a:	b083      	sub	sp, #12
  uint8_t answer = Sim80x_SendAtCommand("AT+HVOIC\r\n",20000,2,"AT+HVOIC\r\r\nOK\r\n","AT+HVOIC\r\r\nERROR\r\n");
 800203c:	4a09      	ldr	r2, [pc, #36]	@ (8002064 <Gsm_CallDisconnect+0x2c>)
 800203e:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <Gsm_CallDisconnect+0x30>)
 8002040:	9200      	str	r2, [sp, #0]
 8002042:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8002046:	2202      	movs	r2, #2
 8002048:	4808      	ldr	r0, [pc, #32]	@ (800206c <Gsm_CallDisconnect+0x34>)
 800204a:	f000 f9dd 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer == 1)
 800204e:	2801      	cmp	r0, #1
  {
    Sim80x.Gsm.GsmVoiceStatus = GsmVoiceStatus_Idle;
 8002050:	bf05      	ittet	eq
 8002052:	4b07      	ldreq	r3, [pc, #28]	@ (8002070 <Gsm_CallDisconnect+0x38>)
 8002054:	2200      	moveq	r2, #0
    return true;
  }
  else
    return false;
 8002056:	2000      	movne	r0, #0
    Sim80x.Gsm.GsmVoiceStatus = GsmVoiceStatus_Idle;
 8002058:	f883 265a 	strbeq.w	r2, [r3, #1626]	@ 0x65a
}
 800205c:	b003      	add	sp, #12
 800205e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002062:	bf00      	nop
 8002064:	08014d54 	.word	0x08014d54
 8002068:	08014d38 	.word	0x08014d38
 800206c:	08014d48 	.word	0x08014d48
 8002070:	20000230 	.word	0x20000230

08002074 <Gsm_MsgGetFormat>:
}
//######################################################################################################
//######################################################################################################
//######################################################################################################
GsmMsgFormat_t  Gsm_MsgGetFormat(void)
{
 8002074:	b500      	push	{lr}
 8002076:	b083      	sub	sp, #12
  uint8_t   answer;
  answer = Sim80x_SendAtCommand("AT+CMGF?\r\n",1000,2,"+CMGF: 0\r\n\r\nOK\r\n","+CMGF: 1\r\n\r\nOK\r\n");
 8002078:	4a0b      	ldr	r2, [pc, #44]	@ (80020a8 <Gsm_MsgGetFormat+0x34>)
 800207a:	9200      	str	r2, [sp, #0]
 800207c:	4b0b      	ldr	r3, [pc, #44]	@ (80020ac <Gsm_MsgGetFormat+0x38>)
 800207e:	480c      	ldr	r0, [pc, #48]	@ (80020b0 <Gsm_MsgGetFormat+0x3c>)
 8002080:	2202      	movs	r2, #2
 8002082:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002086:	f000 f9bf 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer == 1)
 800208a:	2801      	cmp	r0, #1
 800208c:	d005      	beq.n	800209a <Gsm_MsgGetFormat+0x26>
  {
    Sim80x.Gsm.MsgFormat = GsmMsgFormat_PDU;
    return GsmMsgFormat_PDU;
  }
  else if(answer == 2)
 800208e:	2802      	cmp	r0, #2
 8002090:	d003      	beq.n	800209a <Gsm_MsgGetFormat+0x26>
  {
    Sim80x.Gsm.MsgFormat = GsmMsgFormat_Text;
    return GsmMsgFormat_Text;
  }
  else
    return GsmMsgFormat_Error;  
 8002092:	2000      	movs	r0, #0
}
 8002094:	b003      	add	sp, #12
 8002096:	f85d fb04 	ldr.w	pc, [sp], #4
    Sim80x.Gsm.MsgFormat = GsmMsgFormat_Text;
 800209a:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <Gsm_MsgGetFormat+0x40>)
 800209c:	f883 07d9 	strb.w	r0, [r3, #2009]	@ 0x7d9
}
 80020a0:	b003      	add	sp, #12
 80020a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80020a6:	bf00      	nop
 80020a8:	08014d88 	.word	0x08014d88
 80020ac:	08014d68 	.word	0x08014d68
 80020b0:	08014d7c 	.word	0x08014d7c
 80020b4:	20000230 	.word	0x20000230

080020b8 <Gsm_MsgSetFormat>:
//######################################################################################################
bool  Gsm_MsgSetFormat(GsmMsgFormat_t GsmMsgFormat)
{
 80020b8:	b510      	push	{r4, lr}
  uint8_t   answer;
  if(GsmMsgFormat == GsmMsgFormat_PDU)
 80020ba:	2801      	cmp	r0, #1
{
 80020bc:	b082      	sub	sp, #8
  if(GsmMsgFormat == GsmMsgFormat_PDU)
 80020be:	d015      	beq.n	80020ec <Gsm_MsgSetFormat+0x34>
    answer = Sim80x_SendAtCommand("AT+CMGF=0\r\n",1000,2,"AT+CMGF=0\r\r\nOK\r\n","AT+CMGF=0\r\r\nERROR\r\n");
  else  if(GsmMsgFormat == GsmMsgFormat_Text)
 80020c0:	2802      	cmp	r0, #2
 80020c2:	4604      	mov	r4, r0
 80020c4:	d002      	beq.n	80020cc <Gsm_MsgSetFormat+0x14>
    answer = Sim80x_SendAtCommand("AT+CMGF=1\r\n",1000,2,"AT+CMGF=1\r\r\nOK\r\n","AT+CMGF=1\r\r\nERROR\r\n");
  else
    return false;
 80020c6:	2000      	movs	r0, #0
      Sim80x.Gsm.MsgFormat = GsmMsgFormat_Text;
    return true;    
  }
  else
    return false;  
}
 80020c8:	b002      	add	sp, #8
 80020ca:	bd10      	pop	{r4, pc}
    answer = Sim80x_SendAtCommand("AT+CMGF=1\r\n",1000,2,"AT+CMGF=1\r\r\nOK\r\n","AT+CMGF=1\r\r\nERROR\r\n");
 80020cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002108 <Gsm_MsgSetFormat+0x50>)
 80020ce:	9200      	str	r2, [sp, #0]
 80020d0:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <Gsm_MsgSetFormat+0x54>)
 80020d2:	4602      	mov	r2, r0
 80020d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020d8:	480d      	ldr	r0, [pc, #52]	@ (8002110 <Gsm_MsgSetFormat+0x58>)
 80020da:	f000 f995 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer == 1)
 80020de:	2801      	cmp	r0, #1
 80020e0:	d1f1      	bne.n	80020c6 <Gsm_MsgSetFormat+0xe>
      Sim80x.Gsm.MsgFormat = GsmMsgFormat_Text;
 80020e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <Gsm_MsgSetFormat+0x5c>)
 80020e4:	2001      	movs	r0, #1
 80020e6:	f883 47d9 	strb.w	r4, [r3, #2009]	@ 0x7d9
 80020ea:	e7ed      	b.n	80020c8 <Gsm_MsgSetFormat+0x10>
    answer = Sim80x_SendAtCommand("AT+CMGF=0\r\n",1000,2,"AT+CMGF=0\r\r\nOK\r\n","AT+CMGF=0\r\r\nERROR\r\n");
 80020ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <Gsm_MsgSetFormat+0x60>)
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <Gsm_MsgSetFormat+0x64>)
 80020f2:	480b      	ldr	r0, [pc, #44]	@ (8002120 <Gsm_MsgSetFormat+0x68>)
 80020f4:	2202      	movs	r2, #2
 80020f6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020fa:	f000 f985 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer == 1)
 80020fe:	2801      	cmp	r0, #1
    answer = Sim80x_SendAtCommand("AT+CMGF=0\r\n",1000,2,"AT+CMGF=0\r\r\nOK\r\n","AT+CMGF=0\r\r\nERROR\r\n");
 8002100:	4604      	mov	r4, r0
  if(answer == 1)
 8002102:	d1e0      	bne.n	80020c6 <Gsm_MsgSetFormat+0xe>
 8002104:	e7ed      	b.n	80020e2 <Gsm_MsgSetFormat+0x2a>
 8002106:	bf00      	nop
 8002108:	08014df0 	.word	0x08014df0
 800210c:	08014dd0 	.word	0x08014dd0
 8002110:	08014de4 	.word	0x08014de4
 8002114:	20000230 	.word	0x20000230
 8002118:	08014dbc 	.word	0x08014dbc
 800211c:	08014d9c 	.word	0x08014d9c
 8002120:	08014db0 	.word	0x08014db0

08002124 <Gsm_MsgGetMemoryStatus>:
//######################################################################################################
GsmMsgMemory_t  Gsm_MsgGetMemoryStatus(void)
{
 8002124:	b500      	push	{lr}
 8002126:	b083      	sub	sp, #12
  uint8_t   answer;
  answer = Sim80x_SendAtCommand("AT+CPMS?\r\n",1000,2,"AT+CPMS?\r\r\n+CPMS: \"SM\"","AT+CPMS?\r\r\n+CPMS: \"ME\"");
 8002128:	4a0b      	ldr	r2, [pc, #44]	@ (8002158 <Gsm_MsgGetMemoryStatus+0x34>)
 800212a:	9200      	str	r2, [sp, #0]
 800212c:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <Gsm_MsgGetMemoryStatus+0x38>)
 800212e:	480c      	ldr	r0, [pc, #48]	@ (8002160 <Gsm_MsgGetMemoryStatus+0x3c>)
 8002130:	2202      	movs	r2, #2
 8002132:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002136:	f000 f967 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer == 1)
 800213a:	2801      	cmp	r0, #1
 800213c:	d005      	beq.n	800214a <Gsm_MsgGetMemoryStatus+0x26>
    Sim80x.Gsm.MsgMemory = GsmMsgMemory_OnSim;
  else if(answer == 2)
 800213e:	f1a0 0002 	sub.w	r0, r0, #2
 8002142:	fab0 f080 	clz	r0, r0
 8002146:	0940      	lsrs	r0, r0, #5
 8002148:	0040      	lsls	r0, r0, #1
    Sim80x.Gsm.MsgMemory = GsmMsgMemory_OnSim;
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <Gsm_MsgGetMemoryStatus+0x40>)
 800214c:	f883 07d8 	strb.w	r0, [r3, #2008]	@ 0x7d8
    Sim80x.Gsm.MsgMemory = GsmMsgMemory_OnModule;
  else
    Sim80x.Gsm.MsgMemory = GsmMsgMemory_Error;
  return  Sim80x.Gsm.MsgMemory; 
}
 8002150:	b003      	add	sp, #12
 8002152:	f85d fb04 	ldr.w	pc, [sp], #4
 8002156:	bf00      	nop
 8002158:	08014e28 	.word	0x08014e28
 800215c:	08014e04 	.word	0x08014e04
 8002160:	08014e1c 	.word	0x08014e1c
 8002164:	20000230 	.word	0x20000230

08002168 <Gsm_MsgSetMemoryLocation>:
//######################################################################################################
bool  Gsm_MsgSetMemoryLocation(GsmMsgMemory_t GsmMsgMemory)
{
  uint8_t   answer;
  if(GsmMsgMemory == GsmMsgMemory_OnSim)
 8002168:	2801      	cmp	r0, #1
{
 800216a:	b510      	push	{r4, lr}
 800216c:	4604      	mov	r4, r0
  if(GsmMsgMemory == GsmMsgMemory_OnSim)
 800216e:	d003      	beq.n	8002178 <Gsm_MsgSetMemoryLocation+0x10>
      return true;
    }
    else
      return false;
  }
  if(GsmMsgMemory == GsmMsgMemory_OnModule)
 8002170:	2802      	cmp	r0, #2
 8002172:	d010      	beq.n	8002196 <Gsm_MsgSetMemoryLocation+0x2e>
      return false;
 8002174:	2000      	movs	r0, #0
    }
    else
      return false;
  }
  return false;
}
 8002176:	bd10      	pop	{r4, pc}
    answer = Sim80x_SendAtCommand("AT+CPMS=\"SM\",\"SM\",\"SM\"\r\n",1000,1,"\r\n+CPMS:");
 8002178:	4602      	mov	r2, r0
 800217a:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <Gsm_MsgSetMemoryLocation+0x44>)
 800217c:	480c      	ldr	r0, [pc, #48]	@ (80021b0 <Gsm_MsgSetMemoryLocation+0x48>)
 800217e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002182:	f000 f941 	bl	8002408 <Sim80x_SendAtCommand>
    if(answer == 1)
 8002186:	2801      	cmp	r0, #1
    answer = Sim80x_SendAtCommand("AT+CPMS=\"SM\",\"SM\",\"SM\"\r\n",1000,1,"\r\n+CPMS:");
 8002188:	4604      	mov	r4, r0
    if(answer == 1)
 800218a:	d1f3      	bne.n	8002174 <Gsm_MsgSetMemoryLocation+0xc>
      Sim80x.Gsm.MsgMemory = GsmMsgMemory_OnModule;
 800218c:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <Gsm_MsgSetMemoryLocation+0x4c>)
 800218e:	f883 47d8 	strb.w	r4, [r3, #2008]	@ 0x7d8
      return true;
 8002192:	2001      	movs	r0, #1
}
 8002194:	bd10      	pop	{r4, pc}
    answer = Sim80x_SendAtCommand("AT+CPMS=\"ME\",\"ME\",\"ME\"\r\n",1000,1,"\r\n+CPMS:");
 8002196:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <Gsm_MsgSetMemoryLocation+0x44>)
 8002198:	4807      	ldr	r0, [pc, #28]	@ (80021b8 <Gsm_MsgSetMemoryLocation+0x50>)
 800219a:	2201      	movs	r2, #1
 800219c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021a0:	f000 f932 	bl	8002408 <Sim80x_SendAtCommand>
    if(answer == 1)
 80021a4:	2801      	cmp	r0, #1
 80021a6:	d1e5      	bne.n	8002174 <Gsm_MsgSetMemoryLocation+0xc>
 80021a8:	e7f0      	b.n	800218c <Gsm_MsgSetMemoryLocation+0x24>
 80021aa:	bf00      	nop
 80021ac:	08014e40 	.word	0x08014e40
 80021b0:	08014e4c 	.word	0x08014e4c
 80021b4:	20000230 	.word	0x20000230
 80021b8:	08014e68 	.word	0x08014e68

080021bc <Gsm_MsgGetCharacterFormat>:
//######################################################################################################
GsmTECharacterSet_t     Gsm_MsgGetCharacterFormat(void)
{
 80021bc:	b510      	push	{r4, lr}
  Sim80x.Gsm.TeCharacterFormat = (GsmTECharacterSet_t)Sim80x_SendAtCommand("AT+CSCS?\r\n",1000,7,"\r\n+CSCS: \"GSM\"\r\n","\r\n+CSCS: \"UCS2\"\r\n","\r\n+CSCS: \"IRA\"\r\n","\r\n+CSCS: \"HEX\"\r\n","\r\n+CSCS: \"PCCP\"\r\n","\r\n+CSCS: \"PCDN\"\r\n","\r\n+CSCS: \"8859-1\"\r\n");
 80021be:	4a0c      	ldr	r2, [pc, #48]	@ (80021f0 <Gsm_MsgGetCharacterFormat+0x34>)
 80021c0:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <Gsm_MsgGetCharacterFormat+0x38>)
 80021c2:	4c0d      	ldr	r4, [pc, #52]	@ (80021f8 <Gsm_MsgGetCharacterFormat+0x3c>)
 80021c4:	480d      	ldr	r0, [pc, #52]	@ (80021fc <Gsm_MsgGetCharacterFormat+0x40>)
 80021c6:	490e      	ldr	r1, [pc, #56]	@ (8002200 <Gsm_MsgGetCharacterFormat+0x44>)
{
 80021c8:	b086      	sub	sp, #24
  Sim80x.Gsm.TeCharacterFormat = (GsmTECharacterSet_t)Sim80x_SendAtCommand("AT+CSCS?\r\n",1000,7,"\r\n+CSCS: \"GSM\"\r\n","\r\n+CSCS: \"UCS2\"\r\n","\r\n+CSCS: \"IRA\"\r\n","\r\n+CSCS: \"HEX\"\r\n","\r\n+CSCS: \"PCCP\"\r\n","\r\n+CSCS: \"PCDN\"\r\n","\r\n+CSCS: \"8859-1\"\r\n");
 80021ca:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80021ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002204 <Gsm_MsgGetCharacterFormat+0x48>)
 80021d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <Gsm_MsgGetCharacterFormat+0x4c>)
 80021d2:	e9cd 2100 	strd	r2, r1, [sp]
 80021d6:	e9cd 0402 	strd	r0, r4, [sp, #8]
 80021da:	2207      	movs	r2, #7
 80021dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021e0:	480a      	ldr	r0, [pc, #40]	@ (800220c <Gsm_MsgGetCharacterFormat+0x50>)
 80021e2:	f000 f911 	bl	8002408 <Sim80x_SendAtCommand>
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <Gsm_MsgGetCharacterFormat+0x54>)
 80021e8:	f883 07d7 	strb.w	r0, [r3, #2007]	@ 0x7d7
  return Sim80x.Gsm.TeCharacterFormat;
}
 80021ec:	b006      	add	sp, #24
 80021ee:	bd10      	pop	{r4, pc}
 80021f0:	08014ea4 	.word	0x08014ea4
 80021f4:	08014eb8 	.word	0x08014eb8
 80021f8:	08014ecc 	.word	0x08014ecc
 80021fc:	08014ee0 	.word	0x08014ee0
 8002200:	08014ef4 	.word	0x08014ef4
 8002204:	08014f08 	.word	0x08014f08
 8002208:	08014e84 	.word	0x08014e84
 800220c:	08014e98 	.word	0x08014e98
 8002210:	20000230 	.word	0x20000230

08002214 <Gsm_MsgRead>:
  else
    return false;
}
//######################################################################################################
bool  Gsm_MsgRead(uint8_t index)
{
 8002214:	b530      	push	{r4, r5, lr}
  uint8_t answer;
  char str[16];
  memset(Sim80x.Gsm.Msg,0,sizeof(Sim80x.Gsm.Msg));
 8002216:	4d1b      	ldr	r5, [pc, #108]	@ (8002284 <Gsm_MsgRead+0x70>)
{
 8002218:	b087      	sub	sp, #28
 800221a:	4604      	mov	r4, r0
  memset(Sim80x.Gsm.Msg,0,sizeof(Sim80x.Gsm.Msg));
 800221c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002220:	2100      	movs	r1, #0
 8002222:	4628      	mov	r0, r5
 8002224:	f00e ff46 	bl	80110b4 <memset>
  memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
  memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
  memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));  
  sprintf(str,"AT+CMGR=%d\r\n",index);
 8002228:	4622      	mov	r2, r4
 800222a:	4917      	ldr	r1, [pc, #92]	@ (8002288 <Gsm_MsgRead+0x74>)
  memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 800222c:	2400      	movs	r4, #0
  sprintf(str,"AT+CMGR=%d\r\n",index);
 800222e:	a802      	add	r0, sp, #8
  memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 8002230:	f805 4c0a 	strb.w	r4, [r5, #-10]
  memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));  
 8002234:	f805 4c01 	strb.w	r4, [r5, #-1]
  memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 8002238:	f845 4c12 	str.w	r4, [r5, #-18]
 800223c:	f845 4c0e 	str.w	r4, [r5, #-14]
  memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
 8002240:	f845 4c23 	str.w	r4, [r5, #-35]
 8002244:	f845 4c1f 	str.w	r4, [r5, #-31]
 8002248:	f845 4c1b 	str.w	r4, [r5, #-27]
 800224c:	f845 4c17 	str.w	r4, [r5, #-23]
 8002250:	f805 4c13 	strb.w	r4, [r5, #-19]
  memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));  
 8002254:	f845 4c09 	str.w	r4, [r5, #-9]
 8002258:	f845 4c05 	str.w	r4, [r5, #-5]
  sprintf(str,"AT+CMGR=%d\r\n",index);
 800225c:	f00e fe06 	bl	8010e6c <siprintf>
  answer = Sim80x_SendAtCommand(str,5000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8002260:	4a0a      	ldr	r2, [pc, #40]	@ (800228c <Gsm_MsgRead+0x78>)
 8002262:	9200      	str	r2, [sp, #0]
 8002264:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <Gsm_MsgRead+0x7c>)
 8002266:	a802      	add	r0, sp, #8
 8002268:	2202      	movs	r2, #2
 800226a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800226e:	f000 f8cb 	bl	8002408 <Sim80x_SendAtCommand>
  if((answer == 1 ) && (Sim80x.Gsm.MsgReadIsOK==1))
 8002272:	2801      	cmp	r0, #1
 8002274:	bf0a      	itet	eq
 8002276:	f815 0c8b 	ldrbeq.w	r0, [r5, #-139]
    return true;
  else
    return false;    
 800227a:	4620      	movne	r0, r4
  if((answer == 1 ) && (Sim80x.Gsm.MsgReadIsOK==1))
 800227c:	f3c0 0040 	ubfxeq	r0, r0, #1, #1
}
 8002280:	b007      	add	sp, #28
 8002282:	bd30      	pop	{r4, r5, pc}
 8002284:	20000907 	.word	0x20000907
 8002288:	08014f1c 	.word	0x08014f1c
 800228c:	0801472c 	.word	0x0801472c
 8002290:	080153cc 	.word	0x080153cc

08002294 <Gsm_MsgDelete>:
//######################################################################################################
bool  Gsm_MsgDelete(uint8_t index)
{
 8002294:	b530      	push	{r4, r5, lr}
 8002296:	b093      	sub	sp, #76	@ 0x4c
 8002298:	4604      	mov	r4, r0
  uint8_t answer;
  char str[16];
  char strP1[22];
  char strP2[22];
  sprintf(str,"AT+CMGD=%d\r\n",index);
 800229a:	4602      	mov	r2, r0
 800229c:	490e      	ldr	r1, [pc, #56]	@ (80022d8 <Gsm_MsgDelete+0x44>)
 800229e:	a802      	add	r0, sp, #8
 80022a0:	f00e fde4 	bl	8010e6c <siprintf>
  sprintf(strP1,"AT+CMGD=%d\r\r\nOK\r\n",index);
  sprintf(strP2,"AT+CMGD=%d\r\r\nERROR\r\n",index);
 80022a4:	ad0c      	add	r5, sp, #48	@ 0x30
  sprintf(strP1,"AT+CMGD=%d\r\r\nOK\r\n",index);
 80022a6:	4622      	mov	r2, r4
 80022a8:	490c      	ldr	r1, [pc, #48]	@ (80022dc <Gsm_MsgDelete+0x48>)
 80022aa:	a806      	add	r0, sp, #24
 80022ac:	f00e fdde 	bl	8010e6c <siprintf>
  sprintf(strP2,"AT+CMGD=%d\r\r\nERROR\r\n",index);
 80022b0:	4622      	mov	r2, r4
 80022b2:	490b      	ldr	r1, [pc, #44]	@ (80022e0 <Gsm_MsgDelete+0x4c>)
 80022b4:	4628      	mov	r0, r5
 80022b6:	f00e fdd9 	bl	8010e6c <siprintf>
  answer = Sim80x_SendAtCommand(str,25000,2,strP1,strP2);
 80022ba:	9500      	str	r5, [sp, #0]
 80022bc:	ab06      	add	r3, sp, #24
 80022be:	2202      	movs	r2, #2
 80022c0:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80022c4:	a802      	add	r0, sp, #8
 80022c6:	f000 f89f 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer == 1)
    return true;
  else
    return false;  
}
 80022ca:	f1a0 0001 	sub.w	r0, r0, #1
 80022ce:	fab0 f080 	clz	r0, r0
 80022d2:	0940      	lsrs	r0, r0, #5
 80022d4:	b013      	add	sp, #76	@ 0x4c
 80022d6:	bd30      	pop	{r4, r5, pc}
 80022d8:	08014f2c 	.word	0x08014f2c
 80022dc:	08014f3c 	.word	0x08014f3c
 80022e0:	08014f50 	.word	0x08014f50

080022e4 <Gsm_MsgGetServiceNumber>:
//######################################################################################################
bool  Gsm_MsgGetServiceNumber(void)
{
 80022e4:	b508      	push	{r3, lr}
  uint8_t answer;
  answer = Sim80x_SendAtCommand("AT+CSCA?\r\n",5000,1,"\r\n+CSCA:");
 80022e6:	4809      	ldr	r0, [pc, #36]	@ (800230c <Gsm_MsgGetServiceNumber+0x28>)
 80022e8:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <Gsm_MsgGetServiceNumber+0x2c>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	f241 3188 	movw	r1, #5000	@ 0x1388
 80022f0:	f000 f88a 	bl	8002408 <Sim80x_SendAtCommand>
  if((answer == 1) && (Sim80x.Gsm.MsgServiceNumber[0]!=0))
 80022f4:	2801      	cmp	r0, #1
 80022f6:	d106      	bne.n	8002306 <Gsm_MsgGetServiceNumber+0x22>
 80022f8:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <Gsm_MsgGetServiceNumber+0x30>)
 80022fa:	f893 0692 	ldrb.w	r0, [r3, #1682]	@ 0x692
 80022fe:	3800      	subs	r0, #0
 8002300:	bf18      	it	ne
 8002302:	2001      	movne	r0, #1
    return true;
  else
    return false;
}
 8002304:	bd08      	pop	{r3, pc}
    return false;
 8002306:	2000      	movs	r0, #0
}
 8002308:	bd08      	pop	{r3, pc}
 800230a:	bf00      	nop
 800230c:	08014f74 	.word	0x08014f74
 8002310:	08014f68 	.word	0x08014f68
 8002314:	20000230 	.word	0x20000230

08002318 <Gsm_MsgGetTextModeParameter>:
  else
    return false;
}
//######################################################################################################
bool  Gsm_MsgGetTextModeParameter(void)
{
 8002318:	b508      	push	{r3, lr}
  uint8_t answer;
  answer = Sim80x_SendAtCommand("AT+CSMP?\r\n",500,1,"\r\nOK\r\n");
 800231a:	2201      	movs	r2, #1
 800231c:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <Gsm_MsgGetTextModeParameter+0x1c>)
 800231e:	4806      	ldr	r0, [pc, #24]	@ (8002338 <Gsm_MsgGetTextModeParameter+0x20>)
 8002320:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002324:	f000 f870 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer == 1)
    return true;
  else
    return false;  
}
 8002328:	f1a0 0001 	sub.w	r0, r0, #1
 800232c:	fab0 f080 	clz	r0, r0
 8002330:	0940      	lsrs	r0, r0, #5
 8002332:	bd08      	pop	{r3, pc}
 8002334:	080153cc 	.word	0x080153cc
 8002338:	08014f80 	.word	0x08014f80

0800233c <Gsm_MsgSetTextModeParameter>:
//######################################################################################################
bool  Gsm_MsgSetTextModeParameter(uint8_t fo,uint8_t vp,uint8_t pid,uint8_t dcs)
{
 800233c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233e:	b095      	sub	sp, #84	@ 0x54
  uint8_t answer;
  char str[32];
  char strParam[32];
  snprintf(str,sizeof(str),"AT+CSMP=%d,%d,%d,%d\r\n",fo,vp,pid,dcs);
 8002340:	e9cd 2301 	strd	r2, r3, [sp, #4]
{
 8002344:	4604      	mov	r4, r0
 8002346:	460d      	mov	r5, r1
 8002348:	4616      	mov	r6, r2
 800234a:	461f      	mov	r7, r3
  snprintf(str,sizeof(str),"AT+CSMP=%d,%d,%d,%d\r\n",fo,vp,pid,dcs);
 800234c:	9100      	str	r1, [sp, #0]
 800234e:	4603      	mov	r3, r0
 8002350:	4a0d      	ldr	r2, [pc, #52]	@ (8002388 <Gsm_MsgSetTextModeParameter+0x4c>)
 8002352:	2120      	movs	r1, #32
 8002354:	a804      	add	r0, sp, #16
 8002356:	f00e fd55 	bl	8010e04 <sniprintf>
  snprintf(strParam,sizeof(strParam),"AT+CSMP=%d,%d,%d,%d\r\nOK\r\n",fo,vp,pid,dcs);
 800235a:	4623      	mov	r3, r4
 800235c:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002360:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <Gsm_MsgSetTextModeParameter+0x50>)
 8002362:	9500      	str	r5, [sp, #0]
 8002364:	2120      	movs	r1, #32
 8002366:	a80c      	add	r0, sp, #48	@ 0x30
 8002368:	f00e fd4c 	bl	8010e04 <sniprintf>
  answer = Sim80x_SendAtCommand(str,500,1,strParam);
 800236c:	ab0c      	add	r3, sp, #48	@ 0x30
 800236e:	2201      	movs	r2, #1
 8002370:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002374:	a804      	add	r0, sp, #16
 8002376:	f000 f847 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer == 1)
    return true;
  else
    return false;
}
 800237a:	f1a0 0001 	sub.w	r0, r0, #1
 800237e:	fab0 f080 	clz	r0, r0
 8002382:	0940      	lsrs	r0, r0, #5
 8002384:	b015      	add	sp, #84	@ 0x54
 8002386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002388:	08014f8c 	.word	0x08014f8c
 800238c:	08014fa4 	.word	0x08014fa4

08002390 <Sim80x_SendString>:
//######################################################################################################################
//######################################################################################################################
//######################################################################################################################
void	Sim80x_SendString(char *str)
{
	if(*str == 0) return;
 8002390:	7803      	ldrb	r3, [r0, #0]
 8002392:	b903      	cbnz	r3, 8002396 <Sim80x_SendString+0x6>
 8002394:	4770      	bx	lr
{
 8002396:	b510      	push	{r4, lr}
 8002398:	4604      	mov	r4, r0
	while(_SIM80X_USART.hdmatx->State != HAL_DMA_STATE_READY)
		osDelay(10);
  #else
//    if(osMutexWait(GsmMutexId, 500) == osOK)
    {
        HAL_UART_Transmit(&_SIM80X_USART,(uint8_t*)str,strlen(str),100);
 800239a:	f7fd ffa9 	bl	80002f0 <strlen>
 800239e:	4602      	mov	r2, r0
 80023a0:	4621      	mov	r1, r4
 80023a2:	4805      	ldr	r0, [pc, #20]	@ (80023b8 <Sim80x_SendString+0x28>)
 80023a4:	2364      	movs	r3, #100	@ 0x64
 80023a6:	b292      	uxth	r2, r2
 80023a8:	f00b fb68 	bl	800da7c <HAL_UART_Transmit>
//        osMutexRelease(GsmMutexId);
    }
  osDelay(10);
  #endif
}
 80023ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osDelay(10);
 80023b0:	200a      	movs	r0, #10
 80023b2:	f00b bcef 	b.w	800dd94 <osDelay>
 80023b6:	bf00      	nop
 80023b8:	20001650 	.word	0x20001650

080023bc <Sim80x_SendRaw>:
//######################################################################################################################
void  Sim80x_SendRaw(uint8_t *Data,uint16_t len)
{
 80023bc:	b508      	push	{r3, lr}
 80023be:	4684      	mov	ip, r0
 80023c0:	460a      	mov	r2, r1
	while(_SIM80X_USART.hdmatx->State != HAL_DMA_STATE_READY)
		osDelay(10);
  #else
//    if(osMutexWait(GsmMutexId, 500) == osOK)
    {
        HAL_UART_Transmit(&_SIM80X_USART,Data,len,400);
 80023c2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80023c6:	4804      	ldr	r0, [pc, #16]	@ (80023d8 <Sim80x_SendRaw+0x1c>)
 80023c8:	4661      	mov	r1, ip
 80023ca:	f00b fb57 	bl	800da7c <HAL_UART_Transmit>
//        osMutexRelease(GsmMutexId);
    }
  osDelay(10);
  #endif

}
 80023ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osDelay(10);
 80023d2:	200a      	movs	r0, #10
 80023d4:	f00b bcde 	b.w	800dd94 <osDelay>
 80023d8:	20001650 	.word	0x20001650

080023dc <Sim80x_RxCallBack>:
//######################################################################################################################
void	Sim80x_RxCallBack(uint8_t ch)
{
 80023dc:	b510      	push	{r4, lr}
 80023de:	4604      	mov	r4, r0
    Sim80x.UsartRxLastTime = HAL_GetTick();
 80023e0:	f007 fdd8 	bl	8009f94 <HAL_GetTick>
 80023e4:	4b07      	ldr	r3, [pc, #28]	@ (8002404 <Sim80x_RxCallBack+0x28>)
    Sim80x.UsartRxBuffer[Sim80x.UsartRxIndex] = ch; //Sim80x.UsartRxTemp;
 80023e6:	881a      	ldrh	r2, [r3, #0]
    Sim80x.UsartRxLastTime = HAL_GetTick();
 80023e8:	2100      	movs	r1, #0
 80023ea:	e9c3 01c2 	strd	r0, r1, [r3, #776]	@ 0x308
    Sim80x.UsartRxBuffer[Sim80x.UsartRxIndex] = ch; //Sim80x.UsartRxTemp;
 80023ee:	1898      	adds	r0, r3, r2
    if(Sim80x.UsartRxIndex < (_SIM80X_BUFFER_SIZE-1))
 80023f0:	f240 21fe 	movw	r1, #766	@ 0x2fe
 80023f4:	428a      	cmp	r2, r1
      Sim80x.UsartRxIndex++;
 80023f6:	bf98      	it	ls
 80023f8:	3201      	addls	r2, #1
    Sim80x.UsartRxBuffer[Sim80x.UsartRxIndex] = ch; //Sim80x.UsartRxTemp;
 80023fa:	70c4      	strb	r4, [r0, #3]
      Sim80x.UsartRxIndex++;
 80023fc:	bf98      	it	ls
 80023fe:	801a      	strhls	r2, [r3, #0]
}
 8002400:	bd10      	pop	{r4, pc}
 8002402:	bf00      	nop
 8002404:	20000230 	.word	0x20000230

08002408 <Sim80x_SendAtCommand>:
//######################################################################################################################
uint8_t     Sim80x_SendAtCommand(char *AtCommand, int32_t MaxWaiting_ms, uint8_t HowMuchAnswers,...)
{
 8002408:	b40c      	push	{r2, r3}
 800240a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while(Sim80x.Status.Busy == 1)
 800240e:	4e4e      	ldr	r6, [pc, #312]	@ (8002548 <Sim80x_SendAtCommand+0x140>)
{
 8002410:	b083      	sub	sp, #12
  while(Sim80x.Status.Busy == 1)
 8002412:	f896 3330 	ldrb.w	r3, [r6, #816]	@ 0x330
{
 8002416:	af00      	add	r7, sp, #0
  while(Sim80x.Status.Busy == 1)
 8002418:	079a      	lsls	r2, r3, #30
{
 800241a:	f897 4030 	ldrb.w	r4, [r7, #48]	@ 0x30
 800241e:	4682      	mov	sl, r0
 8002420:	460d      	mov	r5, r1
  while(Sim80x.Status.Busy == 1)
 8002422:	d506      	bpl.n	8002432 <Sim80x_SendAtCommand+0x2a>
  {
    osDelay(100);
 8002424:	2064      	movs	r0, #100	@ 0x64
 8002426:	f00b fcb5 	bl	800dd94 <osDelay>
  while(Sim80x.Status.Busy == 1)
 800242a:	f896 3330 	ldrb.w	r3, [r6, #816]	@ 0x330
 800242e:	079b      	lsls	r3, r3, #30
 8002430:	d4f8      	bmi.n	8002424 <Sim80x_SendAtCommand+0x1c>
  }
  Sim80x.AtCommand.LowPowerTime = HAL_GetTick() + MaxWaiting_ms + 50;
 8002432:	f007 fdaf 	bl	8009f94 <HAL_GetTick>
 8002436:	f105 0332 	add.w	r3, r5, #50	@ 0x32
 800243a:	4418      	add	r0, r3
 800243c:	f8c6 0640 	str.w	r0, [r6, #1600]	@ 0x640
  if(GSM_DTR_READ) {
 8002440:	2120      	movs	r1, #32
 8002442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002446:	f008 ff8d 	bl	800b364 <HAL_GPIO_ReadPin>
 800244a:	2800      	cmp	r0, #0
 800244c:	d16d      	bne.n	800252a <Sim80x_SendAtCommand+0x122>
	  GSM_DTR_LOW;
	  osDelay(100);
	  Sim80x.AtCommand.LowPowerTime = HAL_GetTick() + 100;
  }
  Sim80x.Status.Busy = 1;
 800244e:	f896 3330 	ldrb.w	r3, [r6, #816]	@ 0x330
  Sim80x.AtCommand.FindAnswer = 0;
 8002452:	f04f 0800 	mov.w	r8, #0
  Sim80x.Status.Busy = 1;
 8002456:	f043 0302 	orr.w	r3, r3, #2
 800245a:	f886 3330 	strb.w	r3, [r6, #816]	@ 0x330
  Sim80x.AtCommand.FindAnswer = 0;
 800245e:	f886 8648 	strb.w	r8, [r6, #1608]	@ 0x648
  //Sim80x.AtCommand.ReceiveAnswerExeTime=0;
  Sim80x.AtCommand.SendCommandStartTime = HAL_GetTick();
 8002462:	f007 fd97 	bl	8009f94 <HAL_GetTick>
  Sim80x.AtCommand.ReceiveAnswerMaxWaiting = MaxWaiting_ms;
  memset(Sim80x.AtCommand.ReceiveAnswer,0,sizeof(Sim80x.AtCommand.ReceiveAnswer));
  va_list tag;
	va_start (tag,HowMuchAnswers);
	char *arg[HowMuchAnswers];
 8002466:	ea4f 0984 	mov.w	r9, r4, lsl #2
  Sim80x.AtCommand.SendCommandStartTime = HAL_GetTick();
 800246a:	f8c6 063c 	str.w	r0, [r6, #1596]	@ 0x63c
  memset(Sim80x.AtCommand.ReceiveAnswer,0,sizeof(Sim80x.AtCommand.ReceiveAnswer));
 800246e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8002472:	4836      	ldr	r0, [pc, #216]	@ (800254c <Sim80x_SendAtCommand+0x144>)
  Sim80x.AtCommand.ReceiveAnswerMaxWaiting = MaxWaiting_ms;
 8002474:	f8c6 5644 	str.w	r5, [r6, #1604]	@ 0x644
  memset(Sim80x.AtCommand.ReceiveAnswer,0,sizeof(Sim80x.AtCommand.ReceiveAnswer));
 8002478:	4641      	mov	r1, r8
 800247a:	f00e fe1b 	bl	80110b4 <memset>
	char *arg[HowMuchAnswers];
 800247e:	f109 0307 	add.w	r3, r9, #7
 8002482:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
	va_start (tag,HowMuchAnswers);
 8002486:	f107 0234 	add.w	r2, r7, #52	@ 0x34
	char *arg[HowMuchAnswers];
 800248a:	ebad 0d03 	sub.w	sp, sp, r3
	va_start (tag,HowMuchAnswers);
 800248e:	607a      	str	r2, [r7, #4]
	char *arg[HowMuchAnswers];
 8002490:	46eb      	mov	fp, sp
	for(uint8_t i=0; i<HowMuchAnswers ; i++)
 8002492:	b18c      	cbz	r4, 80024b8 <Sim80x_SendAtCommand+0xb0>
 8002494:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 800254c <Sim80x_SendAtCommand+0x144>
	{
		arg[i] = va_arg (tag, char *);
 8002498:	4614      	mov	r4, r2
 800249a:	f1ab 0b04 	sub.w	fp, fp, #4
 800249e:	4491      	add	r9, r2
 80024a0:	6821      	ldr	r1, [r4, #0]
 80024a2:	f84b 1f04 	str.w	r1, [fp, #4]!
 80024a6:	3404      	adds	r4, #4
		strncpy(Sim80x.AtCommand.ReceiveAnswer[i],arg[i],sizeof(Sim80x.AtCommand.ReceiveAnswer[0]));
 80024a8:	4640      	mov	r0, r8
 80024aa:	2240      	movs	r2, #64	@ 0x40
		arg[i] = va_arg (tag, char *);
 80024ac:	607c      	str	r4, [r7, #4]
	for(uint8_t i=0; i<HowMuchAnswers ; i++)
 80024ae:	4490      	add	r8, r2
		strncpy(Sim80x.AtCommand.ReceiveAnswer[i],arg[i],sizeof(Sim80x.AtCommand.ReceiveAnswer[0]));
 80024b0:	f00e fe27 	bl	8011102 <strncpy>
	for(uint8_t i=0; i<HowMuchAnswers ; i++)
 80024b4:	454c      	cmp	r4, r9
 80024b6:	d1f3      	bne.n	80024a0 <Sim80x_SendAtCommand+0x98>
	}
  va_end (tag);
  strncpy(Sim80x.AtCommand.SendCommand,AtCommand, 120);
 80024b8:	4825      	ldr	r0, [pc, #148]	@ (8002550 <Sim80x_SendAtCommand+0x148>)
 80024ba:	2278      	movs	r2, #120	@ 0x78
 80024bc:	4651      	mov	r1, sl
 80024be:	f00e fe20 	bl	8011102 <strncpy>
	if(*str == 0) return;
 80024c2:	f896 333c 	ldrb.w	r3, [r6, #828]	@ 0x33c
 80024c6:	b1a3      	cbz	r3, 80024f2 <Sim80x_SendAtCommand+0xea>
        HAL_UART_Transmit(&_SIM80X_USART,(uint8_t*)str,strlen(str),100);
 80024c8:	4821      	ldr	r0, [pc, #132]	@ (8002550 <Sim80x_SendAtCommand+0x148>)
 80024ca:	f7fd ff11 	bl	80002f0 <strlen>
 80024ce:	4602      	mov	r2, r0
 80024d0:	491f      	ldr	r1, [pc, #124]	@ (8002550 <Sim80x_SendAtCommand+0x148>)
 80024d2:	4820      	ldr	r0, [pc, #128]	@ (8002554 <Sim80x_SendAtCommand+0x14c>)
 80024d4:	2364      	movs	r3, #100	@ 0x64
 80024d6:	b292      	uxth	r2, r2
 80024d8:	f00b fad0 	bl	800da7c <HAL_UART_Transmit>
  osDelay(10);
 80024dc:	200a      	movs	r0, #10
 80024de:	f00b fc59 	bl	800dd94 <osDelay>
 80024e2:	e006      	b.n	80024f2 <Sim80x_SendAtCommand+0xea>
  Sim80x_SendString(Sim80x.AtCommand.SendCommand);
  if(_SIM80X_DEBUG == 2) printf("SIM < %s", AtCommand);
  while( MaxWaiting_ms > 0)
  {
    osDelay(10);
 80024e4:	200a      	movs	r0, #10
 80024e6:	f00b fc55 	bl	800dd94 <osDelay>
    if(Sim80x.AtCommand.FindAnswer > 0)
 80024ea:	f896 0648 	ldrb.w	r0, [r6, #1608]	@ 0x648
      return Sim80x.AtCommand.FindAnswer;    
    MaxWaiting_ms-=10;
 80024ee:	3d0a      	subs	r5, #10
    if(Sim80x.AtCommand.FindAnswer > 0)
 80024f0:	b9a8      	cbnz	r0, 800251e <Sim80x_SendAtCommand+0x116>
  while( MaxWaiting_ms > 0)
 80024f2:	2d00      	cmp	r5, #0
 80024f4:	dcf6      	bgt.n	80024e4 <Sim80x_SendAtCommand+0xdc>
  }
  memset(Sim80x.AtCommand.ReceiveAnswer,0,sizeof(Sim80x.AtCommand.ReceiveAnswer));
 80024f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80024fa:	2100      	movs	r1, #0
 80024fc:	4813      	ldr	r0, [pc, #76]	@ (800254c <Sim80x_SendAtCommand+0x144>)
 80024fe:	f00e fdd9 	bl	80110b4 <memset>
  Sim80x.Status.Busy=0;
 8002502:	f896 3330 	ldrb.w	r3, [r6, #816]	@ 0x330
 8002506:	f36f 0341 	bfc	r3, #1, #1
 800250a:	f886 3330 	strb.w	r3, [r6, #816]	@ 0x330
  Sim80x.AtCommand.LowPowerTime = HAL_GetTick() + 50;
 800250e:	f007 fd41 	bl	8009f94 <HAL_GetTick>
 8002512:	f100 0332 	add.w	r3, r0, #50	@ 0x32
  return Sim80x.AtCommand.FindAnswer;
 8002516:	f896 0648 	ldrb.w	r0, [r6, #1608]	@ 0x648
  Sim80x.AtCommand.LowPowerTime = HAL_GetTick() + 50;
 800251a:	f8c6 3640 	str.w	r3, [r6, #1600]	@ 0x640
}
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002526:	b002      	add	sp, #8
 8002528:	4770      	bx	lr
	  GSM_DTR_LOW;
 800252a:	2200      	movs	r2, #0
 800252c:	2120      	movs	r1, #32
 800252e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002532:	f008 ff1d 	bl	800b370 <HAL_GPIO_WritePin>
	  osDelay(100);
 8002536:	2064      	movs	r0, #100	@ 0x64
 8002538:	f00b fc2c 	bl	800dd94 <osDelay>
	  Sim80x.AtCommand.LowPowerTime = HAL_GetTick() + 100;
 800253c:	f007 fd2a 	bl	8009f94 <HAL_GetTick>
 8002540:	3064      	adds	r0, #100	@ 0x64
 8002542:	f8c6 0640 	str.w	r0, [r6, #1600]	@ 0x640
 8002546:	e782      	b.n	800244e <Sim80x_SendAtCommand+0x46>
 8002548:	20000230 	.word	0x20000230
 800254c:	200005ec 	.word	0x200005ec
 8002550:	2000056c 	.word	0x2000056c
 8002554:	20001650 	.word	0x20001650

08002558 <StartSim80xTask>:
    osDelay(Sim80x.Status.Power ? 3 : 50);
  }    
}
//######################################################################################################################
void StartSim80xTask(void const * argument)
{ 
 8002558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t TimeForSlowRun=0;
  #if( _SIM80X_USE_GPRS==1)
  uint32_t TimeForSlowRunGPRS=0;
  #endif
  uint8_t UnreadMsgCounter=1;
  printf("SIM TaskStart\r\n");
 800255c:	4866      	ldr	r0, [pc, #408]	@ (80026f8 <StartSim80xTask+0x1a0>)
 800255e:	4c67      	ldr	r4, [pc, #412]	@ (80026fc <StartSim80xTask+0x1a4>)

//      Gsm_UserNewCall(Sim80x.Gsm.CallerNumber);
    }    
    //###########################################
    if(HAL_GetTick() - TimeForSlowRun > (Sim80x.Status.RegisterdToNetwork ? 45000:10000) && Sim80x.GPRS.Connection != GPRSConnection_ConnectOK) { // nie przy aktywnym GPRS
      Sim80x_SendAtCommand("AT+CSQ\r\n",200,1,"\r\n+CSQ:");
 8002560:	f8df b1b4 	ldr.w	fp, [pc, #436]	@ 8002718 <StartSim80xTask+0x1c0>
  printf("SIM TaskStart\r\n");
 8002564:	f00e fc46 	bl	8010df4 <puts>
  uint32_t TimeForSlowRunGPRS=0;
 8002568:	f04f 0800 	mov.w	r8, #0
  uint8_t UnreadMsgCounter=1;
 800256c:	2701      	movs	r7, #1
  uint32_t TimeForSlowRun=0;
 800256e:	46c1      	mov	r9, r8
 8002570:	f204 75e5 	addw	r5, r4, #2021	@ 0x7e5
    if(Sim80x.Status.Power == 0 && Sim80x.GPRS.ReceiveDataLen == 0) {
 8002574:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8002578:	0759      	lsls	r1, r3, #29
 800257a:	d409      	bmi.n	8002590 <StartSim80xTask+0x38>
 800257c:	f8b4 382e 	ldrh.w	r3, [r4, #2094]	@ 0x82e
 8002580:	b933      	cbnz	r3, 8002590 <StartSim80xTask+0x38>
	  osDelay(100);
 8002582:	2064      	movs	r0, #100	@ 0x64
 8002584:	f00b fc06 	bl	800dd94 <osDelay>
    if(Sim80x.Status.Power == 0 && Sim80x.GPRS.ReceiveDataLen == 0) {
 8002588:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 800258c:	0759      	lsls	r1, r3, #29
 800258e:	d5f5      	bpl.n	800257c <StartSim80xTask+0x24>
    if(HAL_GetTick()-TimeForSlowRunGPRS > 5000) {
 8002590:	f007 fd00 	bl	8009f94 <HAL_GetTick>
 8002594:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002598:	eba0 0008 	sub.w	r0, r0, r8
 800259c:	4298      	cmp	r0, r3
 800259e:	d87f      	bhi.n	80026a0 <StartSim80xTask+0x148>
    if(Sim80x.GPRS.ReceiveDataLen > 0) {                                        // POPRAWKA NA GUBIONE DANE Z IPD
 80025a0:	f8b4 682e 	ldrh.w	r6, [r4, #2094]	@ 0x82e
 80025a4:	2e00      	cmp	r6, #0
 80025a6:	d165      	bne.n	8002674 <StartSim80xTask+0x11c>
 80025a8:	4e55      	ldr	r6, [pc, #340]	@ (8002700 <StartSim80xTask+0x1a8>)
        Sim80x.Gsm.HaveNewMsg[msgnum] = 0;
 80025aa:	f04f 0a00 	mov.w	sl, #0
 80025ae:	e001      	b.n	80025b4 <StartSim80xTask+0x5c>
    for(uint8_t msgnum=0 ;msgnum<sizeof(Sim80x.Gsm.HaveNewMsg) ; msgnum++)
 80025b0:	42ae      	cmp	r6, r5
 80025b2:	d00d      	beq.n	80025d0 <StartSim80xTask+0x78>
      if(Sim80x.Gsm.HaveNewMsg[msgnum] > 0) {
 80025b4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 80025b8:	2800      	cmp	r0, #0
 80025ba:	d0f9      	beq.n	80025b0 <StartSim80xTask+0x58>
        if(Gsm_MsgRead(Sim80x.Gsm.HaveNewMsg[msgnum])==true) {
 80025bc:	f7ff fe2a 	bl	8002214 <Gsm_MsgRead>
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d13f      	bne.n	8002644 <StartSim80xTask+0xec>
        Gsm_MsgGetMemoryStatus();
 80025c4:	f7ff fdae 	bl	8002124 <Gsm_MsgGetMemoryStatus>
    for(uint8_t msgnum=0 ;msgnum<sizeof(Sim80x.Gsm.HaveNewMsg) ; msgnum++)
 80025c8:	42ae      	cmp	r6, r5
        Sim80x.Gsm.HaveNewMsg[msgnum] = 0;
 80025ca:	f886 a000 	strb.w	sl, [r6]
    for(uint8_t msgnum=0 ;msgnum<sizeof(Sim80x.Gsm.HaveNewMsg) ; msgnum++)
 80025ce:	d1f1      	bne.n	80025b4 <StartSim80xTask+0x5c>
    if(Sim80x.Gsm.MsgUsed > 0) {
 80025d0:	f894 37db 	ldrb.w	r3, [r4, #2011]	@ 0x7db
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d167      	bne.n	80026a8 <StartSim80xTask+0x150>
    if(Sim80x.Gsm.HaveNewCall == 1) {
 80025d8:	f894 364c 	ldrb.w	r3, [r4, #1612]	@ 0x64c
 80025dc:	07da      	lsls	r2, r3, #31
 80025de:	d43b      	bmi.n	8002658 <StartSim80xTask+0x100>
    if(HAL_GetTick() - TimeForSlowRun > (Sim80x.Status.RegisterdToNetwork ? 45000:10000) && Sim80x.GPRS.Connection != GPRSConnection_ConnectOK) { // nie przy aktywnym GPRS
 80025e0:	f007 fcd8 	bl	8009f94 <HAL_GetTick>
 80025e4:	f894 1330 	ldrb.w	r1, [r4, #816]	@ 0x330
 80025e8:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 80025ec:	f011 0f01 	tst.w	r1, #1
 80025f0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80025f4:	eba0 0009 	sub.w	r0, r0, r9
 80025f8:	bf18      	it	ne
 80025fa:	4613      	movne	r3, r2
 80025fc:	4298      	cmp	r0, r3
 80025fe:	d916      	bls.n	800262e <StartSim80xTask+0xd6>
 8002600:	f894 382b 	ldrb.w	r3, [r4, #2091]	@ 0x82b
 8002604:	2b03      	cmp	r3, #3
 8002606:	d012      	beq.n	800262e <StartSim80xTask+0xd6>
      Sim80x_SendAtCommand("AT+CSQ\r\n",200,1,"\r\n+CSQ:");
 8002608:	2201      	movs	r2, #1
 800260a:	21c8      	movs	r1, #200	@ 0xc8
 800260c:	465b      	mov	r3, fp
 800260e:	483d      	ldr	r0, [pc, #244]	@ (8002704 <StartSim80xTask+0x1ac>)
 8002610:	f7ff fefa 	bl	8002408 <Sim80x_SendAtCommand>
      Sim80x_SendAtCommand("AT+CREG?\r\n",200,1,"\r\n+CREG:");
 8002614:	4b3c      	ldr	r3, [pc, #240]	@ (8002708 <StartSim80xTask+0x1b0>)
 8002616:	483d      	ldr	r0, [pc, #244]	@ (800270c <StartSim80xTask+0x1b4>)
 8002618:	2201      	movs	r2, #1
 800261a:	21c8      	movs	r1, #200	@ 0xc8
 800261c:	f7ff fef4 	bl	8002408 <Sim80x_SendAtCommand>
      Gsm_MsgGetMemoryStatus();
 8002620:	f7ff fd80 	bl	8002124 <Gsm_MsgGetMemoryStatus>
      SysTimeSync();
 8002624:	f006 fbd4 	bl	8008dd0 <SysTimeSync>
      TimeForSlowRun = HAL_GetTick();
 8002628:	f007 fcb4 	bl	8009f94 <HAL_GetTick>
 800262c:	4681      	mov	r9, r0
    }

    if(GSM_DTR_READ == 0 && HAL_GetTick() > Sim80x.AtCommand.LowPowerTime && Sim80x.Status.LowPowerMode) {
 800262e:	2120      	movs	r1, #32
 8002630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002634:	f008 fe96 	bl	800b364 <HAL_GPIO_ReadPin>
 8002638:	2800      	cmp	r0, #0
 800263a:	d03f      	beq.n	80026bc <StartSim80xTask+0x164>
      GSM_DTR_HI;
    }
    //###########################################
//    Gsm_User(HAL_GetTick());
    //###########################################
    osDelay(5);
 800263c:	2005      	movs	r0, #5
 800263e:	f00b fba9 	bl	800dd94 <osDelay>
 8002642:	e797      	b.n	8002574 <StartSim80xTask+0x1c>
          osDelay(100);
 8002644:	2064      	movs	r0, #100	@ 0x64
 8002646:	f00b fba5 	bl	800dd94 <osDelay>
          Gsm_MsgDelete(Sim80x.Gsm.HaveNewMsg[msgnum]);
 800264a:	7830      	ldrb	r0, [r6, #0]
 800264c:	f7ff fe22 	bl	8002294 <Gsm_MsgDelete>
          osDelay(100);
 8002650:	2064      	movs	r0, #100	@ 0x64
 8002652:	f00b fb9f 	bl	800dd94 <osDelay>
 8002656:	e7b5      	b.n	80025c4 <StartSim80xTask+0x6c>
      Sim80x.Gsm.GsmVoiceStatus = GsmVoiceStatus_Ringing;
 8002658:	2208      	movs	r2, #8
      Sim80x.Gsm.HaveNewCall = 0;
 800265a:	f36f 0300 	bfc	r3, #0, #1
      osDelay(500);
 800265e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
      Sim80x.Gsm.GsmVoiceStatus = GsmVoiceStatus_Ringing;
 8002662:	f884 265a 	strb.w	r2, [r4, #1626]	@ 0x65a
      Sim80x.Gsm.HaveNewCall = 0;
 8002666:	f884 364c 	strb.w	r3, [r4, #1612]	@ 0x64c
      osDelay(500);
 800266a:	f00b fb93 	bl	800dd94 <osDelay>
	  Gsm_CallDisconnect();		// rozlacz po 3 sekundach
 800266e:	f7ff fce3 	bl	8002038 <Gsm_CallDisconnect>
 8002672:	e7b5      	b.n	80025e0 <StartSim80xTask+0x88>
      char *mptr = malloc(Sim80x.GPRS.ReceiveDataLen);                          // tymczasowy bufor
 8002674:	4630      	mov	r0, r6
 8002676:	f00c fc6b 	bl	800ef50 <malloc>
      memcpy(mptr, Sim80x.GPRS.ReceiveDataBuf, Sim80x.GPRS.ReceiveDataLen);     // skopiuj dane IPD do tymczasowego
 800267a:	4632      	mov	r2, r6
 800267c:	4924      	ldr	r1, [pc, #144]	@ (8002710 <StartSim80xTask+0x1b8>)
      char *mptr = malloc(Sim80x.GPRS.ReceiveDataLen);                          // tymczasowy bufor
 800267e:	4682      	mov	sl, r0
      memcpy(mptr, Sim80x.GPRS.ReceiveDataBuf, Sim80x.GPRS.ReceiveDataLen);     // skopiuj dane IPD do tymczasowego
 8002680:	f00e fe4a 	bl	8011318 <memcpy>
      Sim80x.GPRS.ReceiveDataLen = 0;                                           // zaznacz ze odebrano dane
 8002684:	2300      	movs	r3, #0
      if(_SIM80X_DEBUG) printf("Sending IPD data to app\r\n");
 8002686:	4823      	ldr	r0, [pc, #140]	@ (8002714 <StartSim80xTask+0x1bc>)
      Sim80x.GPRS.ReceiveDataLen = 0;                                           // zaznacz ze odebrano dane
 8002688:	f8a4 382e 	strh.w	r3, [r4, #2094]	@ 0x82e
      if(_SIM80X_DEBUG) printf("Sending IPD data to app\r\n");
 800268c:	f00e fbb2 	bl	8010df4 <puts>
      GPRS_UserNewData(mptr, mlen);                                             // interpretacja w trakcie kt�rej mog�
 8002690:	4650      	mov	r0, sl
 8002692:	4631      	mov	r1, r6
 8002694:	f006 f8f0 	bl	8008878 <GPRS_UserNewData>
      free(mptr);                                                               // przyjsc nowe dane i nie zostan� utracone
 8002698:	4650      	mov	r0, sl
 800269a:	f00c fc61 	bl	800ef60 <free>
    for(uint8_t msgnum=0 ;msgnum<sizeof(Sim80x.Gsm.HaveNewMsg) ; msgnum++)
 800269e:	e783      	b.n	80025a8 <StartSim80xTask+0x50>
      TimeForSlowRunGPRS=HAL_GetTick();
 80026a0:	f007 fc78 	bl	8009f94 <HAL_GetTick>
 80026a4:	4680      	mov	r8, r0
 80026a6:	e77b      	b.n	80025a0 <StartSim80xTask+0x48>
      if(Gsm_MsgRead(UnreadMsgCounter)==true) {
 80026a8:	4638      	mov	r0, r7
 80026aa:	f7ff fdb3 	bl	8002214 <Gsm_MsgRead>
 80026ae:	b9b0      	cbnz	r0, 80026de <StartSim80xTask+0x186>
      UnreadMsgCounter++;
 80026b0:	3701      	adds	r7, #1
 80026b2:	b2ff      	uxtb	r7, r7
        UnreadMsgCounter=0;      
 80026b4:	2f96      	cmp	r7, #150	@ 0x96
 80026b6:	bf08      	it	eq
 80026b8:	2700      	moveq	r7, #0
 80026ba:	e78d      	b.n	80025d8 <StartSim80xTask+0x80>
    if(GSM_DTR_READ == 0 && HAL_GetTick() > Sim80x.AtCommand.LowPowerTime && Sim80x.Status.LowPowerMode) {
 80026bc:	f007 fc6a 	bl	8009f94 <HAL_GetTick>
 80026c0:	f8d4 3640 	ldr.w	r3, [r4, #1600]	@ 0x640
 80026c4:	4298      	cmp	r0, r3
 80026c6:	d9b9      	bls.n	800263c <StartSim80xTask+0xe4>
 80026c8:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 80026cc:	069b      	lsls	r3, r3, #26
 80026ce:	d5b5      	bpl.n	800263c <StartSim80xTask+0xe4>
      GSM_DTR_HI;
 80026d0:	2201      	movs	r2, #1
 80026d2:	2120      	movs	r1, #32
 80026d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026d8:	f008 fe4a 	bl	800b370 <HAL_GPIO_WritePin>
 80026dc:	e7ae      	b.n	800263c <StartSim80xTask+0xe4>
        osDelay(100);
 80026de:	2064      	movs	r0, #100	@ 0x64
 80026e0:	f00b fb58 	bl	800dd94 <osDelay>
        Gsm_MsgDelete(UnreadMsgCounter);
 80026e4:	4638      	mov	r0, r7
 80026e6:	f7ff fdd5 	bl	8002294 <Gsm_MsgDelete>
        osDelay(100);
 80026ea:	2064      	movs	r0, #100	@ 0x64
 80026ec:	f00b fb52 	bl	800dd94 <osDelay>
        Gsm_MsgGetMemoryStatus();
 80026f0:	f7ff fd18 	bl	8002124 <Gsm_MsgGetMemoryStatus>
 80026f4:	e7dc      	b.n	80026b0 <StartSim80xTask+0x158>
 80026f6:	bf00      	nop
 80026f8:	08014fc0 	.word	0x08014fc0
 80026fc:	20000230 	.word	0x20000230
 8002700:	20000a0b 	.word	0x20000a0b
 8002704:	08014ff4 	.word	0x08014ff4
 8002708:	08015000 	.word	0x08015000
 800270c:	0801500c 	.word	0x0801500c
 8002710:	20000a60 	.word	0x20000a60
 8002714:	08014fd0 	.word	0x08014fd0
 8002718:	08014fec 	.word	0x08014fec

0800271c <Sim80x_SetPower>:
{ 
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Sim80x.Status.LowPowerMode = 0;
 800271e:	4d3a      	ldr	r5, [pc, #232]	@ (8002808 <Sim80x_SetPower+0xec>)
 8002720:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
 8002724:	f36f 1345 	bfc	r3, #5, #1
 8002728:	f885 3330 	strb.w	r3, [r5, #816]	@ 0x330
  if(TurnOn==true) {
 800272c:	2800      	cmp	r0, #0
 800272e:	d03e      	beq.n	80027ae <Sim80x_SetPower+0x92>
    Sim80x.Status.Busy = 0;
 8002730:	b2d8      	uxtb	r0, r3
 8002732:	f020 0006 	bic.w	r0, r0, #6
 8002736:	f040 0004 	orr.w	r0, r0, #4
 800273a:	f885 0330 	strb.w	r0, [r5, #816]	@ 0x330
    if(Sim80x_SendAtCommand("AT\r\n",200,1,"AT\r\r\nOK\r\n") == 1) {
 800273e:	4b33      	ldr	r3, [pc, #204]	@ (800280c <Sim80x_SetPower+0xf0>)
 8002740:	4833      	ldr	r0, [pc, #204]	@ (8002810 <Sim80x_SetPower+0xf4>)
 8002742:	2201      	movs	r2, #1
 8002744:	21c8      	movs	r1, #200	@ 0xc8
 8002746:	f7ff fe5f 	bl	8002408 <Sim80x_SendAtCommand>
 800274a:	2801      	cmp	r0, #1
 800274c:	d04b      	beq.n	80027e6 <Sim80x_SetPower+0xca>
      HAL_GPIO_WritePin(_SIM80X_POWER_KEY_GPIO,_SIM80X_POWER_KEY_PIN,GPIO_PIN_SET);		// obrotka
 800274e:	2201      	movs	r2, #1
 8002750:	4611      	mov	r1, r2
 8002752:	4830      	ldr	r0, [pc, #192]	@ (8002814 <Sim80x_SetPower+0xf8>)
      while(Sim80x_SendAtCommand("AT\r\n",200,1,"AT\r\r\nOK\r\n") != 1) {if(--retry == 0) break;}
 8002754:	4f2d      	ldr	r7, [pc, #180]	@ (800280c <Sim80x_SetPower+0xf0>)
 8002756:	4e2e      	ldr	r6, [pc, #184]	@ (8002810 <Sim80x_SetPower+0xf4>)
      HAL_GPIO_WritePin(_SIM80X_POWER_KEY_GPIO,_SIM80X_POWER_KEY_PIN,GPIO_PIN_SET);		// obrotka
 8002758:	f008 fe0a 	bl	800b370 <HAL_GPIO_WritePin>
      osDelay(1200);
 800275c:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8002760:	f00b fb18 	bl	800dd94 <osDelay>
      HAL_GPIO_WritePin(_SIM80X_POWER_KEY_GPIO,_SIM80X_POWER_KEY_PIN,GPIO_PIN_RESET);	// obrotka
 8002764:	482b      	ldr	r0, [pc, #172]	@ (8002814 <Sim80x_SetPower+0xf8>)
 8002766:	2200      	movs	r2, #0
 8002768:	2101      	movs	r1, #1
 800276a:	f008 fe01 	bl	800b370 <HAL_GPIO_WritePin>
      osDelay(2500);
 800276e:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8002772:	f00b fb0f 	bl	800dd94 <osDelay>
      Sim80x.Status.Power=1;
 8002776:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
 800277a:	f043 0304 	orr.w	r3, r3, #4
 800277e:	f885 3330 	strb.w	r3, [r5, #816]	@ 0x330
      uint8_t retry = 10;
 8002782:	240a      	movs	r4, #10
      while(Sim80x_SendAtCommand("AT\r\n",200,1,"AT\r\r\nOK\r\n") != 1) {if(--retry == 0) break;}
 8002784:	463b      	mov	r3, r7
 8002786:	2201      	movs	r2, #1
 8002788:	21c8      	movs	r1, #200	@ 0xc8
 800278a:	4630      	mov	r0, r6
 800278c:	f7ff fe3c 	bl	8002408 <Sim80x_SendAtCommand>
 8002790:	2801      	cmp	r0, #1
 8002792:	f104 33ff 	add.w	r3, r4, #4294967295
 8002796:	d035      	beq.n	8002804 <Sim80x_SetPower+0xe8>
 8002798:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 800279c:	d1f2      	bne.n	8002784 <Sim80x_SetPower+0x68>
        Sim80x.Status.Power=0;
 800279e:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
 80027a2:	f364 0382 	bfi	r3, r4, #2, #1
 80027a6:	f885 3330 	strb.w	r3, [r5, #816]	@ 0x330
  return true;
 80027aa:	2001      	movs	r0, #1
}
 80027ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Sim80x_SendAtCommand("AT\r\n",200,1,"AT\r\r\nOK\r\n") == 1) {
 80027ae:	4b17      	ldr	r3, [pc, #92]	@ (800280c <Sim80x_SetPower+0xf0>)
 80027b0:	4604      	mov	r4, r0
 80027b2:	2201      	movs	r2, #1
 80027b4:	4816      	ldr	r0, [pc, #88]	@ (8002810 <Sim80x_SetPower+0xf4>)
 80027b6:	21c8      	movs	r1, #200	@ 0xc8
 80027b8:	f7ff fe26 	bl	8002408 <Sim80x_SendAtCommand>
 80027bc:	2801      	cmp	r0, #1
 80027be:	4606      	mov	r6, r0
 80027c0:	d1f3      	bne.n	80027aa <Sim80x_SetPower+0x8e>
      if(_SIM80X_DEBUG) printf("\r\nSim80x_SetPower(OFF) ---> OK\r\n");
 80027c2:	4815      	ldr	r0, [pc, #84]	@ (8002818 <Sim80x_SetPower+0xfc>)
 80027c4:	f00e fb16 	bl	8010df4 <puts>
      Sim80x.Status.Power=0;
 80027c8:	f895 1330 	ldrb.w	r1, [r5, #816]	@ 0x330
      Sim80x_SendAtCommand("AT+CPOWD=1\r\n",2000,1,"\r\nOK\r\n");
 80027cc:	4b13      	ldr	r3, [pc, #76]	@ (800281c <Sim80x_SetPower+0x100>)
 80027ce:	4814      	ldr	r0, [pc, #80]	@ (8002820 <Sim80x_SetPower+0x104>)
      Sim80x.Status.Power=0;
 80027d0:	f364 0182 	bfi	r1, r4, #2, #1
 80027d4:	f885 1330 	strb.w	r1, [r5, #816]	@ 0x330
      Sim80x_SendAtCommand("AT+CPOWD=1\r\n",2000,1,"\r\nOK\r\n");
 80027d8:	4632      	mov	r2, r6
 80027da:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80027de:	f7ff fe13 	bl	8002408 <Sim80x_SendAtCommand>
  return true;
 80027e2:	2001      	movs	r0, #1
 80027e4:	e7e2      	b.n	80027ac <Sim80x_SetPower+0x90>
      osDelay(100);
 80027e6:	2064      	movs	r0, #100	@ 0x64
        osDelay(200);
 80027e8:	f00b fad4 	bl	800dd94 <osDelay>
        if(_SIM80X_DEBUG) printf("\r\nSim80x_SetPower(ON) ---> OK\r\n");
 80027ec:	480d      	ldr	r0, [pc, #52]	@ (8002824 <Sim80x_SetPower+0x108>)
 80027ee:	f00e fb01 	bl	8010df4 <puts>
        bool stat = Sim80x_InitValue();
 80027f2:	f000 f819 	bl	8002828 <Sim80x_InitValue>
        Sim80x.Status.Power=1;
 80027f6:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	f885 3330 	strb.w	r3, [r5, #816]	@ 0x330
}
 8002802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        osDelay(200);
 8002804:	20c8      	movs	r0, #200	@ 0xc8
 8002806:	e7ef      	b.n	80027e8 <Sim80x_SetPower+0xcc>
 8002808:	20000230 	.word	0x20000230
 800280c:	08015050 	.word	0x08015050
 8002810:	0801505c 	.word	0x0801505c
 8002814:	48000400 	.word	0x48000400
 8002818:	08015084 	.word	0x08015084
 800281c:	080153cc 	.word	0x080153cc
 8002820:	080150a4 	.word	0x080150a4
 8002824:	08015064 	.word	0x08015064

08002828 <Sim80x_InitValue>:
{
 8002828:	b510      	push	{r4, lr}
  Sim80x_SendAtCommand("ATE1\r\n",200,1,"ATE1\r\r\nOK\r\n");
 800282a:	4b44      	ldr	r3, [pc, #272]	@ (800293c <Sim80x_InitValue+0x114>)
 800282c:	4844      	ldr	r0, [pc, #272]	@ (8002940 <Sim80x_InitValue+0x118>)
{
 800282e:	b082      	sub	sp, #8
  Sim80x_SendAtCommand("ATE1\r\n",200,1,"ATE1\r\r\nOK\r\n");
 8002830:	2201      	movs	r2, #1
 8002832:	21c8      	movs	r1, #200	@ 0xc8
 8002834:	f7ff fde8 	bl	8002408 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+COLP=1\r\n",200,1,"AT+COLP=1\r\r\nOK\r\n");
 8002838:	4b42      	ldr	r3, [pc, #264]	@ (8002944 <Sim80x_InitValue+0x11c>)
 800283a:	4843      	ldr	r0, [pc, #268]	@ (8002948 <Sim80x_InitValue+0x120>)
 800283c:	2201      	movs	r2, #1
 800283e:	21c8      	movs	r1, #200	@ 0xc8
 8002840:	f7ff fde2 	bl	8002408 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+CLIP=1\r\n",200,1,"AT+CLIP=1\r\r\nOK\r\n");
 8002844:	4b41      	ldr	r3, [pc, #260]	@ (800294c <Sim80x_InitValue+0x124>)
 8002846:	4842      	ldr	r0, [pc, #264]	@ (8002950 <Sim80x_InitValue+0x128>)
 8002848:	2201      	movs	r2, #1
 800284a:	21c8      	movs	r1, #200	@ 0xc8
 800284c:	f7ff fddc 	bl	8002408 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+FSHEX=0\r\n",200,1,"AT+FSHEX=0\r\r\nOK\r\n");
 8002850:	4b40      	ldr	r3, [pc, #256]	@ (8002954 <Sim80x_InitValue+0x12c>)
 8002852:	4841      	ldr	r0, [pc, #260]	@ (8002958 <Sim80x_InitValue+0x130>)
 8002854:	2201      	movs	r2, #1
 8002856:	21c8      	movs	r1, #200	@ 0xc8
 8002858:	f7ff fdd6 	bl	8002408 <Sim80x_SendAtCommand>
  if(Sim80x_SendAtCommand("AT+CLTS?\r\n",200,2,"\r\n+CLTS: 0\r\n","\r\n+CLTS: 1\r\n") == 1) {
 800285c:	4a3f      	ldr	r2, [pc, #252]	@ (800295c <Sim80x_InitValue+0x134>)
 800285e:	9200      	str	r2, [sp, #0]
 8002860:	4b3f      	ldr	r3, [pc, #252]	@ (8002960 <Sim80x_InitValue+0x138>)
 8002862:	4840      	ldr	r0, [pc, #256]	@ (8002964 <Sim80x_InitValue+0x13c>)
 8002864:	2202      	movs	r2, #2
 8002866:	21c8      	movs	r1, #200	@ 0xc8
 8002868:	f7ff fdce 	bl	8002408 <Sim80x_SendAtCommand>
 800286c:	2801      	cmp	r0, #1
 800286e:	d04e      	beq.n	800290e <Sim80x_InitValue+0xe6>
  Sim80x_SendAtCommand("AT+CREG=1\r\n",200,1,"AT+CREG=1\r\r\nOK\r\n");
 8002870:	4b3d      	ldr	r3, [pc, #244]	@ (8002968 <Sim80x_InitValue+0x140>)
 8002872:	483e      	ldr	r0, [pc, #248]	@ (800296c <Sim80x_InitValue+0x144>)
  if(Sim80x.Gsm.MsgFormat != GsmMsgFormat_Text)
 8002874:	4c3e      	ldr	r4, [pc, #248]	@ (8002970 <Sim80x_InitValue+0x148>)
  Sim80x_SendAtCommand("AT+CREG=1\r\n",200,1,"AT+CREG=1\r\r\nOK\r\n");
 8002876:	2201      	movs	r2, #1
 8002878:	21c8      	movs	r1, #200	@ 0xc8
 800287a:	f7ff fdc5 	bl	8002408 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+CGNSURC=0\r\n",200,1,"\r\nOK\r\n");
 800287e:	4b3d      	ldr	r3, [pc, #244]	@ (8002974 <Sim80x_InitValue+0x14c>)
 8002880:	483d      	ldr	r0, [pc, #244]	@ (8002978 <Sim80x_InitValue+0x150>)
 8002882:	2201      	movs	r2, #1
 8002884:	21c8      	movs	r1, #200	@ 0xc8
 8002886:	f7ff fdbf 	bl	8002408 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+CGNSPWR=1\r\n",1000,1,"\r\nOK\r\n");
 800288a:	4b3a      	ldr	r3, [pc, #232]	@ (8002974 <Sim80x_InitValue+0x14c>)
 800288c:	483b      	ldr	r0, [pc, #236]	@ (800297c <Sim80x_InitValue+0x154>)
 800288e:	2201      	movs	r2, #1
 8002890:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002894:	f7ff fdb8 	bl	8002408 <Sim80x_SendAtCommand>
  Gsm_MsgSetMemoryLocation(GsmMsgMemory_OnModule);
 8002898:	2002      	movs	r0, #2
 800289a:	f7ff fc65 	bl	8002168 <Gsm_MsgSetMemoryLocation>
  Gsm_MsgSetFormat(GsmMsgFormat_Text);
 800289e:	2002      	movs	r0, #2
 80028a0:	f7ff fc0a 	bl	80020b8 <Gsm_MsgSetFormat>
  Gsm_MsgSetTextModeParameter(17,167,0,0);
 80028a4:	2300      	movs	r3, #0
 80028a6:	461a      	mov	r2, r3
 80028a8:	21a7      	movs	r1, #167	@ 0xa7
 80028aa:	2011      	movs	r0, #17
 80028ac:	f7ff fd46 	bl	800233c <Gsm_MsgSetTextModeParameter>
  Gsm_MsgGetCharacterFormat();
 80028b0:	f7ff fc84 	bl	80021bc <Gsm_MsgGetCharacterFormat>
  Gsm_MsgGetFormat();
 80028b4:	f7ff fbde 	bl	8002074 <Gsm_MsgGetFormat>
  if(Sim80x.Gsm.MsgFormat != GsmMsgFormat_Text)
 80028b8:	f894 37d9 	ldrb.w	r3, [r4, #2009]	@ 0x7d9
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d122      	bne.n	8002906 <Sim80x_InitValue+0xde>
  Gsm_MsgGetServiceNumber();
 80028c0:	f7ff fd10 	bl	80022e4 <Gsm_MsgGetServiceNumber>
  Gsm_MsgGetTextModeParameter();
 80028c4:	f7ff fd28 	bl	8002318 <Gsm_MsgGetTextModeParameter>
  Sim80x.Status.LowPowerMode = 1;
 80028c8:	f894 1330 	ldrb.w	r1, [r4, #816]	@ 0x330
  Sim80x_SendAtCommand("AT+CSCLK=1\r\n",500,2,"\r\nOK\r\n","\r\nERROR\r\n");
 80028cc:	482c      	ldr	r0, [pc, #176]	@ (8002980 <Sim80x_InitValue+0x158>)
 80028ce:	9000      	str	r0, [sp, #0]
  Sim80x.Status.LowPowerMode = 1;
 80028d0:	f041 0120 	orr.w	r1, r1, #32
 80028d4:	f884 1330 	strb.w	r1, [r4, #816]	@ 0x330
  Sim80x_SendAtCommand("AT+CSCLK=1\r\n",500,2,"\r\nOK\r\n","\r\nERROR\r\n");
 80028d8:	4b26      	ldr	r3, [pc, #152]	@ (8002974 <Sim80x_InitValue+0x14c>)
 80028da:	482a      	ldr	r0, [pc, #168]	@ (8002984 <Sim80x_InitValue+0x15c>)
 80028dc:	2202      	movs	r2, #2
 80028de:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80028e2:	f7ff fd91 	bl	8002408 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+CREG?\r\n",200,1,"\r\n+CREG:");
 80028e6:	4b28      	ldr	r3, [pc, #160]	@ (8002988 <Sim80x_InitValue+0x160>)
 80028e8:	4828      	ldr	r0, [pc, #160]	@ (800298c <Sim80x_InitValue+0x164>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	21c8      	movs	r1, #200	@ 0xc8
 80028ee:	f7ff fd8b 	bl	8002408 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+CGNSPWR=0\r\n",500,1,"\r\nOK\r\n");
 80028f2:	4b20      	ldr	r3, [pc, #128]	@ (8002974 <Sim80x_InitValue+0x14c>)
 80028f4:	4826      	ldr	r0, [pc, #152]	@ (8002990 <Sim80x_InitValue+0x168>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80028fc:	f7ff fd84 	bl	8002408 <Sim80x_SendAtCommand>
  return true;
 8002900:	2001      	movs	r0, #1
}
 8002902:	b002      	add	sp, #8
 8002904:	bd10      	pop	{r4, pc}
    Gsm_MsgSetFormat(GsmMsgFormat_Text);
 8002906:	2002      	movs	r0, #2
 8002908:	f7ff fbd6 	bl	80020b8 <Gsm_MsgSetFormat>
 800290c:	e7d8      	b.n	80028c0 <Sim80x_InitValue+0x98>
 800290e:	4604      	mov	r4, r0
	  Sim80x_SendAtCommand("AT+CLTS=1\r\n",200,1,"AT+CLTS=1\r\r\nOK\r\n");
 8002910:	4602      	mov	r2, r0
 8002912:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <Sim80x_InitValue+0x16c>)
 8002914:	4820      	ldr	r0, [pc, #128]	@ (8002998 <Sim80x_InitValue+0x170>)
 8002916:	21c8      	movs	r1, #200	@ 0xc8
 8002918:	f7ff fd76 	bl	8002408 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT&W\r\n",1000,1,"AT&W\r\r\nOK\r\n");
 800291c:	4b1f      	ldr	r3, [pc, #124]	@ (800299c <Sim80x_InitValue+0x174>)
 800291e:	4820      	ldr	r0, [pc, #128]	@ (80029a0 <Sim80x_InitValue+0x178>)
 8002920:	4622      	mov	r2, r4
 8002922:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002926:	f7ff fd6f 	bl	8002408 <Sim80x_SendAtCommand>
  if(_SIM80X_DEBUG) printf("\r\nSim80x_SaveParameters() ---> OK\r\n");
 800292a:	481e      	ldr	r0, [pc, #120]	@ (80029a4 <Sim80x_InitValue+0x17c>)
 800292c:	f00e fa62 	bl	8010df4 <puts>
	  Sim80x_SetPower(0);
 8002930:	2000      	movs	r0, #0
 8002932:	f7ff fef3 	bl	800271c <Sim80x_SetPower>
	  return false;
 8002936:	2000      	movs	r0, #0
}
 8002938:	b002      	add	sp, #8
 800293a:	bd10      	pop	{r4, pc}
 800293c:	080150b4 	.word	0x080150b4
 8002940:	080150c0 	.word	0x080150c0
 8002944:	080150c8 	.word	0x080150c8
 8002948:	080150dc 	.word	0x080150dc
 800294c:	080150e8 	.word	0x080150e8
 8002950:	080150fc 	.word	0x080150fc
 8002954:	08015108 	.word	0x08015108
 8002958:	0801511c 	.word	0x0801511c
 800295c:	08015148 	.word	0x08015148
 8002960:	0801512c 	.word	0x0801512c
 8002964:	0801513c 	.word	0x0801513c
 8002968:	08015178 	.word	0x08015178
 800296c:	0801518c 	.word	0x0801518c
 8002970:	20000230 	.word	0x20000230
 8002974:	080153cc 	.word	0x080153cc
 8002978:	08015198 	.word	0x08015198
 800297c:	08014c50 	.word	0x08014c50
 8002980:	0801472c 	.word	0x0801472c
 8002984:	080151a8 	.word	0x080151a8
 8002988:	08015000 	.word	0x08015000
 800298c:	0801500c 	.word	0x0801500c
 8002990:	08014cbc 	.word	0x08014cbc
 8002994:	08015158 	.word	0x08015158
 8002998:	0801516c 	.word	0x0801516c
 800299c:	08015018 	.word	0x08015018
 80029a0:	08015024 	.word	0x08015024
 80029a4:	0801502c 	.word	0x0801502c

080029a8 <Sim80x_GetTime>:
  if(!Sim80x.Status.Power) return false;
 80029a8:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <Sim80x_GetTime+0x44>)
 80029aa:	f893 3330 	ldrb.w	r3, [r3, #816]	@ 0x330
 80029ae:	075b      	lsls	r3, r3, #29
 80029b0:	d401      	bmi.n	80029b6 <Sim80x_GetTime+0xe>
 80029b2:	2000      	movs	r0, #0
}
 80029b4:	4770      	bx	lr
{
 80029b6:	b510      	push	{r4, lr}
 80029b8:	b082      	sub	sp, #8
  answer=Sim80x_SendAtCommand("AT+CCLK?\r\n",1000,2,"\r\nOK\r\n","\r\n+CME ERROR:");
 80029ba:	4a0d      	ldr	r2, [pc, #52]	@ (80029f0 <Sim80x_GetTime+0x48>)
 80029bc:	9200      	str	r2, [sp, #0]
 80029be:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <Sim80x_GetTime+0x4c>)
 80029c0:	480d      	ldr	r0, [pc, #52]	@ (80029f8 <Sim80x_GetTime+0x50>)
 80029c2:	2202      	movs	r2, #2
 80029c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80029c8:	f7ff fd1e 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer==1) {
 80029cc:	2801      	cmp	r0, #1
  answer=Sim80x_SendAtCommand("AT+CCLK?\r\n",1000,2,"\r\nOK\r\n","\r\n+CME ERROR:");
 80029ce:	4604      	mov	r4, r0
  if(answer==1) {
 80029d0:	d005      	beq.n	80029de <Sim80x_GetTime+0x36>
    if(_SIM80X_DEBUG) printf("\r\nSim80x_GetTime() <--- ERROR\r\n");
 80029d2:	480a      	ldr	r0, [pc, #40]	@ (80029fc <Sim80x_GetTime+0x54>)
 80029d4:	f00e fa0e 	bl	8010df4 <puts>
  if(!Sim80x.Status.Power) return false;
 80029d8:	2000      	movs	r0, #0
}
 80029da:	b002      	add	sp, #8
 80029dc:	bd10      	pop	{r4, pc}
    if(_SIM80X_DEBUG) printf("\r\nSim80x_GetTime <--- OK\r\n");
 80029de:	4808      	ldr	r0, [pc, #32]	@ (8002a00 <Sim80x_GetTime+0x58>)
 80029e0:	f00e fa08 	bl	8010df4 <puts>
    return true;
 80029e4:	4620      	mov	r0, r4
}
 80029e6:	b002      	add	sp, #8
 80029e8:	bd10      	pop	{r4, pc}
 80029ea:	bf00      	nop
 80029ec:	20000230 	.word	0x20000230
 80029f0:	080151c4 	.word	0x080151c4
 80029f4:	080153cc 	.word	0x080153cc
 80029f8:	080151b8 	.word	0x080151b8
 80029fc:	080151f0 	.word	0x080151f0
 8002a00:	080151d4 	.word	0x080151d4

08002a04 <Sim80x_SetTime>:
{
 8002a04:	b510      	push	{r4, lr}
  if(Sim80x.Gsm.Time.Zone < 0) ts = '-';
 8002a06:	4a1f      	ldr	r2, [pc, #124]	@ (8002a84 <Sim80x_SetTime+0x80>)
 8002a08:	f992 1656 	ldrsb.w	r1, [r2, #1622]	@ 0x656
		  Sim80x.Gsm.Time.Year-2000, Sim80x.Gsm.Time.Month, Sim80x.Gsm.Time.Day,
 8002a0c:	f8b2 364e 	ldrh.w	r3, [r2, #1614]	@ 0x64e
  if(Sim80x.Gsm.Time.Zone < 0) ts = '-';
 8002a10:	2900      	cmp	r1, #0
 8002a12:	bfac      	ite	ge
 8002a14:	202b      	movge	r0, #43	@ 0x2b
 8002a16:	202d      	movlt	r0, #45	@ 0x2d
		  Sim80x.Gsm.Time.Hour, Sim80x.Gsm.Time.Min, Sim80x.Gsm.Time.Sec, ts, abs(Sim80x.Gsm.Time.Zone));
 8002a18:	2900      	cmp	r1, #0
{
 8002a1a:	b092      	sub	sp, #72	@ 0x48
		  Sim80x.Gsm.Time.Hour, Sim80x.Gsm.Time.Min, Sim80x.Gsm.Time.Sec, ts, abs(Sim80x.Gsm.Time.Zone));
 8002a1c:	bfb8      	it	lt
 8002a1e:	4249      	neglt	r1, r1
  snprintf(str,sizeof(str),"AT+CCLK=\"%02u/%02u/%02u,%02u:%02u:%02u%c%02u\"\r\n",
 8002a20:	b2c9      	uxtb	r1, r1
 8002a22:	9106      	str	r1, [sp, #24]
 8002a24:	f892 1655 	ldrb.w	r1, [r2, #1621]	@ 0x655
 8002a28:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8002a2c:	f892 0654 	ldrb.w	r0, [r2, #1620]	@ 0x654
 8002a30:	f892 1653 	ldrb.w	r1, [r2, #1619]	@ 0x653
 8002a34:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8002a38:	f892 0652 	ldrb.w	r0, [r2, #1618]	@ 0x652
 8002a3c:	f892 1650 	ldrb.w	r1, [r2, #1616]	@ 0x650
 8002a40:	4a11      	ldr	r2, [pc, #68]	@ (8002a88 <Sim80x_SetTime+0x84>)
 8002a42:	e9cd 1000 	strd	r1, r0, [sp]
 8002a46:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8002a4a:	2128      	movs	r1, #40	@ 0x28
 8002a4c:	a808      	add	r0, sp, #32
 8002a4e:	f00e f9d9 	bl	8010e04 <sniprintf>
  answer=Sim80x_SendAtCommand(str,2000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8002a52:	4a0e      	ldr	r2, [pc, #56]	@ (8002a8c <Sim80x_SetTime+0x88>)
 8002a54:	9200      	str	r2, [sp, #0]
 8002a56:	4b0e      	ldr	r3, [pc, #56]	@ (8002a90 <Sim80x_SetTime+0x8c>)
 8002a58:	2202      	movs	r2, #2
 8002a5a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002a5e:	a808      	add	r0, sp, #32
 8002a60:	f7ff fcd2 	bl	8002408 <Sim80x_SendAtCommand>
  if(answer==1) {
 8002a64:	2801      	cmp	r0, #1
 8002a66:	d005      	beq.n	8002a74 <Sim80x_SetTime+0x70>
    if(_SIM80X_DEBUG) printf("\r\nSim80x_SetTime ---> ERROR\r\n");
 8002a68:	480a      	ldr	r0, [pc, #40]	@ (8002a94 <Sim80x_SetTime+0x90>)
 8002a6a:	f00e f9c3 	bl	8010df4 <puts>
    return false;
 8002a6e:	2000      	movs	r0, #0
}
 8002a70:	b012      	add	sp, #72	@ 0x48
 8002a72:	bd10      	pop	{r4, pc}
 8002a74:	4604      	mov	r4, r0
    if(_SIM80X_DEBUG) printf("\r\nSim80x_SetTime ---> OK\r\n");
 8002a76:	4808      	ldr	r0, [pc, #32]	@ (8002a98 <Sim80x_SetTime+0x94>)
 8002a78:	f00e f9bc 	bl	8010df4 <puts>
    return true;
 8002a7c:	4620      	mov	r0, r4
}
 8002a7e:	b012      	add	sp, #72	@ 0x48
 8002a80:	bd10      	pop	{r4, pc}
 8002a82:	bf00      	nop
 8002a84:	20000230 	.word	0x20000230
 8002a88:	08015210 	.word	0x08015210
 8002a8c:	0801472c 	.word	0x0801472c
 8002a90:	080153cc 	.word	0x080153cc
 8002a94:	0801525c 	.word	0x0801525c
 8002a98:	08015240 	.word	0x08015240

08002a9c <Sim80x_Init>:
{
 8002a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(&Sim80x,0,sizeof(Sim80x));
 8002a9e:	4c23      	ldr	r4, [pc, #140]	@ (8002b2c <Sim80x_Init+0x90>)
{
 8002aa0:	b08d      	sub	sp, #52	@ 0x34
  memset(&Sim80x,0,sizeof(Sim80x));
 8002aa2:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
{
 8002aa6:	4606      	mov	r6, r0
  memset(&Sim80x,0,sizeof(Sim80x));
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f00e fb02 	bl	80110b4 <memset>
  osThreadDef(Sim80xTask, StartSim80xTask, Priority, 0, 512);
 8002ab0:	2500      	movs	r5, #0
 8002ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b30 <Sim80x_Init+0x94>)
 8002ab4:	9300      	str	r3, [sp, #0]
  Sim80xTaskHandle = osThreadCreate(osThread(Sim80xTask), NULL);
 8002ab6:	4629      	mov	r1, r5
  osThreadDef(Sim80xTask, StartSim80xTask, Priority, 0, 512);
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <Sim80x_Init+0x98>)
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	f44f 7700 	mov.w	r7, #512	@ 0x200
  Sim80xTaskHandle = osThreadCreate(osThread(Sim80xTask), NULL);
 8002ac0:	4668      	mov	r0, sp
  osThreadDef(Sim80xTask, StartSim80xTask, Priority, 0, 512);
 8002ac2:	e9cd 5703 	strd	r5, r7, [sp, #12]
 8002ac6:	f8ad 6008 	strh.w	r6, [sp, #8]
  Sim80xTaskHandle = osThreadCreate(osThread(Sim80xTask), NULL);
 8002aca:	f00b f947 	bl	800dd5c <osThreadCreate>
 8002ace:	4b1a      	ldr	r3, [pc, #104]	@ (8002b38 <Sim80x_Init+0x9c>)
 8002ad0:	6018      	str	r0, [r3, #0]
  osDelay(10);
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	f00b f95e 	bl	800dd94 <osDelay>
  osThreadDef(Sim80xBuffTask, StartSim80xBuffTask, Priority, 0, 512);
 8002ad8:	4b18      	ldr	r3, [pc, #96]	@ (8002b3c <Sim80x_Init+0xa0>)
 8002ada:	9306      	str	r3, [sp, #24]
  Sim80xBuffTaskHandle = osThreadCreate(osThread(Sim80xBuffTask), NULL);
 8002adc:	4629      	mov	r1, r5
  osThreadDef(Sim80xBuffTask, StartSim80xBuffTask, Priority, 0, 512);
 8002ade:	4b18      	ldr	r3, [pc, #96]	@ (8002b40 <Sim80x_Init+0xa4>)
 8002ae0:	9307      	str	r3, [sp, #28]
  Sim80xBuffTaskHandle = osThreadCreate(osThread(Sim80xBuffTask), NULL);
 8002ae2:	a806      	add	r0, sp, #24
  osThreadDef(Sim80xBuffTask, StartSim80xBuffTask, Priority, 0, 512);
 8002ae4:	9509      	str	r5, [sp, #36]	@ 0x24
 8002ae6:	f8ad 6020 	strh.w	r6, [sp, #32]
 8002aea:	970a      	str	r7, [sp, #40]	@ 0x28
  Sim80xBuffTaskHandle = osThreadCreate(osThread(Sim80xBuffTask), NULL);
 8002aec:	f00b f936 	bl	800dd5c <osThreadCreate>
 8002af0:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <Sim80x_Init+0xa8>)
 8002af2:	4602      	mov	r2, r0
  Sim80x.Gsm.Time.Month = 1;
 8002af4:	2501      	movs	r5, #1
  osDelay(10);
 8002af6:	200a      	movs	r0, #10
  Sim80xBuffTaskHandle = osThreadCreate(osThread(Sim80xBuffTask), NULL);
 8002af8:	601a      	str	r2, [r3, #0]
  osDelay(10);
 8002afa:	f00b f94b 	bl	800dd94 <osDelay>
  Sim80x.Gsm.Time.Year  = 2024;
 8002afe:	f44f 63fd 	mov.w	r3, #2024	@ 0x7e8
  if(!Sim80x_SetPower(true)) Sim80x_SetPower(true); 	//ponowne odpalenie po restarcie
 8002b02:	4628      	mov	r0, r5
  Sim80x.Gsm.Time.Year  = 2024;
 8002b04:	f8a4 364e 	strh.w	r3, [r4, #1614]	@ 0x64e
  Sim80x.Gsm.Time.Month = 1;
 8002b08:	f884 5650 	strb.w	r5, [r4, #1616]	@ 0x650
  Sim80x.Gsm.Time.Day	= 1;
 8002b0c:	f884 5652 	strb.w	r5, [r4, #1618]	@ 0x652
  if(!Sim80x_SetPower(true)) Sim80x_SetPower(true); 	//ponowne odpalenie po restarcie
 8002b10:	f7ff fe04 	bl	800271c <Sim80x_SetPower>
 8002b14:	b118      	cbz	r0, 8002b1e <Sim80x_Init+0x82>
  GPRS_DeactivatePDPContext();						// GPRS disconnect
 8002b16:	f7fe ff55 	bl	80019c4 <GPRS_DeactivatePDPContext>
}
 8002b1a:	b00d      	add	sp, #52	@ 0x34
 8002b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(!Sim80x_SetPower(true)) Sim80x_SetPower(true); 	//ponowne odpalenie po restarcie
 8002b1e:	4628      	mov	r0, r5
 8002b20:	f7ff fdfc 	bl	800271c <Sim80x_SetPower>
  GPRS_DeactivatePDPContext();						// GPRS disconnect
 8002b24:	f7fe ff4e 	bl	80019c4 <GPRS_DeactivatePDPContext>
}
 8002b28:	b00d      	add	sp, #52	@ 0x34
 8002b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b2c:	20000230 	.word	0x20000230
 8002b30:	0801527c 	.word	0x0801527c
 8002b34:	08002559 	.word	0x08002559
 8002b38:	2000022c 	.word	0x2000022c
 8002b3c:	08015288 	.word	0x08015288
 8002b40:	08003421 	.word	0x08003421
 8002b44:	20000228 	.word	0x20000228

08002b48 <Sim80x_BufferProcess>:
{
 8002b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b4c:	ed2d 8b02 	vpush	{d8}
  str1 = strstr(strStart,"\r\n+CREG:");
 8002b50:	4ec0      	ldr	r6, [pc, #768]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002b52:	49c1      	ldr	r1, [pc, #772]	@ (8002e58 <Sim80x_BufferProcess+0x310>)
{
 8002b54:	b088      	sub	sp, #32
  str1 = strstr(strStart,"\r\n+CREG:");
 8002b56:	4630      	mov	r0, r6
 8002b58:	f00e fae6 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	f000 82ea 	beq.w	8003136 <Sim80x_BufferProcess+0x5ee>
    str1 = strchr(str1,',');
 8002b62:	212c      	movs	r1, #44	@ 0x2c
 8002b64:	f00e faae 	bl	80110c4 <strchr>
    if(atoi(str1)==1)
 8002b68:	3001      	adds	r0, #1
 8002b6a:	f00c f9ec 	bl	800ef46 <atoi>
      Sim80x.Status.RegisterdToNetwork=1;
 8002b6e:	f896 332d 	ldrb.w	r3, [r6, #813]	@ 0x32d
    if(atoi(str1)==1)
 8002b72:	2801      	cmp	r0, #1
      Sim80x.Status.RegisterdToNetwork=1;
 8002b74:	f1a6 0403 	sub.w	r4, r6, #3
 8002b78:	bf0c      	ite	eq
 8002b7a:	f043 0301 	orreq.w	r3, r3, #1
      Sim80x.Status.RegisterdToNetwork=0;
 8002b7e:	f36f 0300 	bfcne	r3, #0, #1
 8002b82:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
  str1 = strstr(strStart,"\r\nCall Ready\r\n");
 8002b86:	49b5      	ldr	r1, [pc, #724]	@ (8002e5c <Sim80x_BufferProcess+0x314>)
 8002b88:	48b2      	ldr	r0, [pc, #712]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002b8a:	f00e facd 	bl	8011128 <strstr>
  if(str1!=NULL)
 8002b8e:	b128      	cbz	r0, 8002b9c <Sim80x_BufferProcess+0x54>
    Sim80x.Status.CallReady=1;  
 8002b90:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8002b94:	f043 0310 	orr.w	r3, r3, #16
 8002b98:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
  str1 = strstr(strStart,"\r\nSMS Ready\r\n");
 8002b9c:	49b0      	ldr	r1, [pc, #704]	@ (8002e60 <Sim80x_BufferProcess+0x318>)
 8002b9e:	48ad      	ldr	r0, [pc, #692]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002ba0:	f00e fac2 	bl	8011128 <strstr>
  if(str1!=NULL)
 8002ba4:	b128      	cbz	r0, 8002bb2 <Sim80x_BufferProcess+0x6a>
    Sim80x.Status.SmsReady=1;  
 8002ba6:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
  str1 = strstr(strStart,"\r\n+COLP:");
 8002bb2:	49ac      	ldr	r1, [pc, #688]	@ (8002e64 <Sim80x_BufferProcess+0x31c>)
 8002bb4:	48a7      	ldr	r0, [pc, #668]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002bb6:	f00e fab7 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002bba:	b110      	cbz	r0, 8002bc2 <Sim80x_BufferProcess+0x7a>
    Sim80x.Gsm.GsmVoiceStatus = GsmVoiceStatus_MyCallAnswerd;
 8002bbc:	2307      	movs	r3, #7
 8002bbe:	f884 365a 	strb.w	r3, [r4, #1626]	@ 0x65a
  str1 = strstr(strStart,"\r\n+CLIP:");
 8002bc2:	49a9      	ldr	r1, [pc, #676]	@ (8002e68 <Sim80x_BufferProcess+0x320>)
 8002bc4:	48a3      	ldr	r0, [pc, #652]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002bc6:	f00e faaf 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002bca:	b190      	cbz	r0, 8002bf2 <Sim80x_BufferProcess+0xaa>
    str1 = strchr(str1,'"');
 8002bcc:	2122      	movs	r1, #34	@ 0x22
 8002bce:	f00e fa79 	bl	80110c4 <strchr>
    str1++;
 8002bd2:	1c45      	adds	r5, r0, #1
    str2 = strchr(str1,'"');
 8002bd4:	2122      	movs	r1, #34	@ 0x22
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	f00e fa74 	bl	80110c4 <strchr>
    strncpy(Sim80x.Gsm.CallerNumber,str1,str2-str1);
 8002bdc:	4629      	mov	r1, r5
 8002bde:	1b42      	subs	r2, r0, r5
 8002be0:	48a2      	ldr	r0, [pc, #648]	@ (8002e6c <Sim80x_BufferProcess+0x324>)
 8002be2:	f00e fa8e 	bl	8011102 <strncpy>
    Sim80x.Gsm.HaveNewCall=1;  
 8002be6:	f894 364c 	ldrb.w	r3, [r4, #1612]	@ 0x64c
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	f884 364c 	strb.w	r3, [r4, #1612]	@ 0x64c
  str1 = strstr(strStart,"\r\n+CSQ:");
 8002bf2:	499f      	ldr	r1, [pc, #636]	@ (8002e70 <Sim80x_BufferProcess+0x328>)
 8002bf4:	4897      	ldr	r0, [pc, #604]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002bf6:	f00e fa97 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002bfa:	b138      	cbz	r0, 8002c0c <Sim80x_BufferProcess+0xc4>
    str1 = strchr(str1,':');
 8002bfc:	213a      	movs	r1, #58	@ 0x3a
 8002bfe:	f00e fa61 	bl	80110c4 <strchr>
    Sim80x.Status.Signal = atoi(str1);      
 8002c02:	3001      	adds	r0, #1
 8002c04:	f00c f99f 	bl	800ef46 <atoi>
 8002c08:	f884 0338 	strb.w	r0, [r4, #824]	@ 0x338
  str1 = strstr(strStart,"\r\n+CBC:");
 8002c0c:	4999      	ldr	r1, [pc, #612]	@ (8002e74 <Sim80x_BufferProcess+0x32c>)
 8002c0e:	4891      	ldr	r0, [pc, #580]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002c10:	f00e fa8a 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002c14:	b310      	cbz	r0, 8002c5c <Sim80x_BufferProcess+0x114>
    str1 = strchr(str1,':');
 8002c16:	213a      	movs	r1, #58	@ 0x3a
 8002c18:	f00e fa54 	bl	80110c4 <strchr>
    str1++;
 8002c1c:	1c45      	adds	r5, r0, #1
    tmp_int32_t = atoi(str1);
 8002c1e:	4628      	mov	r0, r5
 8002c20:	f00c f991 	bl	800ef46 <atoi>
    str1 = strchr(str1,',');
 8002c24:	212c      	movs	r1, #44	@ 0x2c
 8002c26:	4628      	mov	r0, r5
 8002c28:	f00e fa4c 	bl	80110c4 <strchr>
    str1++;
 8002c2c:	1c45      	adds	r5, r0, #1
    Sim80x.Status.BatteryPercent = atoi(str1);
 8002c2e:	4628      	mov	r0, r5
 8002c30:	f00c f989 	bl	800ef46 <atoi>
    str1 = strchr(str1,',');
 8002c34:	212c      	movs	r1, #44	@ 0x2c
    Sim80x.Status.BatteryPercent = atoi(str1);
 8002c36:	4603      	mov	r3, r0
    str1 = strchr(str1,',');
 8002c38:	4628      	mov	r0, r5
    Sim80x.Status.BatteryPercent = atoi(str1);
 8002c3a:	f884 3331 	strb.w	r3, [r4, #817]	@ 0x331
    str1 = strchr(str1,',');
 8002c3e:	f00e fa41 	bl	80110c4 <strchr>
    Sim80x.Status.BatteryVoltage = atof(str1)/1000;      
 8002c42:	3001      	adds	r0, #1
 8002c44:	f00c f97c 	bl	800ef40 <atof>
 8002c48:	4b8b      	ldr	r3, [pc, #556]	@ (8002e78 <Sim80x_BufferProcess+0x330>)
 8002c4a:	ec51 0b10 	vmov	r0, r1, d0
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f7fd fe3c 	bl	80008cc <__aeabi_ddiv>
 8002c54:	f7fe f808 	bl	8000c68 <__aeabi_d2f>
 8002c58:	f8c4 0334 	str.w	r0, [r4, #820]	@ 0x334
  str1 = strstr(strStart,"\r\nBUSY\r\n");
 8002c5c:	4987      	ldr	r1, [pc, #540]	@ (8002e7c <Sim80x_BufferProcess+0x334>)
 8002c5e:	487d      	ldr	r0, [pc, #500]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002c60:	f00e fa62 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002c64:	b110      	cbz	r0, 8002c6c <Sim80x_BufferProcess+0x124>
    Sim80x.Gsm.GsmVoiceStatus=GsmVoiceStatus_ReturnBusy;
 8002c66:	2305      	movs	r3, #5
 8002c68:	f884 365a 	strb.w	r3, [r4, #1626]	@ 0x65a
  str1 = strstr(strStart,"\r\nNO DIALTONE\r\n");
 8002c6c:	4984      	ldr	r1, [pc, #528]	@ (8002e80 <Sim80x_BufferProcess+0x338>)
 8002c6e:	4879      	ldr	r0, [pc, #484]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002c70:	f00e fa5a 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002c74:	b110      	cbz	r0, 8002c7c <Sim80x_BufferProcess+0x134>
    Sim80x.Gsm.GsmVoiceStatus=GsmVoiceStatus_ReturnNoDialTone;
 8002c76:	2302      	movs	r3, #2
 8002c78:	f884 365a 	strb.w	r3, [r4, #1626]	@ 0x65a
  str1 = strstr(strStart,"\r\nNO CARRIER\r\n");
 8002c7c:	4981      	ldr	r1, [pc, #516]	@ (8002e84 <Sim80x_BufferProcess+0x33c>)
 8002c7e:	4875      	ldr	r0, [pc, #468]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002c80:	f00e fa52 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002c84:	b110      	cbz	r0, 8002c8c <Sim80x_BufferProcess+0x144>
    Sim80x.Gsm.GsmVoiceStatus=GsmVoiceStatus_ReturnNoCarrier;
 8002c86:	2303      	movs	r3, #3
 8002c88:	f884 365a 	strb.w	r3, [r4, #1626]	@ 0x65a
  str1 = strstr(strStart,"\r\nNO ANSWER\r\n");
 8002c8c:	497e      	ldr	r1, [pc, #504]	@ (8002e88 <Sim80x_BufferProcess+0x340>)
 8002c8e:	4871      	ldr	r0, [pc, #452]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002c90:	f00e fa4a 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002c94:	b110      	cbz	r0, 8002c9c <Sim80x_BufferProcess+0x154>
    Sim80x.Gsm.GsmVoiceStatus=GsmVoiceStatus_ReturnNoAnswer;
 8002c96:	2304      	movs	r3, #4
 8002c98:	f884 365a 	strb.w	r3, [r4, #1626]	@ 0x65a
  str1 = strstr(strStart,"NORMAL POWER DOWN");
 8002c9c:	497b      	ldr	r1, [pc, #492]	@ (8002e8c <Sim80x_BufferProcess+0x344>)
 8002c9e:	486d      	ldr	r0, [pc, #436]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002ca0:	f00e fa42 	bl	8011128 <strstr>
  if(str1!=NULL && Sim80x.Status.Power) {
 8002ca4:	b120      	cbz	r0, 8002cb0 <Sim80x_BufferProcess+0x168>
 8002ca6:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8002caa:	075b      	lsls	r3, r3, #29
 8002cac:	f100 822e 	bmi.w	800310c <Sim80x_BufferProcess+0x5c4>
  str1 = strstr(strStart,"\r\n+CMGS:");
 8002cb0:	4977      	ldr	r1, [pc, #476]	@ (8002e90 <Sim80x_BufferProcess+0x348>)
 8002cb2:	4868      	ldr	r0, [pc, #416]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002cb4:	f00e fa38 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002cb8:	b128      	cbz	r0, 8002cc6 <Sim80x_BufferProcess+0x17e>
    Sim80x.Gsm.MsgSent=1;
 8002cba:	f894 364c 	ldrb.w	r3, [r4, #1612]	@ 0x64c
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	f884 364c 	strb.w	r3, [r4, #1612]	@ 0x64c
  str1 = strstr(strStart,"\r\n+CPMS:");
 8002cc6:	4973      	ldr	r1, [pc, #460]	@ (8002e94 <Sim80x_BufferProcess+0x34c>)
 8002cc8:	4862      	ldr	r0, [pc, #392]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002cca:	f00e fa2d 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002cce:	b1b8      	cbz	r0, 8002d00 <Sim80x_BufferProcess+0x1b8>
    str1 = strchr(str1,':');
 8002cd0:	213a      	movs	r1, #58	@ 0x3a
 8002cd2:	f00e f9f7 	bl	80110c4 <strchr>
    if(*str1 == '"') {
 8002cd6:	7883      	ldrb	r3, [r0, #2]
 8002cd8:	2b22      	cmp	r3, #34	@ 0x22
    str1++;
 8002cda:	f100 0502 	add.w	r5, r0, #2
    if(*str1 == '"') {
 8002cde:	f000 820f 	beq.w	8003100 <Sim80x_BufferProcess+0x5b8>
    Sim80x.Gsm.MsgUsed = atoi(str1);
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f00c f92f 	bl	800ef46 <atoi>
    str1 = strchr(str1,',');
 8002ce8:	212c      	movs	r1, #44	@ 0x2c
    Sim80x.Gsm.MsgUsed = atoi(str1);
 8002cea:	4603      	mov	r3, r0
    str1 = strchr(str1,',');
 8002cec:	4628      	mov	r0, r5
    Sim80x.Gsm.MsgUsed = atoi(str1);
 8002cee:	f884 37db 	strb.w	r3, [r4, #2011]	@ 0x7db
    str1 = strchr(str1,',');
 8002cf2:	f00e f9e7 	bl	80110c4 <strchr>
    Sim80x.Gsm.MsgCapacity = atoi(str1);
 8002cf6:	3001      	adds	r0, #1
 8002cf8:	f00c f925 	bl	800ef46 <atoi>
 8002cfc:	f884 07da 	strb.w	r0, [r4, #2010]	@ 0x7da
  str1 = strstr(strStart,"\r\n+CMGR:");
 8002d00:	4965      	ldr	r1, [pc, #404]	@ (8002e98 <Sim80x_BufferProcess+0x350>)
 8002d02:	4854      	ldr	r0, [pc, #336]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002d04:	f00e fa10 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002d08:	4605      	mov	r5, r0
 8002d0a:	b138      	cbz	r0, 8002d1c <Sim80x_BufferProcess+0x1d4>
    if(Sim80x.Gsm.MsgFormat == GsmMsgFormat_Text) {
 8002d0c:	f894 37d9 	ldrb.w	r3, [r4, #2009]	@ 0x7d9
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	f000 8350 	beq.w	80033b6 <Sim80x_BufferProcess+0x86e>
    }else if(Sim80x.Gsm.MsgFormat == GsmMsgFormat_PDU) {
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	f000 832b 	beq.w	8003372 <Sim80x_BufferProcess+0x82a>
  str1 = strstr(strStart,"\r\n+CNUM:");
 8002d1c:	495f      	ldr	r1, [pc, #380]	@ (8002e9c <Sim80x_BufferProcess+0x354>)
 8002d1e:	484d      	ldr	r0, [pc, #308]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002d20:	f00e fa02 	bl	8011128 <strstr>
   if(str1!=NULL) {
 8002d24:	b160      	cbz	r0, 8002d40 <Sim80x_BufferProcess+0x1f8>
     str1 = strchr(str1,',');
 8002d26:	212c      	movs	r1, #44	@ 0x2c
 8002d28:	f00e f9cc 	bl	80110c4 <strchr>
     str1++;
 8002d2c:	1c85      	adds	r5, r0, #2
     str2 = strchr(str1,'"');
 8002d2e:	2122      	movs	r1, #34	@ 0x22
 8002d30:	4628      	mov	r0, r5
 8002d32:	f00e f9c7 	bl	80110c4 <strchr>
     strncpy(Sim80x.Gsm.MyNumber,str1,str2-str1);
 8002d36:	4629      	mov	r1, r5
 8002d38:	1b42      	subs	r2, r0, r5
 8002d3a:	4859      	ldr	r0, [pc, #356]	@ (8002ea0 <Sim80x_BufferProcess+0x358>)
 8002d3c:	f00e f9e1 	bl	8011102 <strncpy>
  str1 = strstr(strStart,"\r\n+CCLK:");
 8002d40:	4958      	ldr	r1, [pc, #352]	@ (8002ea4 <Sim80x_BufferProcess+0x35c>)
 8002d42:	4844      	ldr	r0, [pc, #272]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002d44:	f00e f9f0 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	d054      	beq.n	8002df6 <Sim80x_BufferProcess+0x2ae>
    str1 = strchr(str1,'"');
 8002d4c:	2122      	movs	r1, #34	@ 0x22
 8002d4e:	f00e f9b9 	bl	80110c4 <strchr>
	strncpy(tmp_str, str1+0, 2);
 8002d52:	2202      	movs	r2, #2
    str1 = strchr(str1,'"');
 8002d54:	4605      	mov	r5, r0
	strncpy(tmp_str, str1+0, 2);
 8002d56:	1c41      	adds	r1, r0, #1
 8002d58:	a803      	add	r0, sp, #12
 8002d5a:	f00e f9d2 	bl	8011102 <strncpy>
	tmp_str[2]=0;
 8002d5e:	2700      	movs	r7, #0
	Sim80x.Gsm.Time.Year = atoi(tmp_str)+2000;	// year
 8002d60:	a803      	add	r0, sp, #12
	tmp_str[2]=0;
 8002d62:	f88d 700e 	strb.w	r7, [sp, #14]
	Sim80x.Gsm.Time.Year = atoi(tmp_str)+2000;	// year
 8002d66:	f00c f8ee 	bl	800ef46 <atoi>
 8002d6a:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
	strncpy(tmp_str, str1+3, 2);
 8002d6e:	2202      	movs	r2, #2
 8002d70:	1d29      	adds	r1, r5, #4
	Sim80x.Gsm.Time.Year = atoi(tmp_str)+2000;	// year
 8002d72:	f8a4 064e 	strh.w	r0, [r4, #1614]	@ 0x64e
	strncpy(tmp_str, str1+3, 2);
 8002d76:	a803      	add	r0, sp, #12
 8002d78:	f00e f9c3 	bl	8011102 <strncpy>
	Sim80x.Gsm.Time.Month = atoi(tmp_str);	// month
 8002d7c:	a803      	add	r0, sp, #12
 8002d7e:	f00c f8e2 	bl	800ef46 <atoi>
	strncpy(tmp_str, str1+6, 2);
 8002d82:	2202      	movs	r2, #2
 8002d84:	1de9      	adds	r1, r5, #7
	Sim80x.Gsm.Time.Month = atoi(tmp_str);	// month
 8002d86:	f884 0650 	strb.w	r0, [r4, #1616]	@ 0x650
	strncpy(tmp_str, str1+6, 2);
 8002d8a:	a803      	add	r0, sp, #12
 8002d8c:	f00e f9b9 	bl	8011102 <strncpy>
	Sim80x.Gsm.Time.Day = atoi(tmp_str);	// day
 8002d90:	a803      	add	r0, sp, #12
 8002d92:	f00c f8d8 	bl	800ef46 <atoi>
	strncpy(tmp_str, str1+9, 2);
 8002d96:	2202      	movs	r2, #2
 8002d98:	f105 010a 	add.w	r1, r5, #10
	Sim80x.Gsm.Time.Day = atoi(tmp_str);	// day
 8002d9c:	f884 0652 	strb.w	r0, [r4, #1618]	@ 0x652
	strncpy(tmp_str, str1+9, 2);
 8002da0:	a803      	add	r0, sp, #12
 8002da2:	f00e f9ae 	bl	8011102 <strncpy>
	Sim80x.Gsm.Time.Hour = atoi(tmp_str);	// hour
 8002da6:	a803      	add	r0, sp, #12
 8002da8:	f00c f8cd 	bl	800ef46 <atoi>
	strncpy(tmp_str, str1+12, 2);
 8002dac:	2202      	movs	r2, #2
 8002dae:	f105 010d 	add.w	r1, r5, #13
	Sim80x.Gsm.Time.Hour = atoi(tmp_str);	// hour
 8002db2:	f884 0653 	strb.w	r0, [r4, #1619]	@ 0x653
	strncpy(tmp_str, str1+12, 2);
 8002db6:	a803      	add	r0, sp, #12
 8002db8:	f00e f9a3 	bl	8011102 <strncpy>
	Sim80x.Gsm.Time.Min = atoi(tmp_str);	// min
 8002dbc:	a803      	add	r0, sp, #12
 8002dbe:	f00c f8c2 	bl	800ef46 <atoi>
	strncpy(tmp_str, str1+15, 2);
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f105 0110 	add.w	r1, r5, #16
	Sim80x.Gsm.Time.Min = atoi(tmp_str);	// min
 8002dc8:	f884 0654 	strb.w	r0, [r4, #1620]	@ 0x654
	strncpy(tmp_str, str1+15, 2);
 8002dcc:	a803      	add	r0, sp, #12
 8002dce:	f00e f998 	bl	8011102 <strncpy>
	Sim80x.Gsm.Time.Sec = atoi(tmp_str);	// sec
 8002dd2:	a803      	add	r0, sp, #12
 8002dd4:	f00c f8b7 	bl	800ef46 <atoi>
	strncpy(tmp_str, str1+17, 3);
 8002dd8:	f105 0112 	add.w	r1, r5, #18
	Sim80x.Gsm.Time.Sec = atoi(tmp_str);	// sec
 8002ddc:	f884 0655 	strb.w	r0, [r4, #1621]	@ 0x655
	strncpy(tmp_str, str1+17, 3);
 8002de0:	2203      	movs	r2, #3
 8002de2:	a803      	add	r0, sp, #12
 8002de4:	f00e f98d 	bl	8011102 <strncpy>
	Sim80x.Gsm.Time.Zone = atoi(tmp_str); 	// timezone
 8002de8:	a803      	add	r0, sp, #12
 8002dea:	f00c f8ac 	bl	800ef46 <atoi>
	Sim80x.Gsm.Time.Millis = 0;
 8002dee:	f8a4 7658 	strh.w	r7, [r4, #1624]	@ 0x658
	Sim80x.Gsm.Time.Zone = atoi(tmp_str); 	// timezone
 8002df2:	f884 0656 	strb.w	r0, [r4, #1622]	@ 0x656
  str1 = strstr(strStart,"\r\n+CMTI:");
 8002df6:	492c      	ldr	r1, [pc, #176]	@ (8002ea8 <Sim80x_BufferProcess+0x360>)
 8002df8:	4816      	ldr	r0, [pc, #88]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002dfa:	f00e f995 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002dfe:	b148      	cbz	r0, 8002e14 <Sim80x_BufferProcess+0x2cc>
 8002e00:	4b2a      	ldr	r3, [pc, #168]	@ (8002eac <Sim80x_BufferProcess+0x364>)
 8002e02:	2500      	movs	r5, #0
      if(Sim80x.Gsm.HaveNewMsg[i]==0) {
 8002e04:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002e08:	2a00      	cmp	r2, #0
 8002e0a:	f000 82a6 	beq.w	800335a <Sim80x_BufferProcess+0x812>
    for(uint8_t i=0 ;i<sizeof(Sim80x.Gsm.HaveNewMsg) ; i++)
 8002e0e:	3501      	adds	r5, #1
 8002e10:	2d0a      	cmp	r5, #10
 8002e12:	d1f7      	bne.n	8002e04 <Sim80x_BufferProcess+0x2bc>
  str1 = strstr(strStart,"\r\n+CSCA:");
 8002e14:	4926      	ldr	r1, [pc, #152]	@ (8002eb0 <Sim80x_BufferProcess+0x368>)
 8002e16:	480f      	ldr	r0, [pc, #60]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002e18:	f00e f986 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002e1c:	b1a0      	cbz	r0, 8002e48 <Sim80x_BufferProcess+0x300>
    memset(Sim80x.Gsm.MsgServiceNumber,0,sizeof(Sim80x.Gsm.MsgServiceNumber));
 8002e1e:	4d25      	ldr	r5, [pc, #148]	@ (8002eb4 <Sim80x_BufferProcess+0x36c>)
 8002e20:	2300      	movs	r3, #0
    str1 = strchr(str1,'"');
 8002e22:	2122      	movs	r1, #34	@ 0x22
    memset(Sim80x.Gsm.MsgServiceNumber,0,sizeof(Sim80x.Gsm.MsgServiceNumber));
 8002e24:	f8c6 368f 	str.w	r3, [r6, #1679]	@ 0x68f
 8002e28:	606b      	str	r3, [r5, #4]
 8002e2a:	60ab      	str	r3, [r5, #8]
 8002e2c:	60eb      	str	r3, [r5, #12]
 8002e2e:	742b      	strb	r3, [r5, #16]
    str1 = strchr(str1,'"');
 8002e30:	f00e f948 	bl	80110c4 <strchr>
    str1++;
 8002e34:	1c46      	adds	r6, r0, #1
    str2 = strchr(str1,'"');
 8002e36:	2122      	movs	r1, #34	@ 0x22
 8002e38:	4630      	mov	r0, r6
 8002e3a:	f00e f943 	bl	80110c4 <strchr>
    strncpy(Sim80x.Gsm.MsgServiceNumber,str1,str2-str1);
 8002e3e:	4631      	mov	r1, r6
 8002e40:	1b82      	subs	r2, r0, r6
 8002e42:	4628      	mov	r0, r5
 8002e44:	f00e f95d 	bl	8011102 <strncpy>
  str1 = strstr(strStart,"\r\n+CSMP:");
 8002e48:	491b      	ldr	r1, [pc, #108]	@ (8002eb8 <Sim80x_BufferProcess+0x370>)
 8002e4a:	4802      	ldr	r0, [pc, #8]	@ (8002e54 <Sim80x_BufferProcess+0x30c>)
 8002e4c:	f00e f96c 	bl	8011128 <strstr>
 8002e50:	e034      	b.n	8002ebc <Sim80x_BufferProcess+0x374>
 8002e52:	bf00      	nop
 8002e54:	20000233 	.word	0x20000233
 8002e58:	08015000 	.word	0x08015000
 8002e5c:	08015298 	.word	0x08015298
 8002e60:	080152a8 	.word	0x080152a8
 8002e64:	080152b8 	.word	0x080152b8
 8002e68:	080152c4 	.word	0x080152c4
 8002e6c:	2000088b 	.word	0x2000088b
 8002e70:	08014fec 	.word	0x08014fec
 8002e74:	080152d0 	.word	0x080152d0
 8002e78:	408f4000 	.word	0x408f4000
 8002e7c:	080152d8 	.word	0x080152d8
 8002e80:	080152e4 	.word	0x080152e4
 8002e84:	080152f4 	.word	0x080152f4
 8002e88:	08015304 	.word	0x08015304
 8002e8c:	08015314 	.word	0x08015314
 8002e90:	08015328 	.word	0x08015328
 8002e94:	08014e40 	.word	0x08014e40
 8002e98:	08015334 	.word	0x08015334
 8002e9c:	08015380 	.word	0x08015380
 8002ea0:	200008ad 	.word	0x200008ad
 8002ea4:	0801538c 	.word	0x0801538c
 8002ea8:	08015398 	.word	0x08015398
 8002eac:	20000a0b 	.word	0x20000a0b
 8002eb0:	08014f68 	.word	0x08014f68
 8002eb4:	200008c2 	.word	0x200008c2
 8002eb8:	080153a4 	.word	0x080153a4
  if(str1!=NULL) {
 8002ebc:	b140      	cbz	r0, 8002ed0 <Sim80x_BufferProcess+0x388>
    tmp_int32_t = sscanf(str1,"\r\n+CSMP: %hhd,%hhd,%hhd,%hhd\r\nOK\r\n",&Sim80x.Gsm.MsgTextModeParameterFo,&Sim80x.Gsm.MsgTextModeParameterVp,&Sim80x.Gsm.MsgTextModeParameterPid,&Sim80x.Gsm.MsgTextModeParameterDcs);
 8002ebe:	4a9f      	ldr	r2, [pc, #636]	@ (800313c <Sim80x_BufferProcess+0x5f4>)
 8002ec0:	9201      	str	r2, [sp, #4]
 8002ec2:	1e53      	subs	r3, r2, #1
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	499e      	ldr	r1, [pc, #632]	@ (8003140 <Sim80x_BufferProcess+0x5f8>)
 8002ec8:	1e93      	subs	r3, r2, #2
 8002eca:	3a03      	subs	r2, #3
 8002ecc:	f00d ffee 	bl	8010eac <siscanf>
  str1 = strstr(strStart,"\r\n+CUSD:");
 8002ed0:	499c      	ldr	r1, [pc, #624]	@ (8003144 <Sim80x_BufferProcess+0x5fc>)
 8002ed2:	489d      	ldr	r0, [pc, #628]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002ed4:	f00e f928 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002ed8:	b148      	cbz	r0, 8002eee <Sim80x_BufferProcess+0x3a6>
    sscanf(str1,"\r\n+CUSD: 0, \"%[^\r]s",Sim80x.Gsm.Msg);    
 8002eda:	4a9c      	ldr	r2, [pc, #624]	@ (800314c <Sim80x_BufferProcess+0x604>)
 8002edc:	499c      	ldr	r1, [pc, #624]	@ (8003150 <Sim80x_BufferProcess+0x608>)
 8002ede:	f00d ffe5 	bl	8010eac <siscanf>
    tmp_int32_t = strlen(Sim80x.Gsm.Msg);
 8002ee2:	489a      	ldr	r0, [pc, #616]	@ (800314c <Sim80x_BufferProcess+0x604>)
 8002ee4:	f7fd fa04 	bl	80002f0 <strlen>
    if(tmp_int32_t > 5) {
 8002ee8:	2805      	cmp	r0, #5
 8002eea:	f200 8104 	bhi.w	80030f6 <Sim80x_BufferProcess+0x5ae>
  str1 = strstr(strStart,"AT+GSN\r");
 8002eee:	4999      	ldr	r1, [pc, #612]	@ (8003154 <Sim80x_BufferProcess+0x60c>)
 8002ef0:	4895      	ldr	r0, [pc, #596]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002ef2:	f00e f919 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002ef6:	b118      	cbz	r0, 8002f00 <Sim80x_BufferProcess+0x3b8>
    sscanf(str1,"\nAT+GSN\r\r\n%[^\r]",Sim80x.IMEI);    
 8002ef8:	4a97      	ldr	r2, [pc, #604]	@ (8003158 <Sim80x_BufferProcess+0x610>)
 8002efa:	4998      	ldr	r1, [pc, #608]	@ (800315c <Sim80x_BufferProcess+0x614>)
 8002efc:	f00d ffd6 	bl	8010eac <siscanf>
  str1 = strstr(strStart,"AT+CIMI\r");
 8002f00:	4997      	ldr	r1, [pc, #604]	@ (8003160 <Sim80x_BufferProcess+0x618>)
 8002f02:	4891      	ldr	r0, [pc, #580]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002f04:	f00e f910 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002f08:	b118      	cbz	r0, 8002f12 <Sim80x_BufferProcess+0x3ca>
    sscanf(str1,"\nAT+CIMI\r\r\n%[^\r]",Sim80x.CIMI);
 8002f0a:	4a96      	ldr	r2, [pc, #600]	@ (8003164 <Sim80x_BufferProcess+0x61c>)
 8002f0c:	4996      	ldr	r1, [pc, #600]	@ (8003168 <Sim80x_BufferProcess+0x620>)
 8002f0e:	f00d ffcd 	bl	8010eac <siscanf>
  str1 = strstr(strStart,"\r\n+CSTT:");
 8002f12:	4996      	ldr	r1, [pc, #600]	@ (800316c <Sim80x_BufferProcess+0x624>)
 8002f14:	488c      	ldr	r0, [pc, #560]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002f16:	f00e f907 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002f1a:	b138      	cbz	r0, 8002f2c <Sim80x_BufferProcess+0x3e4>
    sscanf(str1,"\r\n+CSTT: \"%[^\"]\",\"%[^\"]\",\"%[^\"]\"\r\n",Sim80x.GPRS.APN,Sim80x.GPRS.APN_UserName,Sim80x.GPRS.APN_Password);    
 8002f1c:	4a94      	ldr	r2, [pc, #592]	@ (8003170 <Sim80x_BufferProcess+0x628>)
 8002f1e:	9200      	str	r2, [sp, #0]
 8002f20:	f1a2 0311 	sub.w	r3, r2, #17
 8002f24:	4993      	ldr	r1, [pc, #588]	@ (8003174 <Sim80x_BufferProcess+0x62c>)
 8002f26:	3a22      	subs	r2, #34	@ 0x22
 8002f28:	f00d ffc0 	bl	8010eac <siscanf>
  str1 = strstr(strStart,"AT+CIFSR\r\r\n");
 8002f2c:	4992      	ldr	r1, [pc, #584]	@ (8003178 <Sim80x_BufferProcess+0x630>)
 8002f2e:	4886      	ldr	r0, [pc, #536]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002f30:	f00e f8fa 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002f34:	b118      	cbz	r0, 8002f3e <Sim80x_BufferProcess+0x3f6>
    sscanf(str1,"AT+CIFSR\r\r\n%[^\r]",Sim80x.GPRS.LocalIP);
 8002f36:	4a91      	ldr	r2, [pc, #580]	@ (800317c <Sim80x_BufferProcess+0x634>)
 8002f38:	4991      	ldr	r1, [pc, #580]	@ (8003180 <Sim80x_BufferProcess+0x638>)
 8002f3a:	f00d ffb7 	bl	8010eac <siscanf>
  str1 = strstr(strStart,"\r\n+CIPMUX:");
 8002f3e:	4991      	ldr	r1, [pc, #580]	@ (8003184 <Sim80x_BufferProcess+0x63c>)
 8002f40:	4881      	ldr	r0, [pc, #516]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002f42:	f00e f8f1 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002f46:	b170      	cbz	r0, 8002f66 <Sim80x_BufferProcess+0x41e>
    str1 =strchr(str1,':');
 8002f48:	213a      	movs	r1, #58	@ 0x3a
 8002f4a:	f00e f8bb 	bl	80110c4 <strchr>
    if(atoi(str1)==0)
 8002f4e:	3001      	adds	r0, #1
 8002f50:	f00b fff9 	bl	800ef46 <atoi>
      Sim80x.GPRS.MultiConnection=0;
 8002f54:	f894 37e6 	ldrb.w	r3, [r4, #2022]	@ 0x7e6
    if(atoi(str1)==0)
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	f040 80c7 	bne.w	80030ec <Sim80x_BufferProcess+0x5a4>
      Sim80x.GPRS.MultiConnection=0;
 8002f5e:	f360 0300 	bfi	r3, r0, #0, #1
 8002f62:	f884 37e6 	strb.w	r3, [r4, #2022]	@ 0x7e6
  str1 = strstr(strStart,"\r\nCONNECT OK\r\n");
 8002f66:	4988      	ldr	r1, [pc, #544]	@ (8003188 <Sim80x_BufferProcess+0x640>)
 8002f68:	4877      	ldr	r0, [pc, #476]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002f6a:	f00e f8dd 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002f6e:	b110      	cbz	r0, 8002f76 <Sim80x_BufferProcess+0x42e>
    Sim80x.GPRS.Connection = GPRSConnection_ConnectOK;
 8002f70:	2303      	movs	r3, #3
 8002f72:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nCLOSE OK\r\n");
 8002f76:	4985      	ldr	r1, [pc, #532]	@ (800318c <Sim80x_BufferProcess+0x644>)
 8002f78:	4873      	ldr	r0, [pc, #460]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002f7a:	f00e f8d5 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002f7e:	b110      	cbz	r0, 8002f86 <Sim80x_BufferProcess+0x43e>
	Sim80x.GPRS.Connection = GPRSConnection_GPRSup;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nCLOSED\r\n");
 8002f86:	4982      	ldr	r1, [pc, #520]	@ (8003190 <Sim80x_BufferProcess+0x648>)
 8002f88:	486f      	ldr	r0, [pc, #444]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002f8a:	f00e f8cd 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002f8e:	b110      	cbz	r0, 8002f96 <Sim80x_BufferProcess+0x44e>
	Sim80x.GPRS.Connection = GPRSConnection_GPRSup;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nCONNECT FAIL\r\n");
 8002f96:	497f      	ldr	r1, [pc, #508]	@ (8003194 <Sim80x_BufferProcess+0x64c>)
 8002f98:	486b      	ldr	r0, [pc, #428]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002f9a:	f00e f8c5 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002f9e:	b110      	cbz	r0, 8002fa6 <Sim80x_BufferProcess+0x45e>
    Sim80x.GPRS.Connection = GPRSConnection_ConnectFail;
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nALREADY CONNECT\r\n");
 8002fa6:	497c      	ldr	r1, [pc, #496]	@ (8003198 <Sim80x_BufferProcess+0x650>)
 8002fa8:	4867      	ldr	r0, [pc, #412]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002faa:	f00e f8bd 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002fae:	b110      	cbz	r0, 8002fb6 <Sim80x_BufferProcess+0x46e>
    Sim80x.GPRS.Connection = GPRSConnection_AlreadyConnect;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nSTATE: IP GPRSACT\r\n");
 8002fb6:	4979      	ldr	r1, [pc, #484]	@ (800319c <Sim80x_BufferProcess+0x654>)
 8002fb8:	4863      	ldr	r0, [pc, #396]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002fba:	f00e f8b5 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002fbe:	b110      	cbz	r0, 8002fc6 <Sim80x_BufferProcess+0x47e>
    Sim80x.GPRS.Connection = GPRSConnection_AlreadyConnect;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nSHUT OK\r\n");
 8002fc6:	4976      	ldr	r1, [pc, #472]	@ (80031a0 <Sim80x_BufferProcess+0x658>)
 8002fc8:	485f      	ldr	r0, [pc, #380]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002fca:	f00e f8ad 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002fce:	b110      	cbz	r0, 8002fd6 <Sim80x_BufferProcess+0x48e>
    Sim80x.GPRS.Connection = GPRSConnection_Idle;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nSTATE: IP INITIAL\r\n");
 8002fd6:	4973      	ldr	r1, [pc, #460]	@ (80031a4 <Sim80x_BufferProcess+0x65c>)
 8002fd8:	485b      	ldr	r0, [pc, #364]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002fda:	f00e f8a5 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002fde:	b110      	cbz	r0, 8002fe6 <Sim80x_BufferProcess+0x49e>
    Sim80x.GPRS.Connection = GPRSConnection_Idle;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nSEND OK\r\n");
 8002fe6:	4970      	ldr	r1, [pc, #448]	@ (80031a8 <Sim80x_BufferProcess+0x660>)
 8002fe8:	4857      	ldr	r0, [pc, #348]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002fea:	f00e f89d 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002fee:	b110      	cbz	r0, 8002ff6 <Sim80x_BufferProcess+0x4ae>
    Sim80x.GPRS.SendStatus = GPRSSendData_SendOK;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	f884 382c 	strb.w	r3, [r4, #2092]	@ 0x82c
  str1 = strstr(strStart,"\r\nSEND FAIL\r\n");
 8002ff6:	496d      	ldr	r1, [pc, #436]	@ (80031ac <Sim80x_BufferProcess+0x664>)
 8002ff8:	4853      	ldr	r0, [pc, #332]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8002ffa:	f00e f895 	bl	8011128 <strstr>
  if(str1!=NULL) {
 8002ffe:	b110      	cbz	r0, 8003006 <Sim80x_BufferProcess+0x4be>
    Sim80x.GPRS.SendStatus = GPRSSendData_SendFail;
 8003000:	2303      	movs	r3, #3
 8003002:	f884 382c 	strb.w	r3, [r4, #2092]	@ 0x82c
  str1 = strstr(strStart,"\r\n+IPD");
 8003006:	496a      	ldr	r1, [pc, #424]	@ (80031b0 <Sim80x_BufferProcess+0x668>)
 8003008:	484f      	ldr	r0, [pc, #316]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 800300a:	f00e f88d 	bl	8011128 <strstr>
  if(str1!=NULL) {
 800300e:	b308      	cbz	r0, 8003054 <Sim80x_BufferProcess+0x50c>
    str1 = strchr(str1,',');
 8003010:	212c      	movs	r1, #44	@ 0x2c
 8003012:	f00e f857 	bl	80110c4 <strchr>
    str1++;
 8003016:	1c46      	adds	r6, r0, #1
    tmp_int32_t = atoi(str1);
 8003018:	4630      	mov	r0, r6
 800301a:	f00b ff94 	bl	800ef46 <atoi>
    if(tmp_int32_t > sizeof(Sim80x.GPRS.ReceiveDataBuf))
 800301e:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
 8003022:	bf8c      	ite	hi
 8003024:	f44f 7740 	movhi.w	r7, #768	@ 0x300
    Sim80x.GPRS.ReceiveDataLen = tmp_int32_t;
 8003028:	b287      	uxthls	r7, r0
    tmp_int32_t = atoi(str1);
 800302a:	4605      	mov	r5, r0
    if(tmp_int32_t > sizeof(Sim80x.GPRS.ReceiveDataBuf))
 800302c:	4680      	mov	r8, r0
    str1 = strchr(str1,':');
 800302e:	f04f 013a 	mov.w	r1, #58	@ 0x3a
 8003032:	4630      	mov	r0, r6
 8003034:	bf84      	itt	hi
 8003036:	46b8      	movhi	r8, r7
    	tmp_int32_t = sizeof(Sim80x.GPRS.ReceiveDataBuf);
 8003038:	463d      	movhi	r5, r7
    str1 = strchr(str1,':');
 800303a:	f00e f843 	bl	80110c4 <strchr>
    memcpy(Sim80x.GPRS.ReceiveDataBuf,str1,tmp_int32_t);
 800303e:	4642      	mov	r2, r8
 8003040:	1c41      	adds	r1, r0, #1
 8003042:	485c      	ldr	r0, [pc, #368]	@ (80031b4 <Sim80x_BufferProcess+0x66c>)
 8003044:	f00e f968 	bl	8011318 <memcpy>
    if(_SIM80X_DEBUG) printf("\r\nGot IPD, %d bytes\r\n", Sim80x.GPRS.ReceiveDataLen);
 8003048:	485b      	ldr	r0, [pc, #364]	@ (80031b8 <Sim80x_BufferProcess+0x670>)
    Sim80x.GPRS.ReceiveDataLen = tmp_int32_t;
 800304a:	f8a4 782e 	strh.w	r7, [r4, #2094]	@ 0x82e
    if(_SIM80X_DEBUG) printf("\r\nGot IPD, %d bytes\r\n", Sim80x.GPRS.ReceiveDataLen);
 800304e:	4629      	mov	r1, r5
 8003050:	f00d fe68 	bl	8010d24 <iprintf>
  str1 = strstr(strStart,"\r\n+CGNSINF:");
 8003054:	4959      	ldr	r1, [pc, #356]	@ (80031bc <Sim80x_BufferProcess+0x674>)
 8003056:	483c      	ldr	r0, [pc, #240]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8003058:	f00e f866 	bl	8011128 <strstr>
  if(str1 == NULL)
 800305c:	2800      	cmp	r0, #0
 800305e:	d063      	beq.n	8003128 <Sim80x_BufferProcess+0x5e0>
    str1 = strchr(str1,':');
 8003060:	213a      	movs	r1, #58	@ 0x3a
 8003062:	f00e f82f 	bl	80110c4 <strchr>
    str1++;
 8003066:	1c45      	adds	r5, r0, #1
    Sim80x.GPS.RunStatus = atoi(str1);
 8003068:	4628      	mov	r0, r5
 800306a:	f00b ff6c 	bl	800ef46 <atoi>
 800306e:	b2c0      	uxtb	r0, r0
 8003070:	f884 0b31 	strb.w	r0, [r4, #2865]	@ 0xb31
    if(Sim80x.GPS.RunStatus) {
 8003074:	2800      	cmp	r0, #0
 8003076:	f040 80ad 	bne.w	80031d4 <Sim80x_BufferProcess+0x68c>
	Sim80x.GPS.NewData = 1;
 800307a:	2301      	movs	r3, #1
 800307c:	f884 3b30 	strb.w	r3, [r4, #2864]	@ 0xb30
  str1 = strstr(strStart,"\r\nAXN_");
 8003080:	494f      	ldr	r1, [pc, #316]	@ (80031c0 <Sim80x_BufferProcess+0x678>)
 8003082:	4831      	ldr	r0, [pc, #196]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 8003084:	f00e f850 	bl	8011128 <strstr>
  if(str1 != NULL) {
 8003088:	b110      	cbz	r0, 8003090 <Sim80x_BufferProcess+0x548>
      Sim80x.GPS.RunStatus = 2;
 800308a:	2302      	movs	r3, #2
 800308c:	f884 3b31 	strb.w	r3, [r4, #2865]	@ 0xb31
    if((parameter==10) || (Sim80x.AtCommand.ReceiveAnswer[parameter][0]==0)) {
 8003090:	4e4c      	ldr	r6, [pc, #304]	@ (80031c4 <Sim80x_BufferProcess+0x67c>)
  for( uint8_t parameter=0; parameter<11; parameter++)
 8003092:	2500      	movs	r5, #0
    str1 = strstr(strStart,Sim80x.AtCommand.ReceiveAnswer[parameter]);
 8003094:	1cf7      	adds	r7, r6, #3
    if((parameter==10) || (Sim80x.AtCommand.ReceiveAnswer[parameter][0]==0)) {
 8003096:	f896 33bc 	ldrb.w	r3, [r6, #956]	@ 0x3bc
    str1 = strstr(strStart,Sim80x.AtCommand.ReceiveAnswer[parameter]);
 800309a:	f506 716f 	add.w	r1, r6, #956	@ 0x3bc
 800309e:	4638      	mov	r0, r7
    if((parameter==10) || (Sim80x.AtCommand.ReceiveAnswer[parameter][0]==0)) {
 80030a0:	3640      	adds	r6, #64	@ 0x40
 80030a2:	b14b      	cbz	r3, 80030b8 <Sim80x_BufferProcess+0x570>
    str1 = strstr(strStart,Sim80x.AtCommand.ReceiveAnswer[parameter]);
 80030a4:	f00e f840 	bl	8011128 <strstr>
      Sim80x.AtCommand.FindAnswer = parameter+1;
 80030a8:	3501      	adds	r5, #1
 80030aa:	b2ed      	uxtb	r5, r5
    if(str1!=NULL) {
 80030ac:	2800      	cmp	r0, #0
 80030ae:	f040 815e 	bne.w	800336e <Sim80x_BufferProcess+0x826>
    if((parameter==10) || (Sim80x.AtCommand.ReceiveAnswer[parameter][0]==0)) {
 80030b2:	2d0a      	cmp	r5, #10
 80030b4:	d1ef      	bne.n	8003096 <Sim80x_BufferProcess+0x54e>
 80030b6:	4603      	mov	r3, r0
  Sim80x.UsartRxIndex=0;
 80030b8:	2500      	movs	r5, #0
  memset(Sim80x.UsartRxBuffer,0,_SIM80X_BUFFER_SIZE);    
 80030ba:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80030be:	4629      	mov	r1, r5
 80030c0:	4821      	ldr	r0, [pc, #132]	@ (8003148 <Sim80x_BufferProcess+0x600>)
      Sim80x.AtCommand.FindAnswer=0;
 80030c2:	f884 3648 	strb.w	r3, [r4, #1608]	@ 0x648
  Sim80x.UsartRxIndex=0;
 80030c6:	8025      	strh	r5, [r4, #0]
  memset(Sim80x.UsartRxBuffer,0,_SIM80X_BUFFER_SIZE);    
 80030c8:	f00d fff4 	bl	80110b4 <memset>
  Sim80x.Status.Busy=0;
 80030cc:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 80030d0:	f365 0341 	bfi	r3, r5, #1, #1
 80030d4:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
  Sim80x.AtCommand.LowPowerTime = HAL_GetTick() + 50;
 80030d8:	f006 ff5c 	bl	8009f94 <HAL_GetTick>
 80030dc:	3032      	adds	r0, #50	@ 0x32
 80030de:	f8c4 0640 	str.w	r0, [r4, #1600]	@ 0x640
}
 80030e2:	b008      	add	sp, #32
 80030e4:	ecbd 8b02 	vpop	{d8}
 80030e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Sim80x.GPRS.MultiConnection=1;
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	f884 37e6 	strb.w	r3, [r4, #2022]	@ 0x7e6
 80030f4:	e737      	b.n	8002f66 <Sim80x_BufferProcess+0x41e>
      Sim80x.Gsm.Msg[tmp_int32_t-5] = 0;
 80030f6:	4420      	add	r0, r4
 80030f8:	2300      	movs	r3, #0
 80030fa:	f880 36d2 	strb.w	r3, [r0, #1746]	@ 0x6d2
 80030fe:	e6f6      	b.n	8002eee <Sim80x_BufferProcess+0x3a6>
      str1 = strchr(str1,',');
 8003100:	4628      	mov	r0, r5
 8003102:	212c      	movs	r1, #44	@ 0x2c
 8003104:	f00d ffde 	bl	80110c4 <strchr>
      str1++;
 8003108:	1c45      	adds	r5, r0, #1
 800310a:	e5ea      	b.n	8002ce2 <Sim80x_BufferProcess+0x19a>
	  memset(&Sim80x,0,sizeof(Sim80x));
 800310c:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 8003110:	2100      	movs	r1, #0
 8003112:	482c      	ldr	r0, [pc, #176]	@ (80031c4 <Sim80x_BufferProcess+0x67c>)
 8003114:	f00d ffce 	bl	80110b4 <memset>
	  osDelay(2000);
 8003118:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800311c:	f00a fe3a 	bl	800dd94 <osDelay>
	  Sim80x_SetPower(true);
 8003120:	2001      	movs	r0, #1
 8003122:	f7ff fafb 	bl	800271c <Sim80x_SetPower>
 8003126:	e5c3      	b.n	8002cb0 <Sim80x_BufferProcess+0x168>
	  str1 = strstr(strStart,"\r\n+UGNSINF:");
 8003128:	4927      	ldr	r1, [pc, #156]	@ (80031c8 <Sim80x_BufferProcess+0x680>)
 800312a:	4807      	ldr	r0, [pc, #28]	@ (8003148 <Sim80x_BufferProcess+0x600>)
 800312c:	f00d fffc 	bl	8011128 <strstr>
  if(str1 != NULL) {
 8003130:	2800      	cmp	r0, #0
 8003132:	d195      	bne.n	8003060 <Sim80x_BufferProcess+0x518>
 8003134:	e7a4      	b.n	8003080 <Sim80x_BufferProcess+0x538>
 8003136:	1ef4      	subs	r4, r6, #3
 8003138:	e525      	b.n	8002b86 <Sim80x_BufferProcess+0x3e>
 800313a:	bf00      	nop
 800313c:	200008c1 	.word	0x200008c1
 8003140:	080153b0 	.word	0x080153b0
 8003144:	080153d4 	.word	0x080153d4
 8003148:	20000233 	.word	0x20000233
 800314c:	20000907 	.word	0x20000907
 8003150:	080153e0 	.word	0x080153e0
 8003154:	080153f4 	.word	0x080153f4
 8003158:	20000540 	.word	0x20000540
 800315c:	080153fc 	.word	0x080153fc
 8003160:	0801540c 	.word	0x0801540c
 8003164:	20000550 	.word	0x20000550
 8003168:	08015418 	.word	0x08015418
 800316c:	0801542c 	.word	0x0801542c
 8003170:	20000a39 	.word	0x20000a39
 8003174:	08015438 	.word	0x08015438
 8003178:	0801545c 	.word	0x0801545c
 800317c:	20000a4a 	.word	0x20000a4a
 8003180:	08015468 	.word	0x08015468
 8003184:	0801547c 	.word	0x0801547c
 8003188:	08015488 	.word	0x08015488
 800318c:	08015498 	.word	0x08015498
 8003190:	080154a8 	.word	0x080154a8
 8003194:	080154b4 	.word	0x080154b4
 8003198:	080154c8 	.word	0x080154c8
 800319c:	080154dc 	.word	0x080154dc
 80031a0:	080147e8 	.word	0x080147e8
 80031a4:	080154f4 	.word	0x080154f4
 80031a8:	08014a3c 	.word	0x08014a3c
 80031ac:	0801550c 	.word	0x0801550c
 80031b0:	0801551c 	.word	0x0801551c
 80031b4:	20000a60 	.word	0x20000a60
 80031b8:	08015524 	.word	0x08015524
 80031bc:	0801553c 	.word	0x0801553c
 80031c0:	08015554 	.word	0x08015554
 80031c4:	20000230 	.word	0x20000230
 80031c8:	08015548 	.word	0x08015548
 80031cc:	4b189680 	.word	0x4b189680
 80031d0:	42c80000 	.word	0x42c80000
		str1 = strchr(str1,',');
 80031d4:	212c      	movs	r1, #44	@ 0x2c
 80031d6:	4628      	mov	r0, r5
 80031d8:	f00d ff74 	bl	80110c4 <strchr>
		str1 = strchr(str1,',');
 80031dc:	212c      	movs	r1, #44	@ 0x2c
 80031de:	3001      	adds	r0, #1
 80031e0:	f00d ff70 	bl	80110c4 <strchr>
		str1++;
 80031e4:	1c47      	adds	r7, r0, #1
		str1 = strchr(str1,',');
 80031e6:	4605      	mov	r5, r0
		strncpy(tmp_str, str1+0, 4);
 80031e8:	2204      	movs	r2, #4
 80031ea:	4639      	mov	r1, r7
 80031ec:	a803      	add	r0, sp, #12
 80031ee:	f00d ff88 	bl	8011102 <strncpy>
		tmp_str[4]=0;
 80031f2:	2600      	movs	r6, #0
		Sim80x.GPS.Time.Year = atoi(tmp_str);	// year
 80031f4:	a803      	add	r0, sp, #12
		tmp_str[4]=0;
 80031f6:	f88d 6010 	strb.w	r6, [sp, #16]
		Sim80x.GPS.Time.Year = atoi(tmp_str);	// year
 80031fa:	f00b fea4 	bl	800ef46 <atoi>
		strncpy(tmp_str, str1+4, 2);
 80031fe:	1d69      	adds	r1, r5, #5
 8003200:	2202      	movs	r2, #2
		Sim80x.GPS.Time.Year = atoi(tmp_str);	// year
 8003202:	f8a4 0b34 	strh.w	r0, [r4, #2868]	@ 0xb34
		strncpy(tmp_str, str1+4, 2);
 8003206:	a803      	add	r0, sp, #12
 8003208:	f00d ff7b 	bl	8011102 <strncpy>
		Sim80x.GPS.Time.Month = atoi(tmp_str);	// month
 800320c:	a803      	add	r0, sp, #12
		tmp_str[2]=0;
 800320e:	f8ad 600e 	strh.w	r6, [sp, #14]
		Sim80x.GPS.Time.Month = atoi(tmp_str);	// month
 8003212:	f00b fe98 	bl	800ef46 <atoi>
		strncpy(tmp_str, str1+6, 2);
 8003216:	1de9      	adds	r1, r5, #7
 8003218:	2202      	movs	r2, #2
		Sim80x.GPS.Time.Month = atoi(tmp_str);	// month
 800321a:	f884 0b36 	strb.w	r0, [r4, #2870]	@ 0xb36
		strncpy(tmp_str, str1+6, 2);
 800321e:	a803      	add	r0, sp, #12
 8003220:	f00d ff6f 	bl	8011102 <strncpy>
		Sim80x.GPS.Time.Day = atoi(tmp_str);	// day
 8003224:	a803      	add	r0, sp, #12
 8003226:	f00b fe8e 	bl	800ef46 <atoi>
		strncpy(tmp_str, str1+8, 2);
 800322a:	f105 0109 	add.w	r1, r5, #9
 800322e:	2202      	movs	r2, #2
		Sim80x.GPS.Time.Day = atoi(tmp_str);	// day
 8003230:	f884 0b38 	strb.w	r0, [r4, #2872]	@ 0xb38
		strncpy(tmp_str, str1+8, 2);
 8003234:	a803      	add	r0, sp, #12
 8003236:	f00d ff64 	bl	8011102 <strncpy>
		Sim80x.GPS.Time.Hour = atoi(tmp_str);	// hour
 800323a:	a803      	add	r0, sp, #12
 800323c:	f00b fe83 	bl	800ef46 <atoi>
		strncpy(tmp_str, str1+10, 2);
 8003240:	f105 010b 	add.w	r1, r5, #11
 8003244:	2202      	movs	r2, #2
		Sim80x.GPS.Time.Hour = atoi(tmp_str);	// hour
 8003246:	f884 0b39 	strb.w	r0, [r4, #2873]	@ 0xb39
		strncpy(tmp_str, str1+10, 2);
 800324a:	a803      	add	r0, sp, #12
 800324c:	f00d ff59 	bl	8011102 <strncpy>
		Sim80x.GPS.Time.Min = atoi(tmp_str);	// min
 8003250:	a803      	add	r0, sp, #12
 8003252:	f00b fe78 	bl	800ef46 <atoi>
		strncpy(tmp_str, str1+12, 2);
 8003256:	f105 010d 	add.w	r1, r5, #13
 800325a:	2202      	movs	r2, #2
		Sim80x.GPS.Time.Min = atoi(tmp_str);	// min
 800325c:	f884 0b3a 	strb.w	r0, [r4, #2874]	@ 0xb3a
		strncpy(tmp_str, str1+12, 2);
 8003260:	a803      	add	r0, sp, #12
 8003262:	f00d ff4e 	bl	8011102 <strncpy>
		Sim80x.GPS.Time.Sec = atoi(tmp_str);	// sec
 8003266:	a803      	add	r0, sp, #12
 8003268:	f00b fe6d 	bl	800ef46 <atoi>
		strncpy(tmp_str, str1+15, 3);
 800326c:	2203      	movs	r2, #3
 800326e:	f105 0110 	add.w	r1, r5, #16
		Sim80x.GPS.Time.Sec = atoi(tmp_str);	// sec
 8003272:	f884 0b3b 	strb.w	r0, [r4, #2875]	@ 0xb3b
		strncpy(tmp_str, str1+15, 3);
 8003276:	a803      	add	r0, sp, #12
 8003278:	f00d ff43 	bl	8011102 <strncpy>
		Sim80x.GPS.Time.Millis = atoi(tmp_str); // millis
 800327c:	a803      	add	r0, sp, #12
 800327e:	f00b fe62 	bl	800ef46 <atoi>
		str1 = strchr(str1,',');
 8003282:	212c      	movs	r1, #44	@ 0x2c
		Sim80x.GPS.Time.Millis = atoi(tmp_str); // millis
 8003284:	4603      	mov	r3, r0
		str1 = strchr(str1,',');
 8003286:	4638      	mov	r0, r7
		Sim80x.GPS.Time.Millis = atoi(tmp_str); // millis
 8003288:	f8a4 3b3e 	strh.w	r3, [r4, #2878]	@ 0xb3e
		Sim80x.GPS.Time.Zone = 0;
 800328c:	f884 6b3c 	strb.w	r6, [r4, #2876]	@ 0xb3c
		str1 = strchr(str1,',');
 8003290:	f00d ff18 	bl	80110c4 <strchr>
		str1++;
 8003294:	1c45      	adds	r5, r0, #1
		tmp = atof(str1);	// lat
 8003296:	4628      	mov	r0, r5
 8003298:	f00b fe52 	bl	800ef40 <atof>
 800329c:	ec51 0b10 	vmov	r0, r1, d0
 80032a0:	f7fd fce2 	bl	8000c68 <__aeabi_d2f>
		Sim80x.GPS.Lat = tmp * 10000000;
 80032a4:	ed1f 8a37 	vldr	s16, [pc, #-220]	@ 80031cc <Sim80x_BufferProcess+0x684>
		tmp = atof(str1);	// lat
 80032a8:	ee07 0a90 	vmov	s15, r0
		Sim80x.GPS.Lat = tmp * 10000000;
 80032ac:	ee67 7a88 	vmul.f32	s15, s15, s16
		str1 = strchr(str1,',');
 80032b0:	212c      	movs	r1, #44	@ 0x2c
		Sim80x.GPS.Lat = tmp * 10000000;
 80032b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		str1 = strchr(str1,',');
 80032b6:	4628      	mov	r0, r5
		Sim80x.GPS.Lat = tmp * 10000000;
 80032b8:	ee17 3a90 	vmov	r3, s15
 80032bc:	f8c4 3b40 	str.w	r3, [r4, #2880]	@ 0xb40
		str1 = strchr(str1,',');
 80032c0:	f00d ff00 	bl	80110c4 <strchr>
		str1++;
 80032c4:	1c45      	adds	r5, r0, #1
		tmp = atof(str1);	// lon
 80032c6:	4628      	mov	r0, r5
 80032c8:	f00b fe3a 	bl	800ef40 <atof>
 80032cc:	ec51 0b10 	vmov	r0, r1, d0
 80032d0:	f7fd fcca 	bl	8000c68 <__aeabi_d2f>
 80032d4:	ee07 0a90 	vmov	s15, r0
		Sim80x.GPS.Lon = tmp * 10000000;
 80032d8:	ee67 7a88 	vmul.f32	s15, s15, s16
		str1 = strchr(str1,',');
 80032dc:	212c      	movs	r1, #44	@ 0x2c
		Sim80x.GPS.Lon = tmp * 10000000;
 80032de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		str1 = strchr(str1,',');
 80032e2:	4628      	mov	r0, r5
		Sim80x.GPS.Lon = tmp * 10000000;
 80032e4:	ee17 3a90 	vmov	r3, s15
 80032e8:	f8c4 3b44 	str.w	r3, [r4, #2884]	@ 0xb44
		str1 = strchr(str1,',');
 80032ec:	f00d feea 	bl	80110c4 <strchr>
		str1++;
 80032f0:	1c45      	adds	r5, r0, #1
		tmp = atof(str1);	// alt
 80032f2:	4628      	mov	r0, r5
 80032f4:	f00b fe24 	bl	800ef40 <atof>
 80032f8:	ec51 0b10 	vmov	r0, r1, d0
 80032fc:	f7fd fcb4 	bl	8000c68 <__aeabi_d2f>
		Sim80x.GPS.Alt = tmp * 100;
 8003300:	ed1f 7a4d 	vldr	s14, [pc, #-308]	@ 80031d0 <Sim80x_BufferProcess+0x688>
		tmp = atof(str1);	// alt
 8003304:	ee07 0a90 	vmov	s15, r0
		Sim80x.GPS.Alt = tmp * 100;
 8003308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800330c:	2603      	movs	r6, #3
 800330e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003312:	ee17 3a90 	vmov	r3, s15
 8003316:	f8c4 3b48 	str.w	r3, [r4, #2888]	@ 0xb48
			str1 = strchr(str1,',');
 800331a:	4628      	mov	r0, r5
 800331c:	212c      	movs	r1, #44	@ 0x2c
 800331e:	f00d fed1 	bl	80110c4 <strchr>
		for(uint8_t i=0; i<3; i++)
 8003322:	1e73      	subs	r3, r6, #1
 8003324:	f013 06ff 	ands.w	r6, r3, #255	@ 0xff
			str1++;
 8003328:	f100 0501 	add.w	r5, r0, #1
		for(uint8_t i=0; i<3; i++)
 800332c:	d1f5      	bne.n	800331a <Sim80x_BufferProcess+0x7d2>
		Sim80x.GPS.Fix = atoi(str1);
 800332e:	4628      	mov	r0, r5
 8003330:	f00b fe09 	bl	800ef46 <atoi>
 8003334:	2607      	movs	r6, #7
 8003336:	f884 0b32 	strb.w	r0, [r4, #2866]	@ 0xb32
			str1 = strchr(str1,',');
 800333a:	4628      	mov	r0, r5
 800333c:	212c      	movs	r1, #44	@ 0x2c
 800333e:	f00d fec1 	bl	80110c4 <strchr>
		for(uint8_t i=0; i<7; i++)
 8003342:	1e73      	subs	r3, r6, #1
 8003344:	f013 06ff 	ands.w	r6, r3, #255	@ 0xff
			str1++;
 8003348:	f100 0501 	add.w	r5, r0, #1
		for(uint8_t i=0; i<7; i++)
 800334c:	d1f5      	bne.n	800333a <Sim80x_BufferProcess+0x7f2>
		Sim80x.GPS.SatInUse = atoi(str1);
 800334e:	4628      	mov	r0, r5
 8003350:	f00b fdf9 	bl	800ef46 <atoi>
 8003354:	f884 0b4c 	strb.w	r0, [r4, #2892]	@ 0xb4c
 8003358:	e68f      	b.n	800307a <Sim80x_BufferProcess+0x532>
    str1 = strchr(str1,',');
 800335a:	212c      	movs	r1, #44	@ 0x2c
 800335c:	f00d feb2 	bl	80110c4 <strchr>
        Sim80x.Gsm.HaveNewMsg[i] = atoi(str1);    
 8003360:	3001      	adds	r0, #1
 8003362:	f00b fdf0 	bl	800ef46 <atoi>
 8003366:	4425      	add	r5, r4
 8003368:	f885 07dc 	strb.w	r0, [r5, #2012]	@ 0x7dc
        break;
 800336c:	e552      	b.n	8002e14 <Sim80x_BufferProcess+0x2cc>
 800336e:	462b      	mov	r3, r5
 8003370:	e6a2      	b.n	80030b8 <Sim80x_BufferProcess+0x570>
        memset(Sim80x.Gsm.Msg,0,sizeof(Sim80x.Gsm.Msg));
 8003372:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003376:	4827      	ldr	r0, [pc, #156]	@ (8003414 <Sim80x_BufferProcess+0x8cc>)
 8003378:	2100      	movs	r1, #0
 800337a:	f00d fe9b 	bl	80110b4 <memset>
        memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 800337e:	4a26      	ldr	r2, [pc, #152]	@ (8003418 <Sim80x_BufferProcess+0x8d0>)
 8003380:	2300      	movs	r3, #0
 8003382:	f8c4 36c5 	str.w	r3, [r4, #1733]	@ 0x6c5
        memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
 8003386:	f8c4 36b4 	str.w	r3, [r4, #1716]	@ 0x6b4
        memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 800338a:	6053      	str	r3, [r2, #4]
 800338c:	7213      	strb	r3, [r2, #8]
        memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
 800338e:	f842 3c05 	str.w	r3, [r2, #-5]
 8003392:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003396:	f842 3c0d 	str.w	r3, [r2, #-13]
        memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));
 800339a:	f8c4 36ce 	str.w	r3, [r4, #1742]	@ 0x6ce
        memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
 800339e:	f842 3c09 	str.w	r3, [r2, #-9]
        memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));
 80033a2:	7453      	strb	r3, [r2, #17]
 80033a4:	f8c2 300d 	str.w	r3, [r2, #13]
        Sim80x.Gsm.MsgReadIsOK=1;
 80033a8:	f894 364c 	ldrb.w	r3, [r4, #1612]	@ 0x64c
 80033ac:	f043 0302 	orr.w	r3, r3, #2
 80033b0:	f884 364c 	strb.w	r3, [r4, #1612]	@ 0x64c
 80033b4:	e4b2      	b.n	8002d1c <Sim80x_BufferProcess+0x1d4>
      memset(Sim80x.Gsm.Msg,0,sizeof(Sim80x.Gsm.Msg));
 80033b6:	4f17      	ldr	r7, [pc, #92]	@ (8003414 <Sim80x_BufferProcess+0x8cc>)
 80033b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033bc:	2100      	movs	r1, #0
 80033be:	4638      	mov	r0, r7
 80033c0:	f00d fe78 	bl	80110b4 <memset>
      memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
 80033c4:	f1a7 0223 	sub.w	r2, r7, #35	@ 0x23
      memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 80033c8:	f1a7 0312 	sub.w	r3, r7, #18
      tmp_int32_t = sscanf(str1,"\r\n+CMGR: %*[^,],\"%[^\"]\",%*[^,],\"%[^,],%[^+-]%*d\"\r\n%[^\r]s\r\nOK\r\n",Sim80x.Gsm.MsgNumber,Sim80x.Gsm.MsgDate,Sim80x.Gsm.MsgTime,Sim80x.Gsm.Msg);      
 80033cc:	4628      	mov	r0, r5
      memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));
 80033ce:	f1a7 0109 	sub.w	r1, r7, #9
      memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 80033d2:	2500      	movs	r5, #0
      tmp_int32_t = sscanf(str1,"\r\n+CMGR: %*[^,],\"%[^\"]\",%*[^,],\"%[^,],%[^+-]%*d\"\r\n%[^\r]s\r\nOK\r\n",Sim80x.Gsm.MsgNumber,Sim80x.Gsm.MsgDate,Sim80x.Gsm.MsgTime,Sim80x.Gsm.Msg);      
 80033d4:	9100      	str	r1, [sp, #0]
 80033d6:	9701      	str	r7, [sp, #4]
 80033d8:	4910      	ldr	r1, [pc, #64]	@ (800341c <Sim80x_BufferProcess+0x8d4>)
      memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 80033da:	f8c6 56c2 	str.w	r5, [r6, #1730]	@ 0x6c2
      memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));
 80033de:	f847 5c05 	str.w	r5, [r7, #-5]
      memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 80033e2:	f847 5c0e 	str.w	r5, [r7, #-14]
      memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
 80033e6:	f8c6 56b1 	str.w	r5, [r6, #1713]	@ 0x6b1
      memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 80033ea:	721d      	strb	r5, [r3, #8]
      memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));
 80033ec:	f807 5c01 	strb.w	r5, [r7, #-1]
      memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
 80033f0:	60d5      	str	r5, [r2, #12]
 80033f2:	7415      	strb	r5, [r2, #16]
 80033f4:	e9c2 5501 	strd	r5, r5, [r2, #4]
      memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));
 80033f8:	f8c6 56cb 	str.w	r5, [r6, #1739]	@ 0x6cb
      tmp_int32_t = sscanf(str1,"\r\n+CMGR: %*[^,],\"%[^\"]\",%*[^,],\"%[^,],%[^+-]%*d\"\r\n%[^\r]s\r\nOK\r\n",Sim80x.Gsm.MsgNumber,Sim80x.Gsm.MsgDate,Sim80x.Gsm.MsgTime,Sim80x.Gsm.Msg);      
 80033fc:	f00d fd56 	bl	8010eac <siscanf>
      if(tmp_int32_t == 4)
 8003400:	2804      	cmp	r0, #4
        Sim80x.Gsm.MsgReadIsOK=1;
 8003402:	f894 364c 	ldrb.w	r3, [r4, #1612]	@ 0x64c
      if(tmp_int32_t == 4)
 8003406:	d0d1      	beq.n	80033ac <Sim80x_BufferProcess+0x864>
        Sim80x.Gsm.MsgReadIsOK=0;
 8003408:	f365 0341 	bfi	r3, r5, #1, #1
 800340c:	f884 364c 	strb.w	r3, [r4, #1612]	@ 0x64c
 8003410:	e484      	b.n	8002d1c <Sim80x_BufferProcess+0x1d4>
 8003412:	bf00      	nop
 8003414:	20000907 	.word	0x20000907
 8003418:	200008f5 	.word	0x200008f5
 800341c:	08015340 	.word	0x08015340

08003420 <StartSim80xBuffTask>:
{ 
 8003420:	b508      	push	{r3, lr}
  printf("SIM BuffTaskStart\r\n");
 8003422:	480f      	ldr	r0, [pc, #60]	@ (8003460 <StartSim80xBuffTask+0x40>)
 8003424:	4c0f      	ldr	r4, [pc, #60]	@ (8003464 <StartSim80xBuffTask+0x44>)
 8003426:	f00d fce5 	bl	8010df4 <puts>
 800342a:	e008      	b.n	800343e <StartSim80xBuffTask+0x1e>
    osDelay(Sim80x.Status.Power ? 3 : 50);
 800342c:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8003430:	f013 0f04 	tst.w	r3, #4
 8003434:	bf0c      	ite	eq
 8003436:	2032      	moveq	r0, #50	@ 0x32
 8003438:	2003      	movne	r0, #3
 800343a:	f00a fcab 	bl	800dd94 <osDelay>
    if( ((Sim80x.UsartRxIndex>4) && (HAL_GetTick()-Sim80x.UsartRxLastTime > 20)) ) {
 800343e:	8823      	ldrh	r3, [r4, #0]
 8003440:	2b04      	cmp	r3, #4
 8003442:	d9f3      	bls.n	800342c <StartSim80xBuffTask+0xc>
 8003444:	f006 fda6 	bl	8009f94 <HAL_GetTick>
 8003448:	e9d4 23c2 	ldrd	r2, r3, [r4, #776]	@ 0x308
 800344c:	1a80      	subs	r0, r0, r2
 800344e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003452:	2815      	cmp	r0, #21
 8003454:	f173 0300 	sbcs.w	r3, r3, #0
 8003458:	d3e8      	bcc.n	800342c <StartSim80xBuffTask+0xc>
      Sim80x_BufferProcess();      
 800345a:	f7ff fb75 	bl	8002b48 <Sim80x_BufferProcess>
 800345e:	e7e5      	b.n	800342c <StartSim80xBuffTask+0xc>
 8003460:	0801555c 	.word	0x0801555c
 8003464:	20000230 	.word	0x20000230

08003468 <ADC_DMA_Start>:
	  printf("ADC 1: %d , ADC 2: %d ADC 3: %d ADC 4: %d ADC 5: %d \r\n", adc_data[0], adc_data[1], adc_data[2], adc_data[3], adc_data[4]);
}


void ADC_DMA_Start()
{
 8003468:	b510      	push	{r4, lr}
	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);                    // ADC calibration
 800346a:	4c07      	ldr	r4, [pc, #28]	@ (8003488 <ADC_DMA_Start+0x20>)
 800346c:	217f      	movs	r1, #127	@ 0x7f
 800346e:	4620      	mov	r0, r4
 8003470:	f007 fa18 	bl	800a8a4 <HAL_ADCEx_Calibration_Start>
	  HAL_Delay(10);
 8003474:	200a      	movs	r0, #10
 8003476:	f006 fd93 	bl	8009fa0 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_data, 5);   // start ADC DMA (1 channel, 5 reads per channel)
 800347a:	4620      	mov	r0, r4
 800347c:	4903      	ldr	r1, [pc, #12]	@ (800348c <ADC_DMA_Start+0x24>)
}
 800347e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_data, 5);   // start ADC DMA (1 channel, 5 reads per channel)
 8003482:	2205      	movs	r2, #5
 8003484:	f007 b980 	b.w	800a788 <HAL_ADC_Start_DMA>
 8003488:	200018c0 	.word	0x200018c0
 800348c:	20000d80 	.word	0x20000d80

08003490 <GET_MCU_Temp>:
	    uint16_t cal_temp = *((uint16_t*) ((uint32_t)0x1FFF75A8));
   	    uint16_t cal_value = *((uint16_t*) ((uint32_t)0x1FFF75CA));

	  	for(uint8_t i=0; i<5;i+=1)
	  	{
	  		tmp+=adc_data[i];
 8003490:	4a23      	ldr	r2, [pc, #140]	@ (8003520 <GET_MCU_Temp+0x90>)
	  	}
	  	tmp*=0.2f;
 8003492:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003524 <GET_MCU_Temp+0x94>
	  		tmp+=adc_data[i];
 8003496:	8811      	ldrh	r1, [r2, #0]
 8003498:	8853      	ldrh	r3, [r2, #2]
 800349a:	8890      	ldrh	r0, [r2, #4]
 800349c:	440b      	add	r3, r1
 800349e:	88d1      	ldrh	r1, [r2, #6]
 80034a0:	8912      	ldrh	r2, [r2, #8]
 80034a2:	4403      	add	r3, r0
 80034a4:	440b      	add	r3, r1
 80034a6:	4413      	add	r3, r2
	  	tmp*=0.2f;
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	ee07 3a90 	vmov	s15, r3
 80034ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80034b2:	b570      	push	{r4, r5, r6, lr}
	  	tmp*=0.2f;
 80034b4:	ee67 7a87 	vmul.f32	s15, s15, s14
	    uint16_t cal_temp = *((uint16_t*) ((uint32_t)0x1FFF75A8));
 80034b8:	4e1b      	ldr	r6, [pc, #108]	@ (8003528 <GET_MCU_Temp+0x98>)
	  	tmp*=0.2f;
 80034ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15

	  	temperature = ((cal_temp - (float)tmp) * 4.3) / cal_value + 25.0;
 80034be:	f8b6 30a8 	ldrh.w	r3, [r6, #168]	@ 0xa8
 80034c2:	ee07 3a10 	vmov	s14, r3
 80034c6:	ee17 3a90 	vmov	r3, s15
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80034d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034dc:	ee17 0a90 	vmov	r0, s15
 80034e0:	f7fd f872 	bl	80005c8 <__aeabi_f2d>
 80034e4:	a30c      	add	r3, pc, #48	@ (adr r3, 8003518 <GET_MCU_Temp+0x88>)
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f7fd f8c5 	bl	8000678 <__aeabi_dmul>
 80034ee:	4604      	mov	r4, r0
 80034f0:	f8b6 00ca 	ldrh.w	r0, [r6, #202]	@ 0xca
 80034f4:	460d      	mov	r5, r1
 80034f6:	f7fd f855 	bl	80005a4 <__aeabi_i2d>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4620      	mov	r0, r4
 8003500:	4629      	mov	r1, r5
 8003502:	f7fd f9e3 	bl	80008cc <__aeabi_ddiv>
 8003506:	4b09      	ldr	r3, [pc, #36]	@ (800352c <GET_MCU_Temp+0x9c>)
 8003508:	2200      	movs	r2, #0
 800350a:	f7fc feff 	bl	800030c <__adddf3>
 800350e:	f7fd fbab 	bl	8000c68 <__aeabi_d2f>
	  	return temperature;
}
 8003512:	ee00 0a10 	vmov	s0, r0
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	33333333 	.word	0x33333333
 800351c:	40113333 	.word	0x40113333
 8003520:	20000d80 	.word	0x20000d80
 8003524:	3e4ccccd 	.word	0x3e4ccccd
 8003528:	1fff7500 	.word	0x1fff7500
 800352c:	40390000 	.word	0x40390000

08003530 <read_register16.isra.0>:
	params->oversampling_temperature = BMP280_STANDARD;
	params->oversampling_humidity = BMP280_STANDARD;
	params->standby = BMP280_STANDBY_250;
}

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8003530:	b510      	push	{r4, lr}
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8003532:	ea4f 0c40 	mov.w	ip, r0, lsl #1
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8003536:	b086      	sub	sp, #24
 8003538:	4608      	mov	r0, r1

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800353a:	fa1f f18c 	uxth.w	r1, ip
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800353e:	469c      	mov	ip, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003540:	2302      	movs	r3, #2
 8003542:	f241 3488 	movw	r4, #5000	@ 0x1388
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	ab05      	add	r3, sp, #20
 800354a:	9402      	str	r4, [sp, #8]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2301      	movs	r3, #1
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8003550:	4664      	mov	r4, ip
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003552:	f008 fb6b 	bl	800bc2c <HAL_I2C_Mem_Read>
 8003556:	b928      	cbnz	r0, 8003564 <read_register16.isra.0+0x34>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8003558:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800355c:	8023      	strh	r3, [r4, #0]
		return true;
 800355e:	2001      	movs	r0, #1
	} else
		return false;

}
 8003560:	b006      	add	sp, #24
 8003562:	bd10      	pop	{r4, pc}
		return false;
 8003564:	2000      	movs	r0, #0
}
 8003566:	b006      	add	sp, #24
 8003568:	bd10      	pop	{r4, pc}
 800356a:	bf00      	nop

0800356c <bmp280_init>:
		return false;
	else
		return true;
}

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800356c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8003570:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 8003572:	f1a3 0276 	sub.w	r2, r3, #118	@ 0x76
 8003576:	2a01      	cmp	r2, #1
bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8003578:	b087      	sub	sp, #28
	if (dev->addr != BMP280_I2C_ADDRESS_0
 800357a:	d904      	bls.n	8003586 <bmp280_init+0x1a>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {

		return false;
 800357c:	2700      	movs	r7, #0
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
		return false;
	}

	return true;
}
 800357e:	4638      	mov	r0, r7
 8003580:	b007      	add	sp, #28
 8003582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358a:	9202      	str	r2, [sp, #8]
 800358c:	460d      	mov	r5, r1
	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800358e:	f100 0232 	add.w	r2, r0, #50	@ 0x32
	tx_buff = (dev->addr << 1);
 8003592:	0059      	lsls	r1, r3, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003594:	2301      	movs	r3, #1
 8003596:	e9cd 2300 	strd	r2, r3, [sp]
 800359a:	4604      	mov	r4, r0
 800359c:	b289      	uxth	r1, r1
 800359e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80035a0:	22d0      	movs	r2, #208	@ 0xd0
 80035a2:	f008 fb43 	bl	800bc2c <HAL_I2C_Mem_Read>
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d1e8      	bne.n	800357c <bmp280_init+0x10>
	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80035aa:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 80035ae:	2b58      	cmp	r3, #88	@ 0x58
 80035b0:	d001      	beq.n	80035b6 <bmp280_init+0x4a>
 80035b2:	2b60      	cmp	r3, #96	@ 0x60
 80035b4:	d1e2      	bne.n	800357c <bmp280_init+0x10>
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80035b6:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80035b8:	2701      	movs	r7, #1
 80035ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80035be:	ae05      	add	r6, sp, #20
 80035c0:	23b6      	movs	r3, #182	@ 0xb6
 80035c2:	9202      	str	r2, [sp, #8]
	tx_buff = (dev->addr << 1);
 80035c4:	40b9      	lsls	r1, r7
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80035c6:	9701      	str	r7, [sp, #4]
 80035c8:	9600      	str	r6, [sp, #0]
 80035ca:	f88d 3014 	strb.w	r3, [sp, #20]
 80035ce:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80035d0:	b289      	uxth	r1, r1
 80035d2:	463b      	mov	r3, r7
 80035d4:	22e0      	movs	r2, #224	@ 0xe0
 80035d6:	f008 fa03 	bl	800b9e0 <HAL_I2C_Mem_Write>
 80035da:	2800      	cmp	r0, #0
 80035dc:	d1ce      	bne.n	800357c <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80035de:	f241 3888 	movw	r8, #5000	@ 0x1388
	tx_buff = (dev->addr << 1);
 80035e2:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80035e4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80035e6:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 80035e8:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80035ea:	2301      	movs	r3, #1
 80035ec:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80035f0:	b289      	uxth	r1, r1
 80035f2:	22f3      	movs	r2, #243	@ 0xf3
 80035f4:	f008 fb1a 	bl	800bc2c <HAL_I2C_Mem_Read>
				&& (status & 1) == 0)
 80035f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	4303      	orrs	r3, r0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1ec      	bne.n	80035e2 <bmp280_init+0x76>
	tx_buff = (dev->addr << 1);
 8003608:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800360a:	f8cd 8008 	str.w	r8, [sp, #8]
 800360e:	2702      	movs	r7, #2
	tx_buff = (dev->addr << 1);
 8003610:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003612:	9600      	str	r6, [sp, #0]
 8003614:	9701      	str	r7, [sp, #4]
 8003616:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003618:	b289      	uxth	r1, r1
 800361a:	2301      	movs	r3, #1
 800361c:	2288      	movs	r2, #136	@ 0x88
 800361e:	f008 fb05 	bl	800bc2c <HAL_I2C_Mem_Read>
 8003622:	2800      	cmp	r0, #0
 8003624:	d1aa      	bne.n	800357c <bmp280_init+0x10>
 8003626:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800362a:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 800362c:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800362e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003632:	8023      	strh	r3, [r4, #0]
	tx_buff = (dev->addr << 1);
 8003634:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003636:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003638:	b289      	uxth	r1, r1
 800363a:	2301      	movs	r3, #1
 800363c:	228a      	movs	r2, #138	@ 0x8a
 800363e:	f008 faf5 	bl	800bc2c <HAL_I2C_Mem_Read>
 8003642:	2800      	cmp	r0, #0
 8003644:	d19a      	bne.n	800357c <bmp280_init+0x10>
 8003646:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800364a:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 800364c:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800364e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003652:	8063      	strh	r3, [r4, #2]
	tx_buff = (dev->addr << 1);
 8003654:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003656:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003658:	b289      	uxth	r1, r1
 800365a:	2301      	movs	r3, #1
 800365c:	228c      	movs	r2, #140	@ 0x8c
 800365e:	f008 fae5 	bl	800bc2c <HAL_I2C_Mem_Read>
 8003662:	2800      	cmp	r0, #0
 8003664:	d18a      	bne.n	800357c <bmp280_init+0x10>
 8003666:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800366a:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 800366c:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800366e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003672:	80a3      	strh	r3, [r4, #4]
	tx_buff = (dev->addr << 1);
 8003674:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003676:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003678:	b289      	uxth	r1, r1
 800367a:	2301      	movs	r3, #1
 800367c:	228e      	movs	r2, #142	@ 0x8e
 800367e:	f008 fad5 	bl	800bc2c <HAL_I2C_Mem_Read>
 8003682:	2800      	cmp	r0, #0
 8003684:	f47f af7a 	bne.w	800357c <bmp280_init+0x10>
 8003688:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800368c:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 800368e:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8003690:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003694:	80e3      	strh	r3, [r4, #6]
	tx_buff = (dev->addr << 1);
 8003696:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003698:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800369a:	b289      	uxth	r1, r1
 800369c:	2301      	movs	r3, #1
 800369e:	2290      	movs	r2, #144	@ 0x90
 80036a0:	f008 fac4 	bl	800bc2c <HAL_I2C_Mem_Read>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	f47f af69 	bne.w	800357c <bmp280_init+0x10>
 80036aa:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80036ae:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 80036b0:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80036b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80036b6:	8123      	strh	r3, [r4, #8]
	tx_buff = (dev->addr << 1);
 80036b8:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80036ba:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80036bc:	b289      	uxth	r1, r1
 80036be:	2301      	movs	r3, #1
 80036c0:	2292      	movs	r2, #146	@ 0x92
 80036c2:	f008 fab3 	bl	800bc2c <HAL_I2C_Mem_Read>
 80036c6:	2800      	cmp	r0, #0
 80036c8:	f47f af58 	bne.w	800357c <bmp280_init+0x10>
 80036cc:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80036d0:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 80036d2:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80036d4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 80036d8:	8160      	strh	r0, [r4, #10]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80036da:	2301      	movs	r3, #1
	tx_buff = (dev->addr << 1);
 80036dc:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80036de:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80036e0:	2294      	movs	r2, #148	@ 0x94
 80036e2:	b289      	uxth	r1, r1
 80036e4:	f008 faa2 	bl	800bc2c <HAL_I2C_Mem_Read>
 80036e8:	2800      	cmp	r0, #0
 80036ea:	f47f af47 	bne.w	800357c <bmp280_init+0x10>
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80036ee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80036f2:	81a3      	strh	r3, [r4, #12]
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80036f4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80036f6:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 80036f8:	f104 030e 	add.w	r3, r4, #14
 80036fc:	2296      	movs	r2, #150	@ 0x96
 80036fe:	f7ff ff17 	bl	8003530 <read_register16.isra.0>
 8003702:	2800      	cmp	r0, #0
 8003704:	f43f af3a 	beq.w	800357c <bmp280_init+0x10>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8003708:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800370a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 800370c:	f104 0310 	add.w	r3, r4, #16
 8003710:	2298      	movs	r2, #152	@ 0x98
 8003712:	f7ff ff0d 	bl	8003530 <read_register16.isra.0>
 8003716:	2800      	cmp	r0, #0
 8003718:	f43f af30 	beq.w	800357c <bmp280_init+0x10>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800371c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800371e:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8003720:	f104 0312 	add.w	r3, r4, #18
 8003724:	229a      	movs	r2, #154	@ 0x9a
 8003726:	f7ff ff03 	bl	8003530 <read_register16.isra.0>
 800372a:	2800      	cmp	r0, #0
 800372c:	f43f af26 	beq.w	800357c <bmp280_init+0x10>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8003730:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003732:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8003734:	f104 0314 	add.w	r3, r4, #20
 8003738:	229c      	movs	r2, #156	@ 0x9c
 800373a:	f7ff fef9 	bl	8003530 <read_register16.isra.0>
 800373e:	2800      	cmp	r0, #0
 8003740:	f43f af1c 	beq.w	800357c <bmp280_init+0x10>
			&& read_register16(dev, 0x9e,
 8003744:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003746:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8003748:	f104 0316 	add.w	r3, r4, #22
 800374c:	229e      	movs	r2, #158	@ 0x9e
 800374e:	f7ff feef 	bl	8003530 <read_register16.isra.0>
 8003752:	4607      	mov	r7, r0
 8003754:	2800      	cmp	r0, #0
 8003756:	f43f af11 	beq.w	800357c <bmp280_init+0x10>
	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800375a:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
 800375e:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8003760:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003762:	2a60      	cmp	r2, #96	@ 0x60
 8003764:	d03d      	beq.n	80037e2 <bmp280_init+0x276>
	tx_buff = (dev->addr << 1);
 8003766:	005b      	lsls	r3, r3, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8003768:	9600      	str	r6, [sp, #0]
 800376a:	b299      	uxth	r1, r3
	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800376c:	786b      	ldrb	r3, [r5, #1]
 800376e:	796a      	ldrb	r2, [r5, #5]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8003776:	f88d 3014 	strb.w	r3, [sp, #20]
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800377a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800377e:	2301      	movs	r3, #1
 8003780:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003784:	22f5      	movs	r2, #245	@ 0xf5
 8003786:	f008 f92b 	bl	800b9e0 <HAL_I2C_Mem_Write>
 800378a:	2800      	cmp	r0, #0
 800378c:	f47f aef6 	bne.w	800357c <bmp280_init+0x10>
	if (params->mode == BMP280_MODE_FORCED) {
 8003790:	f895 8000 	ldrb.w	r8, [r5]
			| (params->oversampling_pressure << 2) | (params->mode);
 8003794:	78ab      	ldrb	r3, [r5, #2]
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8003796:	78ea      	ldrb	r2, [r5, #3]
	if (params->mode == BMP280_MODE_FORCED) {
 8003798:	f1b8 0f01 	cmp.w	r8, #1
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800379c:	bf08      	it	eq
 800379e:	7028      	strbeq	r0, [r5, #0]
			| (params->oversampling_pressure << 2) | (params->mode);
 80037a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80037a4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	if (dev->id == BME280_CHIP_ID) {
 80037a8:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80037ac:	bf08      	it	eq
 80037ae:	4680      	moveq	r8, r0
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80037b0:	ea48 0803 	orr.w	r8, r8, r3
	if (dev->id == BME280_CHIP_ID) {
 80037b4:	2a60      	cmp	r2, #96	@ 0x60
 80037b6:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 80037b8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80037ba:	fa5f f888 	uxtb.w	r8, r8
	if (dev->id == BME280_CHIP_ID) {
 80037be:	d07a      	beq.n	80038b6 <bmp280_init+0x34a>
	tx_buff = (dev->addr << 1);
 80037c0:	005b      	lsls	r3, r3, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80037c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80037c6:	b299      	uxth	r1, r3
 80037c8:	2301      	movs	r3, #1
 80037ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80037ce:	9600      	str	r6, [sp, #0]
 80037d0:	22f4      	movs	r2, #244	@ 0xf4
 80037d2:	f88d 8014 	strb.w	r8, [sp, #20]
 80037d6:	f008 f903 	bl	800b9e0 <HAL_I2C_Mem_Write>
 80037da:	2800      	cmp	r0, #0
 80037dc:	f47f aece 	bne.w	800357c <bmp280_init+0x10>
 80037e0:	e6cd      	b.n	800357e <bmp280_init+0x12>
	tx_buff = (dev->addr << 1);
 80037e2:	005b      	lsls	r3, r3, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80037e4:	f04f 0801 	mov.w	r8, #1
 80037e8:	b299      	uxth	r1, r3
 80037ea:	f241 3988 	movw	r9, #5000	@ 0x1388
	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80037ee:	f104 0318 	add.w	r3, r4, #24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80037f8:	4643      	mov	r3, r8
 80037fa:	22a1      	movs	r2, #161	@ 0xa1
 80037fc:	f008 fa16 	bl	800bc2c <HAL_I2C_Mem_Read>
 8003800:	2800      	cmp	r0, #0
 8003802:	f47f aebb 	bne.w	800357c <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003806:	f8cd 9008 	str.w	r9, [sp, #8]
 800380a:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 800380c:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800380e:	2302      	movs	r3, #2
 8003810:	9301      	str	r3, [sp, #4]
	tx_buff = (dev->addr << 1);
 8003812:	fa01 f108 	lsl.w	r1, r1, r8
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003816:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003818:	b289      	uxth	r1, r1
 800381a:	4643      	mov	r3, r8
 800381c:	22e1      	movs	r2, #225	@ 0xe1
 800381e:	f008 fa05 	bl	800bc2c <HAL_I2C_Mem_Read>
 8003822:	2800      	cmp	r0, #0
 8003824:	f47f aeaa 	bne.w	800357c <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003828:	e9cd 8901 	strd	r8, r9, [sp, #4]
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800382c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	tx_buff = (dev->addr << 1);
 8003830:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8003832:	8363      	strh	r3, [r4, #26]
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8003834:	f104 031c 	add.w	r3, r4, #28
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003838:	9300      	str	r3, [sp, #0]
	tx_buff = (dev->addr << 1);
 800383a:	fa01 f108 	lsl.w	r1, r1, r8
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800383e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003840:	b289      	uxth	r1, r1
 8003842:	4643      	mov	r3, r8
 8003844:	22e3      	movs	r2, #227	@ 0xe3
 8003846:	f008 f9f1 	bl	800bc2c <HAL_I2C_Mem_Read>
 800384a:	2800      	cmp	r0, #0
 800384c:	f47f ae96 	bne.w	800357c <bmp280_init+0x10>
			&& read_register16(dev, 0xe4, &h4)
 8003850:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003852:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8003854:	f10d 0312 	add.w	r3, sp, #18
 8003858:	22e4      	movs	r2, #228	@ 0xe4
 800385a:	f7ff fe69 	bl	8003530 <read_register16.isra.0>
 800385e:	2800      	cmp	r0, #0
 8003860:	f43f ae8c 	beq.w	800357c <bmp280_init+0x10>
			&& read_register16(dev, 0xe5, &h5)
 8003864:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003866:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8003868:	4633      	mov	r3, r6
 800386a:	22e5      	movs	r2, #229	@ 0xe5
 800386c:	f7ff fe60 	bl	8003530 <read_register16.isra.0>
 8003870:	2800      	cmp	r0, #0
 8003872:	f43f ae83 	beq.w	800357c <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003876:	e9cd 8901 	strd	r8, r9, [sp, #4]
	tx_buff = (dev->addr << 1);
 800387a:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800387c:	f104 0222 	add.w	r2, r4, #34	@ 0x22
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003880:	4643      	mov	r3, r8
 8003882:	9200      	str	r2, [sp, #0]
	tx_buff = (dev->addr << 1);
 8003884:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003886:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003888:	b289      	uxth	r1, r1
 800388a:	22e7      	movs	r2, #231	@ 0xe7
 800388c:	f008 f9ce 	bl	800bc2c <HAL_I2C_Mem_Read>
 8003890:	2800      	cmp	r0, #0
 8003892:	f47f ae73 	bne.w	800357c <bmp280_init+0x10>
		dev->dig_H5 = h5 >> 4;
 8003896:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800389a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800389e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
		dev->dig_H5 = h5 >> 4;
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	8423      	strh	r3, [r4, #32]
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80038a4:	0113      	lsls	r3, r2, #4
 80038a6:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80038aa:	f3c2 2203 	ubfx	r2, r2, #8, #4
 80038ae:	4313      	orrs	r3, r2
 80038b0:	83e3      	strh	r3, [r4, #30]
		return true;
 80038b2:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 80038b4:	e757      	b.n	8003766 <bmp280_init+0x1fa>
	tx_buff = (dev->addr << 1);
 80038b6:	005b      	lsls	r3, r3, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80038b8:	b299      	uxth	r1, r3
 80038ba:	792b      	ldrb	r3, [r5, #4]
 80038bc:	f88d 3014 	strb.w	r3, [sp, #20]
 80038c0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80038c4:	2301      	movs	r3, #1
 80038c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80038ca:	9600      	str	r6, [sp, #0]
 80038cc:	22f2      	movs	r2, #242	@ 0xf2
 80038ce:	f008 f887 	bl	800b9e0 <HAL_I2C_Mem_Write>
 80038d2:	2800      	cmp	r0, #0
 80038d4:	f47f ae52 	bne.w	800357c <bmp280_init+0x10>
 80038d8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80038da:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 80038dc:	e770      	b.n	80037c0 <bmp280_init+0x254>
 80038de:	bf00      	nop

080038e0 <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 80038e0:	b530      	push	{r4, r5, lr}
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80038e2:	f241 3288 	movw	r2, #5000	@ 0x1388
bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 80038e6:	b087      	sub	sp, #28
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80038e8:	2501      	movs	r5, #1
	tx_buff = (dev->addr << 1);
 80038ea:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80038ec:	e9cd 5201 	strd	r5, r2, [sp, #4]
 80038f0:	f10d 0316 	add.w	r3, sp, #22
 80038f4:	9300      	str	r3, [sp, #0]
	tx_buff = (dev->addr << 1);
 80038f6:	40a9      	lsls	r1, r5
bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 80038f8:	4604      	mov	r4, r0
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80038fa:	b289      	uxth	r1, r1
 80038fc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80038fe:	462b      	mov	r3, r5
 8003900:	22f4      	movs	r2, #244	@ 0xf4
 8003902:	f008 f993 	bl	800bc2c <HAL_I2C_Mem_Read>
 8003906:	b110      	cbz	r0, 800390e <bmp280_force_measurement+0x2e>
	uint8_t ctrl;
	if (read_data(dev, BMP280_REG_CTRL, &ctrl, 1))
		return false;
 8003908:	2000      	movs	r0, #0
	ctrl |= BMP280_MODE_FORCED;
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
		return false;
	}
	return true;
}
 800390a:	b007      	add	sp, #28
 800390c:	bd30      	pop	{r4, r5, pc}
	ctrl &= ~0b11;  // clear two lower bits
 800390e:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8003912:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8003914:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003916:	f242 7310 	movw	r3, #10000	@ 0x2710
	ctrl &= ~0b11;  // clear two lower bits
 800391a:	f022 0203 	bic.w	r2, r2, #3
	ctrl |= BMP280_MODE_FORCED;
 800391e:	432a      	orrs	r2, r5
	tx_buff = (dev->addr << 1);
 8003920:	40a9      	lsls	r1, r5
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8003922:	9302      	str	r3, [sp, #8]
 8003924:	f10d 0317 	add.w	r3, sp, #23
 8003928:	e9cd 3500 	strd	r3, r5, [sp]
	ctrl |= BMP280_MODE_FORCED;
 800392c:	f88d 2016 	strb.w	r2, [sp, #22]
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8003930:	f88d 2017 	strb.w	r2, [sp, #23]
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8003934:	b289      	uxth	r1, r1
 8003936:	462b      	mov	r3, r5
 8003938:	22f4      	movs	r2, #244	@ 0xf4
 800393a:	f008 f851 	bl	800b9e0 <HAL_I2C_Mem_Write>
 800393e:	2800      	cmp	r0, #0
 8003940:	d1e2      	bne.n	8003908 <bmp280_force_measurement+0x28>
	return true;
 8003942:	4628      	mov	r0, r5
}
 8003944:	b007      	add	sp, #28
 8003946:	bd30      	pop	{r4, r5, pc}

08003948 <bmp280_is_measuring>:

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8003948:	b510      	push	{r4, lr}
	tx_buff = (dev->addr << 1);
 800394a:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800394c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 800394e:	b086      	sub	sp, #24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003950:	2301      	movs	r3, #1
 8003952:	f10d 0217 	add.w	r2, sp, #23
 8003956:	f241 3488 	movw	r4, #5000	@ 0x1388
	tx_buff = (dev->addr << 1);
 800395a:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800395c:	9200      	str	r2, [sp, #0]
 800395e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003962:	b289      	uxth	r1, r1
 8003964:	22f3      	movs	r2, #243	@ 0xf3
 8003966:	f008 f961 	bl	800bc2c <HAL_I2C_Mem_Read>
 800396a:	b110      	cbz	r0, 8003972 <bmp280_is_measuring+0x2a>
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
		return false;
 800396c:	2000      	movs	r0, #0
	if (status & (1 << 3)) {
		return true;
	}
	return false;
}
 800396e:	b006      	add	sp, #24
 8003970:	bd10      	pop	{r4, pc}
	if (status & (1 << 3)) {
 8003972:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003976:	f3c0 00c0 	ubfx	r0, r0, #3, #1
}
 800397a:	b006      	add	sp, #24
 800397c:	bd10      	pop	{r4, pc}
 800397e:	bf00      	nop

08003980 <bmp280_read_fixed>:
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
	return v_x1_u32r >> 12;
}

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8003980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003984:	4604      	mov	r4, r0
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8003986:	f890 0032 	ldrb.w	r0, [r0, #50]	@ 0x32
		uint32_t *humidity) {
 800398a:	b08f      	sub	sp, #60	@ 0x3c
	if (dev->id != BME280_CHIP_ID) {
 800398c:	2860      	cmp	r0, #96	@ 0x60
		uint32_t *humidity) {
 800398e:	4688      	mov	r8, r1
 8003990:	9205      	str	r2, [sp, #20]
 8003992:	461e      	mov	r6, r3
	if (dev->id != BME280_CHIP_ID) {
 8003994:	f000 8153 	beq.w	8003c3e <bmp280_read_fixed+0x2be>
		if (humidity)
 8003998:	b10b      	cbz	r3, 800399e <bmp280_read_fixed+0x1e>
			*humidity = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	6033      	str	r3, [r6, #0]
 800399e:	2306      	movs	r3, #6
 80039a0:	2600      	movs	r6, #0
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80039a6:	9300      	str	r3, [sp, #0]
	tx_buff = (dev->addr << 1);
 80039a8:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80039aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ae:	2301      	movs	r3, #1
 80039b0:	9202      	str	r2, [sp, #8]
	tx_buff = (dev->addr << 1);
 80039b2:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80039b4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80039b6:	b289      	uxth	r1, r1
 80039b8:	22f7      	movs	r2, #247	@ 0xf7
 80039ba:	f008 f937 	bl	800bc2c <HAL_I2C_Mem_Read>
 80039be:	2800      	cmp	r0, #0
 80039c0:	f040 8139 	bne.w	8003c36 <bmp280_read_fixed+0x2b6>
	if (read_data(dev, 0xf7, data, size)) {
		return false;
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80039c4:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 80039c8:	f89d 2033 	ldrb.w	r2, [sp, #51]	@ 0x33
 80039cc:	f89d 1035 	ldrb.w	r1, [sp, #53]	@ 0x35
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80039d0:	f9b4 c00a 	ldrsh.w	ip, [r4, #10]
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80039d4:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 80039d8:	9706      	str	r7, [sp, #24]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80039e0:	8822      	ldrh	r2, [r4, #0]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80039e2:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80039e6:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80039ea:	fb03 f503 	mul.w	r5, r3, r3
			* (int32_t) dev->dig_T3) >> 14;
 80039ee:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80039f2:	132d      	asrs	r5, r5, #12
			* (int32_t) dev->dig_T3) >> 14;
 80039f4:	fb03 f505 	mul.w	r5, r3, r5
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80039f8:	0052      	lsls	r2, r2, #1
			* (int32_t) dev->dig_T2) >> 11;
 80039fa:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80039fe:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
			* (int32_t) dev->dig_T2) >> 11;
 8003a02:	fb03 f202 	mul.w	r2, r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8003a06:	13ad      	asrs	r5, r5, #14
	*fine_temp = var1 + var2;
 8003a08:	eb05 25e2 	add.w	r5, r5, r2, asr #11
	return (*fine_temp * 5 + 128) >> 8;
 8003a0c:	eb05 0985 	add.w	r9, r5, r5, lsl #2
 8003a10:	f109 0980 	add.w	r9, r9, #128	@ 0x80
 8003a14:	ea4f 2929 	mov.w	r9, r9, asr #8
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8003a18:	88e1      	ldrh	r1, [r4, #6]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8003a1a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8003a1e:	f8c8 9000 	str.w	r9, [r8]
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8003a22:	f89d 8031 	ldrb.w	r8, [sp, #49]	@ 0x31
 8003a26:	f8cd 801c 	str.w	r8, [sp, #28]
 8003a2a:	f89d 8032 	ldrb.w	r8, [sp, #50]	@ 0x32
 8003a2e:	f8cd 8020 	str.w	r8, [sp, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003a32:	f9b4 8010 	ldrsh.w	r8, [r4, #16]
 8003a36:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8003a3a:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
 8003a3e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003a42:	f5a5 3efa 	sub.w	lr, r5, #128000	@ 0x1f400
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8003a46:	f9b4 800c 	ldrsh.w	r8, [r4, #12]
 8003a4a:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003a4e:	fb8e 890e 	smull	r8, r9, lr, lr
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8003a52:	ea4f 7bec 	mov.w	fp, ip, asr #31
 8003a56:	fb0c fa09 	mul.w	sl, ip, r9
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8003a5a:	fb82 230e 	smull	r2, r3, r2, lr
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8003a5e:	fb08 aa0b 	mla	sl, r8, fp, sl
 8003a62:	fbac cb08 	umull	ip, fp, ip, r8
 8003a66:	44d3      	add	fp, sl
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8003a68:	031b      	lsls	r3, r3, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8003a6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8003a6e:	ea43 5312 	orr.w	r3, r3, r2, lsr #20
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8003a72:	ea4c 6c0b 	orr.w	ip, ip, fp, lsl #24
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8003a76:	0312      	lsls	r2, r2, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8003a78:	eb1c 0c02 	adds.w	ip, ip, r2
 8003a7c:	eb43 232b 	adc.w	r3, r3, fp, asr #8
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8003a80:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003a84:	fbac c201 	umull	ip, r2, ip, r1
 8003a88:	fb01 2103 	mla	r1, r1, r3, r2
 8003a8c:	17cb      	asrs	r3, r1, #31
 8003a8e:	104a      	asrs	r2, r1, #1
	if (var1 == 0) {
 8003a90:	ea53 0161 	orrs.w	r1, r3, r1, asr #1
 8003a94:	f000 808a 	beq.w	8003bac <bmp280_read_fixed+0x22c>
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8003a98:	9908      	ldr	r1, [sp, #32]
 8003a9a:	9f07      	ldr	r7, [sp, #28]
 8003a9c:	0909      	lsrs	r1, r1, #4
 8003a9e:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 8003aa2:	9f06      	ldr	r7, [sp, #24]
 8003aa4:	ea41 3107 	orr.w	r1, r1, r7, lsl #12
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8003aa8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8003aaa:	fb87 ec0e 	smull	lr, ip, r7, lr
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003aae:	9f09      	ldr	r7, [sp, #36]	@ 0x24
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8003ab0:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003ab4:	fb07 f909 	mul.w	r9, r7, r9
 8003ab8:	ea4f 7ae7 	mov.w	sl, r7, asr #31
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8003abc:	ea4c 3cde 	orr.w	ip, ip, lr, lsr #15
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003ac0:	fb08 9a0a 	mla	sl, r8, sl, r9
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8003ac4:	ea4f 4e4e 	mov.w	lr, lr, lsl #17
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003ac8:	fba7 9808 	umull	r9, r8, r7, r8
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8003acc:	eb1e 0e09 	adds.w	lr, lr, r9
	p = 1048576 - adc_press;
 8003ad0:	f5c1 1180 	rsb	r1, r1, #1048576	@ 0x100000
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003ad4:	44c2      	add	sl, r8
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8003ad6:	eb4a 0a0c 	adc.w	sl, sl, ip
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8003ada:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8003adc:	eb10 000e 	adds.w	r0, r0, lr
	p = (((p << 31) - var2) * 3125) / var1;
 8003ae0:	f001 4e00 	and.w	lr, r1, #2147483648	@ 0x80000000
 8003ae4:	ea4e 0e51 	orr.w	lr, lr, r1, lsr #1
 8003ae8:	07c9      	lsls	r1, r1, #31
 8003aea:	ebb1 0800 	subs.w	r8, r1, r0
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8003aee:	eb0a 0ac7 	add.w	sl, sl, r7, lsl #3
	p = (((p << 31) - var2) * 3125) / var1;
 8003af2:	eb6e 0e0a 	sbc.w	lr, lr, sl
 8003af6:	eb18 0c08 	adds.w	ip, r8, r8
 8003afa:	eb4e 010e 	adc.w	r1, lr, lr
 8003afe:	eb1c 0c08 	adds.w	ip, ip, r8
 8003b02:	eb4e 0101 	adc.w	r1, lr, r1
 8003b06:	0188      	lsls	r0, r1, #6
 8003b08:	ea4f 198c 	mov.w	r9, ip, lsl #6
 8003b0c:	ea40 609c 	orr.w	r0, r0, ip, lsr #26
 8003b10:	eb1c 0c09 	adds.w	ip, ip, r9
 8003b14:	eb41 0100 	adc.w	r1, r1, r0
 8003b18:	0089      	lsls	r1, r1, #2
 8003b1a:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8003b1e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003b22:	eb1c 0c08 	adds.w	ip, ip, r8
 8003b26:	eb4e 0101 	adc.w	r1, lr, r1
 8003b2a:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8003b2e:	0089      	lsls	r1, r1, #2
 8003b30:	eb10 0008 	adds.w	r0, r0, r8
 8003b34:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8003b38:	eb4e 0101 	adc.w	r1, lr, r1
 8003b3c:	f7fd f9f2 	bl	8000f24 <__aeabi_ldivmod>
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8003b40:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
	p = (((p << 31) - var2) * 3125) / var1;
 8003b44:	4684      	mov	ip, r0
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8003b46:	ea4f 3e5c 	mov.w	lr, ip, lsr #13
 8003b4a:	1348      	asrs	r0, r1, #13
 8003b4c:	ea4e 4ec1 	orr.w	lr, lr, r1, lsl #19
 8003b50:	17d3      	asrs	r3, r2, #31
 8003b52:	fb02 f800 	mul.w	r8, r2, r0
 8003b56:	fb0e 8903 	mla	r9, lr, r3, r8
 8003b5a:	fba2 280e 	umull	r2, r8, r2, lr
 8003b5e:	fb02 f000 	mul.w	r0, r2, r0
 8003b62:	44c8      	add	r8, r9
 8003b64:	fb0e 0008 	mla	r0, lr, r8, r0
 8003b68:	fba2 2e0e 	umull	r2, lr, r2, lr
 8003b6c:	4486      	add	lr, r0
 8003b6e:	0e52      	lsrs	r2, r2, #25
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8003b70:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8003b74:	ea42 12ce 	orr.w	r2, r2, lr, lsl #7
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8003b78:	eb12 000c 	adds.w	r0, r2, ip
 8003b7c:	eb41 626e 	adc.w	r2, r1, lr, asr #25
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8003b80:	fb03 f101 	mul.w	r1, r3, r1
 8003b84:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 8003b88:	fb0e 110c 	mla	r1, lr, ip, r1
 8003b8c:	fba3 3c0c 	umull	r3, ip, r3, ip
 8003b90:	4461      	add	r1, ip
 8003b92:	0cdb      	lsrs	r3, r3, #19
 8003b94:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8003b98:	18c0      	adds	r0, r0, r3
 8003b9a:	eb42 42e1 	adc.w	r2, r2, r1, asr #19
 8003b9e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8003ba2:	0a00      	lsrs	r0, r0, #8
 8003ba4:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
	return p;
 8003ba8:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8003bac:	9b05      	ldr	r3, [sp, #20]
 8003bae:	6018      	str	r0, [r3, #0]

	if (humidity) {
 8003bb0:	2e00      	cmp	r6, #0
 8003bb2:	d03c      	beq.n	8003c2e <bmp280_read_fixed+0x2ae>
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8003bb4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8003bb8:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8003bbc:	f994 1022 	ldrsb.w	r1, [r4, #34]	@ 0x22
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8003bc0:	ba5b      	rev16	r3, r3
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	0512      	lsls	r2, r2, #20
 8003bc6:	ebc2 3283 	rsb	r2, r2, r3, lsl #14
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8003bca:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
	v_x1_u32r = fine_temp - (int32_t) 76800;
 8003bce:	f5a5 3596 	sub.w	r5, r5, #76800	@ 0x12c00
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8003bd2:	fb05 2213 	mls	r2, r5, r3, r2
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8003bd6:	7f23      	ldrb	r3, [r4, #28]
 8003bd8:	fb05 f303 	mul.w	r3, r5, r3
 8003bdc:	12db      	asrs	r3, r3, #11
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8003bde:	fb05 f101 	mul.w	r1, r5, r1
 8003be2:	1289      	asrs	r1, r1, #10
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8003be4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8003bec:	129b      	asrs	r3, r3, #10
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8003bee:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8003bf2:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8003bf6:	fb01 f303 	mul.w	r3, r1, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8003bfa:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8003bfe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8003c02:	13d2      	asrs	r2, r2, #15
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8003c04:	139b      	asrs	r3, r3, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8003c0a:	13da      	asrs	r2, r3, #15
					* (int32_t) dev->dig_H1) >> 4);
 8003c0c:	7e21      	ldrb	r1, [r4, #24]
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8003c0e:	fb02 f202 	mul.w	r2, r2, r2
 8003c12:	11d2      	asrs	r2, r2, #7
					* (int32_t) dev->dig_H1) >> 4);
 8003c14:	fb01 f202 	mul.w	r2, r1, r2
	v_x1_u32r = v_x1_u32r
 8003c18:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8003c1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8003c20:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8003c24:	bfa8      	it	ge
 8003c26:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
	return v_x1_u32r >> 12;
 8003c2a:	131b      	asrs	r3, r3, #12
		int32_t adc_humidity = data[6] << 8 | data[7];
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8003c2c:	6033      	str	r3, [r6, #0]
	}

	return true;
 8003c2e:	2001      	movs	r0, #1
}
 8003c30:	b00f      	add	sp, #60	@ 0x3c
 8003c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
 8003c36:	2000      	movs	r0, #0
}
 8003c38:	b00f      	add	sp, #60	@ 0x3c
 8003c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t size = humidity ? 8 : 6;
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f43f aead 	beq.w	800399e <bmp280_read_fixed+0x1e>
 8003c44:	2308      	movs	r3, #8
 8003c46:	e6ac      	b.n	80039a2 <bmp280_read_fixed+0x22>

08003c48 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	460d      	mov	r5, r1
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	4616      	mov	r6, r2
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8003c50:	b313      	cbz	r3, 8003c98 <bmp280_read_float+0x50>
 8003c52:	461c      	mov	r4, r3
 8003c54:	aa02      	add	r2, sp, #8
 8003c56:	ab03      	add	r3, sp, #12
 8003c58:	a901      	add	r1, sp, #4
 8003c5a:	f7ff fe91 	bl	8003980 <bmp280_read_fixed>
 8003c5e:	b910      	cbnz	r0, 8003c66 <bmp280_read_float+0x1e>
		if (humidity)
			*humidity = (float) fixed_humidity / 1024;
		return true;
	}

	return false;
 8003c60:	2000      	movs	r0, #0
}
 8003c62:	b004      	add	sp, #16
 8003c64:	bd70      	pop	{r4, r5, r6, pc}
		*temperature = (float) fixed_temperature / 100;
 8003c66:	eddd 7a01 	vldr	s15, [sp, #4]
 8003c6a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003cc8 <bmp280_read_float+0x80>
 8003c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c72:	eec7 6a87 	vdiv.f32	s13, s15, s14
		*pressure = (float) fixed_pressure / 256;
 8003c76:	ed9d 7a02 	vldr	s14, [sp, #8]
			*humidity = (float) fixed_humidity / 1024;
 8003c7a:	eddd 7a03 	vldr	s15, [sp, #12]
		*temperature = (float) fixed_temperature / 100;
 8003c7e:	edc5 6a00 	vstr	s13, [r5]
		*pressure = (float) fixed_pressure / 256;
 8003c82:	eebb 7acc 	vcvt.f32.u32	s14, s14, #8
			*humidity = (float) fixed_humidity / 1024;
 8003c86:	eefb 7acb 	vcvt.f32.u32	s15, s15, #10
		*pressure = (float) fixed_pressure / 256;
 8003c8a:	ed86 7a00 	vstr	s14, [r6]
			*humidity = (float) fixed_humidity / 1024;
 8003c8e:	edc4 7a00 	vstr	s15, [r4]
		return true;
 8003c92:	2001      	movs	r0, #1
}
 8003c94:	b004      	add	sp, #16
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8003c98:	aa02      	add	r2, sp, #8
 8003c9a:	a901      	add	r1, sp, #4
 8003c9c:	f7ff fe70 	bl	8003980 <bmp280_read_fixed>
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d0dd      	beq.n	8003c60 <bmp280_read_float+0x18>
		*temperature = (float) fixed_temperature / 100;
 8003ca4:	eddd 7a01 	vldr	s15, [sp, #4]
 8003ca8:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8003cc8 <bmp280_read_float+0x80>
 8003cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		*pressure = (float) fixed_pressure / 256;
 8003cb4:	eddd 7a02 	vldr	s15, [sp, #8]
		*temperature = (float) fixed_temperature / 100;
 8003cb8:	ed85 7a00 	vstr	s14, [r5]
		*pressure = (float) fixed_pressure / 256;
 8003cbc:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
 8003cc0:	edc6 7a00 	vstr	s15, [r6]
		if (humidity)
 8003cc4:	e7e5      	b.n	8003c92 <bmp280_read_float+0x4a>
 8003cc6:	bf00      	nop
 8003cc8:	42c80000 	.word	0x42c80000

08003ccc <BQ25798_check>:
#define BQ25798_ADDR 0x6B << 1


// Checking
uint8_t BQ25798_check()
{
 8003ccc:	b570      	push	{r4, r5, r6, lr}
	HAL_StatusTypeDef status;
	uint8_t res;
	printf("Checking BQ25798 ... ");
 8003cce:	4815      	ldr	r0, [pc, #84]	@ (8003d24 <BQ25798_check+0x58>)
	for (int i = 0; i < 5; i++) {
		status = HAL_I2C_IsDeviceReady(&hi2c1, BQ25798_ADDR, 3, 1500);
 8003cd0:	4e15      	ldr	r6, [pc, #84]	@ (8003d28 <BQ25798_check+0x5c>)
	printf("Checking BQ25798 ... ");
 8003cd2:	f00d f827 	bl	8010d24 <iprintf>
 8003cd6:	2505      	movs	r5, #5
		status = HAL_I2C_IsDeviceReady(&hi2c1, BQ25798_ADDR, 3, 1500);
 8003cd8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003cdc:	2203      	movs	r2, #3
 8003cde:	21d6      	movs	r1, #214	@ 0xd6
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	f008 f8c1 	bl	800be68 <HAL_I2C_IsDeviceReady>
 8003ce6:	4604      	mov	r4, r0
		osDelay(50);
 8003ce8:	2032      	movs	r0, #50	@ 0x32
 8003cea:	f00a f853 	bl	800dd94 <osDelay>
	    	BQ25798_set_ADC();
	    	res = OK;
	        break;
	    } else {
	    	res = FAULT;
	    	osDelay(500);
 8003cee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
	    if (status == HAL_OK) {
 8003cf2:	b144      	cbz	r4, 8003d06 <BQ25798_check+0x3a>
	    	osDelay(500);
 8003cf4:	f00a f84e 	bl	800dd94 <osDelay>
	for (int i = 0; i < 5; i++) {
 8003cf8:	3d01      	subs	r5, #1
 8003cfa:	d1ed      	bne.n	8003cd8 <BQ25798_check+0xc>
	    }
	}
	if(res == FAULT) printf("not ready\r\n");
 8003cfc:	480b      	ldr	r0, [pc, #44]	@ (8003d2c <BQ25798_check+0x60>)
 8003cfe:	f00d f879 	bl	8010df4 <puts>
 8003d02:	4628      	mov	r0, r5
	return res;
}
 8003d04:	bd70      	pop	{r4, r5, r6, pc}
	    	printf("OK !\r\n");
 8003d06:	480a      	ldr	r0, [pc, #40]	@ (8003d30 <BQ25798_check+0x64>)
 8003d08:	f00d f874 	bl	8010df4 <puts>

void BQ25798_set_ADC()
{
	uint8_t reg;
	reg = 0b10000000;
	i2c_write8(&hi2c1, REG2E_ADC_Control, reg, BQ25798_ADDR);
 8003d0c:	23d6      	movs	r3, #214	@ 0xd6
 8003d0e:	2280      	movs	r2, #128	@ 0x80
 8003d10:	212e      	movs	r1, #46	@ 0x2e
 8003d12:	4805      	ldr	r0, [pc, #20]	@ (8003d28 <BQ25798_check+0x5c>)
 8003d14:	f005 fc2a 	bl	800956c <i2c_write8>
	osDelay(1);
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f00a f83b 	bl	800dd94 <osDelay>
	    	res = OK;
 8003d1e:	2001      	movs	r0, #1
}
 8003d20:	bd70      	pop	{r4, r5, r6, pc}
 8003d22:	bf00      	nop
 8003d24:	08015570 	.word	0x08015570
 8003d28:	20001800 	.word	0x20001800
 8003d2c:	08015588 	.word	0x08015588
 8003d30:	08016e0c 	.word	0x08016e0c

08003d34 <BQ25798_Vbat_read>:
}

uint16_t BQ25798_Vbat_read()
{
 8003d34:	b500      	push	{lr}
 8003d36:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG3B_VBAT_ADC, &value, BQ25798_ADDR);
 8003d38:	23d6      	movs	r3, #214	@ 0xd6
 8003d3a:	f10d 0206 	add.w	r2, sp, #6
 8003d3e:	213b      	movs	r1, #59	@ 0x3b
 8003d40:	4804      	ldr	r0, [pc, #16]	@ (8003d54 <BQ25798_Vbat_read+0x20>)
 8003d42:	f005 fbfd 	bl	8009540 <i2c_read16>
    return byteswap16(value);
 8003d46:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003d4a:	f005 fc8d 	bl	8009668 <byteswap16>
}
 8003d4e:	b003      	add	sp, #12
 8003d50:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d54:	20001800 	.word	0x20001800

08003d58 <BQ25798_Vsys_read>:

uint16_t BQ25798_Vsys_read()
{
 8003d58:	b500      	push	{lr}
 8003d5a:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG3D_VSYS_ADC, &value, BQ25798_ADDR);
 8003d5c:	23d6      	movs	r3, #214	@ 0xd6
 8003d5e:	f10d 0206 	add.w	r2, sp, #6
 8003d62:	213d      	movs	r1, #61	@ 0x3d
 8003d64:	4804      	ldr	r0, [pc, #16]	@ (8003d78 <BQ25798_Vsys_read+0x20>)
 8003d66:	f005 fbeb 	bl	8009540 <i2c_read16>
    return byteswap16(value);
 8003d6a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003d6e:	f005 fc7b 	bl	8009668 <byteswap16>
}
 8003d72:	b003      	add	sp, #12
 8003d74:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d78:	20001800 	.word	0x20001800

08003d7c <BQ25798_Vac1_read>:
    i2c_read16(&hi2c1, REG35_VBUS_ADC, &value, BQ25798_ADDR);
    return byteswap16(value);
}

uint16_t BQ25798_Vac1_read()
{
 8003d7c:	b500      	push	{lr}
 8003d7e:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG37_VAC1_ADC, &value, BQ25798_ADDR);
 8003d80:	23d6      	movs	r3, #214	@ 0xd6
 8003d82:	f10d 0206 	add.w	r2, sp, #6
 8003d86:	2137      	movs	r1, #55	@ 0x37
 8003d88:	4804      	ldr	r0, [pc, #16]	@ (8003d9c <BQ25798_Vac1_read+0x20>)
 8003d8a:	f005 fbd9 	bl	8009540 <i2c_read16>
    return byteswap16(value);
 8003d8e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003d92:	f005 fc69 	bl	8009668 <byteswap16>
}
 8003d96:	b003      	add	sp, #12
 8003d98:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d9c:	20001800 	.word	0x20001800

08003da0 <BQ25798_Vac2_read>:

uint16_t BQ25798_Vac2_read()
{
 8003da0:	b500      	push	{lr}
 8003da2:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG39_VAC2_ADC, &value, BQ25798_ADDR);
 8003da4:	23d6      	movs	r3, #214	@ 0xd6
 8003da6:	f10d 0206 	add.w	r2, sp, #6
 8003daa:	2139      	movs	r1, #57	@ 0x39
 8003dac:	4804      	ldr	r0, [pc, #16]	@ (8003dc0 <BQ25798_Vac2_read+0x20>)
 8003dae:	f005 fbc7 	bl	8009540 <i2c_read16>
    return byteswap16(value);
 8003db2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003db6:	f005 fc57 	bl	8009668 <byteswap16>
}
 8003dba:	b003      	add	sp, #12
 8003dbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dc0:	20001800 	.word	0x20001800

08003dc4 <BQ25798_Ibus_read>:

uint16_t BQ25798_Ibus_read()
{
 8003dc4:	b500      	push	{lr}
 8003dc6:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG31_IBUS_ADC, &value, BQ25798_ADDR);
 8003dc8:	23d6      	movs	r3, #214	@ 0xd6
 8003dca:	f10d 0206 	add.w	r2, sp, #6
 8003dce:	2131      	movs	r1, #49	@ 0x31
 8003dd0:	4804      	ldr	r0, [pc, #16]	@ (8003de4 <BQ25798_Ibus_read+0x20>)
 8003dd2:	f005 fbb5 	bl	8009540 <i2c_read16>
    return byteswap16(value);
 8003dd6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003dda:	f005 fc45 	bl	8009668 <byteswap16>
}
 8003dde:	b003      	add	sp, #12
 8003de0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003de4:	20001800 	.word	0x20001800

08003de8 <BQ25798_Ibat_read>:

uint16_t BQ25798_Ibat_read()
{
 8003de8:	b500      	push	{lr}
 8003dea:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG33_IBAT_ADC, &value, BQ25798_ADDR);
 8003dec:	23d6      	movs	r3, #214	@ 0xd6
 8003dee:	f10d 0206 	add.w	r2, sp, #6
 8003df2:	2133      	movs	r1, #51	@ 0x33
 8003df4:	4804      	ldr	r0, [pc, #16]	@ (8003e08 <BQ25798_Ibat_read+0x20>)
 8003df6:	f005 fba3 	bl	8009540 <i2c_read16>
    return byteswap16(value);
 8003dfa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003dfe:	f005 fc33 	bl	8009668 <byteswap16>
}
 8003e02:	b003      	add	sp, #12
 8003e04:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e08:	20001800 	.word	0x20001800

08003e0c <BQ25798_Sys_Min_Voltage_read>:

uint16_t BQ25798_Sys_Min_Voltage_read()
{
 8003e0c:	b500      	push	{lr}
 8003e0e:	b087      	sub	sp, #28
	uint8_t value;
	uint8_t mask = 0x3F;
	uint16_t voltage;
    HAL_I2C_Mem_Read(&hi2c1, BQ25798_ADDR, REG00_Minimal_System_Voltage, I2C_MEMADD_SIZE_8BIT, &value, 1, 500);
 8003e10:	2301      	movs	r3, #1
 8003e12:	f10d 0217 	add.w	r2, sp, #23
 8003e16:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003e1a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8003e1e:	9200      	str	r2, [sp, #0]
 8003e20:	21d6      	movs	r1, #214	@ 0xd6
 8003e22:	2200      	movs	r2, #0
 8003e24:	4808      	ldr	r0, [pc, #32]	@ (8003e48 <BQ25798_Sys_Min_Voltage_read+0x3c>)
 8003e26:	f007 ff01 	bl	800bc2c <HAL_I2C_Mem_Read>
    voltage= value & mask;
 8003e2a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003e2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
    voltage *= 250;
 8003e32:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8003e36:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8003e3a:	0040      	lsls	r0, r0, #1
    voltage += 2500;
 8003e3c:	f600 10c4 	addw	r0, r0, #2500	@ 0x9c4
    return voltage;
 8003e40:	b280      	uxth	r0, r0
}
 8003e42:	b007      	add	sp, #28
 8003e44:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e48:	20001800 	.word	0x20001800

08003e4c <BQ25798_Chr_Volt_Limit_read>:

uint16_t BQ25798_Chr_Volt_Limit_read()
{
 8003e4c:	b500      	push	{lr}
 8003e4e:	b083      	sub	sp, #12
	uint16_t value;
	i2c_read16(&hi2c1, REG01_Charge_Voltage_Limit, &value, BQ25798_ADDR);
 8003e50:	23d6      	movs	r3, #214	@ 0xd6
 8003e52:	f10d 0206 	add.w	r2, sp, #6
 8003e56:	2101      	movs	r1, #1
 8003e58:	4806      	ldr	r0, [pc, #24]	@ (8003e74 <BQ25798_Chr_Volt_Limit_read+0x28>)
 8003e5a:	f005 fb71 	bl	8009540 <i2c_read16>
    uint16_t swapvalue = byteswap16(value);
 8003e5e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003e62:	f005 fc01 	bl	8009668 <byteswap16>
    return swapvalue * 10;
 8003e66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e6a:	0040      	lsls	r0, r0, #1
 8003e6c:	b280      	uxth	r0, r0
}
 8003e6e:	b003      	add	sp, #12
 8003e70:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e74:	20001800 	.word	0x20001800

08003e78 <BQ25798_Chr_Curr_Limit_read>:

uint16_t BQ25798_Chr_Curr_Limit_read()
{
 8003e78:	b500      	push	{lr}
 8003e7a:	b083      	sub	sp, #12
	uint16_t value;
	i2c_read16(&hi2c1, REG03_Charge_Current_Limit, &value, BQ25798_ADDR);
 8003e7c:	23d6      	movs	r3, #214	@ 0xd6
 8003e7e:	f10d 0206 	add.w	r2, sp, #6
 8003e82:	2103      	movs	r1, #3
 8003e84:	4806      	ldr	r0, [pc, #24]	@ (8003ea0 <BQ25798_Chr_Curr_Limit_read+0x28>)
 8003e86:	f005 fb5b 	bl	8009540 <i2c_read16>
    uint16_t swapvalue = byteswap16(value);
 8003e8a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003e8e:	f005 fbeb 	bl	8009668 <byteswap16>
    return swapvalue * 10;
 8003e92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e96:	0040      	lsls	r0, r0, #1
 8003e98:	b280      	uxth	r0, r0
}
 8003e9a:	b003      	add	sp, #12
 8003e9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ea0:	20001800 	.word	0x20001800

08003ea4 <BQ25798_Sys_Min_Voltage_write>:

uint8_t BQ25798_Sys_Min_Voltage_write(uint8_t bits) // 6 bits multiplier (2500mV + 6bits * 250mV) e.g 3000mV = 2500 + 3*250 = 3,25V / bits=3
{
 8003ea4:	4602      	mov	r2, r0
	uint8_t res;
    res = i2c_write8(&hi2c1, REG00_Minimal_System_Voltage, (bits & 0x3F), BQ25798_ADDR);
 8003ea6:	23d6      	movs	r3, #214	@ 0xd6
 8003ea8:	4802      	ldr	r0, [pc, #8]	@ (8003eb4 <BQ25798_Sys_Min_Voltage_write+0x10>)
 8003eaa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003eae:	2100      	movs	r1, #0
 8003eb0:	f005 bb5c 	b.w	800956c <i2c_write8>
 8003eb4:	20001800 	.word	0x20001800

08003eb8 <BQ25798_Chr_Volt_Limit_write>:
}

uint8_t BQ25798_Chr_Volt_Limit_write(uint16_t val)
{
	uint8_t res;
	val /= 10;
 8003eb8:	4b07      	ldr	r3, [pc, #28]	@ (8003ed8 <BQ25798_Chr_Volt_Limit_write+0x20>)
{
 8003eba:	b510      	push	{r4, lr}
	val /= 10;
 8003ebc:	fba3 3000 	umull	r3, r0, r3, r0
	res = i2c_write16(&hi2c1, REG01_Charge_Voltage_Limit, byteswap16(val), BQ25798_ADDR);
 8003ec0:	08c0      	lsrs	r0, r0, #3
 8003ec2:	f005 fbd1 	bl	8009668 <byteswap16>
    return res;
}
 8003ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	res = i2c_write16(&hi2c1, REG01_Charge_Voltage_Limit, byteswap16(val), BQ25798_ADDR);
 8003eca:	4602      	mov	r2, r0
 8003ecc:	23d6      	movs	r3, #214	@ 0xd6
 8003ece:	4803      	ldr	r0, [pc, #12]	@ (8003edc <BQ25798_Chr_Volt_Limit_write+0x24>)
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	f005 bb5f 	b.w	8009594 <i2c_write16>
 8003ed6:	bf00      	nop
 8003ed8:	cccccccd 	.word	0xcccccccd
 8003edc:	20001800 	.word	0x20001800

08003ee0 <BQ25798_Chr_Curr_Limit_write>:

uint8_t BQ25798_Chr_Curr_Limit_write(uint16_t val)
{
	uint8_t res;
	val /= 10;
 8003ee0:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <BQ25798_Chr_Curr_Limit_write+0x20>)
{
 8003ee2:	b510      	push	{r4, lr}
	val /= 10;
 8003ee4:	fba3 3000 	umull	r3, r0, r3, r0
	res = i2c_write16(&hi2c1, REG03_Charge_Current_Limit, byteswap16(val), BQ25798_ADDR);
 8003ee8:	08c0      	lsrs	r0, r0, #3
 8003eea:	f005 fbbd 	bl	8009668 <byteswap16>
    return res;
}
 8003eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	res = i2c_write16(&hi2c1, REG03_Charge_Current_Limit, byteswap16(val), BQ25798_ADDR);
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	23d6      	movs	r3, #214	@ 0xd6
 8003ef6:	4803      	ldr	r0, [pc, #12]	@ (8003f04 <BQ25798_Chr_Curr_Limit_write+0x24>)
 8003ef8:	2103      	movs	r1, #3
 8003efa:	f005 bb4b 	b.w	8009594 <i2c_write16>
 8003efe:	bf00      	nop
 8003f00:	cccccccd 	.word	0xcccccccd
 8003f04:	20001800 	.word	0x20001800

08003f08 <BQ25798_Chr_Input_Voltage_Limit_write>:

uint8_t BQ25798_Chr_Input_Voltage_Limit_write(uint8_t val)
{
 8003f08:	4602      	mov	r2, r0
	uint8_t res;
	res = i2c_write8(&hi2c1, REG05_Input_Voltage_Limit, val, BQ25798_ADDR);
 8003f0a:	23d6      	movs	r3, #214	@ 0xd6
 8003f0c:	4801      	ldr	r0, [pc, #4]	@ (8003f14 <BQ25798_Chr_Input_Voltage_Limit_write+0xc>)
 8003f0e:	2105      	movs	r1, #5
 8003f10:	f005 bb2c 	b.w	800956c <i2c_write8>
 8003f14:	20001800 	.word	0x20001800

08003f18 <BQ25798_Chr_Input_Curr_Limit_write>:
    return res;
}

uint8_t BQ25798_Chr_Input_Curr_Limit_write(uint16_t val)
{
 8003f18:	b510      	push	{r4, lr}
	uint8_t res;
	res = i2c_write16(&hi2c1, REG06_Input_Current_Limit, byteswap16(val), BQ25798_ADDR);
 8003f1a:	f005 fba5 	bl	8009668 <byteswap16>
    return res;
}
 8003f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	res = i2c_write16(&hi2c1, REG06_Input_Current_Limit, byteswap16(val), BQ25798_ADDR);
 8003f22:	4602      	mov	r2, r0
 8003f24:	23d6      	movs	r3, #214	@ 0xd6
 8003f26:	4802      	ldr	r0, [pc, #8]	@ (8003f30 <BQ25798_Chr_Input_Curr_Limit_write+0x18>)
 8003f28:	2106      	movs	r1, #6
 8003f2a:	f005 bb33 	b.w	8009594 <i2c_write16>
 8003f2e:	bf00      	nop
 8003f30:	20001800 	.word	0x20001800

08003f34 <BQ25798_Chrg_CTRL1_write>:

uint8_t BQ25798_Chrg_CTRL1_write(uint8_t hex_val)
{
 8003f34:	4602      	mov	r2, r0
	uint8_t res;
    res = i2c_write8(&hi2c1, REG10_Charger_Control_1, hex_val, BQ25798_ADDR);
 8003f36:	23d6      	movs	r3, #214	@ 0xd6
 8003f38:	4801      	ldr	r0, [pc, #4]	@ (8003f40 <BQ25798_Chrg_CTRL1_write+0xc>)
 8003f3a:	2110      	movs	r1, #16
 8003f3c:	f005 bb16 	b.w	800956c <i2c_write8>
 8003f40:	20001800 	.word	0x20001800

08003f44 <BQ25798_Chrg_NTC_CTRL1_write>:
    return res;
}

uint8_t BQ25798_Chrg_NTC_CTRL1_write(uint8_t hex_val)
{
 8003f44:	4602      	mov	r2, r0
	uint8_t res;
    res = i2c_write8(&hi2c1, REG18_NTC_Control_1, hex_val, BQ25798_ADDR);
 8003f46:	23d6      	movs	r3, #214	@ 0xd6
 8003f48:	4801      	ldr	r0, [pc, #4]	@ (8003f50 <BQ25798_Chrg_NTC_CTRL1_write+0xc>)
 8003f4a:	2118      	movs	r1, #24
 8003f4c:	f005 bb0e 	b.w	800956c <i2c_write8>
 8003f50:	20001800 	.word	0x20001800

08003f54 <BQ25798_WD_RST>:
    return res;
}

uint8_t BQ25798_WD_RST()
{
 8003f54:	b510      	push	{r4, lr}
	uint8_t res, value;
	i2c_read8(&hi2c1, REG10_Charger_Control_1, &value, BQ25798_ADDR);
 8003f56:	4c0c      	ldr	r4, [pc, #48]	@ (8003f88 <BQ25798_WD_RST+0x34>)
{
 8003f58:	b082      	sub	sp, #8
	i2c_read8(&hi2c1, REG10_Charger_Control_1, &value, BQ25798_ADDR);
 8003f5a:	23d6      	movs	r3, #214	@ 0xd6
 8003f5c:	f10d 0207 	add.w	r2, sp, #7
 8003f60:	2110      	movs	r1, #16
 8003f62:	4620      	mov	r0, r4
 8003f64:	f005 fad8 	bl	8009518 <i2c_read8>
//	printf("Reset REG (read): %x\r\n", value);
	setBit(&value,3,1);
 8003f68:	f10d 0007 	add.w	r0, sp, #7
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	2103      	movs	r1, #3
 8003f70:	f005 fb26 	bl	80095c0 <setBit>
//	printf("Reset REG (reset): %x\r\n", value);
    res = i2c_write8(&hi2c1, REG10_Charger_Control_1, value, BQ25798_ADDR);
 8003f74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003f78:	23d6      	movs	r3, #214	@ 0xd6
 8003f7a:	2110      	movs	r1, #16
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f005 faf5 	bl	800956c <i2c_write8>
    return res;
}
 8003f82:	b002      	add	sp, #8
 8003f84:	bd10      	pop	{r4, pc}
 8003f86:	bf00      	nop
 8003f88:	20001800 	.word	0x20001800

08003f8c <BQ25798_MPPT_CTRL>:

uint8_t BQ25798_MPPT_CTRL(uint8_t set)
{
 8003f8c:	b530      	push	{r4, r5, lr}
	uint8_t res, value;
	i2c_read8(&hi2c1, REG15_MPPT_Control, &value, BQ25798_ADDR);
 8003f8e:	4d0c      	ldr	r5, [pc, #48]	@ (8003fc0 <BQ25798_MPPT_CTRL+0x34>)
{
 8003f90:	b083      	sub	sp, #12
	i2c_read8(&hi2c1, REG15_MPPT_Control, &value, BQ25798_ADDR);
 8003f92:	23d6      	movs	r3, #214	@ 0xd6
{
 8003f94:	4604      	mov	r4, r0
	i2c_read8(&hi2c1, REG15_MPPT_Control, &value, BQ25798_ADDR);
 8003f96:	f10d 0207 	add.w	r2, sp, #7
 8003f9a:	2115      	movs	r1, #21
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	f005 fabb 	bl	8009518 <i2c_read8>
//	printf("Reset REG (read): %x\r\n", value);
	setBit(&value,0,set);
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	f10d 0007 	add.w	r0, sp, #7
 8003fa8:	2100      	movs	r1, #0
 8003faa:	f005 fb09 	bl	80095c0 <setBit>
//	printf("Reset REG (reset): %x\r\n", value);
    res = i2c_write8(&hi2c1, REG15_MPPT_Control, value, BQ25798_ADDR);
 8003fae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003fb2:	23d6      	movs	r3, #214	@ 0xd6
 8003fb4:	2115      	movs	r1, #21
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	f005 fad8 	bl	800956c <i2c_write8>
    return res;
}
 8003fbc:	b003      	add	sp, #12
 8003fbe:	bd30      	pop	{r4, r5, pc}
 8003fc0:	20001800 	.word	0x20001800

08003fc4 <HAL_UART_TxCpltCallback.part.0>:
//uint16_t sim_rxtail;

static char clibuf[64];
static int cliptr;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8003fc4:	b538      	push	{r3, r4, r5, lr}
{
	if(huart == &huart1 && debug_txhead != debug_txtail) {
 8003fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8003ffc <HAL_UART_TxCpltCallback.part.0+0x38>)
 8003fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8004000 <HAL_UART_TxCpltCallback.part.0+0x3c>)
 8003fca:	882b      	ldrh	r3, [r5, #0]
 8003fcc:	8822      	ldrh	r2, [r4, #0]
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d009      	beq.n	8003fe6 <HAL_UART_TxCpltCallback.part.0+0x22>
		if(debug_txhead > debug_txtail) {
			HAL_UART_Transmit_IT(&huart1, debug_tx_buf+debug_txtail, debug_txhead-debug_txtail);
 8003fd2:	490c      	ldr	r1, [pc, #48]	@ (8004004 <HAL_UART_TxCpltCallback.part.0+0x40>)
 8003fd4:	4411      	add	r1, r2
		if(debug_txhead > debug_txtail) {
 8003fd6:	d907      	bls.n	8003fe8 <HAL_UART_TxCpltCallback.part.0+0x24>
			HAL_UART_Transmit_IT(&huart1, debug_tx_buf+debug_txtail, debug_txhead-debug_txtail);
 8003fd8:	1a9a      	subs	r2, r3, r2
 8003fda:	480b      	ldr	r0, [pc, #44]	@ (8004008 <HAL_UART_TxCpltCallback.part.0+0x44>)
 8003fdc:	b292      	uxth	r2, r2
 8003fde:	f009 f919 	bl	800d214 <HAL_UART_Transmit_IT>
			debug_txtail = debug_txhead;
 8003fe2:	882b      	ldrh	r3, [r5, #0]
 8003fe4:	8023      	strh	r3, [r4, #0]
		} else {
			HAL_UART_Transmit_IT(&huart1, debug_tx_buf+debug_txtail, DEBUG_TX_SIZE-debug_txtail);
			debug_txtail = 0;
		}
	}
}
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
			HAL_UART_Transmit_IT(&huart1, debug_tx_buf+debug_txtail, DEBUG_TX_SIZE-debug_txtail);
 8003fe8:	f5c2 6200 	rsb	r2, r2, #2048	@ 0x800
 8003fec:	4806      	ldr	r0, [pc, #24]	@ (8004008 <HAL_UART_TxCpltCallback.part.0+0x44>)
 8003fee:	b292      	uxth	r2, r2
 8003ff0:	f009 f910 	bl	800d214 <HAL_UART_Transmit_IT>
			debug_txtail = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	8023      	strh	r3, [r4, #0]
}
 8003ff8:	bd38      	pop	{r3, r4, r5, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000dd2 	.word	0x20000dd2
 8004000:	20000dd0 	.word	0x20000dd0
 8004004:	20000dd4 	.word	0x20000dd4
 8004008:	200016d4 	.word	0x200016d4

0800400c <HAL_UART_TxCpltCallback>:
	if(huart == &huart1 && debug_txhead != debug_txtail) {
 800400c:	4b02      	ldr	r3, [pc, #8]	@ (8004018 <HAL_UART_TxCpltCallback+0xc>)
 800400e:	4283      	cmp	r3, r0
 8004010:	d000      	beq.n	8004014 <HAL_UART_TxCpltCallback+0x8>
}
 8004012:	4770      	bx	lr
 8004014:	f7ff bfd6 	b.w	8003fc4 <HAL_UART_TxCpltCallback.part.0>
 8004018:	200016d4 	.word	0x200016d4

0800401c <_write>:

// buffered uart printf
int _write(int file, char *ptr, int len)
{
 800401c:	b5f0      	push	{r4, r5, r6, r7, lr}
//    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, len+5);  // uart1 - debug
	uint8_t need_start = (debug_txhead == debug_txtail) ? 1:0;
 800401e:	4b12      	ldr	r3, [pc, #72]	@ (8004068 <_write+0x4c>)
 8004020:	4c12      	ldr	r4, [pc, #72]	@ (800406c <_write+0x50>)
 8004022:	881f      	ldrh	r7, [r3, #0]
 8004024:	8826      	ldrh	r6, [r4, #0]
	for(int i=0; i<len; ++i) {debug_tx_buf[debug_txhead] = ptr[i]; debug_txhead = (debug_txhead + 1) % DEBUG_TX_SIZE;}
 8004026:	1e10      	subs	r0, r2, #0
{
 8004028:	b083      	sub	sp, #12
	for(int i=0; i<len; ++i) {debug_tx_buf[debug_txhead] = ptr[i]; debug_txhead = (debug_txhead + 1) % DEBUG_TX_SIZE;}
 800402a:	dd0e      	ble.n	800404a <_write+0x2e>
 800402c:	3901      	subs	r1, #1
 800402e:	4d10      	ldr	r5, [pc, #64]	@ (8004070 <_write+0x54>)
 8004030:	180a      	adds	r2, r1, r0
 8004032:	4633      	mov	r3, r6
 8004034:	f811 ef01 	ldrb.w	lr, [r1, #1]!
 8004038:	f805 e003 	strb.w	lr, [r5, r3]
 800403c:	f103 0c01 	add.w	ip, r3, #1
 8004040:	f3cc 030a 	ubfx	r3, ip, #0, #11
 8004044:	428a      	cmp	r2, r1
 8004046:	8023      	strh	r3, [r4, #0]
 8004048:	d1f4      	bne.n	8004034 <_write+0x18>
	if(need_start && huart1.gState != HAL_UART_STATE_BUSY_TX) HAL_UART_TxCpltCallback(&huart1);
 800404a:	42be      	cmp	r6, r7
 800404c:	d001      	beq.n	8004052 <_write+0x36>
    return len;
}
 800404e:	b003      	add	sp, #12
 8004050:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(need_start && huart1.gState != HAL_UART_STATE_BUSY_TX) HAL_UART_TxCpltCallback(&huart1);
 8004052:	4b08      	ldr	r3, [pc, #32]	@ (8004074 <_write+0x58>)
 8004054:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004056:	2b21      	cmp	r3, #33	@ 0x21
 8004058:	d0f9      	beq.n	800404e <_write+0x32>
 800405a:	9001      	str	r0, [sp, #4]
	if(huart == &huart1 && debug_txhead != debug_txtail) {
 800405c:	f7ff ffb2 	bl	8003fc4 <HAL_UART_TxCpltCallback.part.0>
 8004060:	9801      	ldr	r0, [sp, #4]
}
 8004062:	b003      	add	sp, #12
 8004064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004066:	bf00      	nop
 8004068:	20000dd0 	.word	0x20000dd0
 800406c:	20000dd2 	.word	0x20000dd2
 8004070:	20000dd4 	.word	0x20000dd4
 8004074:	200016d4 	.word	0x200016d4

08004078 <HAL_UART_RxCpltCallback>:
//    HAL_UART_Transmit(&huart1, &ch, 1, 2);  // debug uart
	_write(0, (char*)&ch, 1);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004078:	b538      	push	{r3, r4, r5, lr}
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 800407a:	4b0d      	ldr	r3, [pc, #52]	@ (80040b0 <HAL_UART_RxCpltCallback+0x38>)
 800407c:	4298      	cmp	r0, r3
{
 800407e:	4604      	mov	r4, r0
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 8004080:	d003      	beq.n	800408a <HAL_UART_RxCpltCallback+0x12>
	if(huart == &huart2) {
 8004082:	4b0c      	ldr	r3, [pc, #48]	@ (80040b4 <HAL_UART_RxCpltCallback+0x3c>)
 8004084:	429c      	cmp	r4, r3
 8004086:	d007      	beq.n	8004098 <HAL_UART_RxCpltCallback+0x20>
		Sim80x_RxCallBack(simch);
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
	}
}
 8004088:	bd38      	pop	{r3, r4, r5, pc}
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 800408a:	490b      	ldr	r1, [pc, #44]	@ (80040b8 <HAL_UART_RxCpltCallback+0x40>)
 800408c:	2240      	movs	r2, #64	@ 0x40
 800408e:	f009 fe35 	bl	800dcfc <HAL_UART_Receive_IT>
	if(huart == &huart2) {
 8004092:	4b08      	ldr	r3, [pc, #32]	@ (80040b4 <HAL_UART_RxCpltCallback+0x3c>)
 8004094:	429c      	cmp	r4, r3
 8004096:	d1f7      	bne.n	8004088 <HAL_UART_RxCpltCallback+0x10>
		Sim80x_RxCallBack(simch);
 8004098:	4d08      	ldr	r5, [pc, #32]	@ (80040bc <HAL_UART_RxCpltCallback+0x44>)
 800409a:	7828      	ldrb	r0, [r5, #0]
 800409c:	f7fe f99e 	bl	80023dc <Sim80x_RxCallBack>
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
 80040a0:	4629      	mov	r1, r5
 80040a2:	4620      	mov	r0, r4
 80040a4:	2201      	movs	r2, #1
}
 80040a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
 80040aa:	f009 be27 	b.w	800dcfc <HAL_UART_Receive_IT>
 80040ae:	bf00      	nop
 80040b0:	200016d4 	.word	0x200016d4
 80040b4:	20001650 	.word	0x20001650
 80040b8:	200015d8 	.word	0x200015d8
 80040bc:	200015d4 	.word	0x200015d4

080040c0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040c0:	b538      	push	{r3, r4, r5, lr}
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 80040c2:	4b0d      	ldr	r3, [pc, #52]	@ (80040f8 <HAL_UART_ErrorCallback+0x38>)
 80040c4:	4298      	cmp	r0, r3
{
 80040c6:	4604      	mov	r4, r0
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 80040c8:	d003      	beq.n	80040d2 <HAL_UART_ErrorCallback+0x12>
	if(huart == &huart2) {
 80040ca:	4b0c      	ldr	r3, [pc, #48]	@ (80040fc <HAL_UART_ErrorCallback+0x3c>)
 80040cc:	429c      	cmp	r4, r3
 80040ce:	d007      	beq.n	80040e0 <HAL_UART_ErrorCallback+0x20>
    HAL_UART_RxCpltCallback(huart);
}
 80040d0:	bd38      	pop	{r3, r4, r5, pc}
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 80040d2:	490b      	ldr	r1, [pc, #44]	@ (8004100 <HAL_UART_ErrorCallback+0x40>)
 80040d4:	2240      	movs	r2, #64	@ 0x40
 80040d6:	f009 fe11 	bl	800dcfc <HAL_UART_Receive_IT>
	if(huart == &huart2) {
 80040da:	4b08      	ldr	r3, [pc, #32]	@ (80040fc <HAL_UART_ErrorCallback+0x3c>)
 80040dc:	429c      	cmp	r4, r3
 80040de:	d1f7      	bne.n	80040d0 <HAL_UART_ErrorCallback+0x10>
		Sim80x_RxCallBack(simch);
 80040e0:	4d08      	ldr	r5, [pc, #32]	@ (8004104 <HAL_UART_ErrorCallback+0x44>)
 80040e2:	7828      	ldrb	r0, [r5, #0]
 80040e4:	f7fe f97a 	bl	80023dc <Sim80x_RxCallBack>
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
 80040e8:	4629      	mov	r1, r5
 80040ea:	4620      	mov	r0, r4
 80040ec:	2201      	movs	r2, #1
}
 80040ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
 80040f2:	f009 be03 	b.w	800dcfc <HAL_UART_Receive_IT>
 80040f6:	bf00      	nop
 80040f8:	200016d4 	.word	0x200016d4
 80040fc:	20001650 	.word	0x20001650
 8004100:	200015d8 	.word	0x200015d8
 8004104:	200015d4 	.word	0x200015d4

08004108 <find>:
}

// string functions

char * find(const char *arg2)							// find token in cmdline
{
 8004108:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i,j,k;
	for(i=0; clibuf[i]; i++)
 800410a:	4e12      	ldr	r6, [pc, #72]	@ (8004154 <find+0x4c>)
 800410c:	7833      	ldrb	r3, [r6, #0]
 800410e:	b1db      	cbz	r3, 8004148 <find+0x40>
 8004110:	4c11      	ldr	r4, [pc, #68]	@ (8004158 <find+0x50>)
 8004112:	4637      	mov	r7, r6
 8004114:	4245      	negs	r5, r0
{
 8004116:	4684      	mov	ip, r0
 8004118:	46be      	mov	lr, r7
 800411a:	e005      	b.n	8004128 <find+0x20>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
			if(!arg2[k+1]) return (clibuf+(j+1));
 800411c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8004120:	b1a3      	cbz	r3, 800414c <find+0x44>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 8004122:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8004126:	468c      	mov	ip, r1
 8004128:	5ce2      	ldrb	r2, [r4, r3]
 800412a:	4661      	mov	r1, ip
 800412c:	f002 0203 	and.w	r2, r2, #3
 8004130:	2a01      	cmp	r2, #1
 8004132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004136:	bf08      	it	eq
 8004138:	3320      	addeq	r3, #32
 800413a:	429a      	cmp	r2, r3
 800413c:	d0ee      	beq.n	800411c <find+0x14>
	for(i=0; clibuf[i]; i++)
 800413e:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8004142:	3501      	adds	r5, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e6      	bne.n	8004116 <find+0xe>
	return NULL;
 8004148:	4618      	mov	r0, r3
}
 800414a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(!arg2[k+1]) return (clibuf+(j+1));
 800414c:	4465      	add	r5, ip
 800414e:	3501      	adds	r5, #1
 8004150:	1970      	adds	r0, r6, r5
}
 8004152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004154:	20000d90 	.word	0x20000d90
 8004158:	08017619 	.word	0x08017619

0800415c <getval>:

char * getval(char *p, int32_t *val, int32_t min, int32_t max)		// get s32 value from cmdline
{
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t tmp = 0;
	if(*p == ' ') p++;
 800415e:	7807      	ldrb	r7, [r0, #0]
 8004160:	2f20      	cmp	r7, #32
	uint8_t sign = (*p == '-') ? 1:0;
 8004162:	bf08      	it	eq
 8004164:	7847      	ldrbeq	r7, [r0, #1]
{
 8004166:	4606      	mov	r6, r0
	if(*p == ' ') p++;
 8004168:	bf08      	it	eq
 800416a:	3601      	addeq	r6, #1
	while(*p)
 800416c:	b1f7      	cbz	r7, 80041ac <getval+0x50>
 800416e:	463d      	mov	r5, r7
	int32_t tmp = 0;
 8004170:	2400      	movs	r4, #0
 8004172:	e004      	b.n	800417e <getval+0x22>
	while(*p)
 8004174:	f816 5f01 	ldrb.w	r5, [r6, #1]!
	{
		if(*p >= '0' && *p <= '9') {tmp *= 10; tmp += *p - '0'; p++;}
 8004178:	eb0c 0440 	add.w	r4, ip, r0, lsl #1
	while(*p)
 800417c:	b13d      	cbz	r5, 800418e <getval+0x32>
		if(*p >= '0' && *p <= '9') {tmp *= 10; tmp += *p - '0'; p++;}
 800417e:	f1a5 0c30 	sub.w	ip, r5, #48	@ 0x30
 8004182:	fa5f f08c 	uxtb.w	r0, ip
 8004186:	2809      	cmp	r0, #9
 8004188:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800418c:	d9f2      	bls.n	8004174 <getval+0x18>
		else break;
	}
	if(sign) tmp = -tmp;
 800418e:	2f2d      	cmp	r7, #45	@ 0x2d
 8004190:	d100      	bne.n	8004194 <getval+0x38>
 8004192:	4264      	negs	r4, r4
	if(tmp >= min && tmp <= max) *val = tmp; else printf("Bad value\r\n");
 8004194:	4294      	cmp	r4, r2
 8004196:	db01      	blt.n	800419c <getval+0x40>
 8004198:	429c      	cmp	r4, r3
 800419a:	dd04      	ble.n	80041a6 <getval+0x4a>
 800419c:	4804      	ldr	r0, [pc, #16]	@ (80041b0 <getval+0x54>)
 800419e:	f00c fe29 	bl	8010df4 <puts>
	return p;
}
 80041a2:	4630      	mov	r0, r6
 80041a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(tmp >= min && tmp <= max) *val = tmp; else printf("Bad value\r\n");
 80041a6:	600c      	str	r4, [r1, #0]
}
 80041a8:	4630      	mov	r0, r6
 80041aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t tmp = 0;
 80041ac:	463c      	mov	r4, r7
 80041ae:	e7f1      	b.n	8004194 <getval+0x38>
 80041b0:	08015594 	.word	0x08015594

080041b4 <getString>:

void getString(char *p, char *dst, int16_t minlen, int16_t maxlen, const char *nam)		// get string from cmdline
{
 80041b4:	b570      	push	{r4, r5, r6, lr}
	if(*p == ' ') p++;
 80041b6:	7804      	ldrb	r4, [r0, #0]
{
 80041b8:	9e04      	ldr	r6, [sp, #16]
	if(*p == ' ') p++;
 80041ba:	2c20      	cmp	r4, #32
 80041bc:	bf08      	it	eq
 80041be:	3001      	addeq	r0, #1
	for(int i=0; i<maxlen; i++) if((p[i]==13 || p[i]==10) && i<minlen) {printf("Too short\r\n"); return;}	// test dlugosci
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	dd26      	ble.n	8004212 <getString+0x5e>
 80041c4:	18c5      	adds	r5, r0, r3
 80041c6:	4684      	mov	ip, r0
 80041c8:	e003      	b.n	80041d2 <getString+0x1e>
 80041ca:	2c0a      	cmp	r4, #10
 80041cc:	d009      	beq.n	80041e2 <getString+0x2e>
 80041ce:	45ac      	cmp	ip, r5
 80041d0:	d00e      	beq.n	80041f0 <getString+0x3c>
 80041d2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80041d6:	ebac 0e00 	sub.w	lr, ip, r0
 80041da:	2c0d      	cmp	r4, #13
 80041dc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80041e0:	d1f3      	bne.n	80041ca <getString+0x16>
 80041e2:	4572      	cmp	r2, lr
 80041e4:	ddf3      	ble.n	80041ce <getString+0x1a>
	{
		dst[i] = p[i];
		if(p[i] == 13 || p[i] == 10) {dst[i] = 0; break;}
	}
	printf("%s: %s\r\n", nam, dst);
}
 80041e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	for(int i=0; i<maxlen; i++) if((p[i]==13 || p[i]==10) && i<minlen) {printf("Too short\r\n"); return;}	// test dlugosci
 80041ea:	480d      	ldr	r0, [pc, #52]	@ (8004220 <getString+0x6c>)
 80041ec:	f00c be02 	b.w	8010df4 <puts>
	for(int i=0; i<maxlen; i++)
 80041f0:	3801      	subs	r0, #1
 80041f2:	460c      	mov	r4, r1
 80041f4:	18cd      	adds	r5, r1, r3
 80041f6:	e003      	b.n	8004200 <getString+0x4c>
		if(p[i] == 13 || p[i] == 10) {dst[i] = 0; break;}
 80041f8:	2b0a      	cmp	r3, #10
 80041fa:	d008      	beq.n	800420e <getString+0x5a>
	for(int i=0; i<maxlen; i++)
 80041fc:	42ac      	cmp	r4, r5
 80041fe:	d008      	beq.n	8004212 <getString+0x5e>
		dst[i] = p[i];
 8004200:	f810 3f01 	ldrb.w	r3, [r0, #1]!
		if(p[i] == 13 || p[i] == 10) {dst[i] = 0; break;}
 8004204:	2b0d      	cmp	r3, #13
		dst[i] = p[i];
 8004206:	4622      	mov	r2, r4
 8004208:	f804 3b01 	strb.w	r3, [r4], #1
		if(p[i] == 13 || p[i] == 10) {dst[i] = 0; break;}
 800420c:	d1f4      	bne.n	80041f8 <getString+0x44>
 800420e:	2300      	movs	r3, #0
 8004210:	7013      	strb	r3, [r2, #0]
	printf("%s: %s\r\n", nam, dst);
 8004212:	460a      	mov	r2, r1
 8004214:	4803      	ldr	r0, [pc, #12]	@ (8004224 <getString+0x70>)
 8004216:	4631      	mov	r1, r6
}
 8004218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("%s: %s\r\n", nam, dst);
 800421c:	f00c bd82 	b.w	8010d24 <iprintf>
 8004220:	080155a0 	.word	0x080155a0
 8004224:	080155ac 	.word	0x080155ac

08004228 <getFloat>:

char * getFloat (char *p, float *val, float min, float max)
{
 8004228:	b530      	push	{r4, r5, lr}
 800422a:	ed2d 8b02 	vpush	{d8}
	 char* pend;
	float tmp = 0;
		while(*p == ' ') p++;
 800422e:	7803      	ldrb	r3, [r0, #0]
 8004230:	2b20      	cmp	r3, #32
{
 8004232:	b083      	sub	sp, #12
 8004234:	4604      	mov	r4, r0
 8004236:	eeb0 8a40 	vmov.f32	s16, s0
 800423a:	eef0 8a60 	vmov.f32	s17, s1
 800423e:	460d      	mov	r5, r1
		while(*p == ' ') p++;
 8004240:	d103      	bne.n	800424a <getFloat+0x22>
 8004242:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004246:	2b20      	cmp	r3, #32
 8004248:	d0fb      	beq.n	8004242 <getFloat+0x1a>
		tmp = strtof(p, &pend);
 800424a:	a901      	add	r1, sp, #4
 800424c:	4620      	mov	r0, r4
 800424e:	f00b fd51 	bl	800fcf4 <strtof>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8004252:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8004256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425a:	db04      	blt.n	8004266 <getFloat+0x3e>
 800425c:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8004260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004264:	d907      	bls.n	8004276 <getFloat+0x4e>
 8004266:	4807      	ldr	r0, [pc, #28]	@ (8004284 <getFloat+0x5c>)
 8004268:	f00c fdc4 	bl	8010df4 <puts>
		return p;
}
 800426c:	4620      	mov	r0, r4
 800426e:	b003      	add	sp, #12
 8004270:	ecbd 8b02 	vpop	{d8}
 8004274:	bd30      	pop	{r4, r5, pc}
 8004276:	4620      	mov	r0, r4
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8004278:	ed85 0a00 	vstr	s0, [r5]
}
 800427c:	b003      	add	sp, #12
 800427e:	ecbd 8b02 	vpop	{d8}
 8004282:	bd30      	pop	{r4, r5, pc}
 8004284:	08015594 	.word	0x08015594

08004288 <print_status>:
	}
}


void print_status()
{
 8004288:	b500      	push	{lr}
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 800428a:	ed9f 7b35 	vldr	d7, [pc, #212]	@ 8004360 <print_status+0xd8>
{
 800428e:	b083      	sub	sp, #12
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 8004290:	4b35      	ldr	r3, [pc, #212]	@ (8004368 <print_status+0xe0>)
 8004292:	4836      	ldr	r0, [pc, #216]	@ (800436c <print_status+0xe4>)
 8004294:	ed8d 7b00 	vstr	d7, [sp]
 8004298:	2200      	movs	r2, #0
 800429a:	f00c fd43 	bl	8010d24 <iprintf>
	printf("Charger state : ");
 800429e:	4834      	ldr	r0, [pc, #208]	@ (8004370 <print_status+0xe8>)
 80042a0:	f00c fd40 	bl	8010d24 <iprintf>
	switch (charger_state)
 80042a4:	4b33      	ldr	r3, [pc, #204]	@ (8004374 <print_status+0xec>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d806      	bhi.n	80042ba <print_status+0x32>
 80042ac:	e8df f003 	tbb	[pc, r3]
 80042b0:	4c025054 	.word	0x4c025054
		break;
	case 1:
		printf("OK\r\n");
		break;
	case 2:
		printf("No charging ...\r\n");
 80042b4:	4830      	ldr	r0, [pc, #192]	@ (8004378 <print_status+0xf0>)
 80042b6:	f00c fd9d 	bl	8010df4 <puts>
		break;
	case 3:
		printf("Charging ...\r\n");
		break;
	}
	printf("MCU Temp: %3.1f [degC]\r\n", GET_MCU_Temp());
 80042ba:	f7ff f8e9 	bl	8003490 <GET_MCU_Temp>
 80042be:	ee10 0a10 	vmov	r0, s0
 80042c2:	f7fc f981 	bl	80005c8 <__aeabi_f2d>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	482c      	ldr	r0, [pc, #176]	@ (800437c <print_status+0xf4>)
 80042cc:	f00c fd2a 	bl	8010d24 <iprintf>
	printf("VBAT: %u [mV]  ", BQ25798_Vbat_read());
 80042d0:	f7ff fd30 	bl	8003d34 <BQ25798_Vbat_read>
 80042d4:	4601      	mov	r1, r0
 80042d6:	482a      	ldr	r0, [pc, #168]	@ (8004380 <print_status+0xf8>)
 80042d8:	f00c fd24 	bl	8010d24 <iprintf>
	printf("Vac1: %u [mV]  ", BQ25798_Vac1_read());
 80042dc:	f7ff fd4e 	bl	8003d7c <BQ25798_Vac1_read>
 80042e0:	4601      	mov	r1, r0
 80042e2:	4828      	ldr	r0, [pc, #160]	@ (8004384 <print_status+0xfc>)
 80042e4:	f00c fd1e 	bl	8010d24 <iprintf>
	printf("Vac2: %u [mV]  ", BQ25798_Vac2_read());
 80042e8:	f7ff fd5a 	bl	8003da0 <BQ25798_Vac2_read>
 80042ec:	4601      	mov	r1, r0
 80042ee:	4826      	ldr	r0, [pc, #152]	@ (8004388 <print_status+0x100>)
 80042f0:	f00c fd18 	bl	8010d24 <iprintf>
	printf("VSYS: %u [mV]  \r\n", BQ25798_Vsys_read());
 80042f4:	f7ff fd30 	bl	8003d58 <BQ25798_Vsys_read>
 80042f8:	4601      	mov	r1, r0
 80042fa:	4824      	ldr	r0, [pc, #144]	@ (800438c <print_status+0x104>)
 80042fc:	f00c fd12 	bl	8010d24 <iprintf>
	printf("Ibus: %u [mA]  ", BQ25798_Ibus_read());
 8004300:	f7ff fd60 	bl	8003dc4 <BQ25798_Ibus_read>
 8004304:	4601      	mov	r1, r0
 8004306:	4822      	ldr	r0, [pc, #136]	@ (8004390 <print_status+0x108>)
 8004308:	f00c fd0c 	bl	8010d24 <iprintf>
	printf("Ibat: %u [mA]  \r\n", BQ25798_Ibat_read());
 800430c:	f7ff fd6c 	bl	8003de8 <BQ25798_Ibat_read>
 8004310:	4601      	mov	r1, r0
 8004312:	4820      	ldr	r0, [pc, #128]	@ (8004394 <print_status+0x10c>)
 8004314:	f00c fd06 	bl	8010d24 <iprintf>
	printf("Minimal SYS Voltage: %u [mV]  \r\n", BQ25798_Sys_Min_Voltage_read());
 8004318:	f7ff fd78 	bl	8003e0c <BQ25798_Sys_Min_Voltage_read>
 800431c:	4601      	mov	r1, r0
 800431e:	481e      	ldr	r0, [pc, #120]	@ (8004398 <print_status+0x110>)
 8004320:	f00c fd00 	bl	8010d24 <iprintf>
	printf("Charge Voltage Limit: %u [mV]  \r\n",BQ25798_Chr_Volt_Limit_read());
 8004324:	f7ff fd92 	bl	8003e4c <BQ25798_Chr_Volt_Limit_read>
 8004328:	4601      	mov	r1, r0
 800432a:	481c      	ldr	r0, [pc, #112]	@ (800439c <print_status+0x114>)
 800432c:	f00c fcfa 	bl	8010d24 <iprintf>
	printf("Charge Current Limit: %u [mA]  \r\n",BQ25798_Chr_Curr_Limit_read());
 8004330:	f7ff fda2 	bl	8003e78 <BQ25798_Chr_Curr_Limit_read>
 8004334:	4601      	mov	r1, r0
 8004336:	481a      	ldr	r0, [pc, #104]	@ (80043a0 <print_status+0x118>)
 8004338:	f00c fcf4 	bl	8010d24 <iprintf>
//	BQ25798_Chrg_STAT0_read();
//	BQ25798_Chrg_STAT1_read();
//	BQ25798_Chrg_STAT2_read();
//	BQ25798_Chrg_STAT3_read();
//	BQ25798_Chrg_STAT4_read();
	printf("-----------------\r\n");
 800433c:	4819      	ldr	r0, [pc, #100]	@ (80043a4 <print_status+0x11c>)

}
 800433e:	b003      	add	sp, #12
 8004340:	f85d eb04 	ldr.w	lr, [sp], #4
	printf("-----------------\r\n");
 8004344:	f00c bd56 	b.w	8010df4 <puts>
		printf("Charging ...\r\n");
 8004348:	4817      	ldr	r0, [pc, #92]	@ (80043a8 <print_status+0x120>)
 800434a:	f00c fd53 	bl	8010df4 <puts>
		break;
 800434e:	e7b4      	b.n	80042ba <print_status+0x32>
		printf("OK\r\n");
 8004350:	4816      	ldr	r0, [pc, #88]	@ (80043ac <print_status+0x124>)
 8004352:	f00c fd4f 	bl	8010df4 <puts>
		break;
 8004356:	e7b0      	b.n	80042ba <print_status+0x32>
		printf("FAULT\r\n");
 8004358:	4815      	ldr	r0, [pc, #84]	@ (80043b0 <print_status+0x128>)
 800435a:	f00c fd4b 	bl	8010df4 <puts>
		break;
 800435e:	e7ac      	b.n	80042ba <print_status+0x32>
 8004360:	e0000000 	.word	0xe0000000
 8004364:	3feccccc 	.word	0x3feccccc
 8004368:	3ff00000 	.word	0x3ff00000
 800436c:	080155b8 	.word	0x080155b8
 8004370:	080155dc 	.word	0x080155dc
 8004374:	20001bcf 	.word	0x20001bcf
 8004378:	080155f8 	.word	0x080155f8
 800437c:	0801561c 	.word	0x0801561c
 8004380:	08015638 	.word	0x08015638
 8004384:	08015648 	.word	0x08015648
 8004388:	08015658 	.word	0x08015658
 800438c:	08015668 	.word	0x08015668
 8004390:	0801567c 	.word	0x0801567c
 8004394:	0801568c 	.word	0x0801568c
 8004398:	080156a0 	.word	0x080156a0
 800439c:	080156c4 	.word	0x080156c4
 80043a0:	080156e8 	.word	0x080156e8
 80043a4:	08016b10 	.word	0x08016b10
 80043a8:	0801560c 	.word	0x0801560c
 80043ac:	080150a0 	.word	0x080150a0
 80043b0:	080155f0 	.word	0x080155f0
 80043b4:	00000000 	.word	0x00000000

080043b8 <print_help>:

void print_help()
{
 80043b8:	b510      	push	{r4, lr}
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 80043ba:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 80044a8 <print_help+0xf0>
{
 80043be:	b082      	sub	sp, #8
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 80043c0:	ed8d 7b00 	vstr	d7, [sp]
 80043c4:	4b3a      	ldr	r3, [pc, #232]	@ (80044b0 <print_help+0xf8>)
 80043c6:	483b      	ldr	r0, [pc, #236]	@ (80044b4 <print_help+0xfc>)
	printf("set [sensor] disable - sensor=[tmp117;bme280;shtc3;ms8607;dps368] - disable sensor\r\n");
	printf("set [sensor] [type] en - type=[temperature;press;hum] - enable sensor type\r\n");
	printf("set [sensor] [type] dis - type=[temperature;press;hum] - disable sensor type\r\n");
	printf("set [sensor] [type] offset X.X - set offset [X.X float]\r\n");
	printf("set [sensor] conf Y - set sensor config [Y - 0..15]\r\n");
	printf("-----------------\r\n");
 80043c8:	4c3b      	ldr	r4, [pc, #236]	@ (80044b8 <print_help+0x100>)
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 80043ca:	2200      	movs	r2, #0
 80043cc:	f00c fcaa 	bl	8010d24 <iprintf>
	printf("SET COMMANDS:\r\n");
 80043d0:	483a      	ldr	r0, [pc, #232]	@ (80044bc <print_help+0x104>)
 80043d2:	f00c fd0f 	bl	8010df4 <puts>
	printf("set interval X - X=15..1440[min] - measurement interval\r\n");
 80043d6:	483a      	ldr	r0, [pc, #232]	@ (80044c0 <print_help+0x108>)
 80043d8:	f00c fd0c 	bl	8010df4 <puts>
	printf("set disptype X - 0 - NONE(silent), 1 - TXT, 2 - CSV - measurement format\r\n");
 80043dc:	4839      	ldr	r0, [pc, #228]	@ (80044c4 <print_help+0x10c>)
 80043de:	f00c fd09 	bl	8010df4 <puts>
	printf("set [sensor] enable - sensor=[tmp117;bme280;shtc3;ms8607;dps368] - enable sensor\r\n");
 80043e2:	4839      	ldr	r0, [pc, #228]	@ (80044c8 <print_help+0x110>)
 80043e4:	f00c fd06 	bl	8010df4 <puts>
	printf("set [sensor] disable - sensor=[tmp117;bme280;shtc3;ms8607;dps368] - disable sensor\r\n");
 80043e8:	4838      	ldr	r0, [pc, #224]	@ (80044cc <print_help+0x114>)
 80043ea:	f00c fd03 	bl	8010df4 <puts>
	printf("set [sensor] [type] en - type=[temperature;press;hum] - enable sensor type\r\n");
 80043ee:	4838      	ldr	r0, [pc, #224]	@ (80044d0 <print_help+0x118>)
 80043f0:	f00c fd00 	bl	8010df4 <puts>
	printf("set [sensor] [type] dis - type=[temperature;press;hum] - disable sensor type\r\n");
 80043f4:	4837      	ldr	r0, [pc, #220]	@ (80044d4 <print_help+0x11c>)
 80043f6:	f00c fcfd 	bl	8010df4 <puts>
	printf("set [sensor] [type] offset X.X - set offset [X.X float]\r\n");
 80043fa:	4837      	ldr	r0, [pc, #220]	@ (80044d8 <print_help+0x120>)
 80043fc:	f00c fcfa 	bl	8010df4 <puts>
	printf("set [sensor] conf Y - set sensor config [Y - 0..15]\r\n");
 8004400:	4836      	ldr	r0, [pc, #216]	@ (80044dc <print_help+0x124>)
 8004402:	f00c fcf7 	bl	8010df4 <puts>
	printf("-----------------\r\n");
 8004406:	4620      	mov	r0, r4
 8004408:	f00c fcf4 	bl	8010df4 <puts>

	printf("CONFIG COMMANDS:\r\n");
 800440c:	4834      	ldr	r0, [pc, #208]	@ (80044e0 <print_help+0x128>)
 800440e:	f00c fcf1 	bl	8010df4 <puts>
	printf("printconfig - Print config values\r\n");
 8004412:	4834      	ldr	r0, [pc, #208]	@ (80044e4 <print_help+0x12c>)
 8004414:	f00c fcee 	bl	8010df4 <puts>
	printf("clearconfig - load default config values\r\n");
 8004418:	4833      	ldr	r0, [pc, #204]	@ (80044e8 <print_help+0x130>)
 800441a:	f00c fceb 	bl	8010df4 <puts>
	printf("loadconfig - load config values\r\n");
 800441e:	4833      	ldr	r0, [pc, #204]	@ (80044ec <print_help+0x134>)
 8004420:	f00c fce8 	bl	8010df4 <puts>
	printf("saveconfig - save config values\r\n");
 8004424:	4832      	ldr	r0, [pc, #200]	@ (80044f0 <print_help+0x138>)
 8004426:	f00c fce5 	bl	8010df4 <puts>
	printf("-----------------\r\n");
 800442a:	4620      	mov	r0, r4
 800442c:	f00c fce2 	bl	8010df4 <puts>

	printf("MEAS COMMANDS:\r\n");
 8004430:	4830      	ldr	r0, [pc, #192]	@ (80044f4 <print_help+0x13c>)
 8004432:	f00c fcdf 	bl	8010df4 <puts>
	printf("meas start cont [disp] - Start continuos measurement disp=[txt;csv]\r\n");
 8004436:	4830      	ldr	r0, [pc, #192]	@ (80044f8 <print_help+0x140>)
 8004438:	f00c fcdc 	bl	8010df4 <puts>
	printf("meas start [disp] X - Start X measures disp=[txt;csv], X=1..500 \r\n");
 800443c:	482f      	ldr	r0, [pc, #188]	@ (80044fc <print_help+0x144>)
 800443e:	f00c fcd9 	bl	8010df4 <puts>
	printf("-----------------\r\n");
 8004442:	4620      	mov	r0, r4
 8004444:	f00c fcd6 	bl	8010df4 <puts>

	printf("TEST COMMANDS:\r\n");
 8004448:	482d      	ldr	r0, [pc, #180]	@ (8004500 <print_help+0x148>)
 800444a:	f00c fcd3 	bl	8010df4 <puts>
	printf("sim on\r\n");
 800444e:	482d      	ldr	r0, [pc, #180]	@ (8004504 <print_help+0x14c>)
 8004450:	f00c fcd0 	bl	8010df4 <puts>
	printf("sim off\r\n");
 8004454:	482c      	ldr	r0, [pc, #176]	@ (8004508 <print_help+0x150>)
 8004456:	f00c fccd 	bl	8010df4 <puts>
	printf("gps get - start GPS thread and read data from GPS\r\n");
 800445a:	482c      	ldr	r0, [pc, #176]	@ (800450c <print_help+0x154>)
 800445c:	f00c fcca 	bl	8010df4 <puts>
	printf("gps position - display GPS data\r\n");
 8004460:	482b      	ldr	r0, [pc, #172]	@ (8004510 <print_help+0x158>)
 8004462:	f00c fcc7 	bl	8010df4 <puts>
	printf("gsm time - get time from GSM module\r\n");
 8004466:	482b      	ldr	r0, [pc, #172]	@ (8004514 <print_help+0x15c>)
 8004468:	f00c fcc4 	bl	8010df4 <puts>

	printf("gprs start - connect to GPRS\r\n");
 800446c:	482a      	ldr	r0, [pc, #168]	@ (8004518 <print_help+0x160>)
 800446e:	f00c fcc1 	bl	8010df4 <puts>
	printf("gprs stop - GPRS off\r\n");
 8004472:	482a      	ldr	r0, [pc, #168]	@ (800451c <print_help+0x164>)
 8004474:	f00c fcbe 	bl	8010df4 <puts>
	printf("gprs server - connect to hardcoded server IP and port\r\n");
 8004478:	4829      	ldr	r0, [pc, #164]	@ (8004520 <print_help+0x168>)
 800447a:	f00c fcbb 	bl	8010df4 <puts>
	printf("gprs close - disconnect from server\r\n");
 800447e:	4829      	ldr	r0, [pc, #164]	@ (8004524 <print_help+0x16c>)
 8004480:	f00c fcb8 	bl	8010df4 <puts>
	printf("gprs send - send hardcoded test string to connected server\r\n");
 8004484:	4828      	ldr	r0, [pc, #160]	@ (8004528 <print_help+0x170>)
 8004486:	f00c fcb5 	bl	8010df4 <puts>
	printf("gprs test - full test gprs: connect to gprs, connect to server, send data, disconect, gprs down\r\n");
 800448a:	4828      	ldr	r0, [pc, #160]	@ (800452c <print_help+0x174>)
 800448c:	f00c fcb2 	bl	8010df4 <puts>


	printf("-----------------\r\n");
 8004490:	4620      	mov	r0, r4
 8004492:	f00c fcaf 	bl	8010df4 <puts>
	printf("? or help - help\r\n");
 8004496:	4826      	ldr	r0, [pc, #152]	@ (8004530 <print_help+0x178>)
 8004498:	f00c fcac 	bl	8010df4 <puts>
	printf("-----------------\r\n");
 800449c:	4620      	mov	r0, r4

}
 800449e:	b002      	add	sp, #8
 80044a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("-----------------\r\n");
 80044a4:	f00c bca6 	b.w	8010df4 <puts>
 80044a8:	e0000000 	.word	0xe0000000
 80044ac:	3feccccc 	.word	0x3feccccc
 80044b0:	3ff00000 	.word	0x3ff00000
 80044b4:	080155b8 	.word	0x080155b8
 80044b8:	08016b10 	.word	0x08016b10
 80044bc:	0801570c 	.word	0x0801570c
 80044c0:	0801571c 	.word	0x0801571c
 80044c4:	08015758 	.word	0x08015758
 80044c8:	080157a4 	.word	0x080157a4
 80044cc:	080157f8 	.word	0x080157f8
 80044d0:	0801584c 	.word	0x0801584c
 80044d4:	08015898 	.word	0x08015898
 80044d8:	080158e8 	.word	0x080158e8
 80044dc:	08015924 	.word	0x08015924
 80044e0:	0801595c 	.word	0x0801595c
 80044e4:	08015970 	.word	0x08015970
 80044e8:	08015994 	.word	0x08015994
 80044ec:	080159c0 	.word	0x080159c0
 80044f0:	080159e4 	.word	0x080159e4
 80044f4:	08015a08 	.word	0x08015a08
 80044f8:	08015a18 	.word	0x08015a18
 80044fc:	08015a60 	.word	0x08015a60
 8004500:	08015aa4 	.word	0x08015aa4
 8004504:	08015ab4 	.word	0x08015ab4
 8004508:	08015abc 	.word	0x08015abc
 800450c:	08015ac8 	.word	0x08015ac8
 8004510:	08015afc 	.word	0x08015afc
 8004514:	08015b20 	.word	0x08015b20
 8004518:	08015b48 	.word	0x08015b48
 800451c:	08015b68 	.word	0x08015b68
 8004520:	08015b80 	.word	0x08015b80
 8004524:	08015bb8 	.word	0x08015bb8
 8004528:	08015be0 	.word	0x08015be0
 800452c:	08015c1c 	.word	0x08015c1c
 8004530:	08015c80 	.word	0x08015c80

08004534 <CLI_proc>:
{
 8004534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 8004538:	4cac      	ldr	r4, [pc, #688]	@ (80047ec <CLI_proc+0x2b8>)
{
 800453a:	ed2d 8b02 	vpush	{d8}
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	2b3f      	cmp	r3, #63	@ 0x3f
{
 8004542:	b086      	sub	sp, #24
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 8004544:	d803      	bhi.n	800454e <CLI_proc+0x1a>
 8004546:	49aa      	ldr	r1, [pc, #680]	@ (80047f0 <CLI_proc+0x2bc>)
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	54c8      	strb	r0, [r1, r3]
 800454c:	6022      	str	r2, [r4, #0]
	if(ch == 10)	// LF
 800454e:	280a      	cmp	r0, #10
 8004550:	d004      	beq.n	800455c <CLI_proc+0x28>
}
 8004552:	b006      	add	sp, #24
 8004554:	ecbd 8b02 	vpop	{d8}
 8004558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    if(clibuf[cliptr-1] == 13) cliptr--;
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	4da4      	ldr	r5, [pc, #656]	@ (80047f0 <CLI_proc+0x2bc>)
 8004560:	1e58      	subs	r0, r3, #1
		memset(clibuf+cliptr, 0, sizeof(clibuf)-cliptr);
 8004562:	2100      	movs	r1, #0
	    if(clibuf[cliptr-1] == 13) cliptr--;
 8004564:	5c2a      	ldrb	r2, [r5, r0]
 8004566:	2a0d      	cmp	r2, #13
 8004568:	bf18      	it	ne
 800456a:	4618      	movne	r0, r3
		memset(clibuf+cliptr, 0, sizeof(clibuf)-cliptr);
 800456c:	f1c0 0240 	rsb	r2, r0, #64	@ 0x40
 8004570:	4428      	add	r0, r5
 8004572:	f00c fd9f 	bl	80110b4 <memset>
		cliptr = 0;
 8004576:	2300      	movs	r3, #0
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{print_help(); return;}
 8004578:	489e      	ldr	r0, [pc, #632]	@ (80047f4 <CLI_proc+0x2c0>)
		cliptr = 0;
 800457a:	6023      	str	r3, [r4, #0]
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{print_help(); return;}
 800457c:	f7ff fdc4 	bl	8004108 <find>
 8004580:	1c6b      	adds	r3, r5, #1
 8004582:	4283      	cmp	r3, r0
 8004584:	f000 80da 	beq.w	800473c <CLI_proc+0x208>
 8004588:	489b      	ldr	r0, [pc, #620]	@ (80047f8 <CLI_proc+0x2c4>)
 800458a:	f7ff fdbd 	bl	8004108 <find>
 800458e:	1d2e      	adds	r6, r5, #4
 8004590:	4286      	cmp	r6, r0
 8004592:	f000 80d3 	beq.w	800473c <CLI_proc+0x208>
		if(find("status")==clibuf+6) {print_status(); return;}
 8004596:	4899      	ldr	r0, [pc, #612]	@ (80047fc <CLI_proc+0x2c8>)
 8004598:	f7ff fdb6 	bl	8004108 <find>
 800459c:	f105 0806 	add.w	r8, r5, #6
 80045a0:	4580      	cmp	r8, r0
 80045a2:	f000 80e3 	beq.w	800476c <CLI_proc+0x238>
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 80045a6:	4896      	ldr	r0, [pc, #600]	@ (8004800 <CLI_proc+0x2cc>)
 80045a8:	f7ff fdae 	bl	8004108 <find>
 80045ac:	f105 0907 	add.w	r9, r5, #7
 80045b0:	4581      	cmp	r9, r0
 80045b2:	f000 80e2 	beq.w	800477a <CLI_proc+0x246>
		if(find("clearconfig")==clibuf+11) {printf("config reset to defaults\r\n"); Load_defaults(); return;}
 80045b6:	4893      	ldr	r0, [pc, #588]	@ (8004804 <CLI_proc+0x2d0>)
 80045b8:	f7ff fda6 	bl	8004108 <find>
 80045bc:	f105 040b 	add.w	r4, r5, #11
 80045c0:	4284      	cmp	r4, r0
 80045c2:	f000 80c2 	beq.w	800474a <CLI_proc+0x216>
		if(find("printconfig")==clibuf+11) {EEPROM_Print_config(); return;}
 80045c6:	4890      	ldr	r0, [pc, #576]	@ (8004808 <CLI_proc+0x2d4>)
 80045c8:	f7ff fd9e 	bl	8004108 <find>
 80045cc:	4284      	cmp	r4, r0
 80045ce:	f000 80e6 	beq.w	800479e <CLI_proc+0x26a>
		if(find("loadconfig")==clibuf+10) {printf("LOADING CONFIG. Status: %i (0==OK)\r\n",Load_config()); return;}
 80045d2:	488e      	ldr	r0, [pc, #568]	@ (800480c <CLI_proc+0x2d8>)
 80045d4:	f7ff fd98 	bl	8004108 <find>
 80045d8:	f105 070a 	add.w	r7, r5, #10
 80045dc:	4287      	cmp	r7, r0
 80045de:	f000 80e5 	beq.w	80047ac <CLI_proc+0x278>
		if(find("saveconfig")==clibuf+10) {printf("SAVING CONFIG. Status: %i (0==NO CHANGES; 1==SAVE OK, 2==ERR)\r\n",Save_config()); return;}
 80045e2:	488b      	ldr	r0, [pc, #556]	@ (8004810 <CLI_proc+0x2dc>)
 80045e4:	f7ff fd90 	bl	8004108 <find>
 80045e8:	4287      	cmp	r7, r0
 80045ea:	f000 80ea 	beq.w	80047c2 <CLI_proc+0x28e>
		if(find("setbattalarm")==clibuf+12){getval(clibuf+13, &temp, 0, 15000); config.batt_alarm=temp; printf("Batt alarm:%i",config.batt_alarm); return;};
 80045ee:	4889      	ldr	r0, [pc, #548]	@ (8004814 <CLI_proc+0x2e0>)
 80045f0:	f7ff fd8a 	bl	8004108 <find>
 80045f4:	f105 0a0c 	add.w	sl, r5, #12
 80045f8:	4582      	cmp	sl, r0
 80045fa:	f000 80e7 	beq.w	80047cc <CLI_proc+0x298>
		if(find("setbatscale")==clibuf+11){getFloat(clibuf+12, &tempfloat, -10.0, 10.0); config.bat_scale=tempfloat; printf("Batt scale:%f \r\n",config.bat_scale); return;};
 80045fe:	4886      	ldr	r0, [pc, #536]	@ (8004818 <CLI_proc+0x2e4>)
 8004600:	f7ff fd82 	bl	8004108 <find>
 8004604:	4284      	cmp	r4, r0
 8004606:	f000 8147 	beq.w	8004898 <CLI_proc+0x364>
		if(find("sim on")==clibuf+6) {Sim80x_SetPower(1); return;}
 800460a:	4884      	ldr	r0, [pc, #528]	@ (800481c <CLI_proc+0x2e8>)
 800460c:	f7ff fd7c 	bl	8004108 <find>
 8004610:	4580      	cmp	r8, r0
 8004612:	bf08      	it	eq
 8004614:	2001      	moveq	r0, #1
 8004616:	f000 80bb 	beq.w	8004790 <CLI_proc+0x25c>
		if(find("sim off")==clibuf+7) {Sim80x_SetPower(0); return;}
 800461a:	4881      	ldr	r0, [pc, #516]	@ (8004820 <CLI_proc+0x2ec>)
 800461c:	f7ff fd74 	bl	8004108 <find>
 8004620:	4581      	cmp	r9, r0
 8004622:	f000 80b4 	beq.w	800478e <CLI_proc+0x25a>
		if(find("gprs start")==clibuf+10) {
 8004626:	487f      	ldr	r0, [pc, #508]	@ (8004824 <CLI_proc+0x2f0>)
 8004628:	f7ff fd6e 	bl	8004108 <find>
 800462c:	4287      	cmp	r7, r0
 800462e:	f000 8262 	beq.w	8004af6 <CLI_proc+0x5c2>
		if(find("gprs stop")==clibuf+9) {GPRS_DeactivatePDPContext(); return;}
 8004632:	487d      	ldr	r0, [pc, #500]	@ (8004828 <CLI_proc+0x2f4>)
 8004634:	4d7d      	ldr	r5, [pc, #500]	@ (800482c <CLI_proc+0x2f8>)
 8004636:	f7ff fd67 	bl	8004108 <find>
 800463a:	4285      	cmp	r5, r0
 800463c:	f000 8276 	beq.w	8004b2c <CLI_proc+0x5f8>
		if(find("gprs server")==clibuf+11) {
 8004640:	487b      	ldr	r0, [pc, #492]	@ (8004830 <CLI_proc+0x2fc>)
 8004642:	f7ff fd61 	bl	8004108 <find>
 8004646:	4284      	cmp	r4, r0
 8004648:	f000 8277 	beq.w	8004b3a <CLI_proc+0x606>
		if(find("gprs close")==clibuf+10) {GPRS_DisconnectFromServer(); return;}
 800464c:	4879      	ldr	r0, [pc, #484]	@ (8004834 <CLI_proc+0x300>)
 800464e:	f7ff fd5b 	bl	8004108 <find>
 8004652:	4287      	cmp	r7, r0
 8004654:	f000 827f 	beq.w	8004b56 <CLI_proc+0x622>
		if(find("gprs send")==clibuf+9) {
 8004658:	4877      	ldr	r0, [pc, #476]	@ (8004838 <CLI_proc+0x304>)
 800465a:	f7ff fd55 	bl	8004108 <find>
 800465e:	4285      	cmp	r5, r0
 8004660:	f000 8280 	beq.w	8004b64 <CLI_proc+0x630>
		if(find("gprs test")==clibuf+9) {StartSendGPRS(); return;}
 8004664:	4875      	ldr	r0, [pc, #468]	@ (800483c <CLI_proc+0x308>)
 8004666:	f7ff fd4f 	bl	8004108 <find>
 800466a:	4285      	cmp	r5, r0
 800466c:	d077      	beq.n	800475e <CLI_proc+0x22a>
		if(find("gps get")==clibuf+7) {StartReadGps(); return;}
 800466e:	4874      	ldr	r0, [pc, #464]	@ (8004840 <CLI_proc+0x30c>)
 8004670:	f7ff fd4a 	bl	8004108 <find>
 8004674:	4581      	cmp	r9, r0
 8004676:	f000 82d7 	beq.w	8004c28 <CLI_proc+0x6f4>
		if(find("gps position")==clibuf+12) {
 800467a:	4872      	ldr	r0, [pc, #456]	@ (8004844 <CLI_proc+0x310>)
 800467c:	f7ff fd44 	bl	8004108 <find>
 8004680:	4582      	cmp	sl, r0
 8004682:	f000 82d8 	beq.w	8004c36 <CLI_proc+0x702>
		if(find("gsm time")==clibuf+8) {
 8004686:	4870      	ldr	r0, [pc, #448]	@ (8004848 <CLI_proc+0x314>)
 8004688:	f7ff fd3e 	bl	8004108 <find>
 800468c:	4b6f      	ldr	r3, [pc, #444]	@ (800484c <CLI_proc+0x318>)
 800468e:	4283      	cmp	r3, r0
 8004690:	f000 82f5 	beq.w	8004c7e <CLI_proc+0x74a>
		p = find("set ");
 8004694:	486e      	ldr	r0, [pc, #440]	@ (8004850 <CLI_proc+0x31c>)
 8004696:	f7ff fd37 	bl	8004108 <find>
		if(p == clibuf+4) {
 800469a:	4286      	cmp	r6, r0
 800469c:	f000 812c 	beq.w	80048f8 <CLI_proc+0x3c4>
		p = find("meas ");
 80046a0:	486c      	ldr	r0, [pc, #432]	@ (8004854 <CLI_proc+0x320>)
 80046a2:	f7ff fd31 	bl	8004108 <find>
		if(p == clibuf+5)
 80046a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004858 <CLI_proc+0x324>)
 80046a8:	4298      	cmp	r0, r3
		p = find("meas ");
 80046aa:	4605      	mov	r5, r0
		if(p == clibuf+5)
 80046ac:	f47f af51 	bne.w	8004552 <CLI_proc+0x1e>
			if((p = find("start ")))
 80046b0:	486a      	ldr	r0, [pc, #424]	@ (800485c <CLI_proc+0x328>)
 80046b2:	f7ff fd29 	bl	8004108 <find>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	f43f af4b 	beq.w	8004552 <CLI_proc+0x1e>
				if(p == clibuf+11)
 80046bc:	42a0      	cmp	r0, r4
 80046be:	f47f af48 	bne.w	8004552 <CLI_proc+0x1e>
					if((strstr(clibuf+11, "txt ")))
 80046c2:	4967      	ldr	r1, [pc, #412]	@ (8004860 <CLI_proc+0x32c>)
 80046c4:	f00c fd30 	bl	8011128 <strstr>
 80046c8:	4606      	mov	r6, r0
 80046ca:	2800      	cmp	r0, #0
 80046cc:	f040 8343 	bne.w	8004d56 <CLI_proc+0x822>
					if((strstr(clibuf+11, "csv ")))
 80046d0:	4964      	ldr	r1, [pc, #400]	@ (8004864 <CLI_proc+0x330>)
 80046d2:	4620      	mov	r0, r4
 80046d4:	f00c fd28 	bl	8011128 <strstr>
 80046d8:	2800      	cmp	r0, #0
 80046da:	f040 835a 	bne.w	8004d92 <CLI_proc+0x85e>
						if((strstr(clibuf+11, "cont ")))
 80046de:	4962      	ldr	r1, [pc, #392]	@ (8004868 <CLI_proc+0x334>)
 80046e0:	4620      	mov	r0, r4
 80046e2:	f00c fd21 	bl	8011128 <strstr>
 80046e6:	2800      	cmp	r0, #0
 80046e8:	f43f af33 	beq.w	8004552 <CLI_proc+0x1e>
							if((strstr(clibuf+16, "txt")))
 80046ec:	350b      	adds	r5, #11
 80046ee:	495f      	ldr	r1, [pc, #380]	@ (800486c <CLI_proc+0x338>)
 80046f0:	4628      	mov	r0, r5
 80046f2:	f00c fd19 	bl	8011128 <strstr>
 80046f6:	4606      	mov	r6, r0
 80046f8:	2800      	cmp	r0, #0
 80046fa:	f040 8388 	bne.w	8004e0e <CLI_proc+0x8da>
							if((strstr(clibuf+16, "csv")))
 80046fe:	495c      	ldr	r1, [pc, #368]	@ (8004870 <CLI_proc+0x33c>)
 8004700:	4628      	mov	r0, r5
 8004702:	f00c fd11 	bl	8011128 <strstr>
 8004706:	2800      	cmp	r0, #0
 8004708:	f43f af23 	beq.w	8004552 <CLI_proc+0x1e>
								config.disp_type = 2;
 800470c:	4c59      	ldr	r4, [pc, #356]	@ (8004874 <CLI_proc+0x340>)
								meas_cont_mode = 1;
 800470e:	4a5a      	ldr	r2, [pc, #360]	@ (8004878 <CLI_proc+0x344>)
								config.disp_type = 2;
 8004710:	79e3      	ldrb	r3, [r4, #7]
								printf("Start continuous measurement, TXT format\r\n");
 8004712:	485a      	ldr	r0, [pc, #360]	@ (800487c <CLI_proc+0x348>)
								config.disp_type = 2;
 8004714:	2102      	movs	r1, #2
 8004716:	f361 0343 	bfi	r3, r1, #1, #3
								meas_cont_mode = 1;
 800471a:	2101      	movs	r1, #1
 800471c:	7011      	strb	r1, [r2, #0]
								config.disp_type = 2;
 800471e:	71e3      	strb	r3, [r4, #7]
								printf("Start continuous measurement, TXT format\r\n");
 8004720:	f00c fb68 	bl	8010df4 <puts>
								csvcnt = 0;
 8004724:	4b56      	ldr	r3, [pc, #344]	@ (8004880 <CLI_proc+0x34c>)
 8004726:	801e      	strh	r6, [r3, #0]
								printCSVheader();
 8004728:	f003 f810 	bl	800774c <printCSVheader>
								ReinitTimer(config.tim_interval);
 800472c:	8920      	ldrh	r0, [r4, #8]
}
 800472e:	b006      	add	sp, #24
 8004730:	ecbd 8b02 	vpop	{d8}
 8004734:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
								ReinitTimer(config.tim_interval);
 8004738:	f002 bf66 	b.w	8007608 <ReinitTimer>
}
 800473c:	b006      	add	sp, #24
 800473e:	ecbd 8b02 	vpop	{d8}
 8004742:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{print_help(); return;}
 8004746:	f7ff be37 	b.w	80043b8 <print_help>
		if(find("clearconfig")==clibuf+11) {printf("config reset to defaults\r\n"); Load_defaults(); return;}
 800474a:	484e      	ldr	r0, [pc, #312]	@ (8004884 <CLI_proc+0x350>)
 800474c:	f00c fb52 	bl	8010df4 <puts>
}
 8004750:	b006      	add	sp, #24
 8004752:	ecbd 8b02 	vpop	{d8}
 8004756:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("clearconfig")==clibuf+11) {printf("config reset to defaults\r\n"); Load_defaults(); return;}
 800475a:	f7fc be7b 	b.w	8001454 <Load_defaults>
}
 800475e:	b006      	add	sp, #24
 8004760:	ecbd 8b02 	vpop	{d8}
 8004764:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("gprs test")==clibuf+9) {StartSendGPRS(); return;}
 8004768:	f004 b82a 	b.w	80087c0 <StartSendGPRS>
}
 800476c:	b006      	add	sp, #24
 800476e:	ecbd 8b02 	vpop	{d8}
 8004772:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("status")==clibuf+6) {print_status(); return;}
 8004776:	f7ff bd87 	b.w	8004288 <print_status>
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 800477a:	4843      	ldr	r0, [pc, #268]	@ (8004888 <CLI_proc+0x354>)
 800477c:	22a0      	movs	r2, #160	@ 0xa0
 800477e:	2138      	movs	r1, #56	@ 0x38
}
 8004780:	b006      	add	sp, #24
 8004782:	ecbd 8b02 	vpop	{d8}
 8004786:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 800478a:	f004 bf37 	b.w	80095fc <i2c_scan>
		if(find("sim off")==clibuf+7) {Sim80x_SetPower(0); return;}
 800478e:	2000      	movs	r0, #0
}
 8004790:	b006      	add	sp, #24
 8004792:	ecbd 8b02 	vpop	{d8}
 8004796:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("sim off")==clibuf+7) {Sim80x_SetPower(0); return;}
 800479a:	f7fd bfbf 	b.w	800271c <Sim80x_SetPower>
}
 800479e:	b006      	add	sp, #24
 80047a0:	ecbd 8b02 	vpop	{d8}
 80047a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("printconfig")==clibuf+11) {EEPROM_Print_config(); return;}
 80047a8:	f7fc befc 	b.w	80015a4 <EEPROM_Print_config>
		if(find("loadconfig")==clibuf+10) {printf("LOADING CONFIG. Status: %i (0==OK)\r\n",Load_config()); return;}
 80047ac:	f7fc fe80 	bl	80014b0 <Load_config>
 80047b0:	4601      	mov	r1, r0
 80047b2:	4836      	ldr	r0, [pc, #216]	@ (800488c <CLI_proc+0x358>)
}
 80047b4:	b006      	add	sp, #24
 80047b6:	ecbd 8b02 	vpop	{d8}
 80047ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("saveconfig")==clibuf+10) {printf("SAVING CONFIG. Status: %i (0==NO CHANGES; 1==SAVE OK, 2==ERR)\r\n",Save_config()); return;}
 80047be:	f00c bab1 	b.w	8010d24 <iprintf>
 80047c2:	f7fc fe1f 	bl	8001404 <Save_config>
 80047c6:	4601      	mov	r1, r0
 80047c8:	4831      	ldr	r0, [pc, #196]	@ (8004890 <CLI_proc+0x35c>)
 80047ca:	e7f3      	b.n	80047b4 <CLI_proc+0x280>
		if(find("setbattalarm")==clibuf+12){getval(clibuf+13, &temp, 0, 15000); config.batt_alarm=temp; printf("Batt alarm:%i",config.batt_alarm); return;};
 80047cc:	a905      	add	r1, sp, #20
 80047ce:	f643 2398 	movw	r3, #15000	@ 0x3a98
 80047d2:	2200      	movs	r2, #0
 80047d4:	f10a 0001 	add.w	r0, sl, #1
 80047d8:	f7ff fcc0 	bl	800415c <getval>
 80047dc:	9b05      	ldr	r3, [sp, #20]
 80047de:	4a25      	ldr	r2, [pc, #148]	@ (8004874 <CLI_proc+0x340>)
 80047e0:	482c      	ldr	r0, [pc, #176]	@ (8004894 <CLI_proc+0x360>)
 80047e2:	f8a2 3005 	strh.w	r3, [r2, #5]
 80047e6:	b299      	uxth	r1, r3
 80047e8:	e7e4      	b.n	80047b4 <CLI_proc+0x280>
 80047ea:	bf00      	nop
 80047ec:	20000d8c 	.word	0x20000d8c
 80047f0:	20000d90 	.word	0x20000d90
 80047f4:	08015ca0 	.word	0x08015ca0
 80047f8:	08015ca4 	.word	0x08015ca4
 80047fc:	08015cac 	.word	0x08015cac
 8004800:	08015cb4 	.word	0x08015cb4
 8004804:	08015cbc 	.word	0x08015cbc
 8004808:	08015ce4 	.word	0x08015ce4
 800480c:	08015cf0 	.word	0x08015cf0
 8004810:	08015d24 	.word	0x08015d24
 8004814:	08015d70 	.word	0x08015d70
 8004818:	08015d90 	.word	0x08015d90
 800481c:	08015db0 	.word	0x08015db0
 8004820:	08015db8 	.word	0x08015db8
 8004824:	08015dc0 	.word	0x08015dc0
 8004828:	08015e04 	.word	0x08015e04
 800482c:	20000d99 	.word	0x20000d99
 8004830:	08015e10 	.word	0x08015e10
 8004834:	08015e2c 	.word	0x08015e2c
 8004838:	08015e38 	.word	0x08015e38
 800483c:	08015e60 	.word	0x08015e60
 8004840:	08015e6c 	.word	0x08015e6c
 8004844:	08015e74 	.word	0x08015e74
 8004848:	08015eac 	.word	0x08015eac
 800484c:	20000d98 	.word	0x20000d98
 8004850:	08015eec 	.word	0x08015eec
 8004854:	080166dc 	.word	0x080166dc
 8004858:	20000d95 	.word	0x20000d95
 800485c:	080166e4 	.word	0x080166e4
 8004860:	080166ec 	.word	0x080166ec
 8004864:	08016714 	.word	0x08016714
 8004868:	0801673c 	.word	0x0801673c
 800486c:	08016744 	.word	0x08016744
 8004870:	08016774 	.word	0x08016774
 8004874:	200019c0 	.word	0x200019c0
 8004878:	200019b6 	.word	0x200019b6
 800487c:	08016748 	.word	0x08016748
 8004880:	20001618 	.word	0x20001618
 8004884:	08015cc8 	.word	0x08015cc8
 8004888:	200017ac 	.word	0x200017ac
 800488c:	08015cfc 	.word	0x08015cfc
 8004890:	08015d30 	.word	0x08015d30
 8004894:	08015d80 	.word	0x08015d80
		while(*p == ' ') p++;
 8004898:	7b2b      	ldrb	r3, [r5, #12]
 800489a:	48b4      	ldr	r0, [pc, #720]	@ (8004b6c <CLI_proc+0x638>)
 800489c:	2b20      	cmp	r3, #32
 800489e:	d103      	bne.n	80048a8 <CLI_proc+0x374>
 80048a0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d0fb      	beq.n	80048a0 <CLI_proc+0x36c>
		tmp = strtof(p, &pend);
 80048a8:	a905      	add	r1, sp, #20
 80048aa:	f00b fa23 	bl	800fcf4 <strtof>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 80048ae:	eefa 7a04 	vmov.f32	s15, #164	@ 0xc1200000 -10.0
 80048b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80048b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		tmp = strtof(p, &pend);
 80048ba:	eeb0 8a40 	vmov.f32	s16, s0
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 80048be:	f2c0 812d 	blt.w	8004b1c <CLI_proc+0x5e8>
 80048c2:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80048c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80048ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ce:	f200 8125 	bhi.w	8004b1c <CLI_proc+0x5e8>
		if(find("setbatscale")==clibuf+11){getFloat(clibuf+12, &tempfloat, -10.0, 10.0); config.bat_scale=tempfloat; printf("Batt scale:%f \r\n",config.bat_scale); return;};
 80048d2:	ee10 0a10 	vmov	r0, s0
 80048d6:	f7fb fe77 	bl	80005c8 <__aeabi_f2d>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4ca4      	ldr	r4, [pc, #656]	@ (8004b70 <CLI_proc+0x63c>)
 80048e0:	48a4      	ldr	r0, [pc, #656]	@ (8004b74 <CLI_proc+0x640>)
 80048e2:	ee18 1a10 	vmov	r1, s16
 80048e6:	f8c4 1001 	str.w	r1, [r4, #1]
}
 80048ea:	b006      	add	sp, #24
 80048ec:	ecbd 8b02 	vpop	{d8}
 80048f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("setbatscale")==clibuf+11){getFloat(clibuf+12, &tempfloat, -10.0, 10.0); config.bat_scale=tempfloat; printf("Batt scale:%f \r\n",config.bat_scale); return;};
 80048f4:	f00c ba16 	b.w	8010d24 <iprintf>
			if((p = find("interval ")))	{
 80048f8:	489f      	ldr	r0, [pc, #636]	@ (8004b78 <CLI_proc+0x644>)
 80048fa:	f7ff fc05 	bl	8004108 <find>
 80048fe:	2800      	cmp	r0, #0
 8004900:	f040 81a4 	bne.w	8004c4c <CLI_proc+0x718>
			if((p = find("measures ")))	{
 8004904:	489d      	ldr	r0, [pc, #628]	@ (8004b7c <CLI_proc+0x648>)
 8004906:	f7ff fbff 	bl	8004108 <find>
 800490a:	4605      	mov	r5, r0
 800490c:	2800      	cmp	r0, #0
 800490e:	f040 81cf 	bne.w	8004cb0 <CLI_proc+0x77c>
			if((p = find("disptype ")))	{
 8004912:	489b      	ldr	r0, [pc, #620]	@ (8004b80 <CLI_proc+0x64c>)
 8004914:	f7ff fbf8 	bl	8004108 <find>
 8004918:	4606      	mov	r6, r0
 800491a:	2800      	cmp	r0, #0
 800491c:	f040 81da 	bne.w	8004cd4 <CLI_proc+0x7a0>
			if((p = find("send format "))) {
 8004920:	4898      	ldr	r0, [pc, #608]	@ (8004b84 <CLI_proc+0x650>)
 8004922:	f7ff fbf1 	bl	8004108 <find>
 8004926:	2800      	cmp	r0, #0
 8004928:	f040 81ef 	bne.w	8004d0a <CLI_proc+0x7d6>
			if((p = find("server ip "))) {
 800492c:	4896      	ldr	r0, [pc, #600]	@ (8004b88 <CLI_proc+0x654>)
 800492e:	f7ff fbeb 	bl	8004108 <find>
 8004932:	4605      	mov	r5, r0
 8004934:	2800      	cmp	r0, #0
 8004936:	f040 824a 	bne.w	8004dce <CLI_proc+0x89a>
			if((p = find("server port ")))	{
 800493a:	4894      	ldr	r0, [pc, #592]	@ (8004b8c <CLI_proc+0x658>)
 800493c:	f7ff fbe4 	bl	8004108 <find>
 8004940:	2800      	cmp	r0, #0
 8004942:	f040 824d 	bne.w	8004de0 <CLI_proc+0x8ac>
			if((p = find("mqtt ip "))) {
 8004946:	4892      	ldr	r0, [pc, #584]	@ (8004b90 <CLI_proc+0x65c>)
 8004948:	f7ff fbde 	bl	8004108 <find>
 800494c:	2800      	cmp	r0, #0
 800494e:	f040 8287 	bne.w	8004e60 <CLI_proc+0x92c>
			if((p = find("mqtt port ")))	{
 8004952:	4890      	ldr	r0, [pc, #576]	@ (8004b94 <CLI_proc+0x660>)
 8004954:	f7ff fbd8 	bl	8004108 <find>
 8004958:	2800      	cmp	r0, #0
 800495a:	f040 826e 	bne.w	8004e3a <CLI_proc+0x906>
			if((p = find("mqtt user "))) {
 800495e:	488e      	ldr	r0, [pc, #568]	@ (8004b98 <CLI_proc+0x664>)
 8004960:	f7ff fbd2 	bl	8004108 <find>
 8004964:	2800      	cmp	r0, #0
 8004966:	f040 828d 	bne.w	8004e84 <CLI_proc+0x950>
			if((p = find("mqtt pass "))) {
 800496a:	488c      	ldr	r0, [pc, #560]	@ (8004b9c <CLI_proc+0x668>)
 800496c:	f7ff fbcc 	bl	8004108 <find>
 8004970:	2800      	cmp	r0, #0
 8004972:	f040 827e 	bne.w	8004e72 <CLI_proc+0x93e>
			if((p = find("tmp117 ")))
 8004976:	488a      	ldr	r0, [pc, #552]	@ (8004ba0 <CLI_proc+0x66c>)
 8004978:	f7ff fbc6 	bl	8004108 <find>
 800497c:	b110      	cbz	r0, 8004984 <CLI_proc+0x450>
				if(p == clibuf+11)
 800497e:	42a0      	cmp	r0, r4
 8004980:	f000 82cc 	beq.w	8004f1c <CLI_proc+0x9e8>
			if((p = find("shtc3 ")))
 8004984:	4887      	ldr	r0, [pc, #540]	@ (8004ba4 <CLI_proc+0x670>)
 8004986:	f7ff fbbf 	bl	8004108 <find>
 800498a:	b110      	cbz	r0, 8004992 <CLI_proc+0x45e>
				if(p == clibuf+10)
 800498c:	42b8      	cmp	r0, r7
 800498e:	f000 856d 	beq.w	800546c <CLI_proc+0xf38>
			if((p = find("ms8607 ")))
 8004992:	4885      	ldr	r0, [pc, #532]	@ (8004ba8 <CLI_proc+0x674>)
 8004994:	f7ff fbb8 	bl	8004108 <find>
 8004998:	2800      	cmp	r0, #0
 800499a:	f000 835f 	beq.w	800505c <CLI_proc+0xb28>
				if(p == clibuf+11)
 800499e:	42a0      	cmp	r0, r4
 80049a0:	f47f add7 	bne.w	8004552 <CLI_proc+0x1e>
					if((p = find("enable")))
 80049a4:	4881      	ldr	r0, [pc, #516]	@ (8004bac <CLI_proc+0x678>)
 80049a6:	f7ff fbaf 	bl	8004108 <find>
 80049aa:	b170      	cbz	r0, 80049ca <CLI_proc+0x496>
						MS8607.sensor_use = 1;
 80049ac:	4980      	ldr	r1, [pc, #512]	@ (8004bb0 <CLI_proc+0x67c>)
						config.MS8607_use = 1;
 80049ae:	4c70      	ldr	r4, [pc, #448]	@ (8004b70 <CLI_proc+0x63c>)
						MS8607.sensor_use = 1;
 80049b0:	780b      	ldrb	r3, [r1, #0]
						config.MS8607_use = 1;
 80049b2:	7e22      	ldrb	r2, [r4, #24]
						printf("MS8607 sensor enabled\r\n");
 80049b4:	487f      	ldr	r0, [pc, #508]	@ (8004bb4 <CLI_proc+0x680>)
						config.MS8607_use = 1;
 80049b6:	f042 0201 	orr.w	r2, r2, #1
						MS8607.sensor_use = 1;
 80049ba:	f043 0302 	orr.w	r3, r3, #2
						config.MS8607_use = 1;
 80049be:	7622      	strb	r2, [r4, #24]
						MS8607.sensor_use = 1;
 80049c0:	700b      	strb	r3, [r1, #0]
						printf("MS8607 sensor enabled\r\n");
 80049c2:	f00c fa17 	bl	8010df4 <puts>
						Save_config();
 80049c6:	f7fc fd1d 	bl	8001404 <Save_config>
					if((p = find("disable")))
 80049ca:	487b      	ldr	r0, [pc, #492]	@ (8004bb8 <CLI_proc+0x684>)
 80049cc:	f7ff fb9c 	bl	8004108 <find>
 80049d0:	b170      	cbz	r0, 80049f0 <CLI_proc+0x4bc>
						config.MS8607_use = 0;
 80049d2:	4967      	ldr	r1, [pc, #412]	@ (8004b70 <CLI_proc+0x63c>)
						MS8607.sensor_use = 0;
 80049d4:	4b76      	ldr	r3, [pc, #472]	@ (8004bb0 <CLI_proc+0x67c>)
						config.MS8607_use = 0;
 80049d6:	7e0c      	ldrb	r4, [r1, #24]
						MS8607.sensor_use = 0;
 80049d8:	781a      	ldrb	r2, [r3, #0]
						printf("MS8607 sensor disabled\r\n");
 80049da:	4878      	ldr	r0, [pc, #480]	@ (8004bbc <CLI_proc+0x688>)
						MS8607.sensor_use = 0;
 80049dc:	f36f 0241 	bfc	r2, #1, #1
						config.MS8607_use = 0;
 80049e0:	f36f 0400 	bfc	r4, #0, #1
 80049e4:	760c      	strb	r4, [r1, #24]
						MS8607.sensor_use = 0;
 80049e6:	701a      	strb	r2, [r3, #0]
						printf("MS8607 sensor disabled\r\n");
 80049e8:	f00c fa04 	bl	8010df4 <puts>
						Save_config();
 80049ec:	f7fc fd0a 	bl	8001404 <Save_config>
					if((p = find("conf ")))
 80049f0:	4873      	ldr	r0, [pc, #460]	@ (8004bc0 <CLI_proc+0x68c>)
 80049f2:	f7ff fb89 	bl	8004108 <find>
 80049f6:	b1f0      	cbz	r0, 8004a36 <CLI_proc+0x502>
			            getval(clibuf+16, &tmp, 0, 5);
 80049f8:	2305      	movs	r3, #5
 80049fa:	2200      	movs	r2, #0
 80049fc:	a905      	add	r1, sp, #20
						int32_t tmp = -1;
 80049fe:	f04f 34ff 	mov.w	r4, #4294967295
			            getval(clibuf+16, &tmp, 0, 5);
 8004a02:	4870      	ldr	r0, [pc, #448]	@ (8004bc4 <CLI_proc+0x690>)
						int32_t tmp = -1;
 8004a04:	9405      	str	r4, [sp, #20]
			            getval(clibuf+16, &tmp, 0, 5);
 8004a06:	f7ff fba9 	bl	800415c <getval>
			            config.MS8607_conf = tmp;
 8004a0a:	4959      	ldr	r1, [pc, #356]	@ (8004b70 <CLI_proc+0x63c>)
			            MS8607.sensor_conf = tmp;
 8004a0c:	4b68      	ldr	r3, [pc, #416]	@ (8004bb0 <CLI_proc+0x67c>)
			            config.MS8607_conf = tmp;
 8004a0e:	9c05      	ldr	r4, [sp, #20]
 8004a10:	7e08      	ldrb	r0, [r1, #24]
			            MS8607.sensor_conf = tmp;
 8004a12:	781a      	ldrb	r2, [r3, #0]
			            config.MS8607_conf = tmp;
 8004a14:	f004 050f 	and.w	r5, r4, #15
 8004a18:	f365 0044 	bfi	r0, r5, #1, #4
			            MS8607.sensor_conf = tmp;
 8004a1c:	f365 0285 	bfi	r2, r5, #2, #4
			            config.MS8607_conf = tmp;
 8004a20:	7608      	strb	r0, [r1, #24]
			            MS8607_osr(tmp);
 8004a22:	b2e0      	uxtb	r0, r4
			            MS8607.sensor_conf = tmp;
 8004a24:	701a      	strb	r2, [r3, #0]
			            MS8607_osr(tmp);
 8004a26:	f001 ffc9 	bl	80069bc <MS8607_osr>
			            printf("MS8607 config %li\r\n",tmp);
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	4866      	ldr	r0, [pc, #408]	@ (8004bc8 <CLI_proc+0x694>)
 8004a2e:	f00c f979 	bl	8010d24 <iprintf>
						Save_config();
 8004a32:	f7fc fce7 	bl	8001404 <Save_config>
					if((p = find("temperature ")))
 8004a36:	4865      	ldr	r0, [pc, #404]	@ (8004bcc <CLI_proc+0x698>)
 8004a38:	f7ff fb66 	bl	8004108 <find>
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	b118      	cbz	r0, 8004a48 <CLI_proc+0x514>
						if(p == clibuf+23)
 8004a40:	4b63      	ldr	r3, [pc, #396]	@ (8004bd0 <CLI_proc+0x69c>)
 8004a42:	4298      	cmp	r0, r3
 8004a44:	f000 845d 	beq.w	8005302 <CLI_proc+0xdce>
					if((p = find("press ")))
 8004a48:	4862      	ldr	r0, [pc, #392]	@ (8004bd4 <CLI_proc+0x6a0>)
 8004a4a:	f7ff fb5d 	bl	8004108 <find>
 8004a4e:	4604      	mov	r4, r0
 8004a50:	b118      	cbz	r0, 8004a5a <CLI_proc+0x526>
						if(p == clibuf+17)
 8004a52:	4b61      	ldr	r3, [pc, #388]	@ (8004bd8 <CLI_proc+0x6a4>)
 8004a54:	4298      	cmp	r0, r3
 8004a56:	f000 849c 	beq.w	8005392 <CLI_proc+0xe5e>
					if((p = find("hum ")))
 8004a5a:	4860      	ldr	r0, [pc, #384]	@ (8004bdc <CLI_proc+0x6a8>)
 8004a5c:	f7ff fb54 	bl	8004108 <find>
 8004a60:	4604      	mov	r4, r0
 8004a62:	2800      	cmp	r0, #0
 8004a64:	f43f ad75 	beq.w	8004552 <CLI_proc+0x1e>
						if(p == clibuf+15)
 8004a68:	4b5d      	ldr	r3, [pc, #372]	@ (8004be0 <CLI_proc+0x6ac>)
 8004a6a:	4298      	cmp	r0, r3
 8004a6c:	f47f ad71 	bne.w	8004552 <CLI_proc+0x1e>
							if((strstr(clibuf+15, "offset ")))
 8004a70:	495c      	ldr	r1, [pc, #368]	@ (8004be4 <CLI_proc+0x6b0>)
 8004a72:	f00c fb59 	bl	8011128 <strstr>
 8004a76:	b1b8      	cbz	r0, 8004aa8 <CLI_proc+0x574>
						        getFloat(clibuf+22, &tmp, MIN_OFFSET, MAX_OFFSET);
 8004a78:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8004a7c:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8004a80:	a905      	add	r1, sp, #20
 8004a82:	1de0      	adds	r0, r4, #7
 8004a84:	f7ff fbd0 	bl	8004228 <getFloat>
						        MS8607.hum.offset = tmp;
 8004a88:	4b49      	ldr	r3, [pc, #292]	@ (8004bb0 <CLI_proc+0x67c>)
						        config.MS8607_h_offset = tmp;
 8004a8a:	4939      	ldr	r1, [pc, #228]	@ (8004b70 <CLI_proc+0x63c>)
 8004a8c:	9805      	ldr	r0, [sp, #20]
						        MS8607.hum.offset = tmp;
 8004a8e:	f8c3 000f 	str.w	r0, [r3, #15]
						        config.MS8607_h_offset = tmp;
 8004a92:	f8c1 001d 	str.w	r0, [r1, #29]
						        printf("MS8607 humidity offset %.6f\r\n",tmp);
 8004a96:	f7fb fd97 	bl	80005c8 <__aeabi_f2d>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4852      	ldr	r0, [pc, #328]	@ (8004be8 <CLI_proc+0x6b4>)
 8004aa0:	f00c f940 	bl	8010d24 <iprintf>
						        Save_config();
 8004aa4:	f7fc fcae 	bl	8001404 <Save_config>
							if((strstr(clibuf+15, "en")))
 8004aa8:	4950      	ldr	r1, [pc, #320]	@ (8004bec <CLI_proc+0x6b8>)
 8004aaa:	484d      	ldr	r0, [pc, #308]	@ (8004be0 <CLI_proc+0x6ac>)
 8004aac:	f00c fb3c 	bl	8011128 <strstr>
 8004ab0:	b170      	cbz	r0, 8004ad0 <CLI_proc+0x59c>
								MS8607.hum.use_meas = 1;
 8004ab2:	493f      	ldr	r1, [pc, #252]	@ (8004bb0 <CLI_proc+0x67c>)
								config.MS8607_h_use = 1;
 8004ab4:	4c2e      	ldr	r4, [pc, #184]	@ (8004b70 <CLI_proc+0x63c>)
								MS8607.hum.use_meas = 1;
 8004ab6:	7a8b      	ldrb	r3, [r1, #10]
								config.MS8607_h_use = 1;
 8004ab8:	7e22      	ldrb	r2, [r4, #24]
								printf("MS8607 humidity measure enabled\r\n");
 8004aba:	484d      	ldr	r0, [pc, #308]	@ (8004bf0 <CLI_proc+0x6bc>)
								config.MS8607_h_use = 1;
 8004abc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
								MS8607.hum.use_meas = 1;
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
								config.MS8607_h_use = 1;
 8004ac4:	7622      	strb	r2, [r4, #24]
								MS8607.hum.use_meas = 1;
 8004ac6:	728b      	strb	r3, [r1, #10]
								printf("MS8607 humidity measure enabled\r\n");
 8004ac8:	f00c f994 	bl	8010df4 <puts>
								Save_config();
 8004acc:	f7fc fc9a 	bl	8001404 <Save_config>
							if((strstr(clibuf+15, "dis")))
 8004ad0:	4948      	ldr	r1, [pc, #288]	@ (8004bf4 <CLI_proc+0x6c0>)
 8004ad2:	4843      	ldr	r0, [pc, #268]	@ (8004be0 <CLI_proc+0x6ac>)
 8004ad4:	f00c fb28 	bl	8011128 <strstr>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	f43f ad3a 	beq.w	8004552 <CLI_proc+0x1e>
								config.MS8607_h_use = 0;
 8004ade:	4924      	ldr	r1, [pc, #144]	@ (8004b70 <CLI_proc+0x63c>)
								MS8607.hum.use_meas = 0;
 8004ae0:	4b33      	ldr	r3, [pc, #204]	@ (8004bb0 <CLI_proc+0x67c>)
								config.MS8607_h_use = 0;
 8004ae2:	7e0c      	ldrb	r4, [r1, #24]
								MS8607.hum.use_meas = 0;
 8004ae4:	7a9a      	ldrb	r2, [r3, #10]
								printf("MS8607 humidity measure disable\r\n");
 8004ae6:	4844      	ldr	r0, [pc, #272]	@ (8004bf8 <CLI_proc+0x6c4>)
								config.MS8607_h_use = 0;
 8004ae8:	f36f 1486 	bfc	r4, #6, #1
								MS8607.hum.use_meas = 0;
 8004aec:	f36f 0200 	bfc	r2, #0, #1
								config.MS8607_h_use = 0;
 8004af0:	760c      	strb	r4, [r1, #24]
								DPS368.press.use_meas = 0;
 8004af2:	729a      	strb	r2, [r3, #10]
 8004af4:	e2a9      	b.n	800504a <CLI_proc+0xb16>
			printf("Status: %s\r\n", GPRS_ConnectToNetwork("INTERNET", "", "", false) ? "OK":"ERROR");
 8004af6:	4a41      	ldr	r2, [pc, #260]	@ (8004bfc <CLI_proc+0x6c8>)
 8004af8:	4841      	ldr	r0, [pc, #260]	@ (8004c00 <CLI_proc+0x6cc>)
 8004afa:	4611      	mov	r1, r2
 8004afc:	2300      	movs	r3, #0
 8004afe:	f7fc ffc1 	bl	8001a84 <GPRS_ConnectToNetwork>
 8004b02:	4a40      	ldr	r2, [pc, #256]	@ (8004c04 <CLI_proc+0x6d0>)
 8004b04:	4b40      	ldr	r3, [pc, #256]	@ (8004c08 <CLI_proc+0x6d4>)
 8004b06:	4601      	mov	r1, r0
 8004b08:	2900      	cmp	r1, #0
 8004b0a:	bf0c      	ite	eq
 8004b0c:	4611      	moveq	r1, r2
 8004b0e:	4619      	movne	r1, r3
 8004b10:	483e      	ldr	r0, [pc, #248]	@ (8004c0c <CLI_proc+0x6d8>)
 8004b12:	f00c f907 	bl	8010d24 <iprintf>
			printf("Connected to GPRS, IP: %s\r\n", Sim80x.GPRS.LocalIP);
 8004b16:	493e      	ldr	r1, [pc, #248]	@ (8004c10 <CLI_proc+0x6dc>)
 8004b18:	483e      	ldr	r0, [pc, #248]	@ (8004c14 <CLI_proc+0x6e0>)
 8004b1a:	e64b      	b.n	80047b4 <CLI_proc+0x280>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8004b1c:	483e      	ldr	r0, [pc, #248]	@ (8004c18 <CLI_proc+0x6e4>)
	float tempfloat = 0.0;
 8004b1e:	ed9f 8a3f 	vldr	s16, [pc, #252]	@ 8004c1c <CLI_proc+0x6e8>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8004b22:	f00c f967 	bl	8010df4 <puts>
 8004b26:	2200      	movs	r2, #0
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e6d8      	b.n	80048de <CLI_proc+0x3aa>
}
 8004b2c:	b006      	add	sp, #24
 8004b2e:	ecbd 8b02 	vpop	{d8}
 8004b32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("gprs stop")==clibuf+9) {GPRS_DeactivatePDPContext(); return;}
 8004b36:	f7fc bf45 	b.w	80019c4 <GPRS_DeactivatePDPContext>
					printf("Status: %s\r\n", GPRS_ConnectToServer("95.216.115.174", 20390) ? "OK":"ERROR");
 8004b3a:	4839      	ldr	r0, [pc, #228]	@ (8004c20 <CLI_proc+0x6ec>)
 8004b3c:	f644 71a6 	movw	r1, #20390	@ 0x4fa6
 8004b40:	f7fd f820 	bl	8001b84 <GPRS_ConnectToServer>
			printf("Status: %s\r\n", GPRS_SendString("Test Wysylania przez GPRS\r\n") ? "OK":"ERROR");
 8004b44:	4a2f      	ldr	r2, [pc, #188]	@ (8004c04 <CLI_proc+0x6d0>)
 8004b46:	4b30      	ldr	r3, [pc, #192]	@ (8004c08 <CLI_proc+0x6d4>)
 8004b48:	4601      	mov	r1, r0
 8004b4a:	2900      	cmp	r1, #0
 8004b4c:	bf0c      	ite	eq
 8004b4e:	4611      	moveq	r1, r2
 8004b50:	4619      	movne	r1, r3
 8004b52:	482e      	ldr	r0, [pc, #184]	@ (8004c0c <CLI_proc+0x6d8>)
 8004b54:	e62e      	b.n	80047b4 <CLI_proc+0x280>
}
 8004b56:	b006      	add	sp, #24
 8004b58:	ecbd 8b02 	vpop	{d8}
 8004b5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("gprs close")==clibuf+10) {GPRS_DisconnectFromServer(); return;}
 8004b60:	f7fd b84c 	b.w	8001bfc <GPRS_DisconnectFromServer>
			printf("Status: %s\r\n", GPRS_SendString("Test Wysylania przez GPRS\r\n") ? "OK":"ERROR");
 8004b64:	482f      	ldr	r0, [pc, #188]	@ (8004c24 <CLI_proc+0x6f0>)
 8004b66:	f7fd f863 	bl	8001c30 <GPRS_SendString>
 8004b6a:	e7eb      	b.n	8004b44 <CLI_proc+0x610>
 8004b6c:	20000d9c 	.word	0x20000d9c
 8004b70:	200019c0 	.word	0x200019c0
 8004b74:	08015d9c 	.word	0x08015d9c
 8004b78:	08015ef4 	.word	0x08015ef4
 8004b7c:	08015f18 	.word	0x08015f18
 8004b80:	08015f3c 	.word	0x08015f3c
 8004b84:	08015f80 	.word	0x08015f80
 8004b88:	08015fe4 	.word	0x08015fe4
 8004b8c:	08015ffc 	.word	0x08015ffc
 8004b90:	08016020 	.word	0x08016020
 8004b94:	08016034 	.word	0x08016034
 8004b98:	08016050 	.word	0x08016050
 8004b9c:	0801606c 	.word	0x0801606c
 8004ba0:	08016088 	.word	0x08016088
 8004ba4:	08016184 	.word	0x08016184
 8004ba8:	080162ac 	.word	0x080162ac
 8004bac:	08016090 	.word	0x08016090
 8004bb0:	20001b84 	.word	0x20001b84
 8004bb4:	080162b4 	.word	0x080162b4
 8004bb8:	080160b0 	.word	0x080160b0
 8004bbc:	080162cc 	.word	0x080162cc
 8004bc0:	080160d0 	.word	0x080160d0
 8004bc4:	20000da0 	.word	0x20000da0
 8004bc8:	080162e4 	.word	0x080162e4
 8004bcc:	080160f8 	.word	0x080160f8
 8004bd0:	20000da7 	.word	0x20000da7
 8004bd4:	08016364 	.word	0x08016364
 8004bd8:	20000da1 	.word	0x20000da1
 8004bdc:	08016244 	.word	0x08016244
 8004be0:	20000d9f 	.word	0x20000d9f
 8004be4:	08016108 	.word	0x08016108
 8004be8:	080163d4 	.word	0x080163d4
 8004bec:	08016134 	.word	0x08016134
 8004bf0:	080163f4 	.word	0x080163f4
 8004bf4:	0801615c 	.word	0x0801615c
 8004bf8:	08016418 	.word	0x08016418
 8004bfc:	080156c0 	.word	0x080156c0
 8004c00:	08015dcc 	.word	0x08015dcc
 8004c04:	08015c98 	.word	0x08015c98
 8004c08:	08015c94 	.word	0x08015c94
 8004c0c:	08015dd8 	.word	0x08015dd8
 8004c10:	20000a4a 	.word	0x20000a4a
 8004c14:	08015de8 	.word	0x08015de8
 8004c18:	08015594 	.word	0x08015594
 8004c1c:	00000000 	.word	0x00000000
 8004c20:	08015e1c 	.word	0x08015e1c
 8004c24:	08015e44 	.word	0x08015e44
}
 8004c28:	b006      	add	sp, #24
 8004c2a:	ecbd 8b02 	vpop	{d8}
 8004c2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("gps get")==clibuf+7) {StartReadGps(); return;}
 8004c32:	f004 b89f 	b.w	8008d74 <StartReadGps>
															 (int)Sim80x.GPS.Alt, Sim80x.GPS.SatInUse);
 8004c36:	499a      	ldr	r1, [pc, #616]	@ (8004ea0 <CLI_proc+0x96c>)
			printf("Lat: %d, Lon: %d, Alt: %d, Sat: %d\r\n", (int)Sim80x.GPS.Lat, (int)Sim80x.GPS.Lon,
 8004c38:	489a      	ldr	r0, [pc, #616]	@ (8004ea4 <CLI_proc+0x970>)
 8004c3a:	f891 4b4c 	ldrb.w	r4, [r1, #2892]	@ 0xb4c
 8004c3e:	f501 6134 	add.w	r1, r1, #2880	@ 0xb40
 8004c42:	c90e      	ldmia	r1, {r1, r2, r3}
 8004c44:	9400      	str	r4, [sp, #0]
 8004c46:	f00c f86d 	bl	8010d24 <iprintf>
			return;
 8004c4a:	e482      	b.n	8004552 <CLI_proc+0x1e>
	            getval(p, &tmp, 15, 1440);
 8004c4c:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
				int32_t tmp = -1;
 8004c50:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 15, 1440);
 8004c54:	220f      	movs	r2, #15
 8004c56:	a905      	add	r1, sp, #20
				int32_t tmp = -1;
 8004c58:	9405      	str	r4, [sp, #20]
	            getval(p, &tmp, 15, 1440);
 8004c5a:	f7ff fa7f 	bl	800415c <getval>
				if(tmp >= 15) {
 8004c5e:	9b05      	ldr	r3, [sp, #20]
 8004c60:	2b0e      	cmp	r3, #14
 8004c62:	f77f ac76 	ble.w	8004552 <CLI_proc+0x1e>
					config.tim_interval = ((tmp+7)/15) * 15; 	// zaokraglenie do wielokrotnosci 15
 8004c66:	4a90      	ldr	r2, [pc, #576]	@ (8004ea8 <CLI_proc+0x974>)
					printf("New meas interval: %u\r\n", config.tim_interval);
 8004c68:	4890      	ldr	r0, [pc, #576]	@ (8004eac <CLI_proc+0x978>)
					config.tim_interval = ((tmp+7)/15) * 15; 	// zaokraglenie do wielokrotnosci 15
 8004c6a:	3307      	adds	r3, #7
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	08db      	lsrs	r3, r3, #3
 8004c72:	4a8f      	ldr	r2, [pc, #572]	@ (8004eb0 <CLI_proc+0x97c>)
 8004c74:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
					printf("New meas interval: %u\r\n", config.tim_interval);
 8004c78:	b299      	uxth	r1, r3
					config.tim_interval = ((tmp+7)/15) * 15; 	// zaokraglenie do wielokrotnosci 15
 8004c7a:	8113      	strh	r3, [r2, #8]
					printf("New meas interval: %u\r\n", config.tim_interval);
 8004c7c:	e59a      	b.n	80047b4 <CLI_proc+0x280>
			Sim80x_GetTime();
 8004c7e:	f7fd fe93 	bl	80029a8 <Sim80x_GetTime>
					Sim80x.Gsm.Time.Year, Sim80x.Gsm.Time.Month, Sim80x.Gsm.Time.Day,
 8004c82:	4987      	ldr	r1, [pc, #540]	@ (8004ea0 <CLI_proc+0x96c>)
			printf("GSM time: %04d-%02d-%02d  %02d:%02d:%02d, TZ:%d\r\n",
 8004c84:	488b      	ldr	r0, [pc, #556]	@ (8004eb4 <CLI_proc+0x980>)
 8004c86:	f991 2656 	ldrsb.w	r2, [r1, #1622]	@ 0x656
 8004c8a:	f891 3655 	ldrb.w	r3, [r1, #1621]	@ 0x655
 8004c8e:	f891 4654 	ldrb.w	r4, [r1, #1620]	@ 0x654
 8004c92:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8004c96:	f891 2653 	ldrb.w	r2, [r1, #1619]	@ 0x653
 8004c9a:	f891 3652 	ldrb.w	r3, [r1, #1618]	@ 0x652
 8004c9e:	e9cd 2400 	strd	r2, r4, [sp]
 8004ca2:	f891 2650 	ldrb.w	r2, [r1, #1616]	@ 0x650
 8004ca6:	f8b1 164e 	ldrh.w	r1, [r1, #1614]	@ 0x64e
 8004caa:	f00c f83b 	bl	8010d24 <iprintf>
			return;
 8004cae:	e450      	b.n	8004552 <CLI_proc+0x1e>
	            getval(p, &tmp, 1, 250);
 8004cb0:	23fa      	movs	r3, #250	@ 0xfa
				int32_t tmp = -1;
 8004cb2:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 1, 250);
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	a905      	add	r1, sp, #20
				int32_t tmp = -1;
 8004cba:	9405      	str	r4, [sp, #20]
	            getval(p, &tmp, 1, 250);
 8004cbc:	f7ff fa4e 	bl	800415c <getval>
				if(tmp > 0) {
 8004cc0:	9b05      	ldr	r3, [sp, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f77f ac45 	ble.w	8004552 <CLI_proc+0x1e>
					config.measures = tmp;
 8004cc8:	4a79      	ldr	r2, [pc, #484]	@ (8004eb0 <CLI_proc+0x97c>)
					printf("New meas count: %u\r\n", config.measures);
 8004cca:	487b      	ldr	r0, [pc, #492]	@ (8004eb8 <CLI_proc+0x984>)
					config.measures = tmp;
 8004ccc:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
					printf("New meas count: %u\r\n", config.measures);
 8004cd0:	b2d9      	uxtb	r1, r3
 8004cd2:	e56f      	b.n	80047b4 <CLI_proc+0x280>
				int32_t tmp = -1;
 8004cd4:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 0, 2);
 8004cd8:	2302      	movs	r3, #2
 8004cda:	462a      	mov	r2, r5
 8004cdc:	a905      	add	r1, sp, #20
				int32_t tmp = -1;
 8004cde:	9405      	str	r4, [sp, #20]
	            getval(p, &tmp, 0, 2);
 8004ce0:	f7ff fa3c 	bl	800415c <getval>
				if(tmp >= 1) {
 8004ce4:	9c05      	ldr	r4, [sp, #20]
 8004ce6:	2c00      	cmp	r4, #0
 8004ce8:	f340 808d 	ble.w	8004e06 <CLI_proc+0x8d2>
					if(tmp==1) printf("Display type TXT\r\n");
 8004cec:	2c01      	cmp	r4, #1
 8004cee:	f000 809a 	beq.w	8004e26 <CLI_proc+0x8f2>
					else if(tmp==2) { printf("Display type CSV"); printCSVheader();}
 8004cf2:	2c02      	cmp	r4, #2
 8004cf4:	f000 809b 	beq.w	8004e2e <CLI_proc+0x8fa>
					csvcnt = 0;
 8004cf8:	4b70      	ldr	r3, [pc, #448]	@ (8004ebc <CLI_proc+0x988>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	801a      	strh	r2, [r3, #0]
				config.disp_type = tmp;
 8004cfe:	4b6c      	ldr	r3, [pc, #432]	@ (8004eb0 <CLI_proc+0x97c>)
 8004d00:	79da      	ldrb	r2, [r3, #7]
 8004d02:	f364 0243 	bfi	r2, r4, #1, #3
 8004d06:	71da      	strb	r2, [r3, #7]
				return;
 8004d08:	e423      	b.n	8004552 <CLI_proc+0x1e>
	            getval(p, &tmp, 0, 3);
 8004d0a:	2303      	movs	r3, #3
				int32_t tmp = -1;
 8004d0c:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 0, 3);
 8004d10:	4632      	mov	r2, r6
 8004d12:	a905      	add	r1, sp, #20
				int32_t tmp = -1;
 8004d14:	9405      	str	r4, [sp, #20]
	            getval(p, &tmp, 0, 3);
 8004d16:	f7ff fa21 	bl	800415c <getval>
				if(tmp >= 0) {
 8004d1a:	9b05      	ldr	r3, [sp, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f6ff ac18 	blt.w	8004552 <CLI_proc+0x1e>
					config.sendFormat = tmp;
 8004d22:	4a63      	ldr	r2, [pc, #396]	@ (8004eb0 <CLI_proc+0x97c>)
 8004d24:	f892 103c 	ldrb.w	r1, [r2, #60]	@ 0x3c
 8004d28:	f003 0303 	and.w	r3, r3, #3
 8004d2c:	f363 0101 	bfi	r1, r3, #0, #2
					switch(config.sendFormat) {
 8004d30:	2b02      	cmp	r3, #2
					config.sendFormat = tmp;
 8004d32:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c
					switch(config.sendFormat) {
 8004d36:	f000 80b0 	beq.w	8004e9a <CLI_proc+0x966>
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	f000 80ab 	beq.w	8004e96 <CLI_proc+0x962>
 8004d40:	2b01      	cmp	r3, #1
					case 0: printf("Send OFF\r\n"); break;
 8004d42:	bf14      	ite	ne
 8004d44:	485e      	ldrne	r0, [pc, #376]	@ (8004ec0 <CLI_proc+0x98c>)
					case 1: printf("Send format: Normal\r\n"); break;
 8004d46:	485f      	ldreq	r0, [pc, #380]	@ (8004ec4 <CLI_proc+0x990>)
}
 8004d48:	b006      	add	sp, #24
 8004d4a:	ecbd 8b02 	vpop	{d8}
 8004d4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
					case 3: printf("Send format: Normal+MQTT\r\n"); break;
 8004d52:	f00c b84f 	b.w	8010df4 <puts>
						config.disp_type = 1;
 8004d56:	4c56      	ldr	r4, [pc, #344]	@ (8004eb0 <CLI_proc+0x97c>)
						int32_t tmp = -1;
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295
						getval(clibuf+15, &tmp, 1, 500);
 8004d5c:	a905      	add	r1, sp, #20
						int32_t tmp = -1;
 8004d5e:	9005      	str	r0, [sp, #20]
						getval(clibuf+15, &tmp, 1, 500);
 8004d60:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004d64:	2201      	movs	r2, #1
 8004d66:	f105 000a 	add.w	r0, r5, #10
 8004d6a:	f7ff f9f7 	bl	800415c <getval>
						config.disp_type = 1;
 8004d6e:	79e2      	ldrb	r2, [r4, #7]
						meas_count = tmp;
 8004d70:	9905      	ldr	r1, [sp, #20]
 8004d72:	4d55      	ldr	r5, [pc, #340]	@ (8004ec8 <CLI_proc+0x994>)
						meas_start = 1;
 8004d74:	4855      	ldr	r0, [pc, #340]	@ (8004ecc <CLI_proc+0x998>)
						meas_count = tmp;
 8004d76:	8029      	strh	r1, [r5, #0]
						config.disp_type = 1;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f363 0243 	bfi	r2, r3, #1, #3
 8004d7e:	71e2      	strb	r2, [r4, #7]
						meas_cont_mode = 0;
 8004d80:	4a53      	ldr	r2, [pc, #332]	@ (8004ed0 <CLI_proc+0x99c>)
						meas_start = 1;
 8004d82:	6003      	str	r3, [r0, #0]
						printf("Start %i measures, TXT output\r\n", meas_count);
 8004d84:	b289      	uxth	r1, r1
						meas_cont_mode = 0;
 8004d86:	2300      	movs	r3, #0
						printf("Start %i measures, TXT output\r\n", meas_count);
 8004d88:	4852      	ldr	r0, [pc, #328]	@ (8004ed4 <CLI_proc+0x9a0>)
						meas_cont_mode = 0;
 8004d8a:	7013      	strb	r3, [r2, #0]
						printf("Start %i measures, TXT output\r\n", meas_count);
 8004d8c:	f00b ffca 	bl	8010d24 <iprintf>
						ReinitTimer(config.tim_interval);
 8004d90:	e4cc      	b.n	800472c <CLI_proc+0x1f8>
						int32_t tmp = -1;
 8004d92:	f04f 30ff 	mov.w	r0, #4294967295
						getval(clibuf+15, &tmp, 1, 500);
 8004d96:	a905      	add	r1, sp, #20
						int32_t tmp = -1;
 8004d98:	9005      	str	r0, [sp, #20]
						getval(clibuf+15, &tmp, 1, 500);
 8004d9a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f105 000a 	add.w	r0, r5, #10
 8004da4:	f7ff f9da 	bl	800415c <getval>
						meas_cont_mode = 0;
 8004da8:	4b49      	ldr	r3, [pc, #292]	@ (8004ed0 <CLI_proc+0x99c>)
						meas_count = tmp;
 8004daa:	4a47      	ldr	r2, [pc, #284]	@ (8004ec8 <CLI_proc+0x994>)
						config.disp_type = 2;
 8004dac:	4c40      	ldr	r4, [pc, #256]	@ (8004eb0 <CLI_proc+0x97c>)
						meas_count = tmp;
 8004dae:	9905      	ldr	r1, [sp, #20]
						meas_cont_mode = 0;
 8004db0:	701e      	strb	r6, [r3, #0]
						meas_start = 1;
 8004db2:	4b46      	ldr	r3, [pc, #280]	@ (8004ecc <CLI_proc+0x998>)
						meas_count = tmp;
 8004db4:	8011      	strh	r1, [r2, #0]
						meas_start = 1;
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
						config.disp_type = 2;
 8004dba:	79e3      	ldrb	r3, [r4, #7]
						printf("Start %i measures, CSV output\r\n", meas_count);
 8004dbc:	4846      	ldr	r0, [pc, #280]	@ (8004ed8 <CLI_proc+0x9a4>)
						config.disp_type = 2;
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f362 0343 	bfi	r3, r2, #1, #3
						printf("Start %i measures, CSV output\r\n", meas_count);
 8004dc4:	b289      	uxth	r1, r1
						config.disp_type = 2;
 8004dc6:	71e3      	strb	r3, [r4, #7]
						printf("Start %i measures, CSV output\r\n", meas_count);
 8004dc8:	f00b ffac 	bl	8010d24 <iprintf>
						csvcnt = 0;
 8004dcc:	e4aa      	b.n	8004724 <CLI_proc+0x1f0>
				getString(p, config.serverIP, 1, sizeof(config.serverIP), "Server IP");
 8004dce:	4b43      	ldr	r3, [pc, #268]	@ (8004edc <CLI_proc+0x9a8>)
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	4943      	ldr	r1, [pc, #268]	@ (8004ee0 <CLI_proc+0x9ac>)
 8004dd4:	2330      	movs	r3, #48	@ 0x30
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f7ff f9ec 	bl	80041b4 <getString>
	            return;
 8004ddc:	f7ff bbb9 	b.w	8004552 <CLI_proc+0x1e>
	            getval(p, &tmp, 0, 65535);
 8004de0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
				int32_t tmp = -1;
 8004de4:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 0, 65535);
 8004de8:	462a      	mov	r2, r5
 8004dea:	a905      	add	r1, sp, #20
				int32_t tmp = -1;
 8004dec:	9405      	str	r4, [sp, #20]
	            getval(p, &tmp, 0, 65535);
 8004dee:	f7ff f9b5 	bl	800415c <getval>
				if(tmp >= 0) {
 8004df2:	9b05      	ldr	r3, [sp, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f6ff abac 	blt.w	8004552 <CLI_proc+0x1e>
					config.serverPort = tmp;
 8004dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb0 <CLI_proc+0x97c>)
					printf("Server port: %u\r\n", config.serverPort);
 8004dfc:	4839      	ldr	r0, [pc, #228]	@ (8004ee4 <CLI_proc+0x9b0>)
					config.serverPort = tmp;
 8004dfe:	f8a2 307d 	strh.w	r3, [r2, #125]	@ 0x7d
					printf("Server port: %u\r\n", config.serverPort);
 8004e02:	b299      	uxth	r1, r3
 8004e04:	e4d6      	b.n	80047b4 <CLI_proc+0x280>
				else {printf("Silent mode\r\n");}
 8004e06:	4838      	ldr	r0, [pc, #224]	@ (8004ee8 <CLI_proc+0x9b4>)
 8004e08:	f00b fff4 	bl	8010df4 <puts>
 8004e0c:	e777      	b.n	8004cfe <CLI_proc+0x7ca>
								config.disp_type = 1;
 8004e0e:	4c28      	ldr	r4, [pc, #160]	@ (8004eb0 <CLI_proc+0x97c>)
								meas_cont_mode = 1;
 8004e10:	492f      	ldr	r1, [pc, #188]	@ (8004ed0 <CLI_proc+0x99c>)
								config.disp_type = 1;
 8004e12:	79e3      	ldrb	r3, [r4, #7]
								printf("Start continuous measurement, TXT format\r\n");
 8004e14:	4835      	ldr	r0, [pc, #212]	@ (8004eec <CLI_proc+0x9b8>)
								meas_cont_mode = 1;
 8004e16:	2201      	movs	r2, #1
								config.disp_type = 1;
 8004e18:	f362 0343 	bfi	r3, r2, #1, #3
								meas_cont_mode = 1;
 8004e1c:	700a      	strb	r2, [r1, #0]
								config.disp_type = 1;
 8004e1e:	71e3      	strb	r3, [r4, #7]
								printf("Start continuous measurement, TXT format\r\n");
 8004e20:	f00b ffe8 	bl	8010df4 <puts>
								ReinitTimer(config.tim_interval);
 8004e24:	e482      	b.n	800472c <CLI_proc+0x1f8>
					if(tmp==1) printf("Display type TXT\r\n");
 8004e26:	4832      	ldr	r0, [pc, #200]	@ (8004ef0 <CLI_proc+0x9bc>)
 8004e28:	f00b ffe4 	bl	8010df4 <puts>
 8004e2c:	e764      	b.n	8004cf8 <CLI_proc+0x7c4>
					else if(tmp==2) { printf("Display type CSV"); printCSVheader();}
 8004e2e:	4831      	ldr	r0, [pc, #196]	@ (8004ef4 <CLI_proc+0x9c0>)
 8004e30:	f00b ff78 	bl	8010d24 <iprintf>
 8004e34:	f002 fc8a 	bl	800774c <printCSVheader>
 8004e38:	e75e      	b.n	8004cf8 <CLI_proc+0x7c4>
	            getval(p, &tmp, 0, 65535);
 8004e3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
				int32_t tmp = -1;
 8004e3e:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 0, 65535);
 8004e42:	2200      	movs	r2, #0
 8004e44:	a905      	add	r1, sp, #20
				int32_t tmp = -1;
 8004e46:	9405      	str	r4, [sp, #20]
	            getval(p, &tmp, 0, 65535);
 8004e48:	f7ff f988 	bl	800415c <getval>
				if(tmp >= 0) {
 8004e4c:	9b05      	ldr	r3, [sp, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f6ff ab7f 	blt.w	8004552 <CLI_proc+0x1e>
					config.mqttPort = tmp;
 8004e54:	4a16      	ldr	r2, [pc, #88]	@ (8004eb0 <CLI_proc+0x97c>)
					printf("MQTT port: %u\r\n", config.mqttPort);
 8004e56:	4828      	ldr	r0, [pc, #160]	@ (8004ef8 <CLI_proc+0x9c4>)
					config.mqttPort = tmp;
 8004e58:	f8a2 30af 	strh.w	r3, [r2, #175]	@ 0xaf
					printf("MQTT port: %u\r\n", config.mqttPort);
 8004e5c:	b299      	uxth	r1, r3
 8004e5e:	e4a9      	b.n	80047b4 <CLI_proc+0x280>
				getString(p, config.mqttIP, 1, sizeof(config.mqttIP), "MQTT IP");
 8004e60:	4b26      	ldr	r3, [pc, #152]	@ (8004efc <CLI_proc+0x9c8>)
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	4926      	ldr	r1, [pc, #152]	@ (8004f00 <CLI_proc+0x9cc>)
 8004e66:	2330      	movs	r3, #48	@ 0x30
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f7ff f9a3 	bl	80041b4 <getString>
	            return;
 8004e6e:	f7ff bb70 	b.w	8004552 <CLI_proc+0x1e>
				getString(p, config.mqttPass, 1, sizeof(config.mqttPass), "MQTT Password");
 8004e72:	4b24      	ldr	r3, [pc, #144]	@ (8004f04 <CLI_proc+0x9d0>)
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	4924      	ldr	r1, [pc, #144]	@ (8004f08 <CLI_proc+0x9d4>)
 8004e78:	2310      	movs	r3, #16
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f7ff f99a 	bl	80041b4 <getString>
	            return;
 8004e80:	f7ff bb67 	b.w	8004552 <CLI_proc+0x1e>
				getString(p, config.mqttUser, 1, sizeof(config.mqttUser), "MQTT Username");
 8004e84:	4b21      	ldr	r3, [pc, #132]	@ (8004f0c <CLI_proc+0x9d8>)
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4921      	ldr	r1, [pc, #132]	@ (8004f10 <CLI_proc+0x9dc>)
 8004e8a:	2310      	movs	r3, #16
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f7ff f991 	bl	80041b4 <getString>
	            return;
 8004e92:	f7ff bb5e 	b.w	8004552 <CLI_proc+0x1e>
					case 3: printf("Send format: Normal+MQTT\r\n"); break;
 8004e96:	481f      	ldr	r0, [pc, #124]	@ (8004f14 <CLI_proc+0x9e0>)
 8004e98:	e756      	b.n	8004d48 <CLI_proc+0x814>
					case 2: printf("Send format: MQTT\r\n"); break;
 8004e9a:	481f      	ldr	r0, [pc, #124]	@ (8004f18 <CLI_proc+0x9e4>)
 8004e9c:	e754      	b.n	8004d48 <CLI_proc+0x814>
 8004e9e:	bf00      	nop
 8004ea0:	20000230 	.word	0x20000230
 8004ea4:	08015e84 	.word	0x08015e84
 8004ea8:	88888889 	.word	0x88888889
 8004eac:	08015f00 	.word	0x08015f00
 8004eb0:	200019c0 	.word	0x200019c0
 8004eb4:	08015eb8 	.word	0x08015eb8
 8004eb8:	08015f24 	.word	0x08015f24
 8004ebc:	20001618 	.word	0x20001618
 8004ec0:	08015f90 	.word	0x08015f90
 8004ec4:	08015f9c 	.word	0x08015f9c
 8004ec8:	200019b8 	.word	0x200019b8
 8004ecc:	20001990 	.word	0x20001990
 8004ed0:	200019b6 	.word	0x200019b6
 8004ed4:	080166f4 	.word	0x080166f4
 8004ed8:	0801671c 	.word	0x0801671c
 8004edc:	08015ff0 	.word	0x08015ff0
 8004ee0:	20001a0d 	.word	0x20001a0d
 8004ee4:	0801600c 	.word	0x0801600c
 8004ee8:	08015f70 	.word	0x08015f70
 8004eec:	08016748 	.word	0x08016748
 8004ef0:	08015f48 	.word	0x08015f48
 8004ef4:	08015f5c 	.word	0x08015f5c
 8004ef8:	08016040 	.word	0x08016040
 8004efc:	0801602c 	.word	0x0801602c
 8004f00:	20001a3f 	.word	0x20001a3f
 8004f04:	08016078 	.word	0x08016078
 8004f08:	20001a81 	.word	0x20001a81
 8004f0c:	0801605c 	.word	0x0801605c
 8004f10:	20001a71 	.word	0x20001a71
 8004f14:	08015fc8 	.word	0x08015fc8
 8004f18:	08015fb4 	.word	0x08015fb4
					if((p = find("enable")))
 8004f1c:	48b1      	ldr	r0, [pc, #708]	@ (80051e4 <CLI_proc+0xcb0>)
 8004f1e:	f7ff f8f3 	bl	8004108 <find>
 8004f22:	b170      	cbz	r0, 8004f42 <CLI_proc+0xa0e>
						config.TMP117_use = 1;
 8004f24:	49b0      	ldr	r1, [pc, #704]	@ (80051e8 <CLI_proc+0xcb4>)
						TMP117.sensor_use = 1;
 8004f26:	4ab1      	ldr	r2, [pc, #708]	@ (80051ec <CLI_proc+0xcb8>)
						config.TMP117_use = 1;
 8004f28:	7a8b      	ldrb	r3, [r1, #10]
						printf("TMP117 sensor enabled\r\n");
 8004f2a:	48b1      	ldr	r0, [pc, #708]	@ (80051f0 <CLI_proc+0xcbc>)
						config.TMP117_use = 1;
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	728b      	strb	r3, [r1, #10]
						TMP117.sensor_use = 1;
 8004f32:	7813      	ldrb	r3, [r2, #0]
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	7013      	strb	r3, [r2, #0]
						printf("TMP117 sensor enabled\r\n");
 8004f3a:	f00b ff5b 	bl	8010df4 <puts>
						Save_config();
 8004f3e:	f7fc fa61 	bl	8001404 <Save_config>
					if((p = find("disable")))
 8004f42:	48ac      	ldr	r0, [pc, #688]	@ (80051f4 <CLI_proc+0xcc0>)
 8004f44:	f7ff f8e0 	bl	8004108 <find>
 8004f48:	b170      	cbz	r0, 8004f68 <CLI_proc+0xa34>
						config.TMP117_use = 0;
 8004f4a:	4aa7      	ldr	r2, [pc, #668]	@ (80051e8 <CLI_proc+0xcb4>)
						TMP117.sensor_use = 0;
 8004f4c:	4ba7      	ldr	r3, [pc, #668]	@ (80051ec <CLI_proc+0xcb8>)
						config.TMP117_use = 0;
 8004f4e:	7a91      	ldrb	r1, [r2, #10]
						printf("TMP117 sensor disabled\r\n");
 8004f50:	48a9      	ldr	r0, [pc, #676]	@ (80051f8 <CLI_proc+0xcc4>)
						config.TMP117_use = 0;
 8004f52:	f36f 0100 	bfc	r1, #0, #1
 8004f56:	7291      	strb	r1, [r2, #10]
						TMP117.sensor_use = 0;
 8004f58:	781a      	ldrb	r2, [r3, #0]
 8004f5a:	f36f 0241 	bfc	r2, #1, #1
 8004f5e:	701a      	strb	r2, [r3, #0]
						printf("TMP117 sensor disabled\r\n");
 8004f60:	f00b ff48 	bl	8010df4 <puts>
						Save_config();
 8004f64:	f7fc fa4e 	bl	8001404 <Save_config>
					if((p = find("conf ")))
 8004f68:	48a4      	ldr	r0, [pc, #656]	@ (80051fc <CLI_proc+0xcc8>)
 8004f6a:	f7ff f8cd 	bl	8004108 <find>
 8004f6e:	b1f8      	cbz	r0, 8004fb0 <CLI_proc+0xa7c>
						int32_t tmp = -1;
 8004f70:	f04f 30ff 	mov.w	r0, #4294967295
						getval(clibuf+16, &tmp, 0, 3);
 8004f74:	2303      	movs	r3, #3
 8004f76:	2200      	movs	r2, #0
 8004f78:	a905      	add	r1, sp, #20
						int32_t tmp = -1;
 8004f7a:	9005      	str	r0, [sp, #20]
						getval(clibuf+16, &tmp, 0, 3);
 8004f7c:	48a0      	ldr	r0, [pc, #640]	@ (8005200 <CLI_proc+0xccc>)
 8004f7e:	f7ff f8ed 	bl	800415c <getval>
						config.TMP117_conf = tmp;
 8004f82:	4999      	ldr	r1, [pc, #612]	@ (80051e8 <CLI_proc+0xcb4>)
						TMP117.sensor_conf = tmp;
 8004f84:	4b99      	ldr	r3, [pc, #612]	@ (80051ec <CLI_proc+0xcb8>)
						config.TMP117_conf = tmp;
 8004f86:	9d05      	ldr	r5, [sp, #20]
 8004f88:	7a8e      	ldrb	r6, [r1, #10]
						TMP117.sensor_conf = tmp;
 8004f8a:	781a      	ldrb	r2, [r3, #0]
						config.TMP117_conf = tmp;
 8004f8c:	f005 000f 	and.w	r0, r5, #15
						TMP117.sensor_conf = tmp;
 8004f90:	f360 0285 	bfi	r2, r0, #2, #4
						config.TMP117_conf = tmp;
 8004f94:	f360 0644 	bfi	r6, r0, #1, #4
						TMP117.sensor_conf = tmp;
 8004f98:	701a      	strb	r2, [r3, #0]
						config.TMP117_conf = tmp;
 8004f9a:	728e      	strb	r6, [r1, #10]
						tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 8004f9c:	f004 fc20 	bl	80097e0 <tmp117_avr_conf>
 8004fa0:	4b98      	ldr	r3, [pc, #608]	@ (8005204 <CLI_proc+0xcd0>)
						printf("TMP117 temperature config %li\r\n",tmp);
 8004fa2:	4629      	mov	r1, r5
						tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 8004fa4:	8018      	strh	r0, [r3, #0]
						printf("TMP117 temperature config %li\r\n",tmp);
 8004fa6:	4898      	ldr	r0, [pc, #608]	@ (8005208 <CLI_proc+0xcd4>)
 8004fa8:	f00b febc 	bl	8010d24 <iprintf>
						Save_config();
 8004fac:	f7fc fa2a 	bl	8001404 <Save_config>
					if((p = find("temperature ")))
 8004fb0:	4896      	ldr	r0, [pc, #600]	@ (800520c <CLI_proc+0xcd8>)
 8004fb2:	f7ff f8a9 	bl	8004108 <find>
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	f43f ace3 	beq.w	8004984 <CLI_proc+0x450>
						if(p == clibuf+23)
 8004fbe:	4b94      	ldr	r3, [pc, #592]	@ (8005210 <CLI_proc+0xcdc>)
 8004fc0:	4298      	cmp	r0, r3
 8004fc2:	f47f acdf 	bne.w	8004984 <CLI_proc+0x450>
							if((strstr(clibuf+23, "offset ")))
 8004fc6:	4993      	ldr	r1, [pc, #588]	@ (8005214 <CLI_proc+0xce0>)
 8004fc8:	f00c f8ae 	bl	8011128 <strstr>
 8004fcc:	b1b8      	cbz	r0, 8004ffe <CLI_proc+0xaca>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 8004fce:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8004fd2:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8004fd6:	a905      	add	r1, sp, #20
 8004fd8:	1de8      	adds	r0, r5, #7
 8004fda:	f7ff f925 	bl	8004228 <getFloat>
					            TMP117.temp.offset = tmp;
 8004fde:	4b83      	ldr	r3, [pc, #524]	@ (80051ec <CLI_proc+0xcb8>)
					            config.TMP117_t_offset = tmp;
 8004fe0:	4981      	ldr	r1, [pc, #516]	@ (80051e8 <CLI_proc+0xcb4>)
 8004fe2:	9805      	ldr	r0, [sp, #20]
					            TMP117.temp.offset = tmp;
 8004fe4:	f8c3 0006 	str.w	r0, [r3, #6]
					            config.TMP117_t_offset = tmp;
 8004fe8:	f8c1 000b 	str.w	r0, [r1, #11]
					            printf("TMP117 temperature offset %.6f\r\n",tmp);
 8004fec:	f7fb faec 	bl	80005c8 <__aeabi_f2d>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4888      	ldr	r0, [pc, #544]	@ (8005218 <CLI_proc+0xce4>)
 8004ff6:	f00b fe95 	bl	8010d24 <iprintf>
								Save_config();
 8004ffa:	f7fc fa03 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "en")))
 8004ffe:	4987      	ldr	r1, [pc, #540]	@ (800521c <CLI_proc+0xce8>)
 8005000:	4883      	ldr	r0, [pc, #524]	@ (8005210 <CLI_proc+0xcdc>)
 8005002:	f00c f891 	bl	8011128 <strstr>
 8005006:	b170      	cbz	r0, 8005026 <CLI_proc+0xaf2>
								TMP117.temp.use_meas = 1;
 8005008:	4978      	ldr	r1, [pc, #480]	@ (80051ec <CLI_proc+0xcb8>)
								config.TMP117_t_use = 1;
 800500a:	4c77      	ldr	r4, [pc, #476]	@ (80051e8 <CLI_proc+0xcb4>)
								TMP117.temp.use_meas = 1;
 800500c:	784b      	ldrb	r3, [r1, #1]
								config.TMP117_t_use = 1;
 800500e:	7aa2      	ldrb	r2, [r4, #10]
								printf("TMP117 temperature measure enabled\r\n");
 8005010:	4883      	ldr	r0, [pc, #524]	@ (8005220 <CLI_proc+0xcec>)
								config.TMP117_t_use = 1;
 8005012:	f042 0220 	orr.w	r2, r2, #32
								TMP117.temp.use_meas = 1;
 8005016:	f043 0301 	orr.w	r3, r3, #1
								config.TMP117_t_use = 1;
 800501a:	72a2      	strb	r2, [r4, #10]
								TMP117.temp.use_meas = 1;
 800501c:	704b      	strb	r3, [r1, #1]
								printf("TMP117 temperature measure enabled\r\n");
 800501e:	f00b fee9 	bl	8010df4 <puts>
								Save_config();
 8005022:	f7fc f9ef 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "dis")))
 8005026:	497f      	ldr	r1, [pc, #508]	@ (8005224 <CLI_proc+0xcf0>)
 8005028:	4879      	ldr	r0, [pc, #484]	@ (8005210 <CLI_proc+0xcdc>)
 800502a:	f00c f87d 	bl	8011128 <strstr>
 800502e:	2800      	cmp	r0, #0
 8005030:	f43f aa8f 	beq.w	8004552 <CLI_proc+0x1e>
								config.TMP117_t_use = 0;
 8005034:	496c      	ldr	r1, [pc, #432]	@ (80051e8 <CLI_proc+0xcb4>)
								TMP117.temp.use_meas = 0;
 8005036:	4b6d      	ldr	r3, [pc, #436]	@ (80051ec <CLI_proc+0xcb8>)
								config.TMP117_t_use = 0;
 8005038:	7a8c      	ldrb	r4, [r1, #10]
								TMP117.temp.use_meas = 0;
 800503a:	785a      	ldrb	r2, [r3, #1]
								printf("TMP117 temperature measure disable\r\n");
 800503c:	487a      	ldr	r0, [pc, #488]	@ (8005228 <CLI_proc+0xcf4>)
								config.TMP117_t_use = 0;
 800503e:	f36f 1445 	bfc	r4, #5, #1
								TMP117.temp.use_meas = 0;
 8005042:	f36f 0200 	bfc	r2, #0, #1
								config.TMP117_t_use = 0;
 8005046:	728c      	strb	r4, [r1, #10]
								TMP117.temp.use_meas = 0;
 8005048:	705a      	strb	r2, [r3, #1]
								printf("DPS368 pressure measure disable\r\n");
 800504a:	f00b fed3 	bl	8010df4 <puts>
}
 800504e:	b006      	add	sp, #24
 8005050:	ecbd 8b02 	vpop	{d8}
 8005054:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
								Save_config();
 8005058:	f7fc b9d4 	b.w	8001404 <Save_config>
			if((p = find("bme280 ")))
 800505c:	4873      	ldr	r0, [pc, #460]	@ (800522c <CLI_proc+0xcf8>)
 800505e:	f7ff f853 	bl	8004108 <find>
 8005062:	b110      	cbz	r0, 800506a <CLI_proc+0xb36>
				if(p == clibuf+11)
 8005064:	42a0      	cmp	r0, r4
 8005066:	f000 829e 	beq.w	80055a6 <CLI_proc+0x1072>
			if((p = find("dps368 ")))
 800506a:	4871      	ldr	r0, [pc, #452]	@ (8005230 <CLI_proc+0xcfc>)
 800506c:	f7ff f84c 	bl	8004108 <find>
 8005070:	2800      	cmp	r0, #0
 8005072:	f43f ab15 	beq.w	80046a0 <CLI_proc+0x16c>
				if(p == clibuf+11)
 8005076:	42a0      	cmp	r0, r4
 8005078:	f47f ab12 	bne.w	80046a0 <CLI_proc+0x16c>
					if((p = find("enable")))
 800507c:	4859      	ldr	r0, [pc, #356]	@ (80051e4 <CLI_proc+0xcb0>)
 800507e:	f7ff f843 	bl	8004108 <find>
 8005082:	b180      	cbz	r0, 80050a6 <CLI_proc+0xb72>
						config.DPS368_use = 1;
 8005084:	4858      	ldr	r0, [pc, #352]	@ (80051e8 <CLI_proc+0xcb4>)
						DPS368.sensor_use = 1;
 8005086:	496b      	ldr	r1, [pc, #428]	@ (8005234 <CLI_proc+0xd00>)
						config.DPS368_use = 1;
 8005088:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
						DPS368.sensor_use = 1;
 800508c:	780b      	ldrb	r3, [r1, #0]
						config.DPS368_use = 1;
 800508e:	f042 0201 	orr.w	r2, r2, #1
						DPS368.sensor_use = 1;
 8005092:	f043 0302 	orr.w	r3, r3, #2
						config.DPS368_use = 1;
 8005096:	f880 2032 	strb.w	r2, [r0, #50]	@ 0x32
						printf("DPS368 sensor enabled\r\n");
 800509a:	4867      	ldr	r0, [pc, #412]	@ (8005238 <CLI_proc+0xd04>)
						DPS368.sensor_use = 1;
 800509c:	700b      	strb	r3, [r1, #0]
						printf("DPS368 sensor enabled\r\n");
 800509e:	f00b fea9 	bl	8010df4 <puts>
						Save_config();
 80050a2:	f7fc f9af 	bl	8001404 <Save_config>
					if((p = find("disable")))
 80050a6:	4853      	ldr	r0, [pc, #332]	@ (80051f4 <CLI_proc+0xcc0>)
 80050a8:	f7ff f82e 	bl	8004108 <find>
 80050ac:	b180      	cbz	r0, 80050d0 <CLI_proc+0xb9c>
						config.DPS368_use = 0;
 80050ae:	494e      	ldr	r1, [pc, #312]	@ (80051e8 <CLI_proc+0xcb4>)
						DPS368.sensor_use = 0;
 80050b0:	4b60      	ldr	r3, [pc, #384]	@ (8005234 <CLI_proc+0xd00>)
						config.DPS368_use = 0;
 80050b2:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
						DPS368.sensor_use = 0;
 80050b6:	781a      	ldrb	r2, [r3, #0]
						config.DPS368_use = 0;
 80050b8:	f36f 0000 	bfc	r0, #0, #1
						DPS368.sensor_use = 0;
 80050bc:	f36f 0241 	bfc	r2, #1, #1
						config.DPS368_use = 0;
 80050c0:	f881 0032 	strb.w	r0, [r1, #50]	@ 0x32
						printf("DPS368 sensor disabled\r\n");
 80050c4:	485d      	ldr	r0, [pc, #372]	@ (800523c <CLI_proc+0xd08>)
						DPS368.sensor_use = 0;
 80050c6:	701a      	strb	r2, [r3, #0]
						printf("DPS368 sensor disabled\r\n");
 80050c8:	f00b fe94 	bl	8010df4 <puts>
						Save_config();
 80050cc:	f7fc f99a 	bl	8001404 <Save_config>
					if((p = find("conf ")))
 80050d0:	484a      	ldr	r0, [pc, #296]	@ (80051fc <CLI_proc+0xcc8>)
 80050d2:	f7ff f819 	bl	8004108 <find>
 80050d6:	b350      	cbz	r0, 800512e <CLI_proc+0xbfa>
			            getval(clibuf+16, &tmp, 0, 8);
 80050d8:	2308      	movs	r3, #8
 80050da:	2200      	movs	r2, #0
 80050dc:	a905      	add	r1, sp, #20
						int32_t tmp = -1;
 80050de:	f04f 35ff 	mov.w	r5, #4294967295
			            getval(clibuf+16, &tmp, 0, 8);
 80050e2:	4847      	ldr	r0, [pc, #284]	@ (8005200 <CLI_proc+0xccc>)
						int32_t tmp = -1;
 80050e4:	9505      	str	r5, [sp, #20]
			            getval(clibuf+16, &tmp, 0, 8);
 80050e6:	f7ff f839 	bl	800415c <getval>
			            config.DPS368_conf = tmp;
 80050ea:	4a3f      	ldr	r2, [pc, #252]	@ (80051e8 <CLI_proc+0xcb4>)
 80050ec:	9d05      	ldr	r5, [sp, #20]
 80050ee:	f892 1032 	ldrb.w	r1, [r2, #50]	@ 0x32
			            DPS368.sensor_conf = tmp;
 80050f2:	4b50      	ldr	r3, [pc, #320]	@ (8005234 <CLI_proc+0xd00>)
			            config.DPS368_conf = tmp;
 80050f4:	f005 000f 	and.w	r0, r5, #15
 80050f8:	f360 0144 	bfi	r1, r0, #1, #4
 80050fc:	f882 1032 	strb.w	r1, [r2, #50]	@ 0x32
			            DPS368.sensor_conf = tmp;
 8005100:	781a      	ldrb	r2, [r3, #0]
 8005102:	f360 0285 	bfi	r2, r0, #2, #4
 8005106:	701a      	strb	r2, [r3, #0]
			            dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 8005108:	f001 f834 	bl	8006174 <dps368_ovr_config>
 800510c:	4a4c      	ldr	r2, [pc, #304]	@ (8005240 <CLI_proc+0xd0c>)
 800510e:	4603      	mov	r3, r0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	7013      	strb	r3, [r2, #0]
			            dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 8005114:	4a4b      	ldr	r2, [pc, #300]	@ (8005244 <CLI_proc+0xd10>)
 8005116:	2000      	movs	r0, #0
 8005118:	7010      	strb	r0, [r2, #0]
			            dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 800511a:	4a4b      	ldr	r2, [pc, #300]	@ (8005248 <CLI_proc+0xd14>)
 800511c:	7013      	strb	r3, [r2, #0]
			            DPS368_temp_correct(dps368_ovr_temp);
 800511e:	f000 feaf 	bl	8005e80 <DPS368_temp_correct>
			            printf("DPS368 temperature config %li\r\n",tmp);
 8005122:	4629      	mov	r1, r5
 8005124:	4849      	ldr	r0, [pc, #292]	@ (800524c <CLI_proc+0xd18>)
 8005126:	f00b fdfd 	bl	8010d24 <iprintf>
						Save_config();
 800512a:	f7fc f96b 	bl	8001404 <Save_config>
					if((p = find("temperature ")))
 800512e:	4837      	ldr	r0, [pc, #220]	@ (800520c <CLI_proc+0xcd8>)
 8005130:	f7fe ffea 	bl	8004108 <find>
 8005134:	4605      	mov	r5, r0
 8005136:	b118      	cbz	r0, 8005140 <CLI_proc+0xc0c>
						if(p == clibuf+23)
 8005138:	4b35      	ldr	r3, [pc, #212]	@ (8005210 <CLI_proc+0xcdc>)
 800513a:	4298      	cmp	r0, r3
 800513c:	f000 8096 	beq.w	800526c <CLI_proc+0xd38>
					if((p = find("press ")))
 8005140:	4843      	ldr	r0, [pc, #268]	@ (8005250 <CLI_proc+0xd1c>)
 8005142:	f7fe ffe1 	bl	8004108 <find>
 8005146:	4605      	mov	r5, r0
 8005148:	2800      	cmp	r0, #0
 800514a:	f43f aaa9 	beq.w	80046a0 <CLI_proc+0x16c>
						if(p == clibuf+17)
 800514e:	4b41      	ldr	r3, [pc, #260]	@ (8005254 <CLI_proc+0xd20>)
 8005150:	4298      	cmp	r0, r3
 8005152:	f47f aaa5 	bne.w	80046a0 <CLI_proc+0x16c>
							if((strstr(clibuf+17, "offset ")))
 8005156:	492f      	ldr	r1, [pc, #188]	@ (8005214 <CLI_proc+0xce0>)
 8005158:	f00b ffe6 	bl	8011128 <strstr>
 800515c:	b1b8      	cbz	r0, 800518e <CLI_proc+0xc5a>
					            getFloat(clibuf+24, &tmp, -500, 500);
 800515e:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8005258 <CLI_proc+0xd24>
 8005162:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 800525c <CLI_proc+0xd28>
 8005166:	a905      	add	r1, sp, #20
 8005168:	1de8      	adds	r0, r5, #7
 800516a:	f7ff f85d 	bl	8004228 <getFloat>
					            DPS368.press.offset = tmp;
 800516e:	4b31      	ldr	r3, [pc, #196]	@ (8005234 <CLI_proc+0xd00>)
					            config.DPS368_p_offset = tmp;
 8005170:	491d      	ldr	r1, [pc, #116]	@ (80051e8 <CLI_proc+0xcb4>)
 8005172:	9805      	ldr	r0, [sp, #20]
					            DPS368.press.offset = tmp;
 8005174:	f8c3 000f 	str.w	r0, [r3, #15]
					            config.DPS368_p_offset = tmp;
 8005178:	f8c1 0037 	str.w	r0, [r1, #55]	@ 0x37
					            printf("DPS368 pressure offset %.6f\r\n",tmp);
 800517c:	f7fb fa24 	bl	80005c8 <__aeabi_f2d>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4836      	ldr	r0, [pc, #216]	@ (8005260 <CLI_proc+0xd2c>)
 8005186:	f00b fdcd 	bl	8010d24 <iprintf>
								Save_config();
 800518a:	f7fc f93b 	bl	8001404 <Save_config>
							if((strstr(clibuf+17, "en")))
 800518e:	4923      	ldr	r1, [pc, #140]	@ (800521c <CLI_proc+0xce8>)
 8005190:	4830      	ldr	r0, [pc, #192]	@ (8005254 <CLI_proc+0xd20>)
 8005192:	f00b ffc9 	bl	8011128 <strstr>
 8005196:	b180      	cbz	r0, 80051ba <CLI_proc+0xc86>
								DPS368.press.use_meas = 1;
 8005198:	4926      	ldr	r1, [pc, #152]	@ (8005234 <CLI_proc+0xd00>)
								config.DPS368_p_use = 1;
 800519a:	4c13      	ldr	r4, [pc, #76]	@ (80051e8 <CLI_proc+0xcb4>)
								DPS368.press.use_meas = 1;
 800519c:	7a8b      	ldrb	r3, [r1, #10]
								config.DPS368_p_use = 1;
 800519e:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
								printf("DPS368 pressure measure enabled\r\n");
 80051a2:	4830      	ldr	r0, [pc, #192]	@ (8005264 <CLI_proc+0xd30>)
								config.DPS368_p_use = 1;
 80051a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
								DPS368.press.use_meas = 1;
 80051a8:	f043 0301 	orr.w	r3, r3, #1
								config.DPS368_p_use = 1;
 80051ac:	f884 2032 	strb.w	r2, [r4, #50]	@ 0x32
								DPS368.press.use_meas = 1;
 80051b0:	728b      	strb	r3, [r1, #10]
								printf("DPS368 pressure measure enabled\r\n");
 80051b2:	f00b fe1f 	bl	8010df4 <puts>
								Save_config();
 80051b6:	f7fc f925 	bl	8001404 <Save_config>
							if((strstr(clibuf+17, "dis")))
 80051ba:	491a      	ldr	r1, [pc, #104]	@ (8005224 <CLI_proc+0xcf0>)
 80051bc:	4825      	ldr	r0, [pc, #148]	@ (8005254 <CLI_proc+0xd20>)
 80051be:	f00b ffb3 	bl	8011128 <strstr>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	f43f a9c5 	beq.w	8004552 <CLI_proc+0x1e>
								config.DPS368_p_use = 0;
 80051c8:	4907      	ldr	r1, [pc, #28]	@ (80051e8 <CLI_proc+0xcb4>)
								DPS368.press.use_meas = 0;
 80051ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005234 <CLI_proc+0xd00>)
								config.DPS368_p_use = 0;
 80051cc:	f891 4032 	ldrb.w	r4, [r1, #50]	@ 0x32
								DPS368.press.use_meas = 0;
 80051d0:	7a9a      	ldrb	r2, [r3, #10]
								printf("DPS368 pressure measure disable\r\n");
 80051d2:	4825      	ldr	r0, [pc, #148]	@ (8005268 <CLI_proc+0xd34>)
								config.DPS368_p_use = 0;
 80051d4:	f36f 1486 	bfc	r4, #6, #1
								DPS368.press.use_meas = 0;
 80051d8:	f36f 0200 	bfc	r2, #0, #1
								config.DPS368_p_use = 0;
 80051dc:	f881 4032 	strb.w	r4, [r1, #50]	@ 0x32
								DPS368.press.use_meas = 0;
 80051e0:	729a      	strb	r2, [r3, #10]
 80051e2:	e732      	b.n	800504a <CLI_proc+0xb16>
 80051e4:	08016090 	.word	0x08016090
 80051e8:	200019c0 	.word	0x200019c0
 80051ec:	20001bc0 	.word	0x20001bc0
 80051f0:	08016098 	.word	0x08016098
 80051f4:	080160b0 	.word	0x080160b0
 80051f8:	080160b8 	.word	0x080160b8
 80051fc:	080160d0 	.word	0x080160d0
 8005200:	20000da0 	.word	0x20000da0
 8005204:	200019b2 	.word	0x200019b2
 8005208:	080160d8 	.word	0x080160d8
 800520c:	080160f8 	.word	0x080160f8
 8005210:	20000da7 	.word	0x20000da7
 8005214:	08016108 	.word	0x08016108
 8005218:	08016110 	.word	0x08016110
 800521c:	08016134 	.word	0x08016134
 8005220:	08016138 	.word	0x08016138
 8005224:	0801615c 	.word	0x0801615c
 8005228:	08016160 	.word	0x08016160
 800522c:	0801643c 	.word	0x0801643c
 8005230:	080165b0 	.word	0x080165b0
 8005234:	20001b48 	.word	0x20001b48
 8005238:	080165b8 	.word	0x080165b8
 800523c:	080165d0 	.word	0x080165d0
 8005240:	200019ae 	.word	0x200019ae
 8005244:	200019b1 	.word	0x200019b1
 8005248:	200019b0 	.word	0x200019b0
 800524c:	080165e8 	.word	0x080165e8
 8005250:	08016364 	.word	0x08016364
 8005254:	20000da1 	.word	0x20000da1
 8005258:	43fa0000 	.word	0x43fa0000
 800525c:	c3fa0000 	.word	0xc3fa0000
 8005260:	08016674 	.word	0x08016674
 8005264:	08016694 	.word	0x08016694
 8005268:	080166b8 	.word	0x080166b8
							if((strstr(clibuf+23, "offset ")))
 800526c:	496c      	ldr	r1, [pc, #432]	@ (8005420 <CLI_proc+0xeec>)
 800526e:	f00b ff5b 	bl	8011128 <strstr>
 8005272:	b1b8      	cbz	r0, 80052a4 <CLI_proc+0xd70>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 8005274:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8005278:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 800527c:	a905      	add	r1, sp, #20
 800527e:	1de8      	adds	r0, r5, #7
 8005280:	f7fe ffd2 	bl	8004228 <getFloat>
					            config.DPS368_t_offset = tmp;
 8005284:	4b67      	ldr	r3, [pc, #412]	@ (8005424 <CLI_proc+0xef0>)
					            DPS368.temp.offset = tmp;
 8005286:	4968      	ldr	r1, [pc, #416]	@ (8005428 <CLI_proc+0xef4>)
					            config.DPS368_t_offset = tmp;
 8005288:	9805      	ldr	r0, [sp, #20]
 800528a:	f8c3 0033 	str.w	r0, [r3, #51]	@ 0x33
					            DPS368.temp.offset = tmp;
 800528e:	f8c1 0006 	str.w	r0, [r1, #6]
					            printf("DPS368 temperature offset %.6f\r\n",tmp);
 8005292:	f7fb f999 	bl	80005c8 <__aeabi_f2d>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4864      	ldr	r0, [pc, #400]	@ (800542c <CLI_proc+0xef8>)
 800529c:	f00b fd42 	bl	8010d24 <iprintf>
								Save_config();
 80052a0:	f7fc f8b0 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "en")))
 80052a4:	4962      	ldr	r1, [pc, #392]	@ (8005430 <CLI_proc+0xefc>)
 80052a6:	4863      	ldr	r0, [pc, #396]	@ (8005434 <CLI_proc+0xf00>)
 80052a8:	f00b ff3e 	bl	8011128 <strstr>
 80052ac:	b180      	cbz	r0, 80052d0 <CLI_proc+0xd9c>
								config.DPS368_t_use = 1;
 80052ae:	485d      	ldr	r0, [pc, #372]	@ (8005424 <CLI_proc+0xef0>)
								DPS368.temp.use_meas = 1;
 80052b0:	495d      	ldr	r1, [pc, #372]	@ (8005428 <CLI_proc+0xef4>)
								config.DPS368_t_use = 1;
 80052b2:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
								DPS368.temp.use_meas = 1;
 80052b6:	784b      	ldrb	r3, [r1, #1]
								config.DPS368_t_use = 1;
 80052b8:	f042 0220 	orr.w	r2, r2, #32
								DPS368.temp.use_meas = 1;
 80052bc:	f043 0301 	orr.w	r3, r3, #1
								config.DPS368_t_use = 1;
 80052c0:	f880 2032 	strb.w	r2, [r0, #50]	@ 0x32
								printf("DPS368 temperature measure enabled\r\n");
 80052c4:	485c      	ldr	r0, [pc, #368]	@ (8005438 <CLI_proc+0xf04>)
								DPS368.temp.use_meas = 1;
 80052c6:	704b      	strb	r3, [r1, #1]
								printf("DPS368 temperature measure enabled\r\n");
 80052c8:	f00b fd94 	bl	8010df4 <puts>
								Save_config();
 80052cc:	f7fc f89a 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "dis")))
 80052d0:	495a      	ldr	r1, [pc, #360]	@ (800543c <CLI_proc+0xf08>)
 80052d2:	4858      	ldr	r0, [pc, #352]	@ (8005434 <CLI_proc+0xf00>)
 80052d4:	f00b ff28 	bl	8011128 <strstr>
 80052d8:	2800      	cmp	r0, #0
 80052da:	f43f af31 	beq.w	8005140 <CLI_proc+0xc0c>
								config.DPS368_t_use = 0;
 80052de:	4951      	ldr	r1, [pc, #324]	@ (8005424 <CLI_proc+0xef0>)
								DPS368.temp.use_meas = 0;
 80052e0:	4b51      	ldr	r3, [pc, #324]	@ (8005428 <CLI_proc+0xef4>)
								config.DPS368_t_use = 0;
 80052e2:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
								DPS368.temp.use_meas = 0;
 80052e6:	785a      	ldrb	r2, [r3, #1]
								config.DPS368_t_use = 0;
 80052e8:	f36f 1045 	bfc	r0, #5, #1
								DPS368.temp.use_meas = 0;
 80052ec:	f36f 0200 	bfc	r2, #0, #1
								config.DPS368_t_use = 0;
 80052f0:	f881 0032 	strb.w	r0, [r1, #50]	@ 0x32
								printf("DPS368 temperature measure disable\r\n");
 80052f4:	4852      	ldr	r0, [pc, #328]	@ (8005440 <CLI_proc+0xf0c>)
								DPS368.temp.use_meas = 0;
 80052f6:	705a      	strb	r2, [r3, #1]
								printf("DPS368 temperature measure disable\r\n");
 80052f8:	f00b fd7c 	bl	8010df4 <puts>
								Save_config();
 80052fc:	f7fc f882 	bl	8001404 <Save_config>
 8005300:	e71e      	b.n	8005140 <CLI_proc+0xc0c>
							if((strstr(clibuf+23, "offset ")))
 8005302:	4947      	ldr	r1, [pc, #284]	@ (8005420 <CLI_proc+0xeec>)
 8005304:	f00b ff10 	bl	8011128 <strstr>
 8005308:	b1b8      	cbz	r0, 800533a <CLI_proc+0xe06>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 800530a:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800530e:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8005312:	a905      	add	r1, sp, #20
 8005314:	1de0      	adds	r0, r4, #7
 8005316:	f7fe ff87 	bl	8004228 <getFloat>
					            MS8607.temp.offset = tmp;
 800531a:	4b4a      	ldr	r3, [pc, #296]	@ (8005444 <CLI_proc+0xf10>)
					            config.MS8607_t_offset = tmp;
 800531c:	4941      	ldr	r1, [pc, #260]	@ (8005424 <CLI_proc+0xef0>)
 800531e:	9805      	ldr	r0, [sp, #20]
					            MS8607.temp.offset = tmp;
 8005320:	f8c3 0006 	str.w	r0, [r3, #6]
					            config.MS8607_t_offset = tmp;
 8005324:	f8c1 0019 	str.w	r0, [r1, #25]
					            printf("MS8607 temperature offset %.6f\r\n",tmp);
 8005328:	f7fb f94e 	bl	80005c8 <__aeabi_f2d>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4845      	ldr	r0, [pc, #276]	@ (8005448 <CLI_proc+0xf14>)
 8005332:	f00b fcf7 	bl	8010d24 <iprintf>
								Save_config();
 8005336:	f7fc f865 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "en")))
 800533a:	493d      	ldr	r1, [pc, #244]	@ (8005430 <CLI_proc+0xefc>)
 800533c:	483d      	ldr	r0, [pc, #244]	@ (8005434 <CLI_proc+0xf00>)
 800533e:	f00b fef3 	bl	8011128 <strstr>
 8005342:	b170      	cbz	r0, 8005362 <CLI_proc+0xe2e>
								MS8607.temp.use_meas = 1;
 8005344:	493f      	ldr	r1, [pc, #252]	@ (8005444 <CLI_proc+0xf10>)
								config.MS8607_t_use = 1;
 8005346:	4c37      	ldr	r4, [pc, #220]	@ (8005424 <CLI_proc+0xef0>)
								MS8607.temp.use_meas = 1;
 8005348:	784b      	ldrb	r3, [r1, #1]
								config.MS8607_t_use = 1;
 800534a:	7e22      	ldrb	r2, [r4, #24]
								printf("MS8607 temperature measure enabled\r\n");
 800534c:	483f      	ldr	r0, [pc, #252]	@ (800544c <CLI_proc+0xf18>)
								config.MS8607_t_use = 1;
 800534e:	f042 0220 	orr.w	r2, r2, #32
								MS8607.temp.use_meas = 1;
 8005352:	f043 0301 	orr.w	r3, r3, #1
								config.MS8607_t_use = 1;
 8005356:	7622      	strb	r2, [r4, #24]
								MS8607.temp.use_meas = 1;
 8005358:	704b      	strb	r3, [r1, #1]
								printf("MS8607 temperature measure enabled\r\n");
 800535a:	f00b fd4b 	bl	8010df4 <puts>
								Save_config();
 800535e:	f7fc f851 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "dis")))
 8005362:	4936      	ldr	r1, [pc, #216]	@ (800543c <CLI_proc+0xf08>)
 8005364:	4833      	ldr	r0, [pc, #204]	@ (8005434 <CLI_proc+0xf00>)
 8005366:	f00b fedf 	bl	8011128 <strstr>
 800536a:	2800      	cmp	r0, #0
 800536c:	f43f ab6c 	beq.w	8004a48 <CLI_proc+0x514>
								config.MS8607_t_use = 0;
 8005370:	492c      	ldr	r1, [pc, #176]	@ (8005424 <CLI_proc+0xef0>)
								MS8607.temp.use_meas = 0;
 8005372:	4b34      	ldr	r3, [pc, #208]	@ (8005444 <CLI_proc+0xf10>)
								config.MS8607_t_use = 0;
 8005374:	7e0c      	ldrb	r4, [r1, #24]
								MS8607.temp.use_meas = 0;
 8005376:	785a      	ldrb	r2, [r3, #1]
								printf("MS8607 temperature measure disable\r\n");
 8005378:	4835      	ldr	r0, [pc, #212]	@ (8005450 <CLI_proc+0xf1c>)
								MS8607.temp.use_meas = 0;
 800537a:	f36f 0200 	bfc	r2, #0, #1
								config.MS8607_t_use = 0;
 800537e:	f36f 1445 	bfc	r4, #5, #1
 8005382:	760c      	strb	r4, [r1, #24]
								MS8607.temp.use_meas = 0;
 8005384:	705a      	strb	r2, [r3, #1]
								printf("MS8607 temperature measure disable\r\n");
 8005386:	f00b fd35 	bl	8010df4 <puts>
								Save_config();
 800538a:	f7fc f83b 	bl	8001404 <Save_config>
 800538e:	f7ff bb5b 	b.w	8004a48 <CLI_proc+0x514>
							if((strstr(clibuf+17, "offset ")))
 8005392:	4923      	ldr	r1, [pc, #140]	@ (8005420 <CLI_proc+0xeec>)
 8005394:	f00b fec8 	bl	8011128 <strstr>
 8005398:	b1b0      	cbz	r0, 80053c8 <CLI_proc+0xe94>
					            getFloat(clibuf+24, &tmp, -500, 500);
 800539a:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8005454 <CLI_proc+0xf20>
 800539e:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8005458 <CLI_proc+0xf24>
 80053a2:	a905      	add	r1, sp, #20
 80053a4:	1de0      	adds	r0, r4, #7
 80053a6:	f7fe ff3f 	bl	8004228 <getFloat>
					            MS8607.press.offset = tmp;
 80053aa:	4b26      	ldr	r3, [pc, #152]	@ (8005444 <CLI_proc+0xf10>)
					            config.MS8607_p_offset = tmp;
 80053ac:	491d      	ldr	r1, [pc, #116]	@ (8005424 <CLI_proc+0xef0>)
 80053ae:	9805      	ldr	r0, [sp, #20]
					            MS8607.press.offset = tmp;
 80053b0:	6198      	str	r0, [r3, #24]
					            config.MS8607_p_offset = tmp;
 80053b2:	f8c1 0021 	str.w	r0, [r1, #33]	@ 0x21
					            printf("MS8607 pressure offset %.6f\r\n",tmp);
 80053b6:	f7fb f907 	bl	80005c8 <__aeabi_f2d>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4827      	ldr	r0, [pc, #156]	@ (800545c <CLI_proc+0xf28>)
 80053c0:	f00b fcb0 	bl	8010d24 <iprintf>
								Save_config();
 80053c4:	f7fc f81e 	bl	8001404 <Save_config>
							if((strstr(clibuf+17, "en")))
 80053c8:	4919      	ldr	r1, [pc, #100]	@ (8005430 <CLI_proc+0xefc>)
 80053ca:	4825      	ldr	r0, [pc, #148]	@ (8005460 <CLI_proc+0xf2c>)
 80053cc:	f00b feac 	bl	8011128 <strstr>
 80053d0:	b170      	cbz	r0, 80053f0 <CLI_proc+0xebc>
								MS8607.press.use_meas = 1;
 80053d2:	491c      	ldr	r1, [pc, #112]	@ (8005444 <CLI_proc+0xf10>)
								config.MS8607_p_use = 1;
 80053d4:	4c13      	ldr	r4, [pc, #76]	@ (8005424 <CLI_proc+0xef0>)
								MS8607.press.use_meas = 1;
 80053d6:	7ccb      	ldrb	r3, [r1, #19]
								config.MS8607_p_use = 1;
 80053d8:	7e22      	ldrb	r2, [r4, #24]
								printf("MS8607 pressure measure enabled\r\n");
 80053da:	4822      	ldr	r0, [pc, #136]	@ (8005464 <CLI_proc+0xf30>)
								config.MS8607_p_use = 1;
 80053dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
								MS8607.press.use_meas = 1;
 80053e0:	f043 0301 	orr.w	r3, r3, #1
								config.MS8607_p_use = 1;
 80053e4:	7622      	strb	r2, [r4, #24]
								MS8607.press.use_meas = 1;
 80053e6:	74cb      	strb	r3, [r1, #19]
								printf("MS8607 pressure measure enabled\r\n");
 80053e8:	f00b fd04 	bl	8010df4 <puts>
								Save_config();
 80053ec:	f7fc f80a 	bl	8001404 <Save_config>
							if((strstr(clibuf+17, "dis")))
 80053f0:	4912      	ldr	r1, [pc, #72]	@ (800543c <CLI_proc+0xf08>)
 80053f2:	481b      	ldr	r0, [pc, #108]	@ (8005460 <CLI_proc+0xf2c>)
 80053f4:	f00b fe98 	bl	8011128 <strstr>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	f43f ab2e 	beq.w	8004a5a <CLI_proc+0x526>
								config.MS8607_p_use = 0;
 80053fe:	4909      	ldr	r1, [pc, #36]	@ (8005424 <CLI_proc+0xef0>)
								MS8607.press.use_meas = 0;
 8005400:	4b10      	ldr	r3, [pc, #64]	@ (8005444 <CLI_proc+0xf10>)
								config.MS8607_p_use = 0;
 8005402:	7e0c      	ldrb	r4, [r1, #24]
								MS8607.press.use_meas = 0;
 8005404:	7cda      	ldrb	r2, [r3, #19]
								printf("MS8607 pressure measure disable\r\n");
 8005406:	4818      	ldr	r0, [pc, #96]	@ (8005468 <CLI_proc+0xf34>)
								MS8607.press.use_meas = 0;
 8005408:	f36f 0200 	bfc	r2, #0, #1
								config.MS8607_p_use = 0;
 800540c:	f36f 14c7 	bfc	r4, #7, #1
 8005410:	760c      	strb	r4, [r1, #24]
								MS8607.press.use_meas = 0;
 8005412:	74da      	strb	r2, [r3, #19]
								printf("MS8607 pressure measure disable\r\n");
 8005414:	f00b fcee 	bl	8010df4 <puts>
								Save_config();
 8005418:	f7fb fff4 	bl	8001404 <Save_config>
 800541c:	f7ff bb1d 	b.w	8004a5a <CLI_proc+0x526>
 8005420:	08016108 	.word	0x08016108
 8005424:	200019c0 	.word	0x200019c0
 8005428:	20001b48 	.word	0x20001b48
 800542c:	08016608 	.word	0x08016608
 8005430:	08016134 	.word	0x08016134
 8005434:	20000da7 	.word	0x20000da7
 8005438:	0801662c 	.word	0x0801662c
 800543c:	0801615c 	.word	0x0801615c
 8005440:	08016650 	.word	0x08016650
 8005444:	20001b84 	.word	0x20001b84
 8005448:	080162f8 	.word	0x080162f8
 800544c:	0801631c 	.word	0x0801631c
 8005450:	08016340 	.word	0x08016340
 8005454:	43fa0000 	.word	0x43fa0000
 8005458:	c3fa0000 	.word	0xc3fa0000
 800545c:	0801636c 	.word	0x0801636c
 8005460:	20000da1 	.word	0x20000da1
 8005464:	0801638c 	.word	0x0801638c
 8005468:	080163b0 	.word	0x080163b0
					if((p = find("enable")))
 800546c:	48a5      	ldr	r0, [pc, #660]	@ (8005704 <CLI_proc+0x11d0>)
 800546e:	f7fe fe4b 	bl	8004108 <find>
 8005472:	b170      	cbz	r0, 8005492 <CLI_proc+0xf5e>
						config.SHT3_use = 1;
 8005474:	48a4      	ldr	r0, [pc, #656]	@ (8005708 <CLI_proc+0x11d4>)
						SHT3.sensor_use = 1;
 8005476:	49a5      	ldr	r1, [pc, #660]	@ (800570c <CLI_proc+0x11d8>)
						config.SHT3_use = 1;
 8005478:	7bc2      	ldrb	r2, [r0, #15]
						SHT3.sensor_use = 1;
 800547a:	780b      	ldrb	r3, [r1, #0]
						config.SHT3_use = 1;
 800547c:	f042 0201 	orr.w	r2, r2, #1
						SHT3.sensor_use = 1;
 8005480:	f043 0302 	orr.w	r3, r3, #2
						config.SHT3_use = 1;
 8005484:	73c2      	strb	r2, [r0, #15]
						printf("SHTC3 sensor enabled\r\n");
 8005486:	48a2      	ldr	r0, [pc, #648]	@ (8005710 <CLI_proc+0x11dc>)
						SHT3.sensor_use = 1;
 8005488:	700b      	strb	r3, [r1, #0]
						printf("SHTC3 sensor enabled\r\n");
 800548a:	f00b fcb3 	bl	8010df4 <puts>
						Save_config();
 800548e:	f7fb ffb9 	bl	8001404 <Save_config>
					if((p = find("disable")))
 8005492:	48a0      	ldr	r0, [pc, #640]	@ (8005714 <CLI_proc+0x11e0>)
 8005494:	f7fe fe38 	bl	8004108 <find>
 8005498:	b170      	cbz	r0, 80054b8 <CLI_proc+0xf84>
						config.SHT3_use = 0;
 800549a:	499b      	ldr	r1, [pc, #620]	@ (8005708 <CLI_proc+0x11d4>)
						SHT3.sensor_use = 0;
 800549c:	4b9b      	ldr	r3, [pc, #620]	@ (800570c <CLI_proc+0x11d8>)
						config.SHT3_use = 0;
 800549e:	7bc8      	ldrb	r0, [r1, #15]
						SHT3.sensor_use = 0;
 80054a0:	781a      	ldrb	r2, [r3, #0]
						config.SHT3_use = 0;
 80054a2:	f36f 0000 	bfc	r0, #0, #1
						SHT3.sensor_use = 0;
 80054a6:	f36f 0241 	bfc	r2, #1, #1
						config.SHT3_use = 0;
 80054aa:	73c8      	strb	r0, [r1, #15]
						printf("SHTC3 sensor disabled\r\n");
 80054ac:	489a      	ldr	r0, [pc, #616]	@ (8005718 <CLI_proc+0x11e4>)
						SHT3.sensor_use = 0;
 80054ae:	701a      	strb	r2, [r3, #0]
						printf("SHTC3 sensor disabled\r\n");
 80054b0:	f00b fca0 	bl	8010df4 <puts>
						Save_config();
 80054b4:	f7fb ffa6 	bl	8001404 <Save_config>
					if((p = find("conf ")))
 80054b8:	4898      	ldr	r0, [pc, #608]	@ (800571c <CLI_proc+0x11e8>)
 80054ba:	f7fe fe25 	bl	8004108 <find>
 80054be:	b1e0      	cbz	r0, 80054fa <CLI_proc+0xfc6>
			            getval(clibuf+15, &tmp, 0, 1);
 80054c0:	2301      	movs	r3, #1
 80054c2:	2200      	movs	r2, #0
 80054c4:	a905      	add	r1, sp, #20
						int32_t tmp = -1;
 80054c6:	f04f 35ff 	mov.w	r5, #4294967295
			            getval(clibuf+15, &tmp, 0, 1);
 80054ca:	4895      	ldr	r0, [pc, #596]	@ (8005720 <CLI_proc+0x11ec>)
						int32_t tmp = -1;
 80054cc:	9505      	str	r5, [sp, #20]
			            getval(clibuf+15, &tmp, 0, 1);
 80054ce:	f7fe fe45 	bl	800415c <getval>
			            config.SHT3_conf = tmp;
 80054d2:	4a8d      	ldr	r2, [pc, #564]	@ (8005708 <CLI_proc+0x11d4>)
 80054d4:	9905      	ldr	r1, [sp, #20]
 80054d6:	7bd5      	ldrb	r5, [r2, #15]
			            SHT3.sensor_conf = tmp;
 80054d8:	4b8c      	ldr	r3, [pc, #560]	@ (800570c <CLI_proc+0x11d8>)
			            config.SHT3_conf = tmp;
 80054da:	f001 000f 	and.w	r0, r1, #15
 80054de:	f360 0544 	bfi	r5, r0, #1, #4
 80054e2:	73d5      	strb	r5, [r2, #15]
			            SHT3.sensor_conf = tmp;
 80054e4:	781a      	ldrb	r2, [r3, #0]
			            sht3_mode=tmp;
 80054e6:	4d8f      	ldr	r5, [pc, #572]	@ (8005724 <CLI_proc+0x11f0>)
			            SHT3.sensor_conf = tmp;
 80054e8:	f360 0285 	bfi	r2, r0, #2, #4
			            printf("SHT3 temperature config %li\r\n",tmp);
 80054ec:	488e      	ldr	r0, [pc, #568]	@ (8005728 <CLI_proc+0x11f4>)
			            SHT3.sensor_conf = tmp;
 80054ee:	701a      	strb	r2, [r3, #0]
			            sht3_mode=tmp;
 80054f0:	7029      	strb	r1, [r5, #0]
			            printf("SHT3 temperature config %li\r\n",tmp);
 80054f2:	f00b fc17 	bl	8010d24 <iprintf>
						Save_config();
 80054f6:	f7fb ff85 	bl	8001404 <Save_config>
					if((p = find("temperature ")))
 80054fa:	488c      	ldr	r0, [pc, #560]	@ (800572c <CLI_proc+0x11f8>)
 80054fc:	f7fe fe04 	bl	8004108 <find>
 8005500:	4605      	mov	r5, r0
 8005502:	b118      	cbz	r0, 800550c <CLI_proc+0xfd8>
						if(p == clibuf+22)
 8005504:	4b8a      	ldr	r3, [pc, #552]	@ (8005730 <CLI_proc+0x11fc>)
 8005506:	4298      	cmp	r0, r3
 8005508:	f000 8182 	beq.w	8005810 <CLI_proc+0x12dc>
					if((p = find("hum ")))
 800550c:	4889      	ldr	r0, [pc, #548]	@ (8005734 <CLI_proc+0x1200>)
 800550e:	f7fe fdfb 	bl	8004108 <find>
 8005512:	4605      	mov	r5, r0
 8005514:	2800      	cmp	r0, #0
 8005516:	f43f aa3c 	beq.w	8004992 <CLI_proc+0x45e>
						if(p == clibuf+14)
 800551a:	4b87      	ldr	r3, [pc, #540]	@ (8005738 <CLI_proc+0x1204>)
 800551c:	4298      	cmp	r0, r3
 800551e:	f47f aa38 	bne.w	8004992 <CLI_proc+0x45e>
							if((strstr(clibuf+14, "offset ")))
 8005522:	4986      	ldr	r1, [pc, #536]	@ (800573c <CLI_proc+0x1208>)
 8005524:	f00b fe00 	bl	8011128 <strstr>
 8005528:	b1b0      	cbz	r0, 8005558 <CLI_proc+0x1024>
						        getFloat(clibuf+21, &tmp, MIN_OFFSET, MAX_OFFSET);
 800552a:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800552e:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8005532:	a905      	add	r1, sp, #20
 8005534:	1de8      	adds	r0, r5, #7
 8005536:	f7fe fe77 	bl	8004228 <getFloat>
						        SHT3.hum.offset = tmp;
 800553a:	4b74      	ldr	r3, [pc, #464]	@ (800570c <CLI_proc+0x11d8>)
						        config.SHT3_h_offset = tmp;
 800553c:	4972      	ldr	r1, [pc, #456]	@ (8005708 <CLI_proc+0x11d4>)
 800553e:	9805      	ldr	r0, [sp, #20]
						        SHT3.hum.offset = tmp;
 8005540:	f8c3 000f 	str.w	r0, [r3, #15]
						        config.SHT3_h_offset = tmp;
 8005544:	6148      	str	r0, [r1, #20]
						        printf("SHTC3 humidity offset %.6f\r\n",tmp);
 8005546:	f7fb f83f 	bl	80005c8 <__aeabi_f2d>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	487c      	ldr	r0, [pc, #496]	@ (8005740 <CLI_proc+0x120c>)
 8005550:	f00b fbe8 	bl	8010d24 <iprintf>
						        Save_config();
 8005554:	f7fb ff56 	bl	8001404 <Save_config>
							if((strstr(clibuf+14, "en")))
 8005558:	497a      	ldr	r1, [pc, #488]	@ (8005744 <CLI_proc+0x1210>)
 800555a:	4877      	ldr	r0, [pc, #476]	@ (8005738 <CLI_proc+0x1204>)
 800555c:	f00b fde4 	bl	8011128 <strstr>
 8005560:	b170      	cbz	r0, 8005580 <CLI_proc+0x104c>
								SHT3.hum.use_meas = 1;
 8005562:	496a      	ldr	r1, [pc, #424]	@ (800570c <CLI_proc+0x11d8>)
								config.SHT3_h_use = 1;
 8005564:	4c68      	ldr	r4, [pc, #416]	@ (8005708 <CLI_proc+0x11d4>)
								SHT3.hum.use_meas = 1;
 8005566:	7a8b      	ldrb	r3, [r1, #10]
								config.SHT3_h_use = 1;
 8005568:	7be2      	ldrb	r2, [r4, #15]
								printf("SHTC3 humidity measure enabled\r\n");
 800556a:	4877      	ldr	r0, [pc, #476]	@ (8005748 <CLI_proc+0x1214>)
								config.SHT3_h_use = 1;
 800556c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
								SHT3.hum.use_meas = 1;
 8005570:	f043 0301 	orr.w	r3, r3, #1
								config.SHT3_h_use = 1;
 8005574:	73e2      	strb	r2, [r4, #15]
								SHT3.hum.use_meas = 1;
 8005576:	728b      	strb	r3, [r1, #10]
								printf("SHTC3 humidity measure enabled\r\n");
 8005578:	f00b fc3c 	bl	8010df4 <puts>
								Save_config();
 800557c:	f7fb ff42 	bl	8001404 <Save_config>
							if((strstr(clibuf+14, "dis")))
 8005580:	4972      	ldr	r1, [pc, #456]	@ (800574c <CLI_proc+0x1218>)
 8005582:	486d      	ldr	r0, [pc, #436]	@ (8005738 <CLI_proc+0x1204>)
 8005584:	f00b fdd0 	bl	8011128 <strstr>
 8005588:	2800      	cmp	r0, #0
 800558a:	f43e afe2 	beq.w	8004552 <CLI_proc+0x1e>
								config.SHT3_h_use = 0;
 800558e:	495e      	ldr	r1, [pc, #376]	@ (8005708 <CLI_proc+0x11d4>)
								SHT3.hum.use_meas = 0;
 8005590:	4b5e      	ldr	r3, [pc, #376]	@ (800570c <CLI_proc+0x11d8>)
								config.SHT3_h_use = 0;
 8005592:	7bcc      	ldrb	r4, [r1, #15]
								SHT3.hum.use_meas = 0;
 8005594:	7a9a      	ldrb	r2, [r3, #10]
								printf("SHTC3 humidity measure disable\r\n");
 8005596:	486e      	ldr	r0, [pc, #440]	@ (8005750 <CLI_proc+0x121c>)
								config.SHT3_h_use = 0;
 8005598:	f36f 1486 	bfc	r4, #6, #1
								SHT3.hum.use_meas = 0;
 800559c:	f36f 0200 	bfc	r2, #0, #1
								config.SHT3_h_use = 0;
 80055a0:	73cc      	strb	r4, [r1, #15]
								DPS368.press.use_meas = 0;
 80055a2:	729a      	strb	r2, [r3, #10]
 80055a4:	e551      	b.n	800504a <CLI_proc+0xb16>
					if((p = find("enable")))
 80055a6:	4857      	ldr	r0, [pc, #348]	@ (8005704 <CLI_proc+0x11d0>)
 80055a8:	f7fe fdae 	bl	8004108 <find>
 80055ac:	b180      	cbz	r0, 80055d0 <CLI_proc+0x109c>
						config.BME280_use = 1;
 80055ae:	4856      	ldr	r0, [pc, #344]	@ (8005708 <CLI_proc+0x11d4>)
						BME280.sensor_use = 1;
 80055b0:	4968      	ldr	r1, [pc, #416]	@ (8005754 <CLI_proc+0x1220>)
						config.BME280_use = 1;
 80055b2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
						BME280.sensor_use = 1;
 80055b6:	780b      	ldrb	r3, [r1, #0]
						config.BME280_use = 1;
 80055b8:	f042 0201 	orr.w	r2, r2, #1
						BME280.sensor_use = 1;
 80055bc:	f043 0302 	orr.w	r3, r3, #2
						config.BME280_use = 1;
 80055c0:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
						printf("BME280 sensor enabled\r\n");
 80055c4:	4864      	ldr	r0, [pc, #400]	@ (8005758 <CLI_proc+0x1224>)
						BME280.sensor_use = 1;
 80055c6:	700b      	strb	r3, [r1, #0]
						printf("BME280 sensor enabled\r\n");
 80055c8:	f00b fc14 	bl	8010df4 <puts>
						Save_config();
 80055cc:	f7fb ff1a 	bl	8001404 <Save_config>
					if((p = find("disable")))
 80055d0:	4850      	ldr	r0, [pc, #320]	@ (8005714 <CLI_proc+0x11e0>)
 80055d2:	f7fe fd99 	bl	8004108 <find>
 80055d6:	b180      	cbz	r0, 80055fa <CLI_proc+0x10c6>
						config.BME280_use = 0;
 80055d8:	494b      	ldr	r1, [pc, #300]	@ (8005708 <CLI_proc+0x11d4>)
						BME280.sensor_use = 0;
 80055da:	4b5e      	ldr	r3, [pc, #376]	@ (8005754 <CLI_proc+0x1220>)
						config.BME280_use = 0;
 80055dc:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
						BME280.sensor_use = 0;
 80055e0:	781a      	ldrb	r2, [r3, #0]
						config.BME280_use = 0;
 80055e2:	f36f 0000 	bfc	r0, #0, #1
						BME280.sensor_use = 0;
 80055e6:	f36f 0241 	bfc	r2, #1, #1
						config.BME280_use = 0;
 80055ea:	f881 0025 	strb.w	r0, [r1, #37]	@ 0x25
						printf("BME280 sensor disabled\r\n");
 80055ee:	485b      	ldr	r0, [pc, #364]	@ (800575c <CLI_proc+0x1228>)
						BME280.sensor_use = 0;
 80055f0:	701a      	strb	r2, [r3, #0]
						printf("BME280 sensor disabled\r\n");
 80055f2:	f00b fbff 	bl	8010df4 <puts>
						Save_config();
 80055f6:	f7fb ff05 	bl	8001404 <Save_config>
					if((p = find("conf ")))
 80055fa:	4848      	ldr	r0, [pc, #288]	@ (800571c <CLI_proc+0x11e8>)
 80055fc:	f7fe fd84 	bl	8004108 <find>
 8005600:	b1e0      	cbz	r0, 800563c <CLI_proc+0x1108>
			            getval(clibuf+16, &tmp, 0, 10);
 8005602:	230a      	movs	r3, #10
 8005604:	2200      	movs	r2, #0
 8005606:	a905      	add	r1, sp, #20
						int32_t tmp = -1;
 8005608:	f04f 35ff 	mov.w	r5, #4294967295
			            getval(clibuf+16, &tmp, 0, 10);
 800560c:	4854      	ldr	r0, [pc, #336]	@ (8005760 <CLI_proc+0x122c>)
						int32_t tmp = -1;
 800560e:	9505      	str	r5, [sp, #20]
			            getval(clibuf+16, &tmp, 0, 10);
 8005610:	f7fe fda4 	bl	800415c <getval>
			            config.BME280_conf = tmp;
 8005614:	4a3c      	ldr	r2, [pc, #240]	@ (8005708 <CLI_proc+0x11d4>)
 8005616:	9805      	ldr	r0, [sp, #20]
 8005618:	f892 5025 	ldrb.w	r5, [r2, #37]	@ 0x25
			            BME280.sensor_conf = tmp;
 800561c:	4b4d      	ldr	r3, [pc, #308]	@ (8005754 <CLI_proc+0x1220>)
			            config.BME280_conf = tmp;
 800561e:	f000 010f 	and.w	r1, r0, #15
 8005622:	f361 0544 	bfi	r5, r1, #1, #4
 8005626:	f882 5025 	strb.w	r5, [r2, #37]	@ 0x25
			            BME280.sensor_conf = tmp;
 800562a:	781a      	ldrb	r2, [r3, #0]
			            bme280_conf_change(tmp);
 800562c:	b2c0      	uxtb	r0, r0
			            BME280.sensor_conf = tmp;
 800562e:	f361 0285 	bfi	r2, r1, #2, #4
 8005632:	701a      	strb	r2, [r3, #0]
			            bme280_conf_change(tmp);
 8005634:	f004 fb8a 	bl	8009d4c <bme280_conf_change>
						Save_config();
 8005638:	f7fb fee4 	bl	8001404 <Save_config>
					if((p = find("temperature ")))
 800563c:	483b      	ldr	r0, [pc, #236]	@ (800572c <CLI_proc+0x11f8>)
 800563e:	f7fe fd63 	bl	8004108 <find>
 8005642:	4605      	mov	r5, r0
 8005644:	b118      	cbz	r0, 800564e <CLI_proc+0x111a>
						if(p == clibuf+23)
 8005646:	4b47      	ldr	r3, [pc, #284]	@ (8005764 <CLI_proc+0x1230>)
 8005648:	4298      	cmp	r0, r3
 800564a:	f000 8127 	beq.w	800589c <CLI_proc+0x1368>
					if((p = find("press ")))
 800564e:	4846      	ldr	r0, [pc, #280]	@ (8005768 <CLI_proc+0x1234>)
 8005650:	f7fe fd5a 	bl	8004108 <find>
 8005654:	4605      	mov	r5, r0
 8005656:	b118      	cbz	r0, 8005660 <CLI_proc+0x112c>
						if(p == clibuf+17)
 8005658:	4b44      	ldr	r3, [pc, #272]	@ (800576c <CLI_proc+0x1238>)
 800565a:	4298      	cmp	r0, r3
 800565c:	f000 808e 	beq.w	800577c <CLI_proc+0x1248>
					if((p = find("hum ")))
 8005660:	4834      	ldr	r0, [pc, #208]	@ (8005734 <CLI_proc+0x1200>)
 8005662:	f7fe fd51 	bl	8004108 <find>
 8005666:	4605      	mov	r5, r0
 8005668:	2800      	cmp	r0, #0
 800566a:	f43f acfe 	beq.w	800506a <CLI_proc+0xb36>
						if(p == clibuf+15)
 800566e:	4b2c      	ldr	r3, [pc, #176]	@ (8005720 <CLI_proc+0x11ec>)
 8005670:	4298      	cmp	r0, r3
 8005672:	f47f acfa 	bne.w	800506a <CLI_proc+0xb36>
							if((strstr(clibuf+15, "offset ")))
 8005676:	4931      	ldr	r1, [pc, #196]	@ (800573c <CLI_proc+0x1208>)
 8005678:	f00b fd56 	bl	8011128 <strstr>
 800567c:	b1b8      	cbz	r0, 80056ae <CLI_proc+0x117a>
						        getFloat(clibuf+22, &tmp, MIN_OFFSET, MAX_OFFSET);
 800567e:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8005682:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8005686:	a905      	add	r1, sp, #20
 8005688:	1de8      	adds	r0, r5, #7
 800568a:	f7fe fdcd 	bl	8004228 <getFloat>
						        BME280.hum.offset = tmp;
 800568e:	4b31      	ldr	r3, [pc, #196]	@ (8005754 <CLI_proc+0x1220>)
						        config.BME280_h_offset = tmp;
 8005690:	491d      	ldr	r1, [pc, #116]	@ (8005708 <CLI_proc+0x11d4>)
 8005692:	9805      	ldr	r0, [sp, #20]
						        BME280.hum.offset = tmp;
 8005694:	f8c3 000f 	str.w	r0, [r3, #15]
						        config.BME280_h_offset = tmp;
 8005698:	f8c1 002a 	str.w	r0, [r1, #42]	@ 0x2a
						        printf("BME280 humidity offset %.6f\r\n",tmp);
 800569c:	f7fa ff94 	bl	80005c8 <__aeabi_f2d>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4832      	ldr	r0, [pc, #200]	@ (8005770 <CLI_proc+0x123c>)
 80056a6:	f00b fb3d 	bl	8010d24 <iprintf>
						        Save_config();
 80056aa:	f7fb feab 	bl	8001404 <Save_config>
							if((strstr(clibuf+15, "en")))
 80056ae:	4925      	ldr	r1, [pc, #148]	@ (8005744 <CLI_proc+0x1210>)
 80056b0:	481b      	ldr	r0, [pc, #108]	@ (8005720 <CLI_proc+0x11ec>)
 80056b2:	f00b fd39 	bl	8011128 <strstr>
 80056b6:	b180      	cbz	r0, 80056da <CLI_proc+0x11a6>
								BME280.hum.use_meas = 1;
 80056b8:	4926      	ldr	r1, [pc, #152]	@ (8005754 <CLI_proc+0x1220>)
								config.BME280_h_use = 1;
 80056ba:	4c13      	ldr	r4, [pc, #76]	@ (8005708 <CLI_proc+0x11d4>)
								BME280.hum.use_meas = 1;
 80056bc:	7a8b      	ldrb	r3, [r1, #10]
								config.BME280_h_use = 1;
 80056be:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
								printf("BME280 humidity measure enabled\r\n");
 80056c2:	482c      	ldr	r0, [pc, #176]	@ (8005774 <CLI_proc+0x1240>)
								config.BME280_h_use = 1;
 80056c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
								BME280.hum.use_meas = 1;
 80056c8:	f043 0301 	orr.w	r3, r3, #1
								config.BME280_h_use = 1;
 80056cc:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
								BME280.hum.use_meas = 1;
 80056d0:	728b      	strb	r3, [r1, #10]
								printf("BME280 humidity measure enabled\r\n");
 80056d2:	f00b fb8f 	bl	8010df4 <puts>
								Save_config();
 80056d6:	f7fb fe95 	bl	8001404 <Save_config>
							if((strstr(clibuf+15, "dis")))
 80056da:	491c      	ldr	r1, [pc, #112]	@ (800574c <CLI_proc+0x1218>)
 80056dc:	4810      	ldr	r0, [pc, #64]	@ (8005720 <CLI_proc+0x11ec>)
 80056de:	f00b fd23 	bl	8011128 <strstr>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	f43e af35 	beq.w	8004552 <CLI_proc+0x1e>
								config.BME280_h_use = 0;
 80056e8:	4907      	ldr	r1, [pc, #28]	@ (8005708 <CLI_proc+0x11d4>)
								BME280.hum.use_meas = 0;
 80056ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005754 <CLI_proc+0x1220>)
								config.BME280_h_use = 0;
 80056ec:	f891 4025 	ldrb.w	r4, [r1, #37]	@ 0x25
								BME280.hum.use_meas = 0;
 80056f0:	7a9a      	ldrb	r2, [r3, #10]
								printf("BME280 humidity measure disable\r\n");
 80056f2:	4821      	ldr	r0, [pc, #132]	@ (8005778 <CLI_proc+0x1244>)
								config.BME280_h_use = 0;
 80056f4:	f36f 1486 	bfc	r4, #6, #1
								BME280.hum.use_meas = 0;
 80056f8:	f36f 0200 	bfc	r2, #0, #1
								config.BME280_h_use = 0;
 80056fc:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
								DPS368.press.use_meas = 0;
 8005700:	729a      	strb	r2, [r3, #10]
 8005702:	e4a2      	b.n	800504a <CLI_proc+0xb16>
 8005704:	08016090 	.word	0x08016090
 8005708:	200019c0 	.word	0x200019c0
 800570c:	20001ba8 	.word	0x20001ba8
 8005710:	0801618c 	.word	0x0801618c
 8005714:	080160b0 	.word	0x080160b0
 8005718:	080161a4 	.word	0x080161a4
 800571c:	080160d0 	.word	0x080160d0
 8005720:	20000d9f 	.word	0x20000d9f
 8005724:	200019ac 	.word	0x200019ac
 8005728:	080161bc 	.word	0x080161bc
 800572c:	080160f8 	.word	0x080160f8
 8005730:	20000da6 	.word	0x20000da6
 8005734:	08016244 	.word	0x08016244
 8005738:	20000d9e 	.word	0x20000d9e
 800573c:	08016108 	.word	0x08016108
 8005740:	0801624c 	.word	0x0801624c
 8005744:	08016134 	.word	0x08016134
 8005748:	0801626c 	.word	0x0801626c
 800574c:	0801615c 	.word	0x0801615c
 8005750:	0801628c 	.word	0x0801628c
 8005754:	20001b60 	.word	0x20001b60
 8005758:	08016444 	.word	0x08016444
 800575c:	0801645c 	.word	0x0801645c
 8005760:	20000da0 	.word	0x20000da0
 8005764:	20000da7 	.word	0x20000da7
 8005768:	08016364 	.word	0x08016364
 800576c:	20000da1 	.word	0x20000da1
 8005770:	08016548 	.word	0x08016548
 8005774:	08016568 	.word	0x08016568
 8005778:	0801658c 	.word	0x0801658c
							if((strstr(clibuf+17, "offset ")))
 800577c:	496d      	ldr	r1, [pc, #436]	@ (8005934 <CLI_proc+0x1400>)
 800577e:	f00b fcd3 	bl	8011128 <strstr>
 8005782:	b1b0      	cbz	r0, 80057b2 <CLI_proc+0x127e>
					            getFloat(clibuf+24, &tmp, -500, 500);
 8005784:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8005938 <CLI_proc+0x1404>
 8005788:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 800593c <CLI_proc+0x1408>
 800578c:	a905      	add	r1, sp, #20
 800578e:	1de8      	adds	r0, r5, #7
 8005790:	f7fe fd4a 	bl	8004228 <getFloat>
					            config.BME280_p_offset = tmp;
 8005794:	4b6a      	ldr	r3, [pc, #424]	@ (8005940 <CLI_proc+0x140c>)
					            BME280.press.offset = tmp;
 8005796:	496b      	ldr	r1, [pc, #428]	@ (8005944 <CLI_proc+0x1410>)
					            config.BME280_p_offset = tmp;
 8005798:	9805      	ldr	r0, [sp, #20]
 800579a:	f8c3 002e 	str.w	r0, [r3, #46]	@ 0x2e
					            BME280.press.offset = tmp;
 800579e:	6188      	str	r0, [r1, #24]
					            printf("BME280 pressure offset %.6f\r\n",tmp);
 80057a0:	f7fa ff12 	bl	80005c8 <__aeabi_f2d>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4867      	ldr	r0, [pc, #412]	@ (8005948 <CLI_proc+0x1414>)
 80057aa:	f00b fabb 	bl	8010d24 <iprintf>
								Save_config();
 80057ae:	f7fb fe29 	bl	8001404 <Save_config>
							if((strstr(clibuf+17, "en")))
 80057b2:	4966      	ldr	r1, [pc, #408]	@ (800594c <CLI_proc+0x1418>)
 80057b4:	4866      	ldr	r0, [pc, #408]	@ (8005950 <CLI_proc+0x141c>)
 80057b6:	f00b fcb7 	bl	8011128 <strstr>
 80057ba:	b180      	cbz	r0, 80057de <CLI_proc+0x12aa>
								config.BME280_p_use = 1;
 80057bc:	4860      	ldr	r0, [pc, #384]	@ (8005940 <CLI_proc+0x140c>)
								BME280.press.use_meas = 1;
 80057be:	4961      	ldr	r1, [pc, #388]	@ (8005944 <CLI_proc+0x1410>)
								config.BME280_p_use = 1;
 80057c0:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
								BME280.press.use_meas = 1;
 80057c4:	7ccb      	ldrb	r3, [r1, #19]
								config.BME280_p_use = 1;
 80057c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
								BME280.press.use_meas = 1;
 80057ca:	f043 0301 	orr.w	r3, r3, #1
								config.BME280_p_use = 1;
 80057ce:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
								printf("BME280 pressure measure enabled\r\n");
 80057d2:	4860      	ldr	r0, [pc, #384]	@ (8005954 <CLI_proc+0x1420>)
								BME280.press.use_meas = 1;
 80057d4:	74cb      	strb	r3, [r1, #19]
								printf("BME280 pressure measure enabled\r\n");
 80057d6:	f00b fb0d 	bl	8010df4 <puts>
								Save_config();
 80057da:	f7fb fe13 	bl	8001404 <Save_config>
							if((strstr(clibuf+17, "dis")))
 80057de:	495e      	ldr	r1, [pc, #376]	@ (8005958 <CLI_proc+0x1424>)
 80057e0:	485b      	ldr	r0, [pc, #364]	@ (8005950 <CLI_proc+0x141c>)
 80057e2:	f00b fca1 	bl	8011128 <strstr>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	f43f af3a 	beq.w	8005660 <CLI_proc+0x112c>
								config.BME280_p_use = 0;
 80057ec:	4954      	ldr	r1, [pc, #336]	@ (8005940 <CLI_proc+0x140c>)
								BME280.press.use_meas = 0;
 80057ee:	4b55      	ldr	r3, [pc, #340]	@ (8005944 <CLI_proc+0x1410>)
								config.BME280_p_use = 0;
 80057f0:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
								BME280.press.use_meas = 0;
 80057f4:	7cda      	ldrb	r2, [r3, #19]
								config.BME280_p_use = 0;
 80057f6:	f36f 10c7 	bfc	r0, #7, #1
								BME280.press.use_meas = 0;
 80057fa:	f36f 0200 	bfc	r2, #0, #1
								config.BME280_p_use = 0;
 80057fe:	f881 0025 	strb.w	r0, [r1, #37]	@ 0x25
								printf("BME280 pressure measure disable\r\n");
 8005802:	4856      	ldr	r0, [pc, #344]	@ (800595c <CLI_proc+0x1428>)
								BME280.press.use_meas = 0;
 8005804:	74da      	strb	r2, [r3, #19]
								printf("BME280 pressure measure disable\r\n");
 8005806:	f00b faf5 	bl	8010df4 <puts>
								Save_config();
 800580a:	f7fb fdfb 	bl	8001404 <Save_config>
 800580e:	e727      	b.n	8005660 <CLI_proc+0x112c>
							if((strstr(clibuf+22, "offset ")))
 8005810:	4948      	ldr	r1, [pc, #288]	@ (8005934 <CLI_proc+0x1400>)
 8005812:	f00b fc89 	bl	8011128 <strstr>
 8005816:	b1b0      	cbz	r0, 8005846 <CLI_proc+0x1312>
					            getFloat(clibuf+29, &tmp, MIN_OFFSET, MAX_OFFSET);
 8005818:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800581c:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8005820:	a905      	add	r1, sp, #20
 8005822:	1de8      	adds	r0, r5, #7
 8005824:	f7fe fd00 	bl	8004228 <getFloat>
					            config.SHT3_t_offset = tmp;
 8005828:	4b45      	ldr	r3, [pc, #276]	@ (8005940 <CLI_proc+0x140c>)
					            SHT3.temp.offset = tmp;
 800582a:	494d      	ldr	r1, [pc, #308]	@ (8005960 <CLI_proc+0x142c>)
					            config.SHT3_t_offset = tmp;
 800582c:	9805      	ldr	r0, [sp, #20]
 800582e:	6118      	str	r0, [r3, #16]
					            SHT3.temp.offset = tmp;
 8005830:	f8c1 0006 	str.w	r0, [r1, #6]
					            printf("SHTC3 temperature offset %.6f\r\n",tmp);
 8005834:	f7fa fec8 	bl	80005c8 <__aeabi_f2d>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4849      	ldr	r0, [pc, #292]	@ (8005964 <CLI_proc+0x1430>)
 800583e:	f00b fa71 	bl	8010d24 <iprintf>
								Save_config();
 8005842:	f7fb fddf 	bl	8001404 <Save_config>
							if((strstr(clibuf+22, "en")))
 8005846:	4941      	ldr	r1, [pc, #260]	@ (800594c <CLI_proc+0x1418>)
 8005848:	4847      	ldr	r0, [pc, #284]	@ (8005968 <CLI_proc+0x1434>)
 800584a:	f00b fc6d 	bl	8011128 <strstr>
 800584e:	b170      	cbz	r0, 800586e <CLI_proc+0x133a>
								config.SHT3_t_use = 1;
 8005850:	483b      	ldr	r0, [pc, #236]	@ (8005940 <CLI_proc+0x140c>)
								SHT3.temp.use_meas = 1;
 8005852:	4943      	ldr	r1, [pc, #268]	@ (8005960 <CLI_proc+0x142c>)
								config.SHT3_t_use = 1;
 8005854:	7bc2      	ldrb	r2, [r0, #15]
								SHT3.temp.use_meas = 1;
 8005856:	784b      	ldrb	r3, [r1, #1]
								config.SHT3_t_use = 1;
 8005858:	f042 0220 	orr.w	r2, r2, #32
								SHT3.temp.use_meas = 1;
 800585c:	f043 0301 	orr.w	r3, r3, #1
								config.SHT3_t_use = 1;
 8005860:	73c2      	strb	r2, [r0, #15]
								printf("SHTC3 temperature measure enabled\r\n");
 8005862:	4842      	ldr	r0, [pc, #264]	@ (800596c <CLI_proc+0x1438>)
								SHT3.temp.use_meas = 1;
 8005864:	704b      	strb	r3, [r1, #1]
								printf("SHTC3 temperature measure enabled\r\n");
 8005866:	f00b fac5 	bl	8010df4 <puts>
								Save_config();
 800586a:	f7fb fdcb 	bl	8001404 <Save_config>
							if((strstr(clibuf+22, "dis")))
 800586e:	493a      	ldr	r1, [pc, #232]	@ (8005958 <CLI_proc+0x1424>)
 8005870:	483d      	ldr	r0, [pc, #244]	@ (8005968 <CLI_proc+0x1434>)
 8005872:	f00b fc59 	bl	8011128 <strstr>
 8005876:	2800      	cmp	r0, #0
 8005878:	f43f ae48 	beq.w	800550c <CLI_proc+0xfd8>
								config.SHT3_t_use = 0;
 800587c:	4930      	ldr	r1, [pc, #192]	@ (8005940 <CLI_proc+0x140c>)
								SHT3.temp.use_meas = 0;
 800587e:	4b38      	ldr	r3, [pc, #224]	@ (8005960 <CLI_proc+0x142c>)
								config.SHT3_t_use = 0;
 8005880:	7bc8      	ldrb	r0, [r1, #15]
								SHT3.temp.use_meas = 0;
 8005882:	785a      	ldrb	r2, [r3, #1]
								config.SHT3_t_use = 0;
 8005884:	f36f 1045 	bfc	r0, #5, #1
								SHT3.temp.use_meas = 0;
 8005888:	f36f 0200 	bfc	r2, #0, #1
								config.SHT3_t_use = 0;
 800588c:	73c8      	strb	r0, [r1, #15]
								printf("SHTC3 temperature measure disable\r\n");
 800588e:	4838      	ldr	r0, [pc, #224]	@ (8005970 <CLI_proc+0x143c>)
								SHT3.temp.use_meas = 0;
 8005890:	705a      	strb	r2, [r3, #1]
								printf("SHTC3 temperature measure disable\r\n");
 8005892:	f00b faaf 	bl	8010df4 <puts>
								Save_config();
 8005896:	f7fb fdb5 	bl	8001404 <Save_config>
 800589a:	e637      	b.n	800550c <CLI_proc+0xfd8>
							if((strstr(clibuf+23, "offset ")))
 800589c:	4925      	ldr	r1, [pc, #148]	@ (8005934 <CLI_proc+0x1400>)
 800589e:	f00b fc43 	bl	8011128 <strstr>
 80058a2:	b1b8      	cbz	r0, 80058d4 <CLI_proc+0x13a0>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 80058a4:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80058a8:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 80058ac:	a905      	add	r1, sp, #20
 80058ae:	1de8      	adds	r0, r5, #7
 80058b0:	f7fe fcba 	bl	8004228 <getFloat>
					            config.BME280_t_offset = tmp;
 80058b4:	4b22      	ldr	r3, [pc, #136]	@ (8005940 <CLI_proc+0x140c>)
					            BME280.temp.offset = tmp;
 80058b6:	4923      	ldr	r1, [pc, #140]	@ (8005944 <CLI_proc+0x1410>)
					            config.BME280_t_offset = tmp;
 80058b8:	9805      	ldr	r0, [sp, #20]
 80058ba:	f8c3 0026 	str.w	r0, [r3, #38]	@ 0x26
					            BME280.temp.offset = tmp;
 80058be:	f8c1 0006 	str.w	r0, [r1, #6]
					            printf("BME280 temperature offset %.6f\r\n",tmp);
 80058c2:	f7fa fe81 	bl	80005c8 <__aeabi_f2d>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	482a      	ldr	r0, [pc, #168]	@ (8005974 <CLI_proc+0x1440>)
 80058cc:	f00b fa2a 	bl	8010d24 <iprintf>
								Save_config();
 80058d0:	f7fb fd98 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "en")))
 80058d4:	491d      	ldr	r1, [pc, #116]	@ (800594c <CLI_proc+0x1418>)
 80058d6:	4828      	ldr	r0, [pc, #160]	@ (8005978 <CLI_proc+0x1444>)
 80058d8:	f00b fc26 	bl	8011128 <strstr>
 80058dc:	b180      	cbz	r0, 8005900 <CLI_proc+0x13cc>
								config.BME280_t_use = 1;
 80058de:	4818      	ldr	r0, [pc, #96]	@ (8005940 <CLI_proc+0x140c>)
								BME280.temp.use_meas = 1;
 80058e0:	4918      	ldr	r1, [pc, #96]	@ (8005944 <CLI_proc+0x1410>)
								config.BME280_t_use = 1;
 80058e2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
								BME280.temp.use_meas = 1;
 80058e6:	784b      	ldrb	r3, [r1, #1]
								config.BME280_t_use = 1;
 80058e8:	f042 0220 	orr.w	r2, r2, #32
								BME280.temp.use_meas = 1;
 80058ec:	f043 0301 	orr.w	r3, r3, #1
								config.BME280_t_use = 1;
 80058f0:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
								printf("BME280 temperature measure enabled\r\n");
 80058f4:	4821      	ldr	r0, [pc, #132]	@ (800597c <CLI_proc+0x1448>)
								BME280.temp.use_meas = 1;
 80058f6:	704b      	strb	r3, [r1, #1]
								printf("BME280 temperature measure enabled\r\n");
 80058f8:	f00b fa7c 	bl	8010df4 <puts>
								Save_config();
 80058fc:	f7fb fd82 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "dis")))
 8005900:	4915      	ldr	r1, [pc, #84]	@ (8005958 <CLI_proc+0x1424>)
 8005902:	481d      	ldr	r0, [pc, #116]	@ (8005978 <CLI_proc+0x1444>)
 8005904:	f00b fc10 	bl	8011128 <strstr>
 8005908:	2800      	cmp	r0, #0
 800590a:	f43f aea0 	beq.w	800564e <CLI_proc+0x111a>
								config.BME280_t_use = 0;
 800590e:	490c      	ldr	r1, [pc, #48]	@ (8005940 <CLI_proc+0x140c>)
								BME280.temp.use_meas = 0;
 8005910:	4b0c      	ldr	r3, [pc, #48]	@ (8005944 <CLI_proc+0x1410>)
								config.BME280_t_use = 0;
 8005912:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
								BME280.temp.use_meas = 0;
 8005916:	785a      	ldrb	r2, [r3, #1]
								config.BME280_t_use = 0;
 8005918:	f36f 1045 	bfc	r0, #5, #1
								BME280.temp.use_meas = 0;
 800591c:	f36f 0200 	bfc	r2, #0, #1
								config.BME280_t_use = 0;
 8005920:	f881 0025 	strb.w	r0, [r1, #37]	@ 0x25
								printf("BME280 temperature measure disable\r\n");
 8005924:	4816      	ldr	r0, [pc, #88]	@ (8005980 <CLI_proc+0x144c>)
								BME280.temp.use_meas = 0;
 8005926:	705a      	strb	r2, [r3, #1]
								printf("BME280 temperature measure disable\r\n");
 8005928:	f00b fa64 	bl	8010df4 <puts>
								Save_config();
 800592c:	f7fb fd6a 	bl	8001404 <Save_config>
 8005930:	e68d      	b.n	800564e <CLI_proc+0x111a>
 8005932:	bf00      	nop
 8005934:	08016108 	.word	0x08016108
 8005938:	43fa0000 	.word	0x43fa0000
 800593c:	c3fa0000 	.word	0xc3fa0000
 8005940:	200019c0 	.word	0x200019c0
 8005944:	20001b60 	.word	0x20001b60
 8005948:	080164e0 	.word	0x080164e0
 800594c:	08016134 	.word	0x08016134
 8005950:	20000da1 	.word	0x20000da1
 8005954:	08016500 	.word	0x08016500
 8005958:	0801615c 	.word	0x0801615c
 800595c:	08016524 	.word	0x08016524
 8005960:	20001ba8 	.word	0x20001ba8
 8005964:	080161dc 	.word	0x080161dc
 8005968:	20000da6 	.word	0x20000da6
 800596c:	080161fc 	.word	0x080161fc
 8005970:	08016220 	.word	0x08016220
 8005974:	08016474 	.word	0x08016474
 8005978:	20000da7 	.word	0x20000da7
 800597c:	08016498 	.word	0x08016498
 8005980:	080164bc 	.word	0x080164bc

08005984 <CLI>:
    return (huart1.RxXferSize-huart1.RxXferCount+DEBUG_BUF_SIZE-debug_rxtail) % DEBUG_BUF_SIZE;
 8005984:	4a15      	ldr	r2, [pc, #84]	@ (80059dc <CLI+0x58>)
 8005986:	f8b2 305a 	ldrh.w	r3, [r2, #90]	@ 0x5a
void CLI() {
 800598a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (huart1.RxXferSize-huart1.RxXferCount+DEBUG_BUF_SIZE-debug_rxtail) % DEBUG_BUF_SIZE;
 800598e:	f8b2 4058 	ldrh.w	r4, [r2, #88]	@ 0x58
 8005992:	4e13      	ldr	r6, [pc, #76]	@ (80059e0 <CLI+0x5c>)
 8005994:	b29b      	uxth	r3, r3
 8005996:	1ae4      	subs	r4, r4, r3
 8005998:	8832      	ldrh	r2, [r6, #0]
 800599a:	3440      	adds	r4, #64	@ 0x40
 800599c:	1aa4      	subs	r4, r4, r2
 800599e:	4263      	negs	r3, r4
 80059a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059a4:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 80059a8:	bf58      	it	pl
 80059aa:	425c      	negpl	r4, r3
 80059ac:	b2a4      	uxth	r4, r4
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 80059ae:	b194      	cbz	r4, 80059d6 <CLI+0x52>
 80059b0:	2500      	movs	r5, #0
 80059b2:	4f0c      	ldr	r7, [pc, #48]	@ (80059e4 <CLI+0x60>)
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 80059b4:	46a8      	mov	r8, r5
 80059b6:	e000      	b.n	80059ba <CLI+0x36>
    uint8_t tmp = debug_rx_buf[debug_rxtail++];
 80059b8:	8832      	ldrh	r2, [r6, #0]
 80059ba:	5cb8      	ldrb	r0, [r7, r2]
 80059bc:	1c53      	adds	r3, r2, #1
 80059be:	b29b      	uxth	r3, r3
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 80059c0:	2b3f      	cmp	r3, #63	@ 0x3f
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 80059c2:	f105 0501 	add.w	r5, r5, #1
    uint8_t tmp = debug_rx_buf[debug_rxtail++];
 80059c6:	8033      	strh	r3, [r6, #0]
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 80059c8:	bf88      	it	hi
 80059ca:	f8a6 8000 	strhhi.w	r8, [r6]
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 80059ce:	f7fe fdb1 	bl	8004534 <CLI_proc>
 80059d2:	42a5      	cmp	r5, r4
 80059d4:	d1f0      	bne.n	80059b8 <CLI+0x34>
}
 80059d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059da:	bf00      	nop
 80059dc:	200016d4 	.word	0x200016d4
 80059e0:	200015d6 	.word	0x200015d6
 80059e4:	200015d8 	.word	0x200015d8

080059e8 <cmox_ll_init>:
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  __HAL_RCC_CRC_RELEASE_RESET();
 80059e8:	4b08      	ldr	r3, [pc, #32]	@ (8005a0c <cmox_ll_init+0x24>)
 80059ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059f0:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_CRC_CLK_ENABLE();
 80059f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80059f8:	649a      	str	r2, [r3, #72]	@ 0x48
 80059fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
 80059fc:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 80059fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a02:	9301      	str	r3, [sp, #4]
 8005a04:	9b01      	ldr	r3, [sp, #4]
  return CMOX_INIT_SUCCESS;
}
 8005a06:	2000      	movs	r0, #0
 8005a08:	b002      	add	sp, #8
 8005a0a:	4770      	bx	lr
 8005a0c:	40021000 	.word	0x40021000

08005a10 <DPS368_check>:

DPS_coeff_t DPS_coef;
volatile int32_t Kt_coef, Kp_coef;

uint8_t DPS368_check()
{
 8005a10:	b510      	push	{r4, lr}
 8005a12:	b082      	sub	sp, #8
	uint8_t value;
	SET_DPS368();
 8005a14:	f003 fe2c 	bl	8009670 <SET_DPS368>
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, DPS368_ADDR, 3, 150);
 8005a18:	4812      	ldr	r0, [pc, #72]	@ (8005a64 <DPS368_check+0x54>)
 8005a1a:	2396      	movs	r3, #150	@ 0x96
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	21ee      	movs	r1, #238	@ 0xee
 8005a20:	f006 fa22 	bl	800be68 <HAL_I2C_IsDeviceReady>
 8005a24:	4604      	mov	r4, r0
	osDelay(100);
 8005a26:	2064      	movs	r0, #100	@ 0x64
 8005a28:	f008 f9b4 	bl	800dd94 <osDelay>
	if (status == HAL_OK) {
 8005a2c:	b9b4      	cbnz	r4, 8005a5c <DPS368_check+0x4c>
		i2c_read8(&hi2c2, DPS368_REG_ID, &value, DPS368_ADDR);
 8005a2e:	23ee      	movs	r3, #238	@ 0xee
 8005a30:	480c      	ldr	r0, [pc, #48]	@ (8005a64 <DPS368_check+0x54>)
 8005a32:	f10d 0207 	add.w	r2, sp, #7
 8005a36:	210d      	movs	r1, #13
 8005a38:	f003 fd6e 	bl	8009518 <i2c_read8>
		if(value == DPS368_ID_CHK) {printf("DPS368 OK\r\n"); return 1;} else {printf("NOT DPS368\r\n"); return 0;}
 8005a3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d005      	beq.n	8005a50 <DPS368_check+0x40>
 8005a44:	4808      	ldr	r0, [pc, #32]	@ (8005a68 <DPS368_check+0x58>)
 8005a46:	f00b f9d5 	bl	8010df4 <puts>
 8005a4a:	2000      	movs	r0, #0
	} else {printf("DPS368 FAILED\r\n"); return 0;}
	return 0;
}
 8005a4c:	b002      	add	sp, #8
 8005a4e:	bd10      	pop	{r4, pc}
		if(value == DPS368_ID_CHK) {printf("DPS368 OK\r\n"); return 1;} else {printf("NOT DPS368\r\n"); return 0;}
 8005a50:	4806      	ldr	r0, [pc, #24]	@ (8005a6c <DPS368_check+0x5c>)
 8005a52:	f00b f9cf 	bl	8010df4 <puts>
 8005a56:	2001      	movs	r0, #1
}
 8005a58:	b002      	add	sp, #8
 8005a5a:	bd10      	pop	{r4, pc}
	} else {printf("DPS368 FAILED\r\n"); return 0;}
 8005a5c:	4804      	ldr	r0, [pc, #16]	@ (8005a70 <DPS368_check+0x60>)
 8005a5e:	f00b f9c9 	bl	8010df4 <puts>
 8005a62:	e7f2      	b.n	8005a4a <DPS368_check+0x3a>
 8005a64:	200017ac 	.word	0x200017ac
 8005a68:	08016784 	.word	0x08016784
 8005a6c:	08016778 	.word	0x08016778
 8005a70:	08016790 	.word	0x08016790

08005a74 <DPS368_read_coeff>:
    }
}


void DPS368_read_coeff()
{
 8005a74:	b500      	push	{lr}
 8005a76:	b08b      	sub	sp, #44	@ 0x2c
	uint8_t regs[18];
	SET_DPS368();
 8005a78:	f003 fdfa 	bl	8009670 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x10, I2C_MEMADD_SIZE_8BIT, regs, 18, 250);
 8005a7c:	ab05      	add	r3, sp, #20
 8005a7e:	21fa      	movs	r1, #250	@ 0xfa
 8005a80:	2212      	movs	r2, #18
 8005a82:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	2210      	movs	r2, #16
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	21ee      	movs	r1, #238	@ 0xee
 8005a8e:	4835      	ldr	r0, [pc, #212]	@ (8005b64 <DPS368_read_coeff+0xf0>)
 8005a90:	f006 f8cc 	bl	800bc2c <HAL_I2C_Mem_Read>
//	for(uint8_t i=0; i<19;i++){
//		printf("Coef %d : %#x\r\n",i,regs[i]);
//	}
	DPS_coef.C0 = ((uint32_t)regs[0] << 4) | (((uint32_t)regs[1] >> 4) & 0x0F);
 8005a94:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8005a98:	f89d 3014 	ldrb.w	r3, [sp, #20]
    getTwosComplement(&DPS_coef.C0, 12);
    // c0 is only used as c0*0.5, so c0_half is calculated immediately
    DPS_coef.C0 = DPS_coef.C0 / 2U;

    // now do the same thing for all other coefficients
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 8005a9c:	f89d 0016 	ldrb.w	r0, [sp, #22]
	DPS_coef.C0 = ((uint32_t)regs[0] << 4) | (((uint32_t)regs[1] >> 4) & 0x0F);
 8005aa0:	0911      	lsrs	r1, r2, #4
 8005aa2:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 8005aa6:	0212      	lsls	r2, r2, #8
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005aa8:	09db      	lsrs	r3, r3, #7
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 8005aaa:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 8005aae:	4b2e      	ldr	r3, [pc, #184]	@ (8005b68 <DPS368_read_coeff+0xf4>)
        *raw -= (uint32_t)1 << length;
 8005ab0:	bf18      	it	ne
 8005ab2:	f5a1 5180 	subne.w	r1, r1, #4096	@ 0x1000
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 8005ab6:	4310      	orrs	r0, r2
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 8005ab8:	0849      	lsrs	r1, r1, #1
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005aba:	0ad2      	lsrs	r2, r2, #11
    getTwosComplement(&DPS_coef.C1, 12);
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 8005abc:	f89d 2018 	ldrb.w	r2, [sp, #24]
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 8005ac0:	6019      	str	r1, [r3, #0]
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 8005ac2:	bf0c      	ite	eq
 8005ac4:	6058      	streq	r0, [r3, #4]
        *raw -= (uint32_t)1 << length;
 8005ac6:	f5a0 5180 	subne.w	r1, r0, #4096	@ 0x1000
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 8005aca:	f89d 0017 	ldrb.w	r0, [sp, #23]
        *raw -= (uint32_t)1 << length;
 8005ace:	bf18      	it	ne
 8005ad0:	6059      	strne	r1, [r3, #4]
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 8005ad2:	0112      	lsls	r2, r2, #4
 8005ad4:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8005ad8:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 8005adc:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005ae0:	0cd2      	lsrs	r2, r2, #19
        *raw -= (uint32_t)1 << length;
 8005ae2:	bf18      	it	ne
 8005ae4:	f5a0 1080 	subne.w	r0, r0, #1048576	@ 0x100000
 8005ae8:	6098      	str	r0, [r3, #8]
    getTwosComplement(&DPS_coef.C00, 20);
    DPS_coef.C10 = (((uint32_t)regs[5] & 0x0F) << 16) | ((uint32_t)regs[6] << 8) | (uint32_t)regs[7];
 8005aea:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8005aee:	0409      	lsls	r1, r1, #16
 8005af0:	ba52      	rev16	r2, r2
 8005af2:	f401 2170 	and.w	r1, r1, #983040	@ 0xf0000
 8005af6:	b292      	uxth	r2, r2
 8005af8:	430a      	orrs	r2, r1
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005afa:	0cc9      	lsrs	r1, r1, #19
        *raw -= (uint32_t)1 << length;
 8005afc:	bf18      	it	ne
 8005afe:	f5a2 1280 	subne.w	r2, r2, #1048576	@ 0x100000
 8005b02:	60da      	str	r2, [r3, #12]
 8005b04:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8005b08:	ba52      	rev16	r2, r2
 8005b0a:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005b0c:	0412      	lsls	r2, r2, #16
        *raw -= (uint32_t)1 << length;
 8005b0e:	bf48      	it	mi
 8005b10:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8005b14:	6119      	str	r1, [r3, #16]
 8005b16:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8005b1a:	ba52      	rev16	r2, r2
 8005b1c:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005b1e:	0410      	lsls	r0, r2, #16
        *raw -= (uint32_t)1 << length;
 8005b20:	bf48      	it	mi
 8005b22:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8005b26:	6159      	str	r1, [r3, #20]
 8005b28:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005b2c:	ba52      	rev16	r2, r2
 8005b2e:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005b30:	0412      	lsls	r2, r2, #16
        *raw -= (uint32_t)1 << length;
 8005b32:	bf48      	it	mi
 8005b34:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8005b38:	6199      	str	r1, [r3, #24]
 8005b3a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8005b3e:	ba52      	rev16	r2, r2
 8005b40:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005b42:	0410      	lsls	r0, r2, #16
        *raw -= (uint32_t)1 << length;
 8005b44:	bf48      	it	mi
 8005b46:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8005b4a:	61d9      	str	r1, [r3, #28]
 8005b4c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8005b50:	ba52      	rev16	r2, r2
 8005b52:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005b54:	0412      	lsls	r2, r2, #16
        *raw -= (uint32_t)1 << length;
 8005b56:	bf48      	it	mi
 8005b58:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8005b5c:	6219      	str	r1, [r3, #32]
//    printf("C0: %ld   C1: %ld\r\n",DPS_coef.C0,DPS_coef.C1);
//    printf("C00: %ld   C01: %ld\r\n",DPS_coef.C00,DPS_coef.C01);
//    printf("C10: %ld   C11: %ld\r\n",DPS_coef.C10,DPS_coef.C11);
//    printf("C20: %ld   C21: %ld\r\n",DPS_coef.C20,DPS_coef.C21);
//    printf("C30: %ld\r\n",DPS_coef.C30);
}
 8005b5e:	b00b      	add	sp, #44	@ 0x2c
 8005b60:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b64:	200017ac 	.word	0x200017ac
 8005b68:	20001624 	.word	0x20001624

08005b6c <DPS368_fifo>:
	printf("CFG REG 0x09 DUMP (hex): %#x\r\n",reg);
	printbinaryMSB(reg);
}

void DPS368_fifo(uint8_t endis)
{
 8005b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t reg;
	SET_DPS368();
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005b70:	4f13      	ldr	r7, [pc, #76]	@ (8005bc0 <DPS368_fifo+0x54>)
{
 8005b72:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005b74:	2401      	movs	r4, #1
 8005b76:	f10d 0517 	add.w	r5, sp, #23
 8005b7a:	f04f 08fa 	mov.w	r8, #250	@ 0xfa
{
 8005b7e:	4606      	mov	r6, r0
	SET_DPS368();
 8005b80:	f003 fd76 	bl	8009670 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005b84:	4623      	mov	r3, r4
 8005b86:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8005b8a:	9500      	str	r5, [sp, #0]
 8005b8c:	2209      	movs	r2, #9
 8005b8e:	21ee      	movs	r1, #238	@ 0xee
 8005b90:	4638      	mov	r0, r7
 8005b92:	f006 f84b 	bl	800bc2c <HAL_I2C_Mem_Read>
//	printf("(fifo) CFG REG READ (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	setBit(&reg,1,endis);
 8005b96:	4632      	mov	r2, r6
 8005b98:	4621      	mov	r1, r4
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f003 fd10 	bl	80095c0 <setBit>
//	printf("SET FIFO EN\r\n");
//	printf("(fifo) CFG REG WRITE (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005ba0:	4623      	mov	r3, r4
 8005ba2:	2209      	movs	r2, #9
 8005ba4:	21ee      	movs	r1, #238	@ 0xee
 8005ba6:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8005baa:	9500      	str	r5, [sp, #0]
 8005bac:	4638      	mov	r0, r7
 8005bae:	f005 ff17 	bl	800b9e0 <HAL_I2C_Mem_Write>
	osDelay(1);
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f008 f8ee 	bl	800dd94 <osDelay>
}
 8005bb8:	b006      	add	sp, #24
 8005bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bbe:	bf00      	nop
 8005bc0:	200017ac 	.word	0x200017ac

08005bc4 <DPS368_conf_int>:

void DPS368_conf_int(uint8_t ints)
{
 8005bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t reg;
	SET_DPS368();
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005bc8:	4f13      	ldr	r7, [pc, #76]	@ (8005c18 <DPS368_conf_int+0x54>)
{
 8005bca:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005bcc:	2401      	movs	r4, #1
 8005bce:	f10d 0517 	add.w	r5, sp, #23
 8005bd2:	f04f 08fa 	mov.w	r8, #250	@ 0xfa
{
 8005bd6:	4606      	mov	r6, r0
	SET_DPS368();
 8005bd8:	f003 fd4a 	bl	8009670 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005bdc:	4623      	mov	r3, r4
 8005bde:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8005be2:	9500      	str	r5, [sp, #0]
 8005be4:	21ee      	movs	r1, #238	@ 0xee
 8005be6:	2209      	movs	r2, #9
 8005be8:	4638      	mov	r0, r7
 8005bea:	f006 f81f 	bl	800bc2c <HAL_I2C_Mem_Read>
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	modifyRegister(&reg, 0xF0, ints);
 8005bee:	4632      	mov	r2, r6
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	21f0      	movs	r1, #240	@ 0xf0
 8005bf4:	f003 fcfa 	bl	80095ec <modifyRegister>
//	printf("SET INT \r\n");
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005bf8:	4623      	mov	r3, r4
 8005bfa:	2209      	movs	r2, #9
 8005bfc:	21ee      	movs	r1, #238	@ 0xee
 8005bfe:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8005c02:	9500      	str	r5, [sp, #0]
 8005c04:	4638      	mov	r0, r7
 8005c06:	f005 feeb 	bl	800b9e0 <HAL_I2C_Mem_Write>
	osDelay(1);
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f008 f8c2 	bl	800dd94 <osDelay>
}
 8005c10:	b006      	add	sp, #24
 8005c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c16:	bf00      	nop
 8005c18:	200017ac 	.word	0x200017ac

08005c1c <DPS368_temp_source>:

void DPS368_temp_source()
{
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	b086      	sub	sp, #24
	uint8_t reg, reg_mod;
	SET_DPS368();
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8005c20:	2401      	movs	r4, #1
 8005c22:	f10d 0517 	add.w	r5, sp, #23
 8005c26:	26fa      	movs	r6, #250	@ 0xfa
	SET_DPS368();
 8005c28:	f003 fd22 	bl	8009670 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8005c2c:	4623      	mov	r3, r4
 8005c2e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005c32:	2207      	movs	r2, #7
 8005c34:	9500      	str	r5, [sp, #0]
 8005c36:	21ee      	movs	r1, #238	@ 0xee
 8005c38:	4811      	ldr	r0, [pc, #68]	@ (8005c80 <DPS368_temp_source+0x64>)
 8005c3a:	f005 fff7 	bl	800bc2c <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x07 (hex) (NOMOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x28, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005c3e:	f10d 0316 	add.w	r3, sp, #22
 8005c42:	2228      	movs	r2, #40	@ 0x28
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	21ee      	movs	r1, #238	@ 0xee
 8005c4e:	480c      	ldr	r0, [pc, #48]	@ (8005c80 <DPS368_temp_source+0x64>)
 8005c50:	f005 ffec 	bl	800bc2c <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x28 (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	if((reg & 0x80) == 0) {
 8005c54:	f99d 3016 	ldrsb.w	r3, [sp, #22]
 8005c58:	2b00      	cmp	r3, #0
//		printf("Internal Temp\r\n");
		setBit(&reg_mod, 7, 0);
 8005c5a:	bfac      	ite	ge
 8005c5c:	2200      	movge	r2, #0
	} else {
//		printf("External Temp\r\n");
		setBit(&reg_mod, 7, 1);
 8005c5e:	4622      	movlt	r2, r4
 8005c60:	4628      	mov	r0, r5
 8005c62:	2107      	movs	r1, #7
 8005c64:	f003 fcac 	bl	80095c0 <setBit>
		}
//	printf("CFG TEMP SRC 0x07 (hex) (MOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8005c68:	2301      	movs	r3, #1
 8005c6a:	22fa      	movs	r2, #250	@ 0xfa
 8005c6c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c70:	9500      	str	r5, [sp, #0]
 8005c72:	2207      	movs	r2, #7
 8005c74:	21ee      	movs	r1, #238	@ 0xee
 8005c76:	4802      	ldr	r0, [pc, #8]	@ (8005c80 <DPS368_temp_source+0x64>)
 8005c78:	f005 feb2 	bl	800b9e0 <HAL_I2C_Mem_Write>

}
 8005c7c:	b006      	add	sp, #24
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
 8005c80:	200017ac 	.word	0x200017ac

08005c84 <DPS368_conf_temp>:


void DPS368_conf_temp(uint8_t ovr, uint8_t rate)
{
 8005c84:	b570      	push	{r4, r5, r6, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	4604      	mov	r4, r0
 8005c8a:	460d      	mov	r5, r1
	uint8_t reg;
	SET_DPS368();
	reg = ovr + rate;
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005c8c:	f10d 0617 	add.w	r6, sp, #23
	SET_DPS368();
 8005c90:	f003 fcee 	bl	8009670 <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005c94:	2301      	movs	r3, #1
 8005c96:	22fa      	movs	r2, #250	@ 0xfa
 8005c98:	e9cd 3201 	strd	r3, r2, [sp, #4]
	reg = ovr + rate;
 8005c9c:	4425      	add	r5, r4
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005c9e:	9600      	str	r6, [sp, #0]
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	21ee      	movs	r1, #238	@ 0xee
 8005ca4:	4835      	ldr	r0, [pc, #212]	@ (8005d7c <DPS368_conf_temp+0xf8>)
	reg = ovr + rate;
 8005ca6:	f88d 5017 	strb.w	r5, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005caa:	f005 fe99 	bl	800b9e0 <HAL_I2C_Mem_Write>
    switch (ovr)
 8005cae:	2c07      	cmp	r4, #7
 8005cb0:	d858      	bhi.n	8005d64 <DPS368_conf_temp+0xe0>
 8005cb2:	e8df f004 	tbb	[pc, r4]
 8005cb6:	3925      	.short	0x3925
 8005cb8:	4d48433e 	.word	0x4d48433e
 8005cbc:	0452      	.short	0x0452
        case DPS_OVERSAMPLE_64:
        	Kt_coef = DPS_OSR_SF_64;
            break;

        case DPS_OVERSAMPLE_128:
        	Kt_coef = DPS_OSR_SF_128;
 8005cbe:	4b30      	ldr	r3, [pc, #192]	@ (8005d80 <DPS368_conf_temp+0xfc>)
 8005cc0:	f44f 12ff 	mov.w	r2, #2088960	@ 0x1fe000
 8005cc4:	601a      	str	r2, [r3, #0]
            break;
    }
//    printf("Kt_coef set: %lu\r\n",Kt_coef);

   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005cc6:	22fa      	movs	r2, #250	@ 0xfa
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005cce:	482b      	ldr	r0, [pc, #172]	@ (8005d7c <DPS368_conf_temp+0xf8>)
 8005cd0:	9600      	str	r6, [sp, #0]
 8005cd2:	2209      	movs	r2, #9
 8005cd4:	21ee      	movs	r1, #238	@ 0xee
 8005cd6:	f005 ffa9 	bl	800bc2c <HAL_I2C_Mem_Read>
    if(ovr > DPS_OVERSAMPLE_8) setBit(&reg, 3, 1);
 8005cda:	2201      	movs	r2, #1
 8005cdc:	2103      	movs	r1, #3
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f003 fc6e 	bl	80095c0 <setBit>
    else setBit(&reg, 3, 0);
   	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	21fa      	movs	r1, #250	@ 0xfa
 8005ce8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8005cec:	2209      	movs	r2, #9
 8005cee:	21ee      	movs	r1, #238	@ 0xee
 8005cf0:	9600      	str	r6, [sp, #0]
 8005cf2:	4822      	ldr	r0, [pc, #136]	@ (8005d7c <DPS368_conf_temp+0xf8>)
 8005cf4:	f005 fe74 	bl	800b9e0 <HAL_I2C_Mem_Write>

	DPS368_temp_source();
 8005cf8:	f7ff ff90 	bl	8005c1c <DPS368_temp_source>

}
 8005cfc:	b006      	add	sp, #24
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
            Kt_coef = DPS_OSR_SF_1;
 8005d00:	4b1f      	ldr	r3, [pc, #124]	@ (8005d80 <DPS368_conf_temp+0xfc>)
 8005d02:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005d06:	601a      	str	r2, [r3, #0]
   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005d08:	2301      	movs	r3, #1
 8005d0a:	22fa      	movs	r2, #250	@ 0xfa
 8005d0c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d10:	9600      	str	r6, [sp, #0]
 8005d12:	2209      	movs	r2, #9
 8005d14:	21ee      	movs	r1, #238	@ 0xee
 8005d16:	4819      	ldr	r0, [pc, #100]	@ (8005d7c <DPS368_conf_temp+0xf8>)
 8005d18:	f005 ff88 	bl	800bc2c <HAL_I2C_Mem_Read>
    else setBit(&reg, 3, 0);
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2103      	movs	r1, #3
 8005d20:	4630      	mov	r0, r6
 8005d22:	f003 fc4d 	bl	80095c0 <setBit>
 8005d26:	e7dd      	b.n	8005ce4 <DPS368_conf_temp+0x60>
        	Kt_coef = DPS_OSR_SF_2;
 8005d28:	4b15      	ldr	r3, [pc, #84]	@ (8005d80 <DPS368_conf_temp+0xfc>)
 8005d2a:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 8005d2e:	601a      	str	r2, [r3, #0]
            break;
 8005d30:	e7ea      	b.n	8005d08 <DPS368_conf_temp+0x84>
        	Kt_coef = DPS_OSR_SF_4;
 8005d32:	4b13      	ldr	r3, [pc, #76]	@ (8005d80 <DPS368_conf_temp+0xfc>)
 8005d34:	f44f 1260 	mov.w	r2, #3670016	@ 0x380000
 8005d38:	601a      	str	r2, [r3, #0]
            break;
 8005d3a:	e7e5      	b.n	8005d08 <DPS368_conf_temp+0x84>
        	Kt_coef = DPS_OSR_SF_8;
 8005d3c:	4b10      	ldr	r3, [pc, #64]	@ (8005d80 <DPS368_conf_temp+0xfc>)
 8005d3e:	f44f 02f0 	mov.w	r2, #7864320	@ 0x780000
 8005d42:	601a      	str	r2, [r3, #0]
            break;
 8005d44:	e7e0      	b.n	8005d08 <DPS368_conf_temp+0x84>
        	Kt_coef = DPS_OSR_SF_16;
 8005d46:	4b0e      	ldr	r3, [pc, #56]	@ (8005d80 <DPS368_conf_temp+0xfc>)
 8005d48:	f44f 3278 	mov.w	r2, #253952	@ 0x3e000
 8005d4c:	601a      	str	r2, [r3, #0]
            break;
 8005d4e:	e7ba      	b.n	8005cc6 <DPS368_conf_temp+0x42>
        	Kt_coef = DPS_OSR_SF_32;
 8005d50:	4b0b      	ldr	r3, [pc, #44]	@ (8005d80 <DPS368_conf_temp+0xfc>)
 8005d52:	f44f 22fc 	mov.w	r2, #516096	@ 0x7e000
 8005d56:	601a      	str	r2, [r3, #0]
            break;
 8005d58:	e7b5      	b.n	8005cc6 <DPS368_conf_temp+0x42>
        	Kt_coef = DPS_OSR_SF_64;
 8005d5a:	4b09      	ldr	r3, [pc, #36]	@ (8005d80 <DPS368_conf_temp+0xfc>)
 8005d5c:	f44f 227e 	mov.w	r2, #1040384	@ 0xfe000
 8005d60:	601a      	str	r2, [r3, #0]
            break;
 8005d62:	e7b0      	b.n	8005cc6 <DPS368_conf_temp+0x42>
   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005d64:	2301      	movs	r3, #1
 8005d66:	22fa      	movs	r2, #250	@ 0xfa
 8005d68:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d6c:	9600      	str	r6, [sp, #0]
 8005d6e:	2209      	movs	r2, #9
 8005d70:	21ee      	movs	r1, #238	@ 0xee
 8005d72:	4802      	ldr	r0, [pc, #8]	@ (8005d7c <DPS368_conf_temp+0xf8>)
 8005d74:	f005 ff5a 	bl	800bc2c <HAL_I2C_Mem_Read>
    if(ovr > DPS_OVERSAMPLE_8) setBit(&reg, 3, 1);
 8005d78:	e7af      	b.n	8005cda <DPS368_conf_temp+0x56>
 8005d7a:	bf00      	nop
 8005d7c:	200017ac 	.word	0x200017ac
 8005d80:	20001620 	.word	0x20001620

08005d84 <DPS368_conf_press>:

void DPS368_conf_press(uint8_t ovr, uint8_t rate)
{
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	4604      	mov	r4, r0
 8005d8a:	460d      	mov	r5, r1
	uint8_t reg;
	SET_DPS368();
	reg = ovr + rate;
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005d8c:	f10d 0617 	add.w	r6, sp, #23
	SET_DPS368();
 8005d90:	f003 fc6e 	bl	8009670 <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005d94:	2301      	movs	r3, #1
 8005d96:	22fa      	movs	r2, #250	@ 0xfa
 8005d98:	e9cd 3201 	strd	r3, r2, [sp, #4]
	reg = ovr + rate;
 8005d9c:	4425      	add	r5, r4
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005d9e:	9600      	str	r6, [sp, #0]
 8005da0:	2206      	movs	r2, #6
 8005da2:	21ee      	movs	r1, #238	@ 0xee
 8005da4:	4834      	ldr	r0, [pc, #208]	@ (8005e78 <DPS368_conf_press+0xf4>)
	reg = ovr + rate;
 8005da6:	f88d 5017 	strb.w	r5, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005daa:	f005 fe19 	bl	800b9e0 <HAL_I2C_Mem_Write>
    switch (ovr)
 8005dae:	2c07      	cmp	r4, #7
 8005db0:	d856      	bhi.n	8005e60 <DPS368_conf_press+0xdc>
 8005db2:	e8df f004 	tbb	[pc, r4]
 8005db6:	3723      	.short	0x3723
 8005db8:	4b46413c 	.word	0x4b46413c
 8005dbc:	0450      	.short	0x0450
        case DPS_OVERSAMPLE_64:
        	Kp_coef = DPS_OSR_SF_64;
            break;

        case DPS_OVERSAMPLE_128:
        	Kp_coef = DPS_OSR_SF_128;
 8005dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8005e7c <DPS368_conf_press+0xf8>)
 8005dc0:	f44f 12ff 	mov.w	r2, #2088960	@ 0x1fe000
 8005dc4:	601a      	str	r2, [r3, #0]
            break;
    }

//    printf("Kp_coef set: %lu\r\n",Kp_coef);

   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005dc6:	22fa      	movs	r2, #250	@ 0xfa
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005dce:	482a      	ldr	r0, [pc, #168]	@ (8005e78 <DPS368_conf_press+0xf4>)
 8005dd0:	9600      	str	r6, [sp, #0]
 8005dd2:	2209      	movs	r2, #9
 8005dd4:	21ee      	movs	r1, #238	@ 0xee
 8005dd6:	f005 ff29 	bl	800bc2c <HAL_I2C_Mem_Read>
    if(ovr > DPS_OVERSAMPLE_8) setBit(&reg, 2, 1);
 8005dda:	2201      	movs	r2, #1
 8005ddc:	2102      	movs	r1, #2
 8005dde:	4630      	mov	r0, r6
 8005de0:	f003 fbee 	bl	80095c0 <setBit>
    else setBit(&reg, 2, 0);
   	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005de4:	2301      	movs	r3, #1
 8005de6:	22fa      	movs	r2, #250	@ 0xfa
 8005de8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005dec:	9600      	str	r6, [sp, #0]
 8005dee:	2209      	movs	r2, #9
 8005df0:	21ee      	movs	r1, #238	@ 0xee
 8005df2:	4821      	ldr	r0, [pc, #132]	@ (8005e78 <DPS368_conf_press+0xf4>)
 8005df4:	f005 fdf4 	bl	800b9e0 <HAL_I2C_Mem_Write>


}
 8005df8:	b006      	add	sp, #24
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
            Kp_coef = DPS_OSR_SF_1;
 8005dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8005e7c <DPS368_conf_press+0xf8>)
 8005dfe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005e02:	601a      	str	r2, [r3, #0]
   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005e04:	2301      	movs	r3, #1
 8005e06:	22fa      	movs	r2, #250	@ 0xfa
 8005e08:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005e0c:	9600      	str	r6, [sp, #0]
 8005e0e:	2209      	movs	r2, #9
 8005e10:	21ee      	movs	r1, #238	@ 0xee
 8005e12:	4819      	ldr	r0, [pc, #100]	@ (8005e78 <DPS368_conf_press+0xf4>)
 8005e14:	f005 ff0a 	bl	800bc2c <HAL_I2C_Mem_Read>
    else setBit(&reg, 2, 0);
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2102      	movs	r1, #2
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f003 fbcf 	bl	80095c0 <setBit>
 8005e22:	e7df      	b.n	8005de4 <DPS368_conf_press+0x60>
        	Kp_coef = DPS_OSR_SF_2;
 8005e24:	4b15      	ldr	r3, [pc, #84]	@ (8005e7c <DPS368_conf_press+0xf8>)
 8005e26:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 8005e2a:	601a      	str	r2, [r3, #0]
            break;
 8005e2c:	e7ea      	b.n	8005e04 <DPS368_conf_press+0x80>
        	Kp_coef = DPS_OSR_SF_4;
 8005e2e:	4b13      	ldr	r3, [pc, #76]	@ (8005e7c <DPS368_conf_press+0xf8>)
 8005e30:	f44f 1260 	mov.w	r2, #3670016	@ 0x380000
 8005e34:	601a      	str	r2, [r3, #0]
            break;
 8005e36:	e7e5      	b.n	8005e04 <DPS368_conf_press+0x80>
        	Kp_coef = DPS_OSR_SF_8;
 8005e38:	4b10      	ldr	r3, [pc, #64]	@ (8005e7c <DPS368_conf_press+0xf8>)
 8005e3a:	f44f 02f0 	mov.w	r2, #7864320	@ 0x780000
 8005e3e:	601a      	str	r2, [r3, #0]
            break;
 8005e40:	e7e0      	b.n	8005e04 <DPS368_conf_press+0x80>
        	Kp_coef = DPS_OSR_SF_16;
 8005e42:	4b0e      	ldr	r3, [pc, #56]	@ (8005e7c <DPS368_conf_press+0xf8>)
 8005e44:	f44f 3278 	mov.w	r2, #253952	@ 0x3e000
 8005e48:	601a      	str	r2, [r3, #0]
            break;
 8005e4a:	e7bc      	b.n	8005dc6 <DPS368_conf_press+0x42>
        	Kp_coef = DPS_OSR_SF_32;
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e7c <DPS368_conf_press+0xf8>)
 8005e4e:	f44f 22fc 	mov.w	r2, #516096	@ 0x7e000
 8005e52:	601a      	str	r2, [r3, #0]
            break;
 8005e54:	e7b7      	b.n	8005dc6 <DPS368_conf_press+0x42>
        	Kp_coef = DPS_OSR_SF_64;
 8005e56:	4b09      	ldr	r3, [pc, #36]	@ (8005e7c <DPS368_conf_press+0xf8>)
 8005e58:	f44f 227e 	mov.w	r2, #1040384	@ 0xfe000
 8005e5c:	601a      	str	r2, [r3, #0]
            break;
 8005e5e:	e7b2      	b.n	8005dc6 <DPS368_conf_press+0x42>
   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005e60:	2301      	movs	r3, #1
 8005e62:	22fa      	movs	r2, #250	@ 0xfa
 8005e64:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005e68:	9600      	str	r6, [sp, #0]
 8005e6a:	2209      	movs	r2, #9
 8005e6c:	21ee      	movs	r1, #238	@ 0xee
 8005e6e:	4802      	ldr	r0, [pc, #8]	@ (8005e78 <DPS368_conf_press+0xf4>)
 8005e70:	f005 fedc 	bl	800bc2c <HAL_I2C_Mem_Read>
    if(ovr > DPS_OVERSAMPLE_8) setBit(&reg, 2, 1);
 8005e74:	e7b1      	b.n	8005dda <DPS368_conf_press+0x56>
 8005e76:	bf00      	nop
 8005e78:	200017ac 	.word	0x200017ac
 8005e7c:	2000161c 	.word	0x2000161c

08005e80 <DPS368_temp_correct>:
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);

}

void DPS368_temp_correct(uint8_t ovr)
{
 8005e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e82:	b087      	sub	sp, #28
	SET_DPS368();
	HAL_StatusTypeDef status;
	uint8_t write_data = 0xA5;
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005e84:	2401      	movs	r4, #1
{
 8005e86:	4605      	mov	r5, r0
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005e88:	27fa      	movs	r7, #250	@ 0xfa
	SET_DPS368();
 8005e8a:	f003 fbf1 	bl	8009670 <SET_DPS368>
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005e8e:	f10d 0616 	add.w	r6, sp, #22
	uint8_t write_data = 0xA5;
 8005e92:	23a5      	movs	r3, #165	@ 0xa5
 8005e94:	f88d 3016 	strb.w	r3, [sp, #22]
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005e98:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005e9c:	482b      	ldr	r0, [pc, #172]	@ (8005f4c <DPS368_temp_correct+0xcc>)
 8005e9e:	9600      	str	r6, [sp, #0]
 8005ea0:	4623      	mov	r3, r4
 8005ea2:	220e      	movs	r2, #14
 8005ea4:	21ee      	movs	r1, #238	@ 0xee
 8005ea6:	f005 fd9b 	bl	800b9e0 <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 8005eaa:	b1c8      	cbz	r0, 8005ee0 <DPS368_temp_correct+0x60>
	}
	if (status == HAL_OK) {
        write_data = 0x00;
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
	}
	DPS368_conf_temp(ovr, DPS_RATE_1);
 8005eac:	4628      	mov	r0, r5
 8005eae:	2100      	movs	r1, #0
 8005eb0:	f7ff fee8 	bl	8005c84 <DPS368_conf_temp>
}


void DPS368_run_mode(uint8_t mode)
{
	SET_DPS368();
 8005eb4:	f003 fbdc 	bl	8009670 <SET_DPS368>
	uint8_t reg;
//	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
//	reg = (reg & 0x0E) | mode;
	reg = mode;
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f10d 0217 	add.w	r2, sp, #23
 8005ebe:	21fa      	movs	r1, #250	@ 0xfa
 8005ec0:	e9cd 3101 	strd	r3, r1, [sp, #4]
	reg = mode;
 8005ec4:	2402      	movs	r4, #2
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005ec6:	9200      	str	r2, [sp, #0]
 8005ec8:	21ee      	movs	r1, #238	@ 0xee
 8005eca:	2208      	movs	r2, #8
 8005ecc:	481f      	ldr	r0, [pc, #124]	@ (8005f4c <DPS368_temp_correct+0xcc>)
	reg = mode;
 8005ece:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005ed2:	f005 fd85 	bl	800b9e0 <HAL_I2C_Mem_Write>
	osDelay(2);
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f007 ff5c 	bl	800dd94 <osDelay>
}
 8005edc:	b007      	add	sp, #28
 8005ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
        write_data = 0x96;
 8005ee0:	2396      	movs	r3, #150	@ 0x96
 8005ee2:	f88d 3016 	strb.w	r3, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005ee6:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005eea:	4818      	ldr	r0, [pc, #96]	@ (8005f4c <DPS368_temp_correct+0xcc>)
 8005eec:	9600      	str	r6, [sp, #0]
 8005eee:	4623      	mov	r3, r4
 8005ef0:	220f      	movs	r2, #15
 8005ef2:	21ee      	movs	r1, #238	@ 0xee
 8005ef4:	f005 fd74 	bl	800b9e0 <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d1d7      	bne.n	8005eac <DPS368_temp_correct+0x2c>
        write_data = 0x02;
 8005efc:	2302      	movs	r3, #2
 8005efe:	f88d 3016 	strb.w	r3, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x62, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005f02:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005f06:	4811      	ldr	r0, [pc, #68]	@ (8005f4c <DPS368_temp_correct+0xcc>)
 8005f08:	9600      	str	r6, [sp, #0]
 8005f0a:	4623      	mov	r3, r4
 8005f0c:	2262      	movs	r2, #98	@ 0x62
 8005f0e:	21ee      	movs	r1, #238	@ 0xee
 8005f10:	f005 fd66 	bl	800b9e0 <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d1c9      	bne.n	8005eac <DPS368_temp_correct+0x2c>
        write_data = 0x00;
 8005f18:	f88d 0016 	strb.w	r0, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005f1c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005f20:	480a      	ldr	r0, [pc, #40]	@ (8005f4c <DPS368_temp_correct+0xcc>)
 8005f22:	9600      	str	r6, [sp, #0]
 8005f24:	4623      	mov	r3, r4
 8005f26:	220e      	movs	r2, #14
 8005f28:	21ee      	movs	r1, #238	@ 0xee
 8005f2a:	f005 fd59 	bl	800b9e0 <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d1bc      	bne.n	8005eac <DPS368_temp_correct+0x2c>
        write_data = 0x00;
 8005f32:	f88d 0016 	strb.w	r0, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005f36:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005f3a:	9600      	str	r6, [sp, #0]
 8005f3c:	4623      	mov	r3, r4
 8005f3e:	220f      	movs	r2, #15
 8005f40:	21ee      	movs	r1, #238	@ 0xee
 8005f42:	4802      	ldr	r0, [pc, #8]	@ (8005f4c <DPS368_temp_correct+0xcc>)
 8005f44:	f005 fd4c 	bl	800b9e0 <HAL_I2C_Mem_Write>
 8005f48:	e7b0      	b.n	8005eac <DPS368_temp_correct+0x2c>
 8005f4a:	bf00      	nop
 8005f4c:	200017ac 	.word	0x200017ac

08005f50 <calcBusyTime>:


uint32_t calcBusyTime(uint8_t osr)
{
    // formula from datasheet (optimized)
    return (((uint32_t)20U) + ((uint32_t)16U << ((uint16_t)osr)));
 8005f50:	2310      	movs	r3, #16
 8005f52:	fa03 f000 	lsl.w	r0, r3, r0
}
 8005f56:	3014      	adds	r0, #20
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop

08005f5c <DPS368_init>:

void DPS368_init(uint8_t fifo, uint8_t int_m)
{
 8005f5c:	b530      	push	{r4, r5, lr}
 8005f5e:	460d      	mov	r5, r1
 8005f60:	b087      	sub	sp, #28
 8005f62:	4604      	mov	r4, r0
	DPS368_read_coeff();
 8005f64:	f7ff fd86 	bl	8005a74 <DPS368_read_coeff>
	DPS368_conf_int(int_m);
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f7ff fe2b 	bl	8005bc4 <DPS368_conf_int>
	DPS368_fifo(fifo);
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f7ff fdfc 	bl	8005b6c <DPS368_fifo>
	SET_DPS368();
 8005f74:	f003 fb7c 	bl	8009670 <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f10d 0217 	add.w	r2, sp, #23
 8005f7e:	21fa      	movs	r1, #250	@ 0xfa
 8005f80:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8005f84:	9200      	str	r2, [sp, #0]
 8005f86:	21ee      	movs	r1, #238	@ 0xee
 8005f88:	2208      	movs	r2, #8
	reg = mode;
 8005f8a:	2400      	movs	r4, #0
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005f8c:	4804      	ldr	r0, [pc, #16]	@ (8005fa0 <DPS368_init+0x44>)
	reg = mode;
 8005f8e:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005f92:	f005 fd25 	bl	800b9e0 <HAL_I2C_Mem_Write>
	osDelay(2);
 8005f96:	2002      	movs	r0, #2
 8005f98:	f007 fefc 	bl	800dd94 <osDelay>
	DPS368_run_mode(MODE_IDLE);
}
 8005f9c:	b007      	add	sp, #28
 8005f9e:	bd30      	pop	{r4, r5, pc}
 8005fa0:	200017ac 	.word	0x200017ac

08005fa4 <DPS368_start_meas_temp>:

void DPS368_start_meas_temp(uint8_t ovr)
{
 8005fa4:	b510      	push	{r4, lr}
	DPS368_conf_temp(ovr, 0U);
 8005fa6:	2100      	movs	r1, #0
{
 8005fa8:	b086      	sub	sp, #24
	DPS368_conf_temp(ovr, 0U);
 8005faa:	f7ff fe6b 	bl	8005c84 <DPS368_conf_temp>
	SET_DPS368();
 8005fae:	f003 fb5f 	bl	8009670 <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f10d 0217 	add.w	r2, sp, #23
 8005fb8:	21fa      	movs	r1, #250	@ 0xfa
 8005fba:	e9cd 3101 	strd	r3, r1, [sp, #4]
	reg = mode;
 8005fbe:	2402      	movs	r4, #2
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005fc0:	9200      	str	r2, [sp, #0]
 8005fc2:	21ee      	movs	r1, #238	@ 0xee
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	4805      	ldr	r0, [pc, #20]	@ (8005fdc <DPS368_start_meas_temp+0x38>)
	reg = mode;
 8005fc8:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005fcc:	f005 fd08 	bl	800b9e0 <HAL_I2C_Mem_Write>
	osDelay(2);
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f007 fedf 	bl	800dd94 <osDelay>
	DPS368_run_mode(MODE_CMD_TEMP);
}
 8005fd6:	b006      	add	sp, #24
 8005fd8:	bd10      	pop	{r4, pc}
 8005fda:	bf00      	nop
 8005fdc:	200017ac 	.word	0x200017ac

08005fe0 <DPS368_calc_temp>:
float DPS368_calc_temp(float temp_scaled)
{
	float temperature;
//	temp_scaled = DPS368_get_scaled_temp();
//	printf("DPS TEMP SCALED VALUE: %.3f\r\n", temp_scaled);
	temperature = DPS_coef.C0 + DPS_coef.C1 * temp_scaled;
 8005fe0:	4b06      	ldr	r3, [pc, #24]	@ (8005ffc <DPS368_calc_temp+0x1c>)
 8005fe2:	ed93 7a01 	vldr	s14, [r3, #4]
 8005fe6:	edd3 7a00 	vldr	s15, [r3]
 8005fea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return temperature;
}
 8005ff2:	eee7 7a00 	vfma.f32	s15, s14, s0
 8005ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8005ffa:	4770      	bx	lr
 8005ffc:	20001624 	.word	0x20001624

08006000 <DPS368_start_meas_press>:

void DPS368_start_meas_press(uint8_t ovr)
{
 8006000:	b500      	push	{lr}
	DPS368_conf_press(ovr, 0U);
 8006002:	2100      	movs	r1, #0
{
 8006004:	b087      	sub	sp, #28
	DPS368_conf_press(ovr, 0U);
 8006006:	f7ff febd 	bl	8005d84 <DPS368_conf_press>
	SET_DPS368();
 800600a:	f003 fb31 	bl	8009670 <SET_DPS368>
	reg = mode;
 800600e:	2301      	movs	r3, #1
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8006010:	f10d 0217 	add.w	r2, sp, #23
 8006014:	21fa      	movs	r1, #250	@ 0xfa
 8006016:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800601a:	9200      	str	r2, [sp, #0]
 800601c:	21ee      	movs	r1, #238	@ 0xee
 800601e:	2208      	movs	r2, #8
 8006020:	4805      	ldr	r0, [pc, #20]	@ (8006038 <DPS368_start_meas_press+0x38>)
	reg = mode;
 8006022:	f88d 3017 	strb.w	r3, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8006026:	f005 fcdb 	bl	800b9e0 <HAL_I2C_Mem_Write>
	osDelay(2);
 800602a:	2002      	movs	r0, #2
 800602c:	f007 feb2 	bl	800dd94 <osDelay>
	DPS368_run_mode(MODE_CMD_PRESS);
}
 8006030:	b007      	add	sp, #28
 8006032:	f85d fb04 	ldr.w	pc, [sp], #4
 8006036:	bf00      	nop
 8006038:	200017ac 	.word	0x200017ac

0800603c <DPS368_get_scaled_temp>:

float DPS368_get_scaled_temp()
{
 800603c:	b500      	push	{lr}
 800603e:	b087      	sub	sp, #28
	SET_DPS368();
 8006040:	f003 fb16 	bl	8009670 <SET_DPS368>
	uint8_t value[3];
	int32_t raw_temp;
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP, I2C_MEMADD_SIZE_8BIT, value, 3, 250);
 8006044:	2203      	movs	r2, #3
 8006046:	ab05      	add	r3, sp, #20
 8006048:	21fa      	movs	r1, #250	@ 0xfa
 800604a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	21ee      	movs	r1, #238	@ 0xee
 8006052:	2301      	movs	r3, #1
 8006054:	4810      	ldr	r0, [pc, #64]	@ (8006098 <DPS368_get_scaled_temp+0x5c>)
 8006056:	f005 fde9 	bl	800bc2c <HAL_I2C_Mem_Read>
	raw_temp = (int32_t)(value[2]) + (value[1] << 8) + (value[0] << 16);
 800605a:	f8bd 3015 	ldrh.w	r3, [sp, #21]
 800605e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8006062:	ba5b      	rev16	r3, r3
 8006064:	0412      	lsls	r2, r2, #16
 8006066:	fa12 f383 	uxtah	r3, r2, r3
    if (*raw & ((uint32_t)1 << (length - 1)))
 800606a:	0dd2      	lsrs	r2, r2, #23
	getTwosComplement(&raw_temp, 24);
	const float scalingT = 1.0f/Kt_coef;
 800606c:	4a0b      	ldr	r2, [pc, #44]	@ (800609c <DPS368_get_scaled_temp+0x60>)
 800606e:	edd2 7a00 	vldr	s15, [r2]
        *raw -= (uint32_t)1 << length;
 8006072:	bf18      	it	ne
 8006074:	f103 437f 	addne.w	r3, r3, #4278190080	@ 0xff000000
	return ((float)raw_temp * scalingT);
 8006078:	ee07 3a10 	vmov	s14, r3
	const float scalingT = 1.0f/Kt_coef;
 800607c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006080:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
	return ((float)raw_temp * scalingT);
 8006084:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
	const float scalingT = 1.0f/Kt_coef;
 8006088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
}
 800608c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8006090:	b007      	add	sp, #28
 8006092:	f85d fb04 	ldr.w	pc, [sp], #4
 8006096:	bf00      	nop
 8006098:	200017ac 	.word	0x200017ac
 800609c:	20001620 	.word	0x20001620

080060a0 <DPS368_get_press>:

float DPS368_get_press(float temp_scaled)
{
 80060a0:	b500      	push	{lr}
 80060a2:	ed2d 8b02 	vpush	{d8}
 80060a6:	b087      	sub	sp, #28
 80060a8:	eeb0 8a40 	vmov.f32	s16, s0
	SET_DPS368();
 80060ac:	f003 fae0 	bl	8009670 <SET_DPS368>
	uint8_t value[3];
	int32_t raw_press;
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_PRESS, I2C_MEMADD_SIZE_8BIT, value, 3, 250);
 80060b0:	ab05      	add	r3, sp, #20
 80060b2:	21fa      	movs	r1, #250	@ 0xfa
 80060b4:	2203      	movs	r2, #3
 80060b6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	2200      	movs	r2, #0
 80060be:	2301      	movs	r3, #1
 80060c0:	21ee      	movs	r1, #238	@ 0xee
 80060c2:	4829      	ldr	r0, [pc, #164]	@ (8006168 <DPS368_get_press+0xc8>)
 80060c4:	f005 fdb2 	bl	800bc2c <HAL_I2C_Mem_Read>
	raw_press = (int32_t)(value[2]) + (value[1] << 8) + (value[0] << 16);
 80060c8:	f8bd 3015 	ldrh.w	r3, [sp, #21]
 80060cc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80060d0:	ba5b      	rev16	r3, r3
 80060d2:	0412      	lsls	r2, r2, #16
 80060d4:	fa12 f383 	uxtah	r3, r2, r3
    if (*raw & ((uint32_t)1 << (length - 1)))
 80060d8:	0dd2      	lsrs	r2, r2, #23
	getTwosComplement(&raw_press, 24);
	const float scalingP = 1.0f/Kp_coef;
 80060da:	4a24      	ldr	r2, [pc, #144]	@ (800616c <DPS368_get_press+0xcc>)
 80060dc:	edd2 6a00 	vldr	s13, [r2]
//	printf("DPS RAW PRESS VALUE: %ld\r\n", raw_press);
//	printf("DPS SCALING PRESS VALUE: %.12f\r\n", scalingP);
	float press_scaled, pressure;
	press_scaled = (float)raw_press * scalingP;
//	printf("DPS PRESS SCALED VALUE: %.3f\r\n", press_scaled);
    pressure = DPS_coef.C00;
 80060e0:	4a23      	ldr	r2, [pc, #140]	@ (8006170 <DPS368_get_press+0xd0>)
	const float scalingP = 1.0f/Kp_coef;
 80060e2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80060e6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80060ea:	ee86 7a26 	vdiv.f32	s14, s12, s13
        *raw -= (uint32_t)1 << length;
 80060ee:	bf18      	it	ne
 80060f0:	f103 437f 	addne.w	r3, r3, #4278190080	@ 0xff000000
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 80060f4:	edd2 6a08 	vldr	s13, [r2, #32]
	pressure += (temp_scaled * DPS_coef.C01);
 80060f8:	ed92 5a04 	vldr	s10, [r2, #16]
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 80060fc:	edd2 4a07 	vldr	s9, [r2, #28]
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8006100:	eeb8 4ae6 	vcvt.f32.s32	s8, s13
 8006104:	edd2 6a06 	vldr	s13, [r2, #24]
	press_scaled = (float)raw_press * scalingP;
 8006108:	ee07 3a90 	vmov	s15, r3
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 800610c:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8006110:	edd2 6a03 	vldr	s13, [r2, #12]
	press_scaled = (float)raw_press * scalingP;
 8006114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8006118:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
    pressure = DPS_coef.C00;
 800611c:	edd2 6a02 	vldr	s13, [r2, #8]
	press_scaled = (float)raw_press * scalingP;
 8006120:	ee67 7a27 	vmul.f32	s15, s14, s15
    pressure = DPS_coef.C00;
 8006124:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8006128:	edd2 6a05 	vldr	s13, [r2, #20]
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 800612c:	eee4 5a27 	vfma.f32	s11, s8, s15
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8006130:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	pressure += (temp_scaled * DPS_coef.C01);
 8006134:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8006138:	eeb0 7a66 	vmov.f32	s14, s13
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 800613c:	eef0 6a46 	vmov.f32	s13, s12
 8006140:	eee5 6aa7 	vfma.f32	s13, s11, s15
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8006144:	eef8 4ae4 	vcvt.f32.s32	s9, s9
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8006148:	eea6 0aa7 	vfma.f32	s0, s13, s15
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 800614c:	eea4 7aa7 	vfma.f32	s14, s9, s15
	pressure += (temp_scaled * DPS_coef.C01);
 8006150:	eea5 0a08 	vfma.f32	s0, s10, s16
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8006154:	ee67 4a88 	vmul.f32	s9, s15, s16
//	return pressure *0.01f;
	return pressure;
}
 8006158:	eea4 0a87 	vfma.f32	s0, s9, s14
 800615c:	b007      	add	sp, #28
 800615e:	ecbd 8b02 	vpop	{d8}
 8006162:	f85d fb04 	ldr.w	pc, [sp], #4
 8006166:	bf00      	nop
 8006168:	200017ac 	.word	0x200017ac
 800616c:	2000161c 	.word	0x2000161c
 8006170:	20001624 	.word	0x20001624

08006174 <dps368_ovr_config>:

uint16_t dps368_ovr_config(uint8_t sensor_conf)
{
 8006174:	b508      	push	{r3, lr}
    switch (sensor_conf) {
 8006176:	2807      	cmp	r0, #7
 8006178:	d84d      	bhi.n	8006216 <dps368_ovr_config+0xa2>
 800617a:	e8df f000 	tbb	[pc, r0]
 800617e:	160d      	.short	0x160d
 8006180:	3a31281f 	.word	0x3a31281f
 8006184:	0443      	.short	0x0443
            return combine_uint8(DPS_OVERSAMPLE_32,DPS_OVERSAMPLE_32);
        case 6:
        	printf("DPS368 set TEMP & PRESS Oversample x64\r\n");
            return combine_uint8(DPS_OVERSAMPLE_64,DPS_OVERSAMPLE_64);
        case 7:
        	printf("DPS368 set TEMP & PRESS Oversample x128\r\n");
 8006186:	4828      	ldr	r0, [pc, #160]	@ (8006228 <dps368_ovr_config+0xb4>)
 8006188:	f00a fe34 	bl	8010df4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_128);
 800618c:	2107      	movs	r1, #7

        default:
        	printf("DPS368 set TEMP Oversample x128, PRESS Oversample x4 \r\n");
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_4);
    }
}
 800618e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_128);
 8006192:	4608      	mov	r0, r1
 8006194:	f003 ba26 	b.w	80095e4 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x1\r\n");
 8006198:	4824      	ldr	r0, [pc, #144]	@ (800622c <dps368_ovr_config+0xb8>)
 800619a:	f00a fe2b 	bl	8010df4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_1,DPS_OVERSAMPLE_1);
 800619e:	2100      	movs	r1, #0
}
 80061a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_1,DPS_OVERSAMPLE_1);
 80061a4:	4608      	mov	r0, r1
 80061a6:	f003 ba1d 	b.w	80095e4 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x2\r\n");
 80061aa:	4821      	ldr	r0, [pc, #132]	@ (8006230 <dps368_ovr_config+0xbc>)
 80061ac:	f00a fe22 	bl	8010df4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_2,DPS_OVERSAMPLE_2);
 80061b0:	2101      	movs	r1, #1
}
 80061b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_2,DPS_OVERSAMPLE_2);
 80061b6:	4608      	mov	r0, r1
 80061b8:	f003 ba14 	b.w	80095e4 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x4\r\n");
 80061bc:	481d      	ldr	r0, [pc, #116]	@ (8006234 <dps368_ovr_config+0xc0>)
 80061be:	f00a fe19 	bl	8010df4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_4,DPS_OVERSAMPLE_4);
 80061c2:	2102      	movs	r1, #2
}
 80061c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_4,DPS_OVERSAMPLE_4);
 80061c8:	4608      	mov	r0, r1
 80061ca:	f003 ba0b 	b.w	80095e4 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x8\r\n");
 80061ce:	481a      	ldr	r0, [pc, #104]	@ (8006238 <dps368_ovr_config+0xc4>)
 80061d0:	f00a fe10 	bl	8010df4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_8,DPS_OVERSAMPLE_8);
 80061d4:	2103      	movs	r1, #3
}
 80061d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_8,DPS_OVERSAMPLE_8);
 80061da:	4608      	mov	r0, r1
 80061dc:	f003 ba02 	b.w	80095e4 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x16\r\n");
 80061e0:	4816      	ldr	r0, [pc, #88]	@ (800623c <dps368_ovr_config+0xc8>)
 80061e2:	f00a fe07 	bl	8010df4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_16,DPS_OVERSAMPLE_16);
 80061e6:	2104      	movs	r1, #4
}
 80061e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_16,DPS_OVERSAMPLE_16);
 80061ec:	4608      	mov	r0, r1
 80061ee:	f003 b9f9 	b.w	80095e4 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x32\r\n");
 80061f2:	4813      	ldr	r0, [pc, #76]	@ (8006240 <dps368_ovr_config+0xcc>)
 80061f4:	f00a fdfe 	bl	8010df4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_32,DPS_OVERSAMPLE_32);
 80061f8:	2105      	movs	r1, #5
}
 80061fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_32,DPS_OVERSAMPLE_32);
 80061fe:	4608      	mov	r0, r1
 8006200:	f003 b9f0 	b.w	80095e4 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x64\r\n");
 8006204:	480f      	ldr	r0, [pc, #60]	@ (8006244 <dps368_ovr_config+0xd0>)
 8006206:	f00a fdf5 	bl	8010df4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_64,DPS_OVERSAMPLE_64);
 800620a:	2106      	movs	r1, #6
}
 800620c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_64,DPS_OVERSAMPLE_64);
 8006210:	4608      	mov	r0, r1
 8006212:	f003 b9e7 	b.w	80095e4 <combine_uint8>
        	printf("DPS368 set TEMP Oversample x128, PRESS Oversample x4 \r\n");
 8006216:	480c      	ldr	r0, [pc, #48]	@ (8006248 <dps368_ovr_config+0xd4>)
 8006218:	f00a fdec 	bl	8010df4 <puts>
}
 800621c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_4);
 8006220:	2102      	movs	r1, #2
 8006222:	2007      	movs	r0, #7
 8006224:	f003 b9de 	b.w	80095e4 <combine_uint8>
 8006228:	080168b8 	.word	0x080168b8
 800622c:	080167a0 	.word	0x080167a0
 8006230:	080167c8 	.word	0x080167c8
 8006234:	080167f0 	.word	0x080167f0
 8006238:	08016818 	.word	0x08016818
 800623c:	08016840 	.word	0x08016840
 8006240:	08016868 	.word	0x08016868
 8006244:	08016890 	.word	0x08016890
 8006248:	080168e4 	.word	0x080168e4

0800624c <PreSleepProcessing>:

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
/* place for user code */
}
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop

08006250 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop

08006254 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006254:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006256:	2001      	movs	r0, #1
 8006258:	f007 fd9c 	bl	800dd94 <osDelay>
    __WFI();
 800625c:	bf30      	wfi
  for(;;)
 800625e:	e7fa      	b.n	8006256 <StartDefaultTask+0x2>

08006260 <SystemClock_Config>:
{
 8006260:	b530      	push	{r4, r5, lr}
 8006262:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006264:	2244      	movs	r2, #68	@ 0x44
 8006266:	2100      	movs	r1, #0
 8006268:	a806      	add	r0, sp, #24
 800626a:	f00a ff23 	bl	80110b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800626e:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006270:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006274:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8006278:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800627c:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800627e:	f005 ff03 	bl	800c088 <HAL_PWREx_ControlVoltageScaling>
 8006282:	b108      	cbz	r0, 8006288 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006284:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006286:	e7fe      	b.n	8006286 <SystemClock_Config+0x26>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006288:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800628a:	2401      	movs	r4, #1
 800628c:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006290:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006292:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8006294:	230a      	movs	r3, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006296:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 10;
 800629a:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800629c:	2207      	movs	r2, #7
 800629e:	2302      	movs	r3, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80062a0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80062a2:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = 1;
 80062a4:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80062a6:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 1;
 80062aa:	e9cd 4511 	strd	r4, r5, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80062ae:	f005 ffcb 	bl	800c248 <HAL_RCC_OscConfig>
 80062b2:	4603      	mov	r3, r0
 80062b4:	b108      	cbz	r0, 80062ba <SystemClock_Config+0x5a>
 80062b6:	b672      	cpsid	i
  while (1)
 80062b8:	e7fe      	b.n	80062b8 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80062ba:	220f      	movs	r2, #15
 80062bc:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80062be:	4629      	mov	r1, r5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80062c0:	2280      	movs	r2, #128	@ 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80062c2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80062c4:	e9cd 4202 	strd	r4, r2, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80062c8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80062cc:	f006 fac6 	bl	800c85c <HAL_RCC_ClockConfig>
 80062d0:	b108      	cbz	r0, 80062d6 <SystemClock_Config+0x76>
 80062d2:	b672      	cpsid	i
  while (1)
 80062d4:	e7fe      	b.n	80062d4 <SystemClock_Config+0x74>
}
 80062d6:	b019      	add	sp, #100	@ 0x64
 80062d8:	bd30      	pop	{r4, r5, pc}
 80062da:	bf00      	nop

080062dc <main>:
{
 80062dc:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062de:	2400      	movs	r4, #0
{
 80062e0:	b090      	sub	sp, #64	@ 0x40
  HAL_Init();
 80062e2:	f003 fe3b 	bl	8009f5c <HAL_Init>
  SystemClock_Config();
 80062e6:	f7ff ffbb 	bl	8006260 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062ea:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 80062ee:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80062f2:	4db1      	ldr	r5, [pc, #708]	@ (80065b8 <main+0x2dc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062f4:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80062f6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80062f8:	f043 0304 	orr.w	r3, r3, #4
 80062fc:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80062fe:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006308:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800630a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800630e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8006310:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006316:	9302      	str	r3, [sp, #8]
 8006318:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800631a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800631c:	f043 0301 	orr.w	r3, r3, #1
 8006320:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8006322:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	9303      	str	r3, [sp, #12]
 800632a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800632c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800632e:	f043 0302 	orr.w	r3, r3, #2
 8006332:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8006334:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006336:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(SIM_UART_DTR_GPIO_Port, SIM_UART_DTR_Pin, GPIO_PIN_SET);
 800633a:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800633c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(SIM_UART_DTR_GPIO_Port, SIM_UART_DTR_Pin, GPIO_PIN_SET);
 800633e:	2201      	movs	r2, #1
 8006340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006344:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(SIM_UART_DTR_GPIO_Port, SIM_UART_DTR_Pin, GPIO_PIN_SET);
 8006346:	f005 f813 	bl	800b370 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SIM_PWR_Pin|RST3_Pin|Main_SW_Pin, GPIO_PIN_RESET);
 800634a:	4622      	mov	r2, r4
 800634c:	489b      	ldr	r0, [pc, #620]	@ (80065bc <main+0x2e0>)
 800634e:	f248 2101 	movw	r1, #33281	@ 0x8201
 8006352:	f005 f80d 	bl	800b370 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RST2_Pin|BQ_QON_Pin|BQ_CE_Pin, GPIO_PIN_RESET);
 8006356:	4622      	mov	r2, r4
 8006358:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 800635c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006360:	f005 f806 	bl	800b370 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8006364:	2201      	movs	r2, #1
 8006366:	4895      	ldr	r0, [pc, #596]	@ (80065bc <main+0x2e0>)
 8006368:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800636c:	f005 f800 	bl	800b370 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006370:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = But_ONOFF_Pin;
 8006374:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 8006378:	4891      	ldr	r0, [pc, #580]	@ (80065c0 <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800637a:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 800637e:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006380:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006382:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 8006386:	f004 fef3 	bl	800b170 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800638a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800638e:	488c      	ldr	r0, [pc, #560]	@ (80065c0 <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006390:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006392:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006394:	e9cd 370a 	strd	r3, r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006398:	f004 feea 	bl	800b170 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800639c:	f248 0302 	movw	r3, #32770	@ 0x8002
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063a0:	a90a      	add	r1, sp, #40	@ 0x28
 80063a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063a6:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80063aa:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063ac:	f004 fee0 	bl	800b170 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 80063b0:	2310      	movs	r3, #16
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 80063b2:	a90a      	add	r1, sp, #40	@ 0x28
 80063b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063b8:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ba:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 80063be:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 80063c0:	f004 fed6 	bl	800b170 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|BQ_QON_Pin|BQ_CE_Pin;
 80063c4:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063c8:	a90a      	add	r1, sp, #40	@ 0x28
 80063ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ce:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|BQ_QON_Pin|BQ_CE_Pin;
 80063d2:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063d4:	960b      	str	r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063d6:	f004 fecb 	bl	800b170 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 80063da:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 80063dc:	a90a      	add	r1, sp, #40	@ 0x28
 80063de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063e2:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 80063e6:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 80063e8:	f004 fec2 	bl	800b170 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_PWR_Pin|RST3_Pin|LED1_Pin|LED2_Pin;
 80063ec:	f248 1321 	movw	r3, #33057	@ 0x8121
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063f0:	4872      	ldr	r0, [pc, #456]	@ (80065bc <main+0x2e0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063f2:	940d      	str	r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063f4:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063f6:	e9cd 640b 	strd	r6, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = SIM_PWR_Pin|RST3_Pin|LED1_Pin|LED2_Pin;
 80063fa:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063fc:	f004 feb8 	bl	800b170 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 8006400:	f241 0302 	movw	r3, #4098	@ 0x1002
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006404:	486d      	ldr	r0, [pc, #436]	@ (80065bc <main+0x2e0>)
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 8006406:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006408:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800640a:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800640e:	f004 feaf 	bl	800b170 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8006412:	f640 430c 	movw	r3, #3084	@ 0xc0c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006416:	4869      	ldr	r0, [pc, #420]	@ (80065bc <main+0x2e0>)
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8006418:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800641a:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800641c:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = RST2_Pin;
 8006420:	f44f 7880 	mov.w	r8, #256	@ 0x100
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006424:	f004 fea4 	bl	800b170 <HAL_GPIO_Init>
  HAL_GPIO_Init(RST2_GPIO_Port, &GPIO_InitStruct);
 8006428:	a90a      	add	r1, sp, #40	@ 0x28
 800642a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800642e:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006430:	e9cd 660b 	strd	r6, r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = RST2_Pin;
 8006434:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RST2_GPIO_Port, &GPIO_InitStruct);
 8006438:	f004 fe9a 	bl	800b170 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800643c:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800643e:	4861      	ldr	r0, [pc, #388]	@ (80065c4 <main+0x2e8>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006440:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006442:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006444:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006448:	f004 fe92 	bl	800b170 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Main_SW_Pin;
 800644c:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(Main_SW_GPIO_Port, &GPIO_InitStruct);
 8006450:	485a      	ldr	r0, [pc, #360]	@ (80065bc <main+0x2e0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006452:	940d      	str	r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(Main_SW_GPIO_Port, &GPIO_InitStruct);
 8006454:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pin = Main_SW_Pin;
 8006456:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006458:	e9cd 690b 	strd	r6, r9, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(Main_SW_GPIO_Port, &GPIO_InitStruct);
 800645c:	f004 fe88 	bl	800b170 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006460:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8006462:	4f59      	ldr	r7, [pc, #356]	@ (80065c8 <main+0x2ec>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006464:	4333      	orrs	r3, r6
 8006466:	64ab      	str	r3, [r5, #72]	@ 0x48
 8006468:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  hadc1.Instance = ADC1;
 800646a:	4d58      	ldr	r5, [pc, #352]	@ (80065cc <main+0x2f0>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800646c:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800646e:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006470:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8006472:	2105      	movs	r1, #5
 8006474:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006476:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8006478:	f004 fa72 	bl	800a960 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800647c:	200b      	movs	r0, #11
 800647e:	f004 faab 	bl	800a9d8 <HAL_NVIC_EnableIRQ>
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8006482:	230c      	movs	r3, #12
  ADC_ChannelConfTypeDef sConfig = {0};
 8006484:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8006488:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 800648c:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006490:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006494:	e9c5 440a 	strd	r4, r4, [r5, #40]	@ 0x28
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8006498:	e9c5 4410 	strd	r4, r4, [r5, #64]	@ 0x40
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800649c:	612c      	str	r4, [r5, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800649e:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80064a2:	636c      	str	r4, [r5, #52]	@ 0x34
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80064a4:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80064a6:	2404      	movs	r4, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80064a8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80064ac:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80064ae:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80064b2:	f8a5 8018 	strh.w	r8, [r5, #24]
  hadc1.Init.NbrOfConversion = 1;
 80064b6:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80064b8:	f885 6030 	strb.w	r6, [r5, #48]	@ 0x30
  hadc1.Init.OversamplingMode = ENABLE;
 80064bc:	f885 6038 	strb.w	r6, [r5, #56]	@ 0x38
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80064c0:	64ae      	str	r6, [r5, #72]	@ 0x48
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80064c2:	616c      	str	r4, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80064c4:	f003 fd90 	bl	8009fe8 <HAL_ADC_Init>
 80064c8:	b108      	cbz	r0, 80064ce <main+0x1f2>
 80064ca:	b672      	cpsid	i
  while (1)
 80064cc:	e7fe      	b.n	80064cc <main+0x1f0>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80064ce:	4603      	mov	r3, r0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80064d0:	4a3f      	ldr	r2, [pc, #252]	@ (80065d0 <main+0x2f4>)
  sConfig.Offset = 0;
 80064d2:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80064d4:	2306      	movs	r3, #6
 80064d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80064da:	940e      	str	r4, [sp, #56]	@ 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80064dc:	237f      	movs	r3, #127	@ 0x7f
 80064de:	2407      	movs	r4, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80064e0:	a90a      	add	r1, sp, #40	@ 0x28
 80064e2:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80064e4:	e9cd 430c 	strd	r4, r3, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80064e8:	f003 fea6 	bl	800a238 <HAL_ADC_ConfigChannel>
 80064ec:	b990      	cbnz	r0, 8006514 <main+0x238>
  hi2c1.Instance = I2C1;
 80064ee:	4c39      	ldr	r4, [pc, #228]	@ (80065d4 <main+0x2f8>)
  hi2c1.Init.Timing = 0x00301347;
 80064f0:	4b39      	ldr	r3, [pc, #228]	@ (80065d8 <main+0x2fc>)
 80064f2:	4d3a      	ldr	r5, [pc, #232]	@ (80065dc <main+0x300>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80064f4:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80064f6:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80064fa:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80064fe:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006502:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x00301347;
 8006504:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006508:	f005 f87c 	bl	800b604 <HAL_I2C_Init>
 800650c:	4601      	mov	r1, r0
 800650e:	b118      	cbz	r0, 8006518 <main+0x23c>
 8006510:	b672      	cpsid	i
  while (1)
 8006512:	e7fe      	b.n	8006512 <main+0x236>
 8006514:	b672      	cpsid	i
 8006516:	e7fe      	b.n	8006516 <main+0x23a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006518:	4620      	mov	r0, r4
 800651a:	f005 fd57 	bl	800bfcc <HAL_I2CEx_ConfigAnalogFilter>
 800651e:	4601      	mov	r1, r0
 8006520:	b108      	cbz	r0, 8006526 <main+0x24a>
 8006522:	b672      	cpsid	i
  while (1)
 8006524:	e7fe      	b.n	8006524 <main+0x248>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006526:	4620      	mov	r0, r4
 8006528:	f005 fd7a 	bl	800c020 <HAL_I2CEx_ConfigDigitalFilter>
 800652c:	b108      	cbz	r0, 8006532 <main+0x256>
 800652e:	b672      	cpsid	i
  while (1)
 8006530:	e7fe      	b.n	8006530 <main+0x254>
  hi2c2.Instance = I2C2;
 8006532:	4c2b      	ldr	r4, [pc, #172]	@ (80065e0 <main+0x304>)
 8006534:	4b2b      	ldr	r3, [pc, #172]	@ (80065e4 <main+0x308>)
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006536:	61e0      	str	r0, [r4, #28]
  hi2c2.Init.OwnAddress1 = 0;
 8006538:	e9c4 5001 	strd	r5, r0, [r4, #4]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800653c:	e9c4 6003 	strd	r6, r0, [r4, #12]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006540:	e9c4 0005 	strd	r0, r0, [r4, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006544:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006548:	4620      	mov	r0, r4
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800654a:	6227      	str	r7, [r4, #32]
  hi2c2.Instance = I2C2;
 800654c:	6023      	str	r3, [r4, #0]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800654e:	f005 f859 	bl	800b604 <HAL_I2C_Init>
 8006552:	4601      	mov	r1, r0
 8006554:	b108      	cbz	r0, 800655a <main+0x27e>
 8006556:	b672      	cpsid	i
  while (1)
 8006558:	e7fe      	b.n	8006558 <main+0x27c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800655a:	4620      	mov	r0, r4
 800655c:	f005 fd36 	bl	800bfcc <HAL_I2CEx_ConfigAnalogFilter>
 8006560:	4601      	mov	r1, r0
 8006562:	b108      	cbz	r0, 8006568 <main+0x28c>
 8006564:	b672      	cpsid	i
  while (1)
 8006566:	e7fe      	b.n	8006566 <main+0x28a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006568:	4620      	mov	r0, r4
 800656a:	f005 fd59 	bl	800c020 <HAL_I2CEx_ConfigDigitalFilter>
 800656e:	4603      	mov	r3, r0
 8006570:	b108      	cbz	r0, 8006576 <main+0x29a>
 8006572:	b672      	cpsid	i
  while (1)
 8006574:	e7fe      	b.n	8006574 <main+0x298>
  hi2c3.Instance = I2C3;
 8006576:	4c1c      	ldr	r4, [pc, #112]	@ (80065e8 <main+0x30c>)
  hi2c3.Init.OwnAddress1 = 0;
 8006578:	e9c4 5001 	strd	r5, r0, [r4, #4]
  hi2c3.Init.OwnAddress2 = 0;
 800657c:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006580:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006584:	4620      	mov	r0, r4
  hi2c3.Instance = I2C3;
 8006586:	4b19      	ldr	r3, [pc, #100]	@ (80065ec <main+0x310>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006588:	60e6      	str	r6, [r4, #12]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800658a:	6227      	str	r7, [r4, #32]
  hi2c3.Instance = I2C3;
 800658c:	6023      	str	r3, [r4, #0]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800658e:	f005 f839 	bl	800b604 <HAL_I2C_Init>
 8006592:	4601      	mov	r1, r0
 8006594:	b108      	cbz	r0, 800659a <main+0x2be>
 8006596:	b672      	cpsid	i
  while (1)
 8006598:	e7fe      	b.n	8006598 <main+0x2bc>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800659a:	4620      	mov	r0, r4
 800659c:	f005 fd16 	bl	800bfcc <HAL_I2CEx_ConfigAnalogFilter>
 80065a0:	b108      	cbz	r0, 80065a6 <main+0x2ca>
 80065a2:	b672      	cpsid	i
  while (1)
 80065a4:	e7fe      	b.n	80065a4 <main+0x2c8>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80065a6:	4810      	ldr	r0, [pc, #64]	@ (80065e8 <main+0x30c>)
 80065a8:	2100      	movs	r1, #0
 80065aa:	f005 fd39 	bl	800c020 <HAL_I2CEx_ConfigDigitalFilter>
 80065ae:	4603      	mov	r3, r0
 80065b0:	b1f0      	cbz	r0, 80065f0 <main+0x314>
 80065b2:	b672      	cpsid	i
  while (1)
 80065b4:	e7fe      	b.n	80065b4 <main+0x2d8>
 80065b6:	bf00      	nop
 80065b8:	40021000 	.word	0x40021000
 80065bc:	48000400 	.word	0x48000400
 80065c0:	48000800 	.word	0x48000800
 80065c4:	48001c00 	.word	0x48001c00
 80065c8:	50040000 	.word	0x50040000
 80065cc:	200018c0 	.word	0x200018c0
 80065d0:	c7520000 	.word	0xc7520000
 80065d4:	20001800 	.word	0x20001800
 80065d8:	40005400 	.word	0x40005400
 80065dc:	00301347 	.word	0x00301347
 80065e0:	200017ac 	.word	0x200017ac
 80065e4:	40005800 	.word	0x40005800
 80065e8:	20001758 	.word	0x20001758
 80065ec:	40005c00 	.word	0x40005c00
  huart1.Instance = USART1;
 80065f0:	4833      	ldr	r0, [pc, #204]	@ (80066c0 <main+0x3e4>)
  huart1.Init.BaudRate = 115200;
 80065f2:	4a34      	ldr	r2, [pc, #208]	@ (80066c4 <main+0x3e8>)
  huart1.Init.Parity = UART_PARITY_NONE;
 80065f4:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 80065f6:	f44f 35e1 	mov.w	r5, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80065fa:	240c      	movs	r4, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80065fc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006600:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006604:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart1.Init.BaudRate = 115200;
 8006608:	e9c0 2500 	strd	r2, r5, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800660c:	6144      	str	r4, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800660e:	f007 fad7 	bl	800dbc0 <HAL_UART_Init>
 8006612:	4603      	mov	r3, r0
 8006614:	b108      	cbz	r0, 800661a <main+0x33e>
 8006616:	b672      	cpsid	i
  while (1)
 8006618:	e7fe      	b.n	8006618 <main+0x33c>
  huart2.Instance = USART2;
 800661a:	482b      	ldr	r0, [pc, #172]	@ (80066c8 <main+0x3ec>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800661c:	e9c0 5301 	strd	r5, r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006620:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006624:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006628:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800662c:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.Instance = USART2;
 800662e:	4b27      	ldr	r3, [pc, #156]	@ (80066cc <main+0x3f0>)
 8006630:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006632:	f007 fac5 	bl	800dbc0 <HAL_UART_Init>
 8006636:	4603      	mov	r3, r0
 8006638:	b108      	cbz	r0, 800663e <main+0x362>
 800663a:	b672      	cpsid	i
  while (1)
 800663c:	e7fe      	b.n	800663c <main+0x360>
  hcrc.Instance = CRC;
 800663e:	4824      	ldr	r0, [pc, #144]	@ (80066d0 <main+0x3f4>)
 8006640:	4924      	ldr	r1, [pc, #144]	@ (80066d4 <main+0x3f8>)
 8006642:	6001      	str	r1, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8006644:	f240 1201 	movw	r2, #257	@ 0x101
 8006648:	8082      	strh	r2, [r0, #4]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 800664a:	2131      	movs	r1, #49	@ 0x31
 800664c:	2210      	movs	r2, #16
 800664e:	e9c0 1202 	strd	r1, r2, [r0, #8]
  hcrc.Init.InitValue = 0xFF;
 8006652:	21ff      	movs	r1, #255	@ 0xff
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8006654:	2201      	movs	r2, #1
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8006656:	e9c0 1304 	strd	r1, r3, [r0, #16]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800665a:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800665c:	6202      	str	r2, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800665e:	f004 fa2d 	bl	800aabc <HAL_CRC_Init>
 8006662:	4606      	mov	r6, r0
 8006664:	b108      	cbz	r0, 800666a <main+0x38e>
 8006666:	b672      	cpsid	i
  while (1)
 8006668:	e7fe      	b.n	8006668 <main+0x38c>
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800666a:	4602      	mov	r2, r0
 800666c:	2105      	movs	r1, #5
 800666e:	2025      	movs	r0, #37	@ 0x25
 8006670:	f004 f976 	bl	800a960 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006674:	2025      	movs	r0, #37	@ 0x25
 8006676:	f004 f9af 	bl	800a9d8 <HAL_NVIC_EnableIRQ>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800667a:	4c17      	ldr	r4, [pc, #92]	@ (80066d8 <main+0x3fc>)
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800667c:	4632      	mov	r2, r6
 800667e:	2105      	movs	r1, #5
 8006680:	2026      	movs	r0, #38	@ 0x26
 8006682:	f004 f96d 	bl	800a960 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006686:	2026      	movs	r0, #38	@ 0x26
 8006688:	f004 f9a6 	bl	800a9d8 <HAL_NVIC_EnableIRQ>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800668c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800668e:	ad05      	add	r5, sp, #20
 8006690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006692:	f854 3b04 	ldr.w	r3, [r4], #4
 8006696:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006698:	4631      	mov	r1, r6
 800669a:	a805      	add	r0, sp, #20
 800669c:	f007 fb5e 	bl	800dd5c <osThreadCreate>
 80066a0:	4b0e      	ldr	r3, [pc, #56]	@ (80066dc <main+0x400>)
 80066a2:	6018      	str	r0, [r3, #0]
  osThreadDef(THPMainTask, THP_MainTask, osPriorityNormal, 0, 512);
 80066a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066a6:	ad0a      	add	r5, sp, #40	@ 0x28
 80066a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	602b      	str	r3, [r5, #0]
  THPMainTaskHandle = osThreadCreate(osThread(THPMainTask), NULL);
 80066ae:	4631      	mov	r1, r6
 80066b0:	a80a      	add	r0, sp, #40	@ 0x28
 80066b2:	f007 fb53 	bl	800dd5c <osThreadCreate>
 80066b6:	4b0a      	ldr	r3, [pc, #40]	@ (80066e0 <main+0x404>)
 80066b8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80066ba:	f007 fb49 	bl	800dd50 <osKernelStart>
  while (1)
 80066be:	e7fe      	b.n	80066be <main+0x3e2>
 80066c0:	200016d4 	.word	0x200016d4
 80066c4:	40013800 	.word	0x40013800
 80066c8:	20001650 	.word	0x20001650
 80066cc:	40004400 	.word	0x40004400
 80066d0:	20001854 	.word	0x20001854
 80066d4:	40023000 	.word	0x40023000
 80066d8:	08014218 	.word	0x08014218
 80066dc:	2000164c 	.word	0x2000164c
 80066e0:	20001648 	.word	0x20001648

080066e4 <HAL_TIM_PeriodElapsedCallback>:
{
 80066e4:	b538      	push	{r3, r4, r5, lr}
  if (htim->Instance == TIM7) {
 80066e6:	4b07      	ldr	r3, [pc, #28]	@ (8006704 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80066e8:	6805      	ldr	r5, [r0, #0]
 80066ea:	429d      	cmp	r5, r3
 80066ec:	d000      	beq.n	80066f0 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	4604      	mov	r4, r0
    HAL_IncTick();
 80066f2:	f003 fc43 	bl	8009f7c <HAL_IncTick>
  if (htim->Instance == TIM7) {
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	d1f8      	bne.n	80066ee <HAL_TIM_PeriodElapsedCallback+0xa>
}
 80066fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  HAL_SYSTICK_Callback();
 8006700:	f000 bf8c 	b.w	800761c <HAL_SYSTICK_Callback>
 8006704:	40001400 	.word	0x40001400

08006708 <Error_Handler>:
 8006708:	b672      	cpsid	i
  while (1)
 800670a:	e7fe      	b.n	800670a <Error_Handler+0x2>

0800670c <hsensor_humidity_conversion_and_read_adc>:
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 *       - ms8607_status_crc_error : CRC check error
 */
enum ms8607_status hsensor_humidity_conversion_and_read_adc( uint16_t *adc)
{
 800670c:	b5f0      	push	{r4, r5, r6, r7, lr}
		.address     = HSENSOR_ADDR,
		.data_length = 3,
		.data        = buffer,
	};
	
	if( hsensor_i2c_master_mode == ms8607_i2c_hold) {
 800670e:	4a35      	ldr	r2, [pc, #212]	@ (80067e4 <hsensor_humidity_conversion_and_read_adc+0xd8>)
    struct i2c_master_packet read_transfer = {
 8006710:	4c35      	ldr	r4, [pc, #212]	@ (80067e8 <hsensor_humidity_conversion_and_read_adc+0xdc>)
	if( hsensor_i2c_master_mode == ms8607_i2c_hold) {
 8006712:	7812      	ldrb	r2, [r2, #0]
{
 8006714:	b087      	sub	sp, #28
	buffer[0] = 0;
 8006716:	2300      	movs	r3, #0
    struct i2c_master_packet read_transfer = {
 8006718:	a901      	add	r1, sp, #4
	buffer[0] = 0;
 800671a:	f8ad 3004 	strh.w	r3, [sp, #4]
	buffer[2] = 0;
 800671e:	f88d 3006 	strb.w	r3, [sp, #6]
    struct i2c_master_packet read_transfer = {
 8006722:	e9cd 4102 	strd	r4, r1, [sp, #8]
	struct i2c_master_packet transfer = {
 8006726:	4b31      	ldr	r3, [pc, #196]	@ (80067ec <hsensor_humidity_conversion_and_read_adc+0xe0>)
{
 8006728:	4605      	mov	r5, r0
	if( hsensor_i2c_master_mode == ms8607_i2c_hold) {
 800672a:	b96a      	cbnz	r2, 8006748 <hsensor_humidity_conversion_and_read_adc+0x3c>
	data[0] = cmd;
 800672c:	22e5      	movs	r2, #229	@ 0xe5
	i2c_status = i2c_master_write_packet_wait_no_stop(&transfer);
 800672e:	a804      	add	r0, sp, #16
	data[0] = cmd;
 8006730:	f88d 2000 	strb.w	r2, [sp]
	struct i2c_master_packet transfer = {
 8006734:	9304      	str	r3, [sp, #16]
 8006736:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait_no_stop(&transfer);
 800673a:	f000 faf5 	bl	8006d28 <i2c_master_write_packet_wait_no_stop>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800673e:	2801      	cmp	r0, #1
 8006740:	d04a      	beq.n	80067d8 <hsensor_humidity_conversion_and_read_adc+0xcc>
	if( i2c_status != STATUS_OK)
 8006742:	b1b8      	cbz	r0, 8006774 <hsensor_humidity_conversion_and_read_adc+0x68>
		return ms8607_status_i2c_transfer_error;
 8006744:	2002      	movs	r0, #2
 8006746:	e03d      	b.n	80067c4 <hsensor_humidity_conversion_and_read_adc+0xb8>
	data[0] = cmd;
 8006748:	22f5      	movs	r2, #245	@ 0xf5
	i2c_status = i2c_master_write_packet_wait(&transfer);
 800674a:	a804      	add	r0, sp, #16
	struct i2c_master_packet transfer = {
 800674c:	9304      	str	r3, [sp, #16]
	data[0] = cmd;
 800674e:	f88d 2000 	strb.w	r2, [sp]
	struct i2c_master_packet transfer = {
 8006752:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006756:	f000 fad9 	bl	8006d0c <i2c_master_write_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800675a:	2801      	cmp	r0, #1
	i2c_status = i2c_master_write_packet_wait(&transfer);
 800675c:	4603      	mov	r3, r0
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800675e:	d033      	beq.n	80067c8 <hsensor_humidity_conversion_and_read_adc+0xbc>
		status = hsensor_write_command_no_stop(HSENSOR_READ_HUMIDITY_W_HOLD_COMMAND);
	}
	else {
		status = hsensor_write_command(HSENSOR_READ_HUMIDITY_WO_HOLD_COMMAND);
		// delay depending on resolution
		osDelay(hsensor_conversion_time/1000);
 8006760:	4923      	ldr	r1, [pc, #140]	@ (80067f0 <hsensor_humidity_conversion_and_read_adc+0xe4>)
 8006762:	4a24      	ldr	r2, [pc, #144]	@ (80067f4 <hsensor_humidity_conversion_and_read_adc+0xe8>)
 8006764:	6808      	ldr	r0, [r1, #0]
 8006766:	fba2 2000 	umull	r2, r0, r2, r0
 800676a:	0980      	lsrs	r0, r0, #6
	if( i2c_status != STATUS_OK)
 800676c:	2b00      	cmp	r3, #0
 800676e:	d136      	bne.n	80067de <hsensor_humidity_conversion_and_read_adc+0xd2>
		osDelay(hsensor_conversion_time/1000);
 8006770:	f007 fb10 	bl	800dd94 <osDelay>
	}
	if( status != ms8607_status_ok)
		return status;
		
    i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8006774:	a802      	add	r0, sp, #8
 8006776:	f000 fabb 	bl	8006cf0 <i2c_master_read_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800677a:	2801      	cmp	r0, #1
 800677c:	d02c      	beq.n	80067d8 <hsensor_humidity_conversion_and_read_adc+0xcc>
		return ms8607_status_no_i2c_acknowledge;
	if( i2c_status != STATUS_OK)
 800677e:	2800      	cmp	r0, #0
 8006780:	d1e0      	bne.n	8006744 <hsensor_humidity_conversion_and_read_adc+0x38>
		return ms8607_status_i2c_transfer_error;

	_adc = (buffer[0] << 8) | buffer[1];
 8006782:	f8bd 6004 	ldrh.w	r6, [sp, #4]
	crc = buffer[2];
 8006786:	f89d 7006 	ldrb.w	r7, [sp, #6]
	uint32_t mask    = 0xFF8000;
 800678a:	4c1b      	ldr	r4, [pc, #108]	@ (80067f8 <hsensor_humidity_conversion_and_read_adc+0xec>)
	uint32_t polynom = 0x988000; // x^8 + x^5 + x^4 + 1
 800678c:	491b      	ldr	r1, [pc, #108]	@ (80067fc <hsensor_humidity_conversion_and_read_adc+0xf0>)
 800678e:	ba76      	rev16	r6, r6
 8006790:	fa1f fc86 	uxth.w	ip, r6
	uint32_t result  = (uint32_t)value<<8; // Pad with zeros as specified in spec
 8006794:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8006798:	2210      	movs	r2, #16
	uint32_t msb     = 0x800000;
 800679a:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
		if( result & msb )
 800679e:	ea13 0f0c 	tst.w	r3, ip
			result = ((result ^ polynom) & mask) | ( result & ~mask);
 80067a2:	bf1c      	itt	ne
 80067a4:	ea04 0e01 	andne.w	lr, r4, r1
 80067a8:	ea8c 0c0e 	eorne.w	ip, ip, lr
	while( msb != 0x80 ) {
 80067ac:	3a01      	subs	r2, #1
		msb >>= 1;
 80067ae:	ea4f 0353 	mov.w	r3, r3, lsr #1
		mask >>= 1;
 80067b2:	ea4f 0454 	mov.w	r4, r4, lsr #1
		polynom >>=1;
 80067b6:	ea4f 0151 	mov.w	r1, r1, lsr #1
	while( msb != 0x80 ) {
 80067ba:	d1f0      	bne.n	800679e <hsensor_humidity_conversion_and_read_adc+0x92>
	if( result == crc )
 80067bc:	4567      	cmp	r7, ip
	// compute CRC
	status = hsensor_crc_check(_adc,crc);
	if( status != ms8607_status_ok)
		return status;
	
	*adc = _adc;
 80067be:	bf0c      	ite	eq
 80067c0:	802e      	strheq	r6, [r5, #0]
		return ms8607_status_crc_error;
 80067c2:	2003      	movne	r0, #3

	return status;
}
 80067c4:	b007      	add	sp, #28
 80067c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(hsensor_conversion_time/1000);
 80067c8:	4a09      	ldr	r2, [pc, #36]	@ (80067f0 <hsensor_humidity_conversion_and_read_adc+0xe4>)
 80067ca:	4b0a      	ldr	r3, [pc, #40]	@ (80067f4 <hsensor_humidity_conversion_and_read_adc+0xe8>)
 80067cc:	6810      	ldr	r0, [r2, #0]
 80067ce:	fba3 3000 	umull	r3, r0, r3, r0
 80067d2:	0980      	lsrs	r0, r0, #6
 80067d4:	f007 fade 	bl	800dd94 <osDelay>
		return ms8607_status_no_i2c_acknowledge;
 80067d8:	2001      	movs	r0, #1
}
 80067da:	b007      	add	sp, #28
 80067dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(hsensor_conversion_time/1000);
 80067de:	f007 fad9 	bl	800dd94 <osDelay>
	if( status != ms8607_status_ok)
 80067e2:	e7af      	b.n	8006744 <hsensor_humidity_conversion_and_read_adc+0x38>
 80067e4:	20001936 	.word	0x20001936
 80067e8:	00030080 	.word	0x00030080
 80067ec:	00010080 	.word	0x00010080
 80067f0:	20000000 	.word	0x20000000
 80067f4:	10624dd3 	.word	0x10624dd3
 80067f8:	00ff8000 	.word	0x00ff8000
 80067fc:	00988000 	.word	0x00988000

08006800 <psensor_read_eeprom>:
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 *       - ms8607_status_crc_error : CRC check error on the coefficients
 */
enum ms8607_status psensor_read_eeprom(void)
{
 8006800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006804:	b087      	sub	sp, #28
 8006806:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 80068e8 <psensor_read_eeprom+0xe8>
	struct i2c_master_packet read_transfer = {
 800680a:	4e33      	ldr	r6, [pc, #204]	@ (80068d8 <psensor_read_eeprom+0xd8>)
	struct i2c_master_packet transfer = {
 800680c:	4d33      	ldr	r5, [pc, #204]	@ (80068dc <psensor_read_eeprom+0xdc>)
{
 800680e:	f04f 09a0 	mov.w	r9, #160	@ 0xa0
 8006812:	af01      	add	r7, sp, #4
	buffer[0] = 0;
 8006814:	2400      	movs	r4, #0
 8006816:	e013      	b.n	8006840 <psensor_read_eeprom+0x40>
	if( i2c_status != STATUS_OK)
 8006818:	bb33      	cbnz	r3, 8006868 <psensor_read_eeprom+0x68>
	i2c_status = i2c_master_read_packet_wait(&read_transfer);
 800681a:	f000 fa69 	bl	8006cf0 <i2c_master_read_packet_wait>
	enum ms8607_status status;
	uint8_t i;
	
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 800681e:	f109 0902 	add.w	r9, r9, #2
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8006822:	2801      	cmp	r0, #1
	i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8006824:	4601      	mov	r1, r0
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 8006826:	fa5f f989 	uxtb.w	r9, r9
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800682a:	d019      	beq.n	8006860 <psensor_read_eeprom+0x60>
	if( i2c_status != STATUS_OK)
 800682c:	b9e0      	cbnz	r0, 8006868 <psensor_read_eeprom+0x68>
 800682e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	*coeff = (buffer[0] << 8) | buffer[1];
 8006832:	ba5a      	rev16	r2, r3
 8006834:	f828 2f02 	strh.w	r2, [r8, #2]!
    if (*coeff == 0) {
 8006838:	b1b3      	cbz	r3, 8006868 <psensor_read_eeprom+0x68>
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 800683a:	f1b9 0fae 	cmp.w	r9, #174	@ 0xae
 800683e:	d017      	beq.n	8006870 <psensor_read_eeprom+0x70>
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006840:	a804      	add	r0, sp, #16
	struct i2c_master_packet read_transfer = {
 8006842:	e9cd 6702 	strd	r6, r7, [sp, #8]
	data[0] = cmd;
 8006846:	f88d 9000 	strb.w	r9, [sp]
	buffer[0] = 0;
 800684a:	f8ad 4004 	strh.w	r4, [sp, #4]
	struct i2c_master_packet transfer = {
 800684e:	9504      	str	r5, [sp, #16]
 8006850:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006854:	f000 fa5a 	bl	8006d0c <i2c_master_write_packet_wait>
 8006858:	4603      	mov	r3, r0
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800685a:	2b01      	cmp	r3, #1
	i2c_status = i2c_master_read_packet_wait(&read_transfer);
 800685c:	a802      	add	r0, sp, #8
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800685e:	d1db      	bne.n	8006818 <psensor_read_eeprom+0x18>
 8006860:	2001      	movs	r0, #1
		return ms8607_status_crc_error;
	
	psensor_coeff_read = true;
	
  	return ms8607_status_ok;
}
 8006862:	b007      	add	sp, #28
 8006864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ms8607_status_i2c_transfer_error;
 8006868:	2002      	movs	r0, #2
}
 800686a:	b007      	add	sp, #28
 800686c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if( !psensor_crc_check( eeprom_coeff, (eeprom_coeff[CRC_INDEX] & 0xF000)>>12 ) )
 8006870:	4c1b      	ldr	r4, [pc, #108]	@ (80068e0 <psensor_read_eeprom+0xe0>)
 8006872:	8825      	ldrh	r5, [r4, #0]
	uint8_t cnt, n_bit;
	uint16_t n_rem, crc_read;
	
	n_rem = 0x00;
	crc_read = n_prom[0];
	n_prom[COEFFICIENT_NUMBERS] = 0;
 8006874:	81e0      	strh	r0, [r4, #14]
	n_prom[0] = (0x0FFF & (n_prom[0]));    // Clear the CRC byte
 8006876:	f3c5 030b 	ubfx	r3, r5, #0, #12
	if( !psensor_crc_check( eeprom_coeff, (eeprom_coeff[CRC_INDEX] & 0xF000)>>12 ) )
 800687a:	0b2e      	lsrs	r6, r5, #12
	n_prom[0] = (0x0FFF & (n_prom[0]));    // Clear the CRC byte
 800687c:	8023      	strh	r3, [r4, #0]
	n_rem = 0x00;
 800687e:	4602      	mov	r2, r0

	for( cnt = 0 ; cnt < (COEFFICIENT_NUMBERS+1)*2 ; cnt++ ) {

		// Get next byte
		if (cnt%2 == 1)
 8006880:	07c8      	lsls	r0, r1, #31
 8006882:	bf46      	itte	mi
 8006884:	b2db      	uxtbmi	r3, r3
 8006886:	405a      	eormi	r2, r3
			n_rem ^=  n_prom[cnt>>1] & 0x00FF ;
		else
			n_rem ^=  n_prom[cnt>>1]>>8 ;
 8006888:	ea82 2213 	eorpl.w	r2, r2, r3, lsr #8
	n_rem = 0x00;
 800688c:	2008      	movs	r0, #8

		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {

			if( n_rem & 0x8000 )
				n_rem = (n_rem << 1) ^ 0x3000;
 800688e:	0053      	lsls	r3, r2, #1
			if( n_rem & 0x8000 )
 8006890:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
				n_rem = (n_rem << 1) ^ 0x3000;
 8006894:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
			else
				n_rem <<= 1;
 8006898:	bf08      	it	eq
 800689a:	0052      	lsleq	r2, r2, #1
				n_rem = (n_rem << 1) ^ 0x3000;
 800689c:	b21b      	sxth	r3, r3
		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
 800689e:	f100 30ff 	add.w	r0, r0, #4294967295
				n_rem = (n_rem << 1) ^ 0x3000;
 80068a2:	bf14      	ite	ne
 80068a4:	b29a      	uxthne	r2, r3
				n_rem <<= 1;
 80068a6:	b292      	uxtheq	r2, r2
		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
 80068a8:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 80068ac:	d1ef      	bne.n	800688e <psensor_read_eeprom+0x8e>
	for( cnt = 0 ; cnt < (COEFFICIENT_NUMBERS+1)*2 ; cnt++ ) {
 80068ae:	3101      	adds	r1, #1
 80068b0:	b2c9      	uxtb	r1, r1
 80068b2:	2910      	cmp	r1, #16
 80068b4:	d003      	beq.n	80068be <psensor_read_eeprom+0xbe>
			n_rem ^=  n_prom[cnt>>1] & 0x00FF ;
 80068b6:	084b      	lsrs	r3, r1, #1
 80068b8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80068bc:	e7e0      	b.n	8006880 <psensor_read_eeprom+0x80>
	if( !psensor_crc_check( eeprom_coeff, (eeprom_coeff[CRC_INDEX] & 0xF000)>>12 ) )
 80068be:	ebb6 3f12 	cmp.w	r6, r2, lsr #12
	psensor_coeff_read = true;
 80068c2:	bf08      	it	eq
 80068c4:	4b07      	ldreq	r3, [pc, #28]	@ (80068e4 <psensor_read_eeprom+0xe4>)
		}
	}
	n_rem >>= 12;
	n_prom[0] = crc_read;
 80068c6:	8025      	strh	r5, [r4, #0]
	psensor_coeff_read = true;
 80068c8:	bf0a      	itet	eq
 80068ca:	2201      	moveq	r2, #1
		return ms8607_status_crc_error;
 80068cc:	2003      	movne	r0, #3
	psensor_coeff_read = true;
 80068ce:	701a      	strbeq	r2, [r3, #0]
}
 80068d0:	b007      	add	sp, #28
 80068d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068d6:	bf00      	nop
 80068d8:	000200ec 	.word	0x000200ec
 80068dc:	000100ec 	.word	0x000100ec
 80068e0:	20001924 	.word	0x20001924
 80068e4:	20001934 	.word	0x20001934
 80068e8:	20001922 	.word	0x20001922

080068ec <psensor_conversion_and_read_adc>:
{
 80068ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ee:	b087      	sub	sp, #28
 80068f0:	4604      	mov	r4, r0
    struct i2c_master_packet read_transfer = {
 80068f2:	a801      	add	r0, sp, #4
	buffer[0] = 0;
 80068f4:	2300      	movs	r3, #0
    struct i2c_master_packet read_transfer = {
 80068f6:	4a27      	ldr	r2, [pc, #156]	@ (8006994 <psensor_conversion_and_read_adc+0xa8>)
 80068f8:	9003      	str	r0, [sp, #12]
	struct i2c_master_packet transfer = {
 80068fa:	4f27      	ldr	r7, [pc, #156]	@ (8006998 <psensor_conversion_and_read_adc+0xac>)
	data[0] = cmd;
 80068fc:	f88d 4000 	strb.w	r4, [sp]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006900:	a804      	add	r0, sp, #16
{
 8006902:	460e      	mov	r6, r1
	buffer[0] = 0;
 8006904:	f8ad 3004 	strh.w	r3, [sp, #4]
	buffer[2] = 0;
 8006908:	f88d 3006 	strb.w	r3, [sp, #6]
    struct i2c_master_packet read_transfer = {
 800690c:	9202      	str	r2, [sp, #8]
	struct i2c_master_packet transfer = {
 800690e:	9704      	str	r7, [sp, #16]
 8006910:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006914:	f000 f9fa 	bl	8006d0c <i2c_master_write_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8006918:	2801      	cmp	r0, #1
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 800691a:	f3c4 0442 	ubfx	r4, r4, #1, #3
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800691e:	d028      	beq.n	8006972 <psensor_conversion_and_read_adc+0x86>
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 8006920:	4b1e      	ldr	r3, [pc, #120]	@ (800699c <psensor_conversion_and_read_adc+0xb0>)
 8006922:	4605      	mov	r5, r0
 8006924:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006928:	4b1d      	ldr	r3, [pc, #116]	@ (80069a0 <psensor_conversion_and_read_adc+0xb4>)
 800692a:	fba3 3000 	umull	r3, r0, r3, r0
 800692e:	0980      	lsrs	r0, r0, #6
	if( i2c_status != STATUS_OK)
 8006930:	bb5d      	cbnz	r5, 800698a <psensor_conversion_and_read_adc+0x9e>
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 8006932:	f007 fa2f 	bl	800dd94 <osDelay>
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006936:	a804      	add	r0, sp, #16
	data[0] = cmd;
 8006938:	f88d 5000 	strb.w	r5, [sp]
	struct i2c_master_packet transfer = {
 800693c:	9704      	str	r7, [sp, #16]
 800693e:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006942:	f000 f9e3 	bl	8006d0c <i2c_master_write_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8006946:	2801      	cmp	r0, #1
 8006948:	d01c      	beq.n	8006984 <psensor_conversion_and_read_adc+0x98>
	if( i2c_status != STATUS_OK)
 800694a:	bb00      	cbnz	r0, 800698e <psensor_conversion_and_read_adc+0xa2>
    i2c_status = i2c_master_read_packet_wait(&read_transfer);
 800694c:	a802      	add	r0, sp, #8
 800694e:	f000 f9cf 	bl	8006cf0 <i2c_master_read_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8006952:	2801      	cmp	r0, #1
 8006954:	d016      	beq.n	8006984 <psensor_conversion_and_read_adc+0x98>
	if( i2c_status != STATUS_OK)
 8006956:	b9d0      	cbnz	r0, 800698e <psensor_conversion_and_read_adc+0xa2>
	*adc = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
 8006958:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800695c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8006960:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800696a:	4313      	orrs	r3, r2
 800696c:	6033      	str	r3, [r6, #0]
}
 800696e:	b007      	add	sp, #28
 8006970:	bdf0      	pop	{r4, r5, r6, r7, pc}
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 8006972:	4a0a      	ldr	r2, [pc, #40]	@ (800699c <psensor_conversion_and_read_adc+0xb0>)
 8006974:	4b0a      	ldr	r3, [pc, #40]	@ (80069a0 <psensor_conversion_and_read_adc+0xb4>)
 8006976:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800697a:	fba3 3000 	umull	r3, r0, r3, r0
 800697e:	0980      	lsrs	r0, r0, #6
 8006980:	f007 fa08 	bl	800dd94 <osDelay>
		return ms8607_status_no_i2c_acknowledge;
 8006984:	2001      	movs	r0, #1
}
 8006986:	b007      	add	sp, #28
 8006988:	bdf0      	pop	{r4, r5, r6, r7, pc}
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 800698a:	f007 fa03 	bl	800dd94 <osDelay>
		return ms8607_status_i2c_transfer_error;
 800698e:	2002      	movs	r0, #2
}
 8006990:	b007      	add	sp, #28
 8006992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006994:	000300ec 	.word	0x000300ec
 8006998:	000100ec 	.word	0x000100ec
 800699c:	08016934 	.word	0x08016934
 80069a0:	10624dd3 	.word	0x10624dd3

080069a4 <ms8607_init>:
	hsensor_i2c_master_mode = ms8607_i2c_hold;
 80069a4:	4903      	ldr	r1, [pc, #12]	@ (80069b4 <ms8607_init+0x10>)
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 80069a6:	4b04      	ldr	r3, [pc, #16]	@ (80069b8 <ms8607_init+0x14>)
	hsensor_i2c_master_mode = ms8607_i2c_hold;
 80069a8:	2000      	movs	r0, #0
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 80069aa:	2205      	movs	r2, #5
	hsensor_i2c_master_mode = ms8607_i2c_hold;
 80069ac:	7008      	strb	r0, [r1, #0]
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 80069ae:	701a      	strb	r2, [r3, #0]
	i2c_master_init();
 80069b0:	f000 b99c 	b.w	8006cec <i2c_master_init>
 80069b4:	20001936 	.word	0x20001936
 80069b8:	20001935 	.word	0x20001935

080069bc <MS8607_osr>:
	psensor_resolution_osr = osr;
 80069bc:	4b01      	ldr	r3, [pc, #4]	@ (80069c4 <MS8607_osr+0x8>)
 80069be:	7018      	strb	r0, [r3, #0]
	i2c_master_init();
 80069c0:	f000 b994 	b.w	8006cec <i2c_master_init>
 80069c4:	20001935 	.word	0x20001935

080069c8 <ms8607_is_connected>:
{
 80069c8:	b500      	push	{lr}
 80069ca:	b083      	sub	sp, #12
	struct i2c_master_packet transfer = {
 80069cc:	2280      	movs	r2, #128	@ 0x80
 80069ce:	2300      	movs	r3, #0
	i2c_status = i2c_master_write_packet_wait(&transfer);
 80069d0:	4668      	mov	r0, sp
	struct i2c_master_packet transfer = {
 80069d2:	e9cd 2300 	strd	r2, r3, [sp]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 80069d6:	f000 f999 	bl	8006d0c <i2c_master_write_packet_wait>
	if( i2c_status != STATUS_OK)
 80069da:	b958      	cbnz	r0, 80069f4 <ms8607_is_connected+0x2c>
	struct i2c_master_packet transfer = {
 80069dc:	4603      	mov	r3, r0
 80069de:	22ec      	movs	r2, #236	@ 0xec
	i2c_status = i2c_master_write_packet_wait(&transfer);
 80069e0:	4668      	mov	r0, sp
	struct i2c_master_packet transfer = {
 80069e2:	e9cd 2300 	strd	r2, r3, [sp]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 80069e6:	f000 f991 	bl	8006d0c <i2c_master_write_packet_wait>
	if( i2c_status != STATUS_OK)
 80069ea:	b918      	cbnz	r0, 80069f4 <ms8607_is_connected+0x2c>
 80069ec:	2001      	movs	r0, #1
}
 80069ee:	b003      	add	sp, #12
 80069f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80069f4:	2000      	movs	r0, #0
 80069f6:	b003      	add	sp, #12
 80069f8:	f85d fb04 	ldr.w	pc, [sp], #4

080069fc <ms8607_read_humidity>:
{
 80069fc:	b510      	push	{r4, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	4604      	mov	r4, r0
	status = hsensor_humidity_conversion_and_read_adc( &adc);
 8006a02:	f10d 0006 	add.w	r0, sp, #6
 8006a06:	f7ff fe81 	bl	800670c <hsensor_humidity_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8006a0a:	b988      	cbnz	r0, 8006a30 <ms8607_read_humidity+0x34>
	*humidity = (float)adc * HUMIDITY_COEFF_MUL / (1UL<<16) + HUMIDITY_COEFF_ADD;
 8006a0c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006a10:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8006a34 <ms8607_read_humidity+0x38>
 8006a14:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8006a38 <ms8607_read_humidity+0x3c>
 8006a18:	ee07 3a90 	vmov	s15, r3
 8006a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a24:	eeb9 7a08 	vmov.f32	s14, #152	@ 0xc0c00000 -6.0
 8006a28:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006a2c:	ed84 7a00 	vstr	s14, [r4]
	}
 8006a30:	b002      	add	sp, #8
 8006a32:	bd10      	pop	{r4, pc}
 8006a34:	42fa0000 	.word	0x42fa0000
 8006a38:	37800000 	.word	0x37800000

08006a3c <psensor_read_temperature>:
{
 8006a3c:	b510      	push	{r4, lr}
	if( psensor_coeff_read == false )
 8006a3e:	4b28      	ldr	r3, [pc, #160]	@ (8006ae0 <psensor_read_temperature+0xa4>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
{
 8006a42:	b082      	sub	sp, #8
 8006a44:	4604      	mov	r4, r0
	if( psensor_coeff_read == false )
 8006a46:	b913      	cbnz	r3, 8006a4e <psensor_read_temperature+0x12>
		status = psensor_read_eeprom();
 8006a48:	f7ff feda 	bl	8006800 <psensor_read_eeprom>
	if( status != ms8607_status_ok)
 8006a4c:	bba8      	cbnz	r0, 8006aba <psensor_read_temperature+0x7e>
	cmd = psensor_resolution_osr*2;
 8006a4e:	4b25      	ldr	r3, [pc, #148]	@ (8006ae4 <psensor_read_temperature+0xa8>)
 8006a50:	7818      	ldrb	r0, [r3, #0]
 8006a52:	0040      	lsls	r0, r0, #1
 8006a54:	b2c0      	uxtb	r0, r0
	status = psensor_conversion_and_read_adc( cmd, &adc_temperature);
 8006a56:	a901      	add	r1, sp, #4
 8006a58:	f040 0050 	orr.w	r0, r0, #80	@ 0x50
 8006a5c:	f7ff ff46 	bl	80068ec <psensor_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8006a60:	bb58      	cbnz	r0, 8006aba <psensor_read_temperature+0x7e>
    if (adc_temperature == 0) {
 8006a62:	9b01      	ldr	r3, [sp, #4]
 8006a64:	b3cb      	cbz	r3, 8006ada <psensor_read_temperature+0x9e>
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 8006a66:	4a20      	ldr	r2, [pc, #128]	@ (8006ae8 <psensor_read_temperature+0xac>)
 8006a68:	8951      	ldrh	r1, [r2, #10]
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 8006a6a:	8992      	ldrh	r2, [r2, #12]
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 8006a6c:	eba3 2301 	sub.w	r3, r3, r1, lsl #8
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 8006a70:	fb82 2103 	smull	r2, r1, r2, r3
 8006a74:	0dd2      	lsrs	r2, r2, #23
 8006a76:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8006a7a:	f502 62fa 	add.w	r2, r2, #2000	@ 0x7d0
	if( TEMP < 2000 )
 8006a7e:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
		T2 = ( 3 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 33;
 8006a82:	fb83 3103 	smull	r3, r1, r3, r3
	if( TEMP < 2000 )
 8006a86:	da1a      	bge.n	8006abe <psensor_read_temperature+0x82>
		T2 = ( 3 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 33;
 8006a88:	eb13 0c03 	adds.w	ip, r3, r3
 8006a8c:	eb41 0e01 	adc.w	lr, r1, r1
 8006a90:	eb1c 0c03 	adds.w	ip, ip, r3
 8006a94:	eb41 010e 	adc.w	r1, r1, lr
 8006a98:	104b      	asrs	r3, r1, #1
 8006a9a:	ee07 3a10 	vmov	s14, r3
	*temperature = ( (float)TEMP - T2 ) / 100;
 8006a9e:	ee07 2a90 	vmov	s15, r2
 8006aa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aaa:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8006aec <psensor_read_temperature+0xb0>
 8006aae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ab2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006ab6:	ed84 7a00 	vstr	s14, [r4]
}
 8006aba:	b002      	add	sp, #8
 8006abc:	bd10      	pop	{r4, pc}
		T2 = ( 5 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 38;
 8006abe:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 8006ac2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8006ac6:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
 8006aca:	eb1c 0c03 	adds.w	ip, ip, r3
 8006ace:	eb41 010e 	adc.w	r1, r1, lr
 8006ad2:	118b      	asrs	r3, r1, #6
 8006ad4:	ee07 3a10 	vmov	s14, r3
		SENS2 = 0 ;
 8006ad8:	e7e1      	b.n	8006a9e <psensor_read_temperature+0x62>
        return ms8607_status_i2c_transfer_error;
 8006ada:	2002      	movs	r0, #2
}
 8006adc:	b002      	add	sp, #8
 8006ade:	bd10      	pop	{r4, pc}
 8006ae0:	20001934 	.word	0x20001934
 8006ae4:	20001935 	.word	0x20001935
 8006ae8:	20001924 	.word	0x20001924
 8006aec:	42c80000 	.word	0x42c80000

08006af0 <ms8607_read_temperature>:
	status = psensor_read_temperature(t);
 8006af0:	f7ff bfa4 	b.w	8006a3c <psensor_read_temperature>

08006af4 <psensor_read_pressure>:
{
 8006af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( psensor_coeff_read == false )
 8006af8:	4b77      	ldr	r3, [pc, #476]	@ (8006cd8 <psensor_read_pressure+0x1e4>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
{
 8006afc:	b083      	sub	sp, #12
 8006afe:	4605      	mov	r5, r0
	if( psensor_coeff_read == false )
 8006b00:	b91b      	cbnz	r3, 8006b0a <psensor_read_pressure+0x16>
		status = psensor_read_eeprom();
 8006b02:	f7ff fe7d 	bl	8006800 <psensor_read_eeprom>
	if( status != ms8607_status_ok)
 8006b06:	4604      	mov	r4, r0
 8006b08:	b950      	cbnz	r0, 8006b20 <psensor_read_pressure+0x2c>
	cmd = psensor_resolution_osr*2;
 8006b0a:	4e74      	ldr	r6, [pc, #464]	@ (8006cdc <psensor_read_pressure+0x1e8>)
 8006b0c:	7833      	ldrb	r3, [r6, #0]
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	b2db      	uxtb	r3, r3
	status = psensor_conversion_and_read_adc( cmd, &adc_temperature);
 8006b12:	4669      	mov	r1, sp
 8006b14:	f043 0050 	orr.w	r0, r3, #80	@ 0x50
 8006b18:	f7ff fee8 	bl	80068ec <psensor_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	b118      	cbz	r0, 8006b28 <psensor_read_pressure+0x34>
}
 8006b20:	4620      	mov	r0, r4
 8006b22:	b003      	add	sp, #12
 8006b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cmd = psensor_resolution_osr*2;
 8006b28:	7830      	ldrb	r0, [r6, #0]
 8006b2a:	0040      	lsls	r0, r0, #1
 8006b2c:	b2c0      	uxtb	r0, r0
	status = psensor_conversion_and_read_adc( cmd, &adc_pressure);
 8006b2e:	a901      	add	r1, sp, #4
 8006b30:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8006b34:	f7ff feda 	bl	80068ec <psensor_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8006b38:	4604      	mov	r4, r0
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d1f0      	bne.n	8006b20 <psensor_read_pressure+0x2c>
    if (adc_temperature == 0 || adc_pressure == 0) {
 8006b3e:	9a00      	ldr	r2, [sp, #0]
 8006b40:	2a00      	cmp	r2, #0
 8006b42:	f000 80be 	beq.w	8006cc2 <psensor_read_pressure+0x1ce>
 8006b46:	9e01      	ldr	r6, [sp, #4]
 8006b48:	2e00      	cmp	r6, #0
 8006b4a:	f000 80ba 	beq.w	8006cc2 <psensor_read_pressure+0x1ce>
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 8006b4e:	4964      	ldr	r1, [pc, #400]	@ (8006ce0 <psensor_read_pressure+0x1ec>)
 8006b50:	894b      	ldrh	r3, [r1, #10]
 8006b52:	eba2 2203 	sub.w	r2, r2, r3, lsl #8
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 8006b56:	898b      	ldrh	r3, [r1, #12]
 8006b58:	fb83 3002 	smull	r3, r0, r3, r2
 8006b5c:	0ddb      	lsrs	r3, r3, #23
 8006b5e:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8006b62:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
	if( TEMP < 2000 )
 8006b66:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8006b6a:	f280 80af 	bge.w	8006ccc <psensor_read_pressure+0x1d8>
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006b6e:	f5b3 6cfa 	subs.w	ip, r3, #2000	@ 0x7d0
 8006b72:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8006b76:	f169 0700 	sbc.w	r7, r9, #0
 8006b7a:	fb0c f707 	mul.w	r7, ip, r7
 8006b7e:	fbac 0c0c 	umull	r0, ip, ip, ip
 8006b82:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
 8006b86:	ea4f 170c 	mov.w	r7, ip, lsl #4
 8006b8a:	ea4f 1e00 	mov.w	lr, r0, lsl #4
 8006b8e:	ebbe 0e00 	subs.w	lr, lr, r0
 8006b92:	ea47 7710 	orr.w	r7, r7, r0, lsr #28
 8006b96:	eb67 070c 	sbc.w	r7, r7, ip
 8006b9a:	00bf      	lsls	r7, r7, #2
 8006b9c:	ea47 779e 	orr.w	r7, r7, lr, lsr #30
 8006ba0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006ba4:	eb1e 0e00 	adds.w	lr, lr, r0
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006ba8:	ea4f 0acc 	mov.w	sl, ip, lsl #3
 8006bac:	ea4f 08c0 	mov.w	r8, r0, lsl #3
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006bb0:	eb4c 0707 	adc.w	r7, ip, r7
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006bb4:	ea4a 7a50 	orr.w	sl, sl, r0, lsr #29
 8006bb8:	ebb8 0800 	subs.w	r8, r8, r0
 8006bbc:	eb6a 0a0c 	sbc.w	sl, sl, ip
 8006bc0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8006bc4:	ea4a 7a98 	orr.w	sl, sl, r8, lsr #30
 8006bc8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8006bcc:	eb18 0800 	adds.w	r8, r8, r0
		if( TEMP < -1500 )
 8006bd0:	4844      	ldr	r0, [pc, #272]	@ (8006ce4 <psensor_read_pressure+0x1f0>)
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006bd2:	eb4c 0c0a 	adc.w	ip, ip, sl
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006bd6:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006bda:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if( TEMP < -1500 )
 8006bde:	4283      	cmp	r3, r0
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006be0:	ea4e 7e07 	orr.w	lr, lr, r7, lsl #28
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006be4:	ea48 780c 	orr.w	r8, r8, ip, lsl #28
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006be8:	ea4f 1727 	mov.w	r7, r7, asr #4
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006bec:	ea4f 1c2c 	mov.w	ip, ip, asr #4
		if( TEMP < -1500 )
 8006bf0:	da28      	bge.n	8006c44 <psensor_read_pressure+0x150>
			OFF2 += 17 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) ;
 8006bf2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8006bf6:	181b      	adds	r3, r3, r0
 8006bf8:	f149 0900 	adc.w	r9, r9, #0
 8006bfc:	fb03 f909 	mul.w	r9, r3, r9
 8006c00:	fba3 a303 	umull	sl, r3, r3, r3
 8006c04:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8006c08:	ea4f 1903 	mov.w	r9, r3, lsl #4
 8006c0c:	ea4f 100a 	mov.w	r0, sl, lsl #4
 8006c10:	eb10 000a 	adds.w	r0, r0, sl
 8006c14:	ea49 791a 	orr.w	r9, r9, sl, lsr #28
 8006c18:	eb43 0909 	adc.w	r9, r3, r9
 8006c1c:	eb10 000e 	adds.w	r0, r0, lr
 8006c20:	eb47 0709 	adc.w	r7, r7, r9
 8006c24:	4686      	mov	lr, r0
			SENS2 += 9 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) ;
 8006c26:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8006c2a:	ea4f 00ca 	mov.w	r0, sl, lsl #3
 8006c2e:	eb10 000a 	adds.w	r0, r0, sl
 8006c32:	ea49 795a 	orr.w	r9, r9, sl, lsr #29
 8006c36:	eb43 0309 	adc.w	r3, r3, r9
 8006c3a:	eb10 0008 	adds.w	r0, r0, r8
 8006c3e:	eb4c 0c03 	adc.w	ip, ip, r3
 8006c42:	4680      	mov	r8, r0
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8006c44:	f8b1 a008 	ldrh.w	sl, [r1, #8]
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8006c48:	88cb      	ldrh	r3, [r1, #6]
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8006c4a:	8888      	ldrh	r0, [r1, #4]
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8006c4c:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8006c50:	fb8a 1a02 	smull	r1, sl, sl, r2
 8006c54:	0989      	lsrs	r1, r1, #6
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8006c56:	fb83 3202 	smull	r3, r2, r3, r2
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8006c5a:	ea4f 4b40 	mov.w	fp, r0, lsl #17
 8006c5e:	ea41 618a 	orr.w	r1, r1, sl, lsl #26
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8006c62:	09db      	lsrs	r3, r3, #7
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8006c64:	eb11 010b 	adds.w	r1, r1, fp
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8006c68:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8006c6c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8006c70:	ea4f 30d0 	mov.w	r0, r0, lsr #15
 8006c74:	eb40 10aa 	adc.w	r0, r0, sl, asr #6
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8006c78:	11d2      	asrs	r2, r2, #7
 8006c7a:	eb13 0309 	adds.w	r3, r3, r9
 8006c7e:	f142 0200 	adc.w	r2, r2, #0
	SENS -= SENS2 ;
 8006c82:	ebb3 0308 	subs.w	r3, r3, r8
 8006c86:	eb62 020c 	sbc.w	r2, r2, ip
	OFF -= OFF2 ;
 8006c8a:	ebb1 0c0e 	subs.w	ip, r1, lr
	P = ( ( (adc_pressure * SENS) >> 21 ) - OFF ) >> 15 ;
 8006c8e:	fba3 3106 	umull	r3, r1, r3, r6
 8006c92:	fb06 1102 	mla	r1, r6, r2, r1
 8006c96:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8006c9a:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
	OFF -= OFF2 ;
 8006c9e:	eb60 0707 	sbc.w	r7, r0, r7
	P = ( ( (adc_pressure * SENS) >> 21 ) - OFF ) >> 15 ;
 8006ca2:	1549      	asrs	r1, r1, #21
 8006ca4:	ebb3 000c 	subs.w	r0, r3, ip
 8006ca8:	eb61 0107 	sbc.w	r1, r1, r7
 8006cac:	0bc0      	lsrs	r0, r0, #15
	*pressure = (float)P;
 8006cae:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
 8006cb2:	13c9      	asrs	r1, r1, #15
 8006cb4:	f7fa f8f8 	bl	8000ea8 <__aeabi_l2f>
 8006cb8:	6028      	str	r0, [r5, #0]
}
 8006cba:	4620      	mov	r0, r4
 8006cbc:	b003      	add	sp, #12
 8006cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ms8607_status_i2c_transfer_error;
 8006cc2:	2402      	movs	r4, #2
}
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	b003      	add	sp, #12
 8006cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SENS2 = 0 ;
 8006ccc:	46a0      	mov	r8, r4
 8006cce:	46a4      	mov	ip, r4
		OFF2 = 0 ;
 8006cd0:	46a6      	mov	lr, r4
 8006cd2:	4627      	mov	r7, r4
 8006cd4:	e7b6      	b.n	8006c44 <psensor_read_pressure+0x150>
 8006cd6:	bf00      	nop
 8006cd8:	20001934 	.word	0x20001934
 8006cdc:	20001935 	.word	0x20001935
 8006ce0:	20001924 	.word	0x20001924
 8006ce4:	fffffa24 	.word	0xfffffa24

08006ce8 <ms8607_read_pressure>:
	status = psensor_read_pressure(p);
 8006ce8:	f7ff bf04 	b.w	8006af4 <psensor_read_pressure>

08006cec <i2c_master_init>:
#include "ms8607.h"
#include "ms8607_i2c.h"

void i2c_master_init(void)
{
}
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop

08006cf0 <i2c_master_read_packet_wait>:

enum status_code i2c_master_read_packet_wait(struct i2c_master_packet *const packet)
{
 8006cf0:	b510      	push	{r4, lr}
 8006cf2:	b082      	sub	sp, #8
    uint8_t res = HAL_I2C_Master_Receive(&hi2c2, packet->address, packet->data, packet->data_length, 50);
 8006cf4:	2432      	movs	r4, #50	@ 0x32
 8006cf6:	8843      	ldrh	r3, [r0, #2]
 8006cf8:	6842      	ldr	r2, [r0, #4]
 8006cfa:	8801      	ldrh	r1, [r0, #0]
 8006cfc:	9400      	str	r4, [sp, #0]
 8006cfe:	4802      	ldr	r0, [pc, #8]	@ (8006d08 <i2c_master_read_packet_wait+0x18>)
 8006d00:	f004 fd9e 	bl	800b840 <HAL_I2C_Master_Receive>
    return (enum status_code)res;
}
 8006d04:	b002      	add	sp, #8
 8006d06:	bd10      	pop	{r4, pc}
 8006d08:	200017ac 	.word	0x200017ac

08006d0c <i2c_master_write_packet_wait>:


enum status_code i2c_master_write_packet_wait(struct i2c_master_packet *const packet)
{
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	b082      	sub	sp, #8
    uint8_t res = HAL_I2C_Master_Transmit(&hi2c2, packet->address, packet->data, packet->data_length, 50);
 8006d10:	2432      	movs	r4, #50	@ 0x32
 8006d12:	8843      	ldrh	r3, [r0, #2]
 8006d14:	6842      	ldr	r2, [r0, #4]
 8006d16:	8801      	ldrh	r1, [r0, #0]
 8006d18:	9400      	str	r4, [sp, #0]
 8006d1a:	4802      	ldr	r0, [pc, #8]	@ (8006d24 <i2c_master_write_packet_wait+0x18>)
 8006d1c:	f004 fcc6 	bl	800b6ac <HAL_I2C_Master_Transmit>
    return (enum status_code)res;
}
 8006d20:	b002      	add	sp, #8
 8006d22:	bd10      	pop	{r4, pc}
 8006d24:	200017ac 	.word	0x200017ac

08006d28 <i2c_master_write_packet_wait_no_stop>:

enum status_code i2c_master_write_packet_wait_no_stop(struct i2c_master_packet *const packet)
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	2432      	movs	r4, #50	@ 0x32
 8006d2e:	8843      	ldrh	r3, [r0, #2]
 8006d30:	6842      	ldr	r2, [r0, #4]
 8006d32:	8801      	ldrh	r1, [r0, #0]
 8006d34:	9400      	str	r4, [sp, #0]
 8006d36:	4802      	ldr	r0, [pc, #8]	@ (8006d40 <i2c_master_write_packet_wait_no_stop+0x18>)
 8006d38:	f004 fcb8 	bl	800b6ac <HAL_I2C_Master_Transmit>
 8006d3c:	b002      	add	sp, #8
 8006d3e:	bd10      	pop	{r4, pc}
 8006d40:	200017ac 	.word	0x200017ac

08006d44 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d44:	4b11      	ldr	r3, [pc, #68]	@ (8006d8c <HAL_MspInit+0x48>)
{
 8006d46:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d48:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8006d4a:	f040 0001 	orr.w	r0, r0, #1
 8006d4e:	6618      	str	r0, [r3, #96]	@ 0x60
 8006d50:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
{
 8006d52:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d54:	f004 0401 	and.w	r4, r4, #1
 8006d58:	9400      	str	r4, [sp, #0]
 8006d5a:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d5c:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8006d5e:	f044 5480 	orr.w	r4, r4, #268435456	@ 0x10000000
 8006d62:	659c      	str	r4, [r3, #88]	@ 0x58
 8006d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d6a:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	210f      	movs	r1, #15
 8006d70:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d74:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006d76:	f003 fdf3 	bl	800a960 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8006d7a:	2105      	movs	r1, #5
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4608      	mov	r0, r1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d80:	b002      	add	sp, #8
 8006d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8006d86:	f003 bdeb 	b.w	800a960 <HAL_NVIC_SetPriority>
 8006d8a:	bf00      	nop
 8006d8c:	40021000 	.word	0x40021000

08006d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006d90:	b530      	push	{r4, r5, lr}
 8006d92:	4604      	mov	r4, r0
 8006d94:	b09b      	sub	sp, #108	@ 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d96:	225c      	movs	r2, #92	@ 0x5c
 8006d98:	2100      	movs	r1, #0
 8006d9a:	a802      	add	r0, sp, #8
 8006d9c:	f00a f98a 	bl	80110b4 <memset>
  if(hadc->Instance==ADC1)
 8006da0:	4b2b      	ldr	r3, [pc, #172]	@ (8006e50 <HAL_ADC_MspInit+0xc0>)
 8006da2:	6822      	ldr	r2, [r4, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d001      	beq.n	8006dac <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006da8:	b01b      	add	sp, #108	@ 0x6c
 8006daa:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006dac:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8006e30 <HAL_ADC_MspInit+0xa0>
 8006db0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006db4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8006e38 <HAL_ADC_MspInit+0xa8>
 8006db8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006dbc:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8006e40 <HAL_ADC_MspInit+0xb0>
 8006dc0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006dc4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8006e48 <HAL_ADC_MspInit+0xb8>
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8006dc8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006dcc:	a802      	add	r0, sp, #8
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006dce:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8006dd2:	9316      	str	r3, [sp, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006dd4:	f005 fecc 	bl	800cb70 <HAL_RCCEx_PeriphCLKConfig>
 8006dd8:	bb18      	cbnz	r0, 8006e22 <HAL_ADC_MspInit+0x92>
    __HAL_RCC_ADC_CLK_ENABLE();
 8006dda:	4a1e      	ldr	r2, [pc, #120]	@ (8006e54 <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Instance = DMA1_Channel1;
 8006ddc:	4d1e      	ldr	r5, [pc, #120]	@ (8006e58 <HAL_ADC_MspInit+0xc8>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8006dde:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8006de0:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8006de4:	64d1      	str	r1, [r2, #76]	@ 0x4c
 8006de6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
    hdma_adc1.Instance = DMA1_Channel1;
 8006de8:	491c      	ldr	r1, [pc, #112]	@ (8006e5c <HAL_ADC_MspInit+0xcc>)
 8006dea:	6029      	str	r1, [r5, #0]
    __HAL_RCC_ADC_CLK_ENABLE();
 8006dec:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006df0:	9201      	str	r2, [sp, #4]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC_CLK_ENABLE();
 8006df6:	9a01      	ldr	r2, [sp, #4]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8006df8:	622b      	str	r3, [r5, #32]
 8006dfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006dfe:	e9c5 3103 	strd	r3, r1, [r5, #12]
 8006e02:	616a      	str	r2, [r5, #20]
 8006e04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e08:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006e0a:	4628      	mov	r0, r5
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8006e0c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8006e10:	e9c5 1206 	strd	r1, r2, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006e14:	f003 fef0 	bl	800abf8 <HAL_DMA_Init>
 8006e18:	b930      	cbnz	r0, 8006e28 <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006e1a:	64e5      	str	r5, [r4, #76]	@ 0x4c
 8006e1c:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8006e1e:	b01b      	add	sp, #108	@ 0x6c
 8006e20:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8006e22:	f7ff fc71 	bl	8006708 <Error_Handler>
 8006e26:	e7d8      	b.n	8006dda <HAL_ADC_MspInit+0x4a>
      Error_Handler();
 8006e28:	f7ff fc6e 	bl	8006708 <Error_Handler>
 8006e2c:	e7f5      	b.n	8006e1a <HAL_ADC_MspInit+0x8a>
 8006e2e:	bf00      	nop
 8006e30:	00004000 	.word	0x00004000
 8006e34:	00000003 	.word	0x00000003
 8006e38:	00000001 	.word	0x00000001
 8006e3c:	00000008 	.word	0x00000008
 8006e40:	00000007 	.word	0x00000007
 8006e44:	00000002 	.word	0x00000002
 8006e48:	00000002 	.word	0x00000002
 8006e4c:	01000000 	.word	0x01000000
 8006e50:	50040000 	.word	0x50040000
 8006e54:	40021000 	.word	0x40021000
 8006e58:	20001878 	.word	0x20001878
 8006e5c:	40020008 	.word	0x40020008

08006e60 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8006e60:	4b09      	ldr	r3, [pc, #36]	@ (8006e88 <HAL_CRC_MspInit+0x28>)
 8006e62:	6802      	ldr	r2, [r0, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d000      	beq.n	8006e6a <HAL_CRC_MspInit+0xa>
 8006e68:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006e6a:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
{
 8006e6e:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8006e70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e76:	649a      	str	r2, [r3, #72]	@ 0x48
 8006e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8006e82:	b002      	add	sp, #8
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	40023000 	.word	0x40023000

08006e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e8e:	4604      	mov	r4, r0
 8006e90:	b0a5      	sub	sp, #148	@ 0x94
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e92:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e94:	225c      	movs	r2, #92	@ 0x5c
 8006e96:	a80d      	add	r0, sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e98:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8006e9c:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
 8006ea0:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006ea2:	f00a f907 	bl	80110b4 <memset>
  if(hi2c->Instance==I2C1)
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	4a5a      	ldr	r2, [pc, #360]	@ (8007014 <HAL_I2C_MspInit+0x188>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d007      	beq.n	8006ebe <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8006eae:	4a5a      	ldr	r2, [pc, #360]	@ (8007018 <HAL_I2C_MspInit+0x18c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d034      	beq.n	8006f1e <HAL_I2C_MspInit+0x92>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 8006eb4:	4a59      	ldr	r2, [pc, #356]	@ (800701c <HAL_I2C_MspInit+0x190>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d05f      	beq.n	8006f7a <HAL_I2C_MspInit+0xee>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006eba:	b025      	add	sp, #148	@ 0x94
 8006ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006ebe:	2240      	movs	r2, #64	@ 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8006ec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ec4:	a80d      	add	r0, sp, #52	@ 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006ec6:	920d      	str	r2, [sp, #52]	@ 0x34
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8006ec8:	9319      	str	r3, [sp, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006eca:	f005 fe51 	bl	800cb70 <HAL_RCCEx_PeriphCLKConfig>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	f040 8096 	bne.w	8007000 <HAL_I2C_MspInit+0x174>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ed4:	4c52      	ldr	r4, [pc, #328]	@ (8007020 <HAL_I2C_MspInit+0x194>)
 8006ed6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006ed8:	f043 0301 	orr.w	r3, r3, #1
 8006edc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8006ede:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006ee6:	2304      	movs	r3, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ee8:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006eea:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006eec:	2201      	movs	r2, #1
 8006eee:	2303      	movs	r3, #3
 8006ef0:	f44f 66c0 	mov.w	r6, #1536	@ 0x600
 8006ef4:	2712      	movs	r7, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ef6:	a908      	add	r1, sp, #32
 8006ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006efc:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8006f00:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f04:	f004 f934 	bl	800b170 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006f08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f0e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006f10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f16:	9302      	str	r3, [sp, #8]
 8006f18:	9b02      	ldr	r3, [sp, #8]
}
 8006f1a:	b025      	add	sp, #148	@ 0x94
 8006f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006f1e:	2280      	movs	r2, #128	@ 0x80
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8006f20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f24:	a80d      	add	r0, sp, #52	@ 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006f26:	920d      	str	r2, [sp, #52]	@ 0x34
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8006f28:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f2a:	f005 fe21 	bl	800cb70 <HAL_RCCEx_PeriphCLKConfig>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d169      	bne.n	8007006 <HAL_I2C_MspInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f32:	4c3b      	ldr	r4, [pc, #236]	@ (8007020 <HAL_I2C_MspInit+0x194>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f34:	483b      	ldr	r0, [pc, #236]	@ (8007024 <HAL_I2C_MspInit+0x198>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f36:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006f38:	f043 0302 	orr.w	r3, r3, #2
 8006f3c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8006f3e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8006f46:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8006f4a:	2312      	movs	r3, #18
 8006f4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006f50:	2201      	movs	r2, #1
 8006f52:	2303      	movs	r3, #3
 8006f54:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f58:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006f5a:	2304      	movs	r3, #4
 8006f5c:	930c      	str	r3, [sp, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f5e:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f60:	f004 f906 	bl	800b170 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006f64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006f6a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006f6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f72:	9304      	str	r3, [sp, #16]
 8006f74:	9b04      	ldr	r3, [sp, #16]
}
 8006f76:	b025      	add	sp, #148	@ 0x94
 8006f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8006f7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8006f7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f82:	a80d      	add	r0, sp, #52	@ 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8006f84:	920d      	str	r2, [sp, #52]	@ 0x34
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8006f86:	931b      	str	r3, [sp, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f88:	f005 fdf2 	bl	800cb70 <HAL_RCCEx_PeriphCLKConfig>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d13d      	bne.n	800700c <HAL_I2C_MspInit+0x180>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f90:	4c23      	ldr	r4, [pc, #140]	@ (8007020 <HAL_I2C_MspInit+0x194>)
 8006f92:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006f94:	f043 0301 	orr.w	r3, r3, #1
 8006f98:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8006f9a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	9305      	str	r3, [sp, #20]
 8006fa2:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fa4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006fa6:	f043 0302 	orr.w	r3, r3, #2
 8006faa:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8006fac:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006fb4:	2504      	movs	r5, #4
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006fb6:	2280      	movs	r2, #128	@ 0x80
 8006fb8:	2601      	movs	r6, #1
 8006fba:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fbc:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006fbe:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006fc4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fc8:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fcc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006fce:	950c      	str	r5, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fd0:	f004 f8ce 	bl	800b170 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006fd4:	2210      	movs	r2, #16
 8006fd6:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fd8:	4812      	ldr	r0, [pc, #72]	@ (8007024 <HAL_I2C_MspInit+0x198>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006fda:	950c      	str	r5, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fdc:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006fde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fe2:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fe6:	f004 f8c3 	bl	800b170 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006fea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006fec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ff0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006ff2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ff4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ff8:	9307      	str	r3, [sp, #28]
 8006ffa:	9b07      	ldr	r3, [sp, #28]
}
 8006ffc:	b025      	add	sp, #148	@ 0x94
 8006ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8007000:	f7ff fb82 	bl	8006708 <Error_Handler>
 8007004:	e766      	b.n	8006ed4 <HAL_I2C_MspInit+0x48>
      Error_Handler();
 8007006:	f7ff fb7f 	bl	8006708 <Error_Handler>
 800700a:	e792      	b.n	8006f32 <HAL_I2C_MspInit+0xa6>
      Error_Handler();
 800700c:	f7ff fb7c 	bl	8006708 <Error_Handler>
 8007010:	e7be      	b.n	8006f90 <HAL_I2C_MspInit+0x104>
 8007012:	bf00      	nop
 8007014:	40005400 	.word	0x40005400
 8007018:	40005800 	.word	0x40005800
 800701c:	40005c00 	.word	0x40005c00
 8007020:	40021000 	.word	0x40021000
 8007024:	48000400 	.word	0x48000400

08007028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007028:	b510      	push	{r4, lr}
 800702a:	4604      	mov	r4, r0
 800702c:	b0a0      	sub	sp, #128	@ 0x80
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800702e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007030:	225c      	movs	r2, #92	@ 0x5c
 8007032:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007034:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8007038:	e9cd 1106 	strd	r1, r1, [sp, #24]
 800703c:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800703e:	f00a f839 	bl	80110b4 <memset>
  if(huart->Instance==USART1)
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	4a3a      	ldr	r2, [pc, #232]	@ (8007130 <HAL_UART_MspInit+0x108>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800704a:	4a3a      	ldr	r2, [pc, #232]	@ (8007134 <HAL_UART_MspInit+0x10c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d039      	beq.n	80070c4 <HAL_UART_MspInit+0x9c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007050:	b020      	add	sp, #128	@ 0x80
 8007052:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007054:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007056:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007058:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800705a:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800705c:	f005 fd88 	bl	800cb70 <HAL_RCCEx_PeriphCLKConfig>
 8007060:	2800      	cmp	r0, #0
 8007062:	d15f      	bne.n	8007124 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007064:	4b34      	ldr	r3, [pc, #208]	@ (8007138 <HAL_UART_MspInit+0x110>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007066:	4835      	ldr	r0, [pc, #212]	@ (800713c <HAL_UART_MspInit+0x114>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8007068:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800706a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800706e:	661a      	str	r2, [r3, #96]	@ 0x60
 8007070:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007072:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8007076:	9200      	str	r2, [sp, #0]
 8007078:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800707a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800707c:	f042 0202 	orr.w	r2, r2, #2
 8007080:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800708a:	2240      	movs	r2, #64	@ 0x40
 800708c:	2302      	movs	r3, #2
 800708e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007092:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007094:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007096:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007098:	2407      	movs	r4, #7
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800709a:	2302      	movs	r3, #2
 800709c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80070a0:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070a2:	f004 f865 	bl	800b170 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070a6:	4825      	ldr	r0, [pc, #148]	@ (800713c <HAL_UART_MspInit+0x114>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80070a8:	2280      	movs	r2, #128	@ 0x80
 80070aa:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070ac:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = SIM_UART_RX_Pin;
 80070ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070b2:	2201      	movs	r2, #1
 80070b4:	2302      	movs	r3, #2
 80070b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80070ba:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(SIM_UART_RX_GPIO_Port, &GPIO_InitStruct);
 80070bc:	f004 f858 	bl	800b170 <HAL_GPIO_Init>
}
 80070c0:	b020      	add	sp, #128	@ 0x80
 80070c2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80070c4:	2202      	movs	r2, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80070c6:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80070c8:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80070ca:	9209      	str	r2, [sp, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80070cc:	9312      	str	r3, [sp, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80070ce:	f005 fd4f 	bl	800cb70 <HAL_RCCEx_PeriphCLKConfig>
 80070d2:	bb50      	cbnz	r0, 800712a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80070d4:	4b18      	ldr	r3, [pc, #96]	@ (8007138 <HAL_UART_MspInit+0x110>)
 80070d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80070d8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80070dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80070de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80070e0:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80070e4:	9202      	str	r2, [sp, #8]
 80070e6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	64da      	str	r2, [r3, #76]	@ 0x4c
 80070f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin;
 80070f8:	2204      	movs	r2, #4
 80070fa:	2302      	movs	r3, #2
 80070fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(SIM_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8007100:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin;
 8007102:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007104:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(SIM_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8007106:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin;
 800710a:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800710c:	2407      	movs	r4, #7
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin;
 800710e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007112:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(SIM_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8007114:	f004 f82c 	bl	800b170 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIM_UART_RX_Pin;
 8007118:	2208      	movs	r2, #8
 800711a:	2302      	movs	r3, #2
    HAL_GPIO_Init(SIM_UART_RX_GPIO_Port, &GPIO_InitStruct);
 800711c:	a904      	add	r1, sp, #16
 800711e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007122:	e7c4      	b.n	80070ae <HAL_UART_MspInit+0x86>
      Error_Handler();
 8007124:	f7ff faf0 	bl	8006708 <Error_Handler>
 8007128:	e79c      	b.n	8007064 <HAL_UART_MspInit+0x3c>
      Error_Handler();
 800712a:	f7ff faed 	bl	8006708 <Error_Handler>
 800712e:	e7d1      	b.n	80070d4 <HAL_UART_MspInit+0xac>
 8007130:	40013800 	.word	0x40013800
 8007134:	40004400 	.word	0x40004400
 8007138:	40021000 	.word	0x40021000
 800713c:	48000400 	.word	0x48000400

08007140 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8007140:	4b23      	ldr	r3, [pc, #140]	@ (80071d0 <HAL_InitTick+0x90>)
{
 8007142:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM7_CLK_ENABLE();
 8007144:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007146:	f042 0220 	orr.w	r2, r2, #32
 800714a:	659a      	str	r2, [r3, #88]	@ 0x58
 800714c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
{
 800714e:	b088      	sub	sp, #32
  __HAL_RCC_TIM7_CLK_ENABLE();
 8007150:	f003 0320 	and.w	r3, r3, #32
 8007154:	9302      	str	r3, [sp, #8]
{
 8007156:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007158:	a901      	add	r1, sp, #4
 800715a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 800715c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800715e:	f005 fc57 	bl	800ca10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8007162:	9b06      	ldr	r3, [sp, #24]
 8007164:	b9d3      	cbnz	r3, 800719c <HAL_InitTick+0x5c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007166:	f005 fc2f 	bl	800c9c8 <HAL_RCC_GetPCLK1Freq>
 800716a:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800716c:	4a19      	ldr	r2, [pc, #100]	@ (80071d4 <HAL_InitTick+0x94>)

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800716e:	4c1a      	ldr	r4, [pc, #104]	@ (80071d8 <HAL_InitTick+0x98>)
 8007170:	491a      	ldr	r1, [pc, #104]	@ (80071dc <HAL_InitTick+0x9c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007172:	fba2 2303 	umull	r2, r3, r2, r3
 8007176:	0c9b      	lsrs	r3, r3, #18
 8007178:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
 800717a:	2200      	movs	r2, #0
  htim7.Init.Prescaler = uwPrescalerValue;
 800717c:	e9c4 1300 	strd	r1, r3, [r4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim7);
 8007180:	4620      	mov	r0, r4
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8007182:	f240 33e7 	movw	r3, #999	@ 0x3e7
  htim7.Init.ClockDivision = 0;
 8007186:	6122      	str	r2, [r4, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007188:	60a2      	str	r2, [r4, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800718a:	61a2      	str	r2, [r4, #24]
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800718c:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim7);
 800718e:	f005 ff8b 	bl	800d0a8 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8007192:	4606      	mov	r6, r0
 8007194:	b130      	cbz	r0, 80071a4 <HAL_InitTick+0x64>
    }
  }

 /* Return function status */
  return status;
}
 8007196:	4630      	mov	r0, r6
 8007198:	b008      	add	sp, #32
 800719a:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800719c:	f005 fc14 	bl	800c9c8 <HAL_RCC_GetPCLK1Freq>
 80071a0:	0043      	lsls	r3, r0, #1
 80071a2:	e7e3      	b.n	800716c <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim7);
 80071a4:	4620      	mov	r0, r4
 80071a6:	f005 fe4b 	bl	800ce40 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80071aa:	4606      	mov	r6, r0
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d1f2      	bne.n	8007196 <HAL_InitTick+0x56>
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80071b0:	2037      	movs	r0, #55	@ 0x37
 80071b2:	f003 fc11 	bl	800a9d8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80071b6:	2d0f      	cmp	r5, #15
 80071b8:	d901      	bls.n	80071be <HAL_InitTick+0x7e>
        status = HAL_ERROR;
 80071ba:	2601      	movs	r6, #1
 80071bc:	e7eb      	b.n	8007196 <HAL_InitTick+0x56>
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80071be:	4632      	mov	r2, r6
 80071c0:	4629      	mov	r1, r5
 80071c2:	2037      	movs	r0, #55	@ 0x37
 80071c4:	f003 fbcc 	bl	800a960 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80071c8:	4b05      	ldr	r3, [pc, #20]	@ (80071e0 <HAL_InitTick+0xa0>)
 80071ca:	601d      	str	r5, [r3, #0]
 80071cc:	e7e3      	b.n	8007196 <HAL_InitTick+0x56>
 80071ce:	bf00      	nop
 80071d0:	40021000 	.word	0x40021000
 80071d4:	431bde83 	.word	0x431bde83
 80071d8:	20001938 	.word	0x20001938
 80071dc:	40001400 	.word	0x40001400
 80071e0:	20000014 	.word	0x20000014

080071e4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80071e4:	e7fe      	b.n	80071e4 <NMI_Handler>
 80071e6:	bf00      	nop

080071e8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80071e8:	e7fe      	b.n	80071e8 <HardFault_Handler>
 80071ea:	bf00      	nop

080071ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80071ec:	e7fe      	b.n	80071ec <MemManage_Handler>
 80071ee:	bf00      	nop

080071f0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80071f0:	e7fe      	b.n	80071f0 <BusFault_Handler>
 80071f2:	bf00      	nop

080071f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80071f4:	e7fe      	b.n	80071f4 <UsageFault_Handler>
 80071f6:	bf00      	nop

080071f8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop

080071fc <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80071fc:	4801      	ldr	r0, [pc, #4]	@ (8007204 <DMA1_Channel1_IRQHandler+0x8>)
 80071fe:	f003 bdf5 	b.w	800adec <HAL_DMA_IRQHandler>
 8007202:	bf00      	nop
 8007204:	20001878 	.word	0x20001878

08007208 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007208:	4801      	ldr	r0, [pc, #4]	@ (8007210 <USART1_IRQHandler+0x8>)
 800720a:	f006 b849 	b.w	800d2a0 <HAL_UART_IRQHandler>
 800720e:	bf00      	nop
 8007210:	200016d4 	.word	0x200016d4

08007214 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007214:	4801      	ldr	r0, [pc, #4]	@ (800721c <USART2_IRQHandler+0x8>)
 8007216:	f006 b843 	b.w	800d2a0 <HAL_UART_IRQHandler>
 800721a:	bf00      	nop
 800721c:	20001650 	.word	0x20001650

08007220 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007220:	4801      	ldr	r0, [pc, #4]	@ (8007228 <TIM7_IRQHandler+0x8>)
 8007222:	f005 be41 	b.w	800cea8 <HAL_TIM_IRQHandler>
 8007226:	bf00      	nop
 8007228:	20001938 	.word	0x20001938

0800722c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800722c:	2001      	movs	r0, #1
 800722e:	4770      	bx	lr

08007230 <_kill>:

int _kill(int pid, int sig)
{
 8007230:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007232:	f00a f83f 	bl	80112b4 <__errno>
 8007236:	2316      	movs	r3, #22
 8007238:	6003      	str	r3, [r0, #0]
  return -1;
}
 800723a:	f04f 30ff 	mov.w	r0, #4294967295
 800723e:	bd08      	pop	{r3, pc}

08007240 <_exit>:

void _exit (int status)
{
 8007240:	b508      	push	{r3, lr}
  errno = EINVAL;
 8007242:	f00a f837 	bl	80112b4 <__errno>
 8007246:	2316      	movs	r3, #22
 8007248:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800724a:	e7fe      	b.n	800724a <_exit+0xa>

0800724c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800724c:	f04f 30ff 	mov.w	r0, #4294967295
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop

08007254 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8007254:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007258:	604b      	str	r3, [r1, #4]
  return 0;
}
 800725a:	2000      	movs	r0, #0
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop

08007260 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8007260:	2001      	movs	r0, #1
 8007262:	4770      	bx	lr

08007264 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8007264:	2000      	movs	r0, #0
 8007266:	4770      	bx	lr

08007268 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007268:	490c      	ldr	r1, [pc, #48]	@ (800729c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800726a:	4a0d      	ldr	r2, [pc, #52]	@ (80072a0 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800726c:	680b      	ldr	r3, [r1, #0]
{
 800726e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007270:	4c0c      	ldr	r4, [pc, #48]	@ (80072a4 <_sbrk+0x3c>)
 8007272:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8007274:	b12b      	cbz	r3, 8007282 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007276:	4418      	add	r0, r3
 8007278:	4290      	cmp	r0, r2
 800727a:	d807      	bhi.n	800728c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800727c:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800727e:	4618      	mov	r0, r3
 8007280:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8007282:	4b09      	ldr	r3, [pc, #36]	@ (80072a8 <_sbrk+0x40>)
 8007284:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8007286:	4418      	add	r0, r3
 8007288:	4290      	cmp	r0, r2
 800728a:	d9f7      	bls.n	800727c <_sbrk+0x14>
    errno = ENOMEM;
 800728c:	f00a f812 	bl	80112b4 <__errno>
 8007290:	230c      	movs	r3, #12
 8007292:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8007294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007298:	4618      	mov	r0, r3
 800729a:	bd10      	pop	{r4, pc}
 800729c:	20001984 	.word	0x20001984
 80072a0:	20010000 	.word	0x20010000
 80072a4:	00000400 	.word	0x00000400
 80072a8:	20005e98 	.word	0x20005e98

080072ac <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80072ac:	4a03      	ldr	r2, [pc, #12]	@ (80072bc <SystemInit+0x10>)
 80072ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80072b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80072b6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80072ba:	4770      	bx	lr
 80072bc:	e000ed00 	.word	0xe000ed00

080072c0 <SensorsTask>:
}

// ******************************************************************************************************

void SensorsTask(void const *argument)
{
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	ed2d 8b02 	vpush	{d8}
	uint8_t shtc3_values[6];

	printf("Sensors task created\r\n\r\n\r\n");
 80072c8:	48ae      	ldr	r0, [pc, #696]	@ (8007584 <SensorsTask+0x2c4>)
 80072ca:	f8df 92ec 	ldr.w	r9, [pc, #748]	@ 80075b8 <SensorsTask+0x2f8>
 80072ce:	4cae      	ldr	r4, [pc, #696]	@ (8007588 <SensorsTask+0x2c8>)
 80072d0:	f8df 82e8 	ldr.w	r8, [pc, #744]	@ 80075bc <SensorsTask+0x2fc>
 80072d4:	4ead      	ldr	r6, [pc, #692]	@ (800758c <SensorsTask+0x2cc>)
 80072d6:	f8df a2e8 	ldr.w	sl, [pc, #744]	@ 80075c0 <SensorsTask+0x300>
	while(1)
	{
		vTaskSuspend(NULL);		// zatrzymaj taki i czekaj na komende start
		LED2_ON();				// mrugniecie czerwona
 80072da:	f8df b2e8 	ldr.w	fp, [pc, #744]	@ 80075c4 <SensorsTask+0x304>
{
 80072de:	b083      	sub	sp, #12
	printf("Sensors task created\r\n\r\n\r\n");
 80072e0:	f009 fd88 	bl	8010df4 <puts>
 80072e4:	e01a      	b.n	800731c <SensorsTask+0x5c>
		  if(TMP117.temp.use_meas) {
			  TMP117.temp.value = TMP117_get_temp();
		//    			  printf("Temperatura TMP117: %.2f\r\n", TMP117.temp.value);
		  }
		}
		if(BME280.present && BME280.sensor_use){
 80072e6:	7823      	ldrb	r3, [r4, #0]
 80072e8:	f003 0303 	and.w	r3, r3, #3
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d062      	beq.n	80073b6 <SensorsTask+0xf6>
		  if(BME280.hum.use_meas) {
			  BME280.hum.value = BME280_get_hum();
		//    		      printf("Wilgotnosc BME280: %.2f\r\n", BME280.hum.value);
		  }
		}
		if(SHT3.present && SHT3.sensor_use){
 80072f0:	f898 3000 	ldrb.w	r3, [r8]
 80072f4:	f003 0303 	and.w	r3, r3, #3
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d073      	beq.n	80073e4 <SensorsTask+0x124>
		  if(SHT3.hum.use_meas) {
			  SHT3.hum.value = SHTC3_get_hum(shtc3_values);
		//    			  printf("Wilgotnosc SHT3: %.2f\r\n", SHT3.hum.value);
		  }
		}
		if(MS8607.present && MS8607.sensor_use){
 80072fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007300:	f003 0303 	and.w	r3, r3, #3
 8007304:	2b03      	cmp	r3, #3
 8007306:	f000 8088 	beq.w	800741a <SensorsTask+0x15a>
		  if(MS8607.hum.use_meas) {
			  MS8607.hum.value = MS8607_get_hum();
		//    			  printf("Wilgotnosc MS8607: %.2f\r\n", MS8607.hum.value);
		  }
		}
		if(DPS368.present && DPS368.sensor_use){
 800730a:	7833      	ldrb	r3, [r6, #0]
 800730c:	f003 0303 	and.w	r3, r3, #3
 8007310:	2b03      	cmp	r3, #3
 8007312:	f000 809d 	beq.w	8007450 <SensorsTask+0x190>
			  osDelay( calcBusyTime(dps368_ovr_press) + 10);			// zaczekaj na koniec przetwarzania
   			  DPS368.press.value = DPS368_get_press(dps_scaled_temp);	// pobierz cisnienie uzywając temperatury
//    		  printf("Cisnienie DPS368: %.2f\r\n", DPS368.press.value);
		  }
		}
		sensors_data_ready = 1;
 8007316:	4a9e      	ldr	r2, [pc, #632]	@ (8007590 <SensorsTask+0x2d0>)
 8007318:	2301      	movs	r3, #1
 800731a:	7013      	strb	r3, [r2, #0]
		vTaskSuspend(NULL);		// zatrzymaj taki i czekaj na komende start
 800731c:	2000      	movs	r0, #0
 800731e:	f007 fa4f 	bl	800e7c0 <vTaskSuspend>
		LED2_ON();				// mrugniecie czerwona
 8007322:	2200      	movs	r2, #0
 8007324:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007328:	4658      	mov	r0, fp
 800732a:	f004 f821 	bl	800b370 <HAL_GPIO_WritePin>
		  if(TMP117.sensor_use && TMP117.temp.use_meas) {
 800732e:	f899 3000 	ldrb.w	r3, [r9]
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	2b03      	cmp	r3, #3
 8007338:	f000 80f4 	beq.w	8007524 <SensorsTask+0x264>
		uint32_t meas_time = 0;
 800733c:	2500      	movs	r5, #0
		  if(BME280.sensor_use && (BME280.temp.use_meas || BME280.press.use_meas || BME280.hum.use_meas) ) {
 800733e:	7823      	ldrb	r3, [r4, #0]
 8007340:	f003 0303 	and.w	r3, r3, #3
 8007344:	2b03      	cmp	r3, #3
 8007346:	f000 80e0 	beq.w	800750a <SensorsTask+0x24a>
		  if(SHT3.sensor_use && (SHT3.temp.use_meas || SHT3.hum.use_meas)) {
 800734a:	f898 3000 	ldrb.w	r3, [r8]
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	2b03      	cmp	r3, #3
 8007354:	f000 80c9 	beq.w	80074ea <SensorsTask+0x22a>
		  if(DPS368.sensor_use && (DPS368.temp.use_meas || DPS368.press.use_meas)) {
 8007358:	7833      	ldrb	r3, [r6, #0]
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	2b03      	cmp	r3, #3
 8007360:	f000 809a 	beq.w	8007498 <SensorsTask+0x1d8>
		uint8_t dps368_press = 0;
 8007364:	2700      	movs	r7, #0
		if(config.disp_type == 1) {
 8007366:	4b8b      	ldr	r3, [pc, #556]	@ (8007594 <SensorsTask+0x2d4>)
 8007368:	79db      	ldrb	r3, [r3, #7]
 800736a:	f003 030e 	and.w	r3, r3, #14
 800736e:	2b02      	cmp	r3, #2
 8007370:	f000 80ad 	beq.w	80074ce <SensorsTask+0x20e>
		osDelay(10);
 8007374:	200a      	movs	r0, #10
 8007376:	f006 fd0d 	bl	800dd94 <osDelay>
		LED2_OFF();						// mrugniecie czerwona
 800737a:	2201      	movs	r2, #1
 800737c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007380:	4658      	mov	r0, fp
 8007382:	f003 fff5 	bl	800b370 <HAL_GPIO_WritePin>
		osDelay(meas_time);				// odczekaj czas potrzebny na przetworzenie (maksymalny wymagany)
 8007386:	4628      	mov	r0, r5
 8007388:	f006 fd04 	bl	800dd94 <osDelay>
		if(TMP117.present && TMP117.sensor_use){
 800738c:	f899 3000 	ldrb.w	r3, [r9]
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	2b03      	cmp	r3, #3
 8007396:	d1a6      	bne.n	80072e6 <SensorsTask+0x26>
		  if(TMP117.temp.use_meas) {
 8007398:	f899 3001 	ldrb.w	r3, [r9, #1]
 800739c:	07dd      	lsls	r5, r3, #31
 800739e:	d5a2      	bpl.n	80072e6 <SensorsTask+0x26>
			  TMP117.temp.value = TMP117_get_temp();
 80073a0:	f002 f9c2 	bl	8009728 <TMP117_get_temp>
 80073a4:	ee10 3a10 	vmov	r3, s0
 80073a8:	f8c9 3002 	str.w	r3, [r9, #2]
		if(BME280.present && BME280.sensor_use){
 80073ac:	7823      	ldrb	r3, [r4, #0]
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d19c      	bne.n	80072f0 <SensorsTask+0x30>
		  if(BME280.temp.use_meas) {
 80073b6:	7863      	ldrb	r3, [r4, #1]
 80073b8:	07d8      	lsls	r0, r3, #31
 80073ba:	f100 80d4 	bmi.w	8007566 <SensorsTask+0x2a6>
		  if(BME280.press.use_meas) {
 80073be:	7ce3      	ldrb	r3, [r4, #19]
 80073c0:	07d9      	lsls	r1, r3, #31
 80073c2:	f100 80cb 	bmi.w	800755c <SensorsTask+0x29c>
		  if(BME280.hum.use_meas) {
 80073c6:	7aa3      	ldrb	r3, [r4, #10]
 80073c8:	07da      	lsls	r2, r3, #31
 80073ca:	d591      	bpl.n	80072f0 <SensorsTask+0x30>
			  BME280.hum.value = BME280_get_hum();
 80073cc:	f002 fc62 	bl	8009c94 <BME280_get_hum>
 80073d0:	ee10 3a10 	vmov	r3, s0
 80073d4:	f8c4 300b 	str.w	r3, [r4, #11]
		if(SHT3.present && SHT3.sensor_use){
 80073d8:	f898 3000 	ldrb.w	r3, [r8]
 80073dc:	f003 0303 	and.w	r3, r3, #3
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d18b      	bne.n	80072fc <SensorsTask+0x3c>
		  SHTC3_read_values(shtc3_values);
 80073e4:	4668      	mov	r0, sp
 80073e6:	f002 fadf 	bl	80099a8 <SHTC3_read_values>
		  if(SHT3.temp.use_meas) {
 80073ea:	f898 3001 	ldrb.w	r3, [r8, #1]
 80073ee:	07db      	lsls	r3, r3, #31
 80073f0:	f100 80c0 	bmi.w	8007574 <SensorsTask+0x2b4>
		  if(SHT3.hum.use_meas) {
 80073f4:	f898 300a 	ldrb.w	r3, [r8, #10]
 80073f8:	07dd      	lsls	r5, r3, #31
 80073fa:	f57f af7f 	bpl.w	80072fc <SensorsTask+0x3c>
			  SHT3.hum.value = SHTC3_get_hum(shtc3_values);
 80073fe:	4668      	mov	r0, sp
 8007400:	f002 fb1c 	bl	8009a3c <SHTC3_get_hum>
 8007404:	ee10 3a10 	vmov	r3, s0
 8007408:	f8c8 300b 	str.w	r3, [r8, #11]
		if(MS8607.present && MS8607.sensor_use){
 800740c:	f89a 3000 	ldrb.w	r3, [sl]
 8007410:	f003 0303 	and.w	r3, r3, #3
 8007414:	2b03      	cmp	r3, #3
 8007416:	f47f af78 	bne.w	800730a <SensorsTask+0x4a>
		  if(MS8607.temp.use_meas) {
 800741a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800741e:	07d8      	lsls	r0, r3, #31
 8007420:	f100 808c 	bmi.w	800753c <SensorsTask+0x27c>
		  if(MS8607.press.use_meas) {
 8007424:	f89a 3013 	ldrb.w	r3, [sl, #19]
 8007428:	07d9      	lsls	r1, r3, #31
 800742a:	f100 8092 	bmi.w	8007552 <SensorsTask+0x292>
		  if(MS8607.hum.use_meas) {
 800742e:	f89a 300a 	ldrb.w	r3, [sl, #10]
 8007432:	07da      	lsls	r2, r3, #31
 8007434:	f57f af69 	bpl.w	800730a <SensorsTask+0x4a>
			  MS8607.hum.value = MS8607_get_hum();
 8007438:	f002 fa20 	bl	800987c <MS8607_get_hum>
 800743c:	ee10 3a10 	vmov	r3, s0
 8007440:	f8ca 300b 	str.w	r3, [sl, #11]
		if(DPS368.present && DPS368.sensor_use){
 8007444:	7833      	ldrb	r3, [r6, #0]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b03      	cmp	r3, #3
 800744c:	f47f af63 	bne.w	8007316 <SensorsTask+0x56>
		  float dps_scaled_temp = DPS368_get_scaled_temp();				// odczytaj temperature
 8007450:	f7fe fdf4 	bl	800603c <DPS368_get_scaled_temp>
		  if(DPS368.temp.use_meas) {
 8007454:	7873      	ldrb	r3, [r6, #1]
 8007456:	07db      	lsls	r3, r3, #31
		  float dps_scaled_temp = DPS368_get_scaled_temp();				// odczytaj temperature
 8007458:	eeb0 8a40 	vmov.f32	s16, s0
		  if(DPS368.temp.use_meas) {
 800745c:	d415      	bmi.n	800748a <SensorsTask+0x1ca>
		  if(dps368_press) {											// jak ma byc cisnienie z DPS
 800745e:	2f00      	cmp	r7, #0
 8007460:	f43f af59 	beq.w	8007316 <SensorsTask+0x56>
			  DPS368_start_meas_press(dps368_ovr_press);				// uruchom przetworzenie cisnienia
 8007464:	4d4c      	ldr	r5, [pc, #304]	@ (8007598 <SensorsTask+0x2d8>)
 8007466:	7828      	ldrb	r0, [r5, #0]
 8007468:	f7fe fdca 	bl	8006000 <DPS368_start_meas_press>
			  osDelay( calcBusyTime(dps368_ovr_press) + 10);			// zaczekaj na koniec przetwarzania
 800746c:	7828      	ldrb	r0, [r5, #0]
 800746e:	f7fe fd6f 	bl	8005f50 <calcBusyTime>
 8007472:	300a      	adds	r0, #10
 8007474:	f006 fc8e 	bl	800dd94 <osDelay>
   			  DPS368.press.value = DPS368_get_press(dps_scaled_temp);	// pobierz cisnienie uzywając temperatury
 8007478:	eeb0 0a48 	vmov.f32	s0, s16
 800747c:	f7fe fe10 	bl	80060a0 <DPS368_get_press>
 8007480:	ee10 3a10 	vmov	r3, s0
 8007484:	f8c6 300b 	str.w	r3, [r6, #11]
 8007488:	e745      	b.n	8007316 <SensorsTask+0x56>
			  DPS368.temp.value = DPS368_calc_temp(dps_scaled_temp);
 800748a:	f7fe fda9 	bl	8005fe0 <DPS368_calc_temp>
 800748e:	ee10 3a10 	vmov	r3, s0
 8007492:	f8c6 3002 	str.w	r3, [r6, #2]
 8007496:	e7e2      	b.n	800745e <SensorsTask+0x19e>
 8007498:	7877      	ldrb	r7, [r6, #1]
 800749a:	7ab3      	ldrb	r3, [r6, #10]
 800749c:	431f      	orrs	r7, r3
		  if(DPS368.sensor_use && (DPS368.temp.use_meas || DPS368.press.use_meas)) {
 800749e:	f017 0701 	ands.w	r7, r7, #1
 80074a2:	f43f af60 	beq.w	8007366 <SensorsTask+0xa6>
			  DPS368_start_meas_temp(dps368_ovr_temp);
 80074a6:	4f3d      	ldr	r7, [pc, #244]	@ (800759c <SensorsTask+0x2dc>)
 80074a8:	7838      	ldrb	r0, [r7, #0]
 80074aa:	f7fe fd7b 	bl	8005fa4 <DPS368_start_meas_temp>
			  uint32_t dpstim = calcBusyTime(dps368_ovr_temp);
 80074ae:	7838      	ldrb	r0, [r7, #0]
 80074b0:	f7fe fd4e 	bl	8005f50 <calcBusyTime>
		if(config.disp_type == 1) {
 80074b4:	4b37      	ldr	r3, [pc, #220]	@ (8007594 <SensorsTask+0x2d4>)
			  if(DPS368.press.use_meas) dps368_press = 1;				// z DPS bedzie tez cisnienie
 80074b6:	7ab7      	ldrb	r7, [r6, #10]
		if(config.disp_type == 1) {
 80074b8:	79db      	ldrb	r3, [r3, #7]
 80074ba:	4285      	cmp	r5, r0
 80074bc:	f003 030e 	and.w	r3, r3, #14
 80074c0:	bf38      	it	cc
 80074c2:	4605      	movcc	r5, r0
 80074c4:	2b02      	cmp	r3, #2
			  if(DPS368.press.use_meas) dps368_press = 1;				// z DPS bedzie tez cisnienie
 80074c6:	f007 0701 	and.w	r7, r7, #1
		if(config.disp_type == 1) {
 80074ca:	f47f af53 	bne.w	8007374 <SensorsTask+0xb4>
		  printf("Komenda startu pomiarow wyslana\r\n");
 80074ce:	4834      	ldr	r0, [pc, #208]	@ (80075a0 <SensorsTask+0x2e0>)
 80074d0:	f009 fc90 	bl	8010df4 <puts>
		  if(!meas_cont_mode) printf("Meas count: %u\r\n", meas_count);
 80074d4:	4b33      	ldr	r3, [pc, #204]	@ (80075a4 <SensorsTask+0x2e4>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f47f af4b 	bne.w	8007374 <SensorsTask+0xb4>
 80074de:	4b32      	ldr	r3, [pc, #200]	@ (80075a8 <SensorsTask+0x2e8>)
 80074e0:	4832      	ldr	r0, [pc, #200]	@ (80075ac <SensorsTask+0x2ec>)
 80074e2:	8819      	ldrh	r1, [r3, #0]
 80074e4:	f009 fc1e 	bl	8010d24 <iprintf>
 80074e8:	e744      	b.n	8007374 <SensorsTask+0xb4>
		  if(SHT3.sensor_use && (SHT3.temp.use_meas || SHT3.hum.use_meas)) {
 80074ea:	f898 3001 	ldrb.w	r3, [r8, #1]
 80074ee:	f898 200a 	ldrb.w	r2, [r8, #10]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	07df      	lsls	r7, r3, #31
 80074f6:	f57f af2f 	bpl.w	8007358 <SensorsTask+0x98>
			  SHTC3_start_meas(sht3_mode);
 80074fa:	4b2d      	ldr	r3, [pc, #180]	@ (80075b0 <SensorsTask+0x2f0>)
			  if(meas_time < 100) meas_time = 100;
 80074fc:	2d64      	cmp	r5, #100	@ 0x64
			  SHTC3_start_meas(sht3_mode);
 80074fe:	7818      	ldrb	r0, [r3, #0]
			  if(meas_time < 100) meas_time = 100;
 8007500:	bf38      	it	cc
 8007502:	2564      	movcc	r5, #100	@ 0x64
			  SHTC3_start_meas(sht3_mode);
 8007504:	f002 fa22 	bl	800994c <SHTC3_start_meas>
			  if(meas_time < 100) meas_time = 100;
 8007508:	e726      	b.n	8007358 <SensorsTask+0x98>
		  if(BME280.sensor_use && (BME280.temp.use_meas || BME280.press.use_meas || BME280.hum.use_meas) ) {
 800750a:	7ce2      	ldrb	r2, [r4, #19]
 800750c:	7863      	ldrb	r3, [r4, #1]
 800750e:	4313      	orrs	r3, r2
 8007510:	7aa2      	ldrb	r2, [r4, #10]
 8007512:	4313      	orrs	r3, r2
 8007514:	07db      	lsls	r3, r3, #31
 8007516:	f57f af18 	bpl.w	800734a <SensorsTask+0x8a>
			  BME280_start_meas();
 800751a:	f002 fbe9 	bl	8009cf0 <BME280_start_meas>
			  if(meas_time < 500) meas_time = 500;
 800751e:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8007522:	e712      	b.n	800734a <SensorsTask+0x8a>
		  if(TMP117.sensor_use && TMP117.temp.use_meas) {
 8007524:	f899 5001 	ldrb.w	r5, [r9, #1]
 8007528:	f015 0501 	ands.w	r5, r5, #1
 800752c:	f43f af07 	beq.w	800733e <SensorsTask+0x7e>
			  TMP117_start_meas(tmp117_avr);
 8007530:	4b20      	ldr	r3, [pc, #128]	@ (80075b4 <SensorsTask+0x2f4>)
 8007532:	7818      	ldrb	r0, [r3, #0]
 8007534:	f002 f914 	bl	8009760 <TMP117_start_meas>
			  if(meas_time < 200) meas_time = 200;
 8007538:	25c8      	movs	r5, #200	@ 0xc8
 800753a:	e700      	b.n	800733e <SensorsTask+0x7e>
			  MS8607.temp.value = MS8607_get_temp();
 800753c:	f002 f98a 	bl	8009854 <MS8607_get_temp>
 8007540:	ee10 3a10 	vmov	r3, s0
 8007544:	f8ca 3002 	str.w	r3, [sl, #2]
		  if(MS8607.press.use_meas) {
 8007548:	f89a 3013 	ldrb.w	r3, [sl, #19]
 800754c:	07d9      	lsls	r1, r3, #31
 800754e:	f57f af6e 	bpl.w	800742e <SensorsTask+0x16e>
			  MS8607.press.value = MS8607_get_press();
 8007552:	f002 f989 	bl	8009868 <MS8607_get_press>
 8007556:	ed8a 0a05 	vstr	s0, [sl, #20]
 800755a:	e768      	b.n	800742e <SensorsTask+0x16e>
			  BME280.press.value = BME280_get_press();
 800755c:	f002 fb6c 	bl	8009c38 <BME280_get_press>
 8007560:	ed84 0a05 	vstr	s0, [r4, #20]
 8007564:	e72f      	b.n	80073c6 <SensorsTask+0x106>
			  BME280.temp.value = BME280_get_temp();
 8007566:	f002 fb39 	bl	8009bdc <BME280_get_temp>
 800756a:	ee10 3a10 	vmov	r3, s0
 800756e:	f8c4 3002 	str.w	r3, [r4, #2]
 8007572:	e724      	b.n	80073be <SensorsTask+0xfe>
			  SHT3.temp.value = SHTC3_get_temp(shtc3_values);
 8007574:	4668      	mov	r0, sp
 8007576:	f002 fa2b 	bl	80099d0 <SHTC3_get_temp>
 800757a:	ee10 3a10 	vmov	r3, s0
 800757e:	f8c8 3002 	str.w	r3, [r8, #2]
 8007582:	e737      	b.n	80073f4 <SensorsTask+0x134>
 8007584:	08016994 	.word	0x08016994
 8007588:	20001b60 	.word	0x20001b60
 800758c:	20001b48 	.word	0x20001b48
 8007590:	200019b4 	.word	0x200019b4
 8007594:	200019c0 	.word	0x200019c0
 8007598:	200019b0 	.word	0x200019b0
 800759c:	200019b1 	.word	0x200019b1
 80075a0:	080169b0 	.word	0x080169b0
 80075a4:	200019b6 	.word	0x200019b6
 80075a8:	200019b8 	.word	0x200019b8
 80075ac:	080169d4 	.word	0x080169d4
 80075b0:	200019ac 	.word	0x200019ac
 80075b4:	200019b2 	.word	0x200019b2
 80075b8:	20001bc0 	.word	0x20001bc0
 80075bc:	20001ba8 	.word	0x20001ba8
 80075c0:	20001b84 	.word	0x20001b84
 80075c4:	48000400 	.word	0x48000400

080075c8 <_read>:
void _read(void)  {}
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop

080075cc <getUID>:
{
 80075cc:	b500      	push	{lr}
 80075ce:	b085      	sub	sp, #20
    tmp[0] = HAL_GetUIDw0();
 80075d0:	f002 fcf8 	bl	8009fc4 <HAL_GetUIDw0>
 80075d4:	9001      	str	r0, [sp, #4]
    tmp[1] = HAL_GetUIDw1();
 80075d6:	f002 fcfb 	bl	8009fd0 <HAL_GetUIDw1>
 80075da:	9002      	str	r0, [sp, #8]
    tmp[2] = HAL_GetUIDw2();
 80075dc:	f002 fcfe 	bl	8009fdc <HAL_GetUIDw2>
    for(int i=0; i<12; ++i) hash = (hash * FNV_PRIME_32) ^ *p++;
 80075e0:	4907      	ldr	r1, [pc, #28]	@ (8007600 <getUID+0x34>)
    tmp[2] = HAL_GetUIDw2();
 80075e2:	4603      	mov	r3, r0
    uint32_t hash = FNV_BASIS_32;
 80075e4:	4807      	ldr	r0, [pc, #28]	@ (8007604 <getUID+0x38>)
    tmp[2] = HAL_GetUIDw2();
 80075e6:	9303      	str	r3, [sp, #12]
    uint8_t *p = (uint8_t*)&tmp;
 80075e8:	ab01      	add	r3, sp, #4
    for(int i=0; i<12; ++i) hash = (hash * FNV_PRIME_32) ^ *p++;
 80075ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ee:	fb01 f000 	mul.w	r0, r1, r0
 80075f2:	4050      	eors	r0, r2
 80075f4:	aa04      	add	r2, sp, #16
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d1f7      	bne.n	80075ea <getUID+0x1e>
}
 80075fa:	b005      	add	sp, #20
 80075fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007600:	01000193 	.word	0x01000193
 8007604:	811c9dc5 	.word	0x811c9dc5

08007608 <ReinitTimer>:
	meas_start = seconds;
 8007608:	4a02      	ldr	r2, [pc, #8]	@ (8007614 <ReinitTimer+0xc>)
 800760a:	4b03      	ldr	r3, [pc, #12]	@ (8007618 <ReinitTimer+0x10>)
 800760c:	6812      	ldr	r2, [r2, #0]
 800760e:	601a      	str	r2, [r3, #0]
}
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	200019bc 	.word	0x200019bc
 8007618:	20001990 	.word	0x20001990

0800761c <HAL_SYSTICK_Callback>:
}
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop

08007620 <check_powerOn>:
{
 8007620:	b570      	push	{r4, r5, r6, lr}
	uint32_t timon = HAL_GetTick();
 8007622:	f002 fcb7 	bl	8009f94 <HAL_GetTick>
	  while(Power_SW_READ() == GPIO_PIN_SET)
 8007626:	4e0f      	ldr	r6, [pc, #60]	@ (8007664 <check_powerOn+0x44>)
	uint32_t timon = HAL_GetTick();
 8007628:	4605      	mov	r5, r0
	  while(Power_SW_READ() == GPIO_PIN_SET)
 800762a:	e005      	b.n	8007638 <check_powerOn+0x18>
	    if(HAL_GetTick() - timon > 1000) {    // 1 sec pushing
 800762c:	f002 fcb2 	bl	8009f94 <HAL_GetTick>
 8007630:	1b40      	subs	r0, r0, r5
 8007632:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007636:	d808      	bhi.n	800764a <check_powerOn+0x2a>
	  while(Power_SW_READ() == GPIO_PIN_SET)
 8007638:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800763c:	4630      	mov	r0, r6
 800763e:	f003 fe91 	bl	800b364 <HAL_GPIO_ReadPin>
 8007642:	2801      	cmp	r0, #1
 8007644:	4604      	mov	r4, r0
 8007646:	d0f1      	beq.n	800762c <check_powerOn+0xc>
}
 8007648:	bd70      	pop	{r4, r5, r6, pc}
	    	timon = HAL_GetTick();
 800764a:	f002 fca3 	bl	8009f94 <HAL_GetTick>
	        POWER_ON();    // pull-up power supply
 800764e:	4806      	ldr	r0, [pc, #24]	@ (8007668 <check_powerOn+0x48>)
 8007650:	4622      	mov	r2, r4
 8007652:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007656:	f003 fe8b 	bl	800b370 <HAL_GPIO_WritePin>
}
 800765a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	    	printf("Power ON\r\n");
 800765e:	4803      	ldr	r0, [pc, #12]	@ (800766c <check_powerOn+0x4c>)
 8007660:	f009 bbc8 	b.w	8010df4 <puts>
 8007664:	48000800 	.word	0x48000800
 8007668:	48000400 	.word	0x48000400
 800766c:	080169e8 	.word	0x080169e8

08007670 <check_powerOff>:
{
 8007670:	b538      	push	{r3, r4, r5, lr}
  if(Power_SW_READ()) { //power button pressed
 8007672:	4826      	ldr	r0, [pc, #152]	@ (800770c <check_powerOff+0x9c>)
 8007674:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007678:	f003 fe74 	bl	800b364 <HAL_GPIO_ReadPin>
 800767c:	b160      	cbz	r0, 8007698 <check_powerOff+0x28>
     if(offTim && HAL_GetTick() - offTim > 2000) {    // 2 sec pressed
 800767e:	4c24      	ldr	r4, [pc, #144]	@ (8007710 <check_powerOff+0xa0>)
	 LED2_ON();
 8007680:	4824      	ldr	r0, [pc, #144]	@ (8007714 <check_powerOff+0xa4>)
 8007682:	2200      	movs	r2, #0
 8007684:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007688:	f003 fe72 	bl	800b370 <HAL_GPIO_WritePin>
	 keystate = 1;
 800768c:	4a22      	ldr	r2, [pc, #136]	@ (8007718 <check_powerOff+0xa8>)
     if(offTim && HAL_GetTick() - offTim > 2000) {    // 2 sec pressed
 800768e:	6823      	ldr	r3, [r4, #0]
	 keystate = 1;
 8007690:	2501      	movs	r5, #1
 8007692:	7015      	strb	r5, [r2, #0]
     if(offTim && HAL_GetTick() - offTim > 2000) {    // 2 sec pressed
 8007694:	b99b      	cbnz	r3, 80076be <check_powerOff+0x4e>
}
 8007696:	bd38      	pop	{r3, r4, r5, pc}
	  if(keystate) LED2_OFF();
 8007698:	4c1f      	ldr	r4, [pc, #124]	@ (8007718 <check_powerOff+0xa8>)
	  offTim = HAL_GetTick();   // button released, update offTim
 800769a:	f002 fc7b 	bl	8009f94 <HAL_GetTick>
 800769e:	4a1c      	ldr	r2, [pc, #112]	@ (8007710 <check_powerOff+0xa0>)
	  if(keystate) LED2_OFF();
 80076a0:	7823      	ldrb	r3, [r4, #0]
	  offTim = HAL_GetTick();   // button released, update offTim
 80076a2:	6010      	str	r0, [r2, #0]
	  if(keystate) LED2_OFF();
 80076a4:	b913      	cbnz	r3, 80076ac <check_powerOff+0x3c>
	  keystate = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	7023      	strb	r3, [r4, #0]
}
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
	  if(keystate) LED2_OFF();
 80076ac:	4819      	ldr	r0, [pc, #100]	@ (8007714 <check_powerOff+0xa4>)
 80076ae:	2201      	movs	r2, #1
 80076b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80076b4:	f003 fe5c 	bl	800b370 <HAL_GPIO_WritePin>
	  keystate = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	7023      	strb	r3, [r4, #0]
 80076bc:	e7f5      	b.n	80076aa <check_powerOff+0x3a>
     if(offTim && HAL_GetTick() - offTim > 2000) {    // 2 sec pressed
 80076be:	f002 fc69 	bl	8009f94 <HAL_GetTick>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	1ac0      	subs	r0, r0, r3
 80076c6:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 80076ca:	d9e4      	bls.n	8007696 <check_powerOff+0x26>
    	 printf("Power off\r\n");
 80076cc:	4813      	ldr	r0, [pc, #76]	@ (800771c <check_powerOff+0xac>)
 80076ce:	f009 fb91 	bl	8010df4 <puts>
    	 LED2_OFF();
 80076d2:	462a      	mov	r2, r5
 80076d4:	480f      	ldr	r0, [pc, #60]	@ (8007714 <check_powerOff+0xa4>)
 80076d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80076da:	f003 fe49 	bl	800b370 <HAL_GPIO_WritePin>
    	 LED1_OFF();
 80076de:	462a      	mov	r2, r5
 80076e0:	2120      	movs	r1, #32
 80076e2:	480c      	ldr	r0, [pc, #48]	@ (8007714 <check_powerOff+0xa4>)
 80076e4:	f003 fe44 	bl	800b370 <HAL_GPIO_WritePin>
		 Sim80x_SetPower(0);
 80076e8:	2000      	movs	r0, #0
 80076ea:	f7fb f817 	bl	800271c <Sim80x_SetPower>
    	 POWER_OFF();
 80076ee:	4809      	ldr	r0, [pc, #36]	@ (8007714 <check_powerOff+0xa4>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80076f6:	f003 fe3b 	bl	800b370 <HAL_GPIO_WritePin>
    	 osDelay(2000);
 80076fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80076fe:	f006 fb49 	bl	800dd94 <osDelay>
}
 8007702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    	 HAL_NVIC_SystemReset();
 8007706:	f003 b975 	b.w	800a9f4 <HAL_NVIC_SystemReset>
 800770a:	bf00      	nop
 800770c:	48000800 	.word	0x48000800
 8007710:	200019a8 	.word	0x200019a8
 8007714:	48000400 	.word	0x48000400
 8007718:	2000198c 	.word	0x2000198c
 800771c:	080169f4 	.word	0x080169f4

08007720 <HALcalculateCRC>:
{
 8007720:	b570      	push	{r4, r5, r6, lr}
    HAL_CRC_Init(&hcrc);
 8007722:	4c09      	ldr	r4, [pc, #36]	@ (8007748 <HALcalculateCRC+0x28>)
{
 8007724:	4605      	mov	r5, r0
    HAL_CRC_Init(&hcrc);
 8007726:	4620      	mov	r0, r4
{
 8007728:	460e      	mov	r6, r1
    HAL_CRC_Init(&hcrc);
 800772a:	f003 f9c7 	bl	800aabc <HAL_CRC_Init>
    __HAL_CRC_DR_RESET(&hcrc);
 800772e:	6820      	ldr	r0, [r4, #0]
 8007730:	6883      	ldr	r3, [r0, #8]
 8007732:	f043 0301 	orr.w	r3, r3, #1
 8007736:	6083      	str	r3, [r0, #8]
    uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, len);
 8007738:	4632      	mov	r2, r6
 800773a:	4629      	mov	r1, r5
 800773c:	4620      	mov	r0, r4
 800773e:	f003 f9fb 	bl	800ab38 <HAL_CRC_Calculate>
}
 8007742:	b2c0      	uxtb	r0, r0
 8007744:	bd70      	pop	{r4, r5, r6, pc}
 8007746:	bf00      	nop
 8007748:	20001854 	.word	0x20001854

0800774c <printCSVheader>:
{
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("\r\n");
 800774e:	4862      	ldr	r0, [pc, #392]	@ (80078d8 <printCSVheader+0x18c>)
 8007750:	f009 fb50 	bl	8010df4 <puts>
	printf("CNT;");
 8007754:	4861      	ldr	r0, [pc, #388]	@ (80078dc <printCSVheader+0x190>)
 8007756:	f009 fae5 	bl	8010d24 <iprintf>
	if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TEMP_TMP117;");
 800775a:	4a61      	ldr	r2, [pc, #388]	@ (80078e0 <printCSVheader+0x194>)
 800775c:	7813      	ldrb	r3, [r2, #0]
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	2b03      	cmp	r3, #3
 8007764:	d03a      	beq.n	80077dc <printCSVheader+0x90>
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 8007766:	4d5f      	ldr	r5, [pc, #380]	@ (80078e4 <printCSVheader+0x198>)
 8007768:	782b      	ldrb	r3, [r5, #0]
 800776a:	f003 0303 	and.w	r3, r3, #3
 800776e:	2b03      	cmp	r3, #3
 8007770:	d040      	beq.n	80077f4 <printCSVheader+0xa8>
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 8007772:	4e5d      	ldr	r6, [pc, #372]	@ (80078e8 <printCSVheader+0x19c>)
 8007774:	7833      	ldrb	r3, [r6, #0]
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	2b03      	cmp	r3, #3
 800777c:	d046      	beq.n	800780c <printCSVheader+0xc0>
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 800777e:	4c5b      	ldr	r4, [pc, #364]	@ (80078ec <printCSVheader+0x1a0>)
 8007780:	7823      	ldrb	r3, [r4, #0]
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	2b03      	cmp	r3, #3
 8007788:	d04c      	beq.n	8007824 <printCSVheader+0xd8>
	if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("TEMP_DPS368;");
 800778a:	4f59      	ldr	r7, [pc, #356]	@ (80078f0 <printCSVheader+0x1a4>)
 800778c:	783b      	ldrb	r3, [r7, #0]
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	2b03      	cmp	r3, #3
 8007794:	d052      	beq.n	800783c <printCSVheader+0xf0>
	if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("PRESS_BME280;");
 8007796:	782b      	ldrb	r3, [r5, #0]
 8007798:	f003 0303 	and.w	r3, r3, #3
 800779c:	2b03      	cmp	r3, #3
 800779e:	d058      	beq.n	8007852 <printCSVheader+0x106>
	if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("PRESS_MS8607;");
 80077a0:	7823      	ldrb	r3, [r4, #0]
 80077a2:	f003 0303 	and.w	r3, r3, #3
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d05e      	beq.n	8007868 <printCSVheader+0x11c>
	if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("PRESS_DPS368;");
 80077aa:	783b      	ldrb	r3, [r7, #0]
 80077ac:	f003 0303 	and.w	r3, r3, #3
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d064      	beq.n	800787e <printCSVheader+0x132>
	if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("HUM_BME280;");
 80077b4:	782b      	ldrb	r3, [r5, #0]
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d06a      	beq.n	8007894 <printCSVheader+0x148>
	if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("HUM_SHTC3;");
 80077be:	7833      	ldrb	r3, [r6, #0]
 80077c0:	f003 0303 	and.w	r3, r3, #3
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d070      	beq.n	80078aa <printCSVheader+0x15e>
	if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("HUM_MS8607;");
 80077c8:	7823      	ldrb	r3, [r4, #0]
 80077ca:	f003 0303 	and.w	r3, r3, #3
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d076      	beq.n	80078c0 <printCSVheader+0x174>
}
 80077d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printf("\r\n");
 80077d6:	4840      	ldr	r0, [pc, #256]	@ (80078d8 <printCSVheader+0x18c>)
 80077d8:	f009 bb0c 	b.w	8010df4 <puts>
	if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TEMP_TMP117;");
 80077dc:	7853      	ldrb	r3, [r2, #1]
 80077de:	07df      	lsls	r7, r3, #31
 80077e0:	d5c1      	bpl.n	8007766 <printCSVheader+0x1a>
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 80077e2:	4d40      	ldr	r5, [pc, #256]	@ (80078e4 <printCSVheader+0x198>)
	if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TEMP_TMP117;");
 80077e4:	4843      	ldr	r0, [pc, #268]	@ (80078f4 <printCSVheader+0x1a8>)
 80077e6:	f009 fa9d 	bl	8010d24 <iprintf>
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 80077ea:	782b      	ldrb	r3, [r5, #0]
 80077ec:	f003 0303 	and.w	r3, r3, #3
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d1be      	bne.n	8007772 <printCSVheader+0x26>
 80077f4:	786b      	ldrb	r3, [r5, #1]
 80077f6:	07de      	lsls	r6, r3, #31
 80077f8:	d5bb      	bpl.n	8007772 <printCSVheader+0x26>
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 80077fa:	4e3b      	ldr	r6, [pc, #236]	@ (80078e8 <printCSVheader+0x19c>)
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 80077fc:	483e      	ldr	r0, [pc, #248]	@ (80078f8 <printCSVheader+0x1ac>)
 80077fe:	f009 fa91 	bl	8010d24 <iprintf>
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 8007802:	7833      	ldrb	r3, [r6, #0]
 8007804:	f003 0303 	and.w	r3, r3, #3
 8007808:	2b03      	cmp	r3, #3
 800780a:	d1b8      	bne.n	800777e <printCSVheader+0x32>
 800780c:	7873      	ldrb	r3, [r6, #1]
 800780e:	07dc      	lsls	r4, r3, #31
 8007810:	d5b5      	bpl.n	800777e <printCSVheader+0x32>
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 8007812:	4c36      	ldr	r4, [pc, #216]	@ (80078ec <printCSVheader+0x1a0>)
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 8007814:	4839      	ldr	r0, [pc, #228]	@ (80078fc <printCSVheader+0x1b0>)
 8007816:	f009 fa85 	bl	8010d24 <iprintf>
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 800781a:	7823      	ldrb	r3, [r4, #0]
 800781c:	f003 0303 	and.w	r3, r3, #3
 8007820:	2b03      	cmp	r3, #3
 8007822:	d1b2      	bne.n	800778a <printCSVheader+0x3e>
 8007824:	7863      	ldrb	r3, [r4, #1]
 8007826:	07d8      	lsls	r0, r3, #31
 8007828:	d5af      	bpl.n	800778a <printCSVheader+0x3e>
	if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("TEMP_DPS368;");
 800782a:	4f31      	ldr	r7, [pc, #196]	@ (80078f0 <printCSVheader+0x1a4>)
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 800782c:	4834      	ldr	r0, [pc, #208]	@ (8007900 <printCSVheader+0x1b4>)
 800782e:	f009 fa79 	bl	8010d24 <iprintf>
	if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("TEMP_DPS368;");
 8007832:	783b      	ldrb	r3, [r7, #0]
 8007834:	f003 0303 	and.w	r3, r3, #3
 8007838:	2b03      	cmp	r3, #3
 800783a:	d1ac      	bne.n	8007796 <printCSVheader+0x4a>
 800783c:	787b      	ldrb	r3, [r7, #1]
 800783e:	07d9      	lsls	r1, r3, #31
 8007840:	d5a9      	bpl.n	8007796 <printCSVheader+0x4a>
 8007842:	4830      	ldr	r0, [pc, #192]	@ (8007904 <printCSVheader+0x1b8>)
 8007844:	f009 fa6e 	bl	8010d24 <iprintf>
	if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("PRESS_BME280;");
 8007848:	782b      	ldrb	r3, [r5, #0]
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	2b03      	cmp	r3, #3
 8007850:	d1a6      	bne.n	80077a0 <printCSVheader+0x54>
 8007852:	7ceb      	ldrb	r3, [r5, #19]
 8007854:	07da      	lsls	r2, r3, #31
 8007856:	d5a3      	bpl.n	80077a0 <printCSVheader+0x54>
 8007858:	482b      	ldr	r0, [pc, #172]	@ (8007908 <printCSVheader+0x1bc>)
 800785a:	f009 fa63 	bl	8010d24 <iprintf>
	if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("PRESS_MS8607;");
 800785e:	7823      	ldrb	r3, [r4, #0]
 8007860:	f003 0303 	and.w	r3, r3, #3
 8007864:	2b03      	cmp	r3, #3
 8007866:	d1a0      	bne.n	80077aa <printCSVheader+0x5e>
 8007868:	7ce3      	ldrb	r3, [r4, #19]
 800786a:	07db      	lsls	r3, r3, #31
 800786c:	d59d      	bpl.n	80077aa <printCSVheader+0x5e>
 800786e:	4827      	ldr	r0, [pc, #156]	@ (800790c <printCSVheader+0x1c0>)
 8007870:	f009 fa58 	bl	8010d24 <iprintf>
	if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("PRESS_DPS368;");
 8007874:	783b      	ldrb	r3, [r7, #0]
 8007876:	f003 0303 	and.w	r3, r3, #3
 800787a:	2b03      	cmp	r3, #3
 800787c:	d19a      	bne.n	80077b4 <printCSVheader+0x68>
 800787e:	7abb      	ldrb	r3, [r7, #10]
 8007880:	07d8      	lsls	r0, r3, #31
 8007882:	d597      	bpl.n	80077b4 <printCSVheader+0x68>
 8007884:	4822      	ldr	r0, [pc, #136]	@ (8007910 <printCSVheader+0x1c4>)
 8007886:	f009 fa4d 	bl	8010d24 <iprintf>
	if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("HUM_BME280;");
 800788a:	782b      	ldrb	r3, [r5, #0]
 800788c:	f003 0303 	and.w	r3, r3, #3
 8007890:	2b03      	cmp	r3, #3
 8007892:	d194      	bne.n	80077be <printCSVheader+0x72>
 8007894:	7aab      	ldrb	r3, [r5, #10]
 8007896:	07d9      	lsls	r1, r3, #31
 8007898:	d591      	bpl.n	80077be <printCSVheader+0x72>
 800789a:	481e      	ldr	r0, [pc, #120]	@ (8007914 <printCSVheader+0x1c8>)
 800789c:	f009 fa42 	bl	8010d24 <iprintf>
	if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("HUM_SHTC3;");
 80078a0:	7833      	ldrb	r3, [r6, #0]
 80078a2:	f003 0303 	and.w	r3, r3, #3
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d18e      	bne.n	80077c8 <printCSVheader+0x7c>
 80078aa:	7ab3      	ldrb	r3, [r6, #10]
 80078ac:	07da      	lsls	r2, r3, #31
 80078ae:	d58b      	bpl.n	80077c8 <printCSVheader+0x7c>
 80078b0:	4819      	ldr	r0, [pc, #100]	@ (8007918 <printCSVheader+0x1cc>)
 80078b2:	f009 fa37 	bl	8010d24 <iprintf>
	if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("HUM_MS8607;");
 80078b6:	7823      	ldrb	r3, [r4, #0]
 80078b8:	f003 0303 	and.w	r3, r3, #3
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d188      	bne.n	80077d2 <printCSVheader+0x86>
 80078c0:	7aa3      	ldrb	r3, [r4, #10]
 80078c2:	07db      	lsls	r3, r3, #31
 80078c4:	d585      	bpl.n	80077d2 <printCSVheader+0x86>
 80078c6:	4815      	ldr	r0, [pc, #84]	@ (800791c <printCSVheader+0x1d0>)
 80078c8:	f009 fa2c 	bl	8010d24 <iprintf>
}
 80078cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printf("\r\n");
 80078d0:	4801      	ldr	r0, [pc, #4]	@ (80078d8 <printCSVheader+0x18c>)
 80078d2:	f009 ba8f 	b.w	8010df4 <puts>
 80078d6:	bf00      	nop
 80078d8:	080169ac 	.word	0x080169ac
 80078dc:	08016a00 	.word	0x08016a00
 80078e0:	20001bc0 	.word	0x20001bc0
 80078e4:	20001b60 	.word	0x20001b60
 80078e8:	20001ba8 	.word	0x20001ba8
 80078ec:	20001b84 	.word	0x20001b84
 80078f0:	20001b48 	.word	0x20001b48
 80078f4:	08016a08 	.word	0x08016a08
 80078f8:	08016a18 	.word	0x08016a18
 80078fc:	08016a28 	.word	0x08016a28
 8007900:	08016a34 	.word	0x08016a34
 8007904:	08016a44 	.word	0x08016a44
 8007908:	08016a54 	.word	0x08016a54
 800790c:	08016a64 	.word	0x08016a64
 8007910:	08016a74 	.word	0x08016a74
 8007914:	08016a84 	.word	0x08016a84
 8007918:	08016a90 	.word	0x08016a90
 800791c:	08016a9c 	.word	0x08016a9c

08007920 <display_values>:
	switch (format)
 8007920:	2801      	cmp	r0, #1
{
 8007922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (format)
 8007924:	d002      	beq.n	800792c <display_values+0xc>
 8007926:	2802      	cmp	r0, #2
 8007928:	d05e      	beq.n	80079e8 <display_values+0xc8>
}
 800792a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("-----------------------\r\n");
 800792c:	48bc      	ldr	r0, [pc, #752]	@ (8007c20 <display_values+0x300>)
 800792e:	f009 fa61 	bl	8010df4 <puts>
		printf("Temperature:\r\n");
 8007932:	48bc      	ldr	r0, [pc, #752]	@ (8007c24 <display_values+0x304>)
 8007934:	f009 fa5e 	bl	8010df4 <puts>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TMP117: %.2f   ", TMP117.temp.value+TMP117.temp.offset);
 8007938:	4abb      	ldr	r2, [pc, #748]	@ (8007c28 <display_values+0x308>)
 800793a:	7813      	ldrb	r3, [r2, #0]
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	2b03      	cmp	r3, #3
 8007942:	f000 80a1 	beq.w	8007a88 <display_values+0x168>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("BME280: %.2f   ", BME280.temp.value+BME280.temp.offset);
 8007946:	4db9      	ldr	r5, [pc, #740]	@ (8007c2c <display_values+0x30c>)
 8007948:	782b      	ldrb	r3, [r5, #0]
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	2b03      	cmp	r3, #3
 8007950:	f000 829c 	beq.w	8007e8c <display_values+0x56c>
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("SHTC3: %.2f   ", SHT3.temp.value+SHT3.temp.offset);
 8007954:	4eb6      	ldr	r6, [pc, #728]	@ (8007c30 <display_values+0x310>)
 8007956:	7833      	ldrb	r3, [r6, #0]
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	2b03      	cmp	r3, #3
 800795e:	f000 827d 	beq.w	8007e5c <display_values+0x53c>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("MS8607: %.2f   ", MS8607.temp.value+MS8607.temp.offset);
 8007962:	4cb4      	ldr	r4, [pc, #720]	@ (8007c34 <display_values+0x314>)
 8007964:	7823      	ldrb	r3, [r4, #0]
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	2b03      	cmp	r3, #3
 800796c:	f000 825e 	beq.w	8007e2c <display_values+0x50c>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("DPS368: %.2f   ", DPS368.temp.value+DPS368.temp.offset);
 8007970:	4fb1      	ldr	r7, [pc, #708]	@ (8007c38 <display_values+0x318>)
 8007972:	783b      	ldrb	r3, [r7, #0]
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	2b03      	cmp	r3, #3
 800797a:	f000 823f 	beq.w	8007dfc <display_values+0x4dc>
		printf("\r\n-----------------------\r\n");
 800797e:	48af      	ldr	r0, [pc, #700]	@ (8007c3c <display_values+0x31c>)
 8007980:	f009 fa38 	bl	8010df4 <puts>
		printf("Press:\r\n");
 8007984:	48ae      	ldr	r0, [pc, #696]	@ (8007c40 <display_values+0x320>)
 8007986:	f009 fa35 	bl	8010df4 <puts>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("BME280: %.2f   ", BME280.press.value+BME280.press.offset);
 800798a:	782b      	ldrb	r3, [r5, #0]
 800798c:	f003 0303 	and.w	r3, r3, #3
 8007990:	2b03      	cmp	r3, #3
 8007992:	f000 821f 	beq.w	8007dd4 <display_values+0x4b4>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("MS8607: %.2f   ", MS8607.press.value+MS8607.press.offset);
 8007996:	7823      	ldrb	r3, [r4, #0]
 8007998:	f003 0303 	and.w	r3, r3, #3
 800799c:	2b03      	cmp	r3, #3
 800799e:	f000 8205 	beq.w	8007dac <display_values+0x48c>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("DPS368: %.2f   ", DPS368.press.value+DPS368.press.offset);
 80079a2:	783b      	ldrb	r3, [r7, #0]
 80079a4:	f003 0303 	and.w	r3, r3, #3
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	f000 81e7 	beq.w	8007d7c <display_values+0x45c>
		printf("\r\n-----------------------\r\n");
 80079ae:	48a3      	ldr	r0, [pc, #652]	@ (8007c3c <display_values+0x31c>)
 80079b0:	f009 fa20 	bl	8010df4 <puts>
		printf("Hum:\r\n");
 80079b4:	48a3      	ldr	r0, [pc, #652]	@ (8007c44 <display_values+0x324>)
 80079b6:	f009 fa1d 	bl	8010df4 <puts>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("BME280: %.2f   ", BME280.hum.value+BME280.hum.offset);
 80079ba:	782b      	ldrb	r3, [r5, #0]
 80079bc:	f003 0303 	and.w	r3, r3, #3
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	f000 81c3 	beq.w	8007d4c <display_values+0x42c>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("SHTC3: %.2f   ", SHT3.hum.value+SHT3.hum.offset);
 80079c6:	7833      	ldrb	r3, [r6, #0]
 80079c8:	f003 0303 	and.w	r3, r3, #3
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	f000 81a5 	beq.w	8007d1c <display_values+0x3fc>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("MS8607: %.2f   ", MS8607.hum.value+MS8607.hum.offset);
 80079d2:	7823      	ldrb	r3, [r4, #0]
 80079d4:	f003 0303 	and.w	r3, r3, #3
 80079d8:	2b03      	cmp	r3, #3
 80079da:	f000 8187 	beq.w	8007cec <display_values+0x3cc>
}
 80079de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("\r\n-----------------------\r\n");
 80079e2:	4896      	ldr	r0, [pc, #600]	@ (8007c3c <display_values+0x31c>)
 80079e4:	f009 ba06 	b.w	8010df4 <puts>
		printf("%u;",++csvcnt);
 80079e8:	4b97      	ldr	r3, [pc, #604]	@ (8007c48 <display_values+0x328>)
 80079ea:	4898      	ldr	r0, [pc, #608]	@ (8007c4c <display_values+0x32c>)
 80079ec:	8819      	ldrh	r1, [r3, #0]
 80079ee:	3101      	adds	r1, #1
 80079f0:	b289      	uxth	r1, r1
 80079f2:	8019      	strh	r1, [r3, #0]
 80079f4:	f009 f996 	bl	8010d24 <iprintf>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("%.2f;",TMP117.temp.value+TMP117.temp.offset);
 80079f8:	4a8b      	ldr	r2, [pc, #556]	@ (8007c28 <display_values+0x308>)
 80079fa:	7813      	ldrb	r3, [r2, #0]
 80079fc:	f003 0303 	and.w	r3, r3, #3
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	f000 815b 	beq.w	8007cbc <display_values+0x39c>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("%.2f;",BME280.temp.value+BME280.temp.offset);
 8007a06:	4d89      	ldr	r5, [pc, #548]	@ (8007c2c <display_values+0x30c>)
 8007a08:	782b      	ldrb	r3, [r5, #0]
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	f000 813c 	beq.w	8007c8c <display_values+0x36c>
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("%.2f;",SHT3.temp.value+SHT3.temp.offset);
 8007a14:	4e86      	ldr	r6, [pc, #536]	@ (8007c30 <display_values+0x310>)
 8007a16:	7833      	ldrb	r3, [r6, #0]
 8007a18:	f003 0303 	and.w	r3, r3, #3
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	f000 811d 	beq.w	8007c5c <display_values+0x33c>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("%.2f;",MS8607.temp.value+MS8607.temp.offset);
 8007a22:	4c84      	ldr	r4, [pc, #528]	@ (8007c34 <display_values+0x314>)
 8007a24:	7823      	ldrb	r3, [r4, #0]
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	f000 80e0 	beq.w	8007bf0 <display_values+0x2d0>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("%.2f;",DPS368.temp.value+DPS368.temp.offset);
 8007a30:	4f81      	ldr	r7, [pc, #516]	@ (8007c38 <display_values+0x318>)
 8007a32:	783b      	ldrb	r3, [r7, #0]
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	f000 80c1 	beq.w	8007bc0 <display_values+0x2a0>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("%.2f;",BME280.press.value+BME280.press.offset);
 8007a3e:	782b      	ldrb	r3, [r5, #0]
 8007a40:	f003 0303 	and.w	r3, r3, #3
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	f000 80a7 	beq.w	8007b98 <display_values+0x278>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("%.2f;",MS8607.press.value+MS8607.press.offset);
 8007a4a:	7823      	ldrb	r3, [r4, #0]
 8007a4c:	f003 0303 	and.w	r3, r3, #3
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	f000 808d 	beq.w	8007b70 <display_values+0x250>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("%.2f;",DPS368.press.value+DPS368.press.offset);
 8007a56:	783b      	ldrb	r3, [r7, #0]
 8007a58:	f003 0303 	and.w	r3, r3, #3
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d070      	beq.n	8007b42 <display_values+0x222>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("%.2f;",BME280.hum.value+BME280.hum.offset);
 8007a60:	782b      	ldrb	r3, [r5, #0]
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d054      	beq.n	8007b14 <display_values+0x1f4>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("%.2f;",SHT3.hum.value+SHT3.hum.offset);
 8007a6a:	7833      	ldrb	r3, [r6, #0]
 8007a6c:	f003 0303 	and.w	r3, r3, #3
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d038      	beq.n	8007ae6 <display_values+0x1c6>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("%.2f;",MS8607.hum.value+MS8607.hum.offset);
 8007a74:	7823      	ldrb	r3, [r4, #0]
 8007a76:	f003 0303 	and.w	r3, r3, #3
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d01c      	beq.n	8007ab8 <display_values+0x198>
}
 8007a7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("\r\n");
 8007a82:	4873      	ldr	r0, [pc, #460]	@ (8007c50 <display_values+0x330>)
 8007a84:	f009 b9b6 	b.w	8010df4 <puts>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TMP117: %.2f   ", TMP117.temp.value+TMP117.temp.offset);
 8007a88:	7853      	ldrb	r3, [r2, #1]
 8007a8a:	07df      	lsls	r7, r3, #31
 8007a8c:	f57f af5b 	bpl.w	8007946 <display_values+0x26>
 8007a90:	f8d2 0002 	ldr.w	r0, [r2, #2]
 8007a94:	f8d2 3006 	ldr.w	r3, [r2, #6]
 8007a98:	ee07 0a90 	vmov	s15, r0
 8007a9c:	ee07 3a10 	vmov	s14, r3
 8007aa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007aa4:	ee17 0a90 	vmov	r0, s15
 8007aa8:	f7f8 fd8e 	bl	80005c8 <__aeabi_f2d>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4868      	ldr	r0, [pc, #416]	@ (8007c54 <display_values+0x334>)
 8007ab2:	f009 f937 	bl	8010d24 <iprintf>
 8007ab6:	e746      	b.n	8007946 <display_values+0x26>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("%.2f;",MS8607.hum.value+MS8607.hum.offset);
 8007ab8:	7aa3      	ldrb	r3, [r4, #10]
 8007aba:	07db      	lsls	r3, r3, #31
 8007abc:	d5df      	bpl.n	8007a7e <display_values+0x15e>
 8007abe:	f8d4 300f 	ldr.w	r3, [r4, #15]
 8007ac2:	f8d4 000b 	ldr.w	r0, [r4, #11]
 8007ac6:	ee07 3a10 	vmov	s14, r3
 8007aca:	ee07 0a90 	vmov	s15, r0
 8007ace:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ad2:	ee17 0a90 	vmov	r0, s15
 8007ad6:	f7f8 fd77 	bl	80005c8 <__aeabi_f2d>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	485e      	ldr	r0, [pc, #376]	@ (8007c58 <display_values+0x338>)
 8007ae0:	f009 f920 	bl	8010d24 <iprintf>
 8007ae4:	e7cb      	b.n	8007a7e <display_values+0x15e>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("%.2f;",SHT3.hum.value+SHT3.hum.offset);
 8007ae6:	7ab3      	ldrb	r3, [r6, #10]
 8007ae8:	07da      	lsls	r2, r3, #31
 8007aea:	d5c3      	bpl.n	8007a74 <display_values+0x154>
 8007aec:	f8d6 300f 	ldr.w	r3, [r6, #15]
 8007af0:	f8d6 000b 	ldr.w	r0, [r6, #11]
 8007af4:	ee07 3a10 	vmov	s14, r3
 8007af8:	ee07 0a90 	vmov	s15, r0
 8007afc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b00:	ee17 0a90 	vmov	r0, s15
 8007b04:	f7f8 fd60 	bl	80005c8 <__aeabi_f2d>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4852      	ldr	r0, [pc, #328]	@ (8007c58 <display_values+0x338>)
 8007b0e:	f009 f909 	bl	8010d24 <iprintf>
 8007b12:	e7af      	b.n	8007a74 <display_values+0x154>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("%.2f;",BME280.hum.value+BME280.hum.offset);
 8007b14:	7aab      	ldrb	r3, [r5, #10]
 8007b16:	07d9      	lsls	r1, r3, #31
 8007b18:	d5a7      	bpl.n	8007a6a <display_values+0x14a>
 8007b1a:	f8d5 300f 	ldr.w	r3, [r5, #15]
 8007b1e:	f8d5 000b 	ldr.w	r0, [r5, #11]
 8007b22:	ee07 3a10 	vmov	s14, r3
 8007b26:	ee07 0a90 	vmov	s15, r0
 8007b2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b2e:	ee17 0a90 	vmov	r0, s15
 8007b32:	f7f8 fd49 	bl	80005c8 <__aeabi_f2d>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4847      	ldr	r0, [pc, #284]	@ (8007c58 <display_values+0x338>)
 8007b3c:	f009 f8f2 	bl	8010d24 <iprintf>
 8007b40:	e793      	b.n	8007a6a <display_values+0x14a>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("%.2f;",DPS368.press.value+DPS368.press.offset);
 8007b42:	7abb      	ldrb	r3, [r7, #10]
 8007b44:	07d8      	lsls	r0, r3, #31
 8007b46:	d58b      	bpl.n	8007a60 <display_values+0x140>
 8007b48:	f8d7 300f 	ldr.w	r3, [r7, #15]
 8007b4c:	f8d7 000b 	ldr.w	r0, [r7, #11]
 8007b50:	ee07 3a10 	vmov	s14, r3
 8007b54:	ee07 0a90 	vmov	s15, r0
 8007b58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b5c:	ee17 0a90 	vmov	r0, s15
 8007b60:	f7f8 fd32 	bl	80005c8 <__aeabi_f2d>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	483b      	ldr	r0, [pc, #236]	@ (8007c58 <display_values+0x338>)
 8007b6a:	f009 f8db 	bl	8010d24 <iprintf>
 8007b6e:	e777      	b.n	8007a60 <display_values+0x140>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("%.2f;",MS8607.press.value+MS8607.press.offset);
 8007b70:	7ce3      	ldrb	r3, [r4, #19]
 8007b72:	07db      	lsls	r3, r3, #31
 8007b74:	f57f af6f 	bpl.w	8007a56 <display_values+0x136>
 8007b78:	ed94 7a05 	vldr	s14, [r4, #20]
 8007b7c:	edd4 7a06 	vldr	s15, [r4, #24]
 8007b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b84:	ee17 0a90 	vmov	r0, s15
 8007b88:	f7f8 fd1e 	bl	80005c8 <__aeabi_f2d>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4831      	ldr	r0, [pc, #196]	@ (8007c58 <display_values+0x338>)
 8007b92:	f009 f8c7 	bl	8010d24 <iprintf>
 8007b96:	e75e      	b.n	8007a56 <display_values+0x136>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("%.2f;",BME280.press.value+BME280.press.offset);
 8007b98:	7ceb      	ldrb	r3, [r5, #19]
 8007b9a:	07da      	lsls	r2, r3, #31
 8007b9c:	f57f af55 	bpl.w	8007a4a <display_values+0x12a>
 8007ba0:	ed95 7a05 	vldr	s14, [r5, #20]
 8007ba4:	edd5 7a06 	vldr	s15, [r5, #24]
 8007ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bac:	ee17 0a90 	vmov	r0, s15
 8007bb0:	f7f8 fd0a 	bl	80005c8 <__aeabi_f2d>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4827      	ldr	r0, [pc, #156]	@ (8007c58 <display_values+0x338>)
 8007bba:	f009 f8b3 	bl	8010d24 <iprintf>
 8007bbe:	e744      	b.n	8007a4a <display_values+0x12a>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("%.2f;",DPS368.temp.value+DPS368.temp.offset);
 8007bc0:	787b      	ldrb	r3, [r7, #1]
 8007bc2:	07d9      	lsls	r1, r3, #31
 8007bc4:	f57f af3b 	bpl.w	8007a3e <display_values+0x11e>
 8007bc8:	f8d7 3006 	ldr.w	r3, [r7, #6]
 8007bcc:	f8d7 0002 	ldr.w	r0, [r7, #2]
 8007bd0:	ee07 3a10 	vmov	s14, r3
 8007bd4:	ee07 0a90 	vmov	s15, r0
 8007bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bdc:	ee17 0a90 	vmov	r0, s15
 8007be0:	f7f8 fcf2 	bl	80005c8 <__aeabi_f2d>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	481b      	ldr	r0, [pc, #108]	@ (8007c58 <display_values+0x338>)
 8007bea:	f009 f89b 	bl	8010d24 <iprintf>
 8007bee:	e726      	b.n	8007a3e <display_values+0x11e>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("%.2f;",MS8607.temp.value+MS8607.temp.offset);
 8007bf0:	7863      	ldrb	r3, [r4, #1]
 8007bf2:	07d8      	lsls	r0, r3, #31
 8007bf4:	f57f af1c 	bpl.w	8007a30 <display_values+0x110>
 8007bf8:	f8d4 3006 	ldr.w	r3, [r4, #6]
 8007bfc:	f8d4 0002 	ldr.w	r0, [r4, #2]
 8007c00:	ee07 3a10 	vmov	s14, r3
 8007c04:	ee07 0a90 	vmov	s15, r0
 8007c08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c0c:	ee17 0a90 	vmov	r0, s15
 8007c10:	f7f8 fcda 	bl	80005c8 <__aeabi_f2d>
 8007c14:	4602      	mov	r2, r0
 8007c16:	460b      	mov	r3, r1
 8007c18:	480f      	ldr	r0, [pc, #60]	@ (8007c58 <display_values+0x338>)
 8007c1a:	f009 f883 	bl	8010d24 <iprintf>
 8007c1e:	e707      	b.n	8007a30 <display_values+0x110>
 8007c20:	08016c2c 	.word	0x08016c2c
 8007c24:	08016aa8 	.word	0x08016aa8
 8007c28:	20001bc0 	.word	0x20001bc0
 8007c2c:	20001b60 	.word	0x20001b60
 8007c30:	20001ba8 	.word	0x20001ba8
 8007c34:	20001b84 	.word	0x20001b84
 8007c38:	20001b48 	.word	0x20001b48
 8007c3c:	08016b08 	.word	0x08016b08
 8007c40:	08016b24 	.word	0x08016b24
 8007c44:	08016b2c 	.word	0x08016b2c
 8007c48:	20001618 	.word	0x20001618
 8007c4c:	08016b34 	.word	0x08016b34
 8007c50:	080169ac 	.word	0x080169ac
 8007c54:	08016ab8 	.word	0x08016ab8
 8007c58:	08016b38 	.word	0x08016b38
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("%.2f;",SHT3.temp.value+SHT3.temp.offset);
 8007c5c:	7873      	ldrb	r3, [r6, #1]
 8007c5e:	07dc      	lsls	r4, r3, #31
 8007c60:	f57f aedf 	bpl.w	8007a22 <display_values+0x102>
 8007c64:	f8d6 3006 	ldr.w	r3, [r6, #6]
 8007c68:	f8d6 0002 	ldr.w	r0, [r6, #2]
 8007c6c:	ee07 3a10 	vmov	s14, r3
 8007c70:	ee07 0a90 	vmov	s15, r0
 8007c74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c78:	ee17 0a90 	vmov	r0, s15
 8007c7c:	f7f8 fca4 	bl	80005c8 <__aeabi_f2d>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	488d      	ldr	r0, [pc, #564]	@ (8007ebc <display_values+0x59c>)
 8007c86:	f009 f84d 	bl	8010d24 <iprintf>
 8007c8a:	e6ca      	b.n	8007a22 <display_values+0x102>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("%.2f;",BME280.temp.value+BME280.temp.offset);
 8007c8c:	786b      	ldrb	r3, [r5, #1]
 8007c8e:	07de      	lsls	r6, r3, #31
 8007c90:	f57f aec0 	bpl.w	8007a14 <display_values+0xf4>
 8007c94:	f8d5 3006 	ldr.w	r3, [r5, #6]
 8007c98:	f8d5 0002 	ldr.w	r0, [r5, #2]
 8007c9c:	ee07 3a10 	vmov	s14, r3
 8007ca0:	ee07 0a90 	vmov	s15, r0
 8007ca4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ca8:	ee17 0a90 	vmov	r0, s15
 8007cac:	f7f8 fc8c 	bl	80005c8 <__aeabi_f2d>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4881      	ldr	r0, [pc, #516]	@ (8007ebc <display_values+0x59c>)
 8007cb6:	f009 f835 	bl	8010d24 <iprintf>
 8007cba:	e6ab      	b.n	8007a14 <display_values+0xf4>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("%.2f;",TMP117.temp.value+TMP117.temp.offset);
 8007cbc:	7853      	ldrb	r3, [r2, #1]
 8007cbe:	07df      	lsls	r7, r3, #31
 8007cc0:	f57f aea1 	bpl.w	8007a06 <display_values+0xe6>
 8007cc4:	f8d2 0002 	ldr.w	r0, [r2, #2]
 8007cc8:	f8d2 3006 	ldr.w	r3, [r2, #6]
 8007ccc:	ee07 0a90 	vmov	s15, r0
 8007cd0:	ee07 3a10 	vmov	s14, r3
 8007cd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cd8:	ee17 0a90 	vmov	r0, s15
 8007cdc:	f7f8 fc74 	bl	80005c8 <__aeabi_f2d>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4875      	ldr	r0, [pc, #468]	@ (8007ebc <display_values+0x59c>)
 8007ce6:	f009 f81d 	bl	8010d24 <iprintf>
 8007cea:	e68c      	b.n	8007a06 <display_values+0xe6>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("MS8607: %.2f   ", MS8607.hum.value+MS8607.hum.offset);
 8007cec:	7aa3      	ldrb	r3, [r4, #10]
 8007cee:	07db      	lsls	r3, r3, #31
 8007cf0:	f57f ae75 	bpl.w	80079de <display_values+0xbe>
 8007cf4:	f8d4 300f 	ldr.w	r3, [r4, #15]
 8007cf8:	f8d4 000b 	ldr.w	r0, [r4, #11]
 8007cfc:	ee07 3a10 	vmov	s14, r3
 8007d00:	ee07 0a90 	vmov	s15, r0
 8007d04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d08:	ee17 0a90 	vmov	r0, s15
 8007d0c:	f7f8 fc5c 	bl	80005c8 <__aeabi_f2d>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	486a      	ldr	r0, [pc, #424]	@ (8007ec0 <display_values+0x5a0>)
 8007d16:	f009 f805 	bl	8010d24 <iprintf>
 8007d1a:	e660      	b.n	80079de <display_values+0xbe>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("SHTC3: %.2f   ", SHT3.hum.value+SHT3.hum.offset);
 8007d1c:	7ab3      	ldrb	r3, [r6, #10]
 8007d1e:	07da      	lsls	r2, r3, #31
 8007d20:	f57f ae57 	bpl.w	80079d2 <display_values+0xb2>
 8007d24:	f8d6 300f 	ldr.w	r3, [r6, #15]
 8007d28:	f8d6 000b 	ldr.w	r0, [r6, #11]
 8007d2c:	ee07 3a10 	vmov	s14, r3
 8007d30:	ee07 0a90 	vmov	s15, r0
 8007d34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d38:	ee17 0a90 	vmov	r0, s15
 8007d3c:	f7f8 fc44 	bl	80005c8 <__aeabi_f2d>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	485f      	ldr	r0, [pc, #380]	@ (8007ec4 <display_values+0x5a4>)
 8007d46:	f008 ffed 	bl	8010d24 <iprintf>
 8007d4a:	e642      	b.n	80079d2 <display_values+0xb2>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("BME280: %.2f   ", BME280.hum.value+BME280.hum.offset);
 8007d4c:	7aab      	ldrb	r3, [r5, #10]
 8007d4e:	07d9      	lsls	r1, r3, #31
 8007d50:	f57f ae39 	bpl.w	80079c6 <display_values+0xa6>
 8007d54:	f8d5 300f 	ldr.w	r3, [r5, #15]
 8007d58:	f8d5 000b 	ldr.w	r0, [r5, #11]
 8007d5c:	ee07 3a10 	vmov	s14, r3
 8007d60:	ee07 0a90 	vmov	s15, r0
 8007d64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d68:	ee17 0a90 	vmov	r0, s15
 8007d6c:	f7f8 fc2c 	bl	80005c8 <__aeabi_f2d>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4854      	ldr	r0, [pc, #336]	@ (8007ec8 <display_values+0x5a8>)
 8007d76:	f008 ffd5 	bl	8010d24 <iprintf>
 8007d7a:	e624      	b.n	80079c6 <display_values+0xa6>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("DPS368: %.2f   ", DPS368.press.value+DPS368.press.offset);
 8007d7c:	7abb      	ldrb	r3, [r7, #10]
 8007d7e:	07d8      	lsls	r0, r3, #31
 8007d80:	f57f ae15 	bpl.w	80079ae <display_values+0x8e>
 8007d84:	f8d7 300f 	ldr.w	r3, [r7, #15]
 8007d88:	f8d7 000b 	ldr.w	r0, [r7, #11]
 8007d8c:	ee07 3a10 	vmov	s14, r3
 8007d90:	ee07 0a90 	vmov	s15, r0
 8007d94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d98:	ee17 0a90 	vmov	r0, s15
 8007d9c:	f7f8 fc14 	bl	80005c8 <__aeabi_f2d>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	4849      	ldr	r0, [pc, #292]	@ (8007ecc <display_values+0x5ac>)
 8007da6:	f008 ffbd 	bl	8010d24 <iprintf>
 8007daa:	e600      	b.n	80079ae <display_values+0x8e>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("MS8607: %.2f   ", MS8607.press.value+MS8607.press.offset);
 8007dac:	7ce3      	ldrb	r3, [r4, #19]
 8007dae:	07db      	lsls	r3, r3, #31
 8007db0:	f57f adf7 	bpl.w	80079a2 <display_values+0x82>
 8007db4:	ed94 7a05 	vldr	s14, [r4, #20]
 8007db8:	edd4 7a06 	vldr	s15, [r4, #24]
 8007dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dc0:	ee17 0a90 	vmov	r0, s15
 8007dc4:	f7f8 fc00 	bl	80005c8 <__aeabi_f2d>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	483c      	ldr	r0, [pc, #240]	@ (8007ec0 <display_values+0x5a0>)
 8007dce:	f008 ffa9 	bl	8010d24 <iprintf>
 8007dd2:	e5e6      	b.n	80079a2 <display_values+0x82>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("BME280: %.2f   ", BME280.press.value+BME280.press.offset);
 8007dd4:	7ceb      	ldrb	r3, [r5, #19]
 8007dd6:	07da      	lsls	r2, r3, #31
 8007dd8:	f57f addd 	bpl.w	8007996 <display_values+0x76>
 8007ddc:	ed95 7a05 	vldr	s14, [r5, #20]
 8007de0:	edd5 7a06 	vldr	s15, [r5, #24]
 8007de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007de8:	ee17 0a90 	vmov	r0, s15
 8007dec:	f7f8 fbec 	bl	80005c8 <__aeabi_f2d>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4834      	ldr	r0, [pc, #208]	@ (8007ec8 <display_values+0x5a8>)
 8007df6:	f008 ff95 	bl	8010d24 <iprintf>
 8007dfa:	e5cc      	b.n	8007996 <display_values+0x76>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("DPS368: %.2f   ", DPS368.temp.value+DPS368.temp.offset);
 8007dfc:	787b      	ldrb	r3, [r7, #1]
 8007dfe:	07d9      	lsls	r1, r3, #31
 8007e00:	f57f adbd 	bpl.w	800797e <display_values+0x5e>
 8007e04:	f8d7 3006 	ldr.w	r3, [r7, #6]
 8007e08:	f8d7 0002 	ldr.w	r0, [r7, #2]
 8007e0c:	ee07 3a10 	vmov	s14, r3
 8007e10:	ee07 0a90 	vmov	s15, r0
 8007e14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e18:	ee17 0a90 	vmov	r0, s15
 8007e1c:	f7f8 fbd4 	bl	80005c8 <__aeabi_f2d>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4829      	ldr	r0, [pc, #164]	@ (8007ecc <display_values+0x5ac>)
 8007e26:	f008 ff7d 	bl	8010d24 <iprintf>
 8007e2a:	e5a8      	b.n	800797e <display_values+0x5e>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("MS8607: %.2f   ", MS8607.temp.value+MS8607.temp.offset);
 8007e2c:	7863      	ldrb	r3, [r4, #1]
 8007e2e:	07d8      	lsls	r0, r3, #31
 8007e30:	f57f ad9e 	bpl.w	8007970 <display_values+0x50>
 8007e34:	f8d4 3006 	ldr.w	r3, [r4, #6]
 8007e38:	f8d4 0002 	ldr.w	r0, [r4, #2]
 8007e3c:	ee07 3a10 	vmov	s14, r3
 8007e40:	ee07 0a90 	vmov	s15, r0
 8007e44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e48:	ee17 0a90 	vmov	r0, s15
 8007e4c:	f7f8 fbbc 	bl	80005c8 <__aeabi_f2d>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	481a      	ldr	r0, [pc, #104]	@ (8007ec0 <display_values+0x5a0>)
 8007e56:	f008 ff65 	bl	8010d24 <iprintf>
 8007e5a:	e589      	b.n	8007970 <display_values+0x50>
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("SHTC3: %.2f   ", SHT3.temp.value+SHT3.temp.offset);
 8007e5c:	7873      	ldrb	r3, [r6, #1]
 8007e5e:	07dc      	lsls	r4, r3, #31
 8007e60:	f57f ad7f 	bpl.w	8007962 <display_values+0x42>
 8007e64:	f8d6 3006 	ldr.w	r3, [r6, #6]
 8007e68:	f8d6 0002 	ldr.w	r0, [r6, #2]
 8007e6c:	ee07 3a10 	vmov	s14, r3
 8007e70:	ee07 0a90 	vmov	s15, r0
 8007e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e78:	ee17 0a90 	vmov	r0, s15
 8007e7c:	f7f8 fba4 	bl	80005c8 <__aeabi_f2d>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	480f      	ldr	r0, [pc, #60]	@ (8007ec4 <display_values+0x5a4>)
 8007e86:	f008 ff4d 	bl	8010d24 <iprintf>
 8007e8a:	e56a      	b.n	8007962 <display_values+0x42>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("BME280: %.2f   ", BME280.temp.value+BME280.temp.offset);
 8007e8c:	786b      	ldrb	r3, [r5, #1]
 8007e8e:	07de      	lsls	r6, r3, #31
 8007e90:	f57f ad60 	bpl.w	8007954 <display_values+0x34>
 8007e94:	f8d5 3006 	ldr.w	r3, [r5, #6]
 8007e98:	f8d5 0002 	ldr.w	r0, [r5, #2]
 8007e9c:	ee07 3a10 	vmov	s14, r3
 8007ea0:	ee07 0a90 	vmov	s15, r0
 8007ea4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ea8:	ee17 0a90 	vmov	r0, s15
 8007eac:	f7f8 fb8c 	bl	80005c8 <__aeabi_f2d>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4804      	ldr	r0, [pc, #16]	@ (8007ec8 <display_values+0x5a8>)
 8007eb6:	f008 ff35 	bl	8010d24 <iprintf>
 8007eba:	e54b      	b.n	8007954 <display_values+0x34>
 8007ebc:	08016b38 	.word	0x08016b38
 8007ec0:	08016ae8 	.word	0x08016ae8
 8007ec4:	08016ad8 	.word	0x08016ad8
 8007ec8:	08016ac8 	.word	0x08016ac8
 8007ecc:	08016af8 	.word	0x08016af8

08007ed0 <getConfVars>:
{
 8007ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  BME280.sensor_use = config.BME280_use;
 8007ed4:	495f      	ldr	r1, [pc, #380]	@ (8008054 <getConfVars+0x184>)
	  SHT3.sensor_use = config.SHT3_use;
 8007ed6:	4b60      	ldr	r3, [pc, #384]	@ (8008058 <getConfVars+0x188>)
	  BME280.sensor_use = config.BME280_use;
 8007ed8:	8808      	ldrh	r0, [r1, #0]
	  SHT3.sensor_use = config.SHT3_use;
 8007eda:	4e60      	ldr	r6, [pc, #384]	@ (800805c <getConfVars+0x18c>)
 8007edc:	7bda      	ldrb	r2, [r3, #15]
	  MS8607.sensor_use = config.MS8607_use;
 8007ede:	7e1d      	ldrb	r5, [r3, #24]
	  DPS368.sensor_use = config.DPS368_use;
 8007ee0:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8008064 <getConfVars+0x194>
	  TMP117.sensor_use = config.TMP117_use;
 8007ee4:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8008068 <getConfVars+0x198>
	  TMP117.sensor_conf = config.TMP117_conf;
 8007ee8:	7a9c      	ldrb	r4, [r3, #10]
	  TMP117.sensor_use = config.TMP117_use;
 8007eea:	f8bc e000 	ldrh.w	lr, [ip]
	  BME280.sensor_use = config.BME280_use;
 8007eee:	f893 7025 	ldrb.w	r7, [r3, #37]	@ 0x25
	  DPS368.sensor_use = config.DPS368_use;
 8007ef2:	f893 b032 	ldrb.w	fp, [r3, #50]	@ 0x32
	  BME280.press.use_meas = config.BME280_p_use;
 8007ef6:	f891 a013 	ldrb.w	sl, [r1, #19]
{
 8007efa:	b087      	sub	sp, #28
	  BME280.sensor_use = config.BME280_use;
 8007efc:	f420 709f 	bic.w	r0, r0, #318	@ 0x13e
	  SHT3.sensor_use = config.SHT3_use;
 8007f00:	9200      	str	r2, [sp, #0]
	  BME280.sensor_use = config.BME280_use;
 8007f02:	9002      	str	r0, [sp, #8]
	  MS8607.sensor_use = config.MS8607_use;
 8007f04:	4a56      	ldr	r2, [pc, #344]	@ (8008060 <getConfVars+0x190>)
	  SHT3.sensor_use = config.SHT3_use;
 8007f06:	8830      	ldrh	r0, [r6, #0]
	  MS8607.sensor_use = config.MS8607_use;
 8007f08:	9501      	str	r5, [sp, #4]
	  SHT3.sensor_use = config.SHT3_use;
 8007f0a:	f420 759f 	bic.w	r5, r0, #318	@ 0x13e
	  MS8607.sensor_use = config.MS8607_use;
 8007f0e:	8810      	ldrh	r0, [r2, #0]
	  SHT3.sensor_use = config.SHT3_use;
 8007f10:	9503      	str	r5, [sp, #12]
	  MS8607.sensor_use = config.MS8607_use;
 8007f12:	f420 799f 	bic.w	r9, r0, #318	@ 0x13e
	  DPS368.sensor_use = config.DPS368_use;
 8007f16:	f8b8 0000 	ldrh.w	r0, [r8]
	  MS8607.sensor_use = config.MS8607_use;
 8007f1a:	f8cd 9010 	str.w	r9, [sp, #16]
	  DPS368.sensor_use = config.DPS368_use;
 8007f1e:	f420 799f 	bic.w	r9, r0, #318	@ 0x13e
 8007f22:	f8cd 9014 	str.w	r9, [sp, #20]
	  TMP117.temp.offset = config.TMP117_t_offset;
 8007f26:	f8d3 000b 	ldr.w	r0, [r3, #11]
 8007f2a:	f8cc 0006 	str.w	r0, [ip, #6]
	  BME280.temp.offset = config.BME280_t_offset;
 8007f2e:	f8d3 0026 	ldr.w	r0, [r3, #38]	@ 0x26
 8007f32:	f8c1 0006 	str.w	r0, [r1, #6]
	  MS8607.temp.offset = config.MS8607_t_offset;
 8007f36:	f8d3 0019 	ldr.w	r0, [r3, #25]
 8007f3a:	f8c2 0006 	str.w	r0, [r2, #6]
	  DPS368.temp.offset = config.DPS368_t_offset;
 8007f3e:	f8d3 0033 	ldr.w	r0, [r3, #51]	@ 0x33
 8007f42:	f8c8 0006 	str.w	r0, [r8, #6]
	  TMP117.sensor_use = config.TMP117_use;
 8007f46:	0060      	lsls	r0, r4, #1
 8007f48:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 8007f4c:	f3c4 1440 	ubfx	r4, r4, #5, #1
	  MS8607.sensor_use = config.MS8607_use;
 8007f50:	9d01      	ldr	r5, [sp, #4]
	  MS8607.press.use_meas = config.MS8607_p_use;
 8007f52:	f892 9013 	ldrb.w	r9, [r2, #19]
	  TMP117.sensor_use = config.TMP117_use;
 8007f56:	f42e 7e9f 	bic.w	lr, lr, #318	@ 0x13e
 8007f5a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8007f5e:	ea40 000e 	orr.w	r0, r0, lr
	  BME280.sensor_use = config.BME280_use;
 8007f62:	007c      	lsls	r4, r7, #1
	  TMP117.sensor_use = config.TMP117_use;
 8007f64:	f8ac 0000 	strh.w	r0, [ip]
	  BME280.sensor_use = config.BME280_use;
 8007f68:	f004 043e 	and.w	r4, r4, #62	@ 0x3e
	  MS8607.sensor_use = config.MS8607_use;
 8007f6c:	ea4f 0c45 	mov.w	ip, r5, lsl #1
	  BME280.sensor_use = config.BME280_use;
 8007f70:	f3c7 1540 	ubfx	r5, r7, #5, #1
 8007f74:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8007f78:	9d02      	ldr	r5, [sp, #8]
	  SHT3.sensor_use = config.SHT3_use;
 8007f7a:	9800      	ldr	r0, [sp, #0]
	  BME280.sensor_use = config.BME280_use;
 8007f7c:	432c      	orrs	r4, r5
 8007f7e:	800c      	strh	r4, [r1, #0]
	  SHT3.sensor_use = config.SHT3_use;
 8007f80:	9c00      	ldr	r4, [sp, #0]
 8007f82:	9d03      	ldr	r5, [sp, #12]
 8007f84:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 8007f88:	f3c4 1440 	ubfx	r4, r4, #5, #1
 8007f8c:	f00e 0e3e 	and.w	lr, lr, #62	@ 0x3e
 8007f90:	ea4e 2e04 	orr.w	lr, lr, r4, lsl #8
 8007f94:	ea4e 0e05 	orr.w	lr, lr, r5
	  MS8607.sensor_use = config.MS8607_use;
 8007f98:	9d01      	ldr	r5, [sp, #4]
	  SHT3.sensor_use = config.SHT3_use;
 8007f9a:	f8a6 e000 	strh.w	lr, [r6]
	  MS8607.sensor_use = config.MS8607_use;
 8007f9e:	f00c 0c3e 	and.w	ip, ip, #62	@ 0x3e
 8007fa2:	f3c5 1e40 	ubfx	lr, r5, #5, #1
 8007fa6:	9d04      	ldr	r5, [sp, #16]
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8007fa8:	9c00      	ldr	r4, [sp, #0]
	  MS8607.sensor_use = config.MS8607_use;
 8007faa:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 8007fae:	ea4c 0c05 	orr.w	ip, ip, r5
	  DPS368.sensor_use = config.DPS368_use;
 8007fb2:	ea4f 004b 	mov.w	r0, fp, lsl #1
	  MS8607.sensor_use = config.MS8607_use;
 8007fb6:	f8a2 c000 	strh.w	ip, [r2]
	  DPS368.sensor_use = config.DPS368_use;
 8007fba:	9d05      	ldr	r5, [sp, #20]
 8007fbc:	f3cb 1c40 	ubfx	ip, fp, #5, #1
 8007fc0:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 8007fc4:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8007fc8:	4328      	orrs	r0, r5
 8007fca:	f8a8 0000 	strh.w	r0, [r8]
	  SHT3.temp.offset = config.SHT3_t_offset;
 8007fce:	6918      	ldr	r0, [r3, #16]
 8007fd0:	f8c6 0006 	str.w	r0, [r6, #6]
	  MS8607.press.use_meas = config.MS8607_p_use;
 8007fd4:	9d01      	ldr	r5, [sp, #4]
	  BME280.press.offset = config.BME280_p_offset;
 8007fd6:	f8d3 002e 	ldr.w	r0, [r3, #46]	@ 0x2e
 8007fda:	6188      	str	r0, [r1, #24]
	  BME280.press.use_meas = config.BME280_p_use;
 8007fdc:	ea4f 1ed7 	mov.w	lr, r7, lsr #7
 8007fe0:	f36e 0a00 	bfi	sl, lr, #0, #1
	  MS8607.press.use_meas = config.MS8607_p_use;
 8007fe4:	ea4f 1ed5 	mov.w	lr, r5, lsr #7
	  MS8607.press.offset = config.MS8607_p_offset;
 8007fe8:	f8d3 0021 	ldr.w	r0, [r3, #33]	@ 0x21
 8007fec:	6190      	str	r0, [r2, #24]
	  MS8607.press.use_meas = config.MS8607_p_use;
 8007fee:	f36e 0900 	bfi	r9, lr, #0, #1
	  BME280.press.use_meas = config.BME280_p_use;
 8007ff2:	f881 a013 	strb.w	sl, [r1, #19]
	  MS8607.press.use_meas = config.MS8607_p_use;
 8007ff6:	f882 9013 	strb.w	r9, [r2, #19]
	  DPS368.press.offset = config.DPS368_p_offset;
 8007ffa:	f8d3 0037 	ldr.w	r0, [r3, #55]	@ 0x37
 8007ffe:	f8c8 000f 	str.w	r0, [r8, #15]
	  BME280.hum.offset = config.BME280_h_offset;
 8008002:	f8d3 002a 	ldr.w	r0, [r3, #42]	@ 0x2a
 8008006:	f8c1 000f 	str.w	r0, [r1, #15]
	  MS8607.hum.offset = config.MS8607_h_offset;
 800800a:	f8d3 001d 	ldr.w	r0, [r3, #29]
	  SHT3.hum.offset = config.SHT3_h_offset;
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	f8c6 300f 	str.w	r3, [r6, #15]
	  DPS368.press.use_meas = config.DPS368_p_use;
 8008014:	f898 300a 	ldrb.w	r3, [r8, #10]
	  MS8607.hum.offset = config.MS8607_h_offset;
 8008018:	f8c2 000f 	str.w	r0, [r2, #15]
	  DPS368.press.use_meas = config.DPS368_p_use;
 800801c:	f3cb 1c80 	ubfx	ip, fp, #6, #1
 8008020:	f36c 0300 	bfi	r3, ip, #0, #1
 8008024:	f888 300a 	strb.w	r3, [r8, #10]
	  BME280.hum.use_meas = config.BME280_h_use;
 8008028:	7a8b      	ldrb	r3, [r1, #10]
 800802a:	f3c7 1780 	ubfx	r7, r7, #6, #1
 800802e:	f367 0300 	bfi	r3, r7, #0, #1
 8008032:	728b      	strb	r3, [r1, #10]
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8008034:	7ab1      	ldrb	r1, [r6, #10]
	  MS8607.hum.use_meas = config.MS8607_h_use;
 8008036:	7a93      	ldrb	r3, [r2, #10]
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8008038:	f3c4 1480 	ubfx	r4, r4, #6, #1
	  MS8607.hum.use_meas = config.MS8607_h_use;
 800803c:	f3c5 1580 	ubfx	r5, r5, #6, #1
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8008040:	f364 0100 	bfi	r1, r4, #0, #1
	  MS8607.hum.use_meas = config.MS8607_h_use;
 8008044:	f365 0300 	bfi	r3, r5, #0, #1
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8008048:	72b1      	strb	r1, [r6, #10]
	  MS8607.hum.use_meas = config.MS8607_h_use;
 800804a:	7293      	strb	r3, [r2, #10]
}
 800804c:	b007      	add	sp, #28
 800804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008052:	bf00      	nop
 8008054:	20001b60 	.word	0x20001b60
 8008058:	200019c0 	.word	0x200019c0
 800805c:	20001ba8 	.word	0x20001ba8
 8008060:	20001b84 	.word	0x20001b84
 8008064:	20001b48 	.word	0x20001b48
 8008068:	20001bc0 	.word	0x20001bc0

0800806c <time_to_unix>:
{
 800806c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t year = tm->Year-1970;
 8008070:	8805      	ldrh	r5, [r0, #0]
	seconds= year*(SECS_PER_DAY * 365);
 8008072:	4a36      	ldr	r2, [pc, #216]	@ (800814c <time_to_unix+0xe0>)
	uint16_t year = tm->Year-1970;
 8008074:	f2a5 75b2 	subw	r5, r5, #1970	@ 0x7b2
 8008078:	b2ad      	uxth	r5, r5
{
 800807a:	4686      	mov	lr, r0
	seconds= year*(SECS_PER_DAY * 365);
 800807c:	fb05 f202 	mul.w	r2, r5, r2
	for (i = 0; i < year; i++) {
 8008080:	b1cd      	cbz	r5, 80080b6 <time_to_unix+0x4a>
		if (LEAP_YEAR(i)) {
 8008082:	4c33      	ldr	r4, [pc, #204]	@ (8008150 <time_to_unix+0xe4>)
 8008084:	4833      	ldr	r0, [pc, #204]	@ (8008154 <time_to_unix+0xe8>)
 8008086:	4e34      	ldr	r6, [pc, #208]	@ (8008158 <time_to_unix+0xec>)
 8008088:	f205 7cb2 	addw	ip, r5, #1970	@ 0x7b2
	for (i = 0; i < year; i++) {
 800808c:	f240 73b2 	movw	r3, #1970	@ 0x7b2
		if (LEAP_YEAR(i)) {
 8008090:	f013 0f03 	tst.w	r3, #3
 8008094:	fb04 f103 	mul.w	r1, r4, r3
	for (i = 0; i < year; i++) {
 8008098:	f103 0301 	add.w	r3, r3, #1
		if (LEAP_YEAR(i)) {
 800809c:	d109      	bne.n	80080b2 <time_to_unix+0x46>
 800809e:	ebb0 0fb1 	cmp.w	r0, r1, ror #2
 80080a2:	d302      	bcc.n	80080aa <time_to_unix+0x3e>
 80080a4:	ebb6 1f31 	cmp.w	r6, r1, ror #4
 80080a8:	d303      	bcc.n	80080b2 <time_to_unix+0x46>
		  seconds +=  SECS_PER_DAY;   // add extra days for leap years
 80080aa:	f502 32a8 	add.w	r2, r2, #86016	@ 0x15000
 80080ae:	f502 72c0 	add.w	r2, r2, #384	@ 0x180
	for (i = 0; i < year; i++) {
 80080b2:	459c      	cmp	ip, r3
 80080b4:	d1ec      	bne.n	8008090 <time_to_unix+0x24>
	for (i = 1; i < tm->Month; i++) {
 80080b6:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80080ba:	2801      	cmp	r0, #1
 80080bc:	d92e      	bls.n	800811c <time_to_unix+0xb0>
		if ( (i == 2) && LEAP_YEAR(year)) {
 80080be:	4e27      	ldr	r6, [pc, #156]	@ (800815c <time_to_unix+0xf0>)
 80080c0:	4927      	ldr	r1, [pc, #156]	@ (8008160 <time_to_unix+0xf4>)
		  seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 80080c2:	4c28      	ldr	r4, [pc, #160]	@ (8008164 <time_to_unix+0xf8>)
		if ( (i == 2) && LEAP_YEAR(year)) {
 80080c4:	f205 75b2 	addw	r5, r5, #1970	@ 0x7b2
 80080c8:	fba6 3605 	umull	r3, r6, r6, r5
 80080cc:	0976      	lsrs	r6, r6, #5
 80080ce:	2364      	movs	r3, #100	@ 0x64
 80080d0:	fb03 5616 	mls	r6, r3, r6, r5
 80080d4:	f005 0703 	and.w	r7, r5, #3
	for (i = 1; i < tm->Month; i++) {
 80080d8:	2301      	movs	r3, #1
 80080da:	e008      	b.n	80080ee <time_to_unix+0x82>
		  seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 80080dc:	f891 c000 	ldrb.w	ip, [r1]
	for (i = 1; i < tm->Month; i++) {
 80080e0:	3301      	adds	r3, #1
 80080e2:	4283      	cmp	r3, r0
		  seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 80080e4:	fb04 220c 	mla	r2, r4, ip, r2
	for (i = 1; i < tm->Month; i++) {
 80080e8:	f101 0101 	add.w	r1, r1, #1
 80080ec:	d016      	beq.n	800811c <time_to_unix+0xb0>
		if ( (i == 2) && LEAP_YEAR(year)) {
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d1f4      	bne.n	80080dc <time_to_unix+0x70>
 80080f2:	2f00      	cmp	r7, #0
 80080f4:	d1f2      	bne.n	80080dc <time_to_unix+0x70>
		  seconds += SECS_PER_DAY * 29;
 80080f6:	f8df c058 	ldr.w	ip, [pc, #88]	@ 8008150 <time_to_unix+0xe4>
		if ( (i == 2) && LEAP_YEAR(year)) {
 80080fa:	b936      	cbnz	r6, 800810a <time_to_unix+0x9e>
 80080fc:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 8008158 <time_to_unix+0xec>
 8008100:	fb0c fc05 	mul.w	ip, ip, r5
 8008104:	ebb8 1f3c 	cmp.w	r8, ip, ror #4
 8008108:	d3e8      	bcc.n	80080dc <time_to_unix+0x70>
	for (i = 1; i < tm->Month; i++) {
 800810a:	3301      	adds	r3, #1
		  seconds += SECS_PER_DAY * 29;
 800810c:	f502 1218 	add.w	r2, r2, #2490368	@ 0x260000
	for (i = 1; i < tm->Month; i++) {
 8008110:	4283      	cmp	r3, r0
		  seconds += SECS_PER_DAY * 29;
 8008112:	f502 526e 	add.w	r2, r2, #15232	@ 0x3b80
	for (i = 1; i < tm->Month; i++) {
 8008116:	f101 0101 	add.w	r1, r1, #1
 800811a:	d1e8      	bne.n	80080ee <time_to_unix+0x82>
	seconds+= tm->Min * SECS_PER_MIN;
 800811c:	f89e 3006 	ldrb.w	r3, [lr, #6]
	seconds+= tm->Hour * SECS_PER_HOUR;
 8008120:	f89e 1005 	ldrb.w	r1, [lr, #5]
	seconds+= tm->Min * SECS_PER_MIN;
 8008124:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	seconds+= tm->Hour * SECS_PER_HOUR;
 8008128:	f44f 6461 	mov.w	r4, #3600	@ 0xe10
	seconds+= tm->Min * SECS_PER_MIN;
 800812c:	0098      	lsls	r0, r3, #2
	seconds+= tm->Sec;
 800812e:	fb04 0001 	mla	r0, r4, r1, r0
	seconds+= (tm->Day-1) * SECS_PER_DAY;
 8008132:	f89e 3004 	ldrb.w	r3, [lr, #4]
	seconds+= tm->Sec;
 8008136:	f89e 4007 	ldrb.w	r4, [lr, #7]
	seconds+= (tm->Day-1) * SECS_PER_DAY;
 800813a:	490a      	ldr	r1, [pc, #40]	@ (8008164 <time_to_unix+0xf8>)
	seconds+= tm->Sec;
 800813c:	4420      	add	r0, r4
	seconds+= (tm->Day-1) * SECS_PER_DAY;
 800813e:	3b01      	subs	r3, #1
	seconds+= tm->Sec;
 8008140:	fb01 0003 	mla	r0, r1, r3, r0
}
 8008144:	4410      	add	r0, r2
 8008146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800814a:	bf00      	nop
 800814c:	01e13380 	.word	0x01e13380
 8008150:	c28f5c29 	.word	0xc28f5c29
 8008154:	028f5c28 	.word	0x028f5c28
 8008158:	00a3d70a 	.word	0x00a3d70a
 800815c:	51eb851f 	.word	0x51eb851f
 8008160:	080172f8 	.word	0x080172f8
 8008164:	00015180 	.word	0x00015180

08008168 <SendTestMessage>:
{
 8008168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800816c:	ed2d 8b02 	vpush	{d8}
	printf("UID: %lx\r\n", GPRS_status_frame.UID);
 8008170:	4cbd      	ldr	r4, [pc, #756]	@ (8008468 <SendTestMessage+0x300>)
{
 8008172:	b082      	sub	sp, #8
	Sim80x_GetTime();		// pobranie czasu z RTC sim868
 8008174:	f7fa fc18 	bl	80029a8 <Sim80x_GetTime>
	printf("UID: %lx\r\n", GPRS_status_frame.UID);
 8008178:	6861      	ldr	r1, [r4, #4]
 800817a:	48bc      	ldr	r0, [pc, #752]	@ (800846c <SendTestMessage+0x304>)
 800817c:	f008 fdd2 	bl	8010d24 <iprintf>
	printf("Token: %x\r\n", GPRS_status_frame.token);
 8008180:	8821      	ldrh	r1, [r4, #0]
 8008182:	48bb      	ldr	r0, [pc, #748]	@ (8008470 <SendTestMessage+0x308>)
 8008184:	f008 fdce 	bl	8010d24 <iprintf>
	GPRS_status_frame.timestamp = time_to_unix(&Sim80x.Gsm.Time); printf("Timestamp (status): %lu\r\n", GPRS_status_frame.timestamp);
 8008188:	48ba      	ldr	r0, [pc, #744]	@ (8008474 <SendTestMessage+0x30c>)
 800818a:	f7ff ff6f 	bl	800806c <time_to_unix>
 800818e:	4601      	mov	r1, r0
 8008190:	48b9      	ldr	r0, [pc, #740]	@ (8008478 <SendTestMessage+0x310>)
 8008192:	61a1      	str	r1, [r4, #24]
 8008194:	f008 fdc6 	bl	8010d24 <iprintf>
	GPRS_status_frame.MCU_temp = GET_MCU_Temp(); printf("MCU Temp: %.2f\r\n", GPRS_status_frame.MCU_temp);
 8008198:	f7fb f97a 	bl	8003490 <GET_MCU_Temp>
 800819c:	ee10 0a10 	vmov	r0, s0
 80081a0:	ed84 0a03 	vstr	s0, [r4, #12]
 80081a4:	f7f8 fa10 	bl	80005c8 <__aeabi_f2d>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	48b3      	ldr	r0, [pc, #716]	@ (800847c <SendTestMessage+0x314>)
 80081ae:	f008 fdb9 	bl	8010d24 <iprintf>
	GPRS_status_frame.send_type = STATUS; printf("Frame type (status): %u\r\n", GPRS_status_frame.send_type);
 80081b2:	2114      	movs	r1, #20
 80081b4:	48b2      	ldr	r0, [pc, #712]	@ (8008480 <SendTestMessage+0x318>)
 80081b6:	7221      	strb	r1, [r4, #8]
 80081b8:	f008 fdb4 	bl	8010d24 <iprintf>
	GPRS_status_frame.Vac1 = BQ25798_Vac2_read(); printf("AC1 Voltage: %u\r\n", GPRS_status_frame.Vac1);
 80081bc:	f7fb fdf0 	bl	8003da0 <BQ25798_Vac2_read>
 80081c0:	4601      	mov	r1, r0
 80081c2:	48b0      	ldr	r0, [pc, #704]	@ (8008484 <SendTestMessage+0x31c>)
 80081c4:	8261      	strh	r1, [r4, #18]
 80081c6:	f008 fdad 	bl	8010d24 <iprintf>
	GPRS_status_frame.Vac2 = BQ25798_Vac2_read(); printf("AC2 Voltage: %u\r\n", GPRS_status_frame.Vac2);
 80081ca:	f7fb fde9 	bl	8003da0 <BQ25798_Vac2_read>
 80081ce:	4601      	mov	r1, r0
 80081d0:	48ad      	ldr	r0, [pc, #692]	@ (8008488 <SendTestMessage+0x320>)
 80081d2:	82a1      	strh	r1, [r4, #20]
 80081d4:	f008 fda6 	bl	8010d24 <iprintf>
	GPRS_status_frame.Vbat = BQ25798_Vbat_read(); printf("BAT Voltage: %u\r\n", GPRS_status_frame.Vbat);
 80081d8:	f7fb fdac 	bl	8003d34 <BQ25798_Vbat_read>
 80081dc:	4601      	mov	r1, r0
 80081de:	48ab      	ldr	r0, [pc, #684]	@ (800848c <SendTestMessage+0x324>)
 80081e0:	8221      	strh	r1, [r4, #16]
 80081e2:	f008 fd9f 	bl	8010d24 <iprintf>
	GPRS_status_frame.charg_state = charger_state; printf("Chrg state: %u\r\n", GPRS_status_frame.charg_state);
 80081e6:	4baa      	ldr	r3, [pc, #680]	@ (8008490 <SendTestMessage+0x328>)
 80081e8:	48aa      	ldr	r0, [pc, #680]	@ (8008494 <SendTestMessage+0x32c>)
 80081ea:	7819      	ldrb	r1, [r3, #0]
 80081ec:	b2c9      	uxtb	r1, r1
 80081ee:	75a1      	strb	r1, [r4, #22]
 80081f0:	f104 051f 	add.w	r5, r4, #31
 80081f4:	f008 fd96 	bl	8010d24 <iprintf>
    for (uint32_t i = 0; i < length; i++)
 80081f8:	1e60      	subs	r0, r4, #1
    uint8_t crc = 0xFF;
 80081fa:	21ff      	movs	r1, #255	@ 0xff
        crc ^= data[i];
 80081fc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008200:	2308      	movs	r3, #8
 8008202:	4051      	eors	r1, r2
            if (crc & 0x80)
 8008204:	f011 0f80 	tst.w	r1, #128	@ 0x80
                crc <<= 1;
 8008208:	ea4f 0241 	mov.w	r2, r1, lsl #1
                crc = (crc << 1) ^ 0x31;
 800820c:	bf1c      	itt	ne
 800820e:	0049      	lslne	r1, r1, #1
 8008210:	f081 0131 	eorne.w	r1, r1, #49	@ 0x31
        for (uint8_t j = 0; j < 8; j++)
 8008214:	f103 33ff 	add.w	r3, r3, #4294967295
                crc <<= 1;
 8008218:	bf0c      	ite	eq
 800821a:	b2d1      	uxtbeq	r1, r2
                crc = (crc << 1) ^ 0x31;
 800821c:	b2c9      	uxtbne	r1, r1
        for (uint8_t j = 0; j < 8; j++)
 800821e:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8008222:	d1ef      	bne.n	8008204 <SendTestMessage+0x9c>
    for (uint32_t i = 0; i < length; i++)
 8008224:	4285      	cmp	r5, r0
 8008226:	d1e9      	bne.n	80081fc <SendTestMessage+0x94>
	GPRS_status_frame.crc = calculate_crc_for_GPRS_status(&GPRS_status_frame); printf("CRC (status): %x\r\n", GPRS_status_frame.crc);
 8008228:	489b      	ldr	r0, [pc, #620]	@ (8008498 <SendTestMessage+0x330>)
 800822a:	7721      	strb	r1, [r4, #28]
 800822c:	f008 fd7a 	bl	8010d24 <iprintf>
	printf("Wielkosc ramki (status): %u\r\n", sizeof(GPRS_status_frame));
 8008230:	2120      	movs	r1, #32
 8008232:	489a      	ldr	r0, [pc, #616]	@ (800849c <SendTestMessage+0x334>)
	GPRS_GPS_frame.timestamp = time_to_unix(&Sim80x.Gsm.Time); printf("Timestamp (GPS): %lu\r\n", GPRS_GPS_frame.timestamp);
 8008234:	4d9a      	ldr	r5, [pc, #616]	@ (80084a0 <SendTestMessage+0x338>)
	GPRS_GPS_frame.lat = (float)(Sim80x.GPS.Lat * 0.01f); printf("Latitude (GPS): %.6f\r\n", GPRS_GPS_frame.lat);
 8008236:	4c9b      	ldr	r4, [pc, #620]	@ (80084a4 <SendTestMessage+0x33c>)
 8008238:	ed9f 8a9b 	vldr	s16, [pc, #620]	@ 80084a8 <SendTestMessage+0x340>
	printf("Wielkosc ramki (status): %u\r\n", sizeof(GPRS_status_frame));
 800823c:	f008 fd72 	bl	8010d24 <iprintf>
	printf("---------------------------\r\n");
 8008240:	489a      	ldr	r0, [pc, #616]	@ (80084ac <SendTestMessage+0x344>)
 8008242:	f008 fdd7 	bl	8010df4 <puts>
	GPRS_GPS_frame.timestamp = time_to_unix(&Sim80x.Gsm.Time); printf("Timestamp (GPS): %lu\r\n", GPRS_GPS_frame.timestamp);
 8008246:	488b      	ldr	r0, [pc, #556]	@ (8008474 <SendTestMessage+0x30c>)
 8008248:	f7ff ff10 	bl	800806c <time_to_unix>
 800824c:	4601      	mov	r1, r0
 800824e:	4898      	ldr	r0, [pc, #608]	@ (80084b0 <SendTestMessage+0x348>)
 8008250:	61a9      	str	r1, [r5, #24]
 8008252:	f008 fd67 	bl	8010d24 <iprintf>
	GPRS_GPS_frame.lat = (float)(Sim80x.GPS.Lat * 0.01f); printf("Latitude (GPS): %.6f\r\n", GPRS_GPS_frame.lat);
 8008256:	f8d4 3b40 	ldr.w	r3, [r4, #2880]	@ 0xb40
 800825a:	ee07 3a90 	vmov	s15, r3
 800825e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008262:	f105 061f 	add.w	r6, r5, #31
 8008266:	ee67 7a88 	vmul.f32	s15, s15, s16
 800826a:	ee17 0a90 	vmov	r0, s15
 800826e:	edc5 7a03 	vstr	s15, [r5, #12]
 8008272:	f7f8 f9a9 	bl	80005c8 <__aeabi_f2d>
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	488e      	ldr	r0, [pc, #568]	@ (80084b4 <SendTestMessage+0x34c>)
 800827c:	f008 fd52 	bl	8010d24 <iprintf>
	GPRS_GPS_frame.lon = (float)(Sim80x.GPS.Lon * 0.01f); printf("Longtitude (GPS): %.6f\r\n", GPRS_GPS_frame.lon);
 8008280:	f8d4 3b44 	ldr.w	r3, [r4, #2884]	@ 0xb44
 8008284:	ee07 3a90 	vmov	s15, r3
 8008288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800828c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8008290:	ee17 0a90 	vmov	r0, s15
 8008294:	edc5 7a04 	vstr	s15, [r5, #16]
 8008298:	f7f8 f996 	bl	80005c8 <__aeabi_f2d>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4885      	ldr	r0, [pc, #532]	@ (80084b8 <SendTestMessage+0x350>)
 80082a2:	f008 fd3f 	bl	8010d24 <iprintf>
	GPRS_GPS_frame.sats = Sim80x.GPS.SatInUse; printf("SAT count: %u\r\n", GPRS_GPS_frame.sats);
 80082a6:	f894 1b4c 	ldrb.w	r1, [r4, #2892]	@ 0xb4c
 80082aa:	4884      	ldr	r0, [pc, #528]	@ (80084bc <SendTestMessage+0x354>)
 80082ac:	7529      	strb	r1, [r5, #20]
 80082ae:	f008 fd39 	bl	8010d24 <iprintf>
	GPRS_GPS_frame.fix = Sim80x.GPS.Fix; printf("FIX type: %u\r\n", GPRS_GPS_frame.fix);
 80082b2:	f894 1b32 	ldrb.w	r1, [r4, #2866]	@ 0xb32
 80082b6:	4882      	ldr	r0, [pc, #520]	@ (80084c0 <SendTestMessage+0x358>)
 80082b8:	7569      	strb	r1, [r5, #21]
 80082ba:	f008 fd33 	bl	8010d24 <iprintf>
	GPRS_GPS_frame.send_type = LOCALIZE; printf("Frame type (GPS): %u\r\n", GPRS_GPS_frame.send_type);
 80082be:	2115      	movs	r1, #21
 80082c0:	4880      	ldr	r0, [pc, #512]	@ (80084c4 <SendTestMessage+0x35c>)
 80082c2:	7229      	strb	r1, [r5, #8]
 80082c4:	f008 fd2e 	bl	8010d24 <iprintf>
    for (uint32_t i = 0; i < length; i++)
 80082c8:	1e68      	subs	r0, r5, #1
    uint8_t crc = 0xFF;
 80082ca:	21ff      	movs	r1, #255	@ 0xff
        crc ^= data[i];
 80082cc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80082d0:	2308      	movs	r3, #8
 80082d2:	4051      	eors	r1, r2
            if (crc & 0x80)
 80082d4:	f011 0f80 	tst.w	r1, #128	@ 0x80
                crc <<= 1;
 80082d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
                crc = (crc << 1) ^ 0x31;
 80082dc:	bf1c      	itt	ne
 80082de:	0049      	lslne	r1, r1, #1
 80082e0:	f081 0131 	eorne.w	r1, r1, #49	@ 0x31
        for (uint8_t j = 0; j < 8; j++)
 80082e4:	f103 33ff 	add.w	r3, r3, #4294967295
                crc <<= 1;
 80082e8:	bf0c      	ite	eq
 80082ea:	b2d1      	uxtbeq	r1, r2
                crc = (crc << 1) ^ 0x31;
 80082ec:	b2c9      	uxtbne	r1, r1
        for (uint8_t j = 0; j < 8; j++)
 80082ee:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 80082f2:	d1ef      	bne.n	80082d4 <SendTestMessage+0x16c>
    for (uint32_t i = 0; i < length; i++)
 80082f4:	4286      	cmp	r6, r0
 80082f6:	d1e9      	bne.n	80082cc <SendTestMessage+0x164>
	GPRS_GPS_frame.crc = calculate_crc_for_GPRS_GPS(&GPRS_GPS_frame); printf("CRC (GPS): %x\r\n", GPRS_GPS_frame.crc);
 80082f8:	4873      	ldr	r0, [pc, #460]	@ (80084c8 <SendTestMessage+0x360>)
 80082fa:	9301      	str	r3, [sp, #4]
 80082fc:	7729      	strb	r1, [r5, #28]
 80082fe:	f008 fd11 	bl	8010d24 <iprintf>
	printf("Wielkosc ramki (GPS): %u\r\n", sizeof(GPRS_GPS_frame));
 8008302:	2120      	movs	r1, #32
 8008304:	4871      	ldr	r0, [pc, #452]	@ (80084cc <SendTestMessage+0x364>)
		GPRS_SendRaw((uint8_t*)&GPRS_status_frame, sizeof(GPRS_status_frame));
 8008306:	f8df 8160 	ldr.w	r8, [pc, #352]	@ 8008468 <SendTestMessage+0x300>
		GPRS_SendRaw((uint8_t*)&GPRS_GPS_frame, sizeof(GPRS_GPS_frame));
 800830a:	4f65      	ldr	r7, [pc, #404]	@ (80084a0 <SendTestMessage+0x338>)
	printf("Wielkosc ramki (GPS): %u\r\n", sizeof(GPRS_GPS_frame));
 800830c:	f008 fd0a 	bl	8010d24 <iprintf>
	printf("---------------------------\r\n");
 8008310:	4866      	ldr	r0, [pc, #408]	@ (80084ac <SendTestMessage+0x344>)
 8008312:	f008 fd6f 	bl	8010df4 <puts>
	Sim80x.GPRS.SendStatus = GPRSSendData_Idle;
 8008316:	9b01      	ldr	r3, [sp, #4]
 8008318:	f884 382c 	strb.w	r3, [r4, #2092]	@ 0x82c
 800831c:	2605      	movs	r6, #5
		GPRS_SendRaw((uint8_t*)&GPRS_status_frame, sizeof(GPRS_status_frame));
 800831e:	2120      	movs	r1, #32
 8008320:	4640      	mov	r0, r8
 8008322:	f7f9 fcbd 	bl	8001ca0 <GPRS_SendRaw>
		osDelay(1000);
 8008326:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800832a:	f005 fd33 	bl	800dd94 <osDelay>
		GPRS_SendRaw((uint8_t*)&GPRS_GPS_frame, sizeof(GPRS_GPS_frame));
 800832e:	2120      	movs	r1, #32
 8008330:	4638      	mov	r0, r7
 8008332:	f7f9 fcb5 	bl	8001ca0 <GPRS_SendRaw>
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 8008336:	2500      	movs	r5, #0
 8008338:	e004      	b.n	8008344 <SendTestMessage+0x1dc>
			if(++tout >= 100) break;			// break while - tout 10 sekund
 800833a:	3501      	adds	r5, #1
			osDelay(100);
 800833c:	f005 fd2a 	bl	800dd94 <osDelay>
			if(++tout >= 100) break;			// break while - tout 10 sekund
 8008340:	2d64      	cmp	r5, #100	@ 0x64
 8008342:	d009      	beq.n	8008358 <SendTestMessage+0x1f0>
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 8008344:	f894 382c 	ldrb.w	r3, [r4, #2092]	@ 0x82c
 8008348:	2b02      	cmp	r3, #2
			osDelay(100);
 800834a:	f04f 0064 	mov.w	r0, #100	@ 0x64
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 800834e:	d1f4      	bne.n	800833a <SendTestMessage+0x1d2>
		if(tout < 50) {printf("Sending status & localize OK !\r\n"); break;}	// break for
 8008350:	b2ed      	uxtb	r5, r5
 8008352:	2d31      	cmp	r5, #49	@ 0x31
 8008354:	f240 810b 	bls.w	800856e <SendTestMessage+0x406>
	for(int i=0; i<5; ++i) {
 8008358:	3e01      	subs	r6, #1
 800835a:	d1e0      	bne.n	800831e <SendTestMessage+0x1b6>
	if(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 800835c:	f894 382c 	ldrb.w	r3, [r4, #2092]	@ 0x82c
 8008360:	2b02      	cmp	r3, #2
 8008362:	d005      	beq.n	8008370 <SendTestMessage+0x208>
		printf("GPRS Sending status & localize Failed !\r\n");
 8008364:	485a      	ldr	r0, [pc, #360]	@ (80084d0 <SendTestMessage+0x368>)
 8008366:	f008 fd45 	bl	8010df4 <puts>
		gprs_send_status = GPRSsendStatusError;			// ustaw globalny status wysylania na error
 800836a:	4b5a      	ldr	r3, [pc, #360]	@ (80084d4 <SendTestMessage+0x36c>)
 800836c:	2203      	movs	r2, #3
 800836e:	701a      	strb	r2, [r3, #0]
		if(TMP117.present && TMP117.sensor_use){
 8008370:	4a59      	ldr	r2, [pc, #356]	@ (80084d8 <SendTestMessage+0x370>)
 8008372:	7813      	ldrb	r3, [r2, #0]
 8008374:	f003 0303 	and.w	r3, r3, #3
 8008378:	2b03      	cmp	r3, #3
 800837a:	f000 80e3 	beq.w	8008544 <SendTestMessage+0x3dc>
		} else GPRS_meas_frame.meas_frame.sensor1_val = 0.0f;
 800837e:	4d57      	ldr	r5, [pc, #348]	@ (80084dc <SendTestMessage+0x374>)
 8008380:	2300      	movs	r3, #0
 8008382:	60eb      	str	r3, [r5, #12]
		if(BME280.present && BME280.sensor_use){
 8008384:	4a56      	ldr	r2, [pc, #344]	@ (80084e0 <SendTestMessage+0x378>)
 8008386:	7813      	ldrb	r3, [r2, #0]
 8008388:	f003 0303 	and.w	r3, r3, #3
 800838c:	2b03      	cmp	r3, #3
 800838e:	f000 80c8 	beq.w	8008522 <SendTestMessage+0x3ba>
		} else GPRS_meas_frame.meas_frame.sensor2_val = 0.0f;
 8008392:	2300      	movs	r3, #0
 8008394:	612b      	str	r3, [r5, #16]
		if(DPS368.present && DPS368.sensor_use){
 8008396:	4a53      	ldr	r2, [pc, #332]	@ (80084e4 <SendTestMessage+0x37c>)
 8008398:	7813      	ldrb	r3, [r2, #0]
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	2b03      	cmp	r3, #3
 80083a0:	f000 80ae 	beq.w	8008500 <SendTestMessage+0x398>
		} else GPRS_meas_frame.meas_frame.sensor3_val = 0.0f;
 80083a4:	2300      	movs	r3, #0
 80083a6:	616b      	str	r3, [r5, #20]
	GPRS_meas_frame.timestamp = time_to_unix(&Sim80x.Gsm.Time); printf("Timestamp (Meas): %lu\r\n", GPRS_meas_frame.timestamp);
 80083a8:	4832      	ldr	r0, [pc, #200]	@ (8008474 <SendTestMessage+0x30c>)
 80083aa:	f7ff fe5f 	bl	800806c <time_to_unix>
 80083ae:	4601      	mov	r1, r0
 80083b0:	484d      	ldr	r0, [pc, #308]	@ (80084e8 <SendTestMessage+0x380>)
 80083b2:	61a9      	str	r1, [r5, #24]
 80083b4:	f008 fcb6 	bl	8010d24 <iprintf>
	GPRS_meas_frame.meas_frame.send_type = TEMP; printf("Frame type (Meas): %u\r\n", GPRS_meas_frame.meas_frame.send_type);
 80083b8:	2116      	movs	r1, #22
 80083ba:	484c      	ldr	r0, [pc, #304]	@ (80084ec <SendTestMessage+0x384>)
 80083bc:	7229      	strb	r1, [r5, #8]
 80083be:	f008 fcb1 	bl	8010d24 <iprintf>
    for (uint32_t i = 0; i < length; i++)
 80083c2:	484b      	ldr	r0, [pc, #300]	@ (80084f0 <SendTestMessage+0x388>)
    uint8_t crc = 0xFF;
 80083c4:	21ff      	movs	r1, #255	@ 0xff
 80083c6:	f100 0620 	add.w	r6, r0, #32
        crc ^= data[i];
 80083ca:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80083ce:	2308      	movs	r3, #8
 80083d0:	4051      	eors	r1, r2
            if (crc & 0x80)
 80083d2:	f011 0f80 	tst.w	r1, #128	@ 0x80
                crc <<= 1;
 80083d6:	ea4f 0241 	mov.w	r2, r1, lsl #1
                crc = (crc << 1) ^ 0x31;
 80083da:	bf1c      	itt	ne
 80083dc:	0049      	lslne	r1, r1, #1
 80083de:	f081 0131 	eorne.w	r1, r1, #49	@ 0x31
        for (uint8_t j = 0; j < 8; j++)
 80083e2:	f103 33ff 	add.w	r3, r3, #4294967295
                crc <<= 1;
 80083e6:	bf0c      	ite	eq
 80083e8:	b2d1      	uxtbeq	r1, r2
                crc = (crc << 1) ^ 0x31;
 80083ea:	b2c9      	uxtbne	r1, r1
        for (uint8_t j = 0; j < 8; j++)
 80083ec:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 80083f0:	d1ef      	bne.n	80083d2 <SendTestMessage+0x26a>
    for (uint32_t i = 0; i < length; i++)
 80083f2:	42b0      	cmp	r0, r6
 80083f4:	d1e9      	bne.n	80083ca <SendTestMessage+0x262>
	GPRS_meas_frame.crc = calculate_crc_for_GPRS_MEAS(&GPRS_meas_frame); printf("CRC (TEMP): %x\r\n", GPRS_meas_frame.crc);
 80083f6:	483f      	ldr	r0, [pc, #252]	@ (80084f4 <SendTestMessage+0x38c>)
 80083f8:	7729      	strb	r1, [r5, #28]
 80083fa:	f008 fc93 	bl	8010d24 <iprintf>
	printf("Wielkosc ramki (TEMP): %u\r\n", sizeof(GPRS_meas_frame));
 80083fe:	2120      	movs	r1, #32
 8008400:	483d      	ldr	r0, [pc, #244]	@ (80084f8 <SendTestMessage+0x390>)
		GPRS_SendRaw((uint8_t*)&GPRS_meas_frame, sizeof(GPRS_meas_frame));
 8008402:	4f36      	ldr	r7, [pc, #216]	@ (80084dc <SendTestMessage+0x374>)
	printf("Wielkosc ramki (TEMP): %u\r\n", sizeof(GPRS_meas_frame));
 8008404:	f008 fc8e 	bl	8010d24 <iprintf>
	osDelay(500);
 8008408:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800840c:	f005 fcc2 	bl	800dd94 <osDelay>
 8008410:	2605      	movs	r6, #5
		GPRS_SendRaw((uint8_t*)&GPRS_meas_frame, sizeof(GPRS_meas_frame));
 8008412:	2120      	movs	r1, #32
 8008414:	4638      	mov	r0, r7
 8008416:	f7f9 fc43 	bl	8001ca0 <GPRS_SendRaw>
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 800841a:	2500      	movs	r5, #0
 800841c:	e004      	b.n	8008428 <SendTestMessage+0x2c0>
			if(++tout >= 100) break;			// break while - tout 10 sekund
 800841e:	3501      	adds	r5, #1
			osDelay(100);
 8008420:	f005 fcb8 	bl	800dd94 <osDelay>
			if(++tout >= 100) break;			// break while - tout 10 sekund
 8008424:	2d64      	cmp	r5, #100	@ 0x64
 8008426:	d009      	beq.n	800843c <SendTestMessage+0x2d4>
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 8008428:	f894 382c 	ldrb.w	r3, [r4, #2092]	@ 0x82c
 800842c:	2b02      	cmp	r3, #2
			osDelay(100);
 800842e:	f04f 0064 	mov.w	r0, #100	@ 0x64
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 8008432:	d1f4      	bne.n	800841e <SendTestMessage+0x2b6>
		if(tout < 50) {printf("Sending TEMP OK !\r\n"); break;}	// break for
 8008434:	b2ed      	uxtb	r5, r5
 8008436:	2d31      	cmp	r5, #49	@ 0x31
 8008438:	f240 8095 	bls.w	8008566 <SendTestMessage+0x3fe>
	for(int i=0; i<5; ++i) {
 800843c:	3e01      	subs	r6, #1
 800843e:	d1e8      	bne.n	8008412 <SendTestMessage+0x2aa>
	if(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 8008440:	f894 382c 	ldrb.w	r3, [r4, #2092]	@ 0x82c
 8008444:	2b02      	cmp	r3, #2
 8008446:	d005      	beq.n	8008454 <SendTestMessage+0x2ec>
		printf("GPRS Sending TEMP Failed !\r\n");
 8008448:	482c      	ldr	r0, [pc, #176]	@ (80084fc <SendTestMessage+0x394>)
 800844a:	f008 fcd3 	bl	8010df4 <puts>
		gprs_send_status = GPRSsendStatusError;			// ustaw globalny status wysylania na error
 800844e:	4b21      	ldr	r3, [pc, #132]	@ (80084d4 <SendTestMessage+0x36c>)
 8008450:	2203      	movs	r2, #3
 8008452:	701a      	strb	r2, [r3, #0]
	osDelay(5000);			// normalnie zbedny, ale to dla mozliwosci odebrania danych z serwera.
 8008454:	f241 3088 	movw	r0, #5000	@ 0x1388
}
 8008458:	b002      	add	sp, #8
 800845a:	ecbd 8b02 	vpop	{d8}
 800845e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	osDelay(5000);			// normalnie zbedny, ale to dla mozliwosci odebrania danych z serwera.
 8008462:	f005 bc97 	b.w	800dd94 <osDelay>
 8008466:	bf00      	nop
 8008468:	20001af4 	.word	0x20001af4
 800846c:	08016b40 	.word	0x08016b40
 8008470:	08016b4c 	.word	0x08016b4c
 8008474:	2000087e 	.word	0x2000087e
 8008478:	08016b58 	.word	0x08016b58
 800847c:	08016b74 	.word	0x08016b74
 8008480:	08016b88 	.word	0x08016b88
 8008484:	08016ba4 	.word	0x08016ba4
 8008488:	08016bb8 	.word	0x08016bb8
 800848c:	08016bcc 	.word	0x08016bcc
 8008490:	20001bcf 	.word	0x20001bcf
 8008494:	08016be0 	.word	0x08016be0
 8008498:	08016bf4 	.word	0x08016bf4
 800849c:	08016c08 	.word	0x08016c08
 80084a0:	20001ad4 	.word	0x20001ad4
 80084a4:	20000230 	.word	0x20000230
 80084a8:	3c23d70a 	.word	0x3c23d70a
 80084ac:	08016c28 	.word	0x08016c28
 80084b0:	08016c48 	.word	0x08016c48
 80084b4:	08016c60 	.word	0x08016c60
 80084b8:	08016c78 	.word	0x08016c78
 80084bc:	08016c94 	.word	0x08016c94
 80084c0:	08016ca4 	.word	0x08016ca4
 80084c4:	08016cb4 	.word	0x08016cb4
 80084c8:	08016ccc 	.word	0x08016ccc
 80084cc:	08016cdc 	.word	0x08016cdc
 80084d0:	08016d18 	.word	0x08016d18
 80084d4:	2000198d 	.word	0x2000198d
 80084d8:	20001bc0 	.word	0x20001bc0
 80084dc:	20001ab4 	.word	0x20001ab4
 80084e0:	20001b60 	.word	0x20001b60
 80084e4:	20001b48 	.word	0x20001b48
 80084e8:	08016d44 	.word	0x08016d44
 80084ec:	08016d5c 	.word	0x08016d5c
 80084f0:	20001ab3 	.word	0x20001ab3
 80084f4:	08016d74 	.word	0x08016d74
 80084f8:	08016d88 	.word	0x08016d88
 80084fc:	08016db8 	.word	0x08016db8
		  if(DPS368.temp.use_meas) {
 8008500:	7853      	ldrb	r3, [r2, #1]
 8008502:	07db      	lsls	r3, r3, #31
 8008504:	f57f af50 	bpl.w	80083a8 <SendTestMessage+0x240>
			 GPRS_meas_frame.meas_frame.sensor3_val = DPS368.temp.value+DPS368.temp.offset;
 8008508:	f8d2 3002 	ldr.w	r3, [r2, #2]
 800850c:	ee07 3a90 	vmov	s15, r3
 8008510:	f8d2 3006 	ldr.w	r3, [r2, #6]
 8008514:	ee07 3a10 	vmov	s14, r3
 8008518:	ee77 7a87 	vadd.f32	s15, s15, s14
 800851c:	edc5 7a05 	vstr	s15, [r5, #20]
 8008520:	e742      	b.n	80083a8 <SendTestMessage+0x240>
		  if(BME280.temp.use_meas) {
 8008522:	7853      	ldrb	r3, [r2, #1]
 8008524:	07d9      	lsls	r1, r3, #31
 8008526:	f57f af36 	bpl.w	8008396 <SendTestMessage+0x22e>
			 GPRS_meas_frame.meas_frame.sensor2_val = BME280.temp.value+BME280.temp.offset;
 800852a:	f8d2 3002 	ldr.w	r3, [r2, #2]
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	f8d2 3006 	ldr.w	r3, [r2, #6]
 8008536:	ee07 3a10 	vmov	s14, r3
 800853a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800853e:	edc5 7a04 	vstr	s15, [r5, #16]
 8008542:	e728      	b.n	8008396 <SendTestMessage+0x22e>
		  if(TMP117.temp.use_meas) {
 8008544:	7853      	ldrb	r3, [r2, #1]
 8008546:	07d8      	lsls	r0, r3, #31
 8008548:	d515      	bpl.n	8008576 <SendTestMessage+0x40e>
			 GPRS_meas_frame.meas_frame.sensor1_val = TMP117.temp.value+TMP117.temp.offset;
 800854a:	f8d2 3002 	ldr.w	r3, [r2, #2]
 800854e:	4d0b      	ldr	r5, [pc, #44]	@ (800857c <SendTestMessage+0x414>)
 8008550:	ee07 3a90 	vmov	s15, r3
 8008554:	f8d2 3006 	ldr.w	r3, [r2, #6]
 8008558:	ee07 3a10 	vmov	s14, r3
 800855c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008560:	edc5 7a03 	vstr	s15, [r5, #12]
 8008564:	e70e      	b.n	8008384 <SendTestMessage+0x21c>
		if(tout < 50) {printf("Sending TEMP OK !\r\n"); break;}	// break for
 8008566:	4806      	ldr	r0, [pc, #24]	@ (8008580 <SendTestMessage+0x418>)
 8008568:	f008 fc44 	bl	8010df4 <puts>
 800856c:	e768      	b.n	8008440 <SendTestMessage+0x2d8>
		if(tout < 50) {printf("Sending status & localize OK !\r\n"); break;}	// break for
 800856e:	4805      	ldr	r0, [pc, #20]	@ (8008584 <SendTestMessage+0x41c>)
 8008570:	f008 fc40 	bl	8010df4 <puts>
 8008574:	e6f2      	b.n	800835c <SendTestMessage+0x1f4>
 8008576:	4d01      	ldr	r5, [pc, #4]	@ (800857c <SendTestMessage+0x414>)
 8008578:	e704      	b.n	8008384 <SendTestMessage+0x21c>
 800857a:	bf00      	nop
 800857c:	20001ab4 	.word	0x20001ab4
 8008580:	08016da4 	.word	0x08016da4
 8008584:	08016cf8 	.word	0x08016cf8

08008588 <SendMqttMessage>:
{
 8008588:	b570      	push	{r4, r5, r6, lr}
			Sim80x.Gsm.Time.Hour, Sim80x.Gsm.Time.Min, Sim80x.Gsm.Time.Sec);
 800858a:	4d20      	ldr	r5, [pc, #128]	@ (800860c <SendMqttMessage+0x84>)
{
 800858c:	b09c      	sub	sp, #112	@ 0x70
	Sim80x_GetTime();		// pobranie czasu z RTC sim868
 800858e:	f7fa fa0b 	bl	80029a8 <Sim80x_GetTime>
	sprintf(tekst, "Test Wysylania do MQTT, Czas: %02u:%02u:%02u\r\n",
 8008592:	f895 1655 	ldrb.w	r1, [r5, #1621]	@ 0x655
 8008596:	f895 3654 	ldrb.w	r3, [r5, #1620]	@ 0x654
 800859a:	f895 2653 	ldrb.w	r2, [r5, #1619]	@ 0x653
 800859e:	9100      	str	r1, [sp, #0]
 80085a0:	a803      	add	r0, sp, #12
 80085a2:	491b      	ldr	r1, [pc, #108]	@ (8008610 <SendMqttMessage+0x88>)
 80085a4:	f008 fc62 	bl	8010e6c <siprintf>
	Sim80x.GPRS.SendStatus = GPRSSendData_Idle;
 80085a8:	2300      	movs	r3, #0
 80085aa:	f885 382c 	strb.w	r3, [r5, #2092]	@ 0x82c
 80085ae:	2605      	movs	r6, #5
		GPRS_SendRaw((uint8_t*)tekst, strlen(tekst));
 80085b0:	a803      	add	r0, sp, #12
 80085b2:	f7f7 fe9d 	bl	80002f0 <strlen>
 80085b6:	b281      	uxth	r1, r0
 80085b8:	a803      	add	r0, sp, #12
 80085ba:	f7f9 fb71 	bl	8001ca0 <GPRS_SendRaw>
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 80085be:	2400      	movs	r4, #0
 80085c0:	e004      	b.n	80085cc <SendMqttMessage+0x44>
			if(++tout >= 100) break;			// break while - tout 10s
 80085c2:	3401      	adds	r4, #1
			osDelay(100);
 80085c4:	f005 fbe6 	bl	800dd94 <osDelay>
			if(++tout >= 100) break;			// break while - tout 10s
 80085c8:	2c64      	cmp	r4, #100	@ 0x64
 80085ca:	d008      	beq.n	80085de <SendMqttMessage+0x56>
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 80085cc:	f895 382c 	ldrb.w	r3, [r5, #2092]	@ 0x82c
 80085d0:	2b02      	cmp	r3, #2
			osDelay(100);
 80085d2:	f04f 0064 	mov.w	r0, #100	@ 0x64
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 80085d6:	d1f4      	bne.n	80085c2 <SendMqttMessage+0x3a>
		if(tout < 50) {printf("Sending OK !\r\n"); break;}	// break for
 80085d8:	b2e4      	uxtb	r4, r4
 80085da:	2c31      	cmp	r4, #49	@ 0x31
 80085dc:	d911      	bls.n	8008602 <SendMqttMessage+0x7a>
	for(int i=0; i<5; ++i) {
 80085de:	3e01      	subs	r6, #1
 80085e0:	d1e6      	bne.n	80085b0 <SendMqttMessage+0x28>
	if(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 80085e2:	f895 382c 	ldrb.w	r3, [r5, #2092]	@ 0x82c
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d005      	beq.n	80085f6 <SendMqttMessage+0x6e>
		printf("GPRS Sending Failed !\r\n");
 80085ea:	480a      	ldr	r0, [pc, #40]	@ (8008614 <SendMqttMessage+0x8c>)
 80085ec:	f008 fc02 	bl	8010df4 <puts>
		gprs_send_status = GPRSsendStatusError;			// ustaw globalny status wysylania na error
 80085f0:	4b09      	ldr	r3, [pc, #36]	@ (8008618 <SendMqttMessage+0x90>)
 80085f2:	2203      	movs	r2, #3
 80085f4:	701a      	strb	r2, [r3, #0]
	osDelay(5000);			// normalnie zbedny, ale to dla mozliwosci odebrania danych z serwera.
 80085f6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80085fa:	f005 fbcb 	bl	800dd94 <osDelay>
}
 80085fe:	b01c      	add	sp, #112	@ 0x70
 8008600:	bd70      	pop	{r4, r5, r6, pc}
		if(tout < 50) {printf("Sending OK !\r\n"); break;}	// break for
 8008602:	4806      	ldr	r0, [pc, #24]	@ (800861c <SendMqttMessage+0x94>)
 8008604:	f008 fbf6 	bl	8010df4 <puts>
 8008608:	e7eb      	b.n	80085e2 <SendMqttMessage+0x5a>
 800860a:	bf00      	nop
 800860c:	20000230 	.word	0x20000230
 8008610:	08016dd4 	.word	0x08016dd4
 8008614:	08016e14 	.word	0x08016e14
 8008618:	2000198d 	.word	0x2000198d
 800861c:	08016e04 	.word	0x08016e04

08008620 <GprsSendTask>:
{
 8008620:	b570      	push	{r4, r5, r6, lr}
	if(Sim80x.GPRS.Connection < GPRSConnection_GPRSup ||
 8008622:	4d54      	ldr	r5, [pc, #336]	@ (8008774 <GprsSendTask+0x154>)
	gprs_send_status = GPRSsendStatusInprogress;					// ustaw globalny status wysylania na "in progress"
 8008624:	4a54      	ldr	r2, [pc, #336]	@ (8008778 <GprsSendTask+0x158>)
	if(Sim80x.GPRS.Connection < GPRSConnection_GPRSup ||
 8008626:	f895 382b 	ldrb.w	r3, [r5, #2091]	@ 0x82b
 800862a:	3b01      	subs	r3, #1
	gprs_send_status = GPRSsendStatusInprogress;					// ustaw globalny status wysylania na "in progress"
 800862c:	2101      	movs	r1, #1
	if(Sim80x.GPRS.Connection < GPRSConnection_GPRSup ||
 800862e:	2b02      	cmp	r3, #2
	gprs_send_status = GPRSsendStatusInprogress;					// ustaw globalny status wysylania na "in progress"
 8008630:	7011      	strb	r1, [r2, #0]
	if(Sim80x.GPRS.Connection < GPRSConnection_GPRSup ||
 8008632:	d914      	bls.n	800865e <GprsSendTask+0x3e>
		bool status = GPRS_ConnectToNetwork("INTERNET", "", "", false);
 8008634:	4a51      	ldr	r2, [pc, #324]	@ (800877c <GprsSendTask+0x15c>)
 8008636:	4852      	ldr	r0, [pc, #328]	@ (8008780 <GprsSendTask+0x160>)
 8008638:	2300      	movs	r3, #0
 800863a:	4611      	mov	r1, r2
 800863c:	f7f9 fa22 	bl	8001a84 <GPRS_ConnectToNetwork>
		printf("Connect to network: %s\r\n", status ? "OK":"ERROR");
 8008640:	2800      	cmp	r0, #0
 8008642:	d07a      	beq.n	800873a <GprsSendTask+0x11a>
 8008644:	494f      	ldr	r1, [pc, #316]	@ (8008784 <GprsSendTask+0x164>)
 8008646:	4850      	ldr	r0, [pc, #320]	@ (8008788 <GprsSendTask+0x168>)
 8008648:	f008 fb6c 	bl	8010d24 <iprintf>
		printf("Connected to GPRS, IP: %s\r\n", Sim80x.GPRS.LocalIP);
 800864c:	f605 011a 	addw	r1, r5, #2074	@ 0x81a
 8008650:	484e      	ldr	r0, [pc, #312]	@ (800878c <GprsSendTask+0x16c>)
 8008652:	f008 fb67 	bl	8010d24 <iprintf>
		osDelay(250);
 8008656:	20fa      	movs	r0, #250	@ 0xfa
 8008658:	f005 fb9c 	bl	800dd94 <osDelay>
		if(!status) {printf("GPRS ERROR\r\n"); goto error;}
 800865c:	e002      	b.n	8008664 <GprsSendTask+0x44>
	} else printf("GPRS is UP\r\n");
 800865e:	484c      	ldr	r0, [pc, #304]	@ (8008790 <GprsSendTask+0x170>)
 8008660:	f008 fbc8 	bl	8010df4 <puts>
	if(config.sendFormat & 1) {				// normal send
 8008664:	4e4b      	ldr	r6, [pc, #300]	@ (8008794 <GprsSendTask+0x174>)
 8008666:	f896 303c 	ldrb.w	r3, [r6, #60]	@ 0x3c
 800866a:	f003 0203 	and.w	r2, r3, #3
 800866e:	07db      	lsls	r3, r3, #31
 8008670:	d437      	bmi.n	80086e2 <GprsSendTask+0xc2>
	if(config.sendFormat & 2) {				// MQTT send
 8008672:	2a01      	cmp	r2, #1
 8008674:	d80f      	bhi.n	8008696 <GprsSendTask+0x76>
	osDelay(300);
 8008676:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800867a:	f005 fb8b 	bl	800dd94 <osDelay>
	GPRS_DeactivatePDPContext();				// wylacz GPRS
 800867e:	f7f9 f9a1 	bl	80019c4 <GPRS_DeactivatePDPContext>
	osDelay(50);
 8008682:	2032      	movs	r0, #50	@ 0x32
 8008684:	f005 fb86 	bl	800dd94 <osDelay>
	GprsSendTaskFlag = 0;						// odblokuj mozliwosc ponownego uruchomienia tego taska
 8008688:	4b43      	ldr	r3, [pc, #268]	@ (8008798 <GprsSendTask+0x178>)
 800868a:	2000      	movs	r0, #0
}
 800868c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	GprsSendTaskFlag = 0;						// odblokuj mozliwosc ponownego uruchomienia tego taska
 8008690:	7018      	strb	r0, [r3, #0]
	vTaskDelete(NULL);							// usun task z pamieci jako juz zbedny
 8008692:	f005 bd01 	b.w	800e098 <vTaskDelete>
		printf("Connecting to MQTT: %s, port %d - %s\r\n", config.mqttIP, config.mqttPort,
 8008696:	f8b6 40af 	ldrh.w	r4, [r6, #175]	@ 0xaf
				GPRS_ConnectToServer(config.mqttIP, config.mqttPort) ? "IN PROGRESS":"ERROR");
 800869a:	4840      	ldr	r0, [pc, #256]	@ (800879c <GprsSendTask+0x17c>)
 800869c:	4621      	mov	r1, r4
 800869e:	f7f9 fa71 	bl	8001b84 <GPRS_ConnectToServer>
		printf("Connecting to MQTT: %s, port %d - %s\r\n", config.mqttIP, config.mqttPort,
 80086a2:	493f      	ldr	r1, [pc, #252]	@ (80087a0 <GprsSendTask+0x180>)
 80086a4:	4b3f      	ldr	r3, [pc, #252]	@ (80087a4 <GprsSendTask+0x184>)
 80086a6:	4622      	mov	r2, r4
 80086a8:	2800      	cmp	r0, #0
 80086aa:	bf18      	it	ne
 80086ac:	460b      	movne	r3, r1
 80086ae:	493b      	ldr	r1, [pc, #236]	@ (800879c <GprsSendTask+0x17c>)
 80086b0:	483d      	ldr	r0, [pc, #244]	@ (80087a8 <GprsSendTask+0x188>)
 80086b2:	f008 fb37 	bl	8010d24 <iprintf>
		while(Sim80x.GPRS.Connection != GPRSConnection_ConnectOK)	{	// gotowy do wysylania danych ?
 80086b6:	2400      	movs	r4, #0
 80086b8:	e003      	b.n	80086c2 <GprsSendTask+0xa2>
			osDelay(100);
 80086ba:	f005 fb6b 	bl	800dd94 <osDelay>
			if(++tout >= 100) break;			// timeout na 10 sekund
 80086be:	2c64      	cmp	r4, #100	@ 0x64
 80086c0:	d04b      	beq.n	800875a <GprsSendTask+0x13a>
		while(Sim80x.GPRS.Connection != GPRSConnection_ConnectOK)	{	// gotowy do wysylania danych ?
 80086c2:	f895 382b 	ldrb.w	r3, [r5, #2091]	@ 0x82b
 80086c6:	2b03      	cmp	r3, #3
			osDelay(100);
 80086c8:	f04f 0064 	mov.w	r0, #100	@ 0x64
			if(++tout >= 100) break;			// timeout na 10 sekund
 80086cc:	f104 0401 	add.w	r4, r4, #1
		while(Sim80x.GPRS.Connection != GPRSConnection_ConnectOK)	{	// gotowy do wysylania danych ?
 80086d0:	d1f3      	bne.n	80086ba <GprsSendTask+0x9a>
			printf("Connected !\r\n");
 80086d2:	4836      	ldr	r0, [pc, #216]	@ (80087ac <GprsSendTask+0x18c>)
 80086d4:	f008 fb8e 	bl	8010df4 <puts>
			SendMqttMessage();					// serwer MQTT połączony, pogadaj z nim
 80086d8:	f7ff ff56 	bl	8008588 <SendMqttMessage>
			GPRS_DisconnectFromServer();		// rozlacz od serwera
 80086dc:	f7f9 fa8e 	bl	8001bfc <GPRS_DisconnectFromServer>
 80086e0:	e7c9      	b.n	8008676 <GprsSendTask+0x56>
		printf("Connecting to server: %s, port %d - %s\r\n", config.serverIP, config.serverPort,
 80086e2:	f8b6 407d 	ldrh.w	r4, [r6, #125]	@ 0x7d
				GPRS_ConnectToServer(config.serverIP, config.serverPort) ? "IN PROGRESS":"ERROR");
 80086e6:	f106 004d 	add.w	r0, r6, #77	@ 0x4d
 80086ea:	4621      	mov	r1, r4
 80086ec:	f7f9 fa4a 	bl	8001b84 <GPRS_ConnectToServer>
		printf("Connecting to server: %s, port %d - %s\r\n", config.serverIP, config.serverPort,
 80086f0:	492b      	ldr	r1, [pc, #172]	@ (80087a0 <GprsSendTask+0x180>)
 80086f2:	4b2c      	ldr	r3, [pc, #176]	@ (80087a4 <GprsSendTask+0x184>)
 80086f4:	4622      	mov	r2, r4
 80086f6:	2800      	cmp	r0, #0
 80086f8:	bf18      	it	ne
 80086fa:	460b      	movne	r3, r1
 80086fc:	482c      	ldr	r0, [pc, #176]	@ (80087b0 <GprsSendTask+0x190>)
 80086fe:	f106 014d 	add.w	r1, r6, #77	@ 0x4d
 8008702:	f008 fb0f 	bl	8010d24 <iprintf>
		while(Sim80x.GPRS.Connection != GPRSConnection_ConnectOK)	{	// gotowy do wysylania danych ?
 8008706:	2400      	movs	r4, #0
 8008708:	e003      	b.n	8008712 <GprsSendTask+0xf2>
			osDelay(100);
 800870a:	f005 fb43 	bl	800dd94 <osDelay>
			if(++tout >= 100) break;			// timeout na 10 sekund
 800870e:	2c64      	cmp	r4, #100	@ 0x64
 8008710:	d027      	beq.n	8008762 <GprsSendTask+0x142>
		while(Sim80x.GPRS.Connection != GPRSConnection_ConnectOK)	{	// gotowy do wysylania danych ?
 8008712:	f895 382b 	ldrb.w	r3, [r5, #2091]	@ 0x82b
 8008716:	2b03      	cmp	r3, #3
			osDelay(100);
 8008718:	f04f 0064 	mov.w	r0, #100	@ 0x64
			if(++tout >= 100) break;			// timeout na 10 sekund
 800871c:	f104 0401 	add.w	r4, r4, #1
		while(Sim80x.GPRS.Connection != GPRSConnection_ConnectOK)	{	// gotowy do wysylania danych ?
 8008720:	d1f3      	bne.n	800870a <GprsSendTask+0xea>
			printf("Connected !\r\n");
 8008722:	4822      	ldr	r0, [pc, #136]	@ (80087ac <GprsSendTask+0x18c>)
 8008724:	f008 fb66 	bl	8010df4 <puts>
			SendTestMessage();					// serwer połączony, pogadaj z nim
 8008728:	f7ff fd1e 	bl	8008168 <SendTestMessage>
			GPRS_DisconnectFromServer();		// rozlacz od serwera
 800872c:	f7f9 fa66 	bl	8001bfc <GPRS_DisconnectFromServer>
	if(config.sendFormat & 2) {				// MQTT send
 8008730:	f896 203c 	ldrb.w	r2, [r6, #60]	@ 0x3c
 8008734:	f002 0203 	and.w	r2, r2, #3
 8008738:	e79b      	b.n	8008672 <GprsSendTask+0x52>
		printf("Connect to network: %s\r\n", status ? "OK":"ERROR");
 800873a:	491a      	ldr	r1, [pc, #104]	@ (80087a4 <GprsSendTask+0x184>)
 800873c:	4812      	ldr	r0, [pc, #72]	@ (8008788 <GprsSendTask+0x168>)
 800873e:	f008 faf1 	bl	8010d24 <iprintf>
		printf("Connected to GPRS, IP: %s\r\n", Sim80x.GPRS.LocalIP);
 8008742:	f605 011a 	addw	r1, r5, #2074	@ 0x81a
 8008746:	4811      	ldr	r0, [pc, #68]	@ (800878c <GprsSendTask+0x16c>)
 8008748:	f008 faec 	bl	8010d24 <iprintf>
		osDelay(250);
 800874c:	20fa      	movs	r0, #250	@ 0xfa
 800874e:	f005 fb21 	bl	800dd94 <osDelay>
		if(!status) {printf("GPRS ERROR\r\n"); goto error;}
 8008752:	4818      	ldr	r0, [pc, #96]	@ (80087b4 <GprsSendTask+0x194>)
 8008754:	f008 fb4e 	bl	8010df4 <puts>
 8008758:	e793      	b.n	8008682 <GprsSendTask+0x62>
		} else printf("MQTT Server not respond\r\n");
 800875a:	4817      	ldr	r0, [pc, #92]	@ (80087b8 <GprsSendTask+0x198>)
 800875c:	f008 fb4a 	bl	8010df4 <puts>
 8008760:	e789      	b.n	8008676 <GprsSendTask+0x56>
		} else printf("Server not respond\r\n");
 8008762:	4816      	ldr	r0, [pc, #88]	@ (80087bc <GprsSendTask+0x19c>)
 8008764:	f008 fb46 	bl	8010df4 <puts>
	if(config.sendFormat & 2) {				// MQTT send
 8008768:	f896 203c 	ldrb.w	r2, [r6, #60]	@ 0x3c
 800876c:	f002 0203 	and.w	r2, r2, #3
 8008770:	e77f      	b.n	8008672 <GprsSendTask+0x52>
 8008772:	bf00      	nop
 8008774:	20000230 	.word	0x20000230
 8008778:	2000198d 	.word	0x2000198d
 800877c:	080156c0 	.word	0x080156c0
 8008780:	08015dcc 	.word	0x08015dcc
 8008784:	08015c94 	.word	0x08015c94
 8008788:	08016e98 	.word	0x08016e98
 800878c:	08015de8 	.word	0x08015de8
 8008790:	08016e38 	.word	0x08016e38
 8008794:	200019c0 	.word	0x200019c0
 8008798:	20001995 	.word	0x20001995
 800879c:	20001a3f 	.word	0x20001a3f
 80087a0:	08016e2c 	.word	0x08016e2c
 80087a4:	08015c98 	.word	0x08015c98
 80087a8:	08016e70 	.word	0x08016e70
 80087ac:	08016ec0 	.word	0x08016ec0
 80087b0:	08016e44 	.word	0x08016e44
 80087b4:	08016eb4 	.word	0x08016eb4
 80087b8:	08016ed0 	.word	0x08016ed0
 80087bc:	08016eec 	.word	0x08016eec

080087c0 <StartSendGPRS>:
{
 80087c0:	b570      	push	{r4, r5, r6, lr}
		if((config.sendFormat & 1) && (config.serverIP[0]==0 || config.serverPort==0)) {
 80087c2:	4924      	ldr	r1, [pc, #144]	@ (8008854 <StartSendGPRS+0x94>)
	if(GprsSendTaskFlag == 0 && Sim80x.Status.RegisterdToNetwork && config.sendFormat) {
 80087c4:	4d24      	ldr	r5, [pc, #144]	@ (8008858 <StartSendGPRS+0x98>)
		if((config.sendFormat & 1) && (config.serverIP[0]==0 || config.serverPort==0)) {
 80087c6:	f891 003c 	ldrb.w	r0, [r1, #60]	@ 0x3c
	if(GprsSendTaskFlag == 0 && Sim80x.Status.RegisterdToNetwork && config.sendFormat) {
 80087ca:	782c      	ldrb	r4, [r5, #0]
 80087cc:	4a23      	ldr	r2, [pc, #140]	@ (800885c <StartSendGPRS+0x9c>)
{
 80087ce:	b086      	sub	sp, #24
		if((config.sendFormat & 1) && (config.serverIP[0]==0 || config.serverPort==0)) {
 80087d0:	f000 0303 	and.w	r3, r0, #3
	if(GprsSendTaskFlag == 0 && Sim80x.Status.RegisterdToNetwork && config.sendFormat) {
 80087d4:	b924      	cbnz	r4, 80087e0 <StartSendGPRS+0x20>
 80087d6:	f892 c330 	ldrb.w	ip, [r2, #816]	@ 0x330
 80087da:	f01c 0f01 	tst.w	ip, #1
 80087de:	d10b      	bne.n	80087f8 <StartSendGPRS+0x38>
	printf("Start debug: GprsSendTaskFlag: %d, RegisterdToNetwork: %d, sendFormat: %d\r\n", GprsSendTaskFlag, Sim80x.Status.RegisterdToNetwork, config.sendFormat);
 80087e0:	f892 2330 	ldrb.w	r2, [r2, #816]	@ 0x330
 80087e4:	481e      	ldr	r0, [pc, #120]	@ (8008860 <StartSendGPRS+0xa0>)
 80087e6:	4621      	mov	r1, r4
 80087e8:	f002 0201 	and.w	r2, r2, #1
 80087ec:	f008 fa9a 	bl	8010d24 <iprintf>
	return false; // nie uruchomiono tasku bo juz działa
 80087f0:	2400      	movs	r4, #0
}
 80087f2:	4620      	mov	r0, r4
 80087f4:	b006      	add	sp, #24
 80087f6:	bd70      	pop	{r4, r5, r6, pc}
	if(GprsSendTaskFlag == 0 && Sim80x.Status.RegisterdToNetwork && config.sendFormat) {
 80087f8:	0780      	lsls	r0, r0, #30
 80087fa:	d0f1      	beq.n	80087e0 <StartSendGPRS+0x20>
		if((config.sendFormat & 1) && (config.serverIP[0]==0 || config.serverPort==0)) {
 80087fc:	07da      	lsls	r2, r3, #31
 80087fe:	d505      	bpl.n	800880c <StartSendGPRS+0x4c>
 8008800:	f891 004d 	ldrb.w	r0, [r1, #77]	@ 0x4d
 8008804:	f8b1 207d 	ldrh.w	r2, [r1, #125]	@ 0x7d
 8008808:	b1f0      	cbz	r0, 8008848 <StartSendGPRS+0x88>
 800880a:	b1ea      	cbz	r2, 8008848 <StartSendGPRS+0x88>
		if((config.sendFormat & 2) && (config.mqttIP[0]==0 || config.mqttPort==0)) {
 800880c:	2b01      	cmp	r3, #1
 800880e:	d90c      	bls.n	800882a <StartSendGPRS+0x6a>
 8008810:	f891 307f 	ldrb.w	r3, [r1, #127]	@ 0x7f
 8008814:	b113      	cbz	r3, 800881c <StartSendGPRS+0x5c>
 8008816:	f8b1 30af 	ldrh.w	r3, [r1, #175]	@ 0xaf
 800881a:	b933      	cbnz	r3, 800882a <StartSendGPRS+0x6a>
			printf("MQTT server param error, IP: %s, Port: %d\r\n", config.serverIP, config.serverPort);
 800881c:	f8b1 207d 	ldrh.w	r2, [r1, #125]	@ 0x7d
 8008820:	4810      	ldr	r0, [pc, #64]	@ (8008864 <StartSendGPRS+0xa4>)
 8008822:	4911      	ldr	r1, [pc, #68]	@ (8008868 <StartSendGPRS+0xa8>)
 8008824:	f008 fa7e 	bl	8010d24 <iprintf>
			return false; // blad IP/Port MQTT
 8008828:	e7e3      	b.n	80087f2 <StartSendGPRS+0x32>
		osThreadDef(SendGPRSTask, GprsSendTask, osPriorityNormal, 0, 256);
 800882a:	4e10      	ldr	r6, [pc, #64]	@ (800886c <StartSendGPRS+0xac>)
 800882c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800882e:	ac01      	add	r4, sp, #4
 8008830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008832:	6833      	ldr	r3, [r6, #0]
 8008834:	6023      	str	r3, [r4, #0]
		GprsSendTaskHandle = osThreadCreate(osThread(SendGPRSTask), NULL);
 8008836:	2100      	movs	r1, #0
 8008838:	a801      	add	r0, sp, #4
 800883a:	f005 fa8f 	bl	800dd5c <osThreadCreate>
 800883e:	4b0c      	ldr	r3, [pc, #48]	@ (8008870 <StartSendGPRS+0xb0>)
		GprsSendTaskFlag = 1;
 8008840:	2401      	movs	r4, #1
		GprsSendTaskHandle = osThreadCreate(osThread(SendGPRSTask), NULL);
 8008842:	6018      	str	r0, [r3, #0]
		GprsSendTaskFlag = 1;
 8008844:	702c      	strb	r4, [r5, #0]
		return true; // poprawnie uruchomiono task
 8008846:	e7d4      	b.n	80087f2 <StartSendGPRS+0x32>
			printf("Normal server param error, IP: %s, Port: %d\r\n", config.serverIP, config.serverPort);
 8008848:	4907      	ldr	r1, [pc, #28]	@ (8008868 <StartSendGPRS+0xa8>)
 800884a:	480a      	ldr	r0, [pc, #40]	@ (8008874 <StartSendGPRS+0xb4>)
 800884c:	f008 fa6a 	bl	8010d24 <iprintf>
			return false; // blad IP/Port normal
 8008850:	e7cf      	b.n	80087f2 <StartSendGPRS+0x32>
 8008852:	bf00      	nop
 8008854:	200019c0 	.word	0x200019c0
 8008858:	20001995 	.word	0x20001995
 800885c:	20000230 	.word	0x20000230
 8008860:	08016f5c 	.word	0x08016f5c
 8008864:	08016f30 	.word	0x08016f30
 8008868:	20001a0d 	.word	0x20001a0d
 800886c:	08014240 	.word	0x08014240
 8008870:	20001998 	.word	0x20001998
 8008874:	08016f00 	.word	0x08016f00

08008878 <GPRS_UserNewData>:
{
 8008878:	b508      	push	{r3, lr}
 800887a:	460a      	mov	r2, r1
	_write(0, NewData, len);
 800887c:	4601      	mov	r1, r0
 800887e:	2000      	movs	r0, #0
 8008880:	f7fb fbcc 	bl	800401c <_write>
}
 8008884:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printf("\r\n");
 8008888:	4801      	ldr	r0, [pc, #4]	@ (8008890 <GPRS_UserNewData+0x18>)
 800888a:	f008 bab3 	b.w	8010df4 <puts>
 800888e:	bf00      	nop
 8008890:	080169ac 	.word	0x080169ac

08008894 <GsmWdt>:
{
 8008894:	b570      	push	{r4, r5, r6, lr}
	gsm_wdt++;
 8008896:	4c55      	ldr	r4, [pc, #340]	@ (80089ec <GsmWdt+0x158>)
	if(!gsm_led_state && SIM_WDT_READ()) {
 8008898:	4d55      	ldr	r5, [pc, #340]	@ (80089f0 <GsmWdt+0x15c>)
	gsm_wdt++;
 800889a:	8823      	ldrh	r3, [r4, #0]
	if(!gsm_led_state && SIM_WDT_READ()) {
 800889c:	782e      	ldrb	r6, [r5, #0]
	gsm_wdt++;
 800889e:	3301      	adds	r3, #1
 80088a0:	8023      	strh	r3, [r4, #0]
	if(!gsm_led_state && SIM_WDT_READ()) {
 80088a2:	2e00      	cmp	r6, #0
 80088a4:	f000 808c 	beq.w	80089c0 <GsmWdt+0x12c>
	if(gsm_led_state && !SIM_WDT_READ()) gsm_led_state = 0;
 80088a8:	4852      	ldr	r0, [pc, #328]	@ (80089f4 <GsmWdt+0x160>)
 80088aa:	2102      	movs	r1, #2
 80088ac:	f002 fd5a 	bl	800b364 <HAL_GPIO_ReadPin>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	f000 8094 	beq.w	80089de <GsmWdt+0x14a>
	if(Sim80x.Status.Power && gsm_wdt > 300) {		// 10 sekund WDT timeout
 80088b6:	4d50      	ldr	r5, [pc, #320]	@ (80089f8 <GsmWdt+0x164>)
 80088b8:	f895 c330 	ldrb.w	ip, [r5, #816]	@ 0x330
 80088bc:	f01c 0304 	ands.w	r3, ip, #4
 80088c0:	d135      	bne.n	800892e <GsmWdt+0x9a>
	} else if(!Sim80x.Status.Power) gsm_wdt = 0;
 80088c2:	8023      	strh	r3, [r4, #0]
    if(gsm_restart_time) gsm_restart_time--;
 80088c4:	4e4d      	ldr	r6, [pc, #308]	@ (80089fc <GsmWdt+0x168>)
 80088c6:	6833      	ldr	r3, [r6, #0]
 80088c8:	b133      	cbz	r3, 80088d8 <GsmWdt+0x44>
 80088ca:	3b01      	subs	r3, #1
 80088cc:	6033      	str	r3, [r6, #0]
    if(gsm_restart_time == 0) {						// cykliczny restart SIM868 co 24h
 80088ce:	b11b      	cbz	r3, 80088d8 <GsmWdt+0x44>
	if(Sim80x.Status.FatalError) {			// odpal restart GSM
 80088d0:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 80088d4:	d139      	bne.n	800894a <GsmWdt+0xb6>
}
 80088d6:	bd70      	pop	{r4, r5, r6, pc}
 80088d8:	4b49      	ldr	r3, [pc, #292]	@ (8008a00 <GsmWdt+0x16c>)
        uint8_t msg_in_process = 0;
 80088da:	2200      	movs	r2, #0
 80088dc:	f103 000a 	add.w	r0, r3, #10
            if(Sim80x.Gsm.HaveNewMsg[i] > 0) msg_in_process = 1;
 80088e0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80088e4:	2900      	cmp	r1, #0
 80088e6:	bf18      	it	ne
 80088e8:	2201      	movne	r2, #1
        for(uint8_t i=0 ;i<sizeof(Sim80x.Gsm.HaveNewMsg); ++i) {
 80088ea:	4298      	cmp	r0, r3
 80088ec:	d1f8      	bne.n	80088e0 <GsmWdt+0x4c>
           Sim80x.Gsm.GsmVoiceStatus == GsmVoiceStatus_Idle &&      // Nie trwa polaczenie voice
 80088ee:	f895 182b 	ldrb.w	r1, [r5, #2091]	@ 0x82b
 80088f2:	f895 3b31 	ldrb.w	r3, [r5, #2865]	@ 0xb31
 80088f6:	430b      	orrs	r3, r1
 80088f8:	f895 165a 	ldrb.w	r1, [r5, #1626]	@ 0x65a
 80088fc:	430b      	orrs	r3, r1
 80088fe:	f895 17db 	ldrb.w	r1, [r5, #2011]	@ 0x7db
 8008902:	430b      	orrs	r3, r1
           !Sim80x.Status.Busy &&                                   // Nie jest obslugiwana komenda AT
 8008904:	f00c 0102 	and.w	r1, ip, #2
           Sim80x.Gsm.GsmVoiceStatus == GsmVoiceStatus_Idle &&      // Nie trwa polaczenie voice
 8008908:	430b      	orrs	r3, r1
 800890a:	431a      	orrs	r2, r3
 800890c:	b2d2      	uxtb	r2, r2
 800890e:	2a00      	cmp	r2, #0
 8008910:	d150      	bne.n	80089b4 <GsmWdt+0x120>
            Sim80x.Status.FatalError = 1;                           // wymus pelny restart SIM800
 8008912:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
            gsm_restart_time = GSM_RESTART_INTERVAL;
 8008916:	4a3b      	ldr	r2, [pc, #236]	@ (8008a04 <GsmWdt+0x170>)
            printf("Sheduled GSM restart.\r\n");
 8008918:	483b      	ldr	r0, [pc, #236]	@ (8008a08 <GsmWdt+0x174>)
            gsm_restart_time = GSM_RESTART_INTERVAL;
 800891a:	6032      	str	r2, [r6, #0]
            Sim80x.Status.FatalError = 1;                           // wymus pelny restart SIM800
 800891c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008920:	f885 3330 	strb.w	r3, [r5, #816]	@ 0x330
            printf("Sheduled GSM restart.\r\n");
 8008924:	f008 fa66 	bl	8010df4 <puts>
	if(Sim80x.Status.FatalError) {			// odpal restart GSM
 8008928:	f895 c330 	ldrb.w	ip, [r5, #816]	@ 0x330
            printf("Sheduled GSM restart.\r\n");
 800892c:	e7d0      	b.n	80088d0 <GsmWdt+0x3c>
	if(Sim80x.Status.Power && gsm_wdt > 300) {		// 10 sekund WDT timeout
 800892e:	8823      	ldrh	r3, [r4, #0]
 8008930:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8008934:	d9c6      	bls.n	80088c4 <GsmWdt+0x30>
		printf("GSM module recovery!\r\n");
 8008936:	4835      	ldr	r0, [pc, #212]	@ (8008a0c <GsmWdt+0x178>)
 8008938:	f008 fa5c 	bl	8010df4 <puts>
		Sim80x.Status.FatalError = 1;
 800893c:	f895 c330 	ldrb.w	ip, [r5, #816]	@ 0x330
 8008940:	f04c 0c40 	orr.w	ip, ip, #64	@ 0x40
 8008944:	f885 c330 	strb.w	ip, [r5, #816]	@ 0x330
 8008948:	e7bc      	b.n	80088c4 <GsmWdt+0x30>
		printf("Restarting...\r\n");
 800894a:	4831      	ldr	r0, [pc, #196]	@ (8008a10 <GsmWdt+0x17c>)
 800894c:	f008 fa52 	bl	8010df4 <puts>
		HAL_GPIO_WritePin(_SIM80X_POWER_KEY_GPIO,_SIM80X_POWER_KEY_PIN,GPIO_PIN_SET);
 8008950:	2201      	movs	r2, #1
 8008952:	4611      	mov	r1, r2
 8008954:	4827      	ldr	r0, [pc, #156]	@ (80089f4 <GsmWdt+0x160>)
 8008956:	f002 fd0b 	bl	800b370 <HAL_GPIO_WritePin>
		osDelay(1200);
 800895a:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 800895e:	f005 fa19 	bl	800dd94 <osDelay>
		printf("RST 2\r\n");
 8008962:	482c      	ldr	r0, [pc, #176]	@ (8008a14 <GsmWdt+0x180>)
 8008964:	f008 fa46 	bl	8010df4 <puts>
		HAL_GPIO_WritePin(_SIM80X_POWER_KEY_GPIO,_SIM80X_POWER_KEY_PIN,GPIO_PIN_RESET);
 8008968:	2200      	movs	r2, #0
 800896a:	2101      	movs	r1, #1
 800896c:	4821      	ldr	r0, [pc, #132]	@ (80089f4 <GsmWdt+0x160>)
 800896e:	f002 fcff 	bl	800b370 <HAL_GPIO_WritePin>
		osDelay(4000);
 8008972:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8008976:	f005 fa0d 	bl	800dd94 <osDelay>
		printf("GSM power UP.\r\n");
 800897a:	4827      	ldr	r0, [pc, #156]	@ (8008a18 <GsmWdt+0x184>)
 800897c:	f008 fa3a 	bl	8010df4 <puts>
		memset(&Sim80x,0,sizeof(Sim80x));
 8008980:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 8008984:	2100      	movs	r1, #0
 8008986:	481c      	ldr	r0, [pc, #112]	@ (80089f8 <GsmWdt+0x164>)
 8008988:	f008 fb94 	bl	80110b4 <memset>
		Sim80x_SetPower(true);
 800898c:	2001      	movs	r0, #1
 800898e:	f7f9 fec5 	bl	800271c <Sim80x_SetPower>
		osDelay(100);
 8008992:	2064      	movs	r0, #100	@ 0x64
 8008994:	f005 f9fe 	bl	800dd94 <osDelay>
		gps_start = seconds;
 8008998:	4a20      	ldr	r2, [pc, #128]	@ (8008a1c <GsmWdt+0x188>)
 800899a:	4921      	ldr	r1, [pc, #132]	@ (8008a20 <GsmWdt+0x18c>)
		gps_interval = 30;					// odczyt GPS po 30s od restartu
 800899c:	4b21      	ldr	r3, [pc, #132]	@ (8008a24 <GsmWdt+0x190>)
		gps_start = seconds;
 800899e:	6810      	ldr	r0, [r2, #0]
 80089a0:	6008      	str	r0, [r1, #0]
		gps_interval = 30;					// odczyt GPS po 30s od restartu
 80089a2:	221e      	movs	r2, #30
 80089a4:	601a      	str	r2, [r3, #0]
		GprsSendTaskFlag = 0;
 80089a6:	4920      	ldr	r1, [pc, #128]	@ (8008a28 <GsmWdt+0x194>)
		gpsTaskFlag = 0;
 80089a8:	4a20      	ldr	r2, [pc, #128]	@ (8008a2c <GsmWdt+0x198>)
		GprsSendTaskFlag = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	700b      	strb	r3, [r1, #0]
		gpsTaskFlag = 0;
 80089ae:	7013      	strb	r3, [r2, #0]
        gsm_wdt = 0;
 80089b0:	8023      	strh	r3, [r4, #0]
}
 80089b2:	bd70      	pop	{r4, r5, r6, pc}
        } else gsm_restart_time = 10*5;                             // nie wolno restartowac, kolejny test za 5s.
 80089b4:	2332      	movs	r3, #50	@ 0x32
	if(Sim80x.Status.FatalError) {			// odpal restart GSM
 80089b6:	f01c 0f40 	tst.w	ip, #64	@ 0x40
        } else gsm_restart_time = 10*5;                             // nie wolno restartowac, kolejny test za 5s.
 80089ba:	6033      	str	r3, [r6, #0]
	if(Sim80x.Status.FatalError) {			// odpal restart GSM
 80089bc:	d08b      	beq.n	80088d6 <GsmWdt+0x42>
 80089be:	e7c4      	b.n	800894a <GsmWdt+0xb6>
	if(!gsm_led_state && SIM_WDT_READ()) {
 80089c0:	480c      	ldr	r0, [pc, #48]	@ (80089f4 <GsmWdt+0x160>)
 80089c2:	2102      	movs	r1, #2
 80089c4:	f002 fcce 	bl	800b364 <HAL_GPIO_ReadPin>
 80089c8:	b158      	cbz	r0, 80089e2 <GsmWdt+0x14e>
		gsm_led_state = 1;
 80089ca:	2301      	movs	r3, #1
	if(gsm_led_state && !SIM_WDT_READ()) gsm_led_state = 0;
 80089cc:	4809      	ldr	r0, [pc, #36]	@ (80089f4 <GsmWdt+0x160>)
		gsm_led_state = 1;
 80089ce:	702b      	strb	r3, [r5, #0]
	if(gsm_led_state && !SIM_WDT_READ()) gsm_led_state = 0;
 80089d0:	2102      	movs	r1, #2
		gsm_wdt = 0;
 80089d2:	8026      	strh	r6, [r4, #0]
	if(gsm_led_state && !SIM_WDT_READ()) gsm_led_state = 0;
 80089d4:	f002 fcc6 	bl	800b364 <HAL_GPIO_ReadPin>
 80089d8:	2800      	cmp	r0, #0
 80089da:	f47f af6c 	bne.w	80088b6 <GsmWdt+0x22>
 80089de:	7028      	strb	r0, [r5, #0]
 80089e0:	e769      	b.n	80088b6 <GsmWdt+0x22>
 80089e2:	782b      	ldrb	r3, [r5, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f43f af66 	beq.w	80088b6 <GsmWdt+0x22>
 80089ea:	e75d      	b.n	80088a8 <GsmWdt+0x14>
 80089ec:	2000198a 	.word	0x2000198a
 80089f0:	20001988 	.word	0x20001988
 80089f4:	48000400 	.word	0x48000400
 80089f8:	20000230 	.word	0x20000230
 80089fc:	20000008 	.word	0x20000008
 8008a00:	20000a0b 	.word	0x20000a0b
 8008a04:	00278d00 	.word	0x00278d00
 8008a08:	08016fc0 	.word	0x08016fc0
 8008a0c:	08016fa8 	.word	0x08016fa8
 8008a10:	08016fd8 	.word	0x08016fd8
 8008a14:	08016fe8 	.word	0x08016fe8
 8008a18:	08016ff0 	.word	0x08016ff0
 8008a1c:	200019bc 	.word	0x200019bc
 8008a20:	200019a4 	.word	0x200019a4
 8008a24:	2000000c 	.word	0x2000000c
 8008a28:	20001995 	.word	0x20001995
 8008a2c:	20001996 	.word	0x20001996

08008a30 <fixTZ>:
{
 8008a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	b085      	sub	sp, #20
 8008a36:	f10d 0c04 	add.w	ip, sp, #4
 8008a3a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8008a3e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8008a40:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8008a44:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8008a48:	f89d e008 	ldrb.w	lr, [sp, #8]
 8008a4c:	f89d 4009 	ldrb.w	r4, [sp, #9]
 8008a50:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8008a54:	f99d 900c 	ldrsb.w	r9, [sp, #12]
 8008a58:	4606      	mov	r6, r0
	for(int i=0; i<abs(zone); ++i) {
 8008a5a:	ea85 70e5 	eor.w	r0, r5, r5, asr #31
 8008a5e:	eba0 70e5 	sub.w	r0, r0, r5, asr #31
 8008a62:	b34d      	cbz	r5, 8008ab8 <fixTZ+0x88>
 8008a64:	2100      	movs	r1, #0
		int Min = (int)tim.Min + ((zone < 0) ? -15:15);
 8008a66:	2d00      	cmp	r5, #0
 8008a68:	db3d      	blt.n	8008ae6 <fixTZ+0xb6>
 8008a6a:	f103 020f 	add.w	r2, r3, #15
		if(zone > 0 && Min > 59) {
 8008a6e:	2a3b      	cmp	r2, #59	@ 0x3b
 8008a70:	dd1e      	ble.n	8008ab0 <fixTZ+0x80>
			if(++tim.Hour > 23)	{
 8008a72:	3401      	adds	r4, #1
 8008a74:	b2e4      	uxtb	r4, r4
 8008a76:	2c17      	cmp	r4, #23
			Min -= 60;
 8008a78:	f1a3 022d 	sub.w	r2, r3, #45	@ 0x2d
			if(++tim.Hour > 23)	{
 8008a7c:	d918      	bls.n	8008ab0 <fixTZ+0x80>
				if(++tim.Day > monthLength) {												// zmiana miesiaca ?
 8008a7e:	f10e 0e01 	add.w	lr, lr, #1
				if (tim.Month==2) { 		// luty
 8008a82:	2f02      	cmp	r7, #2
				if(++tim.Day > monthLength) {												// zmiana miesiaca ?
 8008a84:	fa5f fe8e 	uxtb.w	lr, lr
				if (tim.Month==2) { 		// luty
 8008a88:	d041      	beq.n	8008b0e <fixTZ+0xde>
				} else { monthLength = monthDays[tim.Month-1]; }							// inny miesiac
 8008a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8008c08 <fixTZ+0x1d8>)
 8008a8c:	443b      	add	r3, r7
				if(++tim.Day > monthLength) {												// zmiana miesiaca ?
 8008a8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a92:	4573      	cmp	r3, lr
 8008a94:	d234      	bcs.n	8008b00 <fixTZ+0xd0>
					if(++tim.Month > 12) {tim.Month = 1; tim.Year++;}
 8008a96:	3701      	adds	r7, #1
 8008a98:	b2ff      	uxtb	r7, r7
 8008a9a:	2f0c      	cmp	r7, #12
 8008a9c:	f240 80a2 	bls.w	8008be4 <fixTZ+0x1b4>
 8008aa0:	f108 0801 	add.w	r8, r8, #1
					tim.Day = 1;
 8008aa4:	f04f 0e01 	mov.w	lr, #1
					if(++tim.Month > 12) {tim.Month = 1; tim.Year++;}
 8008aa8:	fa1f f888 	uxth.w	r8, r8
				tim.Hour = 0;
 8008aac:	2400      	movs	r4, #0
					if(++tim.Month > 12) {tim.Month = 1; tim.Year++;}
 8008aae:	4677      	mov	r7, lr
	for(int i=0; i<abs(zone); ++i) {
 8008ab0:	3101      	adds	r1, #1
 8008ab2:	4281      	cmp	r1, r0
		tim.Min = Min;
 8008ab4:	b2d3      	uxtb	r3, r2
	for(int i=0; i<abs(zone); ++i) {
 8008ab6:	d1d6      	bne.n	8008a66 <fixTZ+0x36>
	tim.Zone += zone;
 8008ab8:	eb09 0205 	add.w	r2, r9, r5
	return tim;
 8008abc:	f88d 300a 	strb.w	r3, [sp, #10]
 8008ac0:	f8ad 8004 	strh.w	r8, [sp, #4]
 8008ac4:	f88d 7006 	strb.w	r7, [sp, #6]
 8008ac8:	f88d e008 	strb.w	lr, [sp, #8]
 8008acc:	f88d 4009 	strb.w	r4, [sp, #9]
 8008ad0:	f88d 200c 	strb.w	r2, [sp, #12]
 8008ad4:	4663      	mov	r3, ip
 8008ad6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ad8:	6030      	str	r0, [r6, #0]
}
 8008ada:	4630      	mov	r0, r6
	return tim;
 8008adc:	6071      	str	r1, [r6, #4]
 8008ade:	60b2      	str	r2, [r6, #8]
}
 8008ae0:	b005      	add	sp, #20
 8008ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if(zone < 0 && Min < 0) {
 8008ae6:	f1b3 020f 	subs.w	r2, r3, #15
 8008aea:	d5e1      	bpl.n	8008ab0 <fixTZ+0x80>
			Min += 60;
 8008aec:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
			if(--Hour < 0) {
 8008af0:	1e63      	subs	r3, r4, #1
 8008af2:	b1ec      	cbz	r4, 8008b30 <fixTZ+0x100>
	for(int i=0; i<abs(zone); ++i) {
 8008af4:	3101      	adds	r1, #1
 8008af6:	4281      	cmp	r1, r0
			tim.Hour = Hour;
 8008af8:	b2dc      	uxtb	r4, r3
		tim.Min = Min;
 8008afa:	b2d3      	uxtb	r3, r2
	for(int i=0; i<abs(zone); ++i) {
 8008afc:	d1b3      	bne.n	8008a66 <fixTZ+0x36>
 8008afe:	e7db      	b.n	8008ab8 <fixTZ+0x88>
 8008b00:	3101      	adds	r1, #1
 8008b02:	4281      	cmp	r1, r0
				tim.Hour = 0;
 8008b04:	f04f 0400 	mov.w	r4, #0
		tim.Min = Min;
 8008b08:	b2d3      	uxtb	r3, r2
	for(int i=0; i<abs(zone); ++i) {
 8008b0a:	d1ac      	bne.n	8008a66 <fixTZ+0x36>
 8008b0c:	e7d4      	b.n	8008ab8 <fixTZ+0x88>
				  if (LEAP_YEAR_SIM(tim.Year)) { monthLength=29; } else { monthLength=28; }		// luty ma 28 czy 29 ?
 8008b0e:	f018 0403 	ands.w	r4, r8, #3
 8008b12:	d024      	beq.n	8008b5e <fixTZ+0x12e>
				if(++tim.Day > monthLength) {												// zmiana miesiaca ?
 8008b14:	f1be 0f1c 	cmp.w	lr, #28
				tim.Hour = 0;
 8008b18:	f04f 0400 	mov.w	r4, #0
				if(++tim.Day > monthLength) {												// zmiana miesiaca ?
 8008b1c:	d9c8      	bls.n	8008ab0 <fixTZ+0x80>
	for(int i=0; i<abs(zone); ++i) {
 8008b1e:	3101      	adds	r1, #1
 8008b20:	4281      	cmp	r1, r0
					tim.Day = 1;
 8008b22:	f04f 0e01 	mov.w	lr, #1
					if(++tim.Month > 12) {tim.Month = 1; tim.Year++;}
 8008b26:	f04f 0703 	mov.w	r7, #3
		tim.Min = Min;
 8008b2a:	b2d3      	uxtb	r3, r2
	for(int i=0; i<abs(zone); ++i) {
 8008b2c:	d19b      	bne.n	8008a66 <fixTZ+0x36>
 8008b2e:	e7c3      	b.n	8008ab8 <fixTZ+0x88>
				if(--tim.Day < 1) {
 8008b30:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008b34:	f01e 0eff 	ands.w	lr, lr, #255	@ 0xff
 8008b38:	d10a      	bne.n	8008b50 <fixTZ+0x120>
					if(--tim.Month < 1)  {tim.Month = 12; tim.Year--;}							// oblucz nowy miesiac i rok
 8008b3a:	3f01      	subs	r7, #1
 8008b3c:	f017 07ff 	ands.w	r7, r7, #255	@ 0xff
 8008b40:	d12e      	bne.n	8008ba0 <fixTZ+0x170>
 8008b42:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b46:	fa1f f888 	uxth.w	r8, r8
 8008b4a:	f04f 0e1f 	mov.w	lr, #31
 8008b4e:	270c      	movs	r7, #12
	for(int i=0; i<abs(zone); ++i) {
 8008b50:	3101      	adds	r1, #1
 8008b52:	4281      	cmp	r1, r0
 8008b54:	f04f 0417 	mov.w	r4, #23
		tim.Min = Min;
 8008b58:	b2d3      	uxtb	r3, r2
	for(int i=0; i<abs(zone); ++i) {
 8008b5a:	d184      	bne.n	8008a66 <fixTZ+0x36>
 8008b5c:	e7ac      	b.n	8008ab8 <fixTZ+0x88>
 8008b5e:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8008b62:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8008b66:	eba3 2383 	sub.w	r3, r3, r3, lsl #10
 8008b6a:	f3c3 0b8d 	ubfx	fp, r3, #2, #14
 8008b6e:	ea4b 3b83 	orr.w	fp, fp, r3, lsl #14
				  if (LEAP_YEAR_SIM(tim.Year)) { monthLength=29; } else { monthLength=28; }		// luty ma 28 czy 29 ?
 8008b72:	fa1f fb8b 	uxth.w	fp, fp
 8008b76:	f5bb 7f24 	cmp.w	fp, #656	@ 0x290
 8008b7a:	fa1f fa83 	uxth.w	sl, r3
 8008b7e:	d209      	bcs.n	8008b94 <fixTZ+0x164>
 8008b80:	031b      	lsls	r3, r3, #12
 8008b82:	ea43 131a 	orr.w	r3, r3, sl, lsr #4
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	2ba3      	cmp	r3, #163	@ 0xa3
 8008b8a:	d903      	bls.n	8008b94 <fixTZ+0x164>
				if(++tim.Day > monthLength) {												// zmiana miesiaca ?
 8008b8c:	f1be 0f1c 	cmp.w	lr, #28
 8008b90:	d98e      	bls.n	8008ab0 <fixTZ+0x80>
 8008b92:	e7c4      	b.n	8008b1e <fixTZ+0xee>
 8008b94:	f1be 0f1d 	cmp.w	lr, #29
				tim.Hour = 0;
 8008b98:	f04f 0400 	mov.w	r4, #0
				if(++tim.Day > monthLength) {												// zmiana miesiaca ?
 8008b9c:	d988      	bls.n	8008ab0 <fixTZ+0x80>
 8008b9e:	e7be      	b.n	8008b1e <fixTZ+0xee>
					if (tim.Month==2) { 														// jak wyszedl luty
 8008ba0:	2f02      	cmp	r7, #2
 8008ba2:	d127      	bne.n	8008bf4 <fixTZ+0x1c4>
						if (LEAP_YEAR_SIM(tim.Year)) { monthLength=29; } else { monthLength=28; }	// luty ma 28 czy 29 ?
 8008ba4:	f018 0f03 	tst.w	r8, #3
 8008ba8:	d120      	bne.n	8008bec <fixTZ+0x1bc>
 8008baa:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8008bae:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8008bb2:	eba3 2383 	sub.w	r3, r3, r3, lsl #10
 8008bb6:	f3c3 048d 	ubfx	r4, r3, #2, #14
 8008bba:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
 8008bbe:	b2a4      	uxth	r4, r4
 8008bc0:	f5b4 7f24 	cmp.w	r4, #656	@ 0x290
 8008bc4:	fa1f fe83 	uxth.w	lr, r3
 8008bc8:	d219      	bcs.n	8008bfe <fixTZ+0x1ce>
 8008bca:	031b      	lsls	r3, r3, #12
 8008bcc:	ea43 131e 	orr.w	r3, r3, lr, lsr #4
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	2ba4      	cmp	r3, #164	@ 0xa4
 8008bd4:	f04f 0417 	mov.w	r4, #23
 8008bd8:	bf34      	ite	cc
 8008bda:	f04f 0e1d 	movcc.w	lr, #29
 8008bde:	f04f 0e1c 	movcs.w	lr, #28
 8008be2:	e765      	b.n	8008ab0 <fixTZ+0x80>
				tim.Hour = 0;
 8008be4:	2400      	movs	r4, #0
					tim.Day = 1;
 8008be6:	f04f 0e01 	mov.w	lr, #1
 8008bea:	e761      	b.n	8008ab0 <fixTZ+0x80>
 8008bec:	2417      	movs	r4, #23
						if (LEAP_YEAR_SIM(tim.Year)) { monthLength=29; } else { monthLength=28; }	// luty ma 28 czy 29 ?
 8008bee:	f04f 0e1c 	mov.w	lr, #28
 8008bf2:	e75d      	b.n	8008ab0 <fixTZ+0x80>
					} else { monthLength = monthDays[tim.Month-1]; }							// inny miesiac
 8008bf4:	4b04      	ldr	r3, [pc, #16]	@ (8008c08 <fixTZ+0x1d8>)
 8008bf6:	443b      	add	r3, r7
 8008bf8:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 8008bfc:	e7a8      	b.n	8008b50 <fixTZ+0x120>
 8008bfe:	2417      	movs	r4, #23
						if (LEAP_YEAR_SIM(tim.Year)) { monthLength=29; } else { monthLength=28; }	// luty ma 28 czy 29 ?
 8008c00:	f04f 0e1d 	mov.w	lr, #29
 8008c04:	e754      	b.n	8008ab0 <fixTZ+0x80>
 8008c06:	bf00      	nop
 8008c08:	080172f8 	.word	0x080172f8

08008c0c <GpsReadTask>:
{
 8008c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printf("GPS start.\r\n");
 8008c10:	484c      	ldr	r0, [pc, #304]	@ (8008d44 <GpsReadTask+0x138>)
 8008c12:	4c4d      	ldr	r4, [pc, #308]	@ (8008d48 <GpsReadTask+0x13c>)
			printf("GSM Time update %s.\r\n", time_updated ? "OK":"ERROR");
 8008c14:	f8df 9158 	ldr.w	r9, [pc, #344]	@ 8008d70 <GpsReadTask+0x164>
{
 8008c18:	b089      	sub	sp, #36	@ 0x24
	printf("GPS start.\r\n");
 8008c1a:	f008 f8eb 	bl	8010df4 <puts>
	GPS_SetPower(1);
 8008c1e:	2001      	movs	r0, #1
 8008c20:	f7f9 f8e8 	bl	8001df4 <GPS_SetPower>
 8008c24:	25b5      	movs	r5, #181	@ 0xb5
	uint8_t time_updated = 0;
 8008c26:	2600      	movs	r6, #0
			Sim80x.Gsm.Time = fixTZ(Sim80x.GPS.Time, Sim80x.Gsm.Time.Zone);
 8008c28:	f604 3834 	addw	r8, r4, #2868	@ 0xb34
 8008c2c:	f204 674e 	addw	r7, r4, #1614	@ 0x64e
		osDelay(1000);
 8008c30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008c34:	f005 f8ae 	bl	800dd94 <osDelay>
		if(Sim80x.GPS.Time.Year > 2022 												// prawidlowy czas
 8008c38:	f8b4 2b34 	ldrh.w	r2, [r4, #2868]	@ 0xb34
 8008c3c:	f240 73e6 	movw	r3, #2022	@ 0x7e6
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d938      	bls.n	8008cb6 <GpsReadTask+0xaa>
		   && Sim80x.GPS.Fix														// i jest fix
 8008c44:	f894 3b32 	ldrb.w	r3, [r4, #2866]	@ 0xb32
		   && !time_updated 														// i jeszcze nie uaktualniony
 8008c48:	2e00      	cmp	r6, #0
 8008c4a:	d136      	bne.n	8008cba <GpsReadTask+0xae>
		   && Sim80x.GPS.Fix														// i jest fix
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d077      	beq.n	8008d40 <GpsReadTask+0x134>
		   && Sim80x.GPRS.Connection != GPRSConnection_ConnectOK) {					// i nie polaczony z serwerem
 8008c50:	f894 382b 	ldrb.w	r3, [r4, #2091]	@ 0x82b
 8008c54:	2b03      	cmp	r3, #3
 8008c56:	d073      	beq.n	8008d40 <GpsReadTask+0x134>
			if(Sim80x.Gsm.Time.Zone == 0) Sim80x.Gsm.Time.Zone = 8;					// tu male oszustwo ze strefą czasową
 8008c58:	f994 3656 	ldrsb.w	r3, [r4, #1622]	@ 0x656
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	bf08      	it	eq
 8008c60:	2308      	moveq	r3, #8
			Sim80x.Gsm.Time = fixTZ(Sim80x.GPS.Time, Sim80x.Gsm.Time.Zone);
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8008c68:	a804      	add	r0, sp, #16
 8008c6a:	f7ff fee1 	bl	8008a30 <fixTZ>
 8008c6e:	9b04      	ldr	r3, [sp, #16]
 8008c70:	603b      	str	r3, [r7, #0]
 8008c72:	9a05      	ldr	r2, [sp, #20]
 8008c74:	9b06      	ldr	r3, [sp, #24]
 8008c76:	60bb      	str	r3, [r7, #8]
 8008c78:	607a      	str	r2, [r7, #4]
			time_updated = Sim80x_SetTime();
 8008c7a:	f7f9 fec3 	bl	8002a04 <Sim80x_SetTime>
			printf("GSM Time update %s.\r\n", time_updated ? "OK":"ERROR");
 8008c7e:	1e06      	subs	r6, r0, #0
 8008c80:	4932      	ldr	r1, [pc, #200]	@ (8008d4c <GpsReadTask+0x140>)
 8008c82:	4833      	ldr	r0, [pc, #204]	@ (8008d50 <GpsReadTask+0x144>)
 8008c84:	bf18      	it	ne
 8008c86:	4649      	movne	r1, r9
 8008c88:	f008 f84c 	bl	8010d24 <iprintf>
			printf("Current time is: %04u-%02u-%02u %02u:%02u:%02u, TZ:%d\r\n",
 8008c8c:	f994 2656 	ldrsb.w	r2, [r4, #1622]	@ 0x656
 8008c90:	f894 3655 	ldrb.w	r3, [r4, #1621]	@ 0x655
 8008c94:	482f      	ldr	r0, [pc, #188]	@ (8008d54 <GpsReadTask+0x148>)
 8008c96:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8008c9a:	f894 2654 	ldrb.w	r2, [r4, #1620]	@ 0x654
 8008c9e:	f894 3653 	ldrb.w	r3, [r4, #1619]	@ 0x653
 8008ca2:	e9cd 3200 	strd	r3, r2, [sp]
 8008ca6:	f894 3652 	ldrb.w	r3, [r4, #1618]	@ 0x652
 8008caa:	f894 2650 	ldrb.w	r2, [r4, #1616]	@ 0x650
 8008cae:	f8b4 164e 	ldrh.w	r1, [r4, #1614]	@ 0x64e
 8008cb2:	f008 f837 	bl	8010d24 <iprintf>
		if(time_updated && Sim80x.GPS.Fix && Sim80x.GPS.SatInUse > 3) break;
 8008cb6:	2e00      	cmp	r6, #0
 8008cb8:	d042      	beq.n	8008d40 <GpsReadTask+0x134>
 8008cba:	f894 3b32 	ldrb.w	r3, [r4, #2866]	@ 0xb32
 8008cbe:	b11b      	cbz	r3, 8008cc8 <GpsReadTask+0xbc>
 8008cc0:	f894 3b4c 	ldrb.w	r3, [r4, #2892]	@ 0xb4c
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	d828      	bhi.n	8008d1a <GpsReadTask+0x10e>
 8008cc8:	2601      	movs	r6, #1
		if(++GPS_tout > 180 || Sim80x.GPS.RunStatus == 0) {		// 3 minuty timeout
 8008cca:	3d01      	subs	r5, #1
 8008ccc:	b2ad      	uxth	r5, r5
 8008cce:	b11d      	cbz	r5, 8008cd8 <GpsReadTask+0xcc>
 8008cd0:	f894 3b31 	ldrb.w	r3, [r4, #2865]	@ 0xb31
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1ab      	bne.n	8008c30 <GpsReadTask+0x24>
			printf("GPS signal not available.");
 8008cd8:	481f      	ldr	r0, [pc, #124]	@ (8008d58 <GpsReadTask+0x14c>)
 8008cda:	f008 f823 	bl	8010d24 <iprintf>
			goto gpstaskend;
 8008cde:	e003      	b.n	8008ce8 <GpsReadTask+0xdc>
	while(Sim80x.GPRS.Connection == GPRSConnection_ConnectOK) osDelay(1000);	// nie wysylaj nic do GPS jak polaczony
 8008ce0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008ce4:	f005 f856 	bl	800dd94 <osDelay>
 8008ce8:	f894 382b 	ldrb.w	r3, [r4, #2091]	@ 0x82b
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d0f7      	beq.n	8008ce0 <GpsReadTask+0xd4>
	GPS_SetPower(0);
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	f7f9 f87f 	bl	8001df4 <GPS_SetPower>
	printf("GPS stopped.\r\n");
 8008cf6:	4819      	ldr	r0, [pc, #100]	@ (8008d5c <GpsReadTask+0x150>)
 8008cf8:	f008 f87c 	bl	8010df4 <puts>
	osDelay(100);
 8008cfc:	2064      	movs	r0, #100	@ 0x64
 8008cfe:	f005 f849 	bl	800dd94 <osDelay>
	gpsTaskFlag = 0;
 8008d02:	4b17      	ldr	r3, [pc, #92]	@ (8008d60 <GpsReadTask+0x154>)
 8008d04:	2000      	movs	r0, #0
 8008d06:	7018      	strb	r0, [r3, #0]
}
 8008d08:	b009      	add	sp, #36	@ 0x24
 8008d0a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	vTaskDelete(NULL);		// usun task z pamieci jako juz zbedny
 8008d0e:	f005 b9c3 	b.w	800e098 <vTaskDelete>
	while(Sim80x.GPRS.Connection == GPRSConnection_ConnectOK) osDelay(1000);	// nie wysylaj nic do GPS jak polaczony
 8008d12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008d16:	f005 f83d 	bl	800dd94 <osDelay>
 8008d1a:	f894 382b 	ldrb.w	r3, [r4, #2091]	@ 0x82b
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	d0f7      	beq.n	8008d12 <GpsReadTask+0x106>
	Sim80x_SendAtCommand("AT+CGNSCMD=0,\"$PMTK285,1,10*0D\"\r\n", 500, 1,"\r\nOK\r\n");		// 10ms BLUE blink
 8008d22:	4b10      	ldr	r3, [pc, #64]	@ (8008d64 <GpsReadTask+0x158>)
 8008d24:	4810      	ldr	r0, [pc, #64]	@ (8008d68 <GpsReadTask+0x15c>)
 8008d26:	2201      	movs	r2, #1
 8008d28:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8008d2c:	f7f9 fb6c 	bl	8002408 <Sim80x_SendAtCommand>
	printf("FIX ok, position readed.\r\n");
 8008d30:	480e      	ldr	r0, [pc, #56]	@ (8008d6c <GpsReadTask+0x160>)
 8008d32:	f008 f85f 	bl	8010df4 <puts>
	osDelay(15000);			// jeszcze przez 15 sekund czytaj GPS
 8008d36:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8008d3a:	f005 f82b 	bl	800dd94 <osDelay>
 8008d3e:	e7d3      	b.n	8008ce8 <GpsReadTask+0xdc>
			printf("GSM Time update %s.\r\n", time_updated ? "OK":"ERROR");
 8008d40:	2600      	movs	r6, #0
 8008d42:	e7c2      	b.n	8008cca <GpsReadTask+0xbe>
 8008d44:	08017000 	.word	0x08017000
 8008d48:	20000230 	.word	0x20000230
 8008d4c:	08015c98 	.word	0x08015c98
 8008d50:	0801700c 	.word	0x0801700c
 8008d54:	08017024 	.word	0x08017024
 8008d58:	0801709c 	.word	0x0801709c
 8008d5c:	080170b8 	.word	0x080170b8
 8008d60:	20001996 	.word	0x20001996
 8008d64:	080153cc 	.word	0x080153cc
 8008d68:	0801705c 	.word	0x0801705c
 8008d6c:	08017080 	.word	0x08017080
 8008d70:	08015c94 	.word	0x08015c94

08008d74 <StartReadGps>:
{
 8008d74:	b570      	push	{r4, r5, r6, lr}
	if(gpsTaskFlag == 0 && Sim80x.GPRS.Connection != GPRSConnection_ConnectOK) {
 8008d76:	4d12      	ldr	r5, [pc, #72]	@ (8008dc0 <StartReadGps+0x4c>)
 8008d78:	782c      	ldrb	r4, [r5, #0]
{
 8008d7a:	b086      	sub	sp, #24
	if(gpsTaskFlag == 0 && Sim80x.GPRS.Connection != GPRSConnection_ConnectOK) {
 8008d7c:	b93c      	cbnz	r4, 8008d8e <StartReadGps+0x1a>
 8008d7e:	4b11      	ldr	r3, [pc, #68]	@ (8008dc4 <StartReadGps+0x50>)
 8008d80:	f893 382b 	ldrb.w	r3, [r3, #2091]	@ 0x82b
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d106      	bne.n	8008d96 <StartReadGps+0x22>
}
 8008d88:	4620      	mov	r0, r4
 8008d8a:	b006      	add	sp, #24
 8008d8c:	bd70      	pop	{r4, r5, r6, pc}
	return false;				// nie uruchomiono tasku bo juz działa
 8008d8e:	2400      	movs	r4, #0
}
 8008d90:	4620      	mov	r0, r4
 8008d92:	b006      	add	sp, #24
 8008d94:	bd70      	pop	{r4, r5, r6, pc}
		osThreadDef(GPSTask, GpsReadTask, osPriorityNormal, 0, 256);
 8008d96:	4e0c      	ldr	r6, [pc, #48]	@ (8008dc8 <StartReadGps+0x54>)
 8008d98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008d9a:	f10d 0c04 	add.w	ip, sp, #4
 8008d9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008da2:	6833      	ldr	r3, [r6, #0]
 8008da4:	f8cc 3000 	str.w	r3, [ip]
		gpsTaskHandle = osThreadCreate(osThread(GPSTask), NULL);
 8008da8:	4621      	mov	r1, r4
 8008daa:	a801      	add	r0, sp, #4
 8008dac:	f004 ffd6 	bl	800dd5c <osThreadCreate>
 8008db0:	4b06      	ldr	r3, [pc, #24]	@ (8008dcc <StartReadGps+0x58>)
		gpsTaskFlag = 1;
 8008db2:	2401      	movs	r4, #1
		gpsTaskHandle = osThreadCreate(osThread(GPSTask), NULL);
 8008db4:	6018      	str	r0, [r3, #0]
}
 8008db6:	4620      	mov	r0, r4
		gpsTaskFlag = 1;
 8008db8:	702c      	strb	r4, [r5, #0]
}
 8008dba:	b006      	add	sp, #24
 8008dbc:	bd70      	pop	{r4, r5, r6, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20001996 	.word	0x20001996
 8008dc4:	20000230 	.word	0x20000230
 8008dc8:	08014254 	.word	0x08014254
 8008dcc:	2000199c 	.word	0x2000199c

08008dd0 <SysTimeSync>:
}

// ******************************************************************************************************

void SysTimeSync()
{
 8008dd0:	b508      	push	{r3, lr}
    // synchronizacja soft rtc
    Sim80x_GetTime();
 8008dd2:	f7f9 fde9 	bl	80029a8 <Sim80x_GetTime>
    if(Sim80x.Gsm.Time.Year > 2022) {
 8008dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8008e14 <SysTimeSync+0x44>)
 8008dd8:	f8b2 164e 	ldrh.w	r1, [r2, #1614]	@ 0x64e
 8008ddc:	f240 73e6 	movw	r3, #2022	@ 0x7e6
 8008de0:	4299      	cmp	r1, r3
 8008de2:	d915      	bls.n	8008e10 <SysTimeSync+0x40>
		int gsmsec = Sim80x.Gsm.Time.Hour * 3600 + Sim80x.Gsm.Time.Min * 60 + Sim80x.Gsm.Time.Sec;
 8008de4:	f892 3654 	ldrb.w	r3, [r2, #1620]	@ 0x654
 8008de8:	f892 c653 	ldrb.w	ip, [r2, #1619]	@ 0x653
		if(seconds != gsmsec) {
 8008dec:	490a      	ldr	r1, [pc, #40]	@ (8008e18 <SysTimeSync+0x48>)
		int gsmsec = Sim80x.Gsm.Time.Hour * 3600 + Sim80x.Gsm.Time.Min * 60 + Sim80x.Gsm.Time.Sec;
 8008dee:	f892 0655 	ldrb.w	r0, [r2, #1621]	@ 0x655
 8008df2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8008df6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	fb02 330c 	mla	r3, r2, ip, r3
		if(seconds != gsmsec) {
 8008e00:	680a      	ldr	r2, [r1, #0]
		int gsmsec = Sim80x.Gsm.Time.Hour * 3600 + Sim80x.Gsm.Time.Min * 60 + Sim80x.Gsm.Time.Sec;
 8008e02:	4403      	add	r3, r0
		if(seconds != gsmsec) {
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d003      	beq.n	8008e10 <SysTimeSync+0x40>
		  seconds = gsmsec;
		  timesync = 1;
 8008e08:	4a04      	ldr	r2, [pc, #16]	@ (8008e1c <SysTimeSync+0x4c>)
		  seconds = gsmsec;
 8008e0a:	600b      	str	r3, [r1, #0]
		  timesync = 1;
 8008e0c:	2001      	movs	r0, #1
 8008e0e:	7010      	strb	r0, [r2, #0]
		}
    }
}
 8008e10:	bd08      	pop	{r3, pc}
 8008e12:	bf00      	nop
 8008e14:	20000230 	.word	0x20000230
 8008e18:	200019bc 	.word	0x200019bc
 8008e1c:	200019ba 	.word	0x200019ba

08008e20 <CalculateNextMeasTime>:

void CalculateNextMeasTime()
{
 8008e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	printf("Current sys time: %02d:%02d:%02d\r\n", seconds/3600, (seconds%3600)/60, seconds%60);
 8008e24:	4f4e      	ldr	r7, [pc, #312]	@ (8008f60 <CalculateNextMeasTime+0x140>)
 8008e26:	4e4f      	ldr	r6, [pc, #316]	@ (8008f64 <CalculateNextMeasTime+0x144>)
 8008e28:	683d      	ldr	r5, [r7, #0]
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	f8df 914c 	ldr.w	r9, [pc, #332]	@ 8008f7c <CalculateNextMeasTime+0x15c>
 8008e30:	683b      	ldr	r3, [r7, #0]
	printf("Send interval: %d min, Meas count: %d, Meas Interval: 5s\r\n", config.tim_interval, config.measures);
 8008e32:	f8df 8158 	ldr.w	r8, [pc, #344]	@ 8008f8c <CalculateNextMeasTime+0x16c>
	printf("Current sys time: %02d:%02d:%02d\r\n", seconds/3600, (seconds%3600)/60, seconds%60);
 8008e36:	fb86 4102 	smull	r4, r1, r6, r2
 8008e3a:	4411      	add	r1, r2
 8008e3c:	17d0      	asrs	r0, r2, #31
 8008e3e:	ebc0 20e1 	rsb	r0, r0, r1, asr #11
 8008e42:	fb89 4103 	smull	r4, r1, r9, r3
 8008e46:	f44f 6461 	mov.w	r4, #3600	@ 0xe10
 8008e4a:	fb04 2210 	mls	r2, r4, r0, r2
 8008e4e:	4419      	add	r1, r3
 8008e50:	17d8      	asrs	r0, r3, #31
 8008e52:	ebc0 1061 	rsb	r0, r0, r1, asr #5
 8008e56:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8008e5a:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
 8008e5e:	fb89 0102 	smull	r0, r1, r9, r2
 8008e62:	4411      	add	r1, r2
 8008e64:	17d2      	asrs	r2, r2, #31
 8008e66:	ebc2 1261 	rsb	r2, r2, r1, asr #5
 8008e6a:	fb86 1005 	smull	r1, r0, r6, r5
 8008e6e:	4428      	add	r0, r5
 8008e70:	17e9      	asrs	r1, r5, #31
 8008e72:	ebc1 21e0 	rsb	r1, r1, r0, asr #11
 8008e76:	483c      	ldr	r0, [pc, #240]	@ (8008f68 <CalculateNextMeasTime+0x148>)
 8008e78:	f007 ff54 	bl	8010d24 <iprintf>
	printf("Send interval: %d min, Meas count: %d, Meas Interval: 5s\r\n", config.tim_interval, config.measures);
 8008e7c:	f898 203b 	ldrb.w	r2, [r8, #59]	@ 0x3b
 8008e80:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8008e84:	4839      	ldr	r0, [pc, #228]	@ (8008f6c <CalculateNextMeasTime+0x14c>)
 8008e86:	f007 ff4d 	bl	8010d24 <iprintf>
	int nextsend = ((seconds + 60*config.tim_interval + 60)/900) * 900;	// aktualny + interval zaokraglony do 15min
 8008e8a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008e8e:	683d      	ldr	r5, [r7, #0]
	printf("Next send at: %02d:%02d:%02d\r\n", nextsend/3600, (nextsend%3600)/60, nextsend%60);
 8008e90:	4837      	ldr	r0, [pc, #220]	@ (8008f70 <CalculateNextMeasTime+0x150>)
	int nextsend = ((seconds + 60*config.tim_interval + 60)/900) * 900;	// aktualny + interval zaokraglony do 15min
 8008e92:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8008e96:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8008e9a:	353c      	adds	r5, #60	@ 0x3c
 8008e9c:	fb86 2305 	smull	r2, r3, r6, r5
 8008ea0:	442b      	add	r3, r5
 8008ea2:	17ed      	asrs	r5, r5, #31
 8008ea4:	ebc5 2563 	rsb	r5, r5, r3, asr #9
 8008ea8:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8008eac:	fb03 f505 	mul.w	r5, r3, r5
	printf("Next send at: %02d:%02d:%02d\r\n", nextsend/3600, (nextsend%3600)/60, nextsend%60);
 8008eb0:	fb86 3605 	smull	r3, r6, r6, r5
 8008eb4:	442e      	add	r6, r5
 8008eb6:	17e9      	asrs	r1, r5, #31
 8008eb8:	ebc1 21e6 	rsb	r1, r1, r6, asr #11
 8008ebc:	fb04 5411 	mls	r4, r4, r1, r5
 8008ec0:	fb89 3204 	smull	r3, r2, r9, r4
 8008ec4:	4422      	add	r2, r4
 8008ec6:	17e4      	asrs	r4, r4, #31
 8008ec8:	ebc4 1262 	rsb	r2, r4, r2, asr #5
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f007 ff29 	bl	8010d24 <iprintf>
	nextsend -= config.measures * 5;						// odejmij czas potrzebny na pomiary
 8008ed2:	f898 403b 	ldrb.w	r4, [r8, #59]	@ 0x3b
 8008ed6:	ebc4 7384 	rsb	r3, r4, r4, lsl #30
 8008eda:	ebc4 0483 	rsb	r4, r4, r3, lsl #2
	if(nextsend < 0 ) nextsend += SEC_PER_DAY;				// jak < 0 to start przed polnoca
 8008ede:	1964      	adds	r4, r4, r5
	if(nextsend <= seconds) {								// za malo czasu od teraz do startu
 8008ee0:	683b      	ldr	r3, [r7, #0]
	if(nextsend < 0 ) nextsend += SEC_PER_DAY;				// jak < 0 to start przed polnoca
 8008ee2:	d42d      	bmi.n	8008f40 <CalculateNextMeasTime+0x120>
	if(nextsend <= seconds) {								// za malo czasu od teraz do startu
 8008ee4:	42a3      	cmp	r3, r4
 8008ee6:	da31      	bge.n	8008f4c <CalculateNextMeasTime+0x12c>
		nextsend += 60*config.tim_interval;					// dodaj jeden interwal
		printf("Advance by one send interval\r\n");
	}
	if(nextsend >= SEC_PER_DAY) {
 8008ee8:	4b22      	ldr	r3, [pc, #136]	@ (8008f74 <CalculateNextMeasTime+0x154>)
 8008eea:	429c      	cmp	r4, r3
 8008eec:	dd06      	ble.n	8008efc <CalculateNextMeasTime+0xdc>
		nextsend -= SEC_PER_DAY;							// wysylka bedzie w kolejnym dniu
		dayleap = true;										// blokada do czasu zmiany dnia
 8008eee:	4b22      	ldr	r3, [pc, #136]	@ (8008f78 <CalculateNextMeasTime+0x158>)
		nextsend -= SEC_PER_DAY;							// wysylka bedzie w kolejnym dniu
 8008ef0:	f5a4 34a8 	sub.w	r4, r4, #86016	@ 0x15000
		dayleap = true;										// blokada do czasu zmiany dnia
 8008ef4:	2201      	movs	r2, #1
		nextsend -= SEC_PER_DAY;							// wysylka bedzie w kolejnym dniu
 8008ef6:	f5a4 74c0 	sub.w	r4, r4, #384	@ 0x180
		dayleap = true;										// blokada do czasu zmiany dnia
 8008efa:	701a      	strb	r2, [r3, #0]
	}
	meas_start = nextsend;
	printf("Next measure start at: %02d:%02d:%02d\r\n", nextsend/3600, (nextsend%3600)/60, nextsend%60);
 8008efc:	4a1f      	ldr	r2, [pc, #124]	@ (8008f7c <CalculateNextMeasTime+0x15c>)
 8008efe:	4919      	ldr	r1, [pc, #100]	@ (8008f64 <CalculateNextMeasTime+0x144>)
 8008f00:	fb82 5004 	smull	r5, r0, r2, r4
 8008f04:	fb81 3104 	smull	r3, r1, r1, r4
 8008f08:	4420      	add	r0, r4
 8008f0a:	17e3      	asrs	r3, r4, #31
 8008f0c:	4421      	add	r1, r4
 8008f0e:	ebc3 21e1 	rsb	r1, r3, r1, asr #11
 8008f12:	ebc3 1360 	rsb	r3, r3, r0, asr #5
	meas_start = nextsend;
 8008f16:	481a      	ldr	r0, [pc, #104]	@ (8008f80 <CalculateNextMeasTime+0x160>)
	printf("Next measure start at: %02d:%02d:%02d\r\n", nextsend/3600, (nextsend%3600)/60, nextsend%60);
 8008f18:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	meas_start = nextsend;
 8008f1c:	6004      	str	r4, [r0, #0]
	printf("Next measure start at: %02d:%02d:%02d\r\n", nextsend/3600, (nextsend%3600)/60, nextsend%60);
 8008f1e:	f44f 6061 	mov.w	r0, #3600	@ 0xe10
 8008f22:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 8008f26:	fb00 4411 	mls	r4, r0, r1, r4
 8008f2a:	fb82 0204 	smull	r0, r2, r2, r4
 8008f2e:	4422      	add	r2, r4
 8008f30:	17e4      	asrs	r4, r4, #31
 8008f32:	ebc4 1262 	rsb	r2, r4, r2, asr #5
 8008f36:	4813      	ldr	r0, [pc, #76]	@ (8008f84 <CalculateNextMeasTime+0x164>)
}
 8008f38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	printf("Next measure start at: %02d:%02d:%02d\r\n", nextsend/3600, (nextsend%3600)/60, nextsend%60);
 8008f3c:	f007 bef2 	b.w	8010d24 <iprintf>
	if(nextsend < 0 ) nextsend += SEC_PER_DAY;				// jak < 0 to start przed polnoca
 8008f40:	f504 34a8 	add.w	r4, r4, #86016	@ 0x15000
 8008f44:	f504 74c0 	add.w	r4, r4, #384	@ 0x180
	if(nextsend <= seconds) {								// za malo czasu od teraz do startu
 8008f48:	429c      	cmp	r4, r3
 8008f4a:	dcd7      	bgt.n	8008efc <CalculateNextMeasTime+0xdc>
		nextsend += 60*config.tim_interval;					// dodaj jeden interwal
 8008f4c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
		printf("Advance by one send interval\r\n");
 8008f50:	480d      	ldr	r0, [pc, #52]	@ (8008f88 <CalculateNextMeasTime+0x168>)
		nextsend += 60*config.tim_interval;					// dodaj jeden interwal
 8008f52:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8008f56:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		printf("Advance by one send interval\r\n");
 8008f5a:	f007 ff4b 	bl	8010df4 <puts>
 8008f5e:	e7c3      	b.n	8008ee8 <CalculateNextMeasTime+0xc8>
 8008f60:	200019bc 	.word	0x200019bc
 8008f64:	91a2b3c5 	.word	0x91a2b3c5
 8008f68:	080170c8 	.word	0x080170c8
 8008f6c:	080170ec 	.word	0x080170ec
 8008f70:	08017128 	.word	0x08017128
 8008f74:	0001517f 	.word	0x0001517f
 8008f78:	20001994 	.word	0x20001994
 8008f7c:	88888889 	.word	0x88888889
 8008f80:	20001990 	.word	0x20001990
 8008f84:	08017168 	.word	0x08017168
 8008f88:	08017148 	.word	0x08017148
 8008f8c:	200019c0 	.word	0x200019c0

08008f90 <THP_MainTask>:

void THP_MainTask(void const *argument)
{
 8008f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  POWER_OFF();
 8008f94:	488b      	ldr	r0, [pc, #556]	@ (80091c4 <THP_MainTask+0x234>)
{
 8008f96:	b089      	sub	sp, #36	@ 0x24
	  POWER_OFF();
 8008f98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f002 f9e7 	bl	800b370 <HAL_GPIO_WritePin>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 8008fa2:	4889      	ldr	r0, [pc, #548]	@ (80091c8 <THP_MainTask+0x238>)
 8008fa4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008fa8:	f002 f9dc 	bl	800b364 <HAL_GPIO_ReadPin>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	f000 824e 	beq.w	800944e <THP_MainTask+0x4be>
	  HAL_UART_RxCpltCallback(&huart1); //CLI
 8008fb2:	4886      	ldr	r0, [pc, #536]	@ (80091cc <THP_MainTask+0x23c>)
 8008fb4:	f7fb f860 	bl	8004078 <HAL_UART_RxCpltCallback>
	  HAL_UART_RxCpltCallback(&huart2); //SIM
 8008fb8:	4885      	ldr	r0, [pc, #532]	@ (80091d0 <THP_MainTask+0x240>)
 8008fba:	f7fb f85d 	bl	8004078 <HAL_UART_RxCpltCallback>
	  check_powerOn();
 8008fbe:	f7fe fb2f 	bl	8007620 <check_powerOn>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 8008fc2:	4881      	ldr	r0, [pc, #516]	@ (80091c8 <THP_MainTask+0x238>)
 8008fc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008fc8:	f002 f9cc 	bl	800b364 <HAL_GPIO_ReadPin>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	f000 8275 	beq.w	80094bc <THP_MainTask+0x52c>
	  printf("\r\n\r\n\r\nInitializing (RTOS version)...\r\n");
 8008fd2:	4880      	ldr	r0, [pc, #512]	@ (80091d4 <THP_MainTask+0x244>)
 8008fd4:	f007 ff0e 	bl	8010df4 <puts>
	  if (Load_config()==0) {printf("Config loaded OK \r\n");};
 8008fd8:	f7f8 fa6a 	bl	80014b0 <Load_config>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	f000 8269 	beq.w	80094b4 <THP_MainTask+0x524>
	  charger_state = BQ25798_check();
 8008fe2:	f7fa fe73 	bl	8003ccc <BQ25798_check>
 8008fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80091d8 <THP_MainTask+0x248>)
 8008fe8:	7018      	strb	r0, [r3, #0]
	  if (charger_state) {
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f040 8235 	bne.w	800945c <THP_MainTask+0x4cc>
		  BQ25798_Chrg_NTC_CTRL1_write(1);
		  CE_EN();
		  BQ25798_MPPT_CTRL(1); //MPPT ON

	  }
	  LED1_ON();
 8008ff2:	4874      	ldr	r0, [pc, #464]	@ (80091c4 <THP_MainTask+0x234>)
	  LED2_OFF();
	  ADC_DMA_Start();

	  TMP117.present = TMP117_check();
 8008ff4:	f8df 823c 	ldr.w	r8, [pc, #572]	@ 8009234 <THP_MainTask+0x2a4>
	  SHT3.present = SHTC3_check();
 8008ff8:	4f78      	ldr	r7, [pc, #480]	@ (80091dc <THP_MainTask+0x24c>)
	  MS8607.present = MS8607_check();
 8008ffa:	4c79      	ldr	r4, [pc, #484]	@ (80091e0 <THP_MainTask+0x250>)
	  BME280.present = BME280_check();
 8008ffc:	4e79      	ldr	r6, [pc, #484]	@ (80091e4 <THP_MainTask+0x254>)
	  DPS368.present = DPS368_check();
 8008ffe:	4d7a      	ldr	r5, [pc, #488]	@ (80091e8 <THP_MainTask+0x258>)

	  getConfVars();

	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
	//  printf("TMP117 conf var %x\r\n", tmp117_avr);
	  dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 8009000:	f8df 9234 	ldr.w	r9, [pc, #564]	@ 8009238 <THP_MainTask+0x2a8>
	  printf("DPS368 conf var %x\r\n", dps368_ovr_conf);
	  dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 8009004:	f8df a234 	ldr.w	sl, [pc, #564]	@ 800923c <THP_MainTask+0x2ac>
	  LED1_ON();
 8009008:	2200      	movs	r2, #0
 800900a:	2120      	movs	r1, #32
 800900c:	f002 f9b0 	bl	800b370 <HAL_GPIO_WritePin>
	  LED2_OFF();
 8009010:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009014:	2201      	movs	r2, #1
 8009016:	486b      	ldr	r0, [pc, #428]	@ (80091c4 <THP_MainTask+0x234>)
 8009018:	f002 f9aa 	bl	800b370 <HAL_GPIO_WritePin>
	  ADC_DMA_Start();
 800901c:	f7fa fa24 	bl	8003468 <ADC_DMA_Start>
	  TMP117.present = TMP117_check();
 8009020:	f000 fb48 	bl	80096b4 <TMP117_check>
 8009024:	f898 3000 	ldrb.w	r3, [r8]
 8009028:	f360 0300 	bfi	r3, r0, #0, #1
 800902c:	f888 3000 	strb.w	r3, [r8]
	  SHT3.present = SHTC3_check();
 8009030:	f000 fc2e 	bl	8009890 <SHTC3_check>
 8009034:	783b      	ldrb	r3, [r7, #0]
 8009036:	f360 0300 	bfi	r3, r0, #0, #1
 800903a:	703b      	strb	r3, [r7, #0]
	  MS8607.present = MS8607_check();
 800903c:	f000 fbf4 	bl	8009828 <MS8607_check>
 8009040:	7823      	ldrb	r3, [r4, #0]
 8009042:	f360 0300 	bfi	r3, r0, #0, #1
 8009046:	7023      	strb	r3, [r4, #0]
	  BME280.present = BME280_check();
 8009048:	f000 fd2a 	bl	8009aa0 <BME280_check>
 800904c:	7833      	ldrb	r3, [r6, #0]
 800904e:	f360 0300 	bfi	r3, r0, #0, #1
 8009052:	7033      	strb	r3, [r6, #0]
	  DPS368.present = DPS368_check();
 8009054:	f7fc fcdc 	bl	8005a10 <DPS368_check>
 8009058:	782b      	ldrb	r3, [r5, #0]
 800905a:	f360 0300 	bfi	r3, r0, #0, #1
 800905e:	702b      	strb	r3, [r5, #0]
	  getConfVars();
 8009060:	f7fe ff36 	bl	8007ed0 <getConfVars>
	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 8009064:	f898 0000 	ldrb.w	r0, [r8]
 8009068:	f3c0 0083 	ubfx	r0, r0, #2, #4
 800906c:	f000 fbb8 	bl	80097e0 <tmp117_avr_conf>
 8009070:	4602      	mov	r2, r0
	  dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 8009072:	7828      	ldrb	r0, [r5, #0]
	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 8009074:	4b5d      	ldr	r3, [pc, #372]	@ (80091ec <THP_MainTask+0x25c>)
	  dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 8009076:	f3c0 0083 	ubfx	r0, r0, #2, #4
	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 800907a:	801a      	strh	r2, [r3, #0]
	  dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 800907c:	f7fd f87a 	bl	8006174 <dps368_ovr_config>
 8009080:	f8a9 0000 	strh.w	r0, [r9]
	  printf("DPS368 conf var %x\r\n", dps368_ovr_conf);
 8009084:	f8b9 1000 	ldrh.w	r1, [r9]
 8009088:	4859      	ldr	r0, [pc, #356]	@ (80091f0 <THP_MainTask+0x260>)
 800908a:	b289      	uxth	r1, r1
 800908c:	f007 fe4a 	bl	8010d24 <iprintf>
	  dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 8009090:	f8b9 3000 	ldrh.w	r3, [r9]
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 8009094:	4a57      	ldr	r2, [pc, #348]	@ (80091f4 <THP_MainTask+0x264>)
	  dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 8009096:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800909a:	f88a 3000 	strb.w	r3, [sl]
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 800909e:	f8b9 3000 	ldrh.w	r3, [r9]

	  DPS368_init(FIFO_DIS, INT_NONE);
 80090a2:	2100      	movs	r1, #0
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 80090a4:	b2db      	uxtb	r3, r3
	  DPS368_init(FIFO_DIS, INT_NONE);
 80090a6:	4608      	mov	r0, r1
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 80090a8:	7013      	strb	r3, [r2, #0]
	  DPS368_init(FIFO_DIS, INT_NONE);
 80090aa:	f7fc ff57 	bl	8005f5c <DPS368_init>
	  DPS368_temp_correct(dps368_ovr_temp);
 80090ae:	f89a 0000 	ldrb.w	r0, [sl]
 80090b2:	f7fc fee5 	bl	8005e80 <DPS368_temp_correct>

	  sht3_mode=SHT3.sensor_conf;
 80090b6:	783b      	ldrb	r3, [r7, #0]
 80090b8:	4a4f      	ldr	r2, [pc, #316]	@ (80091f8 <THP_MainTask+0x268>)
	  if(sht3_mode==normal) printf("SHTC3 normal mode\r\n");
 80090ba:	f013 0f3c 	tst.w	r3, #60	@ 0x3c
	  sht3_mode=SHT3.sensor_conf;
 80090be:	f3c3 0183 	ubfx	r1, r3, #2, #4
	  if(sht3_mode==normal) printf("SHTC3 normal mode\r\n");
 80090c2:	bf0c      	ite	eq
 80090c4:	484d      	ldreq	r0, [pc, #308]	@ (80091fc <THP_MainTask+0x26c>)
	  else printf("SHTC3 low power mode\r\n");
 80090c6:	484e      	ldrne	r0, [pc, #312]	@ (8009200 <THP_MainTask+0x270>)
	  sht3_mode=SHT3.sensor_conf;
 80090c8:	7011      	strb	r1, [r2, #0]
	  else printf("SHTC3 low power mode\r\n");
 80090ca:	f007 fe93 	bl	8010df4 <puts>

	  bme280_conf_change(BME280.sensor_conf);
 80090ce:	7830      	ldrb	r0, [r6, #0]
 80090d0:	f3c0 0083 	ubfx	r0, r0, #2, #4
 80090d4:	f000 fe3a 	bl	8009d4c <bme280_conf_change>

	  MS8607_osr(MS8607.sensor_conf);
 80090d8:	7820      	ldrb	r0, [r4, #0]
 80090da:	f3c0 0083 	ubfx	r0, r0, #2, #4
 80090de:	f7fd fc6d 	bl	80069bc <MS8607_osr>
	  printf("MS8607 OSR %d\r\n", 256<<MS8607.sensor_conf);
 80090e2:	7823      	ldrb	r3, [r4, #0]
 80090e4:	4847      	ldr	r0, [pc, #284]	@ (8009204 <THP_MainTask+0x274>)
 80090e6:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80090ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80090ee:	4099      	lsls	r1, r3
 80090f0:	f007 fe18 	bl	8010d24 <iprintf>

	  if(!TMP117.present && !SHT3.present && !MS8607.present && !BME280.present && !DPS368.present)
 80090f4:	783a      	ldrb	r2, [r7, #0]
 80090f6:	f898 3000 	ldrb.w	r3, [r8]
 80090fa:	7820      	ldrb	r0, [r4, #0]
 80090fc:	7831      	ldrb	r1, [r6, #0]
 80090fe:	4313      	orrs	r3, r2
 8009100:	4303      	orrs	r3, r0
 8009102:	782a      	ldrb	r2, [r5, #0]
 8009104:	430b      	orrs	r3, r1
 8009106:	4313      	orrs	r3, r2
 8009108:	f013 0301 	ands.w	r3, r3, #1
 800910c:	f040 819c 	bne.w	8009448 <THP_MainTask+0x4b8>
		  config.disp_type = 0;
 8009110:	493d      	ldr	r1, [pc, #244]	@ (8009208 <THP_MainTask+0x278>)
 8009112:	9101      	str	r1, [sp, #4]
 8009114:	79ca      	ldrb	r2, [r1, #7]
 8009116:	f363 0243 	bfi	r2, r3, #1, #3
 800911a:	71ca      	strb	r2, [r1, #7]

	  if (cmox_initialize(NULL) != CMOX_INIT_SUCCESS) puts("Cipher init error\r");
 800911c:	2000      	movs	r0, #0
 800911e:	f7f7 f857 	bl	80001d0 <cmox_initialize>
 8009122:	2800      	cmp	r0, #0
 8009124:	f040 8196 	bne.w	8009454 <THP_MainTask+0x4c4>

	  Sim80x_Init(osPriorityNormal);
 8009128:	2000      	movs	r0, #0
 800912a:	f7f9 fcb7 	bl	8002a9c <Sim80x_Init>
	  printf("SIM868 module startup %s.\r\n", Sim80x.Status.Power ? "OK" : "FAILED");
 800912e:	4b37      	ldr	r3, [pc, #220]	@ (800920c <THP_MainTask+0x27c>)
	  // uruchomienie taska sensorów
	  osThreadDef(SensorTask, SensorsTask, osPriorityNormal, 0, 512);
 8009130:	4e37      	ldr	r6, [pc, #220]	@ (8009210 <THP_MainTask+0x280>)
	  printf("SIM868 module startup %s.\r\n", Sim80x.Status.Power ? "OK" : "FAILED");
 8009132:	f893 2330 	ldrb.w	r2, [r3, #816]	@ 0x330
 8009136:	4b37      	ldr	r3, [pc, #220]	@ (8009214 <THP_MainTask+0x284>)
 8009138:	4937      	ldr	r1, [pc, #220]	@ (8009218 <THP_MainTask+0x288>)
 800913a:	4838      	ldr	r0, [pc, #224]	@ (800921c <THP_MainTask+0x28c>)
 800913c:	f8df a100 	ldr.w	sl, [pc, #256]	@ 8009240 <THP_MainTask+0x2b0>
 8009140:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 8009244 <THP_MainTask+0x2b4>
 8009144:	f8df b100 	ldr.w	fp, [pc, #256]	@ 8009248 <THP_MainTask+0x2b8>
 8009148:	f012 0f04 	tst.w	r2, #4
 800914c:	bf18      	it	ne
 800914e:	4619      	movne	r1, r3
 8009150:	f007 fde8 	bl	8010d24 <iprintf>
	  osThreadDef(SensorTask, SensorsTask, osPriorityNormal, 0, 512);
 8009154:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009156:	ac03      	add	r4, sp, #12
 8009158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	  GPRS_meas_frame.token = GPRS_TOKEN;
	  GPRS_meas_frame.UID = UID;

	  meas_start = -1;
	  meas_count = config.measures;
	  if(meas_count == 0) meas_count = 1;
 800915a:	2500      	movs	r5, #0
	  measTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 800915c:	4629      	mov	r1, r5
	  osThreadDef(SensorTask, SensorsTask, osPriorityNormal, 0, 512);
 800915e:	6833      	ldr	r3, [r6, #0]
 8009160:	6023      	str	r3, [r4, #0]
	  measTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8009162:	a803      	add	r0, sp, #12
 8009164:	f004 fdfa 	bl	800dd5c <osThreadCreate>
 8009168:	4b2d      	ldr	r3, [pc, #180]	@ (8009220 <THP_MainTask+0x290>)
 800916a:	6018      	str	r0, [r3, #0]
	  osDelay(10);
 800916c:	200a      	movs	r0, #10
 800916e:	f004 fe11 	bl	800dd94 <osDelay>
	  uint32_t ticks30ms = HAL_GetTick();
 8009172:	f000 ff0f 	bl	8009f94 <HAL_GetTick>
 8009176:	4607      	mov	r7, r0
	  uint32_t ticksbqwd = HAL_GetTick();
 8009178:	f000 ff0c 	bl	8009f94 <HAL_GetTick>
 800917c:	4606      	mov	r6, r0
	  uint32_t secdiv = HAL_GetTick();
 800917e:	f000 ff09 	bl	8009f94 <HAL_GetTick>
 8009182:	4604      	mov	r4, r0
	  const uint32_t UID = getUID();
 8009184:	f7fe fa22 	bl	80075cc <getUID>
	  if(meas_count == 0) meas_count = 1;
 8009188:	9b01      	ldr	r3, [sp, #4]
 800918a:	4a26      	ldr	r2, [pc, #152]	@ (8009224 <THP_MainTask+0x294>)
 800918c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
	  GPRS_status_frame.token = GPRS_TOKEN;
 8009190:	f8df c0b8 	ldr.w	ip, [pc, #184]	@ 800924c <THP_MainTask+0x2bc>
	  GPRS_GPS_frame.token = GPRS_TOKEN;
 8009194:	4924      	ldr	r1, [pc, #144]	@ (8009228 <THP_MainTask+0x298>)
	  GPRS_status_frame.UID = UID;
 8009196:	f8cc 0004 	str.w	r0, [ip, #4]
	  if(meas_count == 0) meas_count = 1;
 800919a:	2b01      	cmp	r3, #1
 800919c:	bf38      	it	cc
 800919e:	2301      	movcc	r3, #1
 80091a0:	8013      	strh	r3, [r2, #0]
	  GPRS_meas_frame.token = GPRS_TOKEN;
 80091a2:	4a22      	ldr	r2, [pc, #136]	@ (800922c <THP_MainTask+0x29c>)
	  GPRS_GPS_frame.UID = UID;
 80091a4:	6048      	str	r0, [r1, #4]
	  GPRS_status_frame.token = GPRS_TOKEN;
 80091a6:	f64d 63f8 	movw	r3, #57080	@ 0xdef8
	  GPRS_meas_frame.token = GPRS_TOKEN;
 80091aa:	8013      	strh	r3, [r2, #0]
	  GPRS_meas_frame.UID = UID;
 80091ac:	6050      	str	r0, [r2, #4]
	  meas_start = -1;
 80091ae:	4a20      	ldr	r2, [pc, #128]	@ (8009230 <THP_MainTask+0x2a0>)
	  GPRS_status_frame.token = GPRS_TOKEN;
 80091b0:	f8ac 3000 	strh.w	r3, [ip]
	  GPRS_GPS_frame.token = GPRS_TOKEN;
 80091b4:	800b      	strh	r3, [r1, #0]
	  meas_start = -1;
 80091b6:	f04f 33ff 	mov.w	r3, #4294967295
	  if(meas_count == 0) meas_count = 1;
 80091ba:	f04f 0963 	mov.w	r9, #99	@ 0x63
	  meas_start = -1;
 80091be:	6013      	str	r3, [r2, #0]
	  if(meas_count == 0) meas_count = 1;
 80091c0:	e0b4      	b.n	800932c <THP_MainTask+0x39c>
 80091c2:	bf00      	nop
 80091c4:	48000400 	.word	0x48000400
 80091c8:	48000800 	.word	0x48000800
 80091cc:	200016d4 	.word	0x200016d4
 80091d0:	20001650 	.word	0x20001650
 80091d4:	08017198 	.word	0x08017198
 80091d8:	20001bcf 	.word	0x20001bcf
 80091dc:	20001ba8 	.word	0x20001ba8
 80091e0:	20001b84 	.word	0x20001b84
 80091e4:	20001b60 	.word	0x20001b60
 80091e8:	20001b48 	.word	0x20001b48
 80091ec:	200019b2 	.word	0x200019b2
 80091f0:	080171e8 	.word	0x080171e8
 80091f4:	200019b0 	.word	0x200019b0
 80091f8:	200019ac 	.word	0x200019ac
 80091fc:	08017200 	.word	0x08017200
 8009200:	08017214 	.word	0x08017214
 8009204:	0801722c 	.word	0x0801722c
 8009208:	200019c0 	.word	0x200019c0
 800920c:	20000230 	.word	0x20000230
 8009210:	08014268 	.word	0x08014268
 8009214:	08015c94 	.word	0x08015c94
 8009218:	08017190 	.word	0x08017190
 800921c:	08017250 	.word	0x08017250
 8009220:	200019a0 	.word	0x200019a0
 8009224:	200019b8 	.word	0x200019b8
 8009228:	20001ad4 	.word	0x20001ad4
 800922c:	20001ab4 	.word	0x20001ab4
 8009230:	20001990 	.word	0x20001990
 8009234:	20001bc0 	.word	0x20001bc0
 8009238:	200019ae 	.word	0x200019ae
 800923c:	200019b1 	.word	0x200019b1
 8009240:	200019b4 	.word	0x200019b4
 8009244:	200019bc 	.word	0x200019bc
 8009248:	2000000c 	.word	0x2000000c
 800924c:	20001af4 	.word	0x20001af4
			  ticksbqwd = HAL_GetTick();
			  BQ25798_WD_RST();
		  }

		  // wyslanie i wyswietlenie pomiarow
	      if(sensors_data_ready) {						// taks sensorow zakonczyl dzialanie ?
 8009250:	f89a 3000 	ldrb.w	r3, [sl]
 8009254:	b193      	cbz	r3, 800927c <THP_MainTask+0x2ec>
	    	  sensors_data_ready = 0;
	    	  if(config.disp_type > 0) {
 8009256:	9b01      	ldr	r3, [sp, #4]
 8009258:	79d8      	ldrb	r0, [r3, #7]
	    	  sensors_data_ready = 0;
 800925a:	2300      	movs	r3, #0
	    	  if(config.disp_type > 0) {
 800925c:	f010 0f0e 	tst.w	r0, #14
	    	  sensors_data_ready = 0;
 8009260:	f88a 3000 	strb.w	r3, [sl]
	    	  if(config.disp_type > 0) {
 8009264:	f040 80a4 	bne.w	80093b0 <THP_MainTask+0x420>
	    		  display_values(config.disp_type);
	    	  }

	    	  if(send_enable) {
 8009268:	4996      	ldr	r1, [pc, #600]	@ (80094c4 <THP_MainTask+0x534>)
 800926a:	780b      	ldrb	r3, [r1, #0]
 800926c:	b133      	cbz	r3, 800927c <THP_MainTask+0x2ec>
	    		  send_enable = 0;
	    		  if(!meas_cont_mode) printf("Starting GPRS thread %s\r\n", StartSendGPRS() ? "OK":"ERROR");
 800926e:	4b96      	ldr	r3, [pc, #600]	@ (80094c8 <THP_MainTask+0x538>)
 8009270:	781b      	ldrb	r3, [r3, #0]
	    		  send_enable = 0;
 8009272:	2200      	movs	r2, #0
 8009274:	700a      	strb	r2, [r1, #0]
	    		  if(!meas_cont_mode) printf("Starting GPRS thread %s\r\n", StartSendGPRS() ? "OK":"ERROR");
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 80aa 	beq.w	80093d0 <THP_MainTask+0x440>
	    	  }
	      }
//--------------------------------------------------------------------------------------------------
		  // zadania wykonywane co sekunde
		  if(HAL_GetTick() - secdiv >= 1000UL) {
 800927c:	f000 fe8a 	bl	8009f94 <HAL_GetTick>
 8009280:	1b00      	subs	r0, r0, r4
 8009282:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009286:	d350      	bcc.n	800932a <THP_MainTask+0x39a>
			  secdiv = HAL_GetTick();
 8009288:	f000 fe84 	bl	8009f94 <HAL_GetTick>
			  // zwieksz globalny licznik sekund liczacy sekundy danego jednego dnia
			  if(++seconds >= SEC_PER_DAY) seconds = 0;
 800928c:	f8d8 3000 	ldr.w	r3, [r8]
 8009290:	4a8e      	ldr	r2, [pc, #568]	@ (80094cc <THP_MainTask+0x53c>)
 8009292:	3301      	adds	r3, #1
 8009294:	4293      	cmp	r3, r2
 8009296:	f8c8 3000 	str.w	r3, [r8]
 800929a:	bfc4      	itt	gt
 800929c:	2300      	movgt	r3, #0
 800929e:	f8c8 3000 	strgt.w	r3, [r8]
			  // zeruj flage nastepnego dnia (nie przy stricte 0, bo korekta moze spowodowac przeoczenie)
			  if(seconds < 60) dayleap = false;
 80092a2:	f8d8 3000 	ldr.w	r3, [r8]
 80092a6:	2b3b      	cmp	r3, #59	@ 0x3b
			  secdiv = HAL_GetTick();
 80092a8:	4604      	mov	r4, r0
			  if(seconds < 60) dayleap = false;
 80092aa:	dc02      	bgt.n	80092b2 <THP_MainTask+0x322>
 80092ac:	4a88      	ldr	r2, [pc, #544]	@ (80094d0 <THP_MainTask+0x540>)
 80092ae:	2300      	movs	r3, #0
 80092b0:	7013      	strb	r3, [r2, #0]

			  // ===================================================================================

			  if(meas_start < 0 && timesync) CalculateNextMeasTime();		// oblicz czas rozpoczecia pomiaru
 80092b2:	4b88      	ldr	r3, [pc, #544]	@ (80094d4 <THP_MainTask+0x544>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	db4c      	blt.n	8009354 <THP_MainTask+0x3c4>
			  if(registered && meas_start < 0) SysTimeSync();
 80092ba:	2d00      	cmp	r5, #0
 80092bc:	d051      	beq.n	8009362 <THP_MainTask+0x3d2>

			  // uruchomienie pomiaru
			  if((!dayleap && meas_start >= 0 && seconds >= meas_start) || meas_cont_mode) {	// czas uruchomic pomiar ?
 80092be:	4a84      	ldr	r2, [pc, #528]	@ (80094d0 <THP_MainTask+0x540>)
 80092c0:	7812      	ldrb	r2, [r2, #0]
 80092c2:	2a00      	cmp	r2, #0
 80092c4:	d154      	bne.n	8009370 <THP_MainTask+0x3e0>
 80092c6:	f8d8 2000 	ldr.w	r2, [r8]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	db50      	blt.n	8009370 <THP_MainTask+0x3e0>
				  if(++measint >= 5) {
 80092ce:	f109 0901 	add.w	r9, r9, #1
 80092d2:	fa5f f989 	uxtb.w	r9, r9
 80092d6:	f1b9 0f04 	cmp.w	r9, #4
 80092da:	d910      	bls.n	80092fe <THP_MainTask+0x36e>
					  measint = 0;
					  if (meas_count > 0 || meas_cont_mode) {
 80092dc:	4b7e      	ldr	r3, [pc, #504]	@ (80094d8 <THP_MainTask+0x548>)
 80092de:	4a7a      	ldr	r2, [pc, #488]	@ (80094c8 <THP_MainTask+0x538>)
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	f892 9000 	ldrb.w	r9, [r2]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f040 8083 	bne.w	80093f2 <THP_MainTask+0x462>
 80092ec:	f1b9 0f00 	cmp.w	r9, #0
 80092f0:	d005      	beq.n	80092fe <THP_MainTask+0x36e>
					  measint = 0;
 80092f2:	f04f 0900 	mov.w	r9, #0
								  measint = 99;
								  meas_count = config.measures;
								  CalculateNextMeasTime();					// oblicz czas rozpoczecia kolejnego pomiaru
							  } else printf("Measure no.%u\r\n", config.measures-meas_count);
						  }
						  vTaskResume(measTaskHandle);						// odblokuj taks pomiarow
 80092f6:	4b79      	ldr	r3, [pc, #484]	@ (80094dc <THP_MainTask+0x54c>)
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	f004 ff55 	bl	800e1a8 <vTaskResume>
			  }

			  // ===================================================================================

			  // czas na odczyt GPS ?, nie odczytuj w trakcie połączenia z serwerem, bo komendy bruzdza
			  if(++gps_start >= gps_interval) {
 80092fe:	4a78      	ldr	r2, [pc, #480]	@ (80094e0 <THP_MainTask+0x550>)
 8009300:	6813      	ldr	r3, [r2, #0]
 8009302:	3301      	adds	r3, #1
 8009304:	6013      	str	r3, [r2, #0]
 8009306:	f8db 2000 	ldr.w	r2, [fp]
 800930a:	4293      	cmp	r3, r2
 800930c:	d255      	bcs.n	80093ba <THP_MainTask+0x42a>
					  gps_start = 0;
					  gps_interval = 15*60;						// co 15 minut proba odczytu GPS
				  } else gps_interval += 30;					// nie wolno zalaczyc GPS -> za 30sek kolejna proba
			  }
			  // jak zlapano FIX to następny odczyt GPS za 12 godzin
			  if(Sim80x.GPS.Fix && gps_interval < GPS_INTERVAL)  gps_interval = GPS_INTERVAL;	// GPS OK, nastepny raz za 12 godzin
 800930e:	4b75      	ldr	r3, [pc, #468]	@ (80094e4 <THP_MainTask+0x554>)
 8009310:	f893 3b32 	ldrb.w	r3, [r3, #2866]	@ 0xb32
 8009314:	b14b      	cbz	r3, 800932a <THP_MainTask+0x39a>
 8009316:	f8db 2000 	ldr.w	r2, [fp]
 800931a:	f64a 03bf 	movw	r3, #43199	@ 0xa8bf
 800931e:	429a      	cmp	r2, r3
 8009320:	bf9c      	itt	ls
 8009322:	f64a 03c0 	movwls	r3, #43200	@ 0xa8c0
 8009326:	f8cb 3000 	strls.w	r3, [fp]

			  // ===================================================================================
		  }
	      __WFI();
 800932a:	bf30      	wfi
		  CLI();
 800932c:	f7fc fb2a 	bl	8005984 <CLI>
		  if(HAL_GetTick()-ticks30ms >= 30) {
 8009330:	f000 fe30 	bl	8009f94 <HAL_GetTick>
 8009334:	1bc0      	subs	r0, r0, r7
 8009336:	281d      	cmp	r0, #29
 8009338:	d81f      	bhi.n	800937a <THP_MainTask+0x3ea>
		  if(HAL_GetTick()-ticksbqwd >= 15000) {
 800933a:	f000 fe2b 	bl	8009f94 <HAL_GetTick>
 800933e:	f643 2397 	movw	r3, #14999	@ 0x3a97
 8009342:	1b80      	subs	r0, r0, r6
 8009344:	4298      	cmp	r0, r3
 8009346:	d983      	bls.n	8009250 <THP_MainTask+0x2c0>
			  ticksbqwd = HAL_GetTick();
 8009348:	f000 fe24 	bl	8009f94 <HAL_GetTick>
 800934c:	4606      	mov	r6, r0
			  BQ25798_WD_RST();
 800934e:	f7fa fe01 	bl	8003f54 <BQ25798_WD_RST>
 8009352:	e77d      	b.n	8009250 <THP_MainTask+0x2c0>
			  if(meas_start < 0 && timesync) CalculateNextMeasTime();		// oblicz czas rozpoczecia pomiaru
 8009354:	4b64      	ldr	r3, [pc, #400]	@ (80094e8 <THP_MainTask+0x558>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d163      	bne.n	8009424 <THP_MainTask+0x494>
			  if(registered && meas_start < 0) SysTimeSync();
 800935c:	b10d      	cbz	r5, 8009362 <THP_MainTask+0x3d2>
 800935e:	f7ff fd37 	bl	8008dd0 <SysTimeSync>
			  if((!dayleap && meas_start >= 0 && seconds >= meas_start) || meas_cont_mode) {	// czas uruchomic pomiar ?
 8009362:	4b5b      	ldr	r3, [pc, #364]	@ (80094d0 <THP_MainTask+0x540>)
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	b91b      	cbnz	r3, 8009370 <THP_MainTask+0x3e0>
 8009368:	4b5a      	ldr	r3, [pc, #360]	@ (80094d4 <THP_MainTask+0x544>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	daaa      	bge.n	80092c6 <THP_MainTask+0x336>
 8009370:	4b55      	ldr	r3, [pc, #340]	@ (80094c8 <THP_MainTask+0x538>)
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1aa      	bne.n	80092ce <THP_MainTask+0x33e>
 8009378:	e7c1      	b.n	80092fe <THP_MainTask+0x36e>
			  ticks30ms = HAL_GetTick();
 800937a:	f000 fe0b 	bl	8009f94 <HAL_GetTick>
			  LED1_TOGGLE();
 800937e:	2120      	movs	r1, #32
			  ticks30ms = HAL_GetTick();
 8009380:	4607      	mov	r7, r0
			  LED1_TOGGLE();
 8009382:	485a      	ldr	r0, [pc, #360]	@ (80094ec <THP_MainTask+0x55c>)
 8009384:	f001 fffa 	bl	800b37c <HAL_GPIO_TogglePin>
			  check_powerOff();
 8009388:	f7fe f972 	bl	8007670 <check_powerOff>
			  GsmWdt();
 800938c:	f7ff fa82 	bl	8008894 <GsmWdt>
			  if(!registered && Sim80x.Status.RegisterdToNetwork) {
 8009390:	b945      	cbnz	r5, 80093a4 <THP_MainTask+0x414>
 8009392:	4b54      	ldr	r3, [pc, #336]	@ (80094e4 <THP_MainTask+0x554>)
 8009394:	f893 5330 	ldrb.w	r5, [r3, #816]	@ 0x330
 8009398:	f015 0501 	ands.w	r5, r5, #1
 800939c:	d0cd      	beq.n	800933a <THP_MainTask+0x3aa>
				  printf("Succesfully registered to network.\r\n");
 800939e:	4854      	ldr	r0, [pc, #336]	@ (80094f0 <THP_MainTask+0x560>)
 80093a0:	f007 fd28 	bl	8010df4 <puts>
			  if(registered && Sim80x.Status.RegisterdToNetwork == 0) registered = 0;
 80093a4:	4b4f      	ldr	r3, [pc, #316]	@ (80094e4 <THP_MainTask+0x554>)
 80093a6:	f893 5330 	ldrb.w	r5, [r3, #816]	@ 0x330
 80093aa:	f005 0501 	and.w	r5, r5, #1
 80093ae:	e7c4      	b.n	800933a <THP_MainTask+0x3aa>
	    		  display_values(config.disp_type);
 80093b0:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80093b4:	f7fe fab4 	bl	8007920 <display_values>
 80093b8:	e756      	b.n	8009268 <THP_MainTask+0x2d8>
				  if(StartReadGps()) {	// najpierw test na GPRS
 80093ba:	f7ff fcdb 	bl	8008d74 <StartReadGps>
 80093be:	b190      	cbz	r0, 80093e6 <THP_MainTask+0x456>
					  gps_start = 0;
 80093c0:	4a47      	ldr	r2, [pc, #284]	@ (80094e0 <THP_MainTask+0x550>)
 80093c2:	2300      	movs	r3, #0
 80093c4:	6013      	str	r3, [r2, #0]
					  gps_interval = 15*60;						// co 15 minut proba odczytu GPS
 80093c6:	f44f 7361 	mov.w	r3, #900	@ 0x384
 80093ca:	f8cb 3000 	str.w	r3, [fp]
 80093ce:	e79e      	b.n	800930e <THP_MainTask+0x37e>
	    		  if(!meas_cont_mode) printf("Starting GPRS thread %s\r\n", StartSendGPRS() ? "OK":"ERROR");
 80093d0:	f7ff f9f6 	bl	80087c0 <StartSendGPRS>
 80093d4:	4b47      	ldr	r3, [pc, #284]	@ (80094f4 <THP_MainTask+0x564>)
 80093d6:	4948      	ldr	r1, [pc, #288]	@ (80094f8 <THP_MainTask+0x568>)
 80093d8:	2800      	cmp	r0, #0
 80093da:	bf08      	it	eq
 80093dc:	4619      	moveq	r1, r3
 80093de:	4847      	ldr	r0, [pc, #284]	@ (80094fc <THP_MainTask+0x56c>)
 80093e0:	f007 fca0 	bl	8010d24 <iprintf>
 80093e4:	e74a      	b.n	800927c <THP_MainTask+0x2ec>
				  } else gps_interval += 30;					// nie wolno zalaczyc GPS -> za 30sek kolejna proba
 80093e6:	f8db 3000 	ldr.w	r3, [fp]
 80093ea:	331e      	adds	r3, #30
 80093ec:	f8cb 3000 	str.w	r3, [fp]
 80093f0:	e78d      	b.n	800930e <THP_MainTask+0x37e>
						  if(meas_cont_mode == 0) {
 80093f2:	f1b9 0f00 	cmp.w	r9, #0
 80093f6:	f47f af7c 	bne.w	80092f2 <THP_MainTask+0x362>
							  if(--meas_count == 0) {
 80093fa:	4a37      	ldr	r2, [pc, #220]	@ (80094d8 <THP_MainTask+0x548>)
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b29b      	uxth	r3, r3
 8009400:	8013      	strh	r3, [r2, #0]
 8009402:	b9cb      	cbnz	r3, 8009438 <THP_MainTask+0x4a8>
								  printf("Last measure & Send\r\n");
 8009404:	483e      	ldr	r0, [pc, #248]	@ (8009500 <THP_MainTask+0x570>)
 8009406:	f007 fcf5 	bl	8010df4 <puts>
								  meas_count = config.measures;
 800940a:	9b01      	ldr	r3, [sp, #4]
 800940c:	4a32      	ldr	r2, [pc, #200]	@ (80094d8 <THP_MainTask+0x548>)
 800940e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8009412:	8013      	strh	r3, [r2, #0]
								  send_enable = 1;
 8009414:	4a2b      	ldr	r2, [pc, #172]	@ (80094c4 <THP_MainTask+0x534>)
 8009416:	2301      	movs	r3, #1
 8009418:	7013      	strb	r3, [r2, #0]
								  measint = 99;
 800941a:	f04f 0963 	mov.w	r9, #99	@ 0x63
								  CalculateNextMeasTime();					// oblicz czas rozpoczecia kolejnego pomiaru
 800941e:	f7ff fcff 	bl	8008e20 <CalculateNextMeasTime>
 8009422:	e768      	b.n	80092f6 <THP_MainTask+0x366>
			  if(meas_start < 0 && timesync) CalculateNextMeasTime();		// oblicz czas rozpoczecia pomiaru
 8009424:	f7ff fcfc 	bl	8008e20 <CalculateNextMeasTime>
			  if(registered && meas_start < 0) SysTimeSync();
 8009428:	2d00      	cmp	r5, #0
 800942a:	d09a      	beq.n	8009362 <THP_MainTask+0x3d2>
 800942c:	4b29      	ldr	r3, [pc, #164]	@ (80094d4 <THP_MainTask+0x544>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	f6bf af44 	bge.w	80092be <THP_MainTask+0x32e>
 8009436:	e792      	b.n	800935e <THP_MainTask+0x3ce>
							  } else printf("Measure no.%u\r\n", config.measures-meas_count);
 8009438:	9a01      	ldr	r2, [sp, #4]
 800943a:	4832      	ldr	r0, [pc, #200]	@ (8009504 <THP_MainTask+0x574>)
 800943c:	f892 103b 	ldrb.w	r1, [r2, #59]	@ 0x3b
 8009440:	1ac9      	subs	r1, r1, r3
 8009442:	f007 fc6f 	bl	8010d24 <iprintf>
 8009446:	e754      	b.n	80092f2 <THP_MainTask+0x362>
 8009448:	4b2f      	ldr	r3, [pc, #188]	@ (8009508 <THP_MainTask+0x578>)
 800944a:	9301      	str	r3, [sp, #4]
 800944c:	e666      	b.n	800911c <THP_MainTask+0x18c>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 800944e:	f001 fad1 	bl	800a9f4 <HAL_NVIC_SystemReset>
 8009452:	e5ae      	b.n	8008fb2 <THP_MainTask+0x22>
	  if (cmox_initialize(NULL) != CMOX_INIT_SUCCESS) puts("Cipher init error\r");
 8009454:	482d      	ldr	r0, [pc, #180]	@ (800950c <THP_MainTask+0x57c>)
 8009456:	f007 fccd 	bl	8010df4 <puts>
 800945a:	e665      	b.n	8009128 <THP_MainTask+0x198>
		  printf("Configure charger \r\n");
 800945c:	482c      	ldr	r0, [pc, #176]	@ (8009510 <THP_MainTask+0x580>)
 800945e:	f007 fcc9 	bl	8010df4 <puts>
		  QON_EN();
 8009462:	2200      	movs	r2, #0
 8009464:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800946c:	f001 ff80 	bl	800b370 <HAL_GPIO_WritePin>
		  BQ25798_Sys_Min_Voltage_write(3); 	// 3250mV
 8009470:	2003      	movs	r0, #3
 8009472:	f7fa fd17 	bl	8003ea4 <BQ25798_Sys_Min_Voltage_write>
		  BQ25798_Chr_Volt_Limit_write(4200); 	// 4200mV
 8009476:	f241 0068 	movw	r0, #4200	@ 0x1068
 800947a:	f7fa fd1d 	bl	8003eb8 <BQ25798_Chr_Volt_Limit_write>
		  BQ25798_Chr_Curr_Limit_write(2000); 	// 2000mA
 800947e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009482:	f7fa fd2d 	bl	8003ee0 <BQ25798_Chr_Curr_Limit_write>
		  BQ25798_Chr_Input_Voltage_Limit_write(130); //*100mV
 8009486:	2082      	movs	r0, #130	@ 0x82
 8009488:	f7fa fd3e 	bl	8003f08 <BQ25798_Chr_Input_Voltage_Limit_write>
		  BQ25798_Chr_Input_Curr_Limit_write(200); //*10mA
 800948c:	20c8      	movs	r0, #200	@ 0xc8
 800948e:	f7fa fd43 	bl	8003f18 <BQ25798_Chr_Input_Curr_Limit_write>
		  BQ25798_Chrg_CTRL1_write(0x95);
 8009492:	2095      	movs	r0, #149	@ 0x95
 8009494:	f7fa fd4e 	bl	8003f34 <BQ25798_Chrg_CTRL1_write>
		  BQ25798_Chrg_NTC_CTRL1_write(1);
 8009498:	2001      	movs	r0, #1
 800949a:	f7fa fd53 	bl	8003f44 <BQ25798_Chrg_NTC_CTRL1_write>
		  CE_EN();
 800949e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80094a2:	2200      	movs	r2, #0
 80094a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80094a8:	f001 ff62 	bl	800b370 <HAL_GPIO_WritePin>
		  BQ25798_MPPT_CTRL(1); //MPPT ON
 80094ac:	2001      	movs	r0, #1
 80094ae:	f7fa fd6d 	bl	8003f8c <BQ25798_MPPT_CTRL>
 80094b2:	e59e      	b.n	8008ff2 <THP_MainTask+0x62>
	  if (Load_config()==0) {printf("Config loaded OK \r\n");};
 80094b4:	4817      	ldr	r0, [pc, #92]	@ (8009514 <THP_MainTask+0x584>)
 80094b6:	f007 fc9d 	bl	8010df4 <puts>
 80094ba:	e592      	b.n	8008fe2 <THP_MainTask+0x52>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 80094bc:	f001 fa9a 	bl	800a9f4 <HAL_NVIC_SystemReset>
 80094c0:	e587      	b.n	8008fd2 <THP_MainTask+0x42>
 80094c2:	bf00      	nop
 80094c4:	200019b5 	.word	0x200019b5
 80094c8:	200019b6 	.word	0x200019b6
 80094cc:	0001517f 	.word	0x0001517f
 80094d0:	20001994 	.word	0x20001994
 80094d4:	20001990 	.word	0x20001990
 80094d8:	200019b8 	.word	0x200019b8
 80094dc:	200019a0 	.word	0x200019a0
 80094e0:	200019a4 	.word	0x200019a4
 80094e4:	20000230 	.word	0x20000230
 80094e8:	200019ba 	.word	0x200019ba
 80094ec:	48000400 	.word	0x48000400
 80094f0:	0801726c 	.word	0x0801726c
 80094f4:	08015c98 	.word	0x08015c98
 80094f8:	08015c94 	.word	0x08015c94
 80094fc:	08017290 	.word	0x08017290
 8009500:	080172ac 	.word	0x080172ac
 8009504:	080172c4 	.word	0x080172c4
 8009508:	200019c0 	.word	0x200019c0
 800950c:	0801723c 	.word	0x0801723c
 8009510:	080171d4 	.word	0x080171d4
 8009514:	080171c0 	.word	0x080171c0

08009518 <i2c_read8>:
#include <math.h>



uint8_t i2c_read8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t *value, uint8_t addr)
{
 8009518:	b530      	push	{r4, r5, lr}
 800951a:	b087      	sub	sp, #28
 800951c:	460d      	mov	r5, r1
 800951e:	4619      	mov	r1, r3
	uint8_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8009520:	2308      	movs	r3, #8
{
 8009522:	4614      	mov	r4, r2
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8009524:	9302      	str	r3, [sp, #8]
 8009526:	462a      	mov	r2, r5
 8009528:	2301      	movs	r3, #1
 800952a:	f10d 0517 	add.w	r5, sp, #23
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	9500      	str	r5, [sp, #0]
 8009532:	f002 fb7b 	bl	800bc2c <HAL_I2C_Mem_Read>
    *value = tmp;
 8009536:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800953a:	7023      	strb	r3, [r4, #0]
    return res;
}
 800953c:	b007      	add	sp, #28
 800953e:	bd30      	pop	{r4, r5, pc}

08009540 <i2c_read16>:

uint8_t i2c_read16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t *value, uint8_t addr)
{
 8009540:	b510      	push	{r4, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	468c      	mov	ip, r1
 8009546:	4619      	mov	r1, r3
	uint16_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8009548:	2308      	movs	r3, #8
 800954a:	9302      	str	r3, [sp, #8]
 800954c:	2302      	movs	r3, #2
 800954e:	9301      	str	r3, [sp, #4]
 8009550:	f10d 0316 	add.w	r3, sp, #22
{
 8009554:	4614      	mov	r4, r2
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	4662      	mov	r2, ip
 800955a:	2301      	movs	r3, #1
 800955c:	f002 fb66 	bl	800bc2c <HAL_I2C_Mem_Read>
    *value = tmp;
 8009560:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8009564:	8023      	strh	r3, [r4, #0]
    return res;
}
 8009566:	b006      	add	sp, #24
 8009568:	bd10      	pop	{r4, pc}
 800956a:	bf00      	nop

0800956c <i2c_write8>:
    *value = tmp;
    return res;
}

uint8_t i2c_write8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t value, uint8_t addr)
{
 800956c:	b510      	push	{r4, lr}
 800956e:	b086      	sub	sp, #24
	uint8_t tmp = value;
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8009570:	2408      	movs	r4, #8
 8009572:	9402      	str	r4, [sp, #8]
{
 8009574:	4614      	mov	r4, r2
 8009576:	468c      	mov	ip, r1
	uint8_t tmp = value;
 8009578:	f88d 4017 	strb.w	r4, [sp, #23]
{
 800957c:	4619      	mov	r1, r3
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 800957e:	f10d 0417 	add.w	r4, sp, #23
 8009582:	2301      	movs	r3, #1
 8009584:	9301      	str	r3, [sp, #4]
 8009586:	4662      	mov	r2, ip
 8009588:	9400      	str	r4, [sp, #0]
 800958a:	f002 fa29 	bl	800b9e0 <HAL_I2C_Mem_Write>
    return res;
}
 800958e:	b006      	add	sp, #24
 8009590:	bd10      	pop	{r4, pc}
 8009592:	bf00      	nop

08009594 <i2c_write16>:

uint8_t i2c_write16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t value, uint8_t addr)
{
 8009594:	b500      	push	{lr}
 8009596:	b087      	sub	sp, #28
 8009598:	468e      	mov	lr, r1
 800959a:	4619      	mov	r1, r3
	uint16_t tmp = value;
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 800959c:	2308      	movs	r3, #8
 800959e:	9302      	str	r3, [sp, #8]
 80095a0:	2302      	movs	r3, #2
 80095a2:	9301      	str	r3, [sp, #4]
 80095a4:	f10d 0316 	add.w	r3, sp, #22
{
 80095a8:	4694      	mov	ip, r2
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	4672      	mov	r2, lr
 80095ae:	2301      	movs	r3, #1
	uint16_t tmp = value;
 80095b0:	f8ad c016 	strh.w	ip, [sp, #22]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80095b4:	f002 fa14 	bl	800b9e0 <HAL_I2C_Mem_Write>
    return res;
}
 80095b8:	b007      	add	sp, #28
 80095ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80095be:	bf00      	nop

080095c0 <setBit>:
    old_word |= new_word;
    i2c_write16(i2c, sub_address, old_word, addr);
}

void setBit(uint8_t* reg, int bitNumber, int value) {
    if (value == 0) {
 80095c0:	b932      	cbnz	r2, 80095d0 <setBit+0x10>
        *reg &= ~(1 << bitNumber);  // Ustawienie bitu na 0
 80095c2:	7803      	ldrb	r3, [r0, #0]
 80095c4:	2201      	movs	r2, #1
 80095c6:	408a      	lsls	r2, r1
 80095c8:	ea23 0302 	bic.w	r3, r3, r2
 80095cc:	7003      	strb	r3, [r0, #0]
 80095ce:	4770      	bx	lr
    } else if (value == 1) {
 80095d0:	2a01      	cmp	r2, #1
 80095d2:	d000      	beq.n	80095d6 <setBit+0x16>
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
    }
}
 80095d4:	4770      	bx	lr
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
 80095d6:	7803      	ldrb	r3, [r0, #0]
 80095d8:	fa02 f101 	lsl.w	r1, r2, r1
 80095dc:	430b      	orrs	r3, r1
 80095de:	7003      	strb	r3, [r0, #0]
}
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop

080095e4 <combine_uint8>:

uint16_t combine_uint8(uint8_t high, uint8_t low) {
    return ((uint16_t)high << 8) | low;
}
 80095e4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop

080095ec <modifyRegister>:

void modifyRegister(unsigned char* reg, unsigned char mask, unsigned char value) {
    *reg = (*reg & ~mask) | (value & mask);
 80095ec:	7803      	ldrb	r3, [r0, #0]
 80095ee:	ea23 0301 	bic.w	r3, r3, r1
 80095f2:	4011      	ands	r1, r2
 80095f4:	430b      	orrs	r3, r1
 80095f6:	7003      	strb	r3, [r0, #0]
}
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop

080095fc <i2c_scan>:

void i2c_scan(I2C_HandleTypeDef * i2c, uint8_t addr_min, uint8_t addr_max)
{
 80095fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009600:	460c      	mov	r4, r1
 8009602:	4616      	mov	r6, r2
 8009604:	4607      	mov	r7, r0
	printf("Scanning I2C devices ...\r\n");
 8009606:	4815      	ldr	r0, [pc, #84]	@ (800965c <i2c_scan+0x60>)
 8009608:	f007 fbf4 	bl	8010df4 <puts>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 800960c:	42b4      	cmp	r4, r6
 800960e:	d823      	bhi.n	8009658 <i2c_scan+0x5c>
		status = HAL_I2C_IsDeviceReady(i2c, addr << 1, 3, 500);
		osDelay(100);
		if (status == HAL_OK) {
			    	printf("Device found on %#x \r\n", addr);
			    } else {
			    	printf("Device NOTfound on %#x \r\n", addr);
 8009610:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 8009660 <i2c_scan+0x64>
			    	printf("Device found on %#x \r\n", addr);
 8009614:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8009664 <i2c_scan+0x68>
 8009618:	e006      	b.n	8009628 <i2c_scan+0x2c>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 800961a:	3401      	adds	r4, #1
			    	printf("Device found on %#x \r\n", addr);
 800961c:	4648      	mov	r0, r9
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 800961e:	b2e4      	uxtb	r4, r4
			    	printf("Device found on %#x \r\n", addr);
 8009620:	f007 fb80 	bl	8010d24 <iprintf>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8009624:	42a6      	cmp	r6, r4
 8009626:	d317      	bcc.n	8009658 <i2c_scan+0x5c>
		status = HAL_I2C_IsDeviceReady(i2c, addr << 1, 3, 500);
 8009628:	0061      	lsls	r1, r4, #1
 800962a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800962e:	2203      	movs	r2, #3
 8009630:	4638      	mov	r0, r7
 8009632:	f002 fc19 	bl	800be68 <HAL_I2C_IsDeviceReady>
 8009636:	4605      	mov	r5, r0
		osDelay(100);
 8009638:	2064      	movs	r0, #100	@ 0x64
 800963a:	f004 fbab 	bl	800dd94 <osDelay>
			    	printf("Device NOTfound on %#x \r\n", addr);
 800963e:	4621      	mov	r1, r4
 8009640:	4640      	mov	r0, r8
		if (status == HAL_OK) {
 8009642:	2d00      	cmp	r5, #0
 8009644:	d0e9      	beq.n	800961a <i2c_scan+0x1e>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8009646:	3401      	adds	r4, #1
			    	printf("Device NOTfound on %#x \r\n", addr);
 8009648:	f007 fb6c 	bl	8010d24 <iprintf>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 800964c:	b2e4      	uxtb	r4, r4
			    	osDelay(100);
 800964e:	2064      	movs	r0, #100	@ 0x64
 8009650:	f004 fba0 	bl	800dd94 <osDelay>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8009654:	42a6      	cmp	r6, r4
 8009656:	d2e7      	bcs.n	8009628 <i2c_scan+0x2c>
			    }
	}
}
 8009658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800965c:	08017304 	.word	0x08017304
 8009660:	08017338 	.word	0x08017338
 8009664:	08017320 	.word	0x08017320

08009668 <byteswap16>:
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8009668:	ba40      	rev16	r0, r0

uint16_t byteswap16 (uint16_t bytes)
{
//	return ((bytes & 0xFF) << 8) | ((bytes >> 8) & 0xFF);
	return __REV16(bytes);
}
 800966a:	b280      	uxth	r0, r0
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop

08009670 <SET_DPS368>:
{
	TCA9543A_SelectChannel(0);
}

void SET_DPS368()
{
 8009670:	b500      	push	{lr}
		I2C2TCA_NRST();
 8009672:	2201      	movs	r2, #1
{
 8009674:	b087      	sub	sp, #28
		I2C2TCA_NRST();
 8009676:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800967a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800967e:	f001 fe77 	bl	800b370 <HAL_GPIO_WritePin>
		osDelay(1);
 8009682:	2001      	movs	r0, #1
 8009684:	f004 fb86 	bl	800dd94 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009688:	2301      	movs	r3, #1
 800968a:	f10d 0217 	add.w	r2, sp, #23
 800968e:	f04f 31ff 	mov.w	r1, #4294967295
 8009692:	e9cd 3101 	strd	r3, r1, [sp, #4]
		uint8_t data = 1 << channel;
 8009696:	f04f 0c02 	mov.w	ip, #2
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800969a:	9200      	str	r2, [sp, #0]
 800969c:	21e4      	movs	r1, #228	@ 0xe4
 800969e:	2200      	movs	r2, #0
 80096a0:	4803      	ldr	r0, [pc, #12]	@ (80096b0 <SET_DPS368+0x40>)
		uint8_t data = 1 << channel;
 80096a2:	f88d c017 	strb.w	ip, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80096a6:	f002 f99b 	bl	800b9e0 <HAL_I2C_Mem_Write>
	TCA9543A_SelectChannel(1);
}
 80096aa:	b007      	add	sp, #28
 80096ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80096b0:	200017ac 	.word	0x200017ac

080096b4 <TMP117_check>:



uint8_t TMP117_check()
{
 80096b4:	b510      	push	{r4, lr}
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR << 1, 3, 500);
 80096b6:	4818      	ldr	r0, [pc, #96]	@ (8009718 <TMP117_check+0x64>)
{
 80096b8:	b086      	sub	sp, #24
	status = HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR << 1, 3, 500);
 80096ba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80096be:	2203      	movs	r2, #3
 80096c0:	2192      	movs	r1, #146	@ 0x92
 80096c2:	f002 fbd1 	bl	800be68 <HAL_I2C_IsDeviceReady>
 80096c6:	4604      	mov	r4, r0
	osDelay(100);
 80096c8:	2064      	movs	r0, #100	@ 0x64
 80096ca:	f004 fb63 	bl	800dd94 <osDelay>
	if (status == HAL_OK) {
 80096ce:	b9f4      	cbnz	r4, 800970e <TMP117_check+0x5a>
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80096d0:	2108      	movs	r1, #8
 80096d2:	2202      	movs	r2, #2
 80096d4:	f10d 0316 	add.w	r3, sp, #22
 80096d8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	220f      	movs	r2, #15
 80096e0:	2301      	movs	r3, #1
 80096e2:	480d      	ldr	r0, [pc, #52]	@ (8009718 <TMP117_check+0x64>)
 80096e4:	2192      	movs	r1, #146	@ 0x92
 80096e6:	f002 faa1 	bl	800bc2c <HAL_I2C_Mem_Read>
    *value = tmp;
 80096ea:	f8bd 2016 	ldrh.w	r2, [sp, #22]
		uint16_t value;
		i2c_read16(&hi2c2, TMP117_ID_REG, &value, TMP117_ADDR << 1);
		if(value == TMP117_ID) {printf("TMP117 OK\r\n"); return 1;} else {printf("NOT TMP117\r\n"); return 0;}
 80096ee:	f241 7301 	movw	r3, #5889	@ 0x1701
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d005      	beq.n	8009702 <TMP117_check+0x4e>
 80096f6:	4809      	ldr	r0, [pc, #36]	@ (800971c <TMP117_check+0x68>)
 80096f8:	f007 fb7c 	bl	8010df4 <puts>
 80096fc:	2000      	movs	r0, #0
	} else {printf("TMP117 FAILED\r\n"); return 0;}
}
 80096fe:	b006      	add	sp, #24
 8009700:	bd10      	pop	{r4, pc}
		if(value == TMP117_ID) {printf("TMP117 OK\r\n"); return 1;} else {printf("NOT TMP117\r\n"); return 0;}
 8009702:	4807      	ldr	r0, [pc, #28]	@ (8009720 <TMP117_check+0x6c>)
 8009704:	f007 fb76 	bl	8010df4 <puts>
 8009708:	2001      	movs	r0, #1
}
 800970a:	b006      	add	sp, #24
 800970c:	bd10      	pop	{r4, pc}
	} else {printf("TMP117 FAILED\r\n"); return 0;}
 800970e:	4805      	ldr	r0, [pc, #20]	@ (8009724 <TMP117_check+0x70>)
 8009710:	f007 fb70 	bl	8010df4 <puts>
 8009714:	e7f2      	b.n	80096fc <TMP117_check+0x48>
 8009716:	bf00      	nop
 8009718:	200017ac 	.word	0x200017ac
 800971c:	08017360 	.word	0x08017360
 8009720:	08017354 	.word	0x08017354
 8009724:	0801736c 	.word	0x0801736c

08009728 <TMP117_get_temp>:
	osDelay(1);

}

float TMP117_get_temp()
{
 8009728:	b500      	push	{lr}
 800972a:	b087      	sub	sp, #28
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 800972c:	f10d 0316 	add.w	r3, sp, #22
 8009730:	2108      	movs	r1, #8
 8009732:	2202      	movs	r2, #2
 8009734:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	2200      	movs	r2, #0
 800973c:	2301      	movs	r3, #1
 800973e:	2192      	movs	r1, #146	@ 0x92
 8009740:	4806      	ldr	r0, [pc, #24]	@ (800975c <TMP117_get_temp+0x34>)
 8009742:	f002 fa73 	bl	800bc2c <HAL_I2C_Mem_Read>
    *value = tmp;
 8009746:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800974a:	ba5b      	rev16	r3, r3
	uint16_t value;
	int16_t raw;
    i2c_read16(&hi2c2, TMP117_TEMP_REG, &value, TMP117_ADDR << 1);
    raw = byteswap16(value);
    return (float)(raw * TMP117_RESOLUTION);
 800974c:	b21b      	sxth	r3, r3
 800974e:	ee00 3a10 	vmov	s0, r3
}
 8009752:	eeba 0aec 	vcvt.f32.s32	s0, s0, #7
 8009756:	b007      	add	sp, #28
 8009758:	f85d fb04 	ldr.w	pc, [sp], #4
 800975c:	200017ac 	.word	0x200017ac

08009760 <TMP117_start_meas>:

void TMP117_start_meas(uint8_t avg_mode)
{
 8009760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009764:	b086      	sub	sp, #24
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8009766:	4e1d      	ldr	r6, [pc, #116]	@ (80097dc <TMP117_start_meas+0x7c>)
	uint16_t tmp = value;
 8009768:	f44f 7308 	mov.w	r3, #544	@ 0x220
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 800976c:	f04f 0808 	mov.w	r8, #8
 8009770:	2502      	movs	r5, #2
 8009772:	f10d 0716 	add.w	r7, sp, #22
	uint16_t tmp = value;
 8009776:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 800977a:	2301      	movs	r3, #1
 800977c:	461a      	mov	r2, r3
 800977e:	2192      	movs	r1, #146	@ 0x92
 8009780:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8009784:	9700      	str	r7, [sp, #0]
{
 8009786:	4604      	mov	r4, r0
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8009788:	4630      	mov	r0, r6
 800978a:	f002 f929 	bl	800b9e0 <HAL_I2C_Mem_Write>
	osDelay(1);
 800978e:	2001      	movs	r0, #1
 8009790:	f004 fb00 	bl	800dd94 <osDelay>
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8009794:	2301      	movs	r3, #1
 8009796:	461a      	mov	r2, r3
 8009798:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800979c:	9700      	str	r7, [sp, #0]
 800979e:	2192      	movs	r1, #146	@ 0x92
 80097a0:	4630      	mov	r0, r6
 80097a2:	f002 fa43 	bl	800bc2c <HAL_I2C_Mem_Read>
    *value = tmp;
 80097a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80097aa:	ba5b      	rev16	r3, r3
	uint16_t config, swapconfig;
	TMP117_RST_Conf_Reg();
	i2c_read16(&hi2c2, TMP117_CONF_REG, &config, TMP117_ADDR << 1);
	swapconfig = byteswap16(config);
//	printf("REG in TMP (hex): %x \r\n", swapconfig);
	swapconfig |= avg_mode;
 80097ac:	431c      	orrs	r4, r3
 80097ae:	b2a4      	uxth	r4, r4
	return __REV16(bytes);
 80097b0:	f444 6440 	orr.w	r4, r4, #3072	@ 0xc00
 80097b4:	ba64      	rev16	r4, r4
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80097b6:	2301      	movs	r3, #1
 80097b8:	e9cd 7500 	strd	r7, r5, [sp]
 80097bc:	f8cd 8008 	str.w	r8, [sp, #8]
 80097c0:	4630      	mov	r0, r6
 80097c2:	461a      	mov	r2, r3
 80097c4:	2192      	movs	r1, #146	@ 0x92
	return __REV16(bytes);
 80097c6:	f8ad 4016 	strh.w	r4, [sp, #22]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80097ca:	f002 f909 	bl	800b9e0 <HAL_I2C_Mem_Write>
	swapconfig |= one_shot;
	config = byteswap16(swapconfig);
	i2c_write16(&hi2c2, TMP117_CONF_REG, config, TMP117_ADDR << 1);
	osDelay(2);
 80097ce:	4628      	mov	r0, r5
}
 80097d0:	b006      	add	sp, #24
 80097d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	osDelay(2);
 80097d6:	f004 badd 	b.w	800dd94 <osDelay>
 80097da:	bf00      	nop
 80097dc:	200017ac 	.word	0x200017ac

080097e0 <tmp117_avr_conf>:

uint16_t tmp117_avr_conf(uint8_t sensor_conf)
{
    switch (sensor_conf) {
 80097e0:	2802      	cmp	r0, #2
{
 80097e2:	b508      	push	{r3, lr}
    switch (sensor_conf) {
 80097e4:	d008      	beq.n	80097f8 <tmp117_avr_conf+0x18>
 80097e6:	2803      	cmp	r0, #3
 80097e8:	d010      	beq.n	800980c <tmp117_avr_conf+0x2c>
 80097ea:	2801      	cmp	r0, #1
 80097ec:	d009      	beq.n	8009802 <tmp117_avr_conf+0x22>
        case 0:
        	printf("TMP117 set no_avg\r\n");
 80097ee:	480a      	ldr	r0, [pc, #40]	@ (8009818 <tmp117_avr_conf+0x38>)
 80097f0:	f007 fb00 	bl	8010df4 <puts>
            return no_avg;
 80097f4:	2000      	movs	r0, #0
            return avg64;
        default:
        	printf("TMP117 set no_avg\r\n");
            return no_avg;
    }
}
 80097f6:	bd08      	pop	{r3, pc}
        	printf("TMP117 set avg32\r\n");
 80097f8:	4808      	ldr	r0, [pc, #32]	@ (800981c <tmp117_avr_conf+0x3c>)
 80097fa:	f007 fafb 	bl	8010df4 <puts>
            return avg32;
 80097fe:	2040      	movs	r0, #64	@ 0x40
}
 8009800:	bd08      	pop	{r3, pc}
        	printf("TMP117 set avg8\r\n");
 8009802:	4807      	ldr	r0, [pc, #28]	@ (8009820 <tmp117_avr_conf+0x40>)
 8009804:	f007 faf6 	bl	8010df4 <puts>
            return avg8;
 8009808:	2020      	movs	r0, #32
}
 800980a:	bd08      	pop	{r3, pc}
        	printf("TMP117 set avg64\r\n");
 800980c:	4805      	ldr	r0, [pc, #20]	@ (8009824 <tmp117_avr_conf+0x44>)
 800980e:	f007 faf1 	bl	8010df4 <puts>
            return avg64;
 8009812:	2060      	movs	r0, #96	@ 0x60
}
 8009814:	bd08      	pop	{r3, pc}
 8009816:	bf00      	nop
 8009818:	0801737c 	.word	0x0801737c
 800981c:	080173a4 	.word	0x080173a4
 8009820:	08017390 	.word	0x08017390
 8009824:	080173b8 	.word	0x080173b8

08009828 <MS8607_check>:

uint8_t MS8607_check()
{
 8009828:	b510      	push	{r4, lr}
	ms8607_init();
 800982a:	f7fd f8bb 	bl	80069a4 <ms8607_init>
	if(ms8607_is_connected()) {printf("MS8607 OK\r\n"); return 1;
 800982e:	f7fd f8cb 	bl	80069c8 <ms8607_is_connected>
 8009832:	b120      	cbz	r0, 800983e <MS8607_check+0x16>
 8009834:	4805      	ldr	r0, [pc, #20]	@ (800984c <MS8607_check+0x24>)
 8009836:	f007 fadd 	bl	8010df4 <puts>
 800983a:	2001      	movs	r0, #1
	} else {printf("MS8607 FAIL\r\n"); return 0;};
	ms8607_reset();
}
 800983c:	bd10      	pop	{r4, pc}
 800983e:	4604      	mov	r4, r0
	} else {printf("MS8607 FAIL\r\n"); return 0;};
 8009840:	4803      	ldr	r0, [pc, #12]	@ (8009850 <MS8607_check+0x28>)
 8009842:	f007 fad7 	bl	8010df4 <puts>
 8009846:	4620      	mov	r0, r4
}
 8009848:	bd10      	pop	{r4, pc}
 800984a:	bf00      	nop
 800984c:	080173cc 	.word	0x080173cc
 8009850:	080173d8 	.word	0x080173d8

08009854 <MS8607_get_temp>:




float MS8607_get_temp()
{
 8009854:	b500      	push	{lr}
 8009856:	b083      	sub	sp, #12
	float temp;
	ms8607_read_temperature(&temp);
 8009858:	a801      	add	r0, sp, #4
 800985a:	f7fd f949 	bl	8006af0 <ms8607_read_temperature>
//	printf("MS Temp: %f\r\n",temp);
	return temp;
}
 800985e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009862:	b003      	add	sp, #12
 8009864:	f85d fb04 	ldr.w	pc, [sp], #4

08009868 <MS8607_get_press>:

float MS8607_get_press()
{
 8009868:	b500      	push	{lr}
 800986a:	b083      	sub	sp, #12
	float press;
	ms8607_read_pressure(&press);
 800986c:	a801      	add	r0, sp, #4
 800986e:	f7fd fa3b 	bl	8006ce8 <ms8607_read_pressure>
//	printf("MS Press: %f\r\n",press);
	return press;
}
 8009872:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009876:	b003      	add	sp, #12
 8009878:	f85d fb04 	ldr.w	pc, [sp], #4

0800987c <MS8607_get_hum>:

float MS8607_get_hum()
{
 800987c:	b500      	push	{lr}
 800987e:	b083      	sub	sp, #12
	float hum;
	ms8607_read_humidity(&hum);
 8009880:	a801      	add	r0, sp, #4
 8009882:	f7fd f8bb 	bl	80069fc <ms8607_read_humidity>
//	printf("MS Hum: %f\r\n",hum);
	return hum;
}
 8009886:	ed9d 0a01 	vldr	s0, [sp, #4]
 800988a:	b003      	add	sp, #12
 800988c:	f85d fb04 	ldr.w	pc, [sp], #4

08009890 <SHTC3_check>:
	else return 0;
}


uint8_t SHTC3_check()
{
 8009890:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef status, status2;
	uint8_t data[2];
	status = HAL_I2C_IsDeviceReady(&hi2c2, SHTC3_ADDR_WRITE, 3, 500);
 8009892:	4829      	ldr	r0, [pc, #164]	@ (8009938 <SHTC3_check+0xa8>)
{
 8009894:	b085      	sub	sp, #20
	status = HAL_I2C_IsDeviceReady(&hi2c2, SHTC3_ADDR_WRITE, 3, 500);
 8009896:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800989a:	2203      	movs	r2, #3
 800989c:	21e0      	movs	r1, #224	@ 0xe0
 800989e:	f002 fae3 	bl	800be68 <HAL_I2C_IsDeviceReady>
 80098a2:	4604      	mov	r4, r0
	osDelay(2);
 80098a4:	2002      	movs	r0, #2
 80098a6:	f004 fa75 	bl	800dd94 <osDelay>
	if (status == HAL_OK) {
 80098aa:	bbac      	cbnz	r4, 8009918 <SHTC3_check+0x88>
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80098ac:	2396      	movs	r3, #150	@ 0x96
	uint16_t command = SHTC3_CMD_WAKEUP;
 80098ae:	f241 7135 	movw	r1, #5941	@ 0x1735
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80098b2:	9300      	str	r3, [sp, #0]
	uint16_t command = SHTC3_CMD_WAKEUP;
 80098b4:	f8ad 100e 	strh.w	r1, [sp, #14]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80098b8:	481f      	ldr	r0, [pc, #124]	@ (8009938 <SHTC3_check+0xa8>)
 80098ba:	21e0      	movs	r1, #224	@ 0xe0
 80098bc:	2302      	movs	r3, #2
 80098be:	f10d 020e 	add.w	r2, sp, #14
 80098c2:	f001 fef3 	bl	800b6ac <HAL_I2C_Master_Transmit>
	if(status == HAL_OK) { return 1; }
 80098c6:	4601      	mov	r1, r0
 80098c8:	bb10      	cbnz	r0, 8009910 <SHTC3_check+0x80>
		SHTC3_wakeup();
		uint16_t command = SHTC3_CMD_READ_ID;
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80098ca:	2596      	movs	r5, #150	@ 0x96
		uint16_t command = SHTC3_CMD_READ_ID;
 80098cc:	f64c 00ef 	movw	r0, #51439	@ 0xc8ef
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80098d0:	2302      	movs	r3, #2
 80098d2:	f10d 020e 	add.w	r2, sp, #14
 80098d6:	21e0      	movs	r1, #224	@ 0xe0
		uint16_t command = SHTC3_CMD_READ_ID;
 80098d8:	f8ad 000e 	strh.w	r0, [sp, #14]
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80098dc:	9500      	str	r5, [sp, #0]
 80098de:	4816      	ldr	r0, [pc, #88]	@ (8009938 <SHTC3_check+0xa8>)
 80098e0:	f001 fee4 	bl	800b6ac <HAL_I2C_Master_Transmit>
		status2 = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 2, 150);
 80098e4:	4814      	ldr	r0, [pc, #80]	@ (8009938 <SHTC3_check+0xa8>)
 80098e6:	9500      	str	r5, [sp, #0]
 80098e8:	2302      	movs	r3, #2
 80098ea:	aa03      	add	r2, sp, #12
 80098ec:	21e1      	movs	r1, #225	@ 0xe1
 80098ee:	f001 ffa7 	bl	800b840 <HAL_I2C_Master_Receive>
		  if (status2 == HAL_OK) {
 80098f2:	b9d0      	cbnz	r0, 800992a <SHTC3_check+0x9a>
			  uint16_t id = data[0] << 8 | data[1];
			  uint16_t code = id & SHTC3_PRODUCT_CODE_MASK;
			  if (code == 0x807) {
 80098f4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80098f8:	f640 033f 	movw	r3, #2111	@ 0x83f
 80098fc:	ba52      	rev16	r2, r2
 80098fe:	4013      	ands	r3, r2
 8009900:	f640 0207 	movw	r2, #2055	@ 0x807
 8009904:	4293      	cmp	r3, r2
 8009906:	d00b      	beq.n	8009920 <SHTC3_check+0x90>
//				  SHTC3_start_meas(0);
//				  SHTC3_sleep();
				  return 1;
			  }
		  } else {printf("NO SHTC3\r\n"); return 0;}
	} else {printf("SHTC3 FAILED\r\n"); return 0;}
 8009908:	2400      	movs	r4, #0
	return 0;
}
 800990a:	4620      	mov	r0, r4
 800990c:	b005      	add	sp, #20
 800990e:	bd30      	pop	{r4, r5, pc}
	else {printf("SHTC3 Wake up fail %x\r\n", status); return 0; }
 8009910:	480a      	ldr	r0, [pc, #40]	@ (800993c <SHTC3_check+0xac>)
 8009912:	f007 fa07 	bl	8010d24 <iprintf>
 8009916:	e7d8      	b.n	80098ca <SHTC3_check+0x3a>
	} else {printf("SHTC3 FAILED\r\n"); return 0;}
 8009918:	4809      	ldr	r0, [pc, #36]	@ (8009940 <SHTC3_check+0xb0>)
 800991a:	f007 fa6b 	bl	8010df4 <puts>
 800991e:	e7f3      	b.n	8009908 <SHTC3_check+0x78>
				  printf("SHTC3 OK\r\n");
 8009920:	4808      	ldr	r0, [pc, #32]	@ (8009944 <SHTC3_check+0xb4>)
 8009922:	f007 fa67 	bl	8010df4 <puts>
				  return 1;
 8009926:	2401      	movs	r4, #1
 8009928:	e7ef      	b.n	800990a <SHTC3_check+0x7a>
		  } else {printf("NO SHTC3\r\n"); return 0;}
 800992a:	4807      	ldr	r0, [pc, #28]	@ (8009948 <SHTC3_check+0xb8>)
 800992c:	f007 fa62 	bl	8010df4 <puts>
}
 8009930:	4620      	mov	r0, r4
 8009932:	b005      	add	sp, #20
 8009934:	bd30      	pop	{r4, r5, pc}
 8009936:	bf00      	nop
 8009938:	200017ac 	.word	0x200017ac
 800993c:	080173e8 	.word	0x080173e8
 8009940:	08017418 	.word	0x08017418
 8009944:	08017400 	.word	0x08017400
 8009948:	0801740c 	.word	0x0801740c

0800994c <SHTC3_start_meas>:

uint8_t SHTC3_start_meas(uint8_t mode)
{
 800994c:	b510      	push	{r4, lr}
 800994e:	b084      	sub	sp, #16
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8009950:	2396      	movs	r3, #150	@ 0x96
	uint16_t command = SHTC3_CMD_WAKEUP;
 8009952:	f241 7135 	movw	r1, #5941	@ 0x1735
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8009956:	9300      	str	r3, [sp, #0]
{
 8009958:	4604      	mov	r4, r0
	uint16_t command = SHTC3_CMD_WAKEUP;
 800995a:	f8ad 100e 	strh.w	r1, [sp, #14]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800995e:	4810      	ldr	r0, [pc, #64]	@ (80099a0 <SHTC3_start_meas+0x54>)
 8009960:	2302      	movs	r3, #2
 8009962:	f10d 020e 	add.w	r2, sp, #14
 8009966:	21e0      	movs	r1, #224	@ 0xe0
 8009968:	f001 fea0 	bl	800b6ac <HAL_I2C_Master_Transmit>
	if(status == HAL_OK) { return 1; }
 800996c:	b998      	cbnz	r0, 8009996 <SHTC3_start_meas+0x4a>
	HAL_StatusTypeDef status;
	uint16_t command;
	SHTC3_wakeup();
	if(mode == 0) command = SHTC3_CMD_TEMP_HUM;
 800996e:	f24a 227c 	movw	r2, #41596	@ 0xa27c
	else command = SHTC3_CMD_TEMP_HUM_LP;
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8009972:	2396      	movs	r3, #150	@ 0x96
	if(mode == 0) command = SHTC3_CMD_TEMP_HUM;
 8009974:	f645 0c64 	movw	ip, #22628	@ 0x5864
 8009978:	2c00      	cmp	r4, #0
 800997a:	bf08      	it	eq
 800997c:	4694      	moveq	ip, r2
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	f10d 020e 	add.w	r2, sp, #14
 8009984:	2302      	movs	r3, #2
 8009986:	21e0      	movs	r1, #224	@ 0xe0
 8009988:	4805      	ldr	r0, [pc, #20]	@ (80099a0 <SHTC3_start_meas+0x54>)
 800998a:	f8ad c00e 	strh.w	ip, [sp, #14]
 800998e:	f001 fe8d 	bl	800b6ac <HAL_I2C_Master_Transmit>
	return status; //0 = OK
}
 8009992:	b004      	add	sp, #16
 8009994:	bd10      	pop	{r4, pc}
 8009996:	4601      	mov	r1, r0
	else {printf("SHTC3 Wake up fail %x\r\n", status); return 0; }
 8009998:	4802      	ldr	r0, [pc, #8]	@ (80099a4 <SHTC3_start_meas+0x58>)
 800999a:	f007 f9c3 	bl	8010d24 <iprintf>
 800999e:	e7e6      	b.n	800996e <SHTC3_start_meas+0x22>
 80099a0:	200017ac 	.word	0x200017ac
 80099a4:	080173e8 	.word	0x080173e8

080099a8 <SHTC3_read_values>:

uint8_t SHTC3_read_values(uint8_t* result)
{
 80099a8:	b500      	push	{lr}
 80099aa:	b083      	sub	sp, #12
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)result, 6, 500);
 80099ac:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
{
 80099b0:	4602      	mov	r2, r0
	status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)result, 6, 500);
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	21e1      	movs	r1, #225	@ 0xe1
 80099b6:	2306      	movs	r3, #6
 80099b8:	4804      	ldr	r0, [pc, #16]	@ (80099cc <SHTC3_read_values+0x24>)
 80099ba:	f001 ff41 	bl	800b840 <HAL_I2C_Master_Receive>
	if (status != HAL_OK) {
		return 0;
	} 	else {
		return 1;
	};
}
 80099be:	fab0 f080 	clz	r0, r0
 80099c2:	0940      	lsrs	r0, r0, #5
 80099c4:	b003      	add	sp, #12
 80099c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80099ca:	bf00      	nop
 80099cc:	200017ac 	.word	0x200017ac

080099d0 <SHTC3_get_temp>:

float SHTC3_get_temp(uint8_t* result)
{
 80099d0:	b530      	push	{r4, r5, lr}
 80099d2:	8803      	ldrh	r3, [r0, #0]
 80099d4:	b083      	sub	sp, #12
 80099d6:	ba5b      	rev16	r3, r3
 80099d8:	4604      	mov	r4, r0
 80099da:	b29d      	uxth	r5, r3
	uint16_t raw_temp = result[0] << 8 | result[1];
	uint8_t data[2] = {raw_temp >> 8, raw_temp & 0xFF};
	uint8_t crc_hal = HALcalculateCRC(data,2);
 80099dc:	2102      	movs	r1, #2
	uint8_t data[2] = {raw_temp >> 8, raw_temp & 0xFF};
 80099de:	f3c3 2307 	ubfx	r3, r3, #8, #8
	uint8_t crc_hal = HALcalculateCRC(data,2);
 80099e2:	a801      	add	r0, sp, #4
	uint8_t data[2] = {raw_temp >> 8, raw_temp & 0xFF};
 80099e4:	f88d 3004 	strb.w	r3, [sp, #4]
 80099e8:	f88d 5005 	strb.w	r5, [sp, #5]
	uint8_t crc_hal = HALcalculateCRC(data,2);
 80099ec:	f7fd fe98 	bl	8007720 <HALcalculateCRC>
	if(result[2] == crc_hal) {
 80099f0:	78a3      	ldrb	r3, [r4, #2]
 80099f2:	4283      	cmp	r3, r0
 80099f4:	d006      	beq.n	8009a04 <SHTC3_get_temp+0x34>
		return (float)(((raw_temp * 175.0f) / 65535.0f) - 45.0f);
	}
	else {printf("Bad CRC\r\n");};
 80099f6:	480c      	ldr	r0, [pc, #48]	@ (8009a28 <SHTC3_get_temp+0x58>)
 80099f8:	f007 f9fc 	bl	8010df4 <puts>
	return -1000.0;
 80099fc:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8009a2c <SHTC3_get_temp+0x5c>
}
 8009a00:	b003      	add	sp, #12
 8009a02:	bd30      	pop	{r4, r5, pc}
		return (float)(((raw_temp * 175.0f) / 65535.0f) - 45.0f);
 8009a04:	ee07 5a90 	vmov	s15, r5
 8009a08:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8009a30 <SHTC3_get_temp+0x60>
 8009a0c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8009a34 <SHTC3_get_temp+0x64>
 8009a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a18:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8009a38 <SHTC3_get_temp+0x68>
 8009a1c:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8009a20:	ee30 0a47 	vsub.f32	s0, s0, s14
}
 8009a24:	b003      	add	sp, #12
 8009a26:	bd30      	pop	{r4, r5, pc}
 8009a28:	08017428 	.word	0x08017428
 8009a2c:	c47a0000 	.word	0xc47a0000
 8009a30:	432f0000 	.word	0x432f0000
 8009a34:	477fff00 	.word	0x477fff00
 8009a38:	42340000 	.word	0x42340000

08009a3c <SHTC3_get_hum>:

float SHTC3_get_hum(uint8_t* result)
{
 8009a3c:	b530      	push	{r4, r5, lr}
 8009a3e:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8009a42:	b083      	sub	sp, #12
 8009a44:	ba5b      	rev16	r3, r3
 8009a46:	4604      	mov	r4, r0
 8009a48:	b29d      	uxth	r5, r3
	uint16_t raw_hum = result[3] << 8 | result[4];
	uint8_t data[2] = {raw_hum >> 8, raw_hum & 0xFF};
	uint8_t crc_hal = HALcalculateCRC(data,2);
 8009a4a:	2102      	movs	r1, #2
	uint8_t data[2] = {raw_hum >> 8, raw_hum & 0xFF};
 8009a4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
	uint8_t crc_hal = HALcalculateCRC(data,2);
 8009a50:	a801      	add	r0, sp, #4
	uint8_t data[2] = {raw_hum >> 8, raw_hum & 0xFF};
 8009a52:	f88d 3004 	strb.w	r3, [sp, #4]
 8009a56:	f88d 5005 	strb.w	r5, [sp, #5]
	uint8_t crc_hal = HALcalculateCRC(data,2);
 8009a5a:	f7fd fe61 	bl	8007720 <HALcalculateCRC>
	if(result[5] == crc_hal) {
 8009a5e:	7963      	ldrb	r3, [r4, #5]
 8009a60:	4283      	cmp	r3, r0
 8009a62:	d006      	beq.n	8009a72 <SHTC3_get_hum+0x36>
		return (float)((raw_hum * 100.0f) / 65535.0f);
	}
	else {printf("Bad CRC\r\n");};
 8009a64:	480a      	ldr	r0, [pc, #40]	@ (8009a90 <SHTC3_get_hum+0x54>)
 8009a66:	f007 f9c5 	bl	8010df4 <puts>
	return -1000.0;
 8009a6a:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8009a94 <SHTC3_get_hum+0x58>
}
 8009a6e:	b003      	add	sp, #12
 8009a70:	bd30      	pop	{r4, r5, pc}
		return (float)((raw_hum * 100.0f) / 65535.0f);
 8009a72:	ee07 5a90 	vmov	s15, r5
 8009a76:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8009a98 <SHTC3_get_hum+0x5c>
 8009a7a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8009a9c <SHTC3_get_hum+0x60>
 8009a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009a86:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 8009a8a:	b003      	add	sp, #12
 8009a8c:	bd30      	pop	{r4, r5, pc}
 8009a8e:	bf00      	nop
 8009a90:	08017428 	.word	0x08017428
 8009a94:	c47a0000 	.word	0xc47a0000
 8009a98:	42c80000 	.word	0x42c80000
 8009a9c:	477fff00 	.word	0x477fff00

08009aa0 <BME280_check>:

uint8_t BME280_check()
{
 8009aa0:	b570      	push	{r4, r5, r6, lr}
		I2C2TCA_NRST();
 8009aa2:	2201      	movs	r2, #1
{
 8009aa4:	b086      	sub	sp, #24
		I2C2TCA_NRST();
 8009aa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009aaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009aae:	f001 fc5f 	bl	800b370 <HAL_GPIO_WritePin>
		osDelay(1);
 8009ab2:	2001      	movs	r0, #1
 8009ab4:	f004 f96e 	bl	800dd94 <osDelay>
		uint8_t data = 1 << channel;
 8009ab8:	2401      	movs	r4, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009aba:	f04f 31ff 	mov.w	r1, #4294967295
 8009abe:	f10d 0617 	add.w	r6, sp, #23
 8009ac2:	e9cd 4101 	strd	r4, r1, [sp, #4]
 8009ac6:	4623      	mov	r3, r4
 8009ac8:	2200      	movs	r2, #0
 8009aca:	21e4      	movs	r1, #228	@ 0xe4
 8009acc:	4817      	ldr	r0, [pc, #92]	@ (8009b2c <BME280_check+0x8c>)
 8009ace:	9600      	str	r6, [sp, #0]
		uint8_t data = 1 << channel;
 8009ad0:	f88d 4017 	strb.w	r4, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009ad4:	f001 ff84 	bl	800b9e0 <HAL_I2C_Mem_Write>
	uint8_t value;
	SET_BME280();
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, BMP280_I2C_ADDRESS_1 << 1, 3, 150);
 8009ad8:	4814      	ldr	r0, [pc, #80]	@ (8009b2c <BME280_check+0x8c>)
 8009ada:	2396      	movs	r3, #150	@ 0x96
 8009adc:	2203      	movs	r2, #3
 8009ade:	21ee      	movs	r1, #238	@ 0xee
 8009ae0:	f002 f9c2 	bl	800be68 <HAL_I2C_IsDeviceReady>
 8009ae4:	4605      	mov	r5, r0
	osDelay(100);
 8009ae6:	2064      	movs	r0, #100	@ 0x64
 8009ae8:	f004 f954 	bl	800dd94 <osDelay>
	if (status == HAL_OK) {
 8009aec:	b9cd      	cbnz	r5, 8009b22 <BME280_check+0x82>
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8009aee:	2308      	movs	r3, #8
 8009af0:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8009af4:	480d      	ldr	r0, [pc, #52]	@ (8009b2c <BME280_check+0x8c>)
 8009af6:	9600      	str	r6, [sp, #0]
 8009af8:	4623      	mov	r3, r4
 8009afa:	22d0      	movs	r2, #208	@ 0xd0
 8009afc:	21ee      	movs	r1, #238	@ 0xee
 8009afe:	f002 f895 	bl	800bc2c <HAL_I2C_Mem_Read>
    *value = tmp;
 8009b02:	f89d 3017 	ldrb.w	r3, [sp, #23]
		i2c_read8(&hi2c2, BMP280_REG_ID, &value, BMP280_I2C_ADDRESS_1 << 1);
		if(value == BME280_CHIP_ID) {printf("BME280 OK\r\n"); return 1;} else {printf("NOT BME280\r\n"); return 0;}
 8009b06:	2b60      	cmp	r3, #96	@ 0x60
 8009b08:	d005      	beq.n	8009b16 <BME280_check+0x76>
 8009b0a:	4809      	ldr	r0, [pc, #36]	@ (8009b30 <BME280_check+0x90>)
 8009b0c:	f007 f972 	bl	8010df4 <puts>
 8009b10:	2000      	movs	r0, #0
	} else {printf("BME280 FAILED\r\n"); return 0;}
	return 0;

}
 8009b12:	b006      	add	sp, #24
 8009b14:	bd70      	pop	{r4, r5, r6, pc}
		if(value == BME280_CHIP_ID) {printf("BME280 OK\r\n"); return 1;} else {printf("NOT BME280\r\n"); return 0;}
 8009b16:	4807      	ldr	r0, [pc, #28]	@ (8009b34 <BME280_check+0x94>)
 8009b18:	f007 f96c 	bl	8010df4 <puts>
 8009b1c:	4620      	mov	r0, r4
}
 8009b1e:	b006      	add	sp, #24
 8009b20:	bd70      	pop	{r4, r5, r6, pc}
	} else {printf("BME280 FAILED\r\n"); return 0;}
 8009b22:	4805      	ldr	r0, [pc, #20]	@ (8009b38 <BME280_check+0x98>)
 8009b24:	f007 f966 	bl	8010df4 <puts>
 8009b28:	e7f2      	b.n	8009b10 <BME280_check+0x70>
 8009b2a:	bf00      	nop
 8009b2c:	200017ac 	.word	0x200017ac
 8009b30:	08017440 	.word	0x08017440
 8009b34:	08017434 	.word	0x08017434
 8009b38:	0801744c 	.word	0x0801744c

08009b3c <BME280_init_config>:

void BME280_init_config(uint8_t conf_mode, uint8_t ovr_temp, uint8_t ovr_press, uint8_t ovr_hum, uint8_t coeff)
{
 8009b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b40:	b087      	sub	sp, #28
 8009b42:	4604      	mov	r4, r0
 8009b44:	460f      	mov	r7, r1
 8009b46:	4690      	mov	r8, r2
		I2C2TCA_NRST();
 8009b48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
{
 8009b52:	461e      	mov	r6, r3
 8009b54:	f89d 9038 	ldrb.w	r9, [sp, #56]	@ 0x38
		I2C2TCA_NRST();
 8009b58:	f001 fc0a 	bl	800b370 <HAL_GPIO_WritePin>
		osDelay(1);
 8009b5c:	2001      	movs	r0, #1
 8009b5e:	f004 f919 	bl	800dd94 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009b62:	f04f 32ff 	mov.w	r2, #4294967295
		uint8_t data = 1 << channel;
 8009b66:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009b68:	9202      	str	r2, [sp, #8]
 8009b6a:	f10d 0217 	add.w	r2, sp, #23
 8009b6e:	9301      	str	r3, [sp, #4]
 8009b70:	9200      	str	r2, [sp, #0]
 8009b72:	21e4      	movs	r1, #228	@ 0xe4
 8009b74:	2200      	movs	r2, #0
 8009b76:	4815      	ldr	r0, [pc, #84]	@ (8009bcc <BME280_init_config+0x90>)
		uint8_t data = 1 << channel;
 8009b78:	f88d 3017 	strb.w	r3, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009b7c:	f001 ff30 	bl	800b9e0 <HAL_I2C_Mem_Write>
	bmp280.params.oversampling_humidity = ovr_hum;
//	bmp280.params.standby = BMP280_STANDBY_250;
	bmp280.addr = BMP280_I2C_ADDRESS_1;
	bmp280.i2c = &hi2c2;

	switch (conf_mode)
 8009b80:	2c01      	cmp	r4, #1
 8009b82:	bf18      	it	ne
 8009b84:	2403      	movne	r4, #3
	{
	case 1:
		bmp280.params.mode = BMP280_MODE_FORCED;
 8009b86:	2500      	movs	r5, #0
	bmp280.params.oversampling_humidity = ovr_hum;
 8009b88:	4811      	ldr	r0, [pc, #68]	@ (8009bd0 <BME280_init_config+0x94>)
	bmp280.i2c = &hi2c2;
 8009b8a:	4b10      	ldr	r3, [pc, #64]	@ (8009bcc <BME280_init_config+0x90>)
	bmp280.params.oversampling_humidity = ovr_hum;
 8009b8c:	f880 6030 	strb.w	r6, [r0, #48]	@ 0x30
		bmp280.params.mode = BMP280_MODE_FORCED;
 8009b90:	f364 0507 	bfi	r5, r4, #0, #8
 8009b94:	f369 250f 	bfi	r5, r9, #8, #8
 8009b98:	f368 4517 	bfi	r5, r8, #16, #8
 8009b9c:	4601      	mov	r1, r0
 8009b9e:	f367 651f 	bfi	r5, r7, #24, #8
	bmp280.addr = BMP280_I2C_ADDRESS_1;
 8009ba2:	2277      	movs	r2, #119	@ 0x77
		bmp280.params.mode = BMP280_MODE_FORCED;
 8009ba4:	f841 5f2c 	str.w	r5, [r1, #44]!
	bmp280.addr = BMP280_I2C_ADDRESS_1;
 8009ba8:	8482      	strh	r2, [r0, #36]	@ 0x24
	bmp280.i2c = &hi2c2;
 8009baa:	6283      	str	r3, [r0, #40]	@ 0x28
		bmp280.params.mode = BMP280_MODE_NORMAL;
		break;
	default:
		bmp280.params.mode = BMP280_MODE_NORMAL;
	  }
	if(bmp280_init(&bmp280, &bmp280.params)) printf("BME280 init OK\r\n"); else printf("BME280 init FAIL\r\n");
 8009bac:	f7f9 fcde 	bl	800356c <bmp280_init>
 8009bb0:	b128      	cbz	r0, 8009bbe <BME280_init_config+0x82>
 8009bb2:	4808      	ldr	r0, [pc, #32]	@ (8009bd4 <BME280_init_config+0x98>)
}
 8009bb4:	b007      	add	sp, #28
 8009bb6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(bmp280_init(&bmp280, &bmp280.params)) printf("BME280 init OK\r\n"); else printf("BME280 init FAIL\r\n");
 8009bba:	f007 b91b 	b.w	8010df4 <puts>
 8009bbe:	4806      	ldr	r0, [pc, #24]	@ (8009bd8 <BME280_init_config+0x9c>)
}
 8009bc0:	b007      	add	sp, #28
 8009bc2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(bmp280_init(&bmp280, &bmp280.params)) printf("BME280 init OK\r\n"); else printf("BME280 init FAIL\r\n");
 8009bc6:	f007 b915 	b.w	8010df4 <puts>
 8009bca:	bf00      	nop
 8009bcc:	200017ac 	.word	0x200017ac
 8009bd0:	20001b14 	.word	0x20001b14
 8009bd4:	0801745c 	.word	0x0801745c
 8009bd8:	0801746c 	.word	0x0801746c

08009bdc <BME280_get_temp>:

float BME280_get_temp()
{
 8009bdc:	b530      	push	{r4, r5, lr}
		I2C2TCA_NRST();
 8009bde:	2201      	movs	r2, #1
{
 8009be0:	b089      	sub	sp, #36	@ 0x24
		I2C2TCA_NRST();
 8009be2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009bea:	f001 fbc1 	bl	800b370 <HAL_GPIO_WritePin>
		osDelay(1);
 8009bee:	2001      	movs	r0, #1
 8009bf0:	f004 f8d0 	bl	800dd94 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009bf4:	ad07      	add	r5, sp, #28
		uint8_t data = 1 << channel;
 8009bf6:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009c00:	480b      	ldr	r0, [pc, #44]	@ (8009c30 <BME280_get_temp+0x54>)
 8009c02:	9500      	str	r5, [sp, #0]
 8009c04:	2200      	movs	r2, #0
 8009c06:	21e4      	movs	r1, #228	@ 0xe4
		uint8_t data = 1 << channel;
 8009c08:	f88d 301c 	strb.w	r3, [sp, #28]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009c0c:	f001 fee8 	bl	800b9e0 <HAL_I2C_Mem_Write>
	SET_BME280();
	float temp, press, hum;
	while(bmp280_is_measuring(&bmp280));
 8009c10:	4c08      	ldr	r4, [pc, #32]	@ (8009c34 <BME280_get_temp+0x58>)
 8009c12:	4620      	mov	r0, r4
 8009c14:	f7f9 fe98 	bl	8003948 <bmp280_is_measuring>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d1fa      	bne.n	8009c12 <BME280_get_temp+0x36>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	aa06      	add	r2, sp, #24
 8009c20:	a905      	add	r1, sp, #20
 8009c22:	4804      	ldr	r0, [pc, #16]	@ (8009c34 <BME280_get_temp+0x58>)
 8009c24:	f7fa f810 	bl	8003c48 <bmp280_read_float>
	return temp;
}
 8009c28:	ed9d 0a05 	vldr	s0, [sp, #20]
 8009c2c:	b009      	add	sp, #36	@ 0x24
 8009c2e:	bd30      	pop	{r4, r5, pc}
 8009c30:	200017ac 	.word	0x200017ac
 8009c34:	20001b14 	.word	0x20001b14

08009c38 <BME280_get_press>:

float BME280_get_press()
{
 8009c38:	b530      	push	{r4, r5, lr}
		I2C2TCA_NRST();
 8009c3a:	2201      	movs	r2, #1
{
 8009c3c:	b089      	sub	sp, #36	@ 0x24
		I2C2TCA_NRST();
 8009c3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009c42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009c46:	f001 fb93 	bl	800b370 <HAL_GPIO_WritePin>
		osDelay(1);
 8009c4a:	2001      	movs	r0, #1
 8009c4c:	f004 f8a2 	bl	800dd94 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009c50:	ad07      	add	r5, sp, #28
		uint8_t data = 1 << channel;
 8009c52:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009c54:	f04f 32ff 	mov.w	r2, #4294967295
 8009c58:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009c5c:	480b      	ldr	r0, [pc, #44]	@ (8009c8c <BME280_get_press+0x54>)
 8009c5e:	9500      	str	r5, [sp, #0]
 8009c60:	2200      	movs	r2, #0
 8009c62:	21e4      	movs	r1, #228	@ 0xe4
		uint8_t data = 1 << channel;
 8009c64:	f88d 301c 	strb.w	r3, [sp, #28]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009c68:	f001 feba 	bl	800b9e0 <HAL_I2C_Mem_Write>
	SET_BME280();
	float temp, press, hum;
	while(bmp280_is_measuring(&bmp280));
 8009c6c:	4c08      	ldr	r4, [pc, #32]	@ (8009c90 <BME280_get_press+0x58>)
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f7f9 fe6a 	bl	8003948 <bmp280_is_measuring>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d1fa      	bne.n	8009c6e <BME280_get_press+0x36>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 8009c78:	462b      	mov	r3, r5
 8009c7a:	aa06      	add	r2, sp, #24
 8009c7c:	a905      	add	r1, sp, #20
 8009c7e:	4804      	ldr	r0, [pc, #16]	@ (8009c90 <BME280_get_press+0x58>)
 8009c80:	f7f9 ffe2 	bl	8003c48 <bmp280_read_float>
	return press;
}
 8009c84:	ed9d 0a06 	vldr	s0, [sp, #24]
 8009c88:	b009      	add	sp, #36	@ 0x24
 8009c8a:	bd30      	pop	{r4, r5, pc}
 8009c8c:	200017ac 	.word	0x200017ac
 8009c90:	20001b14 	.word	0x20001b14

08009c94 <BME280_get_hum>:

float BME280_get_hum()
{
 8009c94:	b530      	push	{r4, r5, lr}
		I2C2TCA_NRST();
 8009c96:	2201      	movs	r2, #1
{
 8009c98:	b089      	sub	sp, #36	@ 0x24
		I2C2TCA_NRST();
 8009c9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009c9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009ca2:	f001 fb65 	bl	800b370 <HAL_GPIO_WritePin>
		osDelay(1);
 8009ca6:	2001      	movs	r0, #1
 8009ca8:	f004 f874 	bl	800dd94 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009cac:	ad07      	add	r5, sp, #28
		uint8_t data = 1 << channel;
 8009cae:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009cb8:	480b      	ldr	r0, [pc, #44]	@ (8009ce8 <BME280_get_hum+0x54>)
 8009cba:	9500      	str	r5, [sp, #0]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	21e4      	movs	r1, #228	@ 0xe4
		uint8_t data = 1 << channel;
 8009cc0:	f88d 301c 	strb.w	r3, [sp, #28]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009cc4:	f001 fe8c 	bl	800b9e0 <HAL_I2C_Mem_Write>
	SET_BME280();
	float temp, press, hum;
	while(bmp280_is_measuring(&bmp280));
 8009cc8:	4c08      	ldr	r4, [pc, #32]	@ (8009cec <BME280_get_hum+0x58>)
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f7f9 fe3c 	bl	8003948 <bmp280_is_measuring>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d1fa      	bne.n	8009cca <BME280_get_hum+0x36>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 8009cd4:	462b      	mov	r3, r5
 8009cd6:	aa06      	add	r2, sp, #24
 8009cd8:	a905      	add	r1, sp, #20
 8009cda:	4804      	ldr	r0, [pc, #16]	@ (8009cec <BME280_get_hum+0x58>)
 8009cdc:	f7f9 ffb4 	bl	8003c48 <bmp280_read_float>
	return hum;
}
 8009ce0:	ed9d 0a07 	vldr	s0, [sp, #28]
 8009ce4:	b009      	add	sp, #36	@ 0x24
 8009ce6:	bd30      	pop	{r4, r5, pc}
 8009ce8:	200017ac 	.word	0x200017ac
 8009cec:	20001b14 	.word	0x20001b14

08009cf0 <BME280_start_meas>:

void BME280_start_meas()
{
 8009cf0:	b500      	push	{lr}
		I2C2TCA_NRST();
 8009cf2:	2201      	movs	r2, #1
{
 8009cf4:	b087      	sub	sp, #28
		I2C2TCA_NRST();
 8009cf6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009cfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009cfe:	f001 fb37 	bl	800b370 <HAL_GPIO_WritePin>
		osDelay(1);
 8009d02:	2001      	movs	r0, #1
 8009d04:	f004 f846 	bl	800dd94 <osDelay>
		uint8_t data = 1 << channel;
 8009d08:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0e:	f10d 0117 	add.w	r1, sp, #23
 8009d12:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8009d16:	9100      	str	r1, [sp, #0]
 8009d18:	4809      	ldr	r0, [pc, #36]	@ (8009d40 <BME280_start_meas+0x50>)
		uint8_t data = 1 << channel;
 8009d1a:	f88d 3017 	strb.w	r3, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009d1e:	2200      	movs	r2, #0
 8009d20:	21e4      	movs	r1, #228	@ 0xe4
 8009d22:	f001 fe5d 	bl	800b9e0 <HAL_I2C_Mem_Write>
	SET_BME280();
	if(!bmp280_force_measurement(&bmp280)) printf("Komenda w BME280 niewykonana\r\n");
 8009d26:	4807      	ldr	r0, [pc, #28]	@ (8009d44 <BME280_start_meas+0x54>)
 8009d28:	f7f9 fdda 	bl	80038e0 <bmp280_force_measurement>
 8009d2c:	b110      	cbz	r0, 8009d34 <BME280_start_meas+0x44>
}
 8009d2e:	b007      	add	sp, #28
 8009d30:	f85d fb04 	ldr.w	pc, [sp], #4
	if(!bmp280_force_measurement(&bmp280)) printf("Komenda w BME280 niewykonana\r\n");
 8009d34:	4804      	ldr	r0, [pc, #16]	@ (8009d48 <BME280_start_meas+0x58>)
}
 8009d36:	b007      	add	sp, #28
 8009d38:	f85d eb04 	ldr.w	lr, [sp], #4
	if(!bmp280_force_measurement(&bmp280)) printf("Komenda w BME280 niewykonana\r\n");
 8009d3c:	f007 b85a 	b.w	8010df4 <puts>
 8009d40:	200017ac 	.word	0x200017ac
 8009d44:	20001b14 	.word	0x20001b14
 8009d48:	08017480 	.word	0x08017480

08009d4c <bme280_conf_change>:

void bme280_conf_change(uint8_t sensor_conf)
{
 8009d4c:	b500      	push	{lr}
 8009d4e:	b083      	sub	sp, #12
    switch (sensor_conf) {
 8009d50:	2809      	cmp	r0, #9
 8009d52:	d869      	bhi.n	8009e28 <bme280_conf_change+0xdc>
 8009d54:	e8df f000 	tbb	[pc, r0]
 8009d58:	30261c12 	.word	0x30261c12
 8009d5c:	564d443a 	.word	0x564d443a
 8009d60:	055f      	.short	0x055f
        case 8:
        	BME280_init_config(1, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_FILTER_2);
        	printf("BME280 set x8, 2 IIR\r\n");
            return;
        case 9:
        	BME280_init_config(1, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_2);
 8009d62:	2305      	movs	r3, #5
 8009d64:	2001      	movs	r0, #1
 8009d66:	9000      	str	r0, [sp, #0]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	f7ff fee6 	bl	8009b3c <BME280_init_config>
        	printf("BME280 set x16, 2 IIR\r\n");
 8009d70:	4832      	ldr	r0, [pc, #200]	@ (8009e3c <bme280_conf_change+0xf0>)
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_2);
        	printf("BME280 set TEMP x4, PRESS x8, HUM x16, 2 IIR\r\n");
            return ;
    }

}
 8009d72:	b003      	add	sp, #12
 8009d74:	f85d eb04 	ldr.w	lr, [sp], #4
        	printf("BME280 set TEMP x4, PRESS x8, HUM x16, 2 IIR\r\n");
 8009d78:	f007 b83c 	b.w	8010df4 <puts>
        	BME280_init_config(1, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_FILTER_OFF);
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	2200      	movs	r2, #0
 8009d80:	4618      	mov	r0, r3
 8009d82:	9200      	str	r2, [sp, #0]
 8009d84:	4619      	mov	r1, r3
 8009d86:	461a      	mov	r2, r3
 8009d88:	f7ff fed8 	bl	8009b3c <BME280_init_config>
        	printf("BME280 set x1, no IIR\r\n");
 8009d8c:	482c      	ldr	r0, [pc, #176]	@ (8009e40 <bme280_conf_change+0xf4>)
 8009d8e:	e7f0      	b.n	8009d72 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_FILTER_OFF);
 8009d90:	2302      	movs	r3, #2
 8009d92:	2200      	movs	r2, #0
 8009d94:	2001      	movs	r0, #1
 8009d96:	9200      	str	r2, [sp, #0]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	f7ff fece 	bl	8009b3c <BME280_init_config>
        	printf("BME280 set x2, no IIR\r\n");
 8009da0:	4828      	ldr	r0, [pc, #160]	@ (8009e44 <bme280_conf_change+0xf8>)
 8009da2:	e7e6      	b.n	8009d72 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_STANDARD, BMP280_STANDARD, BMP280_STANDARD, BMP280_FILTER_OFF);
 8009da4:	2303      	movs	r3, #3
 8009da6:	2200      	movs	r2, #0
 8009da8:	2001      	movs	r0, #1
 8009daa:	9200      	str	r2, [sp, #0]
 8009dac:	4619      	mov	r1, r3
 8009dae:	461a      	mov	r2, r3
 8009db0:	f7ff fec4 	bl	8009b3c <BME280_init_config>
        	printf("BME280 set x4, no IIR\r\n");
 8009db4:	4824      	ldr	r0, [pc, #144]	@ (8009e48 <bme280_conf_change+0xfc>)
 8009db6:	e7dc      	b.n	8009d72 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_FILTER_OFF);
 8009db8:	2304      	movs	r3, #4
 8009dba:	2200      	movs	r2, #0
 8009dbc:	2001      	movs	r0, #1
 8009dbe:	9200      	str	r2, [sp, #0]
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	f7ff feba 	bl	8009b3c <BME280_init_config>
        	printf("BME280 set x8, no IIR\r\n");
 8009dc8:	4820      	ldr	r0, [pc, #128]	@ (8009e4c <bme280_conf_change+0x100>)
 8009dca:	e7d2      	b.n	8009d72 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_OFF);
 8009dcc:	2305      	movs	r3, #5
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	9200      	str	r2, [sp, #0]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f7ff feb0 	bl	8009b3c <BME280_init_config>
        	printf("BME280 set x16, no IIR\r\n");
 8009ddc:	481c      	ldr	r0, [pc, #112]	@ (8009e50 <bme280_conf_change+0x104>)
 8009dde:	e7c8      	b.n	8009d72 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_FILTER_2);
 8009de0:	2101      	movs	r1, #1
 8009de2:	4608      	mov	r0, r1
 8009de4:	9100      	str	r1, [sp, #0]
 8009de6:	460b      	mov	r3, r1
 8009de8:	460a      	mov	r2, r1
 8009dea:	f7ff fea7 	bl	8009b3c <BME280_init_config>
        	printf("BME280 set x1, 2 IIR\r\n");
 8009dee:	4819      	ldr	r0, [pc, #100]	@ (8009e54 <bme280_conf_change+0x108>)
 8009df0:	e7bf      	b.n	8009d72 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_FILTER_2);
 8009df2:	2302      	movs	r3, #2
 8009df4:	2001      	movs	r0, #1
 8009df6:	9000      	str	r0, [sp, #0]
 8009df8:	461a      	mov	r2, r3
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	f7ff fe9e 	bl	8009b3c <BME280_init_config>
        	printf("BME280 set x2, 2 IIR\r\n");
 8009e00:	4815      	ldr	r0, [pc, #84]	@ (8009e58 <bme280_conf_change+0x10c>)
 8009e02:	e7b6      	b.n	8009d72 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_STANDARD, BMP280_STANDARD, BMP280_STANDARD, BMP280_FILTER_2);
 8009e04:	2303      	movs	r3, #3
 8009e06:	2001      	movs	r0, #1
 8009e08:	9000      	str	r0, [sp, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	f7ff fe95 	bl	8009b3c <BME280_init_config>
        	printf("BME280 set x4, 2 IIR\r\n");
 8009e12:	4812      	ldr	r0, [pc, #72]	@ (8009e5c <bme280_conf_change+0x110>)
 8009e14:	e7ad      	b.n	8009d72 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_FILTER_2);
 8009e16:	2304      	movs	r3, #4
 8009e18:	2001      	movs	r0, #1
 8009e1a:	9000      	str	r0, [sp, #0]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	4619      	mov	r1, r3
 8009e20:	f7ff fe8c 	bl	8009b3c <BME280_init_config>
        	printf("BME280 set x8, 2 IIR\r\n");
 8009e24:	480e      	ldr	r0, [pc, #56]	@ (8009e60 <bme280_conf_change+0x114>)
 8009e26:	e7a4      	b.n	8009d72 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_2);
 8009e28:	2001      	movs	r0, #1
 8009e2a:	9000      	str	r0, [sp, #0]
 8009e2c:	2305      	movs	r3, #5
 8009e2e:	2204      	movs	r2, #4
 8009e30:	2102      	movs	r1, #2
 8009e32:	f7ff fe83 	bl	8009b3c <BME280_init_config>
        	printf("BME280 set TEMP x4, PRESS x8, HUM x16, 2 IIR\r\n");
 8009e36:	480b      	ldr	r0, [pc, #44]	@ (8009e64 <bme280_conf_change+0x118>)
 8009e38:	e79b      	b.n	8009d72 <bme280_conf_change+0x26>
 8009e3a:	bf00      	nop
 8009e3c:	08017578 	.word	0x08017578
 8009e40:	080174a0 	.word	0x080174a0
 8009e44:	080174b8 	.word	0x080174b8
 8009e48:	080174d0 	.word	0x080174d0
 8009e4c:	080174e8 	.word	0x080174e8
 8009e50:	08017500 	.word	0x08017500
 8009e54:	08017518 	.word	0x08017518
 8009e58:	08017530 	.word	0x08017530
 8009e5c:	08017548 	.word	0x08017548
 8009e60:	08017560 	.word	0x08017560
 8009e64:	08017590 	.word	0x08017590

08009e68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009ea0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009e6c:	f7fd fa1e 	bl	80072ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009e70:	480c      	ldr	r0, [pc, #48]	@ (8009ea4 <LoopForever+0x6>)
  ldr r1, =_edata
 8009e72:	490d      	ldr	r1, [pc, #52]	@ (8009ea8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009e74:	4a0d      	ldr	r2, [pc, #52]	@ (8009eac <LoopForever+0xe>)
  movs r3, #0
 8009e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009e78:	e002      	b.n	8009e80 <LoopCopyDataInit>

08009e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009e7e:	3304      	adds	r3, #4

08009e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009e84:	d3f9      	bcc.n	8009e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009e86:	4a0a      	ldr	r2, [pc, #40]	@ (8009eb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009e88:	4c0a      	ldr	r4, [pc, #40]	@ (8009eb4 <LoopForever+0x16>)
  movs r3, #0
 8009e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009e8c:	e001      	b.n	8009e92 <LoopFillZerobss>

08009e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009e90:	3204      	adds	r2, #4

08009e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009e94:	d3fb      	bcc.n	8009e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009e96:	f007 fa13 	bl	80112c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009e9a:	f7fc fa1f 	bl	80062dc <main>

08009e9e <LoopForever>:

LoopForever:
    b LoopForever
 8009e9e:	e7fe      	b.n	8009e9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009ea0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8009ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009ea8:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8009eac:	08017a18 	.word	0x08017a18
  ldr r2, =_sbss
 8009eb0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8009eb4:	20005e94 	.word	0x20005e94

08009eb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009eb8:	e7fe      	b.n	8009eb8 <ADC1_IRQHandler>
 8009eba:	0000      	movs	r0, r0
 8009ebc:	0000      	movs	r0, r0
	...

08009ec0 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8009ec0:	b510      	push	{r4, lr}
  if (lock == NULL)
 8009ec2:	b160      	cbz	r0, 8009ede <__retarget_lock_init_recursive+0x1e>
  {
    errno = EINVAL;
    return;
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	200c      	movs	r0, #12
 8009ec8:	f005 f842 	bl	800ef50 <malloc>
 8009ecc:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 8009ece:	b158      	cbz	r0, 8009ee8 <__retarget_lock_init_recursive+0x28>
static inline void stm32_lock_init(LockingData_t *lock)
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
  {
    lock->basepri[i] = 0;
 8009ed0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8009ef0 <__retarget_lock_init_recursive+0x30>
  }
  lock->nesting_level = 0;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	7203      	strb	r3, [r0, #8]
    lock->basepri[i] = 0;
 8009ed8:	ed80 7b00 	vstr	d7, [r0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 8009edc:	bd10      	pop	{r4, pc}
    errno = EINVAL;
 8009ede:	f007 f9e9 	bl	80112b4 <__errno>
 8009ee2:	2316      	movs	r3, #22
 8009ee4:	6003      	str	r3, [r0, #0]
}
 8009ee6:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8009ee8:	b672      	cpsid	i
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8009eea:	f7fc fc0d 	bl	8006708 <Error_Handler>
 8009eee:	e7fe      	b.n	8009eee <__retarget_lock_init_recursive+0x2e>
	...

08009ef8 <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 8009ef8:	b508      	push	{r3, lr}
 8009efa:	b1a8      	cbz	r0, 8009f28 <__retarget_lock_acquire_recursive+0x30>
 8009efc:	7a03      	ldrb	r3, [r0, #8]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d80e      	bhi.n	8009f20 <__retarget_lock_acquire_recursive+0x28>
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	7202      	strb	r2, [r0, #8]
 8009f06:	f3ef 8211 	mrs	r2, BASEPRI
 8009f0a:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8009f0e:	f381 8811 	msr	BASEPRI, r1
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8009f1e:	bd08      	pop	{r3, pc}
 8009f20:	b672      	cpsid	i
 8009f22:	f7fc fbf1 	bl	8006708 <Error_Handler>
 8009f26:	e7fe      	b.n	8009f26 <__retarget_lock_acquire_recursive+0x2e>
 8009f28:	b672      	cpsid	i
 8009f2a:	f7fc fbed 	bl	8006708 <Error_Handler>
 8009f2e:	e7fe      	b.n	8009f2e <__retarget_lock_acquire_recursive+0x36>

08009f30 <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 8009f30:	b508      	push	{r3, lr}
 8009f32:	b170      	cbz	r0, 8009f52 <__retarget_lock_release_recursive+0x22>
 8009f34:	7a03      	ldrb	r3, [r0, #8]
 8009f36:	3b01      	subs	r3, #1
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	7203      	strb	r3, [r0, #8]
 8009f3e:	d804      	bhi.n	8009f4a <__retarget_lock_release_recursive+0x1a>
 8009f40:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	bd08      	pop	{r3, pc}
 8009f4a:	b672      	cpsid	i
 8009f4c:	f7fc fbdc 	bl	8006708 <Error_Handler>
 8009f50:	e7fe      	b.n	8009f50 <__retarget_lock_release_recursive+0x20>
 8009f52:	b672      	cpsid	i
 8009f54:	f7fc fbd8 	bl	8006708 <Error_Handler>
 8009f58:	e7fe      	b.n	8009f58 <__retarget_lock_release_recursive+0x28>
 8009f5a:	bf00      	nop

08009f5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009f5c:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009f5e:	2003      	movs	r0, #3
 8009f60:	f000 fcec 	bl	800a93c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009f64:	200f      	movs	r0, #15
 8009f66:	f7fd f8eb 	bl	8007140 <HAL_InitTick>
 8009f6a:	b110      	cbz	r0, 8009f72 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 8009f6c:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8009f6e:	4620      	mov	r0, r4
 8009f70:	bd10      	pop	{r4, pc}
 8009f72:	4604      	mov	r4, r0
    HAL_MspInit();
 8009f74:	f7fc fee6 	bl	8006d44 <HAL_MspInit>
}
 8009f78:	4620      	mov	r0, r4
 8009f7a:	bd10      	pop	{r4, pc}

08009f7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8009f7c:	4a03      	ldr	r2, [pc, #12]	@ (8009f8c <HAL_IncTick+0x10>)
 8009f7e:	4b04      	ldr	r3, [pc, #16]	@ (8009f90 <HAL_IncTick+0x14>)
 8009f80:	6811      	ldr	r1, [r2, #0]
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	440b      	add	r3, r1
 8009f86:	6013      	str	r3, [r2, #0]
}
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	20001be8 	.word	0x20001be8
 8009f90:	20000010 	.word	0x20000010

08009f94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8009f94:	4b01      	ldr	r3, [pc, #4]	@ (8009f9c <HAL_GetTick+0x8>)
 8009f96:	6818      	ldr	r0, [r3, #0]
}
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	20001be8 	.word	0x20001be8

08009fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009fa4:	f7ff fff6 	bl	8009f94 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009fa8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8009faa:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8009fac:	d002      	beq.n	8009fb4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8009fae:	4b04      	ldr	r3, [pc, #16]	@ (8009fc0 <HAL_Delay+0x20>)
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009fb4:	f7ff ffee 	bl	8009f94 <HAL_GetTick>
 8009fb8:	1b40      	subs	r0, r0, r5
 8009fba:	42a0      	cmp	r0, r4
 8009fbc:	d3fa      	bcc.n	8009fb4 <HAL_Delay+0x14>
  {
  }
}
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}
 8009fc0:	20000010 	.word	0x20000010

08009fc4 <HAL_GetUIDw0>:
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8009fc4:	4b01      	ldr	r3, [pc, #4]	@ (8009fcc <HAL_GetUIDw0+0x8>)
}
 8009fc6:	f8d3 0590 	ldr.w	r0, [r3, #1424]	@ 0x590
 8009fca:	4770      	bx	lr
 8009fcc:	1fff7000 	.word	0x1fff7000

08009fd0 <HAL_GetUIDw1>:
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8009fd0:	4b01      	ldr	r3, [pc, #4]	@ (8009fd8 <HAL_GetUIDw1+0x8>)
}
 8009fd2:	f8d3 0594 	ldr.w	r0, [r3, #1428]	@ 0x594
 8009fd6:	4770      	bx	lr
 8009fd8:	1fff7000 	.word	0x1fff7000

08009fdc <HAL_GetUIDw2>:
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8009fdc:	4b01      	ldr	r3, [pc, #4]	@ (8009fe4 <HAL_GetUIDw2+0x8>)
}
 8009fde:	f8d3 0598 	ldr.w	r0, [r3, #1432]	@ 0x598
 8009fe2:	4770      	bx	lr
 8009fe4:	1fff7000 	.word	0x1fff7000

08009fe8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009fe8:	b530      	push	{r4, r5, lr}
 8009fea:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009fec:	2300      	movs	r3, #0
 8009fee:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	f000 8087 	beq.w	800a104 <HAL_ADC_Init+0x11c>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009ff6:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	2d00      	cmp	r5, #0
 8009ffc:	f000 8087 	beq.w	800a10e <HAL_ADC_Init+0x126>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a000:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a002:	6893      	ldr	r3, [r2, #8]
 800a004:	0098      	lsls	r0, r3, #2
 800a006:	d505      	bpl.n	800a014 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a008:	6893      	ldr	r3, [r2, #8]
 800a00a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800a00e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a012:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a014:	6893      	ldr	r3, [r2, #8]
 800a016:	00d9      	lsls	r1, r3, #3
 800a018:	d419      	bmi.n	800a04e <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a01a:	4b5a      	ldr	r3, [pc, #360]	@ (800a184 <HAL_ADC_Init+0x19c>)
 800a01c:	485a      	ldr	r0, [pc, #360]	@ (800a188 <HAL_ADC_Init+0x1a0>)
 800a01e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800a020:	6891      	ldr	r1, [r2, #8]
 800a022:	099b      	lsrs	r3, r3, #6
 800a024:	fba0 0303 	umull	r0, r3, r0, r3
 800a028:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 800a02c:	099b      	lsrs	r3, r3, #6
 800a02e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800a032:	3301      	adds	r3, #1
 800a034:	005b      	lsls	r3, r3, #1
 800a036:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800a03a:	6091      	str	r1, [r2, #8]
 800a03c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a03e:	9b01      	ldr	r3, [sp, #4]
 800a040:	b12b      	cbz	r3, 800a04e <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 800a042:	9b01      	ldr	r3, [sp, #4]
 800a044:	3b01      	subs	r3, #1
 800a046:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a048:	9b01      	ldr	r3, [sp, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1f9      	bne.n	800a042 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a04e:	6893      	ldr	r3, [r2, #8]
 800a050:	00db      	lsls	r3, r3, #3
 800a052:	d45a      	bmi.n	800a10a <HAL_ADC_Init+0x122>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a054:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a056:	f043 0310 	orr.w	r3, r3, #16
 800a05a:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a05c:	6da3      	ldr	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800a05e:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a060:	4303      	orrs	r3, r0
 800a062:	65a3      	str	r3, [r4, #88]	@ 0x58
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a064:	6893      	ldr	r3, [r2, #8]
 800a066:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a06a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a06c:	d146      	bne.n	800a0fc <HAL_ADC_Init+0x114>
 800a06e:	06dd      	lsls	r5, r3, #27
 800a070:	d444      	bmi.n	800a0fc <HAL_ADC_Init+0x114>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a072:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a074:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800a078:	f043 0302 	orr.w	r3, r3, #2
 800a07c:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a07e:	6893      	ldr	r3, [r2, #8]
 800a080:	07d9      	lsls	r1, r3, #31
 800a082:	d40a      	bmi.n	800a09a <HAL_ADC_Init+0xb2>
 800a084:	4b41      	ldr	r3, [pc, #260]	@ (800a18c <HAL_ADC_Init+0x1a4>)
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	07db      	lsls	r3, r3, #31
 800a08a:	d406      	bmi.n	800a09a <HAL_ADC_Init+0xb2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a08c:	4940      	ldr	r1, [pc, #256]	@ (800a190 <HAL_ADC_Init+0x1a8>)
 800a08e:	6865      	ldr	r5, [r4, #4]
 800a090:	688b      	ldr	r3, [r1, #8]
 800a092:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800a096:	432b      	orrs	r3, r5
 800a098:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 800a09a:	68e5      	ldr	r5, [r4, #12]
 800a09c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a09e:	f894 1020 	ldrb.w	r1, [r4, #32]
                hadc->Init.DataAlign                                                   |
 800a0a2:	432b      	orrs	r3, r5
 800a0a4:	68a5      	ldr	r5, [r4, #8]
 800a0a6:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a0a8:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a0aa:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 800a0ac:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a0b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a0b4:	d047      	beq.n	800a146 <HAL_ADC_Init+0x15e>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a0b6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800a0b8:	b121      	cbz	r1, 800a0c4 <HAL_ADC_Init+0xdc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800a0ba:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a0bc:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800a0c0:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a0c2:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800a0c4:	68d5      	ldr	r5, [r2, #12]
 800a0c6:	4933      	ldr	r1, [pc, #204]	@ (800a194 <HAL_ADC_Init+0x1ac>)
 800a0c8:	4029      	ands	r1, r5
 800a0ca:	4319      	orrs	r1, r3
 800a0cc:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a0ce:	6891      	ldr	r1, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a0d0:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a0d2:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a0d6:	f003 0308 	and.w	r3, r3, #8
 800a0da:	430b      	orrs	r3, r1
 800a0dc:	d01d      	beq.n	800a11a <HAL_ADC_Init+0x132>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a0de:	6923      	ldr	r3, [r4, #16]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d035      	beq.n	800a150 <HAL_ADC_Init+0x168>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a0e4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a0e6:	f023 030f 	bic.w	r3, r3, #15
 800a0ea:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a0ec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a0ee:	f023 0303 	bic.w	r3, r3, #3
 800a0f2:	f043 0301 	orr.w	r3, r3, #1
 800a0f6:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800a0f8:	b003      	add	sp, #12
 800a0fa:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a0fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a0fe:	f043 0310 	orr.w	r3, r3, #16
 800a102:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 800a104:	2001      	movs	r0, #1
}
 800a106:	b003      	add	sp, #12
 800a108:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a10a:	2000      	movs	r0, #0
 800a10c:	e7aa      	b.n	800a064 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 800a10e:	f7fc fe3f 	bl	8006d90 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800a112:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 800a114:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 800a118:	e772      	b.n	800a000 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800a11a:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a11c:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a120:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800a122:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a126:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800a128:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800a12c:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800a130:	430b      	orrs	r3, r1
 800a132:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800a134:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d011      	beq.n	800a160 <HAL_ADC_Init+0x178>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a13c:	6913      	ldr	r3, [r2, #16]
 800a13e:	f023 0301 	bic.w	r3, r3, #1
 800a142:	6113      	str	r3, [r2, #16]
 800a144:	e7cb      	b.n	800a0de <HAL_ADC_Init+0xf6>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a146:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a148:	3901      	subs	r1, #1
 800a14a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800a14e:	e7b2      	b.n	800a0b6 <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a150:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800a152:	69e3      	ldr	r3, [r4, #28]
 800a154:	f021 010f 	bic.w	r1, r1, #15
 800a158:	3b01      	subs	r3, #1
 800a15a:	430b      	orrs	r3, r1
 800a15c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a15e:	e7c5      	b.n	800a0ec <HAL_ADC_Init+0x104>
        MODIFY_REG(hadc->Instance->CFGR2,
 800a160:	6911      	ldr	r1, [r2, #16]
 800a162:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a164:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800a166:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 800a16a:	f021 0104 	bic.w	r1, r1, #4
 800a16e:	432b      	orrs	r3, r5
 800a170:	430b      	orrs	r3, r1
 800a172:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a174:	430b      	orrs	r3, r1
 800a176:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a178:	430b      	orrs	r3, r1
 800a17a:	f043 0301 	orr.w	r3, r3, #1
 800a17e:	6113      	str	r3, [r2, #16]
 800a180:	e7ad      	b.n	800a0de <HAL_ADC_Init+0xf6>
 800a182:	bf00      	nop
 800a184:	20000004 	.word	0x20000004
 800a188:	053e2d63 	.word	0x053e2d63
 800a18c:	50040000 	.word	0x50040000
 800a190:	50040300 	.word	0x50040300
 800a194:	fff0c007 	.word	0xfff0c007

0800a198 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop

0800a19c <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop

0800a1a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a1a0:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a1a2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800a1a4:	f7ff fffa 	bl	800a19c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a1a8:	bd08      	pop	{r3, pc}
 800a1aa:	bf00      	nop

0800a1ac <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop

0800a1b0 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1b0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a1b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1b4:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 800a1b8:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a1ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a1bc:	d11d      	bne.n	800a1fa <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a1be:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a1c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1c4:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a1c6:	680a      	ldr	r2, [r1, #0]
 800a1c8:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a1cc:	68ca      	ldr	r2, [r1, #12]
 800a1ce:	d01b      	beq.n	800a208 <ADC_DMAConvCplt+0x58>
 800a1d0:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800a1d4:	d10d      	bne.n	800a1f2 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a1d6:	68ca      	ldr	r2, [r1, #12]
 800a1d8:	0494      	lsls	r4, r2, #18
 800a1da:	d40a      	bmi.n	800a1f2 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a1dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a1e2:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a1e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1e6:	04d1      	lsls	r1, r2, #19
 800a1e8:	d403      	bmi.n	800a1f2 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a1ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1ec:	f042 0201 	orr.w	r2, r2, #1
 800a1f0:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7ff ffd0 	bl	800a198 <HAL_ADC_ConvCpltCallback>
}
 800a1f8:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a1fa:	06d2      	lsls	r2, r2, #27
 800a1fc:	d40a      	bmi.n	800a214 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a1fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800a200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a206:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a208:	0790      	lsls	r0, r2, #30
 800a20a:	d5e7      	bpl.n	800a1dc <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7ff ffc3 	bl	800a198 <HAL_ADC_ConvCpltCallback>
 800a212:	e7f1      	b.n	800a1f8 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff ffc9 	bl	800a1ac <HAL_ADC_ErrorCallback>
}
 800a21a:	bd10      	pop	{r4, pc}

0800a21c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a21c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 800a21e:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a220:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a226:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a228:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800a22a:	f043 0304 	orr.w	r3, r3, #4
 800a22e:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a230:	f7ff ffbc 	bl	800a1ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a234:	bd08      	pop	{r3, pc}
 800a236:	bf00      	nop

0800a238 <HAL_ADC_ConfigChannel>:
{
 800a238:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800a23a:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
{
 800a23e:	b083      	sub	sp, #12
 800a240:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800a242:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 800a244:	f04f 0000 	mov.w	r0, #0
 800a248:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800a24a:	f000 8115 	beq.w	800a478 <HAL_ADC_ConfigChannel+0x240>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a24e:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 800a250:	2001      	movs	r0, #1
 800a252:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a256:	68a2      	ldr	r2, [r4, #8]
 800a258:	f012 0204 	ands.w	r2, r2, #4
 800a25c:	d157      	bne.n	800a30e <HAL_ADC_ConfigChannel+0xd6>
    if (sConfig->Rank <= 5U)
 800a25e:	6848      	ldr	r0, [r1, #4]
 800a260:	2805      	cmp	r0, #5
 800a262:	f240 808f 	bls.w	800a384 <HAL_ADC_ConfigChannel+0x14c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800a266:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 800a268:	261f      	movs	r6, #31
 800a26a:	f000 001f 	and.w	r0, r0, #31
 800a26e:	4086      	lsls	r6, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800a270:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 800a274:	43f6      	mvns	r6, r6
 800a276:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800a278:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 800a27c:	f3c5 6c84 	ubfx	ip, r5, #26, #5
 800a280:	f85e 5002 	ldr.w	r5, [lr, r2]
 800a284:	fa0c f000 	lsl.w	r0, ip, r0
 800a288:	46f4      	mov	ip, lr
 800a28a:	ea05 0e06 	and.w	lr, r5, r6
 800a28e:	ea40 000e 	orr.w	r0, r0, lr
 800a292:	f84c 0002 	str.w	r0, [ip, r2]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a296:	68a2      	ldr	r2, [r4, #8]
 800a298:	0752      	lsls	r2, r2, #29
 800a29a:	d541      	bpl.n	800a320 <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a29c:	68a2      	ldr	r2, [r4, #8]
 800a29e:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a2a0:	68a0      	ldr	r0, [r4, #8]
 800a2a2:	07c6      	lsls	r6, r0, #31
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800a2a4:	4615      	mov	r5, r2
 800a2a6:	d413      	bmi.n	800a2d0 <HAL_ADC_ConfigChannel+0x98>
 800a2a8:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800a2aa:	48bd      	ldr	r0, [pc, #756]	@ (800a5a0 <HAL_ADC_ConfigChannel+0x368>)
 800a2ac:	f8d4 60b0 	ldr.w	r6, [r4, #176]	@ 0xb0
 800a2b0:	f007 0c18 	and.w	ip, r7, #24
 800a2b4:	fa20 f00c 	lsr.w	r0, r0, ip
 800a2b8:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 800a2bc:	4010      	ands	r0, r2
 800a2be:	ea26 060c 	bic.w	r6, r6, ip
 800a2c2:	4330      	orrs	r0, r6
 800a2c4:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a2c8:	48b6      	ldr	r0, [pc, #728]	@ (800a5a4 <HAL_ADC_ConfigChannel+0x36c>)
 800a2ca:	4287      	cmp	r7, r0
 800a2cc:	f000 8084 	beq.w	800a3d8 <HAL_ADC_ConfigChannel+0x1a0>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a2d0:	4ab5      	ldr	r2, [pc, #724]	@ (800a5a8 <HAL_ADC_ConfigChannel+0x370>)
 800a2d2:	4215      	tst	r5, r2
 800a2d4:	d019      	beq.n	800a30a <HAL_ADC_ConfigChannel+0xd2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a2d6:	49b5      	ldr	r1, [pc, #724]	@ (800a5ac <HAL_ADC_ConfigChannel+0x374>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a2d8:	48b5      	ldr	r0, [pc, #724]	@ (800a5b0 <HAL_ADC_ConfigChannel+0x378>)
 800a2da:	688a      	ldr	r2, [r1, #8]
 800a2dc:	4285      	cmp	r5, r0
 800a2de:	f002 76e0 	and.w	r6, r2, #29360128	@ 0x1c00000
 800a2e2:	d057      	beq.n	800a394 <HAL_ADC_ConfigChannel+0x15c>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a2e4:	48b3      	ldr	r0, [pc, #716]	@ (800a5b4 <HAL_ADC_ConfigChannel+0x37c>)
 800a2e6:	4285      	cmp	r5, r0
 800a2e8:	f000 80c9 	beq.w	800a47e <HAL_ADC_ConfigChannel+0x246>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800a2ec:	48b2      	ldr	r0, [pc, #712]	@ (800a5b8 <HAL_ADC_ConfigChannel+0x380>)
 800a2ee:	4285      	cmp	r5, r0
 800a2f0:	d10b      	bne.n	800a30a <HAL_ADC_ConfigChannel+0xd2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a2f2:	0252      	lsls	r2, r2, #9
 800a2f4:	d409      	bmi.n	800a30a <HAL_ADC_ConfigChannel+0xd2>
        if (ADC_VREFINT_INSTANCE(hadc))
 800a2f6:	4ab1      	ldr	r2, [pc, #708]	@ (800a5bc <HAL_ADC_ConfigChannel+0x384>)
 800a2f8:	4294      	cmp	r4, r2
 800a2fa:	d106      	bne.n	800a30a <HAL_ADC_ConfigChannel+0xd2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a2fc:	688a      	ldr	r2, [r1, #8]
 800a2fe:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800a302:	4332      	orrs	r2, r6
 800a304:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800a308:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a30a:	2000      	movs	r0, #0
 800a30c:	e003      	b.n	800a316 <HAL_ADC_ConfigChannel+0xde>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a30e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a310:	f042 0220 	orr.w	r2, r2, #32
 800a314:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 800a316:	2200      	movs	r2, #0
 800a318:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 800a31c:	b003      	add	sp, #12
 800a31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a320:	68a0      	ldr	r0, [r4, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a322:	680a      	ldr	r2, [r1, #0]
 800a324:	0707      	lsls	r7, r0, #28
 800a326:	d4bb      	bmi.n	800a2a0 <HAL_ADC_ConfigChannel+0x68>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800a328:	0dd0      	lsrs	r0, r2, #23
 800a32a:	f000 0004 	and.w	r0, r0, #4
 800a32e:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 800a332:	f3c2 5c04 	ubfx	ip, r2, #20, #5
 800a336:	688e      	ldr	r6, [r1, #8]
 800a338:	582a      	ldr	r2, [r5, r0]
 800a33a:	2707      	movs	r7, #7
 800a33c:	fa07 f70c 	lsl.w	r7, r7, ip
 800a340:	fa06 f60c 	lsl.w	r6, r6, ip
 800a344:	ea22 0207 	bic.w	r2, r2, r7
 800a348:	4332      	orrs	r2, r6
 800a34a:	502a      	str	r2, [r5, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a34c:	e9d1 6204 	ldrd	r6, r2, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a350:	2e04      	cmp	r6, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a352:	68e0      	ldr	r0, [r4, #12]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a354:	f104 0560 	add.w	r5, r4, #96	@ 0x60
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a358:	f000 80f2 	beq.w	800a540 <HAL_ADC_ConfigChannel+0x308>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a35c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800a360:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 800a362:	f855 c026 	ldr.w	ip, [r5, r6, lsl #2]
 800a366:	4f96      	ldr	r7, [pc, #600]	@ (800a5c0 <HAL_ADC_ConfigChannel+0x388>)
 800a368:	4082      	lsls	r2, r0
 800a36a:	6808      	ldr	r0, [r1, #0]
 800a36c:	ea0c 0707 	and.w	r7, ip, r7
 800a370:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 800a374:	4338      	orrs	r0, r7
 800a376:	4302      	orrs	r2, r0
 800a378:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a37c:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
 800a380:	680a      	ldr	r2, [r1, #0]
}
 800a382:	e78d      	b.n	800a2a0 <HAL_ADC_ConfigChannel+0x68>
      switch (sConfig->Rank)
 800a384:	3802      	subs	r0, #2
 800a386:	2803      	cmp	r0, #3
 800a388:	f200 8192 	bhi.w	800a6b0 <HAL_ADC_ConfigChannel+0x478>
 800a38c:	e8df f000 	tbb	[pc, r0]
 800a390:	8698938e 	.word	0x8698938e
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a394:	0215      	lsls	r5, r2, #8
 800a396:	d4b8      	bmi.n	800a30a <HAL_ADC_ConfigChannel+0xd2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a398:	4a88      	ldr	r2, [pc, #544]	@ (800a5bc <HAL_ADC_ConfigChannel+0x384>)
 800a39a:	4294      	cmp	r4, r2
 800a39c:	d1b5      	bne.n	800a30a <HAL_ADC_ConfigChannel+0xd2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a39e:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a3a0:	4888      	ldr	r0, [pc, #544]	@ (800a5c4 <HAL_ADC_ConfigChannel+0x38c>)
 800a3a2:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800a3a6:	4332      	orrs	r2, r6
 800a3a8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a3ac:	608a      	str	r2, [r1, #8]
 800a3ae:	6802      	ldr	r2, [r0, #0]
 800a3b0:	4985      	ldr	r1, [pc, #532]	@ (800a5c8 <HAL_ADC_ConfigChannel+0x390>)
 800a3b2:	0992      	lsrs	r2, r2, #6
 800a3b4:	fba1 1202 	umull	r1, r2, r1, r2
 800a3b8:	0992      	lsrs	r2, r2, #6
 800a3ba:	3201      	adds	r2, #1
 800a3bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a3c0:	0092      	lsls	r2, r2, #2
 800a3c2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800a3c4:	9a01      	ldr	r2, [sp, #4]
 800a3c6:	2a00      	cmp	r2, #0
 800a3c8:	d09f      	beq.n	800a30a <HAL_ADC_ConfigChannel+0xd2>
            wait_loop_index--;
 800a3ca:	9a01      	ldr	r2, [sp, #4]
 800a3cc:	3a01      	subs	r2, #1
 800a3ce:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800a3d0:	9a01      	ldr	r2, [sp, #4]
 800a3d2:	2a00      	cmp	r2, #0
 800a3d4:	d1f9      	bne.n	800a3ca <HAL_ADC_ConfigChannel+0x192>
 800a3d6:	e798      	b.n	800a30a <HAL_ADC_ConfigChannel+0xd2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a3d8:	f1bc 0f00 	cmp.w	ip, #0
 800a3dc:	d075      	beq.n	800a4ca <HAL_ADC_ConfigChannel+0x292>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3de:	fa92 f0a2 	rbit	r0, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	f000 8085 	beq.w	800a4f2 <HAL_ADC_ConfigChannel+0x2ba>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800a3e8:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	f000 001f 	and.w	r0, r0, #31
 800a3f2:	2809      	cmp	r0, #9
 800a3f4:	d97d      	bls.n	800a4f2 <HAL_ADC_ConfigChannel+0x2ba>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3f6:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	f000 8151 	beq.w	800a6a2 <HAL_ADC_ConfigChannel+0x46a>
  return __builtin_clz(value);
 800a400:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a404:	3001      	adds	r0, #1
 800a406:	0680      	lsls	r0, r0, #26
 800a408:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a40c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800a410:	2d00      	cmp	r5, #0
 800a412:	f000 814b 	beq.w	800a6ac <HAL_ADC_ConfigChannel+0x474>
  return __builtin_clz(value);
 800a416:	fab5 f585 	clz	r5, r5
 800a41a:	3501      	adds	r5, #1
 800a41c:	f005 051f 	and.w	r5, r5, #31
 800a420:	2601      	movs	r6, #1
 800a422:	fa06 f505 	lsl.w	r5, r6, r5
 800a426:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a428:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800a42c:	2a00      	cmp	r2, #0
 800a42e:	f000 813b 	beq.w	800a6a8 <HAL_ADC_ConfigChannel+0x470>
  return __builtin_clz(value);
 800a432:	fab2 f282 	clz	r2, r2
 800a436:	1c55      	adds	r5, r2, #1
 800a438:	f005 051f 	and.w	r5, r5, #31
 800a43c:	2203      	movs	r2, #3
 800a43e:	f06f 061d 	mvn.w	r6, #29
 800a442:	fb12 6205 	smlabb	r2, r2, r5, r6
 800a446:	0512      	lsls	r2, r2, #20
 800a448:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a44c:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800a44e:	0dd5      	lsrs	r5, r2, #23
  MODIFY_REG(*preg,
 800a450:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800a452:	f005 0504 	and.w	r5, r5, #4
 800a456:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 800a45a:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800a45e:	fa00 f702 	lsl.w	r7, r0, r2
 800a462:	f04f 0c07 	mov.w	ip, #7
 800a466:	5970      	ldr	r0, [r6, r5]
 800a468:	fa0c f202 	lsl.w	r2, ip, r2
 800a46c:	ea20 0202 	bic.w	r2, r0, r2
 800a470:	433a      	orrs	r2, r7
 800a472:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a474:	680d      	ldr	r5, [r1, #0]
}
 800a476:	e72b      	b.n	800a2d0 <HAL_ADC_ConfigChannel+0x98>
  __HAL_LOCK(hadc);
 800a478:	2002      	movs	r0, #2
}
 800a47a:	b003      	add	sp, #12
 800a47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a47e:	01d0      	lsls	r0, r2, #7
 800a480:	f53f af43 	bmi.w	800a30a <HAL_ADC_ConfigChannel+0xd2>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a484:	4a4d      	ldr	r2, [pc, #308]	@ (800a5bc <HAL_ADC_ConfigChannel+0x384>)
 800a486:	4294      	cmp	r4, r2
 800a488:	f47f af3f 	bne.w	800a30a <HAL_ADC_ConfigChannel+0xd2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a48c:	688a      	ldr	r2, [r1, #8]
 800a48e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800a492:	4332      	orrs	r2, r6
 800a494:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800a498:	608a      	str	r2, [r1, #8]
}
 800a49a:	e736      	b.n	800a30a <HAL_ADC_ConfigChannel+0xd2>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800a49c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a4a0:	604a      	str	r2, [r1, #4]
          break;
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	f06f 061f 	mvn.w	r6, #31
 800a4a8:	2204      	movs	r2, #4
 800a4aa:	e6e4      	b.n	800a276 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800a4ac:	200c      	movs	r0, #12
 800a4ae:	6048      	str	r0, [r1, #4]
          break;
 800a4b0:	f46f 36f8 	mvn.w	r6, #126976	@ 0x1f000
 800a4b4:	e6df      	b.n	800a276 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800a4b6:	2012      	movs	r0, #18
 800a4b8:	6048      	str	r0, [r1, #4]
          break;
 800a4ba:	f46f 06f8 	mvn.w	r6, #8126464	@ 0x7c0000
 800a4be:	e6da      	b.n	800a276 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800a4c0:	2018      	movs	r0, #24
 800a4c2:	6048      	str	r0, [r1, #4]
          break;
 800a4c4:	f06f 56f8 	mvn.w	r6, #520093696	@ 0x1f000000
 800a4c8:	e6d5      	b.n	800a276 <HAL_ADC_ConfigChannel+0x3e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a4ca:	0e92      	lsrs	r2, r2, #26
 800a4cc:	3201      	adds	r2, #1
 800a4ce:	f002 061f 	and.w	r6, r2, #31
 800a4d2:	0692      	lsls	r2, r2, #26
 800a4d4:	f002 45f8 	and.w	r5, r2, #2080374784	@ 0x7c000000
 800a4d8:	2201      	movs	r2, #1
 800a4da:	40b2      	lsls	r2, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a4dc:	2e09      	cmp	r6, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a4de:	ea45 0002 	orr.w	r0, r5, r2
 800a4e2:	eb06 0246 	add.w	r2, r6, r6, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a4e6:	d929      	bls.n	800a53c <HAL_ADC_ConfigChannel+0x304>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a4e8:	3a1e      	subs	r2, #30
 800a4ea:	0512      	lsls	r2, r2, #20
 800a4ec:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800a4f0:	e7ac      	b.n	800a44c <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4f2:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	f000 80d0 	beq.w	800a69c <HAL_ADC_ConfigChannel+0x464>
  return __builtin_clz(value);
 800a4fc:	fab0 f080 	clz	r0, r0
 800a500:	3001      	adds	r0, #1
 800a502:	0680      	lsls	r0, r0, #26
 800a504:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a508:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800a50c:	2d00      	cmp	r5, #0
 800a50e:	f000 80c3 	beq.w	800a698 <HAL_ADC_ConfigChannel+0x460>
  return __builtin_clz(value);
 800a512:	fab5 f585 	clz	r5, r5
 800a516:	3501      	adds	r5, #1
 800a518:	f005 051f 	and.w	r5, r5, #31
 800a51c:	2601      	movs	r6, #1
 800a51e:	fa06 f505 	lsl.w	r5, r6, r5
 800a522:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a524:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800a528:	2a00      	cmp	r2, #0
 800a52a:	f000 80b2 	beq.w	800a692 <HAL_ADC_ConfigChannel+0x45a>
  return __builtin_clz(value);
 800a52e:	fab2 f282 	clz	r2, r2
 800a532:	3201      	adds	r2, #1
 800a534:	f002 021f 	and.w	r2, r2, #31
 800a538:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a53c:	0512      	lsls	r2, r2, #20
 800a53e:	e785      	b.n	800a44c <HAL_ADC_ConfigChannel+0x214>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a540:	6e22      	ldr	r2, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a542:	680a      	ldr	r2, [r1, #0]
 800a544:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800a546:	f3c2 0612 	ubfx	r6, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a54a:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a54e:	2e00      	cmp	r6, #0
 800a550:	d13c      	bne.n	800a5cc <HAL_ADC_ConfigChannel+0x394>
 800a552:	f3c2 6684 	ubfx	r6, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a556:	42b0      	cmp	r0, r6
 800a558:	f000 808b 	beq.w	800a672 <HAL_ADC_ConfigChannel+0x43a>
 800a55c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800a55e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a560:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800a564:	42b0      	cmp	r0, r6
 800a566:	d062      	beq.n	800a62e <HAL_ADC_ConfigChannel+0x3f6>
 800a568:	68a8      	ldr	r0, [r5, #8]
 800a56a:	68a8      	ldr	r0, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a56c:	f105 0708 	add.w	r7, r5, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a570:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a574:	f3c2 6684 	ubfx	r6, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a578:	4286      	cmp	r6, r0
 800a57a:	d069      	beq.n	800a650 <HAL_ADC_ConfigChannel+0x418>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a57c:	68e8      	ldr	r0, [r5, #12]
 800a57e:	68e8      	ldr	r0, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a580:	f105 060c 	add.w	r6, r5, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a584:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a588:	f3c2 6584 	ubfx	r5, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a58c:	4285      	cmp	r5, r0
 800a58e:	f47f ae87 	bne.w	800a2a0 <HAL_ADC_ConfigChannel+0x68>
  MODIFY_REG(*preg,
 800a592:	6832      	ldr	r2, [r6, #0]
 800a594:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a598:	6032      	str	r2, [r6, #0]
 800a59a:	680a      	ldr	r2, [r1, #0]
}
 800a59c:	e680      	b.n	800a2a0 <HAL_ADC_ConfigChannel+0x68>
 800a59e:	bf00      	nop
 800a5a0:	0007ffff 	.word	0x0007ffff
 800a5a4:	407f0000 	.word	0x407f0000
 800a5a8:	80080000 	.word	0x80080000
 800a5ac:	50040300 	.word	0x50040300
 800a5b0:	c7520000 	.word	0xc7520000
 800a5b4:	cb840000 	.word	0xcb840000
 800a5b8:	80000001 	.word	0x80000001
 800a5bc:	50040000 	.word	0x50040000
 800a5c0:	03fff000 	.word	0x03fff000
 800a5c4:	20000004 	.word	0x20000004
 800a5c8:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5cc:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800a5d0:	b11e      	cbz	r6, 800a5da <HAL_ADC_ConfigChannel+0x3a2>
  return __builtin_clz(value);
 800a5d2:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a5d6:	42b0      	cmp	r0, r6
 800a5d8:	d04b      	beq.n	800a672 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a5da:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800a5dc:	6e60      	ldr	r0, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a5de:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5e2:	fa92 f6a2 	rbit	r6, r2
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a5e6:	f105 0708 	add.w	r7, r5, #8
 800a5ea:	46bc      	mov	ip, r7
  if (value == 0U)
 800a5ec:	b11e      	cbz	r6, 800a5f6 <HAL_ADC_ConfigChannel+0x3be>
  return __builtin_clz(value);
 800a5ee:	fab6 f686 	clz	r6, r6
 800a5f2:	4286      	cmp	r6, r0
 800a5f4:	d01d      	beq.n	800a632 <HAL_ADC_ConfigChannel+0x3fa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a5f6:	68a8      	ldr	r0, [r5, #8]
 800a5f8:	68a8      	ldr	r0, [r5, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a5fa:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5fe:	fa92 fca2 	rbit	ip, r2
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a602:	f105 060c 	add.w	r6, r5, #12
 800a606:	46b6      	mov	lr, r6
  if (value == 0U)
 800a608:	f1bc 0f00 	cmp.w	ip, #0
 800a60c:	d003      	beq.n	800a616 <HAL_ADC_ConfigChannel+0x3de>
  return __builtin_clz(value);
 800a60e:	fabc fc8c 	clz	ip, ip
 800a612:	4584      	cmp	ip, r0
 800a614:	d01e      	beq.n	800a654 <HAL_ADC_ConfigChannel+0x41c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a616:	68e8      	ldr	r0, [r5, #12]
 800a618:	68e8      	ldr	r0, [r5, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a61a:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a61e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800a622:	2d00      	cmp	r5, #0
 800a624:	f43f ae3c 	beq.w	800a2a0 <HAL_ADC_ConfigChannel+0x68>
  return __builtin_clz(value);
 800a628:	fab5 f585 	clz	r5, r5
 800a62c:	e7ae      	b.n	800a58c <HAL_ADC_ConfigChannel+0x354>
 800a62e:	f105 0c08 	add.w	ip, r5, #8
  MODIFY_REG(*preg,
 800a632:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a634:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a638:	6662      	str	r2, [r4, #100]	@ 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a63a:	68aa      	ldr	r2, [r5, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a63c:	680a      	ldr	r2, [r1, #0]
 800a63e:	68a8      	ldr	r0, [r5, #8]
 800a640:	f3c2 0612 	ubfx	r6, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a644:	4667      	mov	r7, ip
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a646:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a64a:	2e00      	cmp	r6, #0
 800a64c:	d092      	beq.n	800a574 <HAL_ADC_ConfigChannel+0x33c>
 800a64e:	e7d6      	b.n	800a5fe <HAL_ADC_ConfigChannel+0x3c6>
 800a650:	f105 0e0c 	add.w	lr, r5, #12
  MODIFY_REG(*preg,
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a65a:	603a      	str	r2, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a65c:	68ea      	ldr	r2, [r5, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a65e:	680a      	ldr	r2, [r1, #0]
 800a660:	68e8      	ldr	r0, [r5, #12]
 800a662:	f3c2 0512 	ubfx	r5, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a666:	4676      	mov	r6, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a668:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a66c:	2d00      	cmp	r5, #0
 800a66e:	d08b      	beq.n	800a588 <HAL_ADC_ConfigChannel+0x350>
 800a670:	e7d5      	b.n	800a61e <HAL_ADC_ConfigChannel+0x3e6>
  MODIFY_REG(*preg,
 800a672:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800a674:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a678:	6622      	str	r2, [r4, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a67a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a67c:	680a      	ldr	r2, [r1, #0]
 800a67e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800a680:	f3c2 0612 	ubfx	r6, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a684:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a688:	2e00      	cmp	r6, #0
 800a68a:	d1aa      	bne.n	800a5e2 <HAL_ADC_ConfigChannel+0x3aa>
 800a68c:	f3c2 6684 	ubfx	r6, r2, #26, #5
 800a690:	e768      	b.n	800a564 <HAL_ADC_ConfigChannel+0x32c>
 800a692:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800a696:	e6d9      	b.n	800a44c <HAL_ADC_ConfigChannel+0x214>
 800a698:	2502      	movs	r5, #2
 800a69a:	e742      	b.n	800a522 <HAL_ADC_ConfigChannel+0x2ea>
 800a69c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800a6a0:	e732      	b.n	800a508 <HAL_ADC_ConfigChannel+0x2d0>
 800a6a2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800a6a6:	e6b1      	b.n	800a40c <HAL_ADC_ConfigChannel+0x1d4>
 800a6a8:	4a04      	ldr	r2, [pc, #16]	@ (800a6bc <HAL_ADC_ConfigChannel+0x484>)
 800a6aa:	e6cf      	b.n	800a44c <HAL_ADC_ConfigChannel+0x214>
 800a6ac:	2502      	movs	r5, #2
 800a6ae:	e6ba      	b.n	800a426 <HAL_ADC_ConfigChannel+0x1ee>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800a6b0:	2006      	movs	r0, #6
 800a6b2:	6048      	str	r0, [r1, #4]
          break;
 800a6b4:	f46f 66f8 	mvn.w	r6, #1984	@ 0x7c0
 800a6b8:	e5dd      	b.n	800a276 <HAL_ADC_ConfigChannel+0x3e>
 800a6ba:	bf00      	nop
 800a6bc:	fe500000 	.word	0xfe500000

0800a6c0 <ADC_Enable>:
{
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800a6c4:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a6c6:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 800a6c8:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a6ca:	689a      	ldr	r2, [r3, #8]
 800a6cc:	07d2      	lsls	r2, r2, #31
 800a6ce:	d42c      	bmi.n	800a72a <ADC_Enable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800a6d0:	6899      	ldr	r1, [r3, #8]
 800a6d2:	4a28      	ldr	r2, [pc, #160]	@ (800a774 <ADC_Enable+0xb4>)
 800a6d4:	4211      	tst	r1, r2
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	d12a      	bne.n	800a730 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 800a6da:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a6dc:	4926      	ldr	r1, [pc, #152]	@ (800a778 <ADC_Enable+0xb8>)
  MODIFY_REG(ADCx->CR,
 800a6de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a6e2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800a6e6:	f042 0201 	orr.w	r2, r2, #1
 800a6ea:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a6ec:	688b      	ldr	r3, [r1, #8]
    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a6ee:	021b      	lsls	r3, r3, #8
 800a6f0:	d429      	bmi.n	800a746 <ADC_Enable+0x86>
    tickstart = HAL_GetTick();
 800a6f2:	f7ff fc4f 	bl	8009f94 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 800a6fc:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a6fe:	d414      	bmi.n	800a72a <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 800a700:	4e1e      	ldr	r6, [pc, #120]	@ (800a77c <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a702:	689a      	ldr	r2, [r3, #8]
 800a704:	07d0      	lsls	r0, r2, #31
 800a706:	d404      	bmi.n	800a712 <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 800a708:	689a      	ldr	r2, [r3, #8]
 800a70a:	4032      	ands	r2, r6
 800a70c:	f042 0201 	orr.w	r2, r2, #1
 800a710:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a712:	f7ff fc3f 	bl	8009f94 <HAL_GetTick>
 800a716:	1b43      	subs	r3, r0, r5
 800a718:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a71a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a71c:	d902      	bls.n	800a724 <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	07d1      	lsls	r1, r2, #31
 800a722:	d505      	bpl.n	800a730 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	07d2      	lsls	r2, r2, #31
 800a728:	d5eb      	bpl.n	800a702 <ADC_Enable+0x42>
  return HAL_OK;
 800a72a:	2000      	movs	r0, #0
}
 800a72c:	b002      	add	sp, #8
 800a72e:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a730:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a732:	f043 0310 	orr.w	r3, r3, #16
 800a736:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a738:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 800a73a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a73c:	f043 0301 	orr.w	r3, r3, #1
 800a740:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 800a742:	b002      	add	sp, #8
 800a744:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a746:	4b0e      	ldr	r3, [pc, #56]	@ (800a780 <ADC_Enable+0xc0>)
 800a748:	4a0e      	ldr	r2, [pc, #56]	@ (800a784 <ADC_Enable+0xc4>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	099b      	lsrs	r3, r3, #6
 800a74e:	fba2 2303 	umull	r2, r3, r2, r3
 800a752:	099b      	lsrs	r3, r3, #6
 800a754:	3301      	adds	r3, #1
 800a756:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800a75e:	9b01      	ldr	r3, [sp, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d0c6      	beq.n	800a6f2 <ADC_Enable+0x32>
        wait_loop_index--;
 800a764:	9b01      	ldr	r3, [sp, #4]
 800a766:	3b01      	subs	r3, #1
 800a768:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800a76a:	9b01      	ldr	r3, [sp, #4]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1f9      	bne.n	800a764 <ADC_Enable+0xa4>
 800a770:	e7bf      	b.n	800a6f2 <ADC_Enable+0x32>
 800a772:	bf00      	nop
 800a774:	8000003f 	.word	0x8000003f
 800a778:	50040300 	.word	0x50040300
 800a77c:	7fffffc0 	.word	0x7fffffc0
 800a780:	20000004 	.word	0x20000004
 800a784:	053e2d63 	.word	0x053e2d63

0800a788 <HAL_ADC_Start_DMA>:
{
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a78a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a78c:	689d      	ldr	r5, [r3, #8]
 800a78e:	f015 0504 	ands.w	r5, r5, #4
 800a792:	d141      	bne.n	800a818 <HAL_ADC_Start_DMA+0x90>
    __HAL_LOCK(hadc);
 800a794:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800a798:	2b01      	cmp	r3, #1
 800a79a:	4604      	mov	r4, r0
 800a79c:	d03c      	beq.n	800a818 <HAL_ADC_Start_DMA+0x90>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
      tmp_hal_status = ADC_Enable(hadc);
 800a7a4:	460f      	mov	r7, r1
 800a7a6:	4616      	mov	r6, r2
 800a7a8:	f7ff ff8a 	bl	800a6c0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	d135      	bne.n	800a81c <HAL_ADC_Start_DMA+0x94>
        ADC_STATE_CLR_SET(hadc->State,
 800a7b0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a7b2:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a7b4:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 800a7b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a7ba:	f023 0301 	bic.w	r3, r3, #1
 800a7be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7c2:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a7c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a7c6:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a7ca:	bf1c      	itt	ne
 800a7cc:	6da3      	ldrne	r3, [r4, #88]	@ 0x58
 800a7ce:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800a7d2:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a7d4:	4b13      	ldr	r3, [pc, #76]	@ (800a824 <HAL_ADC_Start_DMA+0x9c>)
 800a7d6:	62c3      	str	r3, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a7d8:	4b13      	ldr	r3, [pc, #76]	@ (800a828 <HAL_ADC_Start_DMA+0xa0>)
 800a7da:	6303      	str	r3, [r0, #48]	@ 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a7dc:	251c      	movs	r5, #28
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a7de:	4b13      	ldr	r3, [pc, #76]	@ (800a82c <HAL_ADC_Start_DMA+0xa4>)
 800a7e0:	6343      	str	r3, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a7e2:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 800a7e4:	2500      	movs	r5, #0
 800a7e6:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a7ea:	684d      	ldr	r5, [r1, #4]
 800a7ec:	f045 0510 	orr.w	r5, r5, #16
 800a7f0:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a7f2:	68cd      	ldr	r5, [r1, #12]
 800a7f4:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a7f8:	4633      	mov	r3, r6
 800a7fa:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a7fc:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a7fe:	3140      	adds	r1, #64	@ 0x40
 800a800:	f000 fa66 	bl	800acd0 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a804:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800a806:	6893      	ldr	r3, [r2, #8]
 800a808:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a80c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a810:	f043 0304 	orr.w	r3, r3, #4
 800a814:	6093      	str	r3, [r2, #8]
}
 800a816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 800a818:	2002      	movs	r0, #2
}
 800a81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 800a81c:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
}
 800a820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a822:	bf00      	nop
 800a824:	0800a1b1 	.word	0x0800a1b1
 800a828:	0800a1a1 	.word	0x0800a1a1
 800a82c:	0800a21d 	.word	0x0800a21d

0800a830 <ADC_Disable>:
{
 800a830:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a832:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a834:	689a      	ldr	r2, [r3, #8]
 800a836:	0795      	lsls	r5, r2, #30
 800a838:	d502      	bpl.n	800a840 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a83a:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 800a83c:	2000      	movs	r0, #0
}
 800a83e:	bd38      	pop	{r3, r4, r5, pc}
 800a840:	689a      	ldr	r2, [r3, #8]
 800a842:	07d4      	lsls	r4, r2, #31
 800a844:	d5fa      	bpl.n	800a83c <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a846:	689a      	ldr	r2, [r3, #8]
 800a848:	f002 020d 	and.w	r2, r2, #13
 800a84c:	2a01      	cmp	r2, #1
 800a84e:	4604      	mov	r4, r0
 800a850:	d009      	beq.n	800a866 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a852:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a854:	f043 0310 	orr.w	r3, r3, #16
 800a858:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a85a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a85c:	f043 0301 	orr.w	r3, r3, #1
 800a860:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 800a862:	2001      	movs	r0, #1
}
 800a864:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800a866:	689a      	ldr	r2, [r3, #8]
 800a868:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a86c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a870:	2103      	movs	r1, #3
 800a872:	f042 0202 	orr.w	r2, r2, #2
 800a876:	609a      	str	r2, [r3, #8]
 800a878:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800a87a:	f7ff fb8b 	bl	8009f94 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 800a884:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a886:	d403      	bmi.n	800a890 <ADC_Disable+0x60>
 800a888:	e7d8      	b.n	800a83c <ADC_Disable+0xc>
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	07db      	lsls	r3, r3, #31
 800a88e:	d5d5      	bpl.n	800a83c <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a890:	f7ff fb80 	bl	8009f94 <HAL_GetTick>
 800a894:	1b40      	subs	r0, r0, r5
 800a896:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a898:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a89a:	d9f6      	bls.n	800a88a <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a89c:	689a      	ldr	r2, [r3, #8]
 800a89e:	07d2      	lsls	r2, r2, #31
 800a8a0:	d5f3      	bpl.n	800a88a <ADC_Disable+0x5a>
 800a8a2:	e7d6      	b.n	800a852 <ADC_Disable+0x22>

0800a8a4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800a8a4:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a8a6:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 800a8aa:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800a8ac:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800a8ae:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 800a8b0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800a8b2:	d03f      	beq.n	800a934 <HAL_ADCEx_Calibration_Start+0x90>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	460d      	mov	r5, r1
 800a8be:	f7ff ffb7 	bl	800a830 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a8c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  if (tmp_hal_status == HAL_OK)
 800a8c4:	b9e0      	cbnz	r0, 800a900 <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 800a8c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a8ca:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800a8ce:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800a8d0:	f043 0302 	orr.w	r3, r3, #2
 800a8d4:	6563      	str	r3, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 800a8d6:	6893      	ldr	r3, [r2, #8]
 800a8d8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800a8dc:	f005 4180 	and.w	r1, r5, #1073741824	@ 0x40000000
 800a8e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a8e4:	430b      	orrs	r3, r1
 800a8e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a8ea:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a8ec:	6893      	ldr	r3, [r2, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	db0e      	blt.n	800a910 <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a8f2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a8f4:	f023 0303 	bic.w	r3, r3, #3
 800a8f8:	f043 0301 	orr.w	r3, r3, #1
 800a8fc:	6563      	str	r3, [r4, #84]	@ 0x54
 800a8fe:	e002      	b.n	800a906 <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a900:	f043 0310 	orr.w	r3, r3, #16
 800a904:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a906:	2300      	movs	r3, #0
 800a908:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800a90c:	b003      	add	sp, #12
 800a90e:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 800a910:	9b01      	ldr	r3, [sp, #4]
 800a912:	3301      	adds	r3, #1
 800a914:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800a916:	9b01      	ldr	r3, [sp, #4]
 800a918:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800a91c:	d3e6      	bcc.n	800a8ec <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 800a91e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a920:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 800a924:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 800a926:	f043 0310 	orr.w	r3, r3, #16
 800a92a:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 800a92c:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        return HAL_ERROR;
 800a930:	2001      	movs	r0, #1
 800a932:	e7eb      	b.n	800a90c <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 800a934:	2002      	movs	r0, #2
}
 800a936:	b003      	add	sp, #12
 800a938:	bd30      	pop	{r4, r5, pc}
 800a93a:	bf00      	nop

0800a93c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a93c:	4907      	ldr	r1, [pc, #28]	@ (800a95c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800a93e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a940:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a942:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a946:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a94a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a94c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a94e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800a956:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	e000ed00 	.word	0xe000ed00

0800a960 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a960:	4b1b      	ldr	r3, [pc, #108]	@ (800a9d0 <HAL_NVIC_SetPriority+0x70>)
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a968:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a96a:	f1c3 0e07 	rsb	lr, r3, #7
 800a96e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a972:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a976:	bf28      	it	cs
 800a978:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a97c:	f1bc 0f06 	cmp.w	ip, #6
 800a980:	d91c      	bls.n	800a9bc <HAL_NVIC_SetPriority+0x5c>
 800a982:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a986:	f04f 33ff 	mov.w	r3, #4294967295
 800a98a:	fa03 f30c 	lsl.w	r3, r3, ip
 800a98e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a992:	f04f 33ff 	mov.w	r3, #4294967295
 800a996:	fa03 f30e 	lsl.w	r3, r3, lr
 800a99a:	ea21 0303 	bic.w	r3, r1, r3
 800a99e:	fa03 f30c 	lsl.w	r3, r3, ip
 800a9a2:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9a4:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800a9a6:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9a8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800a9aa:	db0a      	blt.n	800a9c2 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9ac:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800a9b0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800a9b4:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a9b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9bc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a9be:	4694      	mov	ip, r2
 800a9c0:	e7e7      	b.n	800a992 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9c2:	4a04      	ldr	r2, [pc, #16]	@ (800a9d4 <HAL_NVIC_SetPriority+0x74>)
 800a9c4:	f000 000f 	and.w	r0, r0, #15
 800a9c8:	4402      	add	r2, r0
 800a9ca:	7613      	strb	r3, [r2, #24]
 800a9cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9d0:	e000ed00 	.word	0xe000ed00
 800a9d4:	e000ecfc 	.word	0xe000ecfc

0800a9d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	db07      	blt.n	800a9ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a9dc:	4a04      	ldr	r2, [pc, #16]	@ (800a9f0 <HAL_NVIC_EnableIRQ+0x18>)
 800a9de:	0941      	lsrs	r1, r0, #5
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	f000 001f 	and.w	r0, r0, #31
 800a9e6:	4083      	lsls	r3, r0
 800a9e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	e000e100 	.word	0xe000e100

0800a9f4 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800a9f4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a9f8:	4905      	ldr	r1, [pc, #20]	@ (800aa10 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a9fa:	4b06      	ldr	r3, [pc, #24]	@ (800aa14 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a9fc:	68ca      	ldr	r2, [r1, #12]
 800a9fe:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800aa02:	4313      	orrs	r3, r2
 800aa04:	60cb      	str	r3, [r1, #12]
 800aa06:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800aa0a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800aa0c:	e7fd      	b.n	800aa0a <HAL_NVIC_SystemReset+0x16>
 800aa0e:	bf00      	nop
 800aa10:	e000ed00 	.word	0xe000ed00
 800aa14:	05fa0004 	.word	0x05fa0004

0800aa18 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800aa18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800aa1c:	0897      	lsrs	r7, r2, #2
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
  {
    if ((BufferLength % 4U) == 1U)
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800aa1e:	6805      	ldr	r5, [r0, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800aa20:	d015      	beq.n	800aa4e <CRC_Handle_8+0x36>
 800aa22:	468c      	mov	ip, r1
 800aa24:	eb01 0687 	add.w	r6, r1, r7, lsl #2
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800aa28:	f89c 3001 	ldrb.w	r3, [ip, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800aa2c:	f89c 8000 	ldrb.w	r8, [ip]
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800aa30:	f89c 4003 	ldrb.w	r4, [ip, #3]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800aa34:	f89c e002 	ldrb.w	lr, [ip, #2]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800aa38:	041b      	lsls	r3, r3, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800aa3a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 800aa3e:	4323      	orrs	r3, r4
  for (i = 0U; i < (BufferLength / 4U); i++)
 800aa40:	f10c 0c04 	add.w	ip, ip, #4
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800aa44:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  for (i = 0U; i < (BufferLength / 4U); i++)
 800aa48:	45b4      	cmp	ip, r6
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800aa4a:	602b      	str	r3, [r5, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800aa4c:	d1ec      	bne.n	800aa28 <CRC_Handle_8+0x10>
  if ((BufferLength % 4U) != 0U)
 800aa4e:	f012 0203 	ands.w	r2, r2, #3
 800aa52:	d00c      	beq.n	800aa6e <CRC_Handle_8+0x56>
    if ((BufferLength % 4U) == 1U)
 800aa54:	2a01      	cmp	r2, #1
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800aa56:	f811 4027 	ldrb.w	r4, [r1, r7, lsl #2]
 800aa5a:	ea4f 0787 	mov.w	r7, r7, lsl #2
    if ((BufferLength % 4U) == 1U)
 800aa5e:	d009      	beq.n	800aa74 <CRC_Handle_8+0x5c>
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
    }
    if ((BufferLength % 4U) == 3U)
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800aa60:	4439      	add	r1, r7
    if ((BufferLength % 4U) == 2U)
 800aa62:	2a02      	cmp	r2, #2
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800aa64:	784b      	ldrb	r3, [r1, #1]
 800aa66:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
      *pReg = data;
 800aa6a:	802b      	strh	r3, [r5, #0]
    if ((BufferLength % 4U) == 2U)
 800aa6c:	d107      	bne.n	800aa7e <CRC_Handle_8+0x66>
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800aa6e:	6828      	ldr	r0, [r5, #0]
}
 800aa70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800aa74:	702c      	strb	r4, [r5, #0]
  return hcrc->Instance->DR;
 800aa76:	6805      	ldr	r5, [r0, #0]
 800aa78:	6828      	ldr	r0, [r5, #0]
}
 800aa7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800aa7e:	788b      	ldrb	r3, [r1, #2]
 800aa80:	702b      	strb	r3, [r5, #0]
  return hcrc->Instance->DR;
 800aa82:	6805      	ldr	r5, [r0, #0]
 800aa84:	6828      	ldr	r0, [r5, #0]
}
 800aa86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa8a:	bf00      	nop

0800aa8c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800aa8c:	b530      	push	{r4, r5, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800aa8e:	ea5f 0e52 	movs.w	lr, r2, lsr #1
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
  }
  if ((BufferLength % 2U) != 0U)
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800aa92:	6804      	ldr	r4, [r0, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800aa94:	d00b      	beq.n	800aaae <CRC_Handle_16+0x22>
 800aa96:	2300      	movs	r3, #0
 800aa98:	1c8d      	adds	r5, r1, #2
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800aa9a:	f831 c023 	ldrh.w	ip, [r1, r3, lsl #2]
 800aa9e:	f835 0023 	ldrh.w	r0, [r5, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800aaa2:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800aaa4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
  for (i = 0U; i < (BufferLength / 2U); i++)
 800aaa8:	4573      	cmp	r3, lr
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800aaaa:	6020      	str	r0, [r4, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800aaac:	d1f5      	bne.n	800aa9a <CRC_Handle_16+0xe>
  if ((BufferLength % 2U) != 0U)
 800aaae:	07d3      	lsls	r3, r2, #31
    *pReg = pBuffer[2U * i];
 800aab0:	bf44      	itt	mi
 800aab2:	f831 302e 	ldrhmi.w	r3, [r1, lr, lsl #2]
 800aab6:	8023      	strhmi	r3, [r4, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800aab8:	6820      	ldr	r0, [r4, #0]
}
 800aaba:	bd30      	pop	{r4, r5, pc}

0800aabc <HAL_CRC_Init>:
  if (hcrc == NULL)
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d036      	beq.n	800ab2e <HAL_CRC_Init+0x72>
{
 800aac0:	b510      	push	{r4, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800aac2:	7f43      	ldrb	r3, [r0, #29]
 800aac4:	4604      	mov	r4, r0
 800aac6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800aaca:	b363      	cbz	r3, 800ab26 <HAL_CRC_Init+0x6a>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800aacc:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800aace:	2202      	movs	r2, #2
 800aad0:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800aad2:	b9f3      	cbnz	r3, 800ab12 <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	4a17      	ldr	r2, [pc, #92]	@ (800ab34 <HAL_CRC_Init+0x78>)
 800aad8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800aada:	689a      	ldr	r2, [r3, #8]
 800aadc:	f022 0218 	bic.w	r2, r2, #24
 800aae0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800aae2:	7962      	ldrb	r2, [r4, #5]
 800aae4:	b18a      	cbz	r2, 800ab0a <HAL_CRC_Init+0x4e>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800aae6:	6922      	ldr	r2, [r4, #16]
 800aae8:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800aaea:	689a      	ldr	r2, [r3, #8]
 800aaec:	6961      	ldr	r1, [r4, #20]
 800aaee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800aaf6:	689a      	ldr	r2, [r3, #8]
 800aaf8:	69a1      	ldr	r1, [r4, #24]
 800aafa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aafe:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
 800ab00:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ab02:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800ab04:	7761      	strb	r1, [r4, #29]
  return HAL_OK;
 800ab06:	2000      	movs	r0, #0
}
 800ab08:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ab0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0e:	611a      	str	r2, [r3, #16]
 800ab10:	e7eb      	b.n	800aaea <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ab12:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800ab16:	4620      	mov	r0, r4
 800ab18:	f000 f83a 	bl	800ab90 <HAL_CRCEx_Polynomial_Set>
 800ab1c:	b908      	cbnz	r0, 800ab22 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	e7df      	b.n	800aae2 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 800ab22:	2001      	movs	r0, #1
}
 800ab24:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800ab26:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800ab28:	f7fc f99a 	bl	8006e60 <HAL_CRC_MspInit>
 800ab2c:	e7ce      	b.n	800aacc <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 800ab2e:	2001      	movs	r0, #1
}
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	04c11db7 	.word	0x04c11db7

0800ab38 <HAL_CRC_Calculate>:
{
 800ab38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_CRC_DR_RESET(hcrc);
 800ab3a:	6806      	ldr	r6, [r0, #0]
  switch (hcrc->InputDataFormat)
 800ab3c:	6a07      	ldr	r7, [r0, #32]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ab3e:	2502      	movs	r5, #2
 800ab40:	7745      	strb	r5, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800ab42:	68b5      	ldr	r5, [r6, #8]
  switch (hcrc->InputDataFormat)
 800ab44:	2f02      	cmp	r7, #2
  __HAL_CRC_DR_RESET(hcrc);
 800ab46:	f045 0501 	orr.w	r5, r5, #1
{
 800ab4a:	4604      	mov	r4, r0
  __HAL_CRC_DR_RESET(hcrc);
 800ab4c:	60b5      	str	r5, [r6, #8]
  switch (hcrc->InputDataFormat)
 800ab4e:	d007      	beq.n	800ab60 <HAL_CRC_Calculate+0x28>
 800ab50:	2f03      	cmp	r7, #3
 800ab52:	d00f      	beq.n	800ab74 <HAL_CRC_Calculate+0x3c>
 800ab54:	2f01      	cmp	r7, #1
 800ab56:	d008      	beq.n	800ab6a <HAL_CRC_Calculate+0x32>
  hcrc->State = HAL_CRC_STATE_READY;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	7763      	strb	r3, [r4, #29]
  switch (hcrc->InputDataFormat)
 800ab5c:	2000      	movs	r0, #0
}
 800ab5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800ab60:	f7ff ff94 	bl	800aa8c <CRC_Handle_16>
  hcrc->State = HAL_CRC_STATE_READY;
 800ab64:	2301      	movs	r3, #1
 800ab66:	7763      	strb	r3, [r4, #29]
}
 800ab68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800ab6a:	f7ff ff55 	bl	800aa18 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	7763      	strb	r3, [r4, #29]
}
 800ab72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (index = 0U; index < BufferLength; index++)
 800ab74:	b13a      	cbz	r2, 800ab86 <HAL_CRC_Calculate+0x4e>
 800ab76:	3904      	subs	r1, #4
 800ab78:	eb01 0282 	add.w	r2, r1, r2, lsl #2
        hcrc->Instance->DR = pBuffer[index];
 800ab7c:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800ab80:	6033      	str	r3, [r6, #0]
      for (index = 0U; index < BufferLength; index++)
 800ab82:	4291      	cmp	r1, r2
 800ab84:	d1fa      	bne.n	800ab7c <HAL_CRC_Calculate+0x44>
  hcrc->State = HAL_CRC_STATE_READY;
 800ab86:	2301      	movs	r3, #1
      temp = hcrc->Instance->DR;
 800ab88:	6830      	ldr	r0, [r6, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 800ab8a:	7763      	strb	r3, [r4, #29]
}
 800ab8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab8e:	bf00      	nop

0800ab90 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800ab90:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800ab92:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800ab94:	3b01      	subs	r3, #1
 800ab96:	1c5c      	adds	r4, r3, #1
 800ab98:	fa21 fc03 	lsr.w	ip, r1, r3
 800ab9c:	d013      	beq.n	800abc6 <HAL_CRCEx_Polynomial_Set+0x36>
 800ab9e:	f01c 0f01 	tst.w	ip, #1
 800aba2:	d0f7      	beq.n	800ab94 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800aba4:	2a18      	cmp	r2, #24
 800aba6:	d80f      	bhi.n	800abc8 <HAL_CRCEx_Polynomial_Set+0x38>
 800aba8:	e8df f002 	tbb	[pc, r2]
 800abac:	0e0e0e14 	.word	0x0e0e0e14
 800abb0:	0e0e0e0e 	.word	0x0e0e0e0e
 800abb4:	0e0e0e1f 	.word	0x0e0e0e1f
 800abb8:	0e0e0e0e 	.word	0x0e0e0e0e
 800abbc:	0e0e0e22 	.word	0x0e0e0e22
 800abc0:	0e0e0e0e 	.word	0x0e0e0e0e
 800abc4:	12          	.byte	0x12
 800abc5:	00          	.byte	0x00
 800abc6:	b12a      	cbz	r2, 800abd4 <HAL_CRCEx_Polynomial_Set+0x44>
 800abc8:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 800abca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abce:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 800abd0:	2b06      	cmp	r3, #6
 800abd2:	d8f9      	bhi.n	800abc8 <HAL_CRCEx_Polynomial_Set+0x38>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800abd4:	6804      	ldr	r4, [r0, #0]
 800abd6:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800abd8:	68a3      	ldr	r3, [r4, #8]
 800abda:	f023 0318 	bic.w	r3, r3, #24
 800abde:	4313      	orrs	r3, r2
 800abe0:	2000      	movs	r0, #0
 800abe2:	60a3      	str	r3, [r4, #8]
}
 800abe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abe8:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_16B)
 800abea:	2b0f      	cmp	r3, #15
 800abec:	d9f2      	bls.n	800abd4 <HAL_CRCEx_Polynomial_Set+0x44>
 800abee:	e7eb      	b.n	800abc8 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 800abf0:	2b07      	cmp	r3, #7
 800abf2:	d9ef      	bls.n	800abd4 <HAL_CRCEx_Polynomial_Set+0x44>
 800abf4:	e7e8      	b.n	800abc8 <HAL_CRCEx_Polynomial_Set+0x38>
 800abf6:	bf00      	nop

0800abf8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d050      	beq.n	800ac9e <HAL_DMA_Init+0xa6>
{
 800abfc:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800abfe:	4a2e      	ldr	r2, [pc, #184]	@ (800acb8 <HAL_DMA_Init+0xc0>)
 800ac00:	6804      	ldr	r4, [r0, #0]
 800ac02:	4294      	cmp	r4, r2
 800ac04:	4603      	mov	r3, r0
 800ac06:	d941      	bls.n	800ac8c <HAL_DMA_Init+0x94>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800ac08:	492c      	ldr	r1, [pc, #176]	@ (800acbc <HAL_DMA_Init+0xc4>)
 800ac0a:	4a2d      	ldr	r2, [pc, #180]	@ (800acc0 <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA2;
 800ac0c:	4d2d      	ldr	r5, [pc, #180]	@ (800acc4 <HAL_DMA_Init+0xcc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800ac0e:	4421      	add	r1, r4
 800ac10:	fba2 2101 	umull	r2, r1, r2, r1
 800ac14:	0909      	lsrs	r1, r1, #4
 800ac16:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ac18:	2202      	movs	r2, #2
 800ac1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ac1e:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ac22:	691f      	ldr	r7, [r3, #16]
  tmp = hdma->Instance->CCR;
 800ac24:	6820      	ldr	r0, [r4, #0]
 800ac26:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp |=  hdma->Init.Direction        |
 800ac28:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ac2a:	433a      	orrs	r2, r7
 800ac2c:	695f      	ldr	r7, [r3, #20]
 800ac2e:	6459      	str	r1, [r3, #68]	@ 0x44
 800ac30:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ac32:	699f      	ldr	r7, [r3, #24]
 800ac34:	433a      	orrs	r2, r7
 800ac36:	69df      	ldr	r7, [r3, #28]
 800ac38:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800ac3a:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ac3c:	f420 40ff 	bic.w	r0, r0, #32640	@ 0x7f80
 800ac40:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800ac44:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 800ac46:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800ac48:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 800ac4c:	6022      	str	r2, [r4, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800ac4e:	d014      	beq.n	800ac7a <HAL_DMA_Init+0x82>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ac50:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800ac52:	f001 011c 	and.w	r1, r1, #28
 800ac56:	220f      	movs	r2, #15
 800ac58:	408a      	lsls	r2, r1
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ac5a:	4088      	lsls	r0, r1
    if (DMA1 == hdma->DmaBaseAddress)
 800ac5c:	491a      	ldr	r1, [pc, #104]	@ (800acc8 <HAL_DMA_Init+0xd0>)
 800ac5e:	428d      	cmp	r5, r1
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800ac60:	ea6f 0202 	mvn.w	r2, r2
    if (DMA1 == hdma->DmaBaseAddress)
 800ac64:	d01d      	beq.n	800aca2 <HAL_DMA_Init+0xaa>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800ac66:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	@ 0x4a8
 800ac6a:	4022      	ands	r2, r4
 800ac6c:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ac70:	f8d1 24a8 	ldr.w	r2, [r1, #1192]	@ 0x4a8
 800ac74:	4302      	orrs	r2, r0
 800ac76:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ac7a:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800ac7c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ac7e:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ac80:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 800ac84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
}
 800ac88:	bcf0      	pop	{r4, r5, r6, r7}
 800ac8a:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ac8c:	490f      	ldr	r1, [pc, #60]	@ (800accc <HAL_DMA_Init+0xd4>)
 800ac8e:	4a0c      	ldr	r2, [pc, #48]	@ (800acc0 <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA1;
 800ac90:	4d0d      	ldr	r5, [pc, #52]	@ (800acc8 <HAL_DMA_Init+0xd0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ac92:	4421      	add	r1, r4
 800ac94:	fba2 2101 	umull	r2, r1, r2, r1
 800ac98:	0909      	lsrs	r1, r1, #4
 800ac9a:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 800ac9c:	e7bc      	b.n	800ac18 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 800ac9e:	2001      	movs	r0, #1
}
 800aca0:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800aca2:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800aca6:	400a      	ands	r2, r1
 800aca8:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800acac:	f8d5 20a8 	ldr.w	r2, [r5, #168]	@ 0xa8
 800acb0:	4302      	orrs	r2, r0
 800acb2:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
 800acb6:	e7e0      	b.n	800ac7a <HAL_DMA_Init+0x82>
 800acb8:	40020407 	.word	0x40020407
 800acbc:	bffdfbf8 	.word	0xbffdfbf8
 800acc0:	cccccccd 	.word	0xcccccccd
 800acc4:	40020400 	.word	0x40020400
 800acc8:	40020000 	.word	0x40020000
 800accc:	bffdfff8 	.word	0xbffdfff8

0800acd0 <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800acd0:	f890 c024 	ldrb.w	ip, [r0, #36]	@ 0x24
 800acd4:	f1bc 0f01 	cmp.w	ip, #1
 800acd8:	d03c      	beq.n	800ad54 <HAL_DMA_Start_IT+0x84>
{
 800acda:	b570      	push	{r4, r5, r6, lr}

  if(HAL_DMA_STATE_READY == hdma->State)
 800acdc:	f890 c025 	ldrb.w	ip, [r0, #37]	@ 0x25
  __HAL_LOCK(hdma);
 800ace0:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800ace2:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 800ace4:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 800ace8:	fa5f fe8c 	uxtb.w	lr, ip
 800acec:	d004      	beq.n	800acf8 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800acee:	2300      	movs	r3, #0
 800acf0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 800acf4:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800acf8:	2502      	movs	r5, #2
 800acfa:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    __HAL_DMA_DISABLE(hdma);
 800acfe:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ad00:	2500      	movs	r5, #0
 800ad02:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 800ad04:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ad06:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 800ad08:	f026 0601 	bic.w	r6, r6, #1
 800ad0c:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ad0e:	f005 051c 	and.w	r5, r5, #28
 800ad12:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 800ad14:	fa0e f505 	lsl.w	r5, lr, r5
 800ad18:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ad1a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad1c:	6883      	ldr	r3, [r0, #8]
 800ad1e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800ad20:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ad22:	bf0b      	itete	eq
 800ad24:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800ad26:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800ad28:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800ad2a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800ad2c:	b14b      	cbz	r3, 800ad42 <HAL_DMA_Start_IT+0x72>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ad2e:	6823      	ldr	r3, [r4, #0]
 800ad30:	f043 030e 	orr.w	r3, r3, #14
 800ad34:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800ad36:	6823      	ldr	r3, [r4, #0]
 800ad38:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800ad3c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800ad3e:	6023      	str	r3, [r4, #0]
}
 800ad40:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	f023 0304 	bic.w	r3, r3, #4
 800ad48:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	f043 030a 	orr.w	r3, r3, #10
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	e7f0      	b.n	800ad36 <HAL_DMA_Start_IT+0x66>
  __HAL_LOCK(hdma);
 800ad54:	2002      	movs	r0, #2
}
 800ad56:	4770      	bx	lr

0800ad58 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ad58:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800ad5c:	2a02      	cmp	r2, #2
{
 800ad5e:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ad60:	d006      	beq.n	800ad70 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ad62:	2204      	movs	r2, #4
 800ad64:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800ad66:	2200      	movs	r2, #0
    return HAL_ERROR;
 800ad68:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800ad6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800ad6e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ad70:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ad72:	6c42      	ldr	r2, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ad74:	6808      	ldr	r0, [r1, #0]
 800ad76:	f020 000e 	bic.w	r0, r0, #14
 800ad7a:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800ad7c:	6808      	ldr	r0, [r1, #0]
 800ad7e:	f020 0001 	bic.w	r0, r0, #1
 800ad82:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ad84:	f04f 0c01 	mov.w	ip, #1
 800ad88:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800ad8a:	f002 021c 	and.w	r2, r2, #28
 800ad8e:	fa0c f202 	lsl.w	r2, ip, r2
 800ad92:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 800ad94:	2200      	movs	r2, #0
    return status;
 800ad96:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800ad98:	f883 c025 	strb.w	ip, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800ad9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop

0800ada4 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ada4:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800ada8:	2a02      	cmp	r2, #2
 800adaa:	d003      	beq.n	800adb4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800adac:	2204      	movs	r2, #4
 800adae:	63c2      	str	r2, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 800adb0:	2001      	movs	r0, #1
}
 800adb2:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800adb4:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800adb6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
{
 800adb8:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800adba:	680c      	ldr	r4, [r1, #0]
 800adbc:	f024 040e 	bic.w	r4, r4, #14
 800adc0:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800adc2:	680c      	ldr	r4, [r1, #0]
 800adc4:	f024 0401 	bic.w	r4, r4, #1
 800adc8:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800adca:	f002 021c 	and.w	r2, r2, #28
 800adce:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800add0:	2101      	movs	r1, #1
 800add2:	fa01 f202 	lsl.w	r2, r1, r2
 800add6:	6062      	str	r2, [r4, #4]
    if(hdma->XferAbortCallback != NULL)
 800add8:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800adda:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800adde:	2400      	movs	r4, #0
 800ade0:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    if(hdma->XferAbortCallback != NULL)
 800ade4:	b102      	cbz	r2, 800ade8 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 800ade6:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800ade8:	2000      	movs	r0, #0
}
 800adea:	bd10      	pop	{r4, pc}

0800adec <HAL_DMA_IRQHandler>:
{
 800adec:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800adee:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800adf0:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800adf2:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800adf4:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800adf6:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800adf8:	f003 031c 	and.w	r3, r3, #28
 800adfc:	2204      	movs	r2, #4
 800adfe:	409a      	lsls	r2, r3
 800ae00:	420a      	tst	r2, r1
 800ae02:	d00e      	beq.n	800ae22 <HAL_DMA_IRQHandler+0x36>
 800ae04:	f014 0f04 	tst.w	r4, #4
 800ae08:	d00b      	beq.n	800ae22 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ae0a:	682b      	ldr	r3, [r5, #0]
 800ae0c:	069b      	lsls	r3, r3, #26
 800ae0e:	d403      	bmi.n	800ae18 <HAL_DMA_IRQHandler+0x2c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ae10:	682b      	ldr	r3, [r5, #0]
 800ae12:	f023 0304 	bic.w	r3, r3, #4
 800ae16:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800ae18:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800ae1a:	6072      	str	r2, [r6, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 800ae1c:	b1cb      	cbz	r3, 800ae52 <HAL_DMA_IRQHandler+0x66>
}
 800ae1e:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800ae20:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800ae22:	2202      	movs	r2, #2
 800ae24:	409a      	lsls	r2, r3
 800ae26:	420a      	tst	r2, r1
 800ae28:	d015      	beq.n	800ae56 <HAL_DMA_IRQHandler+0x6a>
 800ae2a:	f014 0f02 	tst.w	r4, #2
 800ae2e:	d012      	beq.n	800ae56 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ae30:	682b      	ldr	r3, [r5, #0]
 800ae32:	0699      	lsls	r1, r3, #26
 800ae34:	d406      	bmi.n	800ae44 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ae36:	682b      	ldr	r3, [r5, #0]
 800ae38:	f023 030a 	bic.w	r3, r3, #10
 800ae3c:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if(hdma->XferCpltCallback != NULL)
 800ae44:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800ae46:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 800ae48:	2100      	movs	r1, #0
 800ae4a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if(hdma->XferCpltCallback != NULL)
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1e5      	bne.n	800ae1e <HAL_DMA_IRQHandler+0x32>
}
 800ae52:	bc70      	pop	{r4, r5, r6}
 800ae54:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800ae56:	2208      	movs	r2, #8
 800ae58:	409a      	lsls	r2, r3
 800ae5a:	420a      	tst	r2, r1
 800ae5c:	d0f9      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x66>
 800ae5e:	0722      	lsls	r2, r4, #28
 800ae60:	d5f7      	bpl.n	800ae52 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ae62:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 800ae64:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ae66:	f022 020e 	bic.w	r2, r2, #14
 800ae6a:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 800ae72:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ae74:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ae76:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800ae78:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 800ae7c:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 800ae80:	2900      	cmp	r1, #0
 800ae82:	d0e6      	beq.n	800ae52 <HAL_DMA_IRQHandler+0x66>
}
 800ae84:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800ae86:	4708      	bx	r1

0800ae88 <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800ae88:	4b06      	ldr	r3, [pc, #24]	@ (800aea4 <HAL_FLASH_Unlock+0x1c>)
 800ae8a:	695a      	ldr	r2, [r3, #20]
 800ae8c:	2a00      	cmp	r2, #0
 800ae8e:	db01      	blt.n	800ae94 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800ae90:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 800ae92:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ae94:	4904      	ldr	r1, [pc, #16]	@ (800aea8 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ae96:	4a05      	ldr	r2, [pc, #20]	@ (800aeac <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ae98:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ae9a:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800ae9c:	6958      	ldr	r0, [r3, #20]
 800ae9e:	0fc0      	lsrs	r0, r0, #31
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	40022000 	.word	0x40022000
 800aea8:	45670123 	.word	0x45670123
 800aeac:	cdef89ab 	.word	0xcdef89ab

0800aeb0 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800aeb0:	4a03      	ldr	r2, [pc, #12]	@ (800aec0 <HAL_FLASH_Lock+0x10>)
 800aeb2:	6953      	ldr	r3, [r2, #20]
 800aeb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000

  return HAL_OK;
}
 800aeb8:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800aeba:	6153      	str	r3, [r2, #20]
}
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	40022000 	.word	0x40022000

0800aec4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800aec4:	b570      	push	{r4, r5, r6, lr}
 800aec6:	4605      	mov	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800aec8:	f7ff f864 	bl	8009f94 <HAL_GetTick>
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800aecc:	4c10      	ldr	r4, [pc, #64]	@ (800af10 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 800aece:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800aed0:	e001      	b.n	800aed6 <FLASH_WaitForLastOperation+0x12>
  {
    if(Timeout != HAL_MAX_DELAY)
 800aed2:	1c69      	adds	r1, r5, #1
 800aed4:	d10d      	bne.n	800aef2 <FLASH_WaitForLastOperation+0x2e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800aed6:	6923      	ldr	r3, [r4, #16]
 800aed8:	03da      	lsls	r2, r3, #15
 800aeda:	d4fa      	bmi.n	800aed2 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800aedc:	6923      	ldr	r3, [r4, #16]
 800aede:	4a0d      	ldr	r2, [pc, #52]	@ (800af14 <FLASH_WaitForLastOperation+0x50>)

  if(error != 0u)
 800aee0:	4013      	ands	r3, r2
 800aee2:	d10d      	bne.n	800af00 <FLASH_WaitForLastOperation+0x3c>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800aee4:	6923      	ldr	r3, [r4, #16]
 800aee6:	07db      	lsls	r3, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800aee8:	bf44      	itt	mi
 800aeea:	2301      	movmi	r3, #1
 800aeec:	6123      	strmi	r3, [r4, #16]
    return HAL_ERROR;
 800aeee:	2000      	movs	r0, #0
  }

  /* If there is an error flag set */
  return HAL_OK;
}
 800aef0:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) >= Timeout)
 800aef2:	f7ff f84f 	bl	8009f94 <HAL_GetTick>
 800aef6:	1b80      	subs	r0, r0, r6
 800aef8:	42a8      	cmp	r0, r5
 800aefa:	d3ec      	bcc.n	800aed6 <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 800aefc:	2003      	movs	r0, #3
}
 800aefe:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 800af00:	4905      	ldr	r1, [pc, #20]	@ (800af18 <FLASH_WaitForLastOperation+0x54>)
 800af02:	684a      	ldr	r2, [r1, #4]
 800af04:	431a      	orrs	r2, r3
 800af06:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 800af08:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 800af0a:	6123      	str	r3, [r4, #16]
}
 800af0c:	bd70      	pop	{r4, r5, r6, pc}
 800af0e:	bf00      	nop
 800af10:	40022000 	.word	0x40022000
 800af14:	0002c3fa 	.word	0x0002c3fa
 800af18:	20000018 	.word	0x20000018

0800af1c <HAL_FLASH_Program>:
{
 800af1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800af20:	4e34      	ldr	r6, [pc, #208]	@ (800aff4 <HAL_FLASH_Program+0xd8>)
{
 800af22:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 800af24:	7833      	ldrb	r3, [r6, #0]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d027      	beq.n	800af7a <HAL_FLASH_Program+0x5e>
 800af2a:	2301      	movs	r3, #1
 800af2c:	4607      	mov	r7, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af2e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800af32:	460d      	mov	r5, r1
 800af34:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 800af36:	7033      	strb	r3, [r6, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af38:	f7ff ffc4 	bl	800aec4 <FLASH_WaitForLastOperation>
 800af3c:	4681      	mov	r9, r0
  if(status == HAL_OK)
 800af3e:	b120      	cbz	r0, 800af4a <HAL_FLASH_Program+0x2e>
  __HAL_UNLOCK(&pFlash);
 800af40:	2300      	movs	r3, #0
 800af42:	7033      	strb	r3, [r6, #0]
}
 800af44:	4648      	mov	r0, r9
 800af46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800af4a:	4a2b      	ldr	r2, [pc, #172]	@ (800aff8 <HAL_FLASH_Program+0xdc>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800af4c:	6070      	str	r0, [r6, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800af4e:	6813      	ldr	r3, [r2, #0]
 800af50:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800af54:	bf1f      	itttt	ne
 800af56:	6813      	ldrne	r3, [r2, #0]
 800af58:	f423 6380 	bicne.w	r3, r3, #1024	@ 0x400
 800af5c:	6013      	strne	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800af5e:	2302      	movne	r3, #2
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800af60:	7733      	strb	r3, [r6, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800af62:	b17f      	cbz	r7, 800af84 <HAL_FLASH_Program+0x68>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800af64:	1e7b      	subs	r3, r7, #1
 800af66:	2b01      	cmp	r3, #1
 800af68:	d922      	bls.n	800afb0 <HAL_FLASH_Program+0x94>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af6a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800af6e:	f7ff ffa9 	bl	800aec4 <FLASH_WaitForLastOperation>
 800af72:	4681      	mov	r9, r0
    FLASH_FlushCaches();
 800af74:	f000 f842 	bl	800affc <FLASH_FlushCaches>
 800af78:	e7e2      	b.n	800af40 <HAL_FLASH_Program+0x24>
  __HAL_LOCK(&pFlash);
 800af7a:	f04f 0902 	mov.w	r9, #2
}
 800af7e:	4648      	mov	r0, r9
 800af80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800af84:	4a1c      	ldr	r2, [pc, #112]	@ (800aff8 <HAL_FLASH_Program+0xdc>)
 800af86:	6953      	ldr	r3, [r2, #20]
 800af88:	f043 0301 	orr.w	r3, r3, #1
 800af8c:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800af8e:	602c      	str	r4, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800af90:	f3bf 8f6f 	isb	sy
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af94:	f24c 3050 	movw	r0, #50000	@ 0xc350
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800af98:	f8c5 8004 	str.w	r8, [r5, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af9c:	f7ff ff92 	bl	800aec4 <FLASH_WaitForLastOperation>
 800afa0:	f06f 0101 	mvn.w	r1, #1
 800afa4:	4681      	mov	r9, r0
      CLEAR_BIT(FLASH->CR, prog_bit);
 800afa6:	4a14      	ldr	r2, [pc, #80]	@ (800aff8 <HAL_FLASH_Program+0xdc>)
 800afa8:	6953      	ldr	r3, [r2, #20]
 800afaa:	400b      	ands	r3, r1
 800afac:	6153      	str	r3, [r2, #20]
 800afae:	e7e1      	b.n	800af74 <HAL_FLASH_Program+0x58>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800afb0:	4911      	ldr	r1, [pc, #68]	@ (800aff8 <HAL_FLASH_Program+0xdc>)
 800afb2:	694b      	ldr	r3, [r1, #20]
 800afb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800afb8:	4622      	mov	r2, r4
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800afba:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afbc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800afc0:	b672      	cpsid	i
 800afc2:	1aa9      	subs	r1, r5, r2
 800afc4:	f502 7080 	add.w	r0, r2, #256	@ 0x100
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800afc8:	6813      	ldr	r3, [r2, #0]
 800afca:	5053      	str	r3, [r2, r1]
    dest_addr++;
    src_addr++;
 800afcc:	3204      	adds	r2, #4
    row_index--;
  } while (row_index != 0U);
 800afce:	4290      	cmp	r0, r2
 800afd0:	d1fa      	bne.n	800afc8 <HAL_FLASH_Program+0xac>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afd2:	f384 8810 	msr	PRIMASK, r4
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800afd6:	2f02      	cmp	r7, #2
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800afd8:	f24c 3050 	movw	r0, #50000	@ 0xc350
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800afdc:	d003      	beq.n	800afe6 <HAL_FLASH_Program+0xca>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800afde:	f7ff ff71 	bl	800aec4 <FLASH_WaitForLastOperation>
 800afe2:	4681      	mov	r9, r0
    if (prog_bit != 0U)
 800afe4:	e7c6      	b.n	800af74 <HAL_FLASH_Program+0x58>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800afe6:	f7ff ff6d 	bl	800aec4 <FLASH_WaitForLastOperation>
 800afea:	f46f 2180 	mvn.w	r1, #262144	@ 0x40000
 800afee:	4681      	mov	r9, r0
    if (prog_bit != 0U)
 800aff0:	e7d9      	b.n	800afa6 <HAL_FLASH_Program+0x8a>
 800aff2:	bf00      	nop
 800aff4:	20000018 	.word	0x20000018
 800aff8:	40022000 	.word	0x40022000

0800affc <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800affc:	4915      	ldr	r1, [pc, #84]	@ (800b054 <FLASH_FlushCaches+0x58>)
 800affe:	7f0b      	ldrb	r3, [r1, #28]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800b000:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 800b004:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800b006:	b2db      	uxtb	r3, r3
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800b008:	d110      	bne.n	800b02c <FLASH_FlushCaches+0x30>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800b00a:	4a13      	ldr	r2, [pc, #76]	@ (800b058 <FLASH_FlushCaches+0x5c>)
 800b00c:	6810      	ldr	r0, [r2, #0]
 800b00e:	f420 7000 	bic.w	r0, r0, #512	@ 0x200
 800b012:	6010      	str	r0, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800b014:	6810      	ldr	r0, [r2, #0]
 800b016:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 800b01a:	6010      	str	r0, [r2, #0]
 800b01c:	6810      	ldr	r0, [r2, #0]
 800b01e:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
 800b022:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b024:	6810      	ldr	r0, [r2, #0]
 800b026:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 800b02a:	6010      	str	r0, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800b02c:	3b02      	subs	r3, #2
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d80c      	bhi.n	800b04c <FLASH_FlushCaches+0x50>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b032:	4b09      	ldr	r3, [pc, #36]	@ (800b058 <FLASH_FlushCaches+0x5c>)
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b042:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b04a:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800b04c:	2300      	movs	r3, #0
 800b04e:	770b      	strb	r3, [r1, #28]
}
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	20000018 	.word	0x20000018
 800b058:	40022000 	.word	0x40022000

0800b05c <HAL_FLASHEx_Erase>:
{
 800b05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 800b060:	4f40      	ldr	r7, [pc, #256]	@ (800b164 <HAL_FLASHEx_Erase+0x108>)
 800b062:	783b      	ldrb	r3, [r7, #0]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d054      	beq.n	800b112 <HAL_FLASHEx_Erase+0xb6>
 800b068:	4682      	mov	sl, r0
 800b06a:	2401      	movs	r4, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b06c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b070:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800b072:	703c      	strb	r4, [r7, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b074:	f7ff ff26 	bl	800aec4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800b078:	4606      	mov	r6, r0
 800b07a:	b120      	cbz	r0, 800b086 <HAL_FLASHEx_Erase+0x2a>
  __HAL_UNLOCK(&pFlash);
 800b07c:	2300      	movs	r3, #0
 800b07e:	703b      	strb	r3, [r7, #0]
}
 800b080:	4630      	mov	r0, r6
 800b082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800b086:	4b38      	ldr	r3, [pc, #224]	@ (800b168 <HAL_FLASHEx_Erase+0x10c>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b088:	6078      	str	r0, [r7, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	f412 7f00 	tst.w	r2, #512	@ 0x200
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800b090:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800b092:	d142      	bne.n	800b11a <HAL_FLASHEx_Erase+0xbe>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800b094:	0552      	lsls	r2, r2, #21
 800b096:	d54b      	bpl.n	800b130 <HAL_FLASHEx_Erase+0xd4>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b09e:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	773b      	strb	r3, [r7, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b0a4:	f8da 3000 	ldr.w	r3, [sl]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d043      	beq.n	800b134 <HAL_FLASHEx_Erase+0xd8>
      *PageError = 0xFFFFFFFFU;
 800b0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b0:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800b0b4:	e9da 5302 	ldrd	r5, r3, [sl, #8]
 800b0b8:	442b      	add	r3, r5
 800b0ba:	429d      	cmp	r5, r3
 800b0bc:	d226      	bcs.n	800b10c <HAL_FLASHEx_Erase+0xb0>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800b0be:	4c2a      	ldr	r4, [pc, #168]	@ (800b168 <HAL_FLASHEx_Erase+0x10c>)
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800b0c0:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 800b16c <HAL_FLASHEx_Erase+0x110>
 800b0c4:	e005      	b.n	800b0d2 <HAL_FLASHEx_Erase+0x76>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800b0c6:	e9da 3202 	ldrd	r3, r2, [sl, #8]
 800b0ca:	3501      	adds	r5, #1
 800b0cc:	4413      	add	r3, r2
 800b0ce:	42ab      	cmp	r3, r5
 800b0d0:	d91c      	bls.n	800b10c <HAL_FLASHEx_Erase+0xb0>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800b0d2:	6962      	ldr	r2, [r4, #20]
 800b0d4:	00eb      	lsls	r3, r5, #3
 800b0d6:	f422 727e 	bic.w	r2, r2, #1016	@ 0x3f8
 800b0da:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800b0e2:	6963      	ldr	r3, [r4, #20]
 800b0e4:	f043 0302 	orr.w	r3, r3, #2
 800b0e8:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800b0ea:	6963      	ldr	r3, [r4, #20]
 800b0ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b0f0:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b0f2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b0f6:	f7ff fee5 	bl	800aec4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800b0fa:	6963      	ldr	r3, [r4, #20]
 800b0fc:	ea03 0309 	and.w	r3, r3, r9
 800b100:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 800b102:	2800      	cmp	r0, #0
 800b104:	d0df      	beq.n	800b0c6 <HAL_FLASHEx_Erase+0x6a>
          *PageError = page_index;
 800b106:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b10a:	4606      	mov	r6, r0
    FLASH_FlushCaches();
 800b10c:	f7ff ff76 	bl	800affc <FLASH_FlushCaches>
 800b110:	e7b4      	b.n	800b07c <HAL_FLASHEx_Erase+0x20>
  __HAL_LOCK(&pFlash);
 800b112:	2602      	movs	r6, #2
}
 800b114:	4630      	mov	r0, r6
 800b116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800b11a:	0551      	lsls	r1, r2, #21
 800b11c:	d506      	bpl.n	800b12c <HAL_FLASHEx_Erase+0xd0>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b124:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800b126:	2303      	movs	r3, #3
 800b128:	773b      	strb	r3, [r7, #28]
 800b12a:	e7bb      	b.n	800b0a4 <HAL_FLASHEx_Erase+0x48>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800b12c:	773c      	strb	r4, [r7, #28]
 800b12e:	e7b9      	b.n	800b0a4 <HAL_FLASHEx_Erase+0x48>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800b130:	7738      	strb	r0, [r7, #28]
 800b132:	e7b7      	b.n	800b0a4 <HAL_FLASHEx_Erase+0x48>
    if((Banks & FLASH_BANK_1) != 0U)
 800b134:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b138:	07db      	lsls	r3, r3, #31
 800b13a:	d504      	bpl.n	800b146 <HAL_FLASHEx_Erase+0xea>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800b13c:	4a0a      	ldr	r2, [pc, #40]	@ (800b168 <HAL_FLASHEx_Erase+0x10c>)
 800b13e:	6953      	ldr	r3, [r2, #20]
 800b140:	f043 0304 	orr.w	r3, r3, #4
 800b144:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800b146:	4c08      	ldr	r4, [pc, #32]	@ (800b168 <HAL_FLASHEx_Erase+0x10c>)
 800b148:	6963      	ldr	r3, [r4, #20]
 800b14a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b14e:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b150:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800b154:	f7ff feb6 	bl	800aec4 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800b158:	6963      	ldr	r3, [r4, #20]
 800b15a:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b15e:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800b160:	6163      	str	r3, [r4, #20]
 800b162:	e7d3      	b.n	800b10c <HAL_FLASHEx_Erase+0xb0>
 800b164:	20000018 	.word	0x20000018
 800b168:	40022000 	.word	0x40022000
 800b16c:	fffffc05 	.word	0xfffffc05

0800b170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b174:	680c      	ldr	r4, [r1, #0]
{
 800b176:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b178:	2c00      	cmp	r4, #0
 800b17a:	f000 8084 	beq.w	800b286 <HAL_GPIO_Init+0x116>
  uint32_t position = 0x00u;
 800b17e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b180:	f04f 0b01 	mov.w	fp, #1
 800b184:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 800b188:	ea1e 0a04 	ands.w	sl, lr, r4
 800b18c:	d076      	beq.n	800b27c <HAL_GPIO_Init+0x10c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b18e:	684d      	ldr	r5, [r1, #4]
 800b190:	f005 0203 	and.w	r2, r5, #3
 800b194:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b198:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b19a:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b19e:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b1a2:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b1a6:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b1aa:	d96f      	bls.n	800b28c <HAL_GPIO_Init+0x11c>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b1ac:	2a03      	cmp	r2, #3
 800b1ae:	f040 80ab 	bne.w	800b308 <HAL_GPIO_Init+0x198>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b1b2:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 800b1b6:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b1ba:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b1be:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b1c0:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800b1c4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b1c6:	d059      	beq.n	800b27c <HAL_GPIO_Init+0x10c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b1c8:	4f60      	ldr	r7, [pc, #384]	@ (800b34c <HAL_GPIO_Init+0x1dc>)
 800b1ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b1cc:	f042 0201 	orr.w	r2, r2, #1
 800b1d0:	663a      	str	r2, [r7, #96]	@ 0x60
 800b1d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b1d4:	f002 0201 	and.w	r2, r2, #1
 800b1d8:	9203      	str	r2, [sp, #12]
 800b1da:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b1dc:	f023 0203 	bic.w	r2, r3, #3
 800b1e0:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800b1e4:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b1e8:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800b1ec:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b1ee:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800b1f2:	260f      	movs	r6, #15
 800b1f4:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b1f8:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b1fc:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b200:	d018      	beq.n	800b234 <HAL_GPIO_Init+0xc4>
 800b202:	4e53      	ldr	r6, [pc, #332]	@ (800b350 <HAL_GPIO_Init+0x1e0>)
 800b204:	42b0      	cmp	r0, r6
 800b206:	f000 8092 	beq.w	800b32e <HAL_GPIO_Init+0x1be>
 800b20a:	4e52      	ldr	r6, [pc, #328]	@ (800b354 <HAL_GPIO_Init+0x1e4>)
 800b20c:	42b0      	cmp	r0, r6
 800b20e:	f000 8095 	beq.w	800b33c <HAL_GPIO_Init+0x1cc>
 800b212:	f8df e148 	ldr.w	lr, [pc, #328]	@ 800b35c <HAL_GPIO_Init+0x1ec>
 800b216:	4570      	cmp	r0, lr
 800b218:	f000 8082 	beq.w	800b320 <HAL_GPIO_Init+0x1b0>
 800b21c:	f8df e140 	ldr.w	lr, [pc, #320]	@ 800b360 <HAL_GPIO_Init+0x1f0>
 800b220:	4570      	cmp	r0, lr
 800b222:	bf0c      	ite	eq
 800b224:	f04f 0e04 	moveq.w	lr, #4
 800b228:	f04f 0e07 	movne.w	lr, #7
 800b22c:	fa0e fc0c 	lsl.w	ip, lr, ip
 800b230:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b234:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b236:	4a48      	ldr	r2, [pc, #288]	@ (800b358 <HAL_GPIO_Init+0x1e8>)
 800b238:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b23a:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800b23c:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800b240:	4e45      	ldr	r6, [pc, #276]	@ (800b358 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 800b242:	bf54      	ite	pl
 800b244:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800b246:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 800b24a:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 800b24c:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b24e:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800b250:	4e41      	ldr	r6, [pc, #260]	@ (800b358 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 800b252:	bf54      	ite	pl
 800b254:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800b256:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 800b25a:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b25c:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b25e:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 800b260:	4e3d      	ldr	r6, [pc, #244]	@ (800b358 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 800b262:	bf54      	ite	pl
 800b264:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800b266:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 800b26a:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 800b26c:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b26e:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800b270:	4d39      	ldr	r5, [pc, #228]	@ (800b358 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 800b272:	bf54      	ite	pl
 800b274:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800b276:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 800b27a:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 800b27c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b27e:	fa34 f203 	lsrs.w	r2, r4, r3
 800b282:	f47f af7f 	bne.w	800b184 <HAL_GPIO_Init+0x14>
  }
}
 800b286:	b005      	add	sp, #20
 800b288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800b28c:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b290:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b292:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b296:	fa06 f80c 	lsl.w	r8, r6, ip
 800b29a:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800b29e:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 800b2a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b2a6:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b2a8:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b2ac:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 800b2b0:	fa0e fe03 	lsl.w	lr, lr, r3
 800b2b4:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 800b2b8:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800b2bc:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b2c0:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b2c4:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b2c8:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b2cc:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800b2ce:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b2d2:	f47f af6e 	bne.w	800b1b2 <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b2d6:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 800b2d8:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b2dc:	f003 0e07 	and.w	lr, r3, #7
 800b2e0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800b2e4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b2e8:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 800b2ec:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b2f0:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b2f2:	260f      	movs	r6, #15
 800b2f4:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b2f8:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b2fa:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b2fe:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 800b302:	f8c8 e020 	str.w	lr, [r8, #32]
 800b306:	e754      	b.n	800b1b2 <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 800b308:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b30c:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b30e:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b312:	fa06 fe0c 	lsl.w	lr, r6, ip
 800b316:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 800b31a:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b31e:	e748      	b.n	800b1b2 <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b320:	f04f 0e03 	mov.w	lr, #3
 800b324:	fa0e fc0c 	lsl.w	ip, lr, ip
 800b328:	ea47 070c 	orr.w	r7, r7, ip
 800b32c:	e782      	b.n	800b234 <HAL_GPIO_Init+0xc4>
 800b32e:	f04f 0e01 	mov.w	lr, #1
 800b332:	fa0e fc0c 	lsl.w	ip, lr, ip
 800b336:	ea47 070c 	orr.w	r7, r7, ip
 800b33a:	e77b      	b.n	800b234 <HAL_GPIO_Init+0xc4>
 800b33c:	f04f 0e02 	mov.w	lr, #2
 800b340:	fa0e fc0c 	lsl.w	ip, lr, ip
 800b344:	ea47 070c 	orr.w	r7, r7, ip
 800b348:	e774      	b.n	800b234 <HAL_GPIO_Init+0xc4>
 800b34a:	bf00      	nop
 800b34c:	40021000 	.word	0x40021000
 800b350:	48000400 	.word	0x48000400
 800b354:	48000800 	.word	0x48000800
 800b358:	40010400 	.word	0x40010400
 800b35c:	48000c00 	.word	0x48000c00
 800b360:	48001000 	.word	0x48001000

0800b364 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800b364:	6903      	ldr	r3, [r0, #16]
 800b366:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800b368:	bf14      	ite	ne
 800b36a:	2001      	movne	r0, #1
 800b36c:	2000      	moveq	r0, #0
 800b36e:	4770      	bx	lr

0800b370 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b370:	b10a      	cbz	r2, 800b376 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b372:	6181      	str	r1, [r0, #24]
 800b374:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b376:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop

0800b37c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b37c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b37e:	ea01 0203 	and.w	r2, r1, r3
 800b382:	ea21 0103 	bic.w	r1, r1, r3
 800b386:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b38a:	6181      	str	r1, [r0, #24]
}
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop

0800b390 <I2C_IsErrorOccurred>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t itflag   = hi2c->Instance->ISR;
 800b390:	6803      	ldr	r3, [r0, #0]
{
 800b392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b396:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800b398:	6998      	ldr	r0, [r3, #24]
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b39a:	f010 0c10 	ands.w	ip, r0, #16
 800b39e:	d043      	beq.n	800b428 <I2C_IsErrorOccurred+0x98>
 800b3a0:	4616      	mov	r6, r2
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3a2:	2210      	movs	r2, #16
 800b3a4:	460f      	mov	r7, r1
 800b3a6:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800b3a8:	f04f 0800 	mov.w	r8, #0

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b3ac:	699a      	ldr	r2, [r3, #24]
 800b3ae:	0692      	lsls	r2, r2, #26
 800b3b0:	f100 808d 	bmi.w	800b4ce <I2C_IsErrorOccurred+0x13e>
 800b3b4:	f1b8 0f00 	cmp.w	r8, #0
 800b3b8:	d106      	bne.n	800b3c8 <I2C_IsErrorOccurred+0x38>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b3ba:	1c78      	adds	r0, r7, #1
 800b3bc:	d150      	bne.n	800b460 <I2C_IsErrorOccurred+0xd0>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b3be:	699a      	ldr	r2, [r3, #24]
 800b3c0:	0691      	lsls	r1, r2, #26
 800b3c2:	d5fc      	bpl.n	800b3be <I2C_IsErrorOccurred+0x2e>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3c4:	2220      	movs	r2, #32
 800b3c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b3c8:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b3ca:	05d5      	lsls	r5, r2, #23
    error_code |= HAL_I2C_ERROR_AF;
 800b3cc:	f04f 0c04 	mov.w	ip, #4
    status = HAL_ERROR;
 800b3d0:	f04f 0001 	mov.w	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b3d4:	d42c      	bmi.n	800b430 <I2C_IsErrorOccurred+0xa0>

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b3d6:	0557      	lsls	r7, r2, #21
 800b3d8:	d53c      	bpl.n	800b454 <I2C_IsErrorOccurred+0xc4>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b3da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b3de:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800b3e0:	f04c 0c08 	orr.w	ip, ip, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b3e4:	0596      	lsls	r6, r2, #22
 800b3e6:	d504      	bpl.n	800b3f2 <I2C_IsErrorOccurred+0x62>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b3e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800b3ec:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b3f0:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b3f2:	699a      	ldr	r2, [r3, #24]
 800b3f4:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800b3f6:	bf44      	itt	mi
 800b3f8:	2200      	movmi	r2, #0
 800b3fa:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b3fc:	699a      	ldr	r2, [r3, #24]
 800b3fe:	07d2      	lsls	r2, r2, #31
 800b400:	d523      	bpl.n	800b44a <I2C_IsErrorOccurred+0xba>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b402:	685a      	ldr	r2, [r3, #4]
 800b404:	4934      	ldr	r1, [pc, #208]	@ (800b4d8 <I2C_IsErrorOccurred+0x148>)
 800b406:	400a      	ands	r2, r1
 800b408:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800b40a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b40c:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 800b40e:	ea43 030c 	orr.w	r3, r3, ip
    hi2c->State = HAL_I2C_STATE_READY;
 800b412:	2120      	movs	r1, #32
    hi2c->ErrorCode |= error_code;
 800b414:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b416:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800b41a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b41e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800b422:	2001      	movs	r0, #1
  }

  return status;
}
 800b424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  itflag = hi2c->Instance->ISR;
 800b428:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b42a:	05d5      	lsls	r5, r2, #23
  HAL_StatusTypeDef status = HAL_OK;
 800b42c:	4660      	mov	r0, ip
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b42e:	d5d2      	bpl.n	800b3d6 <I2C_IsErrorOccurred+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b430:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b434:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b436:	0551      	lsls	r1, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800b438:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b43c:	d5d2      	bpl.n	800b3e4 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b43e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b442:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800b444:	f04c 0c08 	orr.w	ip, ip, #8
 800b448:	e7cc      	b.n	800b3e4 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b44a:	699a      	ldr	r2, [r3, #24]
 800b44c:	f042 0201 	orr.w	r2, r2, #1
 800b450:	619a      	str	r2, [r3, #24]
 800b452:	e7d6      	b.n	800b402 <I2C_IsErrorOccurred+0x72>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b454:	0595      	lsls	r5, r2, #22
 800b456:	d4c7      	bmi.n	800b3e8 <I2C_IsErrorOccurred+0x58>
  if (status != HAL_OK)
 800b458:	2800      	cmp	r0, #0
 800b45a:	d1ca      	bne.n	800b3f2 <I2C_IsErrorOccurred+0x62>
}
 800b45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b460:	f7fe fd98 	bl	8009f94 <HAL_GetTick>
 800b464:	1b80      	subs	r0, r0, r6
 800b466:	42b8      	cmp	r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b468:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b46a:	d804      	bhi.n	800b476 <I2C_IsErrorOccurred+0xe6>
 800b46c:	b11f      	cbz	r7, 800b476 <I2C_IsErrorOccurred+0xe6>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b46e:	699a      	ldr	r2, [r3, #24]
 800b470:	0692      	lsls	r2, r2, #26
 800b472:	d5a2      	bpl.n	800b3ba <I2C_IsErrorOccurred+0x2a>
 800b474:	e7a6      	b.n	800b3c4 <I2C_IsErrorOccurred+0x34>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b476:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800b478:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b47c:	6999      	ldr	r1, [r3, #24]
 800b47e:	040d      	lsls	r5, r1, #16
          tmp2 = hi2c->Mode;
 800b480:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b482:	d50d      	bpl.n	800b4a0 <I2C_IsErrorOccurred+0x110>
 800b484:	0441      	lsls	r1, r0, #17
 800b486:	d40b      	bmi.n	800b4a0 <I2C_IsErrorOccurred+0x110>
              (tmp1 != I2C_CR2_STOP) && \
 800b488:	2a20      	cmp	r2, #32
 800b48a:	d009      	beq.n	800b4a0 <I2C_IsErrorOccurred+0x110>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b492:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800b494:	f7fe fd7e 	bl	8009f94 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b498:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800b49a:	4606      	mov	r6, r0
 800b49c:	e000      	b.n	800b4a0 <I2C_IsErrorOccurred+0x110>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	699d      	ldr	r5, [r3, #24]
 800b4a2:	f015 0520 	ands.w	r5, r5, #32
 800b4a6:	d181      	bne.n	800b3ac <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b4a8:	f7fe fd74 	bl	8009f94 <HAL_GetTick>
 800b4ac:	1b80      	subs	r0, r0, r6
 800b4ae:	2819      	cmp	r0, #25
 800b4b0:	d9f5      	bls.n	800b49e <I2C_IsErrorOccurred+0x10e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
              __HAL_UNLOCK(hi2c);
 800b4b4:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
              hi2c->State = HAL_I2C_STATE_READY;
 800b4b8:	2220      	movs	r2, #32
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	6463      	str	r3, [r4, #68]	@ 0x44
              status = HAL_ERROR;
 800b4be:	f04f 0801 	mov.w	r8, #1
              hi2c->State = HAL_I2C_STATE_READY;
 800b4c2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b4c6:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4c8:	f884 5042 	strb.w	r5, [r4, #66]	@ 0x42
              status = HAL_ERROR;
 800b4cc:	e7e8      	b.n	800b4a0 <I2C_IsErrorOccurred+0x110>
    if (status == HAL_OK)
 800b4ce:	f1b8 0f00 	cmp.w	r8, #0
 800b4d2:	f47f af79 	bne.w	800b3c8 <I2C_IsErrorOccurred+0x38>
 800b4d6:	e775      	b.n	800b3c4 <I2C_IsErrorOccurred+0x34>
 800b4d8:	fe00e800 	.word	0xfe00e800

0800b4dc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800b4dc:	b570      	push	{r4, r5, r6, lr}
 800b4de:	4604      	mov	r4, r0
 800b4e0:	460e      	mov	r6, r1
 800b4e2:	4615      	mov	r5, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b4e4:	e004      	b.n	800b4f0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4e6:	f7ff ff53 	bl	800b390 <I2C_IsErrorOccurred>
 800b4ea:	b9e8      	cbnz	r0, 800b528 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (Timeout != HAL_MAX_DELAY)
 800b4ec:	1c72      	adds	r2, r6, #1
 800b4ee:	d108      	bne.n	800b502 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b4f0:	6823      	ldr	r3, [r4, #0]
 800b4f2:	699b      	ldr	r3, [r3, #24]
 800b4f4:	079b      	lsls	r3, r3, #30
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4f6:	462a      	mov	r2, r5
 800b4f8:	4631      	mov	r1, r6
 800b4fa:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b4fc:	d5f3      	bpl.n	800b4e6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800b4fe:	2000      	movs	r0, #0
}
 800b500:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b502:	f7fe fd47 	bl	8009f94 <HAL_GetTick>
 800b506:	1b40      	subs	r0, r0, r5
 800b508:	42b0      	cmp	r0, r6
 800b50a:	d801      	bhi.n	800b510 <I2C_WaitOnTXISFlagUntilTimeout+0x34>
 800b50c:	2e00      	cmp	r6, #0
 800b50e:	d1ef      	bne.n	800b4f0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b510:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b512:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b514:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800b518:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b51a:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b51c:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800b520:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b524:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800b528:	2001      	movs	r0, #1
}
 800b52a:	bd70      	pop	{r4, r5, r6, pc}

0800b52c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800b52c:	b570      	push	{r4, r5, r6, lr}
 800b52e:	4605      	mov	r5, r0
 800b530:	460c      	mov	r4, r1
 800b532:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b534:	e008      	b.n	800b548 <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b536:	f7ff ff2b 	bl	800b390 <I2C_IsErrorOccurred>
 800b53a:	b9d0      	cbnz	r0, 800b572 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b53c:	f7fe fd2a 	bl	8009f94 <HAL_GetTick>
 800b540:	1b80      	subs	r0, r0, r6
 800b542:	42a0      	cmp	r0, r4
 800b544:	d809      	bhi.n	800b55a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800b546:	b144      	cbz	r4, 800b55a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	699b      	ldr	r3, [r3, #24]
 800b54c:	069b      	lsls	r3, r3, #26
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b54e:	4632      	mov	r2, r6
 800b550:	4621      	mov	r1, r4
 800b552:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b554:	d5ef      	bpl.n	800b536 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800b556:	2000      	movs	r0, #0
}
 800b558:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b55a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b55c:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b55e:	f043 0320 	orr.w	r3, r3, #32
      hi2c->State = HAL_I2C_STATE_READY;
 800b562:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b564:	646b      	str	r3, [r5, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800b566:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 800b56a:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b56e:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
      return HAL_ERROR;
 800b572:	2001      	movs	r0, #1
}
 800b574:	bd70      	pop	{r4, r5, r6, pc}
 800b576:	bf00      	nop

0800b578 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	4604      	mov	r4, r0
 800b57c:	460d      	mov	r5, r1
 800b57e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b580:	e00c      	b.n	800b59c <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b582:	f7ff ff05 	bl	800b390 <I2C_IsErrorOccurred>
 800b586:	b9d8      	cbnz	r0, 800b5c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	699a      	ldr	r2, [r3, #24]
 800b58c:	0691      	lsls	r1, r2, #26
 800b58e:	d419      	bmi.n	800b5c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b590:	f7fe fd00 	bl	8009f94 <HAL_GetTick>
 800b594:	1b80      	subs	r0, r0, r6
 800b596:	42a8      	cmp	r0, r5
 800b598:	d809      	bhi.n	800b5ae <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800b59a:	b145      	cbz	r5, 800b5ae <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	075b      	lsls	r3, r3, #29
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5a2:	4632      	mov	r2, r6
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b5a8:	d5eb      	bpl.n	800b582 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 800b5aa:	2000      	movs	r0, #0
}
 800b5ac:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5ae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b5b0:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5b2:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800b5b4:	2100      	movs	r1, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5b6:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800b5b8:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 800b5bc:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
      return HAL_ERROR;
 800b5c0:	2001      	movs	r0, #1
}
 800b5c2:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800b5c4:	699a      	ldr	r2, [r3, #24]
 800b5c6:	0752      	lsls	r2, r2, #29
 800b5c8:	d502      	bpl.n	800b5d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x58>
 800b5ca:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800b5cc:	2a00      	cmp	r2, #0
 800b5ce:	d1ec      	bne.n	800b5aa <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b5d0:	699a      	ldr	r2, [r3, #24]
 800b5d2:	f012 0210 	ands.w	r2, r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5d6:	bf1c      	itt	ne
 800b5d8:	2110      	movne	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800b5da:	2204      	movne	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b5dc:	f04f 0020 	mov.w	r0, #32
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5e0:	bf18      	it	ne
 800b5e2:	61d9      	strne	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5e4:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b5e6:	61d8      	str	r0, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800b5e8:	685a      	ldr	r2, [r3, #4]
 800b5ea:	4905      	ldr	r1, [pc, #20]	@ (800b600 <I2C_WaitOnRXNEFlagUntilTimeout+0x88>)
 800b5ec:	400a      	ands	r2, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ee:	2100      	movs	r1, #0
        I2C_RESET_CR2(hi2c);
 800b5f0:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800b5f2:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 800b5f6:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5fa:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
        return HAL_ERROR;
 800b5fe:	e7df      	b.n	800b5c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800b600:	fe00e800 	.word	0xfe00e800

0800b604 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800b604:	2800      	cmp	r0, #0
 800b606:	d04f      	beq.n	800b6a8 <HAL_I2C_Init+0xa4>
{
 800b608:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b60a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b60e:	4604      	mov	r4, r0
 800b610:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b614:	2b00      	cmp	r3, #0
 800b616:	d042      	beq.n	800b69e <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 800b618:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b61a:	2224      	movs	r2, #36	@ 0x24
 800b61c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b620:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b622:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 800b624:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b628:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800b62c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b62e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b630:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b632:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b634:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b638:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b63a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b63c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b63e:	d02a      	beq.n	800b696 <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b640:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b644:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b646:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b648:	bf04      	itt	eq
 800b64a:	f44f 6200 	moveq.w	r2, #2048	@ 0x800
 800b64e:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b650:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b652:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b654:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 800b658:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800b65c:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b65e:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b660:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b662:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b664:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b666:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b66a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b66e:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b670:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b672:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b674:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b676:	4301      	orrs	r1, r0
 800b678:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800b67a:	6819      	ldr	r1, [r3, #0]
 800b67c:	f041 0101 	orr.w	r1, r1, #1
 800b680:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b682:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800b684:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b686:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b688:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b68c:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b68e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 800b692:	4610      	mov	r0, r2
}
 800b694:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b696:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b69a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b69c:	e7d8      	b.n	800b650 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800b69e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800b6a2:	f7fb fbf3 	bl	8006e8c <HAL_I2C_MspInit>
 800b6a6:	e7b7      	b.n	800b618 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800b6a8:	2001      	movs	r0, #1
}
 800b6aa:	4770      	bx	lr

0800b6ac <HAL_I2C_Master_Transmit>:
{
 800b6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6b0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6b2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800b6b6:	9d08      	ldr	r5, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6b8:	2b20      	cmp	r3, #32
 800b6ba:	d171      	bne.n	800b7a0 <HAL_I2C_Master_Transmit+0xf4>
    __HAL_LOCK(hi2c);
 800b6bc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	d06c      	beq.n	800b7a0 <HAL_I2C_Master_Transmit+0xf4>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800b6cc:	460f      	mov	r7, r1
 800b6ce:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800b6d0:	f7fe fc60 	bl	8009f94 <HAL_GetTick>
 800b6d4:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6d6:	e004      	b.n	800b6e2 <HAL_I2C_Master_Transmit+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6d8:	f7fe fc5c 	bl	8009f94 <HAL_GetTick>
 800b6dc:	1b80      	subs	r0, r0, r6
 800b6de:	2819      	cmp	r0, #25
 800b6e0:	d861      	bhi.n	800b7a6 <HAL_I2C_Master_Transmit+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	6998      	ldr	r0, [r3, #24]
 800b6e6:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 800b6ea:	d1f5      	bne.n	800b6d8 <HAL_I2C_Master_Transmit+0x2c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b6ec:	2221      	movs	r2, #33	@ 0x21
 800b6ee:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b6f2:	2210      	movs	r2, #16
 800b6f4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b6f8:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 800b6fa:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6fe:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr  = pData;
 800b700:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b704:	b292      	uxth	r2, r2
 800b706:	2aff      	cmp	r2, #255	@ 0xff
    hi2c->XferISR   = NULL;
 800b708:	6360      	str	r0, [r4, #52]	@ 0x34
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b70a:	f3c7 0709 	ubfx	r7, r7, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b70e:	d86e      	bhi.n	800b7ee <HAL_I2C_Master_Transmit+0x142>
      hi2c->XferSize = hi2c->XferCount;
 800b710:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b712:	4848      	ldr	r0, [pc, #288]	@ (800b834 <HAL_I2C_Master_Transmit+0x188>)
 800b714:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 800b716:	b292      	uxth	r2, r2
 800b718:	8522      	strh	r2, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b71a:	b2d2      	uxtb	r2, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b71c:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800b720:	4001      	ands	r1, r0
 800b722:	430a      	orrs	r2, r1
 800b724:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800b728:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b72c:	605a      	str	r2, [r3, #4]
    while (hi2c->XferCount > 0U)
 800b72e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b730:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b732:	4632      	mov	r2, r6
 800b734:	4629      	mov	r1, r5
 800b736:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b738:	b30b      	cbz	r3, 800b77e <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b73a:	f7ff fecf 	bl	800b4dc <I2C_WaitOnTXISFlagUntilTimeout>
 800b73e:	2800      	cmp	r0, #0
 800b740:	d13d      	bne.n	800b7be <HAL_I2C_Master_Transmit+0x112>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b742:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b744:	6822      	ldr	r2, [r4, #0]
 800b746:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b74a:	6293      	str	r3, [r2, #40]	@ 0x28
      hi2c->XferCount--;
 800b74c:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b750:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800b752:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800b754:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b758:	fa1f fc8c 	uxth.w	ip, ip
 800b75c:	f8a4 c02a 	strh.w	ip, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b760:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b762:	3b01      	subs	r3, #1
 800b764:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b766:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 800b768:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b76a:	2900      	cmp	r1, #0
 800b76c:	d0df      	beq.n	800b72e <HAL_I2C_Master_Transmit+0x82>
 800b76e:	b35b      	cbz	r3, 800b7c8 <HAL_I2C_Master_Transmit+0x11c>
    while (hi2c->XferCount > 0U)
 800b770:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b772:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b774:	4632      	mov	r2, r6
 800b776:	4629      	mov	r1, r5
 800b778:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1dd      	bne.n	800b73a <HAL_I2C_Master_Transmit+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b77e:	f7ff fed5 	bl	800b52c <I2C_WaitOnSTOPFlagUntilTimeout>
 800b782:	b9e0      	cbnz	r0, 800b7be <HAL_I2C_Master_Transmit+0x112>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b784:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800b786:	4d2c      	ldr	r5, [pc, #176]	@ (800b838 <HAL_I2C_Master_Transmit+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b788:	2120      	movs	r1, #32
 800b78a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b78c:	685a      	ldr	r2, [r3, #4]
 800b78e:	402a      	ands	r2, r5
 800b790:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b792:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800b796:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b79a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800b79e:	e000      	b.n	800b7a2 <HAL_I2C_Master_Transmit+0xf6>
    __HAL_LOCK(hi2c);
 800b7a0:	2002      	movs	r0, #2
}
 800b7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7a6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7a8:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7aa:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800b7ae:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7b0:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b7b2:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800b7b6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7ba:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800b7be:	2001      	movs	r0, #1
}
 800b7c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800b7c4:	1c69      	adds	r1, r5, #1
 800b7c6:	d11e      	bne.n	800b806 <HAL_I2C_Master_Transmit+0x15a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b7c8:	6993      	ldr	r3, [r2, #24]
 800b7ca:	061b      	lsls	r3, r3, #24
 800b7cc:	d5fa      	bpl.n	800b7c4 <HAL_I2C_Master_Transmit+0x118>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b7ce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	2bff      	cmp	r3, #255	@ 0xff
 800b7d4:	d920      	bls.n	800b818 <HAL_I2C_Master_Transmit+0x16c>
  MODIFY_REG(hi2c->Instance->CR2, \
 800b7d6:	6853      	ldr	r3, [r2, #4]
 800b7d8:	4918      	ldr	r1, [pc, #96]	@ (800b83c <HAL_I2C_Master_Transmit+0x190>)
 800b7da:	400b      	ands	r3, r1
 800b7dc:	433b      	orrs	r3, r7
 800b7de:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800b7e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b7e6:	21ff      	movs	r1, #255	@ 0xff
 800b7e8:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800b7ea:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b7ec:	e79f      	b.n	800b72e <HAL_I2C_Master_Transmit+0x82>
  MODIFY_REG(hi2c->Instance->CR2, \
 800b7ee:	685a      	ldr	r2, [r3, #4]
 800b7f0:	4910      	ldr	r1, [pc, #64]	@ (800b834 <HAL_I2C_Master_Transmit+0x188>)
 800b7f2:	400a      	ands	r2, r1
 800b7f4:	433a      	orrs	r2, r7
 800b7f6:	f042 72ff 	orr.w	r2, r2, #33423360	@ 0x1fe0000
 800b7fa:	f442 3290 	orr.w	r2, r2, #73728	@ 0x12000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b7fe:	21ff      	movs	r1, #255	@ 0xff
 800b800:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800b802:	605a      	str	r2, [r3, #4]
}
 800b804:	e793      	b.n	800b72e <HAL_I2C_Master_Transmit+0x82>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b806:	f7fe fbc5 	bl	8009f94 <HAL_GetTick>
 800b80a:	1b80      	subs	r0, r0, r6
 800b80c:	4285      	cmp	r5, r0
 800b80e:	d3ca      	bcc.n	800b7a6 <HAL_I2C_Master_Transmit+0xfa>
 800b810:	2d00      	cmp	r5, #0
 800b812:	d0c8      	beq.n	800b7a6 <HAL_I2C_Master_Transmit+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b814:	6822      	ldr	r2, [r4, #0]
 800b816:	e7d7      	b.n	800b7c8 <HAL_I2C_Master_Transmit+0x11c>
          hi2c->XferSize = hi2c->XferCount;
 800b818:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800b81a:	4808      	ldr	r0, [pc, #32]	@ (800b83c <HAL_I2C_Master_Transmit+0x190>)
          hi2c->XferSize = hi2c->XferCount;
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b820:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800b822:	6853      	ldr	r3, [r2, #4]
 800b824:	4003      	ands	r3, r0
 800b826:	433b      	orrs	r3, r7
 800b828:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b82c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b830:	6053      	str	r3, [r2, #4]
}
 800b832:	e77c      	b.n	800b72e <HAL_I2C_Master_Transmit+0x82>
 800b834:	fc009800 	.word	0xfc009800
 800b838:	fe00e800 	.word	0xfe00e800
 800b83c:	fc009c00 	.word	0xfc009c00

0800b840 <HAL_I2C_Master_Receive>:
{
 800b840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b844:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b846:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800b84a:	9d08      	ldr	r5, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b84c:	2b20      	cmp	r3, #32
 800b84e:	f040 808d 	bne.w	800b96c <HAL_I2C_Master_Receive+0x12c>
    __HAL_LOCK(hi2c);
 800b852:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b856:	2b01      	cmp	r3, #1
 800b858:	4604      	mov	r4, r0
 800b85a:	f000 8087 	beq.w	800b96c <HAL_I2C_Master_Receive+0x12c>
 800b85e:	2301      	movs	r3, #1
 800b860:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800b864:	460f      	mov	r7, r1
 800b866:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800b868:	f7fe fb94 	bl	8009f94 <HAL_GetTick>
 800b86c:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b86e:	e005      	b.n	800b87c <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b870:	f7fe fb90 	bl	8009f94 <HAL_GetTick>
 800b874:	1b80      	subs	r0, r0, r6
 800b876:	2819      	cmp	r0, #25
 800b878:	f200 8082 	bhi.w	800b980 <HAL_I2C_Master_Receive+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b87c:	6823      	ldr	r3, [r4, #0]
 800b87e:	6998      	ldr	r0, [r3, #24]
 800b880:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 800b884:	d1f4      	bne.n	800b870 <HAL_I2C_Master_Receive+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b886:	2222      	movs	r2, #34	@ 0x22
 800b888:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b88c:	2210      	movs	r2, #16
 800b88e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b892:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 800b894:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b898:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr  = pData;
 800b89a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b89e:	b292      	uxth	r2, r2
 800b8a0:	2aff      	cmp	r2, #255	@ 0xff
    hi2c->XferISR   = NULL;
 800b8a2:	6360      	str	r0, [r4, #52]	@ 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b8a4:	f3c7 0709 	ubfx	r7, r7, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8a8:	d879      	bhi.n	800b99e <HAL_I2C_Master_Receive+0x15e>
      hi2c->XferSize = hi2c->XferCount;
 800b8aa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800b8ac:	4849      	ldr	r0, [pc, #292]	@ (800b9d4 <HAL_I2C_Master_Receive+0x194>)
 800b8ae:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 800b8b0:	b292      	uxth	r2, r2
 800b8b2:	8522      	strh	r2, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b8b4:	b2d2      	uxtb	r2, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b8b6:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800b8ba:	4001      	ands	r1, r0
 800b8bc:	430a      	orrs	r2, r1
 800b8be:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800b8c2:	f442 5210 	orr.w	r2, r2, #9216	@ 0x2400
 800b8c6:	605a      	str	r2, [r3, #4]
    while (hi2c->XferCount > 0U)
 800b8c8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b8ca:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b8cc:	4632      	mov	r2, r6
 800b8ce:	4629      	mov	r1, r5
 800b8d0:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d039      	beq.n	800b94a <HAL_I2C_Master_Receive+0x10a>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b8d6:	f7ff fe4f 	bl	800b578 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	d15c      	bne.n	800b998 <HAL_I2C_Master_Receive+0x158>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b8de:	6822      	ldr	r2, [r4, #0]
 800b8e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b8e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b8e4:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800b8e6:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b8ea:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800b8ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800b8ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b8f2:	fa1f fc8c 	uxth.w	ip, ip
 800b8f6:	f8a4 c02a 	strh.w	ip, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b8fa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b8fc:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800b8fe:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800b900:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b902:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800b904:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800b906:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b908:	2a00      	cmp	r2, #0
 800b90a:	d0dd      	beq.n	800b8c8 <HAL_I2C_Master_Receive+0x88>
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1db      	bne.n	800b8c8 <HAL_I2C_Master_Receive+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b910:	6822      	ldr	r2, [r4, #0]
 800b912:	e001      	b.n	800b918 <HAL_I2C_Master_Receive+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 800b914:	1c69      	adds	r1, r5, #1
 800b916:	d12c      	bne.n	800b972 <HAL_I2C_Master_Receive+0x132>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b918:	6993      	ldr	r3, [r2, #24]
 800b91a:	061b      	lsls	r3, r3, #24
 800b91c:	d5fa      	bpl.n	800b914 <HAL_I2C_Master_Receive+0xd4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b91e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b920:	b29b      	uxth	r3, r3
 800b922:	2bff      	cmp	r3, #255	@ 0xff
 800b924:	d947      	bls.n	800b9b6 <HAL_I2C_Master_Receive+0x176>
  MODIFY_REG(hi2c->Instance->CR2, \
 800b926:	6853      	ldr	r3, [r2, #4]
 800b928:	492b      	ldr	r1, [pc, #172]	@ (800b9d8 <HAL_I2C_Master_Receive+0x198>)
 800b92a:	400b      	ands	r3, r1
 800b92c:	433b      	orrs	r3, r7
 800b92e:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800b932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b936:	21ff      	movs	r1, #255	@ 0xff
 800b938:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800b93a:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 800b93c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b93e:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b940:	4632      	mov	r2, r6
 800b942:	4629      	mov	r1, r5
 800b944:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1c5      	bne.n	800b8d6 <HAL_I2C_Master_Receive+0x96>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b94a:	f7ff fdef 	bl	800b52c <I2C_WaitOnSTOPFlagUntilTimeout>
 800b94e:	bb18      	cbnz	r0, 800b998 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b950:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800b952:	4d22      	ldr	r5, [pc, #136]	@ (800b9dc <HAL_I2C_Master_Receive+0x19c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b954:	2120      	movs	r1, #32
 800b956:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b958:	685a      	ldr	r2, [r3, #4]
 800b95a:	402a      	ands	r2, r5
 800b95c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b95e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800b962:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b966:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800b96a:	e000      	b.n	800b96e <HAL_I2C_Master_Receive+0x12e>
    __HAL_LOCK(hi2c);
 800b96c:	2002      	movs	r0, #2
}
 800b96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b972:	f7fe fb0f 	bl	8009f94 <HAL_GetTick>
 800b976:	1b80      	subs	r0, r0, r6
 800b978:	4285      	cmp	r5, r0
 800b97a:	d301      	bcc.n	800b980 <HAL_I2C_Master_Receive+0x140>
 800b97c:	2d00      	cmp	r5, #0
 800b97e:	d1c7      	bne.n	800b910 <HAL_I2C_Master_Receive+0xd0>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b980:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b982:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b984:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800b988:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b98a:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b98c:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800b990:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b994:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800b998:	2001      	movs	r0, #1
}
 800b99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
 800b99e:	685a      	ldr	r2, [r3, #4]
 800b9a0:	490c      	ldr	r1, [pc, #48]	@ (800b9d4 <HAL_I2C_Master_Receive+0x194>)
 800b9a2:	400a      	ands	r2, r1
 800b9a4:	433a      	orrs	r2, r7
 800b9a6:	f042 72ff 	orr.w	r2, r2, #33423360	@ 0x1fe0000
 800b9aa:	f442 3292 	orr.w	r2, r2, #74752	@ 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b9ae:	21ff      	movs	r1, #255	@ 0xff
 800b9b0:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800b9b2:	605a      	str	r2, [r3, #4]
}
 800b9b4:	e788      	b.n	800b8c8 <HAL_I2C_Master_Receive+0x88>
          hi2c->XferSize = hi2c->XferCount;
 800b9b6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800b9b8:	4807      	ldr	r0, [pc, #28]	@ (800b9d8 <HAL_I2C_Master_Receive+0x198>)
 800b9ba:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b9c0:	b2db      	uxtb	r3, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b9c2:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800b9c6:	4001      	ands	r1, r0
 800b9c8:	430b      	orrs	r3, r1
 800b9ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b9ce:	6053      	str	r3, [r2, #4]
}
 800b9d0:	e77a      	b.n	800b8c8 <HAL_I2C_Master_Receive+0x88>
 800b9d2:	bf00      	nop
 800b9d4:	fc009800 	.word	0xfc009800
 800b9d8:	fc009c00 	.word	0xfc009c00
 800b9dc:	fe00e800 	.word	0xfe00e800

0800b9e0 <HAL_I2C_Mem_Write>:
{
 800b9e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e4:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9e6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800b9ea:	f8bd b02c 	ldrh.w	fp, [sp, #44]	@ 0x2c
 800b9ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9f0:	2b20      	cmp	r3, #32
 800b9f2:	f040 80a5 	bne.w	800bb40 <HAL_I2C_Mem_Write+0x160>
    if ((pData == NULL) || (Size == 0U))
 800b9f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f000 809a 	beq.w	800bb34 <HAL_I2C_Mem_Write+0x154>
 800ba00:	f1bb 0f00 	cmp.w	fp, #0
 800ba04:	f000 8096 	beq.w	800bb34 <HAL_I2C_Mem_Write+0x154>
    __HAL_LOCK(hi2c);
 800ba08:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	f000 8097 	beq.w	800bb40 <HAL_I2C_Mem_Write+0x160>
 800ba12:	2301      	movs	r3, #1
 800ba14:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800ba18:	4688      	mov	r8, r1
 800ba1a:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800ba1c:	f7fe faba 	bl	8009f94 <HAL_GetTick>
 800ba20:	4607      	mov	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba22:	e005      	b.n	800ba30 <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba24:	f7fe fab6 	bl	8009f94 <HAL_GetTick>
 800ba28:	1bc0      	subs	r0, r0, r7
 800ba2a:	2819      	cmp	r0, #25
 800ba2c:	f200 808b 	bhi.w	800bb46 <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba30:	6823      	ldr	r3, [r4, #0]
 800ba32:	699d      	ldr	r5, [r3, #24]
 800ba34:	f415 4500 	ands.w	r5, r5, #32768	@ 0x8000
 800ba38:	d1f4      	bne.n	800ba24 <HAL_I2C_Mem_Write+0x44>
    hi2c->pBuffPtr  = pData;
 800ba3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba3c:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ba3e:	2221      	movs	r2, #33	@ 0x21
 800ba40:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ba44:	2240      	movs	r2, #64	@ 0x40
 800ba46:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba4a:	6465      	str	r5, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 800ba4c:	f8a4 b02a 	strh.w	fp, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800ba50:	685a      	ldr	r2, [r3, #4]
 800ba52:	4973      	ldr	r1, [pc, #460]	@ (800bc20 <HAL_I2C_Mem_Write+0x240>)
    hi2c->XferISR   = NULL;
 800ba54:	6365      	str	r5, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 800ba56:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ba58:	fa5f f18a 	uxtb.w	r1, sl
  MODIFY_REG(hi2c->Instance->CR2, \
 800ba5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ba60:	f3c8 0809 	ubfx	r8, r8, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800ba64:	ea42 0208 	orr.w	r2, r2, r8
 800ba68:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800ba6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ba70:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba72:	4631      	mov	r1, r6
 800ba74:	463a      	mov	r2, r7
 800ba76:	4620      	mov	r0, r4
 800ba78:	f7ff fd30 	bl	800b4dc <I2C_WaitOnTXISFlagUntilTimeout>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	f040 80a6 	bne.w	800bbce <HAL_I2C_Mem_Write+0x1ee>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ba82:	f1ba 0f01 	cmp.w	sl, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ba86:	6822      	ldr	r2, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ba88:	d16a      	bne.n	800bb60 <HAL_I2C_Mem_Write+0x180>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ba8a:	fa5f f389 	uxtb.w	r3, r9
 800ba8e:	6293      	str	r3, [r2, #40]	@ 0x28
 800ba90:	e002      	b.n	800ba98 <HAL_I2C_Mem_Write+0xb8>
    if (Timeout != HAL_MAX_DELAY)
 800ba92:	1c75      	adds	r5, r6, #1
 800ba94:	f040 808a 	bne.w	800bbac <HAL_I2C_Mem_Write+0x1cc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba98:	6993      	ldr	r3, [r2, #24]
 800ba9a:	0618      	lsls	r0, r3, #24
 800ba9c:	d5f9      	bpl.n	800ba92 <HAL_I2C_Mem_Write+0xb2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba9e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	2bff      	cmp	r3, #255	@ 0xff
 800baa4:	f240 8097 	bls.w	800bbd6 <HAL_I2C_Mem_Write+0x1f6>
  MODIFY_REG(hi2c->Instance->CR2, \
 800baa8:	6853      	ldr	r3, [r2, #4]
 800baaa:	495e      	ldr	r1, [pc, #376]	@ (800bc24 <HAL_I2C_Mem_Write+0x244>)
 800baac:	400b      	ands	r3, r1
 800baae:	ea43 0308 	orr.w	r3, r3, r8
 800bab2:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800bab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800baba:	21ff      	movs	r1, #255	@ 0xff
 800babc:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800babe:	6053      	str	r3, [r2, #4]
}
 800bac0:	e004      	b.n	800bacc <HAL_I2C_Mem_Write+0xec>
    } while (hi2c->XferCount > 0U);
 800bac2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f000 8094 	beq.w	800bbf4 <HAL_I2C_Mem_Write+0x214>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bacc:	463a      	mov	r2, r7
 800bace:	4631      	mov	r1, r6
 800bad0:	4620      	mov	r0, r4
 800bad2:	f7ff fd03 	bl	800b4dc <I2C_WaitOnTXISFlagUntilTimeout>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d12f      	bne.n	800bb3a <HAL_I2C_Mem_Write+0x15a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bada:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800badc:	6822      	ldr	r2, [r4, #0]
 800bade:	f813 1b01 	ldrb.w	r1, [r3], #1
 800bae2:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800bae4:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800bae6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bae8:	3b01      	subs	r3, #1
 800baea:	b29b      	uxth	r3, r3
 800baec:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800baee:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800baf0:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800baf2:	3b01      	subs	r3, #1
 800baf4:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800baf6:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 800baf8:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bafa:	2900      	cmp	r1, #0
 800bafc:	d0e1      	beq.n	800bac2 <HAL_I2C_Mem_Write+0xe2>
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1df      	bne.n	800bac2 <HAL_I2C_Mem_Write+0xe2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb02:	6993      	ldr	r3, [r2, #24]
 800bb04:	061b      	lsls	r3, r3, #24
 800bb06:	d404      	bmi.n	800bb12 <HAL_I2C_Mem_Write+0x132>
    if (Timeout != HAL_MAX_DELAY)
 800bb08:	1c71      	adds	r1, r6, #1
 800bb0a:	d137      	bne.n	800bb7c <HAL_I2C_Mem_Write+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb0c:	6993      	ldr	r3, [r2, #24]
 800bb0e:	061b      	lsls	r3, r3, #24
 800bb10:	d5fa      	bpl.n	800bb08 <HAL_I2C_Mem_Write+0x128>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb12:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	2bff      	cmp	r3, #255	@ 0xff
 800bb18:	d939      	bls.n	800bb8e <HAL_I2C_Mem_Write+0x1ae>
  MODIFY_REG(hi2c->Instance->CR2, \
 800bb1a:	6853      	ldr	r3, [r2, #4]
 800bb1c:	4941      	ldr	r1, [pc, #260]	@ (800bc24 <HAL_I2C_Mem_Write+0x244>)
 800bb1e:	400b      	ands	r3, r1
 800bb20:	ea43 0308 	orr.w	r3, r3, r8
 800bb24:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800bb28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb2c:	21ff      	movs	r1, #255	@ 0xff
 800bb2e:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800bb30:	6053      	str	r3, [r2, #4]
}
 800bb32:	e7c6      	b.n	800bac2 <HAL_I2C_Mem_Write+0xe2>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bb34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb38:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800bb3a:	2001      	movs	r0, #1
}
 800bb3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800bb40:	2002      	movs	r0, #2
}
 800bb42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb46:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb48:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb4a:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800bb4e:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb50:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800bb52:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800bb56:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb5a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 800bb5e:	e7ec      	b.n	800bb3a <HAL_I2C_Mem_Write+0x15a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bb60:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800bb64:	6293      	str	r3, [r2, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb66:	4631      	mov	r1, r6
 800bb68:	463a      	mov	r2, r7
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f7ff fcb6 	bl	800b4dc <I2C_WaitOnTXISFlagUntilTimeout>
 800bb70:	bb68      	cbnz	r0, 800bbce <HAL_I2C_Mem_Write+0x1ee>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bb72:	6822      	ldr	r2, [r4, #0]
 800bb74:	fa5f f389 	uxtb.w	r3, r9
 800bb78:	6293      	str	r3, [r2, #40]	@ 0x28
 800bb7a:	e78d      	b.n	800ba98 <HAL_I2C_Mem_Write+0xb8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb7c:	f7fe fa0a 	bl	8009f94 <HAL_GetTick>
 800bb80:	1bc0      	subs	r0, r0, r7
 800bb82:	4286      	cmp	r6, r0
 800bb84:	d3df      	bcc.n	800bb46 <HAL_I2C_Mem_Write+0x166>
 800bb86:	2e00      	cmp	r6, #0
 800bb88:	d0dd      	beq.n	800bb46 <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb8a:	6822      	ldr	r2, [r4, #0]
 800bb8c:	e7be      	b.n	800bb0c <HAL_I2C_Mem_Write+0x12c>
          hi2c->XferSize = hi2c->XferCount;
 800bb8e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800bb90:	4824      	ldr	r0, [pc, #144]	@ (800bc24 <HAL_I2C_Mem_Write+0x244>)
          hi2c->XferSize = hi2c->XferCount;
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bb96:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800bb98:	6853      	ldr	r3, [r2, #4]
 800bb9a:	4003      	ands	r3, r0
 800bb9c:	ea43 0308 	orr.w	r3, r3, r8
 800bba0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bba4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bba8:	6053      	str	r3, [r2, #4]
}
 800bbaa:	e78a      	b.n	800bac2 <HAL_I2C_Mem_Write+0xe2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbac:	f7fe f9f2 	bl	8009f94 <HAL_GetTick>
 800bbb0:	1bc0      	subs	r0, r0, r7
 800bbb2:	4286      	cmp	r6, r0
 800bbb4:	d302      	bcc.n	800bbbc <HAL_I2C_Mem_Write+0x1dc>
 800bbb6:	b10e      	cbz	r6, 800bbbc <HAL_I2C_Mem_Write+0x1dc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bbb8:	6822      	ldr	r2, [r4, #0]
 800bbba:	e76d      	b.n	800ba98 <HAL_I2C_Mem_Write+0xb8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbbc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bbbe:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbc0:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbc2:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbc4:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bbc6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbca:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800bbce:	2300      	movs	r3, #0
 800bbd0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800bbd4:	e7b1      	b.n	800bb3a <HAL_I2C_Mem_Write+0x15a>
      hi2c->XferSize = hi2c->XferCount;
 800bbd6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800bbd8:	4812      	ldr	r0, [pc, #72]	@ (800bc24 <HAL_I2C_Mem_Write+0x244>)
      hi2c->XferSize = hi2c->XferCount;
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bbde:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800bbe0:	6853      	ldr	r3, [r2, #4]
 800bbe2:	4003      	ands	r3, r0
 800bbe4:	ea43 0308 	orr.w	r3, r3, r8
 800bbe8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bbec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bbf0:	6053      	str	r3, [r2, #4]
}
 800bbf2:	e76b      	b.n	800bacc <HAL_I2C_Mem_Write+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbf4:	463a      	mov	r2, r7
 800bbf6:	4631      	mov	r1, r6
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f7ff fc97 	bl	800b52c <I2C_WaitOnSTOPFlagUntilTimeout>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d19b      	bne.n	800bb3a <HAL_I2C_Mem_Write+0x15a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc02:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800bc04:	4d08      	ldr	r5, [pc, #32]	@ (800bc28 <HAL_I2C_Mem_Write+0x248>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc06:	2120      	movs	r1, #32
 800bc08:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800bc0a:	685a      	ldr	r2, [r3, #4]
 800bc0c:	402a      	ands	r2, r5
 800bc0e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800bc10:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800bc14:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bc18:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800bc1c:	e78e      	b.n	800bb3c <HAL_I2C_Mem_Write+0x15c>
 800bc1e:	bf00      	nop
 800bc20:	fc009800 	.word	0xfc009800
 800bc24:	fc009c00 	.word	0xfc009c00
 800bc28:	fe00e800 	.word	0xfe00e800

0800bc2c <HAL_I2C_Mem_Read>:
{
 800bc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc30:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc32:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800bc36:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 800bc3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc3c:	2b20      	cmp	r3, #32
 800bc3e:	f040 8081 	bne.w	800bd44 <HAL_I2C_Mem_Read+0x118>
    if ((pData == NULL) || (Size == 0U))
 800bc42:	9b08      	ldr	r3, [sp, #32]
 800bc44:	4605      	mov	r5, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d076      	beq.n	800bd38 <HAL_I2C_Mem_Read+0x10c>
 800bc4a:	f1ba 0f00 	cmp.w	sl, #0
 800bc4e:	d073      	beq.n	800bd38 <HAL_I2C_Mem_Read+0x10c>
    __HAL_LOCK(hi2c);
 800bc50:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d075      	beq.n	800bd44 <HAL_I2C_Mem_Read+0x118>
 800bc58:	2301      	movs	r3, #1
 800bc5a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800bc5e:	460f      	mov	r7, r1
 800bc60:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800bc62:	f7fe f997 	bl	8009f94 <HAL_GetTick>
 800bc66:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc68:	e004      	b.n	800bc74 <HAL_I2C_Mem_Read+0x48>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc6a:	f7fe f993 	bl	8009f94 <HAL_GetTick>
 800bc6e:	1b80      	subs	r0, r0, r6
 800bc70:	2819      	cmp	r0, #25
 800bc72:	d871      	bhi.n	800bd58 <HAL_I2C_Mem_Read+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc74:	682b      	ldr	r3, [r5, #0]
 800bc76:	6998      	ldr	r0, [r3, #24]
 800bc78:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 800bc7c:	d1f5      	bne.n	800bc6a <HAL_I2C_Mem_Read+0x3e>
    hi2c->pBuffPtr  = pData;
 800bc7e:	9a08      	ldr	r2, [sp, #32]
 800bc80:	626a      	str	r2, [r5, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bc82:	2222      	movs	r2, #34	@ 0x22
 800bc84:	f885 2041 	strb.w	r2, [r5, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bc88:	2240      	movs	r2, #64	@ 0x40
 800bc8a:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc8e:	6468      	str	r0, [r5, #68]	@ 0x44
    hi2c->XferCount = Size;
 800bc90:	f8a5 a02a 	strh.w	sl, [r5, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800bc94:	685a      	ldr	r2, [r3, #4]
 800bc96:	4971      	ldr	r1, [pc, #452]	@ (800be5c <HAL_I2C_Mem_Read+0x230>)
    hi2c->XferISR   = NULL;
 800bc98:	6368      	str	r0, [r5, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 800bc9a:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bc9c:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 800bca0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bca4:	f3c7 0709 	ubfx	r7, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800bca8:	433a      	orrs	r2, r7
 800bcaa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bcae:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcb0:	4621      	mov	r1, r4
 800bcb2:	4632      	mov	r2, r6
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f7ff fc11 	bl	800b4dc <I2C_WaitOnTXISFlagUntilTimeout>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	f040 80a4 	bne.w	800be08 <HAL_I2C_Mem_Read+0x1dc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bcc0:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bcc4:	6829      	ldr	r1, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bcc6:	d172      	bne.n	800bdae <HAL_I2C_Mem_Read+0x182>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bcc8:	fa5f f389 	uxtb.w	r3, r9
 800bccc:	628b      	str	r3, [r1, #40]	@ 0x28
 800bcce:	e002      	b.n	800bcd6 <HAL_I2C_Mem_Read+0xaa>
    if (Timeout != HAL_MAX_DELAY)
 800bcd0:	1c60      	adds	r0, r4, #1
 800bcd2:	f040 8088 	bne.w	800bde6 <HAL_I2C_Mem_Read+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bcd6:	698b      	ldr	r3, [r1, #24]
 800bcd8:	065a      	lsls	r2, r3, #25
 800bcda:	d5f9      	bpl.n	800bcd0 <HAL_I2C_Mem_Read+0xa4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bcdc:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	2bff      	cmp	r3, #255	@ 0xff
 800bce2:	f240 8095 	bls.w	800be10 <HAL_I2C_Mem_Read+0x1e4>
  MODIFY_REG(hi2c->Instance->CR2, \
 800bce6:	684b      	ldr	r3, [r1, #4]
 800bce8:	4a5c      	ldr	r2, [pc, #368]	@ (800be5c <HAL_I2C_Mem_Read+0x230>)
 800bcea:	4013      	ands	r3, r2
 800bcec:	433b      	orrs	r3, r7
 800bcee:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800bcf2:	f443 3392 	orr.w	r3, r3, #74752	@ 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcf6:	22ff      	movs	r2, #255	@ 0xff
 800bcf8:	852a      	strh	r2, [r5, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800bcfa:	604b      	str	r3, [r1, #4]
}
 800bcfc:	e001      	b.n	800bd02 <HAL_I2C_Mem_Read+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 800bcfe:	1c63      	adds	r3, r4, #1
 800bd00:	d123      	bne.n	800bd4a <HAL_I2C_Mem_Read+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd02:	698b      	ldr	r3, [r1, #24]
 800bd04:	0758      	lsls	r0, r3, #29
 800bd06:	d5fa      	bpl.n	800bcfe <HAL_I2C_Mem_Read+0xd2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bd08:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800bd0a:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800bd0c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800bd0e:	8d6a      	ldrh	r2, [r5, #42]	@ 0x2a
      hi2c->XferSize--;
 800bd10:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800bd12:	6a69      	ldr	r1, [r5, #36]	@ 0x24
      hi2c->XferCount--;
 800bd14:	3a01      	subs	r2, #1
 800bd16:	b292      	uxth	r2, r2
 800bd18:	856a      	strh	r2, [r5, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd1a:	8d6a      	ldrh	r2, [r5, #42]	@ 0x2a
      hi2c->XferSize--;
 800bd1c:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800bd1e:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800bd20:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd22:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800bd24:	6269      	str	r1, [r5, #36]	@ 0x24
      hi2c->XferSize--;
 800bd26:	852b      	strh	r3, [r5, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd28:	b102      	cbz	r2, 800bd2c <HAL_I2C_Mem_Read+0x100>
 800bd2a:	b34b      	cbz	r3, 800bd80 <HAL_I2C_Mem_Read+0x154>
    } while (hi2c->XferCount > 0U);
 800bd2c:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d07d      	beq.n	800be30 <HAL_I2C_Mem_Read+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd34:	6829      	ldr	r1, [r5, #0]
 800bd36:	e7e4      	b.n	800bd02 <HAL_I2C_Mem_Read+0xd6>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bd38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd3c:	646b      	str	r3, [r5, #68]	@ 0x44
      return  HAL_ERROR;
 800bd3e:	2001      	movs	r0, #1
}
 800bd40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800bd44:	2002      	movs	r0, #2
}
 800bd46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd4a:	f7fe f923 	bl	8009f94 <HAL_GetTick>
 800bd4e:	1b80      	subs	r0, r0, r6
 800bd50:	4284      	cmp	r4, r0
 800bd52:	d301      	bcc.n	800bd58 <HAL_I2C_Mem_Read+0x12c>
 800bd54:	2c00      	cmp	r4, #0
 800bd56:	d1ed      	bne.n	800bd34 <HAL_I2C_Mem_Read+0x108>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd58:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd5a:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd5c:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800bd60:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd62:	646b      	str	r3, [r5, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800bd64:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800bd68:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd6c:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 800bd70:	e7e5      	b.n	800bd3e <HAL_I2C_Mem_Read+0x112>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd72:	f7fe f90f 	bl	8009f94 <HAL_GetTick>
 800bd76:	1b83      	subs	r3, r0, r6
 800bd78:	429c      	cmp	r4, r3
 800bd7a:	d3ed      	bcc.n	800bd58 <HAL_I2C_Mem_Read+0x12c>
 800bd7c:	2c00      	cmp	r4, #0
 800bd7e:	d0eb      	beq.n	800bd58 <HAL_I2C_Mem_Read+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd80:	682a      	ldr	r2, [r5, #0]
 800bd82:	e001      	b.n	800bd88 <HAL_I2C_Mem_Read+0x15c>
    if (Timeout != HAL_MAX_DELAY)
 800bd84:	1c61      	adds	r1, r4, #1
 800bd86:	d1f4      	bne.n	800bd72 <HAL_I2C_Mem_Read+0x146>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd88:	6993      	ldr	r3, [r2, #24]
 800bd8a:	061b      	lsls	r3, r3, #24
 800bd8c:	d5fa      	bpl.n	800bd84 <HAL_I2C_Mem_Read+0x158>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd8e:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	2bff      	cmp	r3, #255	@ 0xff
 800bd94:	d919      	bls.n	800bdca <HAL_I2C_Mem_Read+0x19e>
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd96:	6853      	ldr	r3, [r2, #4]
 800bd98:	4931      	ldr	r1, [pc, #196]	@ (800be60 <HAL_I2C_Mem_Read+0x234>)
 800bd9a:	400b      	ands	r3, r1
 800bd9c:	433b      	orrs	r3, r7
 800bd9e:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800bda2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bda6:	21ff      	movs	r1, #255	@ 0xff
 800bda8:	8529      	strh	r1, [r5, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800bdaa:	6053      	str	r3, [r2, #4]
}
 800bdac:	e7be      	b.n	800bd2c <HAL_I2C_Mem_Read+0x100>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bdae:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800bdb2:	628b      	str	r3, [r1, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bdb4:	4632      	mov	r2, r6
 800bdb6:	4621      	mov	r1, r4
 800bdb8:	4628      	mov	r0, r5
 800bdba:	f7ff fb8f 	bl	800b4dc <I2C_WaitOnTXISFlagUntilTimeout>
 800bdbe:	bb18      	cbnz	r0, 800be08 <HAL_I2C_Mem_Read+0x1dc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bdc0:	6829      	ldr	r1, [r5, #0]
 800bdc2:	fa5f f389 	uxtb.w	r3, r9
 800bdc6:	628b      	str	r3, [r1, #40]	@ 0x28
 800bdc8:	e785      	b.n	800bcd6 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 800bdca:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800bdcc:	4824      	ldr	r0, [pc, #144]	@ (800be60 <HAL_I2C_Mem_Read+0x234>)
 800bdce:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	852b      	strh	r3, [r5, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bdd4:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800bdd6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800bdda:	4001      	ands	r1, r0
 800bddc:	430b      	orrs	r3, r1
 800bdde:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bde2:	6053      	str	r3, [r2, #4]
}
 800bde4:	e7a2      	b.n	800bd2c <HAL_I2C_Mem_Read+0x100>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bde6:	f7fe f8d5 	bl	8009f94 <HAL_GetTick>
 800bdea:	1b83      	subs	r3, r0, r6
 800bdec:	429c      	cmp	r4, r3
 800bdee:	d302      	bcc.n	800bdf6 <HAL_I2C_Mem_Read+0x1ca>
 800bdf0:	b10c      	cbz	r4, 800bdf6 <HAL_I2C_Mem_Read+0x1ca>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdf2:	6829      	ldr	r1, [r5, #0]
 800bdf4:	e76f      	b.n	800bcd6 <HAL_I2C_Mem_Read+0xaa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bdf6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bdf8:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bdfa:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdfc:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bdfe:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800be00:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be04:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800be08:	2300      	movs	r3, #0
 800be0a:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 800be0e:	e796      	b.n	800bd3e <HAL_I2C_Mem_Read+0x112>
      hi2c->XferSize = hi2c->XferCount;
 800be10:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800be12:	4812      	ldr	r0, [pc, #72]	@ (800be5c <HAL_I2C_Mem_Read+0x230>)
      hi2c->XferSize = hi2c->XferCount;
 800be14:	b29b      	uxth	r3, r3
 800be16:	852b      	strh	r3, [r5, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800be18:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800be1a:	684b      	ldr	r3, [r1, #4]
 800be1c:	4003      	ands	r3, r0
 800be1e:	433b      	orrs	r3, r7
 800be20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800be28:	f443 5310 	orr.w	r3, r3, #9216	@ 0x2400
 800be2c:	604b      	str	r3, [r1, #4]
}
 800be2e:	e768      	b.n	800bd02 <HAL_I2C_Mem_Read+0xd6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be30:	4632      	mov	r2, r6
 800be32:	4621      	mov	r1, r4
 800be34:	4628      	mov	r0, r5
 800be36:	f7ff fb79 	bl	800b52c <I2C_WaitOnSTOPFlagUntilTimeout>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	f47f af7f 	bne.w	800bd3e <HAL_I2C_Mem_Read+0x112>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be40:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 800be42:	4c08      	ldr	r4, [pc, #32]	@ (800be64 <HAL_I2C_Mem_Read+0x238>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be44:	2120      	movs	r1, #32
 800be46:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800be48:	685a      	ldr	r2, [r3, #4]
 800be4a:	4022      	ands	r2, r4
 800be4c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800be4e:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800be52:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800be56:	f885 0042 	strb.w	r0, [r5, #66]	@ 0x42
    return HAL_OK;
 800be5a:	e771      	b.n	800bd40 <HAL_I2C_Mem_Read+0x114>
 800be5c:	fc009800 	.word	0xfc009800
 800be60:	fc009c00 	.word	0xfc009c00
 800be64:	fe00e800 	.word	0xfe00e800

0800be68 <HAL_I2C_IsDeviceReady>:
{
 800be68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be6c:	b082      	sub	sp, #8
 800be6e:	4604      	mov	r4, r0
  __IO uint32_t I2C_Trials = 0UL;
 800be70:	2000      	movs	r0, #0
 800be72:	9001      	str	r0, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800be74:	f894 0041 	ldrb.w	r0, [r4, #65]	@ 0x41
 800be78:	2820      	cmp	r0, #32
 800be7a:	d159      	bne.n	800bf30 <HAL_I2C_IsDeviceReady+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800be7c:	4617      	mov	r7, r2
 800be7e:	6822      	ldr	r2, [r4, #0]
 800be80:	461e      	mov	r6, r3
 800be82:	6993      	ldr	r3, [r2, #24]
 800be84:	f413 4300 	ands.w	r3, r3, #32768	@ 0x8000
 800be88:	d152      	bne.n	800bf30 <HAL_I2C_IsDeviceReady+0xc8>
    __HAL_LOCK(hi2c);
 800be8a:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 800be8e:	2801      	cmp	r0, #1
 800be90:	d04e      	beq.n	800bf30 <HAL_I2C_IsDeviceReady+0xc8>
 800be92:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800be96:	2101      	movs	r1, #1
 800be98:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800be9c:	2124      	movs	r1, #36	@ 0x24
 800be9e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800bea2:	f44a 5920 	orr.w	r9, sl, #10240	@ 0x2800
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bea6:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bea8:	f04f 0810 	mov.w	r8, #16
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800beac:	68e3      	ldr	r3, [r4, #12]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	bf06      	itte	eq
 800beb2:	f04a 7300 	orreq.w	r3, sl, #33554432	@ 0x2000000
 800beb6:	f443 5300 	orreq.w	r3, r3, #8192	@ 0x2000
 800beba:	464b      	movne	r3, r9
 800bebc:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800bebe:	f7fe f869 	bl	8009f94 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800bec2:	6821      	ldr	r1, [r4, #0]
      tickstart = HAL_GetTick();
 800bec4:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800bec6:	698b      	ldr	r3, [r1, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bec8:	6988      	ldr	r0, [r1, #24]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800beca:	f003 0320 	and.w	r3, r3, #32
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bece:	f000 0010 	and.w	r0, r0, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800bed2:	4303      	orrs	r3, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800bed4:	460a      	mov	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800bed6:	d113      	bne.n	800bf00 <HAL_I2C_IsDeviceReady+0x98>
        if (Timeout != HAL_MAX_DELAY)
 800bed8:	1c72      	adds	r2, r6, #1
 800beda:	d007      	beq.n	800beec <HAL_I2C_IsDeviceReady+0x84>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bedc:	f7fe f85a 	bl	8009f94 <HAL_GetTick>
 800bee0:	1b40      	subs	r0, r0, r5
 800bee2:	42b0      	cmp	r0, r6
 800bee4:	d83e      	bhi.n	800bf64 <HAL_I2C_IsDeviceReady+0xfc>
 800bee6:	2e00      	cmp	r6, #0
 800bee8:	d03c      	beq.n	800bf64 <HAL_I2C_IsDeviceReady+0xfc>
 800beea:	6821      	ldr	r1, [r4, #0]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800beec:	698a      	ldr	r2, [r1, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800beee:	698b      	ldr	r3, [r1, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800bef0:	f002 0c20 	and.w	ip, r2, #32
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bef4:	f003 0310 	and.w	r3, r3, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800bef8:	ea5c 0c03 	orrs.w	ip, ip, r3
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800befc:	460a      	mov	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800befe:	d0eb      	beq.n	800bed8 <HAL_I2C_IsDeviceReady+0x70>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800bf00:	698b      	ldr	r3, [r1, #24]
 800bf02:	06db      	lsls	r3, r3, #27
 800bf04:	d402      	bmi.n	800bf0c <HAL_I2C_IsDeviceReady+0xa4>
 800bf06:	e019      	b.n	800bf3c <HAL_I2C_IsDeviceReady+0xd4>
    if (Timeout != HAL_MAX_DELAY)
 800bf08:	1c73      	adds	r3, r6, #1
 800bf0a:	d123      	bne.n	800bf54 <HAL_I2C_IsDeviceReady+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf0c:	698b      	ldr	r3, [r1, #24]
 800bf0e:	0698      	lsls	r0, r3, #26
 800bf10:	d5fa      	bpl.n	800bf08 <HAL_I2C_IsDeviceReady+0xa0>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf12:	2320      	movs	r3, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf14:	f8c1 801c 	str.w	r8, [r1, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf18:	61cb      	str	r3, [r1, #28]
      if (I2C_Trials == Trials)
 800bf1a:	9b01      	ldr	r3, [sp, #4]
 800bf1c:	42bb      	cmp	r3, r7
 800bf1e:	d02d      	beq.n	800bf7c <HAL_I2C_IsDeviceReady+0x114>
      I2C_Trials++;
 800bf20:	9b01      	ldr	r3, [sp, #4]
 800bf22:	3301      	adds	r3, #1
 800bf24:	9301      	str	r3, [sp, #4]
    } while (I2C_Trials < Trials);
 800bf26:	9b01      	ldr	r3, [sp, #4]
 800bf28:	42bb      	cmp	r3, r7
 800bf2a:	d21b      	bcs.n	800bf64 <HAL_I2C_IsDeviceReady+0xfc>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800bf2c:	460a      	mov	r2, r1
 800bf2e:	e7bd      	b.n	800beac <HAL_I2C_IsDeviceReady+0x44>
      return HAL_BUSY;
 800bf30:	2002      	movs	r0, #2
}
 800bf32:	b002      	add	sp, #8
 800bf34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (Timeout != HAL_MAX_DELAY)
 800bf38:	1c70      	adds	r0, r6, #1
 800bf3a:	d13e      	bne.n	800bfba <HAL_I2C_IsDeviceReady+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf3c:	6993      	ldr	r3, [r2, #24]
 800bf3e:	0699      	lsls	r1, r3, #26
 800bf40:	d5fa      	bpl.n	800bf38 <HAL_I2C_IsDeviceReady+0xd0>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf42:	2120      	movs	r1, #32
        __HAL_UNLOCK(hi2c);
 800bf44:	2300      	movs	r3, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf46:	61d1      	str	r1, [r2, #28]
        return HAL_OK;
 800bf48:	4618      	mov	r0, r3
        hi2c->State = HAL_I2C_STATE_READY;
 800bf4a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 800bf4e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_OK;
 800bf52:	e7ee      	b.n	800bf32 <HAL_I2C_IsDeviceReady+0xca>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf54:	f7fe f81e 	bl	8009f94 <HAL_GetTick>
 800bf58:	1b40      	subs	r0, r0, r5
 800bf5a:	4286      	cmp	r6, r0
 800bf5c:	d323      	bcc.n	800bfa6 <HAL_I2C_IsDeviceReady+0x13e>
 800bf5e:	b316      	cbz	r6, 800bfa6 <HAL_I2C_IsDeviceReady+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf60:	6821      	ldr	r1, [r4, #0]
 800bf62:	e7d3      	b.n	800bf0c <HAL_I2C_IsDeviceReady+0xa4>
    hi2c->State = HAL_I2C_STATE_READY;
 800bf64:	2320      	movs	r3, #32
 800bf66:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf6a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800bf6c:	f043 0320 	orr.w	r3, r3, #32
 800bf70:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800bf72:	2300      	movs	r3, #0
 800bf74:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            return HAL_ERROR;
 800bf78:	2001      	movs	r0, #1
 800bf7a:	e7da      	b.n	800bf32 <HAL_I2C_IsDeviceReady+0xca>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bf7c:	684b      	ldr	r3, [r1, #4]
 800bf7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bf82:	604b      	str	r3, [r1, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf84:	e001      	b.n	800bf8a <HAL_I2C_IsDeviceReady+0x122>
    if (Timeout != HAL_MAX_DELAY)
 800bf86:	1c72      	adds	r2, r6, #1
 800bf88:	d105      	bne.n	800bf96 <HAL_I2C_IsDeviceReady+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf8a:	698b      	ldr	r3, [r1, #24]
 800bf8c:	069b      	lsls	r3, r3, #26
 800bf8e:	d5fa      	bpl.n	800bf86 <HAL_I2C_IsDeviceReady+0x11e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf90:	2320      	movs	r3, #32
 800bf92:	61cb      	str	r3, [r1, #28]
 800bf94:	e7c4      	b.n	800bf20 <HAL_I2C_IsDeviceReady+0xb8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf96:	f7fd fffd 	bl	8009f94 <HAL_GetTick>
 800bf9a:	1b43      	subs	r3, r0, r5
 800bf9c:	429e      	cmp	r6, r3
 800bf9e:	d302      	bcc.n	800bfa6 <HAL_I2C_IsDeviceReady+0x13e>
 800bfa0:	b10e      	cbz	r6, 800bfa6 <HAL_I2C_IsDeviceReady+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfa2:	6821      	ldr	r1, [r4, #0]
 800bfa4:	e7f1      	b.n	800bf8a <HAL_I2C_IsDeviceReady+0x122>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bfa6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bfa8:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bfaa:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfac:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bfae:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bfb0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfb4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 800bfb8:	e7db      	b.n	800bf72 <HAL_I2C_IsDeviceReady+0x10a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfba:	f7fd ffeb 	bl	8009f94 <HAL_GetTick>
 800bfbe:	1b43      	subs	r3, r0, r5
 800bfc0:	429e      	cmp	r6, r3
 800bfc2:	d3f0      	bcc.n	800bfa6 <HAL_I2C_IsDeviceReady+0x13e>
 800bfc4:	2e00      	cmp	r6, #0
 800bfc6:	d0ee      	beq.n	800bfa6 <HAL_I2C_IsDeviceReady+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfc8:	6822      	ldr	r2, [r4, #0]
 800bfca:	e7b7      	b.n	800bf3c <HAL_I2C_IsDeviceReady+0xd4>

0800bfcc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bfcc:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800bfd0:	2a20      	cmp	r2, #32
 800bfd2:	d123      	bne.n	800c01c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800bfd4:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bfd8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800bfdc:	2a01      	cmp	r2, #1
 800bfde:	4603      	mov	r3, r0
 800bfe0:	d01c      	beq.n	800c01c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bfe2:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800bfe4:	2024      	movs	r0, #36	@ 0x24
{
 800bfe6:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 800bfe8:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 800bfec:	6810      	ldr	r0, [r2, #0]
 800bfee:	f020 0001 	bic.w	r0, r0, #1
 800bff2:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bff4:	6810      	ldr	r0, [r2, #0]
 800bff6:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800bffa:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bffc:	6810      	ldr	r0, [r2, #0]
 800bffe:	4301      	orrs	r1, r0
 800c000:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c002:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c004:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 800c008:	f041 0101 	orr.w	r1, r1, #1
 800c00c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c00e:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800c012:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 800c016:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c018:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800c01c:	2002      	movs	r0, #2
}
 800c01e:	4770      	bx	lr

0800c020 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c020:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800c024:	2a20      	cmp	r2, #32
 800c026:	d122      	bne.n	800c06e <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 800c028:	b500      	push	{lr}
 800c02a:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c02e:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800c032:	2a01      	cmp	r2, #1
 800c034:	4603      	mov	r3, r0
 800c036:	d01c      	beq.n	800c072 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c038:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c03a:	2024      	movs	r0, #36	@ 0x24
 800c03c:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 800c040:	6810      	ldr	r0, [r2, #0]
 800c042:	f020 0001 	bic.w	r0, r0, #1
 800c046:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c048:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c04a:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c04e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c052:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c054:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c056:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 800c05a:	f041 0101 	orr.w	r1, r1, #1
 800c05e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c060:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800c064:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 800c068:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c06a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800c06e:	2002      	movs	r0, #2
}
 800c070:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800c072:	2002      	movs	r0, #2
}
 800c074:	f85d fb04 	ldr.w	pc, [sp], #4

0800c078 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800c078:	4b02      	ldr	r3, [pc, #8]	@ (800c084 <HAL_PWREx_GetVoltageRange+0xc>)
 800c07a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800c07c:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	40007000 	.word	0x40007000

0800c088 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c088:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800c08c:	d00e      	beq.n	800c0ac <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800c08e:	4a1b      	ldr	r2, [pc, #108]	@ (800c0fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 800c090:	6813      	ldr	r3, [r2, #0]
 800c092:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c09a:	d005      	beq.n	800c0a8 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c09c:	6813      	ldr	r3, [r2, #0]
 800c09e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c0a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c0a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800c0ac:	4913      	ldr	r1, [pc, #76]	@ (800c0fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 800c0ae:	680b      	ldr	r3, [r1, #0]
 800c0b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c0b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0b8:	d0f6      	beq.n	800c0a8 <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c0ba:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c0bc:	4a10      	ldr	r2, [pc, #64]	@ (800c100 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c0be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c0c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c0c6:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c0c8:	6813      	ldr	r3, [r2, #0]
 800c0ca:	4a0e      	ldr	r2, [pc, #56]	@ (800c104 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800c0cc:	2032      	movs	r0, #50	@ 0x32
 800c0ce:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c0d2:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c0d4:	fba2 2303 	umull	r2, r3, r2, r3
 800c0d8:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c0da:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c0dc:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c0e0:	d506      	bpl.n	800c0f0 <HAL_PWREx_ControlVoltageScaling+0x68>
 800c0e2:	e000      	b.n	800c0e6 <HAL_PWREx_ControlVoltageScaling+0x5e>
 800c0e4:	b123      	cbz	r3, 800c0f0 <HAL_PWREx_ControlVoltageScaling+0x68>
 800c0e6:	694a      	ldr	r2, [r1, #20]
 800c0e8:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 800c0ea:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c0ee:	d4f9      	bmi.n	800c0e4 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c0f0:	4b02      	ldr	r3, [pc, #8]	@ (800c0fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	055b      	lsls	r3, r3, #21
 800c0f6:	d5d7      	bpl.n	800c0a8 <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 800c0f8:	2003      	movs	r0, #3
}
 800c0fa:	4770      	bx	lr
 800c0fc:	40007000 	.word	0x40007000
 800c100:	20000004 	.word	0x20000004
 800c104:	431bde83 	.word	0x431bde83

0800c108 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c108:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c10a:	4d20      	ldr	r5, [pc, #128]	@ (800c18c <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800c10c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800c10e:	00db      	lsls	r3, r3, #3
{
 800c110:	b083      	sub	sp, #12
 800c112:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c114:	d51a      	bpl.n	800c14c <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c116:	f7ff ffaf 	bl	800c078 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c11a:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800c11e:	d027      	beq.n	800c170 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c120:	2c80      	cmp	r4, #128	@ 0x80
 800c122:	d82c      	bhi.n	800c17e <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c124:	d02f      	beq.n	800c186 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c126:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 800c12a:	fab4 f484 	clz	r4, r4
 800c12e:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c130:	4917      	ldr	r1, [pc, #92]	@ (800c190 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800c132:	680b      	ldr	r3, [r1, #0]
 800c134:	f023 0307 	bic.w	r3, r3, #7
 800c138:	4323      	orrs	r3, r4
 800c13a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c13c:	6808      	ldr	r0, [r1, #0]
 800c13e:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800c142:	1b00      	subs	r0, r0, r4
 800c144:	bf18      	it	ne
 800c146:	2001      	movne	r0, #1
 800c148:	b003      	add	sp, #12
 800c14a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800c14c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800c14e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c152:	65ab      	str	r3, [r5, #88]	@ 0x58
 800c154:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800c156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c15a:	9301      	str	r3, [sp, #4]
 800c15c:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800c15e:	f7ff ff8b 	bl	800c078 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800c162:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c164:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 800c168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c16c:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c16e:	d1d7      	bne.n	800c120 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 800c170:	2c80      	cmp	r4, #128	@ 0x80
 800c172:	d906      	bls.n	800c182 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800c174:	2ca1      	cmp	r4, #161	@ 0xa1
 800c176:	bf34      	ite	cc
 800c178:	2401      	movcc	r4, #1
 800c17a:	2402      	movcs	r4, #2
 800c17c:	e7d8      	b.n	800c130 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 800c17e:	2403      	movs	r4, #3
 800c180:	e7d6      	b.n	800c130 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c182:	2400      	movs	r4, #0
 800c184:	e7d4      	b.n	800c130 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 800c186:	2402      	movs	r4, #2
 800c188:	e7d2      	b.n	800c130 <RCC_SetFlashLatencyFromMSIRange+0x28>
 800c18a:	bf00      	nop
 800c18c:	40021000 	.word	0x40021000
 800c190:	40022000 	.word	0x40022000

0800c194 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c194:	4a28      	ldr	r2, [pc, #160]	@ (800c238 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c196:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c198:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c19a:	f013 030c 	ands.w	r3, r3, #12
 800c19e:	d005      	beq.n	800c1ac <HAL_RCC_GetSysClockFreq+0x18>
 800c1a0:	2b0c      	cmp	r3, #12
 800c1a2:	d035      	beq.n	800c210 <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c1a4:	2b04      	cmp	r3, #4
 800c1a6:	d141      	bne.n	800c22c <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 800c1a8:	4824      	ldr	r0, [pc, #144]	@ (800c23c <HAL_RCC_GetSysClockFreq+0xa8>)
 800c1aa:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c1ac:	4a22      	ldr	r2, [pc, #136]	@ (800c238 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c1ae:	6811      	ldr	r1, [r2, #0]
 800c1b0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c1b2:	bf54      	ite	pl
 800c1b4:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c1b8:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 800c1ba:	4921      	ldr	r1, [pc, #132]	@ (800c240 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c1bc:	bf54      	ite	pl
 800c1be:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c1c2:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800c1c6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c1ca:	b303      	cbz	r3, 800c20e <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c1cc:	2b0c      	cmp	r3, #12
 800c1ce:	d11d      	bne.n	800c20c <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c1d0:	4b19      	ldr	r3, [pc, #100]	@ (800c238 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800c1d8:	2b02      	cmp	r3, #2
 800c1da:	d025      	beq.n	800c228 <HAL_RCC_GetSysClockFreq+0x94>
 800c1dc:	4a19      	ldr	r2, [pc, #100]	@ (800c244 <HAL_RCC_GetSysClockFreq+0xb0>)
 800c1de:	2b03      	cmp	r3, #3
 800c1e0:	bf08      	it	eq
 800c1e2:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c1e4:	4b14      	ldr	r3, [pc, #80]	@ (800c238 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c1e6:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c1e8:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c1f0:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c1f4:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c1f8:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c1fa:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c1fe:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c200:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c202:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800c206:	fbb2 f0f3 	udiv	r0, r2, r3
 800c20a:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c20c:	2000      	movs	r0, #0
}
 800c20e:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c210:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c214:	2a01      	cmp	r2, #1
 800c216:	d0c9      	beq.n	800c1ac <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c218:	4b07      	ldr	r3, [pc, #28]	@ (800c238 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800c220:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c222:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 800c226:	d1d9      	bne.n	800c1dc <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 800c228:	4804      	ldr	r0, [pc, #16]	@ (800c23c <HAL_RCC_GetSysClockFreq+0xa8>)
 800c22a:	e7db      	b.n	800c1e4 <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 800c22c:	2b08      	cmp	r3, #8
 800c22e:	4805      	ldr	r0, [pc, #20]	@ (800c244 <HAL_RCC_GetSysClockFreq+0xb0>)
 800c230:	bf18      	it	ne
 800c232:	2000      	movne	r0, #0
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	40021000 	.word	0x40021000
 800c23c:	00f42400 	.word	0x00f42400
 800c240:	0801694c 	.word	0x0801694c
 800c244:	007a1200 	.word	0x007a1200

0800c248 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800c248:	2800      	cmp	r0, #0
 800c24a:	f000 8300 	beq.w	800c84e <HAL_RCC_OscConfig+0x606>
{
 800c24e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c252:	4a94      	ldr	r2, [pc, #592]	@ (800c4a4 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c254:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c256:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c258:	68d6      	ldr	r6, [r2, #12]
 800c25a:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c25c:	06d8      	lsls	r0, r3, #27
{
 800c25e:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c260:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c264:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c268:	d52e      	bpl.n	800c2c8 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c26a:	2d00      	cmp	r5, #0
 800c26c:	f000 8123 	beq.w	800c4b6 <HAL_RCC_OscConfig+0x26e>
 800c270:	2d0c      	cmp	r5, #12
 800c272:	f000 811d 	beq.w	800c4b0 <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c276:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 800c278:	4f8a      	ldr	r7, [pc, #552]	@ (800c4a4 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	f000 8192 	beq.w	800c5a4 <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_MSI_ENABLE();
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	f043 0301 	orr.w	r3, r3, #1
 800c286:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800c288:	f7fd fe84 	bl	8009f94 <HAL_GetTick>
 800c28c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c28e:	e006      	b.n	800c29e <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c290:	f7fd fe80 	bl	8009f94 <HAL_GetTick>
 800c294:	eba0 0008 	sub.w	r0, r0, r8
 800c298:	2802      	cmp	r0, #2
 800c29a:	f200 8193 	bhi.w	800c5c4 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	079b      	lsls	r3, r3, #30
 800c2a2:	d5f5      	bpl.n	800c290 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	f043 0308 	orr.w	r3, r3, #8
 800c2aa:	603b      	str	r3, [r7, #0]
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	6a22      	ldr	r2, [r4, #32]
 800c2b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	69e2      	ldr	r2, [r4, #28]
 800c2bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c2c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c2c4:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c2c6:	6823      	ldr	r3, [r4, #0]
 800c2c8:	07d9      	lsls	r1, r3, #31
 800c2ca:	f100 80c1 	bmi.w	800c450 <HAL_RCC_OscConfig+0x208>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c2ce:	0799      	lsls	r1, r3, #30
 800c2d0:	d523      	bpl.n	800c31a <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c2d2:	2d04      	cmp	r5, #4
 800c2d4:	f000 8156 	beq.w	800c584 <HAL_RCC_OscConfig+0x33c>
 800c2d8:	2d0c      	cmp	r5, #12
 800c2da:	f000 8150 	beq.w	800c57e <HAL_RCC_OscConfig+0x336>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c2de:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800c2e0:	4e70      	ldr	r6, [pc, #448]	@ (800c4a4 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f000 8189 	beq.w	800c5fa <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_ENABLE();
 800c2e8:	6833      	ldr	r3, [r6, #0]
 800c2ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2ee:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800c2f0:	f7fd fe50 	bl	8009f94 <HAL_GetTick>
 800c2f4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c2f6:	e005      	b.n	800c304 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c2f8:	f7fd fe4c 	bl	8009f94 <HAL_GetTick>
 800c2fc:	1bc0      	subs	r0, r0, r7
 800c2fe:	2802      	cmp	r0, #2
 800c300:	f200 8160 	bhi.w	800c5c4 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c304:	6833      	ldr	r3, [r6, #0]
 800c306:	055b      	lsls	r3, r3, #21
 800c308:	d5f6      	bpl.n	800c2f8 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c30a:	6873      	ldr	r3, [r6, #4]
 800c30c:	6922      	ldr	r2, [r4, #16]
 800c30e:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800c312:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c316:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	0719      	lsls	r1, r3, #28
 800c31c:	d519      	bpl.n	800c352 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c31e:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800c320:	4e60      	ldr	r6, [pc, #384]	@ (800c4a4 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c322:	2b00      	cmp	r3, #0
 800c324:	f000 8117 	beq.w	800c556 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_LSI_ENABLE();
 800c328:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800c32c:	f043 0301 	orr.w	r3, r3, #1
 800c330:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800c334:	f7fd fe2e 	bl	8009f94 <HAL_GetTick>
 800c338:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c33a:	e005      	b.n	800c348 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c33c:	f7fd fe2a 	bl	8009f94 <HAL_GetTick>
 800c340:	1bc0      	subs	r0, r0, r7
 800c342:	2802      	cmp	r0, #2
 800c344:	f200 813e 	bhi.w	800c5c4 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c348:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800c34c:	079a      	lsls	r2, r3, #30
 800c34e:	d5f5      	bpl.n	800c33c <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	075f      	lsls	r7, r3, #29
 800c354:	d53f      	bpl.n	800c3d6 <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c356:	4b53      	ldr	r3, [pc, #332]	@ (800c4a4 <HAL_RCC_OscConfig+0x25c>)
 800c358:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c35a:	00d6      	lsls	r6, r2, #3
 800c35c:	f100 814b 	bmi.w	800c5f6 <HAL_RCC_OscConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 800c360:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c362:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800c366:	659a      	str	r2, [r3, #88]	@ 0x58
 800c368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c36a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c36e:	9301      	str	r3, [sp, #4]
 800c370:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800c372:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c374:	4f4c      	ldr	r7, [pc, #304]	@ (800c4a8 <HAL_RCC_OscConfig+0x260>)
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	05d8      	lsls	r0, r3, #23
 800c37a:	f140 8198 	bpl.w	800c6ae <HAL_RCC_OscConfig+0x466>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c37e:	68a3      	ldr	r3, [r4, #8]
 800c380:	2b01      	cmp	r3, #1
 800c382:	f000 814c 	beq.w	800c61e <HAL_RCC_OscConfig+0x3d6>
 800c386:	2b05      	cmp	r3, #5
 800c388:	f000 81bc 	beq.w	800c704 <HAL_RCC_OscConfig+0x4bc>
 800c38c:	4f45      	ldr	r7, [pc, #276]	@ (800c4a4 <HAL_RCC_OscConfig+0x25c>)
 800c38e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800c392:	f022 0201 	bic.w	r2, r2, #1
 800c396:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800c39a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800c39e:	f022 0204 	bic.w	r2, r2, #4
 800c3a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	f040 8140 	bne.w	800c62c <HAL_RCC_OscConfig+0x3e4>
      tickstart = HAL_GetTick();
 800c3ac:	f7fd fdf2 	bl	8009f94 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3b0:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800c3b4:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c3b6:	e006      	b.n	800c3c6 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3b8:	f7fd fdec 	bl	8009f94 <HAL_GetTick>
 800c3bc:	eba0 0008 	sub.w	r0, r0, r8
 800c3c0:	4548      	cmp	r0, r9
 800c3c2:	f200 80ff 	bhi.w	800c5c4 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c3c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c3ca:	079b      	lsls	r3, r3, #30
 800c3cc:	d4f4      	bmi.n	800c3b8 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 800c3ce:	2e00      	cmp	r6, #0
 800c3d0:	f040 817f 	bne.w	800c6d2 <HAL_RCC_OscConfig+0x48a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c3d4:	6823      	ldr	r3, [r4, #0]
 800c3d6:	0698      	lsls	r0, r3, #26
 800c3d8:	d518      	bpl.n	800c40c <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c3da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 800c3dc:	4e31      	ldr	r6, [pc, #196]	@ (800c4a4 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f000 8151 	beq.w	800c686 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_ENABLE();
 800c3e4:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800c3e8:	f043 0301 	orr.w	r3, r3, #1
 800c3ec:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800c3f0:	f7fd fdd0 	bl	8009f94 <HAL_GetTick>
 800c3f4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c3f6:	e005      	b.n	800c404 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c3f8:	f7fd fdcc 	bl	8009f94 <HAL_GetTick>
 800c3fc:	1bc0      	subs	r0, r0, r7
 800c3fe:	2802      	cmp	r0, #2
 800c400:	f200 80e0 	bhi.w	800c5c4 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c404:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800c408:	0799      	lsls	r1, r3, #30
 800c40a:	d5f5      	bpl.n	800c3f8 <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c40c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c40e:	b1db      	cbz	r3, 800c448 <HAL_RCC_OscConfig+0x200>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c410:	2b02      	cmp	r3, #2
 800c412:	f000 8185 	beq.w	800c720 <HAL_RCC_OscConfig+0x4d8>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c416:	2d0c      	cmp	r5, #12
 800c418:	f000 808f 	beq.w	800c53a <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_PLL_DISABLE();
 800c41c:	4c21      	ldr	r4, [pc, #132]	@ (800c4a4 <HAL_RCC_OscConfig+0x25c>)
 800c41e:	6823      	ldr	r3, [r4, #0]
 800c420:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c424:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800c426:	f7fd fdb5 	bl	8009f94 <HAL_GetTick>
 800c42a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c42c:	e005      	b.n	800c43a <HAL_RCC_OscConfig+0x1f2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c42e:	f7fd fdb1 	bl	8009f94 <HAL_GetTick>
 800c432:	1b40      	subs	r0, r0, r5
 800c434:	2802      	cmp	r0, #2
 800c436:	f200 80c5 	bhi.w	800c5c4 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	019b      	lsls	r3, r3, #6
 800c43e:	d4f6      	bmi.n	800c42e <HAL_RCC_OscConfig+0x1e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c440:	68e2      	ldr	r2, [r4, #12]
 800c442:	4b1a      	ldr	r3, [pc, #104]	@ (800c4ac <HAL_RCC_OscConfig+0x264>)
 800c444:	4013      	ands	r3, r2
 800c446:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 800c448:	2000      	movs	r0, #0
}
 800c44a:	b003      	add	sp, #12
 800c44c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c450:	2d08      	cmp	r5, #8
 800c452:	d076      	beq.n	800c542 <HAL_RCC_OscConfig+0x2fa>
 800c454:	2d0c      	cmp	r5, #12
 800c456:	d072      	beq.n	800c53e <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c458:	6863      	ldr	r3, [r4, #4]
 800c45a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c45e:	f000 80b5 	beq.w	800c5cc <HAL_RCC_OscConfig+0x384>
 800c462:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c466:	f000 8140 	beq.w	800c6ea <HAL_RCC_OscConfig+0x4a2>
 800c46a:	4f0e      	ldr	r7, [pc, #56]	@ (800c4a4 <HAL_RCC_OscConfig+0x25c>)
 800c46c:	683a      	ldr	r2, [r7, #0]
 800c46e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c472:	603a      	str	r2, [r7, #0]
 800c474:	683a      	ldr	r2, [r7, #0]
 800c476:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c47a:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f040 80aa 	bne.w	800c5d6 <HAL_RCC_OscConfig+0x38e>
        tickstart = HAL_GetTick();
 800c482:	f7fd fd87 	bl	8009f94 <HAL_GetTick>
 800c486:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c488:	e006      	b.n	800c498 <HAL_RCC_OscConfig+0x250>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c48a:	f7fd fd83 	bl	8009f94 <HAL_GetTick>
 800c48e:	eba0 0008 	sub.w	r0, r0, r8
 800c492:	2864      	cmp	r0, #100	@ 0x64
 800c494:	f200 8096 	bhi.w	800c5c4 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	0398      	lsls	r0, r3, #14
 800c49c:	d4f5      	bmi.n	800c48a <HAL_RCC_OscConfig+0x242>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c49e:	6823      	ldr	r3, [r4, #0]
 800c4a0:	e715      	b.n	800c2ce <HAL_RCC_OscConfig+0x86>
 800c4a2:	bf00      	nop
 800c4a4:	40021000 	.word	0x40021000
 800c4a8:	40007000 	.word	0x40007000
 800c4ac:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c4b0:	2e01      	cmp	r6, #1
 800c4b2:	f47f aee0 	bne.w	800c276 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c4b6:	4ba6      	ldr	r3, [pc, #664]	@ (800c750 <HAL_RCC_OscConfig+0x508>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	0799      	lsls	r1, r3, #30
 800c4bc:	d43a      	bmi.n	800c534 <HAL_RCC_OscConfig+0x2ec>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c4be:	4ba4      	ldr	r3, [pc, #656]	@ (800c750 <HAL_RCC_OscConfig+0x508>)
 800c4c0:	6a20      	ldr	r0, [r4, #32]
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	0712      	lsls	r2, r2, #28
 800c4c6:	bf56      	itet	pl
 800c4c8:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 800c4cc:	681b      	ldrmi	r3, [r3, #0]
 800c4ce:	091b      	lsrpl	r3, r3, #4
 800c4d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c4d4:	4298      	cmp	r0, r3
 800c4d6:	f200 80be 	bhi.w	800c656 <HAL_RCC_OscConfig+0x40e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c4da:	4b9d      	ldr	r3, [pc, #628]	@ (800c750 <HAL_RCC_OscConfig+0x508>)
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	f042 0208 	orr.w	r2, r2, #8
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800c4ea:	4302      	orrs	r2, r0
 800c4ec:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c4ee:	685a      	ldr	r2, [r3, #4]
 800c4f0:	69e1      	ldr	r1, [r4, #28]
 800c4f2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800c4f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c4fa:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c4fc:	2d00      	cmp	r5, #0
 800c4fe:	f000 80ee 	beq.w	800c6de <HAL_RCC_OscConfig+0x496>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c502:	f7ff fe47 	bl	800c194 <HAL_RCC_GetSysClockFreq>
 800c506:	4b92      	ldr	r3, [pc, #584]	@ (800c750 <HAL_RCC_OscConfig+0x508>)
 800c508:	4a92      	ldr	r2, [pc, #584]	@ (800c754 <HAL_RCC_OscConfig+0x50c>)
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c510:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 800c512:	4a91      	ldr	r2, [pc, #580]	@ (800c758 <HAL_RCC_OscConfig+0x510>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c514:	f003 031f 	and.w	r3, r3, #31
 800c518:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 800c51c:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c51e:	4a8f      	ldr	r2, [pc, #572]	@ (800c75c <HAL_RCC_OscConfig+0x514>)
 800c520:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800c522:	f7fa fe0d 	bl	8007140 <HAL_InitTick>
        if(status != HAL_OK)
 800c526:	2800      	cmp	r0, #0
 800c528:	d18f      	bne.n	800c44a <HAL_RCC_OscConfig+0x202>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c52a:	6823      	ldr	r3, [r4, #0]
 800c52c:	07d9      	lsls	r1, r3, #31
 800c52e:	f57f aece 	bpl.w	800c2ce <HAL_RCC_OscConfig+0x86>
 800c532:	e78d      	b.n	800c450 <HAL_RCC_OscConfig+0x208>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c534:	69a3      	ldr	r3, [r4, #24]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1c1      	bne.n	800c4be <HAL_RCC_OscConfig+0x276>
    return HAL_ERROR;
 800c53a:	2001      	movs	r0, #1
 800c53c:	e785      	b.n	800c44a <HAL_RCC_OscConfig+0x202>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c53e:	2e03      	cmp	r6, #3
 800c540:	d18a      	bne.n	800c458 <HAL_RCC_OscConfig+0x210>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c542:	4a83      	ldr	r2, [pc, #524]	@ (800c750 <HAL_RCC_OscConfig+0x508>)
 800c544:	6812      	ldr	r2, [r2, #0]
 800c546:	0392      	lsls	r2, r2, #14
 800c548:	f57f aec1 	bpl.w	800c2ce <HAL_RCC_OscConfig+0x86>
 800c54c:	6862      	ldr	r2, [r4, #4]
 800c54e:	2a00      	cmp	r2, #0
 800c550:	f47f aebd 	bne.w	800c2ce <HAL_RCC_OscConfig+0x86>
 800c554:	e7f1      	b.n	800c53a <HAL_RCC_OscConfig+0x2f2>
      __HAL_RCC_LSI_DISABLE();
 800c556:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800c55a:	f023 0301 	bic.w	r3, r3, #1
 800c55e:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800c562:	f7fd fd17 	bl	8009f94 <HAL_GetTick>
 800c566:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c568:	e004      	b.n	800c574 <HAL_RCC_OscConfig+0x32c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c56a:	f7fd fd13 	bl	8009f94 <HAL_GetTick>
 800c56e:	1bc0      	subs	r0, r0, r7
 800c570:	2802      	cmp	r0, #2
 800c572:	d827      	bhi.n	800c5c4 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c574:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800c578:	079b      	lsls	r3, r3, #30
 800c57a:	d4f6      	bmi.n	800c56a <HAL_RCC_OscConfig+0x322>
 800c57c:	e6e8      	b.n	800c350 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c57e:	2e02      	cmp	r6, #2
 800c580:	f47f aead 	bne.w	800c2de <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c584:	4a72      	ldr	r2, [pc, #456]	@ (800c750 <HAL_RCC_OscConfig+0x508>)
 800c586:	6812      	ldr	r2, [r2, #0]
 800c588:	0552      	lsls	r2, r2, #21
 800c58a:	d502      	bpl.n	800c592 <HAL_RCC_OscConfig+0x34a>
 800c58c:	68e2      	ldr	r2, [r4, #12]
 800c58e:	2a00      	cmp	r2, #0
 800c590:	d0d3      	beq.n	800c53a <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c592:	496f      	ldr	r1, [pc, #444]	@ (800c750 <HAL_RCC_OscConfig+0x508>)
 800c594:	6920      	ldr	r0, [r4, #16]
 800c596:	684a      	ldr	r2, [r1, #4]
 800c598:	f022 52f8 	bic.w	r2, r2, #520093696	@ 0x1f000000
 800c59c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800c5a0:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c5a2:	e6ba      	b.n	800c31a <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	f023 0301 	bic.w	r3, r3, #1
 800c5aa:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800c5ac:	f7fd fcf2 	bl	8009f94 <HAL_GetTick>
 800c5b0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	0798      	lsls	r0, r3, #30
 800c5b6:	d5b8      	bpl.n	800c52a <HAL_RCC_OscConfig+0x2e2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c5b8:	f7fd fcec 	bl	8009f94 <HAL_GetTick>
 800c5bc:	eba0 0008 	sub.w	r0, r0, r8
 800c5c0:	2802      	cmp	r0, #2
 800c5c2:	d9f6      	bls.n	800c5b2 <HAL_RCC_OscConfig+0x36a>
            return HAL_TIMEOUT;
 800c5c4:	2003      	movs	r0, #3
}
 800c5c6:	b003      	add	sp, #12
 800c5c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c5cc:	4a60      	ldr	r2, [pc, #384]	@ (800c750 <HAL_RCC_OscConfig+0x508>)
 800c5ce:	6813      	ldr	r3, [r2, #0]
 800c5d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c5d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800c5d6:	f7fd fcdd 	bl	8009f94 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c5da:	f8df 8174 	ldr.w	r8, [pc, #372]	@ 800c750 <HAL_RCC_OscConfig+0x508>
        tickstart = HAL_GetTick();
 800c5de:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c5e0:	e004      	b.n	800c5ec <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c5e2:	f7fd fcd7 	bl	8009f94 <HAL_GetTick>
 800c5e6:	1bc0      	subs	r0, r0, r7
 800c5e8:	2864      	cmp	r0, #100	@ 0x64
 800c5ea:	d8eb      	bhi.n	800c5c4 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c5ec:	f8d8 3000 	ldr.w	r3, [r8]
 800c5f0:	039b      	lsls	r3, r3, #14
 800c5f2:	d5f6      	bpl.n	800c5e2 <HAL_RCC_OscConfig+0x39a>
 800c5f4:	e753      	b.n	800c49e <HAL_RCC_OscConfig+0x256>
    FlagStatus       pwrclkchanged = RESET;
 800c5f6:	2600      	movs	r6, #0
 800c5f8:	e6bc      	b.n	800c374 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 800c5fa:	6833      	ldr	r3, [r6, #0]
 800c5fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c600:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800c602:	f7fd fcc7 	bl	8009f94 <HAL_GetTick>
 800c606:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c608:	e004      	b.n	800c614 <HAL_RCC_OscConfig+0x3cc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c60a:	f7fd fcc3 	bl	8009f94 <HAL_GetTick>
 800c60e:	1bc0      	subs	r0, r0, r7
 800c610:	2802      	cmp	r0, #2
 800c612:	d8d7      	bhi.n	800c5c4 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c614:	6833      	ldr	r3, [r6, #0]
 800c616:	0558      	lsls	r0, r3, #21
 800c618:	d4f7      	bmi.n	800c60a <HAL_RCC_OscConfig+0x3c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c61a:	6823      	ldr	r3, [r4, #0]
 800c61c:	e67d      	b.n	800c31a <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c61e:	4a4c      	ldr	r2, [pc, #304]	@ (800c750 <HAL_RCC_OscConfig+0x508>)
 800c620:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800c624:	f043 0301 	orr.w	r3, r3, #1
 800c628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 800c62c:	f7fd fcb2 	bl	8009f94 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c630:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 800c750 <HAL_RCC_OscConfig+0x508>
      tickstart = HAL_GetTick();
 800c634:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c636:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c63a:	e004      	b.n	800c646 <HAL_RCC_OscConfig+0x3fe>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c63c:	f7fd fcaa 	bl	8009f94 <HAL_GetTick>
 800c640:	1bc0      	subs	r0, r0, r7
 800c642:	4548      	cmp	r0, r9
 800c644:	d8be      	bhi.n	800c5c4 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c646:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 800c64a:	079a      	lsls	r2, r3, #30
 800c64c:	d5f6      	bpl.n	800c63c <HAL_RCC_OscConfig+0x3f4>
    if(pwrclkchanged == SET)
 800c64e:	2e00      	cmp	r6, #0
 800c650:	f43f aec0 	beq.w	800c3d4 <HAL_RCC_OscConfig+0x18c>
 800c654:	e03d      	b.n	800c6d2 <HAL_RCC_OscConfig+0x48a>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c656:	f7ff fd57 	bl	800c108 <RCC_SetFlashLatencyFromMSIRange>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	f47f af6d 	bne.w	800c53a <HAL_RCC_OscConfig+0x2f2>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c660:	4b3b      	ldr	r3, [pc, #236]	@ (800c750 <HAL_RCC_OscConfig+0x508>)
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	f042 0208 	orr.w	r2, r2, #8
 800c668:	601a      	str	r2, [r3, #0]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	6a21      	ldr	r1, [r4, #32]
 800c66e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800c672:	430a      	orrs	r2, r1
 800c674:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	69e1      	ldr	r1, [r4, #28]
 800c67a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800c67e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c682:	605a      	str	r2, [r3, #4]
 800c684:	e73d      	b.n	800c502 <HAL_RCC_OscConfig+0x2ba>
      __HAL_RCC_HSI48_DISABLE();
 800c686:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800c68a:	f023 0301 	bic.w	r3, r3, #1
 800c68e:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800c692:	f7fd fc7f 	bl	8009f94 <HAL_GetTick>
 800c696:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c698:	e004      	b.n	800c6a4 <HAL_RCC_OscConfig+0x45c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c69a:	f7fd fc7b 	bl	8009f94 <HAL_GetTick>
 800c69e:	1bc0      	subs	r0, r0, r7
 800c6a0:	2802      	cmp	r0, #2
 800c6a2:	d88f      	bhi.n	800c5c4 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c6a4:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800c6a8:	079a      	lsls	r2, r3, #30
 800c6aa:	d4f6      	bmi.n	800c69a <HAL_RCC_OscConfig+0x452>
 800c6ac:	e6ae      	b.n	800c40c <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6b4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800c6b6:	f7fd fc6d 	bl	8009f94 <HAL_GetTick>
 800c6ba:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	05d9      	lsls	r1, r3, #23
 800c6c0:	f53f ae5d 	bmi.w	800c37e <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c6c4:	f7fd fc66 	bl	8009f94 <HAL_GetTick>
 800c6c8:	eba0 0008 	sub.w	r0, r0, r8
 800c6cc:	2802      	cmp	r0, #2
 800c6ce:	d9f5      	bls.n	800c6bc <HAL_RCC_OscConfig+0x474>
 800c6d0:	e778      	b.n	800c5c4 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c6d2:	4a1f      	ldr	r2, [pc, #124]	@ (800c750 <HAL_RCC_OscConfig+0x508>)
 800c6d4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c6d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c6da:	6593      	str	r3, [r2, #88]	@ 0x58
 800c6dc:	e67a      	b.n	800c3d4 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c6de:	f7ff fd13 	bl	800c108 <RCC_SetFlashLatencyFromMSIRange>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	f43f af0d 	beq.w	800c502 <HAL_RCC_OscConfig+0x2ba>
 800c6e8:	e727      	b.n	800c53a <HAL_RCC_OscConfig+0x2f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c6ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6ee:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c6f8:	601a      	str	r2, [r3, #0]
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c700:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c702:	e768      	b.n	800c5d6 <HAL_RCC_OscConfig+0x38e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c704:	4b12      	ldr	r3, [pc, #72]	@ (800c750 <HAL_RCC_OscConfig+0x508>)
 800c706:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800c70a:	f042 0204 	orr.w	r2, r2, #4
 800c70e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800c712:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800c716:	f042 0201 	orr.w	r2, r2, #1
 800c71a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c71e:	e785      	b.n	800c62c <HAL_RCC_OscConfig+0x3e4>
      pll_config = RCC->PLLCFGR;
 800c720:	4e0b      	ldr	r6, [pc, #44]	@ (800c750 <HAL_RCC_OscConfig+0x508>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c722:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 800c724:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c726:	f003 0103 	and.w	r1, r3, #3
 800c72a:	4291      	cmp	r1, r2
 800c72c:	d052      	beq.n	800c7d4 <HAL_RCC_OscConfig+0x58c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c72e:	2d0c      	cmp	r5, #12
 800c730:	f43f af03 	beq.w	800c53a <HAL_RCC_OscConfig+0x2f2>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c734:	4d06      	ldr	r5, [pc, #24]	@ (800c750 <HAL_RCC_OscConfig+0x508>)
 800c736:	682b      	ldr	r3, [r5, #0]
 800c738:	015b      	lsls	r3, r3, #5
 800c73a:	f53f aefe 	bmi.w	800c53a <HAL_RCC_OscConfig+0x2f2>
            __HAL_RCC_PLL_DISABLE();
 800c73e:	682b      	ldr	r3, [r5, #0]
 800c740:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c744:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800c746:	f7fd fc25 	bl	8009f94 <HAL_GetTick>
 800c74a:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c74c:	e00e      	b.n	800c76c <HAL_RCC_OscConfig+0x524>
 800c74e:	bf00      	nop
 800c750:	40021000 	.word	0x40021000
 800c754:	08016984 	.word	0x08016984
 800c758:	20000014 	.word	0x20000014
 800c75c:	20000004 	.word	0x20000004
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c760:	f7fd fc18 	bl	8009f94 <HAL_GetTick>
 800c764:	1b80      	subs	r0, r0, r6
 800c766:	2802      	cmp	r0, #2
 800c768:	f63f af2c 	bhi.w	800c5c4 <HAL_RCC_OscConfig+0x37c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c76c:	682b      	ldr	r3, [r5, #0]
 800c76e:	019f      	lsls	r7, r3, #6
 800c770:	d4f6      	bmi.n	800c760 <HAL_RCC_OscConfig+0x518>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c772:	68e9      	ldr	r1, [r5, #12]
 800c774:	4b37      	ldr	r3, [pc, #220]	@ (800c854 <HAL_RCC_OscConfig+0x60c>)
 800c776:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c778:	6b20      	ldr	r0, [r4, #48]	@ 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c77a:	4e37      	ldr	r6, [pc, #220]	@ (800c858 <HAL_RCC_OscConfig+0x610>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c77c:	400b      	ands	r3, r1
 800c77e:	4313      	orrs	r3, r2
 800c780:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	@ 0x34
 800c784:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c788:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800c78c:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 800c790:	3801      	subs	r0, #1
 800c792:	0849      	lsrs	r1, r1, #1
 800c794:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800c798:	3901      	subs	r1, #1
 800c79a:	0852      	lsrs	r2, r2, #1
 800c79c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800c7a0:	3a01      	subs	r2, #1
 800c7a2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800c7a6:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 800c7a8:	682b      	ldr	r3, [r5, #0]
 800c7aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c7ae:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c7b0:	68eb      	ldr	r3, [r5, #12]
 800c7b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c7b6:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 800c7b8:	f7fd fbec 	bl	8009f94 <HAL_GetTick>
 800c7bc:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7be:	e005      	b.n	800c7cc <HAL_RCC_OscConfig+0x584>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7c0:	f7fd fbe8 	bl	8009f94 <HAL_GetTick>
 800c7c4:	1b00      	subs	r0, r0, r4
 800c7c6:	2802      	cmp	r0, #2
 800c7c8:	f63f aefc 	bhi.w	800c5c4 <HAL_RCC_OscConfig+0x37c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7cc:	6833      	ldr	r3, [r6, #0]
 800c7ce:	0198      	lsls	r0, r3, #6
 800c7d0:	d5f6      	bpl.n	800c7c0 <HAL_RCC_OscConfig+0x578>
 800c7d2:	e639      	b.n	800c448 <HAL_RCC_OscConfig+0x200>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c7d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c7d6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c7da:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c7dc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800c7e0:	d1a5      	bne.n	800c72e <HAL_RCC_OscConfig+0x4e6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c7e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c7e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c7e8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800c7ec:	d19f      	bne.n	800c72e <HAL_RCC_OscConfig+0x4e6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c7ee:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c7f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c7f4:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800c7f8:	d199      	bne.n	800c72e <HAL_RCC_OscConfig+0x4e6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c7fa:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c7fc:	0852      	lsrs	r2, r2, #1
 800c7fe:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800c802:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c804:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800c808:	d191      	bne.n	800c72e <HAL_RCC_OscConfig+0x4e6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c80a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c80c:	0852      	lsrs	r2, r2, #1
 800c80e:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800c812:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c814:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800c818:	d189      	bne.n	800c72e <HAL_RCC_OscConfig+0x4e6>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c81a:	6833      	ldr	r3, [r6, #0]
 800c81c:	0199      	lsls	r1, r3, #6
 800c81e:	f53f ae13 	bmi.w	800c448 <HAL_RCC_OscConfig+0x200>
          __HAL_RCC_PLL_ENABLE();
 800c822:	6833      	ldr	r3, [r6, #0]
 800c824:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c828:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c82a:	68f3      	ldr	r3, [r6, #12]
 800c82c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c830:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 800c832:	f7fd fbaf 	bl	8009f94 <HAL_GetTick>
 800c836:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c838:	e005      	b.n	800c846 <HAL_RCC_OscConfig+0x5fe>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c83a:	f7fd fbab 	bl	8009f94 <HAL_GetTick>
 800c83e:	1b03      	subs	r3, r0, r4
 800c840:	2b02      	cmp	r3, #2
 800c842:	f63f aebf 	bhi.w	800c5c4 <HAL_RCC_OscConfig+0x37c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c846:	6833      	ldr	r3, [r6, #0]
 800c848:	019a      	lsls	r2, r3, #6
 800c84a:	d5f6      	bpl.n	800c83a <HAL_RCC_OscConfig+0x5f2>
 800c84c:	e5fc      	b.n	800c448 <HAL_RCC_OscConfig+0x200>
    return HAL_ERROR;
 800c84e:	2001      	movs	r0, #1
}
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	019d808c 	.word	0x019d808c
 800c858:	40021000 	.word	0x40021000

0800c85c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800c85c:	2800      	cmp	r0, #0
 800c85e:	f000 80a0 	beq.w	800c9a2 <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c862:	4a54      	ldr	r2, [pc, #336]	@ (800c9b4 <HAL_RCC_ClockConfig+0x158>)
 800c864:	6813      	ldr	r3, [r2, #0]
 800c866:	f003 0307 	and.w	r3, r3, #7
 800c86a:	428b      	cmp	r3, r1
{
 800c86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c870:	460d      	mov	r5, r1
 800c872:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c874:	d20c      	bcs.n	800c890 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c876:	6813      	ldr	r3, [r2, #0]
 800c878:	f023 0307 	bic.w	r3, r3, #7
 800c87c:	430b      	orrs	r3, r1
 800c87e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c880:	6813      	ldr	r3, [r2, #0]
 800c882:	f003 0307 	and.w	r3, r3, #7
 800c886:	428b      	cmp	r3, r1
 800c888:	d002      	beq.n	800c890 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800c88a:	2001      	movs	r0, #1
}
 800c88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c890:	6823      	ldr	r3, [r4, #0]
 800c892:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c894:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c898:	d570      	bpl.n	800c97c <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c89a:	4e47      	ldr	r6, [pc, #284]	@ (800c9b8 <HAL_RCC_ClockConfig+0x15c>)
 800c89c:	68a0      	ldr	r0, [r4, #8]
 800c89e:	68b1      	ldr	r1, [r6, #8]
 800c8a0:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 800c8a4:	4288      	cmp	r0, r1
 800c8a6:	d904      	bls.n	800c8b2 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c8a8:	68b1      	ldr	r1, [r6, #8]
 800c8aa:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 800c8ae:	4301      	orrs	r1, r0
 800c8b0:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c8b2:	b332      	cbz	r2, 800c902 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c8b4:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c8b6:	4b40      	ldr	r3, [pc, #256]	@ (800c9b8 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c8b8:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c8ba:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c8bc:	d065      	beq.n	800c98a <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c8be:	2a02      	cmp	r2, #2
 800c8c0:	d06c      	beq.n	800c99c <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c8c2:	2a00      	cmp	r2, #0
 800c8c4:	d171      	bne.n	800c9aa <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c8c6:	079e      	lsls	r6, r3, #30
 800c8c8:	d5df      	bpl.n	800c88a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c8ca:	4e3b      	ldr	r6, [pc, #236]	@ (800c9b8 <HAL_RCC_ClockConfig+0x15c>)
 800c8cc:	68b3      	ldr	r3, [r6, #8]
 800c8ce:	f023 0303 	bic.w	r3, r3, #3
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800c8d6:	f7fd fb5d 	bl	8009f94 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c8da:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800c8de:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c8e0:	e004      	b.n	800c8ec <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c8e2:	f7fd fb57 	bl	8009f94 <HAL_GetTick>
 800c8e6:	1bc0      	subs	r0, r0, r7
 800c8e8:	4540      	cmp	r0, r8
 800c8ea:	d85c      	bhi.n	800c9a6 <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c8ec:	68b3      	ldr	r3, [r6, #8]
 800c8ee:	6862      	ldr	r2, [r4, #4]
 800c8f0:	f003 030c 	and.w	r3, r3, #12
 800c8f4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800c8f8:	d1f3      	bne.n	800c8e2 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	0799      	lsls	r1, r3, #30
 800c8fe:	d506      	bpl.n	800c90e <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c900:	68a0      	ldr	r0, [r4, #8]
 800c902:	492d      	ldr	r1, [pc, #180]	@ (800c9b8 <HAL_RCC_ClockConfig+0x15c>)
 800c904:	688a      	ldr	r2, [r1, #8]
 800c906:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800c90a:	4282      	cmp	r2, r0
 800c90c:	d840      	bhi.n	800c990 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c90e:	4929      	ldr	r1, [pc, #164]	@ (800c9b4 <HAL_RCC_ClockConfig+0x158>)
 800c910:	680a      	ldr	r2, [r1, #0]
 800c912:	f002 0207 	and.w	r2, r2, #7
 800c916:	42aa      	cmp	r2, r5
 800c918:	d909      	bls.n	800c92e <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c91a:	680a      	ldr	r2, [r1, #0]
 800c91c:	f022 0207 	bic.w	r2, r2, #7
 800c920:	432a      	orrs	r2, r5
 800c922:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c924:	680a      	ldr	r2, [r1, #0]
 800c926:	f002 0207 	and.w	r2, r2, #7
 800c92a:	42aa      	cmp	r2, r5
 800c92c:	d1ad      	bne.n	800c88a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c92e:	075a      	lsls	r2, r3, #29
 800c930:	d506      	bpl.n	800c940 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c932:	4921      	ldr	r1, [pc, #132]	@ (800c9b8 <HAL_RCC_ClockConfig+0x15c>)
 800c934:	68e0      	ldr	r0, [r4, #12]
 800c936:	688a      	ldr	r2, [r1, #8]
 800c938:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c93c:	4302      	orrs	r2, r0
 800c93e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c940:	071b      	lsls	r3, r3, #28
 800c942:	d507      	bpl.n	800c954 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c944:	4a1c      	ldr	r2, [pc, #112]	@ (800c9b8 <HAL_RCC_ClockConfig+0x15c>)
 800c946:	6921      	ldr	r1, [r4, #16]
 800c948:	6893      	ldr	r3, [r2, #8]
 800c94a:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800c94e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800c952:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c954:	f7ff fc1e 	bl	800c194 <HAL_RCC_GetSysClockFreq>
 800c958:	4a17      	ldr	r2, [pc, #92]	@ (800c9b8 <HAL_RCC_ClockConfig+0x15c>)
 800c95a:	4c18      	ldr	r4, [pc, #96]	@ (800c9bc <HAL_RCC_ClockConfig+0x160>)
 800c95c:	6892      	ldr	r2, [r2, #8]
 800c95e:	4918      	ldr	r1, [pc, #96]	@ (800c9c0 <HAL_RCC_ClockConfig+0x164>)
 800c960:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800c964:	4603      	mov	r3, r0
 800c966:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 800c968:	4816      	ldr	r0, [pc, #88]	@ (800c9c4 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c96a:	f002 021f 	and.w	r2, r2, #31
 800c96e:	40d3      	lsrs	r3, r2
}
 800c970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800c974:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c976:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 800c978:	f7fa bbe2 	b.w	8007140 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c97c:	2a00      	cmp	r2, #0
 800c97e:	d0c6      	beq.n	800c90e <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c980:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c982:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b8 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c984:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c986:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c988:	d199      	bne.n	800c8be <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c98a:	019b      	lsls	r3, r3, #6
 800c98c:	d49d      	bmi.n	800c8ca <HAL_RCC_ClockConfig+0x6e>
 800c98e:	e77c      	b.n	800c88a <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c990:	688a      	ldr	r2, [r1, #8]
 800c992:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800c996:	4302      	orrs	r2, r0
 800c998:	608a      	str	r2, [r1, #8]
 800c99a:	e7b8      	b.n	800c90e <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c99c:	039f      	lsls	r7, r3, #14
 800c99e:	d494      	bmi.n	800c8ca <HAL_RCC_ClockConfig+0x6e>
 800c9a0:	e773      	b.n	800c88a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800c9a2:	2001      	movs	r0, #1
}
 800c9a4:	4770      	bx	lr
        return HAL_TIMEOUT;
 800c9a6:	2003      	movs	r0, #3
 800c9a8:	e770      	b.n	800c88c <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c9aa:	0558      	lsls	r0, r3, #21
 800c9ac:	f57f af6d 	bpl.w	800c88a <HAL_RCC_ClockConfig+0x2e>
 800c9b0:	e78b      	b.n	800c8ca <HAL_RCC_ClockConfig+0x6e>
 800c9b2:	bf00      	nop
 800c9b4:	40022000 	.word	0x40022000
 800c9b8:	40021000 	.word	0x40021000
 800c9bc:	08016984 	.word	0x08016984
 800c9c0:	20000004 	.word	0x20000004
 800c9c4:	20000014 	.word	0x20000014

0800c9c8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c9c8:	4b05      	ldr	r3, [pc, #20]	@ (800c9e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800c9ca:	4a06      	ldr	r2, [pc, #24]	@ (800c9e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800c9cc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800c9ce:	4906      	ldr	r1, [pc, #24]	@ (800c9e8 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c9d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800c9d4:	6808      	ldr	r0, [r1, #0]
 800c9d6:	5cd3      	ldrb	r3, [r2, r3]
 800c9d8:	f003 031f 	and.w	r3, r3, #31
}
 800c9dc:	40d8      	lsrs	r0, r3
 800c9de:	4770      	bx	lr
 800c9e0:	40021000 	.word	0x40021000
 800c9e4:	0801697c 	.word	0x0801697c
 800c9e8:	20000004 	.word	0x20000004

0800c9ec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c9ec:	4b05      	ldr	r3, [pc, #20]	@ (800ca04 <HAL_RCC_GetPCLK2Freq+0x18>)
 800c9ee:	4a06      	ldr	r2, [pc, #24]	@ (800ca08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800c9f0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800c9f2:	4906      	ldr	r1, [pc, #24]	@ (800ca0c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c9f4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800c9f8:	6808      	ldr	r0, [r1, #0]
 800c9fa:	5cd3      	ldrb	r3, [r2, r3]
 800c9fc:	f003 031f 	and.w	r3, r3, #31
}
 800ca00:	40d8      	lsrs	r0, r3
 800ca02:	4770      	bx	lr
 800ca04:	40021000 	.word	0x40021000
 800ca08:	0801697c 	.word	0x0801697c
 800ca0c:	20000004 	.word	0x20000004

0800ca10 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800ca10:	4b0e      	ldr	r3, [pc, #56]	@ (800ca4c <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ca12:	220f      	movs	r2, #15
 800ca14:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800ca16:	689a      	ldr	r2, [r3, #8]
 800ca18:	f002 0203 	and.w	r2, r2, #3
 800ca1c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800ca1e:	689a      	ldr	r2, [r3, #8]
 800ca20:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800ca24:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800ca26:	689a      	ldr	r2, [r3, #8]
 800ca28:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800ca2c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	08db      	lsrs	r3, r3, #3
{
 800ca32:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800ca34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ca38:	4c05      	ldr	r4, [pc, #20]	@ (800ca50 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800ca3a:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ca3c:	6823      	ldr	r3, [r4, #0]
}
 800ca3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ca42:	f003 0307 	and.w	r3, r3, #7
 800ca46:	600b      	str	r3, [r1, #0]
}
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	40021000 	.word	0x40021000
 800ca50:	40022000 	.word	0x40022000

0800ca54 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ca54:	4a45      	ldr	r2, [pc, #276]	@ (800cb6c <RCCEx_PLLSAI1_Config+0x118>)
{
 800ca56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ca58:	68d6      	ldr	r6, [r2, #12]
{
 800ca5a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ca5c:	07b1      	lsls	r1, r6, #30
{
 800ca5e:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ca60:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ca62:	d006      	beq.n	800ca72 <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ca64:	68d1      	ldr	r1, [r2, #12]
 800ca66:	f001 0103 	and.w	r1, r1, #3
 800ca6a:	4281      	cmp	r1, r0
 800ca6c:	d04b      	beq.n	800cb06 <RCCEx_PLLSAI1_Config+0xb2>
 800ca6e:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 800ca70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800ca72:	2802      	cmp	r0, #2
 800ca74:	d058      	beq.n	800cb28 <RCCEx_PLLSAI1_Config+0xd4>
 800ca76:	2803      	cmp	r0, #3
 800ca78:	d04f      	beq.n	800cb1a <RCCEx_PLLSAI1_Config+0xc6>
 800ca7a:	2801      	cmp	r0, #1
 800ca7c:	d1f7      	bne.n	800ca6e <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ca7e:	6812      	ldr	r2, [r2, #0]
 800ca80:	0793      	lsls	r3, r2, #30
 800ca82:	d5f5      	bpl.n	800ca70 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ca84:	4939      	ldr	r1, [pc, #228]	@ (800cb6c <RCCEx_PLLSAI1_Config+0x118>)
 800ca86:	68ca      	ldr	r2, [r1, #12]
 800ca88:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800ca8c:	ea42 0300 	orr.w	r3, r2, r0
 800ca90:	6862      	ldr	r2, [r4, #4]
 800ca92:	3a01      	subs	r2, #1
 800ca94:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800ca98:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 800ca9a:	4e34      	ldr	r6, [pc, #208]	@ (800cb6c <RCCEx_PLLSAI1_Config+0x118>)
 800ca9c:	6833      	ldr	r3, [r6, #0]
 800ca9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800caa2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800caa4:	f7fd fa76 	bl	8009f94 <HAL_GetTick>
 800caa8:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800caaa:	e004      	b.n	800cab6 <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800caac:	f7fd fa72 	bl	8009f94 <HAL_GetTick>
 800cab0:	1bc3      	subs	r3, r0, r7
 800cab2:	2b02      	cmp	r3, #2
 800cab4:	d83c      	bhi.n	800cb30 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cab6:	6833      	ldr	r3, [r6, #0]
 800cab8:	011a      	lsls	r2, r3, #4
 800caba:	d4f7      	bmi.n	800caac <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cabc:	68a3      	ldr	r3, [r4, #8]
 800cabe:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 800cac0:	2d00      	cmp	r5, #0
 800cac2:	d137      	bne.n	800cb34 <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cac4:	6932      	ldr	r2, [r6, #16]
 800cac6:	68e3      	ldr	r3, [r4, #12]
 800cac8:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 800cacc:	ea41 63c3 	orr.w	r3, r1, r3, lsl #27
 800cad0:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800cad4:	4313      	orrs	r3, r2
 800cad6:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800cad8:	4d24      	ldr	r5, [pc, #144]	@ (800cb6c <RCCEx_PLLSAI1_Config+0x118>)
 800cada:	682b      	ldr	r3, [r5, #0]
 800cadc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cae0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800cae2:	f7fd fa57 	bl	8009f94 <HAL_GetTick>
 800cae6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cae8:	e004      	b.n	800caf4 <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800caea:	f7fd fa53 	bl	8009f94 <HAL_GetTick>
 800caee:	1b80      	subs	r0, r0, r6
 800caf0:	2802      	cmp	r0, #2
 800caf2:	d81d      	bhi.n	800cb30 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800caf4:	682b      	ldr	r3, [r5, #0]
 800caf6:	011b      	lsls	r3, r3, #4
 800caf8:	d5f7      	bpl.n	800caea <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cafa:	692b      	ldr	r3, [r5, #16]
 800cafc:	69a2      	ldr	r2, [r4, #24]
 800cafe:	4313      	orrs	r3, r2
 800cb00:	2000      	movs	r0, #0
 800cb02:	612b      	str	r3, [r5, #16]
}
 800cb04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800cb06:	2900      	cmp	r1, #0
 800cb08:	d0b1      	beq.n	800ca6e <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cb0a:	68d3      	ldr	r3, [r2, #12]
       ||
 800cb0c:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cb0e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800cb12:	3301      	adds	r3, #1
       ||
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d1aa      	bne.n	800ca6e <RCCEx_PLLSAI1_Config+0x1a>
 800cb18:	e7bf      	b.n	800ca9a <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cb1a:	6811      	ldr	r1, [r2, #0]
 800cb1c:	038e      	lsls	r6, r1, #14
 800cb1e:	d4b1      	bmi.n	800ca84 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cb20:	6812      	ldr	r2, [r2, #0]
 800cb22:	0351      	lsls	r1, r2, #13
 800cb24:	d5a3      	bpl.n	800ca6e <RCCEx_PLLSAI1_Config+0x1a>
 800cb26:	e7ad      	b.n	800ca84 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cb28:	6812      	ldr	r2, [r2, #0]
 800cb2a:	0557      	lsls	r7, r2, #21
 800cb2c:	d59f      	bpl.n	800ca6e <RCCEx_PLLSAI1_Config+0x1a>
 800cb2e:	e7a9      	b.n	800ca84 <RCCEx_PLLSAI1_Config+0x30>
 800cb30:	2003      	movs	r0, #3
}
 800cb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800cb34:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cb36:	6933      	ldr	r3, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 800cb38:	d00b      	beq.n	800cb52 <RCCEx_PLLSAI1_Config+0xfe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cb3a:	6962      	ldr	r2, [r4, #20]
 800cb3c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800cb40:	0852      	lsrs	r2, r2, #1
 800cb42:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800cb46:	3a01      	subs	r2, #1
 800cb48:	430b      	orrs	r3, r1
 800cb4a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800cb4e:	6133      	str	r3, [r6, #16]
 800cb50:	e7c2      	b.n	800cad8 <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cb52:	6922      	ldr	r2, [r4, #16]
 800cb54:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800cb58:	0852      	lsrs	r2, r2, #1
 800cb5a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800cb5e:	3a01      	subs	r2, #1
 800cb60:	430b      	orrs	r3, r1
 800cb62:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800cb66:	6133      	str	r3, [r6, #16]
 800cb68:	e7b6      	b.n	800cad8 <RCCEx_PLLSAI1_Config+0x84>
 800cb6a:	bf00      	nop
 800cb6c:	40021000 	.word	0x40021000

0800cb70 <HAL_RCCEx_PeriphCLKConfig>:
{
 800cb70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cb74:	6803      	ldr	r3, [r0, #0]
 800cb76:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cb7e:	d00c      	beq.n	800cb9a <HAL_RCCEx_PeriphCLKConfig+0x2a>
    switch(PeriphClkInit->Sai1ClockSelection)
 800cb80:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800cb82:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800cb86:	f000 810c 	beq.w	800cda2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 800cb8a:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 800cb8e:	f000 810d 	beq.w	800cdac <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800cb92:	2900      	cmp	r1, #0
 800cb94:	f000 8129 	beq.w	800cdea <HAL_RCCEx_PeriphCLKConfig+0x27a>
 800cb98:	2601      	movs	r6, #1
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cb9a:	0398      	lsls	r0, r3, #14
 800cb9c:	d554      	bpl.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cb9e:	4ba5      	ldr	r3, [pc, #660]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cba0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cba2:	00d1      	lsls	r1, r2, #3
 800cba4:	f140 80f2 	bpl.w	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    FlagStatus       pwrclkchanged = RESET;
 800cba8:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cbaa:	4da3      	ldr	r5, [pc, #652]	@ (800ce38 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800cbac:	682b      	ldr	r3, [r5, #0]
 800cbae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cbb2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800cbb4:	f7fd f9ee 	bl	8009f94 <HAL_GetTick>
 800cbb8:	4680      	mov	r8, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cbba:	e006      	b.n	800cbca <HAL_RCCEx_PeriphCLKConfig+0x5a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cbbc:	f7fd f9ea 	bl	8009f94 <HAL_GetTick>
 800cbc0:	eba0 0308 	sub.w	r3, r0, r8
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	f200 80fb 	bhi.w	800cdc0 <HAL_RCCEx_PeriphCLKConfig+0x250>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cbca:	682b      	ldr	r3, [r5, #0]
 800cbcc:	05da      	lsls	r2, r3, #23
 800cbce:	d5f5      	bpl.n	800cbbc <HAL_RCCEx_PeriphCLKConfig+0x4c>
    if(ret == HAL_OK)
 800cbd0:	bbb6      	cbnz	r6, 800cc40 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cbd2:	4d98      	ldr	r5, [pc, #608]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cbd4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cbd6:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cbda:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800cbde:	d027      	beq.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d025      	beq.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cbe4:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800cbe8:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800cbec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cbf0:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cbf4:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800cbf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cbfc:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cc00:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 800cc04:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cc08:	07cb      	lsls	r3, r1, #31
 800cc0a:	d511      	bpl.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        tickstart = HAL_GetTick();
 800cc0c:	f7fd f9c2 	bl	8009f94 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc10:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800cc14:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc16:	e006      	b.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0xb6>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc18:	f7fd f9bc 	bl	8009f94 <HAL_GetTick>
 800cc1c:	eba0 0008 	sub.w	r0, r0, r8
 800cc20:	4548      	cmp	r0, r9
 800cc22:	f200 80cd 	bhi.w	800cdc0 <HAL_RCCEx_PeriphCLKConfig+0x250>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc26:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800cc2a:	0798      	lsls	r0, r3, #30
 800cc2c:	d5f4      	bpl.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cc2e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800cc30:	4980      	ldr	r1, [pc, #512]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cc32:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800cc36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cc40:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 800cc42:	2f00      	cmp	r7, #0
 800cc44:	f040 80c1 	bne.w	800cdca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cc48:	07d9      	lsls	r1, r3, #31
 800cc4a:	d508      	bpl.n	800cc5e <HAL_RCCEx_PeriphCLKConfig+0xee>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cc4c:	4979      	ldr	r1, [pc, #484]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cc4e:	6a20      	ldr	r0, [r4, #32]
 800cc50:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800cc54:	f022 0203 	bic.w	r2, r2, #3
 800cc58:	4302      	orrs	r2, r0
 800cc5a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cc5e:	079a      	lsls	r2, r3, #30
 800cc60:	d508      	bpl.n	800cc74 <HAL_RCCEx_PeriphCLKConfig+0x104>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cc62:	4974      	ldr	r1, [pc, #464]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cc64:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cc66:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800cc6a:	f022 020c 	bic.w	r2, r2, #12
 800cc6e:	4302      	orrs	r2, r0
 800cc70:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cc74:	075f      	lsls	r7, r3, #29
 800cc76:	d508      	bpl.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cc78:	496e      	ldr	r1, [pc, #440]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cc7a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800cc7c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800cc80:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800cc84:	4302      	orrs	r2, r0
 800cc86:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cc8a:	069d      	lsls	r5, r3, #26
 800cc8c:	d508      	bpl.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cc8e:	4969      	ldr	r1, [pc, #420]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cc90:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800cc92:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800cc96:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800cc9a:	4302      	orrs	r2, r0
 800cc9c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cca0:	0598      	lsls	r0, r3, #22
 800cca2:	d508      	bpl.n	800ccb6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cca4:	4963      	ldr	r1, [pc, #396]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cca6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800cca8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800ccac:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800ccb0:	4302      	orrs	r2, r0
 800ccb2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ccb6:	0559      	lsls	r1, r3, #21
 800ccb8:	d508      	bpl.n	800cccc <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ccba:	495e      	ldr	r1, [pc, #376]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800ccbc:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800ccbe:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800ccc2:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800ccc6:	4302      	orrs	r2, r0
 800ccc8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cccc:	065a      	lsls	r2, r3, #25
 800ccce:	d508      	bpl.n	800cce2 <HAL_RCCEx_PeriphCLKConfig+0x172>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ccd0:	4958      	ldr	r1, [pc, #352]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800ccd2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800ccd4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800ccd8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800ccdc:	4302      	orrs	r2, r0
 800ccde:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cce2:	061f      	lsls	r7, r3, #24
 800cce4:	d508      	bpl.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x188>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cce6:	4953      	ldr	r1, [pc, #332]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cce8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ccea:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800ccee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ccf2:	4302      	orrs	r2, r0
 800ccf4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ccf8:	05dd      	lsls	r5, r3, #23
 800ccfa:	d508      	bpl.n	800cd0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ccfc:	494d      	ldr	r1, [pc, #308]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800ccfe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800cd00:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800cd04:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800cd08:	4302      	orrs	r2, r0
 800cd0a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800cd0e:	0318      	lsls	r0, r3, #12
 800cd10:	d50e      	bpl.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800cd12:	4948      	ldr	r1, [pc, #288]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cd14:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800cd16:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800cd1a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800cd1e:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800cd20:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800cd24:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800cd28:	d055      	beq.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x266>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800cd2a:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800cd2e:	d06c      	beq.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cd30:	0359      	lsls	r1, r3, #13
 800cd32:	d50e      	bpl.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cd34:	493f      	ldr	r1, [pc, #252]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cd36:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800cd38:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800cd3c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800cd40:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cd42:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cd46:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cd4a:	d049      	beq.n	800cde0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800cd4c:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800cd50:	d064      	beq.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cd52:	045a      	lsls	r2, r3, #17
 800cd54:	d50b      	bpl.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cd56:	4837      	ldr	r0, [pc, #220]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cd58:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800cd5a:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800cd5e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800cd62:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cd64:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cd68:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cd6c:	d044      	beq.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x288>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cd6e:	041b      	lsls	r3, r3, #16
 800cd70:	d508      	bpl.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x214>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cd72:	4a30      	ldr	r2, [pc, #192]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cd74:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800cd76:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800cd7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cd7e:	430b      	orrs	r3, r1
 800cd80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 800cd84:	4630      	mov	r0, r6
 800cd86:	b003      	add	sp, #12
 800cd88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cd8e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800cd92:	659a      	str	r2, [r3, #88]	@ 0x58
 800cd94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd9a:	9301      	str	r3, [sp, #4]
 800cd9c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800cd9e:	2701      	movs	r7, #1
 800cda0:	e703      	b.n	800cbaa <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800cda2:	4824      	ldr	r0, [pc, #144]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cda4:	68c2      	ldr	r2, [r0, #12]
 800cda6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800cdaa:	60c2      	str	r2, [r0, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cdac:	4821      	ldr	r0, [pc, #132]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cdae:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800cdb2:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800cdb6:	430a      	orrs	r2, r1
 800cdb8:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cdbc:	2600      	movs	r6, #0
 800cdbe:	e6ec      	b.n	800cb9a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cdc0:	6823      	ldr	r3, [r4, #0]
        ret = HAL_TIMEOUT;
 800cdc2:	2603      	movs	r6, #3
    if(pwrclkchanged == SET)
 800cdc4:	2f00      	cmp	r7, #0
 800cdc6:	f43f af3f 	beq.w	800cc48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800cdca:	491a      	ldr	r1, [pc, #104]	@ (800ce34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800cdcc:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800cdce:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800cdd2:	658a      	str	r2, [r1, #88]	@ 0x58
 800cdd4:	e738      	b.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cdd6:	68ca      	ldr	r2, [r1, #12]
 800cdd8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800cddc:	60ca      	str	r2, [r1, #12]
 800cdde:	e7a7      	b.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cde0:	68ca      	ldr	r2, [r1, #12]
 800cde2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800cde6:	60ca      	str	r2, [r1, #12]
 800cde8:	e7b3      	b.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cdea:	3004      	adds	r0, #4
 800cdec:	f7ff fe32 	bl	800ca54 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800cdf0:	4606      	mov	r6, r0
 800cdf2:	b1e0      	cbz	r0, 800ce2e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cdf4:	6823      	ldr	r3, [r4, #0]
 800cdf6:	e6d0      	b.n	800cb9a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800cdf8:	2102      	movs	r1, #2
 800cdfa:	1d20      	adds	r0, r4, #4
 800cdfc:	f7ff fe2a 	bl	800ca54 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ce00:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d0b3      	beq.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ce06:	4606      	mov	r6, r0
 800ce08:	e7b1      	b.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ce0a:	2101      	movs	r1, #1
 800ce0c:	1d20      	adds	r0, r4, #4
 800ce0e:	f7ff fe21 	bl	800ca54 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ce12:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d08b      	beq.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ce18:	4606      	mov	r6, r0
 800ce1a:	e789      	b.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	1d20      	adds	r0, r4, #4
 800ce20:	f7ff fe18 	bl	800ca54 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ce24:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d093      	beq.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ce2a:	4606      	mov	r6, r0
 800ce2c:	e791      	b.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ce2e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ce30:	6823      	ldr	r3, [r4, #0]
 800ce32:	e7bb      	b.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800ce34:	40021000 	.word	0x40021000
 800ce38:	40007000 	.word	0x40007000

0800ce3c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ce3c:	4770      	bx	lr
 800ce3e:	bf00      	nop

0800ce40 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce40:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d116      	bne.n	800ce76 <HAL_TIM_Base_Start_IT+0x36>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce48:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce4a:	4910      	ldr	r1, [pc, #64]	@ (800ce8c <HAL_TIM_Base_Start_IT+0x4c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ce4c:	2202      	movs	r2, #2
 800ce4e:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce52:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce54:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce56:	f042 0201 	orr.w	r2, r2, #1
 800ce5a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce5c:	d00d      	beq.n	800ce7a <HAL_TIM_Base_Start_IT+0x3a>
 800ce5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce62:	d00a      	beq.n	800ce7a <HAL_TIM_Base_Start_IT+0x3a>
 800ce64:	4a0a      	ldr	r2, [pc, #40]	@ (800ce90 <HAL_TIM_Base_Start_IT+0x50>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d007      	beq.n	800ce7a <HAL_TIM_Base_Start_IT+0x3a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    {
      __HAL_TIM_ENABLE(htim);
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	f042 0201 	orr.w	r2, r2, #1
 800ce70:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800ce72:	2000      	movs	r0, #0
 800ce74:	4770      	bx	lr
    return HAL_ERROR;
 800ce76:	2001      	movs	r0, #1
}
 800ce78:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce7a:	6899      	ldr	r1, [r3, #8]
 800ce7c:	4a05      	ldr	r2, [pc, #20]	@ (800ce94 <HAL_TIM_Base_Start_IT+0x54>)
 800ce7e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce80:	2a06      	cmp	r2, #6
 800ce82:	d0f6      	beq.n	800ce72 <HAL_TIM_Base_Start_IT+0x32>
 800ce84:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800ce88:	d1ef      	bne.n	800ce6a <HAL_TIM_Base_Start_IT+0x2a>
 800ce8a:	e7f2      	b.n	800ce72 <HAL_TIM_Base_Start_IT+0x32>
 800ce8c:	40012c00 	.word	0x40012c00
 800ce90:	40014000 	.word	0x40014000
 800ce94:	00010007 	.word	0x00010007

0800ce98 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop

0800ce9c <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop

0800cea0 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop

0800cea4 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop

0800cea8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cea8:	6803      	ldr	r3, [r0, #0]
 800ceaa:	691a      	ldr	r2, [r3, #16]
 800ceac:	0791      	lsls	r1, r2, #30
{
 800ceae:	b510      	push	{r4, lr}
 800ceb0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ceb2:	d502      	bpl.n	800ceba <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ceb4:	68da      	ldr	r2, [r3, #12]
 800ceb6:	0792      	lsls	r2, r2, #30
 800ceb8:	d468      	bmi.n	800cf8c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ceba:	691a      	ldr	r2, [r3, #16]
 800cebc:	0752      	lsls	r2, r2, #29
 800cebe:	d502      	bpl.n	800cec6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cec0:	68da      	ldr	r2, [r3, #12]
 800cec2:	0750      	lsls	r0, r2, #29
 800cec4:	d44f      	bmi.n	800cf66 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cec6:	691a      	ldr	r2, [r3, #16]
 800cec8:	0711      	lsls	r1, r2, #28
 800ceca:	d502      	bpl.n	800ced2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cecc:	68da      	ldr	r2, [r3, #12]
 800cece:	0712      	lsls	r2, r2, #28
 800ced0:	d437      	bmi.n	800cf42 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ced2:	691a      	ldr	r2, [r3, #16]
 800ced4:	06d0      	lsls	r0, r2, #27
 800ced6:	d502      	bpl.n	800cede <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ced8:	68da      	ldr	r2, [r3, #12]
 800ceda:	06d1      	lsls	r1, r2, #27
 800cedc:	d41e      	bmi.n	800cf1c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cede:	691a      	ldr	r2, [r3, #16]
 800cee0:	07d2      	lsls	r2, r2, #31
 800cee2:	d502      	bpl.n	800ceea <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cee4:	68da      	ldr	r2, [r3, #12]
 800cee6:	07d0      	lsls	r0, r2, #31
 800cee8:	d469      	bmi.n	800cfbe <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ceea:	691a      	ldr	r2, [r3, #16]
 800ceec:	0611      	lsls	r1, r2, #24
 800ceee:	d502      	bpl.n	800cef6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cef0:	68da      	ldr	r2, [r3, #12]
 800cef2:	0612      	lsls	r2, r2, #24
 800cef4:	d46b      	bmi.n	800cfce <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cef6:	691a      	ldr	r2, [r3, #16]
 800cef8:	05d0      	lsls	r0, r2, #23
 800cefa:	d502      	bpl.n	800cf02 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cefc:	68da      	ldr	r2, [r3, #12]
 800cefe:	0611      	lsls	r1, r2, #24
 800cf00:	d46d      	bmi.n	800cfde <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cf02:	691a      	ldr	r2, [r3, #16]
 800cf04:	0652      	lsls	r2, r2, #25
 800cf06:	d502      	bpl.n	800cf0e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cf08:	68da      	ldr	r2, [r3, #12]
 800cf0a:	0650      	lsls	r0, r2, #25
 800cf0c:	d46f      	bmi.n	800cfee <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cf0e:	691a      	ldr	r2, [r3, #16]
 800cf10:	0691      	lsls	r1, r2, #26
 800cf12:	d502      	bpl.n	800cf1a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cf14:	68da      	ldr	r2, [r3, #12]
 800cf16:	0692      	lsls	r2, r2, #26
 800cf18:	d449      	bmi.n	800cfae <HAL_TIM_IRQHandler+0x106>
}
 800cf1a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cf1c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf20:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cf22:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf24:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf26:	69db      	ldr	r3, [r3, #28]
 800cf28:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800cf2c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf2e:	d16f      	bne.n	800d010 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf30:	f7ff ffb2 	bl	800ce98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf34:	4620      	mov	r0, r4
 800cf36:	f7ff ffb3 	bl	800cea0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf3a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cf3c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf3e:	7722      	strb	r2, [r4, #28]
 800cf40:	e7cd      	b.n	800cede <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf42:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf46:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf48:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf4a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf4c:	69db      	ldr	r3, [r3, #28]
 800cf4e:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800cf50:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf52:	d15a      	bne.n	800d00a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf54:	f7ff ffa0 	bl	800ce98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f7ff ffa1 	bl	800cea0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf5e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf60:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf62:	7722      	strb	r2, [r4, #28]
 800cf64:	e7b5      	b.n	800ced2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cf66:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cf6a:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cf6c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cf6e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cf70:	699b      	ldr	r3, [r3, #24]
 800cf72:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800cf76:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cf78:	d144      	bne.n	800d004 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf7a:	f7ff ff8d 	bl	800ce98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf7e:	4620      	mov	r0, r4
 800cf80:	f7ff ff8e 	bl	800cea0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf84:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cf86:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf88:	7722      	strb	r2, [r4, #28]
 800cf8a:	e79c      	b.n	800cec6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cf8c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cf90:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cf92:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cf94:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cf96:	699b      	ldr	r3, [r3, #24]
 800cf98:	0799      	lsls	r1, r3, #30
 800cf9a:	d130      	bne.n	800cffe <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf9c:	f7ff ff7c 	bl	800ce98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	f7ff ff7d 	bl	800cea0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfa6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cfa8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfaa:	7722      	strb	r2, [r4, #28]
 800cfac:	e785      	b.n	800ceba <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cfae:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800cfb2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cfb4:	611a      	str	r2, [r3, #16]
}
 800cfb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800cfba:	f000 b8a7 	b.w	800d10c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cfbe:	f06f 0201 	mvn.w	r2, #1
 800cfc2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f7f9 fb8d 	bl	80066e4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cfca:	6823      	ldr	r3, [r4, #0]
 800cfcc:	e78d      	b.n	800ceea <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cfce:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800cfd2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f000 f89b 	bl	800d110 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cfda:	6823      	ldr	r3, [r4, #0]
 800cfdc:	e78b      	b.n	800cef6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cfde:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cfe2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f000 f895 	bl	800d114 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cfea:	6823      	ldr	r3, [r4, #0]
 800cfec:	e789      	b.n	800cf02 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cfee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cff2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800cff4:	4620      	mov	r0, r4
 800cff6:	f7ff ff55 	bl	800cea4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cffa:	6823      	ldr	r3, [r4, #0]
 800cffc:	e787      	b.n	800cf0e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800cffe:	f7ff ff4d 	bl	800ce9c <HAL_TIM_IC_CaptureCallback>
 800d002:	e7d0      	b.n	800cfa6 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800d004:	f7ff ff4a 	bl	800ce9c <HAL_TIM_IC_CaptureCallback>
 800d008:	e7bc      	b.n	800cf84 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800d00a:	f7ff ff47 	bl	800ce9c <HAL_TIM_IC_CaptureCallback>
 800d00e:	e7a6      	b.n	800cf5e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800d010:	f7ff ff44 	bl	800ce9c <HAL_TIM_IC_CaptureCallback>
 800d014:	e791      	b.n	800cf3a <HAL_TIM_IRQHandler+0x92>
 800d016:	bf00      	nop

0800d018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d018:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d01a:	4e21      	ldr	r6, [pc, #132]	@ (800d0a0 <TIM_Base_SetConfig+0x88>)
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d01c:	688c      	ldr	r4, [r1, #8]
  tmpcr1 = TIMx->CR1;
 800d01e:	6803      	ldr	r3, [r0, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d020:	694d      	ldr	r5, [r1, #20]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d022:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d024:	42b0      	cmp	r0, r6
 800d026:	d01c      	beq.n	800d062 <TIM_Base_SetConfig+0x4a>
 800d028:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800d02c:	d010      	beq.n	800d050 <TIM_Base_SetConfig+0x38>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d02e:	4e1d      	ldr	r6, [pc, #116]	@ (800d0a4 <TIM_Base_SetConfig+0x8c>)
 800d030:	42b0      	cmp	r0, r6
 800d032:	d02a      	beq.n	800d08a <TIM_Base_SetConfig+0x72>
 800d034:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800d038:	42b0      	cmp	r0, r6
 800d03a:	d016      	beq.n	800d06a <TIM_Base_SetConfig+0x52>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d03c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d040:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800d042:	6003      	str	r3, [r0, #0]
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d044:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d046:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d048:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800d04a:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800d04c:	6143      	str	r3, [r0, #20]
}
 800d04e:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800d050:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d052:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800d058:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800d05a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d05e:	430b      	orrs	r3, r1
 800d060:	e7ec      	b.n	800d03c <TIM_Base_SetConfig+0x24>
    tmpcr1 |= Structure->CounterMode;
 800d062:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800d068:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d06a:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d06c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d070:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d076:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800d078:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d07a:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d07c:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800d07e:	690b      	ldr	r3, [r1, #16]
 800d080:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800d082:	2301      	movs	r3, #1
}
 800d084:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800d086:	6143      	str	r3, [r0, #20]
}
 800d088:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d08a:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d08c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d090:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d096:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 800d098:	6005      	str	r5, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d09a:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d09c:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d09e:	e7ee      	b.n	800d07e <TIM_Base_SetConfig+0x66>
 800d0a0:	40012c00 	.word	0x40012c00
 800d0a4:	40014000 	.word	0x40014000

0800d0a8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800d0a8:	b370      	cbz	r0, 800d108 <HAL_TIM_Base_Init+0x60>
{
 800d0aa:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800d0ac:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800d0b6:	b313      	cbz	r3, 800d0fe <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0b8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800d0ba:	2302      	movs	r3, #2
 800d0bc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0c0:	f851 0b04 	ldr.w	r0, [r1], #4
 800d0c4:	f7ff ffa8 	bl	800d018 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800d0d2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800d0d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800d0da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800d0de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d0e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0e6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d0ea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d0ee:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800d0f2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800d0f6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800d0fa:	2000      	movs	r0, #0
}
 800d0fc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800d0fe:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800d102:	f7ff fe9b 	bl	800ce3c <HAL_TIM_Base_MspInit>
 800d106:	e7d7      	b.n	800d0b8 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800d108:	2001      	movs	r0, #1
}
 800d10a:	4770      	bx	lr

0800d10c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop

0800d110 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop

0800d114 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop

0800d118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d118:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d11a:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d11e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d122:	e842 3100 	strex	r1, r3, [r2]
 800d126:	2900      	cmp	r1, #0
 800d128:	d1f7      	bne.n	800d11a <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d12a:	f102 0308 	add.w	r3, r2, #8
 800d12e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d132:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d136:	f102 0c08 	add.w	ip, r2, #8
 800d13a:	e84c 3100 	strex	r1, r3, [ip]
 800d13e:	2900      	cmp	r1, #0
 800d140:	d1f3      	bne.n	800d12a <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d142:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800d144:	2b01      	cmp	r3, #1
 800d146:	d005      	beq.n	800d154 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d148:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800d14a:	2220      	movs	r2, #32
 800d14c:	67c2      	str	r2, [r0, #124]	@ 0x7c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d14e:	6643      	str	r3, [r0, #100]	@ 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d150:	6603      	str	r3, [r0, #96]	@ 0x60
}
 800d152:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d154:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d158:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d15c:	e842 3100 	strex	r1, r3, [r2]
 800d160:	2900      	cmp	r1, #0
 800d162:	d0f1      	beq.n	800d148 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d164:	e852 3f00 	ldrex	r3, [r2]
 800d168:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d16c:	e842 3100 	strex	r1, r3, [r2]
 800d170:	2900      	cmp	r1, #0
 800d172:	d1ef      	bne.n	800d154 <UART_EndRxTransfer+0x3c>
 800d174:	e7e8      	b.n	800d148 <UART_EndRxTransfer+0x30>
 800d176:	bf00      	nop

0800d178 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d178:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800d17a:	2b21      	cmp	r3, #33	@ 0x21
 800d17c:	d000      	beq.n	800d180 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d17e:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800d180:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d184:	6802      	ldr	r2, [r0, #0]
    if (huart->TxXferCount == 0U)
 800d186:	b29b      	uxth	r3, r3
 800d188:	b983      	cbnz	r3, 800d1ac <UART_TxISR_16BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d18a:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d18e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d192:	e842 3100 	strex	r1, r3, [r2]
 800d196:	2900      	cmp	r1, #0
 800d198:	d1f7      	bne.n	800d18a <UART_TxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d19a:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d19e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a2:	e842 3100 	strex	r1, r3, [r2]
 800d1a6:	2900      	cmp	r1, #0
 800d1a8:	d1f7      	bne.n	800d19a <UART_TxISR_16BIT+0x22>
 800d1aa:	4770      	bx	lr
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d1ac:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d1ae:	f831 3b02 	ldrh.w	r3, [r1], #2
 800d1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1b6:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800d1b8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->pTxBuffPtr += 2U;
 800d1bc:	64c1      	str	r1, [r0, #76]	@ 0x4c
      huart->TxXferCount--;
 800d1be:	3b01      	subs	r3, #1
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
}
 800d1c6:	4770      	bx	lr

0800d1c8 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d1c8:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800d1ca:	2b21      	cmp	r3, #33	@ 0x21
 800d1cc:	d000      	beq.n	800d1d0 <UART_TxISR_8BIT+0x8>
}
 800d1ce:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800d1d0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d1d4:	6802      	ldr	r2, [r0, #0]
    if (huart->TxXferCount == 0U)
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	b983      	cbnz	r3, 800d1fc <UART_TxISR_8BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1da:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d1de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e2:	e842 3100 	strex	r1, r3, [r2]
 800d1e6:	2900      	cmp	r1, #0
 800d1e8:	d1f7      	bne.n	800d1da <UART_TxISR_8BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ea:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d1ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f2:	e842 3100 	strex	r1, r3, [r2]
 800d1f6:	2900      	cmp	r1, #0
 800d1f8:	d1f7      	bne.n	800d1ea <UART_TxISR_8BIT+0x22>
 800d1fa:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d1fc:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d1fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d202:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800d204:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->pTxBuffPtr++;
 800d208:	64c1      	str	r1, [r0, #76]	@ 0x4c
      huart->TxXferCount--;
 800d20a:	3b01      	subs	r3, #1
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
}
 800d212:	4770      	bx	lr

0800d214 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800d214:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800d216:	2b20      	cmp	r3, #32
 800d218:	d129      	bne.n	800d26e <HAL_UART_Transmit_IT+0x5a>
    if ((pData == NULL) || (Size == 0U))
 800d21a:	b331      	cbz	r1, 800d26a <HAL_UART_Transmit_IT+0x56>
 800d21c:	b32a      	cbz	r2, 800d26a <HAL_UART_Transmit_IT+0x56>
    __HAL_LOCK(huart);
 800d21e:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 800d222:	2b01      	cmp	r3, #1
 800d224:	d023      	beq.n	800d26e <HAL_UART_Transmit_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d226:	6883      	ldr	r3, [r0, #8]
{
 800d228:	b410      	push	{r4}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d22a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d22e:	f04f 0400 	mov.w	r4, #0
    huart->pTxBuffPtr  = pData;
 800d232:	64c1      	str	r1, [r0, #76]	@ 0x4c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d234:	f04f 0121 	mov.w	r1, #33	@ 0x21
    huart->TxXferCount = Size;
 800d238:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
    huart->TxXferSize  = Size;
 800d23c:	f8a0 2050 	strh.w	r2, [r0, #80]	@ 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d240:	f8c0 4080 	str.w	r4, [r0, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d244:	6781      	str	r1, [r0, #120]	@ 0x78
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d246:	d014      	beq.n	800d272 <HAL_UART_Transmit_IT+0x5e>
      huart->TxISR = UART_TxISR_8BIT;
 800d248:	4b0d      	ldr	r3, [pc, #52]	@ (800d280 <HAL_UART_Transmit_IT+0x6c>)
 800d24a:	6802      	ldr	r2, [r0, #0]
 800d24c:	6683      	str	r3, [r0, #104]	@ 0x68
    __HAL_UNLOCK(huart);
 800d24e:	2100      	movs	r1, #0
 800d250:	f880 1074 	strb.w	r1, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d254:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d25c:	e842 3000 	strex	r0, r3, [r2]
 800d260:	2800      	cmp	r0, #0
 800d262:	d1f7      	bne.n	800d254 <HAL_UART_Transmit_IT+0x40>
}
 800d264:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d268:	4770      	bx	lr
      return HAL_ERROR;
 800d26a:	2001      	movs	r0, #1
 800d26c:	4770      	bx	lr
    __HAL_LOCK(huart);
 800d26e:	2002      	movs	r0, #2
}
 800d270:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d272:	6901      	ldr	r1, [r0, #16]
      huart->TxISR = UART_TxISR_16BIT;
 800d274:	4b02      	ldr	r3, [pc, #8]	@ (800d280 <HAL_UART_Transmit_IT+0x6c>)
 800d276:	4a03      	ldr	r2, [pc, #12]	@ (800d284 <HAL_UART_Transmit_IT+0x70>)
 800d278:	42a1      	cmp	r1, r4
 800d27a:	bf08      	it	eq
 800d27c:	4613      	moveq	r3, r2
 800d27e:	e7e4      	b.n	800d24a <HAL_UART_Transmit_IT+0x36>
 800d280:	0800d1c9 	.word	0x0800d1c9
 800d284:	0800d179 	.word	0x0800d179

0800d288 <UART_DMAAbortOnError>:
{
 800d288:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d28a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 800d28c:	2300      	movs	r3, #0
 800d28e:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800d292:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
  HAL_UART_ErrorCallback(huart);
 800d296:	f7f6 ff13 	bl	80040c0 <HAL_UART_ErrorCallback>
}
 800d29a:	bd08      	pop	{r3, pc}

0800d29c <HAL_UARTEx_RxEventCallback>:
}
 800d29c:	4770      	bx	lr
 800d29e:	bf00      	nop

0800d2a0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d2a0:	6803      	ldr	r3, [r0, #0]
 800d2a2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d2a4:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d2a6:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 800d2aa:	ea12 0f0c 	tst.w	r2, ip
{
 800d2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d2b2:	689d      	ldr	r5, [r3, #8]
{
 800d2b4:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800d2b6:	d14f      	bne.n	800d358 <HAL_UART_IRQHandler+0xb8>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d2b8:	0697      	lsls	r7, r2, #26
 800d2ba:	d502      	bpl.n	800d2c2 <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d2bc:	068e      	lsls	r6, r1, #26
 800d2be:	f100 80b8 	bmi.w	800d432 <HAL_UART_IRQHandler+0x192>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2c2:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800d2c4:	2801      	cmp	r0, #1
 800d2c6:	d025      	beq.n	800d314 <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d2c8:	02d0      	lsls	r0, r2, #11
 800d2ca:	d502      	bpl.n	800d2d2 <HAL_UART_IRQHandler+0x32>
 800d2cc:	026f      	lsls	r7, r5, #9
 800d2ce:	f100 80b5 	bmi.w	800d43c <HAL_UART_IRQHandler+0x19c>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d2d2:	0616      	lsls	r6, r2, #24
 800d2d4:	d415      	bmi.n	800d302 <HAL_UART_IRQHandler+0x62>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d2d6:	0650      	lsls	r0, r2, #25
 800d2d8:	d501      	bpl.n	800d2de <HAL_UART_IRQHandler+0x3e>
 800d2da:	064a      	lsls	r2, r1, #25
 800d2dc:	d401      	bmi.n	800d2e2 <HAL_UART_IRQHandler+0x42>
}
 800d2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e2:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d2e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ea:	e843 2100 	strex	r1, r2, [r3]
 800d2ee:	2900      	cmp	r1, #0
 800d2f0:	d1f7      	bne.n	800d2e2 <HAL_UART_IRQHandler+0x42>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2f2:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d2f4:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800d2f6:	67a2      	str	r2, [r4, #120]	@ 0x78
  huart->TxISR = NULL;
 800d2f8:	66a3      	str	r3, [r4, #104]	@ 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f7f6 fe86 	bl	800400c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d300:	e7ed      	b.n	800d2de <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d302:	060d      	lsls	r5, r1, #24
 800d304:	d5e7      	bpl.n	800d2d6 <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 800d306:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d0e8      	beq.n	800d2de <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 800d30c:	4620      	mov	r0, r4
}
 800d30e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800d312:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d314:	06d6      	lsls	r6, r2, #27
 800d316:	d5d7      	bpl.n	800d2c8 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d318:	06c8      	lsls	r0, r1, #27
 800d31a:	d5d5      	bpl.n	800d2c8 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d31c:	2210      	movs	r2, #16
 800d31e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d320:	689a      	ldr	r2, [r3, #8]
 800d322:	0657      	lsls	r7, r2, #25
 800d324:	f140 810c 	bpl.w	800d540 <HAL_UART_IRQHandler+0x2a0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d328:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800d32a:	6801      	ldr	r1, [r0, #0]
 800d32c:	684a      	ldr	r2, [r1, #4]
 800d32e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800d330:	2a00      	cmp	r2, #0
 800d332:	d0d4      	beq.n	800d2de <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d334:	f8b4 5058 	ldrh.w	r5, [r4, #88]	@ 0x58
 800d338:	4295      	cmp	r5, r2
 800d33a:	d9d0      	bls.n	800d2de <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 800d33c:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d340:	680a      	ldr	r2, [r1, #0]
 800d342:	0696      	lsls	r6, r2, #26
 800d344:	f140 80cc 	bpl.w	800d4e0 <HAL_UART_IRQHandler+0x240>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d348:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800d34c:	1ae9      	subs	r1, r5, r3
 800d34e:	4620      	mov	r0, r4
 800d350:	b289      	uxth	r1, r1
 800d352:	f7ff ffa3 	bl	800d29c <HAL_UARTEx_RxEventCallback>
 800d356:	e7c2      	b.n	800d2de <HAL_UART_IRQHandler+0x3e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d358:	f015 0701 	ands.w	r7, r5, #1
 800d35c:	461e      	mov	r6, r3
 800d35e:	f040 8090 	bne.w	800d482 <HAL_UART_IRQHandler+0x1e2>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800d362:	4894      	ldr	r0, [pc, #592]	@ (800d5b4 <HAL_UART_IRQHandler+0x314>)
 800d364:	4201      	tst	r1, r0
 800d366:	d0ac      	beq.n	800d2c2 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d368:	07d5      	lsls	r5, r2, #31
 800d36a:	d50e      	bpl.n	800d38a <HAL_UART_IRQHandler+0xea>
 800d36c:	05c8      	lsls	r0, r1, #23
 800d36e:	f140 80b3 	bpl.w	800d4d8 <HAL_UART_IRQHandler+0x238>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d372:	2001      	movs	r0, #1
 800d374:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d376:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800d37a:	f040 0001 	orr.w	r0, r0, #1
 800d37e:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d382:	0790      	lsls	r0, r2, #30
 800d384:	d566      	bpl.n	800d454 <HAL_UART_IRQHandler+0x1b4>
 800d386:	2f00      	cmp	r7, #0
 800d388:	d17f      	bne.n	800d48a <HAL_UART_IRQHandler+0x1ea>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d38a:	0755      	lsls	r5, r2, #29
 800d38c:	f140 8087 	bpl.w	800d49e <HAL_UART_IRQHandler+0x1fe>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d390:	0717      	lsls	r7, r2, #28
 800d392:	f100 8096 	bmi.w	800d4c2 <HAL_UART_IRQHandler+0x222>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d396:	0515      	lsls	r5, r2, #20
 800d398:	d50a      	bpl.n	800d3b0 <HAL_UART_IRQHandler+0x110>
 800d39a:	0148      	lsls	r0, r1, #5
 800d39c:	d508      	bpl.n	800d3b0 <HAL_UART_IRQHandler+0x110>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d39e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d3a2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d3a4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d3a8:	f043 0320 	orr.w	r3, r3, #32
 800d3ac:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d3b0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d092      	beq.n	800d2de <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d3b8:	0692      	lsls	r2, r2, #26
 800d3ba:	d502      	bpl.n	800d3c2 <HAL_UART_IRQHandler+0x122>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d3bc:	068b      	lsls	r3, r1, #26
 800d3be:	f100 8083 	bmi.w	800d4c8 <HAL_UART_IRQHandler+0x228>
      errorcode = huart->ErrorCode;
 800d3c2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d3c6:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d3c8:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d3cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3d0:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 800d3d4:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d3d6:	f000 80e7 	beq.w	800d5a8 <HAL_UART_IRQHandler+0x308>
        UART_EndRxTransfer(huart);
 800d3da:	f7ff fe9d 	bl	800d118 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3de:	68b3      	ldr	r3, [r6, #8]
 800d3e0:	065f      	lsls	r7, r3, #25
 800d3e2:	d565      	bpl.n	800d4b0 <HAL_UART_IRQHandler+0x210>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e4:	f106 0308 	add.w	r3, r6, #8
 800d3e8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f0:	f106 0108 	add.w	r1, r6, #8
 800d3f4:	e841 3200 	strex	r2, r3, [r1]
 800d3f8:	b162      	cbz	r2, 800d414 <HAL_UART_IRQHandler+0x174>
 800d3fa:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fc:	f103 0208 	add.w	r2, r3, #8
 800d400:	e852 2f00 	ldrex	r2, [r2]
 800d404:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d408:	f103 0008 	add.w	r0, r3, #8
 800d40c:	e840 2100 	strex	r1, r2, [r0]
 800d410:	2900      	cmp	r1, #0
 800d412:	d1f3      	bne.n	800d3fc <HAL_UART_IRQHandler+0x15c>
          if (huart->hdmarx != NULL)
 800d414:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800d416:	2800      	cmp	r0, #0
 800d418:	d04a      	beq.n	800d4b0 <HAL_UART_IRQHandler+0x210>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d41a:	4b67      	ldr	r3, [pc, #412]	@ (800d5b8 <HAL_UART_IRQHandler+0x318>)
 800d41c:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d41e:	f7fd fcc1 	bl	800ada4 <HAL_DMA_Abort_IT>
 800d422:	2800      	cmp	r0, #0
 800d424:	f43f af5b 	beq.w	800d2de <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d428:	6f20      	ldr	r0, [r4, #112]	@ 0x70
}
 800d42a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d42e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d430:	4718      	bx	r3
      if (huart->RxISR != NULL)
 800d432:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800d434:	2b00      	cmp	r3, #0
 800d436:	f47f af6a 	bne.w	800d30e <HAL_UART_IRQHandler+0x6e>
 800d43a:	e750      	b.n	800d2de <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d43c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800d440:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d442:	621a      	str	r2, [r3, #32]
}
 800d444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800d448:	f000 bc80 	b.w	800dd4c <HAL_UARTEx_WakeupCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d44c:	05c8      	lsls	r0, r1, #23
 800d44e:	d490      	bmi.n	800d372 <HAL_UART_IRQHandler+0xd2>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d450:	0795      	lsls	r5, r2, #30
 800d452:	d41a      	bmi.n	800d48a <HAL_UART_IRQHandler+0x1ea>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d454:	0750      	lsls	r0, r2, #29
 800d456:	d522      	bpl.n	800d49e <HAL_UART_IRQHandler+0x1fe>
 800d458:	2f00      	cmp	r7, #0
 800d45a:	d099      	beq.n	800d390 <HAL_UART_IRQHandler+0xf0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d45c:	2004      	movs	r0, #4
 800d45e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d460:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d464:	0715      	lsls	r5, r2, #28
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d466:	f040 0002 	orr.w	r0, r0, #2
 800d46a:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d46e:	d592      	bpl.n	800d396 <HAL_UART_IRQHandler+0xf6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d470:	2008      	movs	r0, #8
 800d472:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d474:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800d478:	f040 0008 	orr.w	r0, r0, #8
 800d47c:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 800d480:	e789      	b.n	800d396 <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d482:	07d0      	lsls	r0, r2, #31
 800d484:	d4e2      	bmi.n	800d44c <HAL_UART_IRQHandler+0x1ac>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d486:	0795      	lsls	r5, r2, #30
 800d488:	d516      	bpl.n	800d4b8 <HAL_UART_IRQHandler+0x218>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d48a:	2002      	movs	r0, #2
 800d48c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d48e:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800d492:	f040 0004 	orr.w	r0, r0, #4
 800d496:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d49a:	0750      	lsls	r0, r2, #29
 800d49c:	d4de      	bmi.n	800d45c <HAL_UART_IRQHandler+0x1bc>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d49e:	0710      	lsls	r0, r2, #28
 800d4a0:	f57f af79 	bpl.w	800d396 <HAL_UART_IRQHandler+0xf6>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d4a4:	f001 0020 	and.w	r0, r1, #32
 800d4a8:	4338      	orrs	r0, r7
 800d4aa:	f43f af74 	beq.w	800d396 <HAL_UART_IRQHandler+0xf6>
 800d4ae:	e7df      	b.n	800d470 <HAL_UART_IRQHandler+0x1d0>
            HAL_UART_ErrorCallback(huart);
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	f7f6 fe05 	bl	80040c0 <HAL_UART_ErrorCallback>
 800d4b6:	e712      	b.n	800d2de <HAL_UART_IRQHandler+0x3e>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4b8:	0757      	lsls	r7, r2, #29
 800d4ba:	d4cf      	bmi.n	800d45c <HAL_UART_IRQHandler+0x1bc>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d4bc:	0710      	lsls	r0, r2, #28
 800d4be:	d4d7      	bmi.n	800d470 <HAL_UART_IRQHandler+0x1d0>
 800d4c0:	e769      	b.n	800d396 <HAL_UART_IRQHandler+0xf6>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d4c2:	068d      	lsls	r5, r1, #26
 800d4c4:	d4d4      	bmi.n	800d470 <HAL_UART_IRQHandler+0x1d0>
 800d4c6:	e766      	b.n	800d396 <HAL_UART_IRQHandler+0xf6>
        if (huart->RxISR != NULL)
 800d4c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f43f af79 	beq.w	800d3c2 <HAL_UART_IRQHandler+0x122>
          huart->RxISR(huart);
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4d4:	6826      	ldr	r6, [r4, #0]
 800d4d6:	e774      	b.n	800d3c2 <HAL_UART_IRQHandler+0x122>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4d8:	0795      	lsls	r5, r2, #30
 800d4da:	f53f af56 	bmi.w	800d38a <HAL_UART_IRQHandler+0xea>
 800d4de:	e7b9      	b.n	800d454 <HAL_UART_IRQHandler+0x1b4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e8:	e843 2100 	strex	r1, r2, [r3]
 800d4ec:	2900      	cmp	r1, #0
 800d4ee:	d1f7      	bne.n	800d4e0 <HAL_UART_IRQHandler+0x240>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f0:	f103 0208 	add.w	r2, r3, #8
 800d4f4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4f8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4fc:	f103 0508 	add.w	r5, r3, #8
 800d500:	e845 2100 	strex	r1, r2, [r5]
 800d504:	2900      	cmp	r1, #0
 800d506:	d1f3      	bne.n	800d4f0 <HAL_UART_IRQHandler+0x250>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d508:	f103 0208 	add.w	r2, r3, #8
 800d50c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d510:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d514:	f103 0508 	add.w	r5, r3, #8
 800d518:	e845 2100 	strex	r1, r2, [r5]
 800d51c:	2900      	cmp	r1, #0
 800d51e:	d1f3      	bne.n	800d508 <HAL_UART_IRQHandler+0x268>
          huart->RxState = HAL_UART_STATE_READY;
 800d520:	2220      	movs	r2, #32
 800d522:	67e2      	str	r2, [r4, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d524:	6621      	str	r1, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d526:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d52a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d52e:	e843 2100 	strex	r1, r2, [r3]
 800d532:	2900      	cmp	r1, #0
 800d534:	d1f7      	bne.n	800d526 <HAL_UART_IRQHandler+0x286>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d536:	f7fd fc0f 	bl	800ad58 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d53a:	f8b4 5058 	ldrh.w	r5, [r4, #88]	@ 0x58
 800d53e:	e703      	b.n	800d348 <HAL_UART_IRQHandler+0xa8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d540:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
      if ((huart->RxXferCount > 0U)
 800d544:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d548:	f8b4 0058 	ldrh.w	r0, [r4, #88]	@ 0x58
      if ((huart->RxXferCount > 0U)
 800d54c:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d54e:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800d550:	2a00      	cmp	r2, #0
 800d552:	f43f aec4 	beq.w	800d2de <HAL_UART_IRQHandler+0x3e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d556:	1a41      	subs	r1, r0, r1
 800d558:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800d55a:	2900      	cmp	r1, #0
 800d55c:	f43f aebf 	beq.w	800d2de <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d560:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d564:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d568:	e843 2000 	strex	r0, r2, [r3]
 800d56c:	2800      	cmp	r0, #0
 800d56e:	d1f7      	bne.n	800d560 <HAL_UART_IRQHandler+0x2c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d570:	f103 0208 	add.w	r2, r3, #8
 800d574:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d578:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d57c:	f103 0508 	add.w	r5, r3, #8
 800d580:	e845 2000 	strex	r0, r2, [r5]
 800d584:	2800      	cmp	r0, #0
 800d586:	d1f3      	bne.n	800d570 <HAL_UART_IRQHandler+0x2d0>
        huart->RxState = HAL_UART_STATE_READY;
 800d588:	2220      	movs	r2, #32
 800d58a:	67e2      	str	r2, [r4, #124]	@ 0x7c
        huart->RxISR = NULL;
 800d58c:	6660      	str	r0, [r4, #100]	@ 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d58e:	6620      	str	r0, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d590:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d594:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d598:	e843 2000 	strex	r0, r2, [r3]
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d1f7      	bne.n	800d590 <HAL_UART_IRQHandler+0x2f0>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f7ff fe7b 	bl	800d29c <HAL_UARTEx_RxEventCallback>
 800d5a6:	e69a      	b.n	800d2de <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 800d5a8:	f7f6 fd8a 	bl	80040c0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5ac:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 800d5b0:	e695      	b.n	800d2de <HAL_UART_IRQHandler+0x3e>
 800d5b2:	bf00      	nop
 800d5b4:	04000120 	.word	0x04000120
 800d5b8:	0800d289 	.word	0x0800d289

0800d5bc <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5bc:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5be:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5c0:	2922      	cmp	r1, #34	@ 0x22
{
 800d5c2:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800d5c4:	f8b0 305c 	ldrh.w	r3, [r0, #92]	@ 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5c8:	d005      	beq.n	800d5d6 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d5ca:	8b13      	ldrh	r3, [r2, #24]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	f043 0308 	orr.w	r3, r3, #8
 800d5d2:	8313      	strh	r3, [r2, #24]
  }
}
 800d5d4:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5d6:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d5d8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800d5da:	400b      	ands	r3, r1
 800d5dc:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 800d5de:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr++;
 800d5e2:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    if (huart->RxXferCount == 0U)
 800d5ec:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr++;
 800d5f0:	3201      	adds	r2, #1
    if (huart->RxXferCount == 0U)
 800d5f2:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 800d5f4:	6542      	str	r2, [r0, #84]	@ 0x54
    if (huart->RxXferCount == 0U)
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d1ec      	bne.n	800d5d4 <UART_RxISR_8BIT+0x18>
 800d5fa:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5fc:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d600:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d604:	e843 2100 	strex	r1, r2, [r3]
 800d608:	2900      	cmp	r1, #0
 800d60a:	d1f7      	bne.n	800d5fc <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d60c:	f103 0208 	add.w	r2, r3, #8
 800d610:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d614:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d618:	f103 0c08 	add.w	ip, r3, #8
 800d61c:	e84c 2100 	strex	r1, r2, [ip]
 800d620:	2900      	cmp	r1, #0
 800d622:	d1f3      	bne.n	800d60c <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 800d624:	2220      	movs	r2, #32
 800d626:	67c2      	str	r2, [r0, #124]	@ 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d628:	6e02      	ldr	r2, [r0, #96]	@ 0x60
      huart->RxISR = NULL;
 800d62a:	6641      	str	r1, [r0, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d62c:	2a01      	cmp	r2, #1
 800d62e:	d112      	bne.n	800d656 <UART_RxISR_8BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d630:	6601      	str	r1, [r0, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d632:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d636:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d63a:	e843 2100 	strex	r1, r2, [r3]
 800d63e:	2900      	cmp	r1, #0
 800d640:	d1f7      	bne.n	800d632 <UART_RxISR_8BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d642:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d644:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d648:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d64a:	bf44      	itt	mi
 800d64c:	2210      	movmi	r2, #16
 800d64e:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d650:	f7ff fe24 	bl	800d29c <HAL_UARTEx_RxEventCallback>
}
 800d654:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800d656:	f7f6 fd0f 	bl	8004078 <HAL_UART_RxCpltCallback>
}
 800d65a:	bd08      	pop	{r3, pc}

0800d65c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d65c:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
  uint16_t uhMask = huart->Mask;
 800d65e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d662:	2922      	cmp	r1, #34	@ 0x22
{
 800d664:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d666:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d668:	d005      	beq.n	800d676 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d66a:	8b1a      	ldrh	r2, [r3, #24]
 800d66c:	b292      	uxth	r2, r2
 800d66e:	f042 0208 	orr.w	r2, r2, #8
 800d672:	831a      	strh	r2, [r3, #24]
  }
}
 800d674:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d676:	f8b3 c024 	ldrh.w	ip, [r3, #36]	@ 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800d67a:	6d41      	ldr	r1, [r0, #84]	@ 0x54
 800d67c:	ea02 020c 	and.w	r2, r2, ip
 800d680:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 800d684:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr += 2U;
 800d688:	6541      	str	r1, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 800d68a:	3a01      	subs	r2, #1
 800d68c:	b292      	uxth	r2, r2
 800d68e:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
    if (huart->RxXferCount == 0U)
 800d692:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
 800d696:	b292      	uxth	r2, r2
 800d698:	2a00      	cmp	r2, #0
 800d69a:	d1eb      	bne.n	800d674 <UART_RxISR_16BIT+0x18>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d69c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d6a0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a4:	e843 2100 	strex	r1, r2, [r3]
 800d6a8:	2900      	cmp	r1, #0
 800d6aa:	d1f7      	bne.n	800d69c <UART_RxISR_16BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ac:	f103 0208 	add.w	r2, r3, #8
 800d6b0:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6b4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b8:	f103 0c08 	add.w	ip, r3, #8
 800d6bc:	e84c 2100 	strex	r1, r2, [ip]
 800d6c0:	2900      	cmp	r1, #0
 800d6c2:	d1f3      	bne.n	800d6ac <UART_RxISR_16BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 800d6c4:	2220      	movs	r2, #32
 800d6c6:	67c2      	str	r2, [r0, #124]	@ 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6c8:	6e02      	ldr	r2, [r0, #96]	@ 0x60
      huart->RxISR = NULL;
 800d6ca:	6641      	str	r1, [r0, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6cc:	2a01      	cmp	r2, #1
 800d6ce:	d112      	bne.n	800d6f6 <UART_RxISR_16BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6d0:	6601      	str	r1, [r0, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6d6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6da:	e843 2100 	strex	r1, r2, [r3]
 800d6de:	2900      	cmp	r1, #0
 800d6e0:	d1f7      	bne.n	800d6d2 <UART_RxISR_16BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d6e2:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6e4:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d6e8:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6ea:	bf44      	itt	mi
 800d6ec:	2210      	movmi	r2, #16
 800d6ee:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6f0:	f7ff fdd4 	bl	800d29c <HAL_UARTEx_RxEventCallback>
}
 800d6f4:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800d6f6:	f7f6 fcbf 	bl	8004078 <HAL_UART_RxCpltCallback>
}
 800d6fa:	bd08      	pop	{r3, pc}

0800d6fc <UART_SetConfig>:
{
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800d700:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d702:	6883      	ldr	r3, [r0, #8]
 800d704:	6900      	ldr	r0, [r0, #16]
 800d706:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d708:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d70a:	4303      	orrs	r3, r0
 800d70c:	430b      	orrs	r3, r1
 800d70e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d710:	496d      	ldr	r1, [pc, #436]	@ (800d8c8 <UART_SetConfig+0x1cc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d712:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d714:	4029      	ands	r1, r5
 800d716:	430b      	orrs	r3, r1
 800d718:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d71a:	6853      	ldr	r3, [r2, #4]
 800d71c:	68e1      	ldr	r1, [r4, #12]
 800d71e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800d722:	430b      	orrs	r3, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d724:	4969      	ldr	r1, [pc, #420]	@ (800d8cc <UART_SetConfig+0x1d0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d726:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d728:	428a      	cmp	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d72a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d72c:	6891      	ldr	r1, [r2, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d72e:	d032      	beq.n	800d796 <UART_SetConfig+0x9a>
    tmpreg |= huart->Init.OneBitSampling;
 800d730:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d732:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800d736:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d738:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d73a:	4965      	ldr	r1, [pc, #404]	@ (800d8d0 <UART_SetConfig+0x1d4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d73c:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d73e:	428a      	cmp	r2, r1
 800d740:	d115      	bne.n	800d76e <UART_SetConfig+0x72>
 800d742:	4b64      	ldr	r3, [pc, #400]	@ (800d8d4 <UART_SetConfig+0x1d8>)
 800d744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d748:	f003 0303 	and.w	r3, r3, #3
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	f000 8088 	beq.w	800d862 <UART_SetConfig+0x166>
 800d752:	2b03      	cmp	r3, #3
 800d754:	d072      	beq.n	800d83c <UART_SetConfig+0x140>
 800d756:	2b01      	cmp	r3, #1
 800d758:	d068      	beq.n	800d82c <UART_SetConfig+0x130>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d75a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d75e:	f000 808d 	beq.w	800d87c <UART_SetConfig+0x180>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d762:	f7ff f943 	bl	800c9ec <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800d766:	2800      	cmp	r0, #0
 800d768:	d16d      	bne.n	800d846 <UART_SetConfig+0x14a>
        pclk = (uint32_t) HSI_VALUE;
 800d76a:	2000      	movs	r0, #0
 800d76c:	e024      	b.n	800d7b8 <UART_SetConfig+0xbc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d76e:	4b5a      	ldr	r3, [pc, #360]	@ (800d8d8 <UART_SetConfig+0x1dc>)
 800d770:	429a      	cmp	r2, r3
 800d772:	d14d      	bne.n	800d810 <UART_SetConfig+0x114>
 800d774:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 800d778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d77c:	f003 030c 	and.w	r3, r3, #12
 800d780:	2b0c      	cmp	r3, #12
 800d782:	d818      	bhi.n	800d7b6 <UART_SetConfig+0xba>
 800d784:	e8df f003 	tbb	[pc, r3]
 800d788:	17171774 	.word	0x17171774
 800d78c:	17171752 	.word	0x17171752
 800d790:	1717176d 	.word	0x1717176d
 800d794:	5a          	.byte	0x5a
 800d795:	00          	.byte	0x00
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d796:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d79a:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d79c:	484d      	ldr	r0, [pc, #308]	@ (800d8d4 <UART_SetConfig+0x1d8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d79e:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d7a0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800d7a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d7a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7ac:	d05e      	beq.n	800d86c <UART_SetConfig+0x170>
 800d7ae:	d907      	bls.n	800d7c0 <UART_SetConfig+0xc4>
 800d7b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d7b4:	d00c      	beq.n	800d7d0 <UART_SetConfig+0xd4>
        ret = HAL_ERROR;
 800d7b6:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	e9c4 3319 	strd	r3, r3, [r4, #100]	@ 0x64
}
 800d7be:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d7c0:	b30b      	cbz	r3, 800d806 <UART_SetConfig+0x10a>
 800d7c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7c6:	d1f6      	bne.n	800d7b6 <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 800d7c8:	f7fe fce4 	bl	800c194 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800d7cc:	b910      	cbnz	r0, 800d7d4 <UART_SetConfig+0xd8>
 800d7ce:	e7cc      	b.n	800d76a <UART_SetConfig+0x6e>
        pclk = (uint32_t) LSE_VALUE;
 800d7d0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d7d4:	6862      	ldr	r2, [r4, #4]
 800d7d6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800d7da:	4283      	cmp	r3, r0
 800d7dc:	d8eb      	bhi.n	800d7b6 <UART_SetConfig+0xba>
 800d7de:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800d7e2:	d8e8      	bhi.n	800d7b6 <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d7e4:	0851      	lsrs	r1, r2, #1
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	468c      	mov	ip, r1
 800d7ea:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	fbe0 c105 	umlal	ip, r1, r0, r5
 800d7f4:	4660      	mov	r0, ip
 800d7f6:	f7f3 fbe5 	bl	8000fc4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d7fa:	4b38      	ldr	r3, [pc, #224]	@ (800d8dc <UART_SetConfig+0x1e0>)
 800d7fc:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800d800:	429a      	cmp	r2, r3
 800d802:	d8d8      	bhi.n	800d7b6 <UART_SetConfig+0xba>
 800d804:	e02a      	b.n	800d85c <UART_SetConfig+0x160>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d806:	f7ff f8df 	bl	800c9c8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800d80a:	2800      	cmp	r0, #0
 800d80c:	d1e2      	bne.n	800d7d4 <UART_SetConfig+0xd8>
 800d80e:	e7ac      	b.n	800d76a <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d810:	4b33      	ldr	r3, [pc, #204]	@ (800d8e0 <UART_SetConfig+0x1e4>)
 800d812:	429a      	cmp	r2, r3
 800d814:	d1cf      	bne.n	800d7b6 <UART_SetConfig+0xba>
 800d816:	4b2f      	ldr	r3, [pc, #188]	@ (800d8d4 <UART_SetConfig+0x1d8>)
 800d818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d81c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d820:	2b20      	cmp	r3, #32
 800d822:	d01e      	beq.n	800d862 <UART_SetConfig+0x166>
 800d824:	d808      	bhi.n	800d838 <UART_SetConfig+0x13c>
 800d826:	b31b      	cbz	r3, 800d870 <UART_SetConfig+0x174>
 800d828:	2b10      	cmp	r3, #16
 800d82a:	d1c4      	bne.n	800d7b6 <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d82c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d830:	d043      	beq.n	800d8ba <UART_SetConfig+0x1be>
        pclk = HAL_RCC_GetSysClockFreq();
 800d832:	f7fe fcaf 	bl	800c194 <HAL_RCC_GetSysClockFreq>
        break;
 800d836:	e796      	b.n	800d766 <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d838:	2b30      	cmp	r3, #48	@ 0x30
 800d83a:	d1bc      	bne.n	800d7b6 <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d83c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d840:	d038      	beq.n	800d8b4 <UART_SetConfig+0x1b8>
        pclk = (uint32_t) LSE_VALUE;
 800d842:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d846:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d848:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d84c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800d850:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d854:	f1a0 0310 	sub.w	r3, r0, #16
 800d858:	4293      	cmp	r3, r2
 800d85a:	d8ac      	bhi.n	800d7b6 <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d85c:	6823      	ldr	r3, [r4, #0]
 800d85e:	60d8      	str	r0, [r3, #12]
 800d860:	e783      	b.n	800d76a <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d862:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d866:	d023      	beq.n	800d8b0 <UART_SetConfig+0x1b4>
        pclk = (uint32_t) HSI_VALUE;
 800d868:	481e      	ldr	r0, [pc, #120]	@ (800d8e4 <UART_SetConfig+0x1e8>)
 800d86a:	e7ec      	b.n	800d846 <UART_SetConfig+0x14a>
        pclk = (uint32_t) HSI_VALUE;
 800d86c:	481d      	ldr	r0, [pc, #116]	@ (800d8e4 <UART_SetConfig+0x1e8>)
 800d86e:	e7b1      	b.n	800d7d4 <UART_SetConfig+0xd8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d870:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d874:	d024      	beq.n	800d8c0 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d876:	f7ff f8a7 	bl	800c9c8 <HAL_RCC_GetPCLK1Freq>
        break;
 800d87a:	e774      	b.n	800d766 <UART_SetConfig+0x6a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d87c:	f7ff f8b6 	bl	800c9ec <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800d880:	2800      	cmp	r0, #0
 800d882:	f43f af72 	beq.w	800d76a <UART_SetConfig+0x6e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d886:	0043      	lsls	r3, r0, #1
 800d888:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d88a:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d88e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800d892:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d896:	f1a3 0210 	sub.w	r2, r3, #16
 800d89a:	428a      	cmp	r2, r1
 800d89c:	d88b      	bhi.n	800d7b6 <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d89e:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800d8a2:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d8a4:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d8a6:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	60cb      	str	r3, [r1, #12]
 800d8ae:	e75c      	b.n	800d76a <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8b0:	4b0d      	ldr	r3, [pc, #52]	@ (800d8e8 <UART_SetConfig+0x1ec>)
 800d8b2:	e7e9      	b.n	800d888 <UART_SetConfig+0x18c>
 800d8b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800d8b8:	e7e6      	b.n	800d888 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 800d8ba:	f7fe fc6b 	bl	800c194 <HAL_RCC_GetSysClockFreq>
        break;
 800d8be:	e7df      	b.n	800d880 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8c0:	f7ff f882 	bl	800c9c8 <HAL_RCC_GetPCLK1Freq>
        break;
 800d8c4:	e7dc      	b.n	800d880 <UART_SetConfig+0x184>
 800d8c6:	bf00      	nop
 800d8c8:	efff69f3 	.word	0xefff69f3
 800d8cc:	40008000 	.word	0x40008000
 800d8d0:	40013800 	.word	0x40013800
 800d8d4:	40021000 	.word	0x40021000
 800d8d8:	40004400 	.word	0x40004400
 800d8dc:	000ffcff 	.word	0x000ffcff
 800d8e0:	40004800 	.word	0x40004800
 800d8e4:	00f42400 	.word	0x00f42400
 800d8e8:	01e84800 	.word	0x01e84800

0800d8ec <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d8ec:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d8ee:	07da      	lsls	r2, r3, #31
{
 800d8f0:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d8f2:	d506      	bpl.n	800d902 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d8f4:	6801      	ldr	r1, [r0, #0]
 800d8f6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d8f8:	684a      	ldr	r2, [r1, #4]
 800d8fa:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800d8fe:	4322      	orrs	r2, r4
 800d900:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d902:	079c      	lsls	r4, r3, #30
 800d904:	d506      	bpl.n	800d914 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d906:	6801      	ldr	r1, [r0, #0]
 800d908:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800d90a:	684a      	ldr	r2, [r1, #4]
 800d90c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d910:	4322      	orrs	r2, r4
 800d912:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d914:	0759      	lsls	r1, r3, #29
 800d916:	d506      	bpl.n	800d926 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d918:	6801      	ldr	r1, [r0, #0]
 800d91a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800d91c:	684a      	ldr	r2, [r1, #4]
 800d91e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d922:	4322      	orrs	r2, r4
 800d924:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d926:	071a      	lsls	r2, r3, #28
 800d928:	d506      	bpl.n	800d938 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d92a:	6801      	ldr	r1, [r0, #0]
 800d92c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800d92e:	684a      	ldr	r2, [r1, #4]
 800d930:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d934:	4322      	orrs	r2, r4
 800d936:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d938:	06dc      	lsls	r4, r3, #27
 800d93a:	d506      	bpl.n	800d94a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d93c:	6801      	ldr	r1, [r0, #0]
 800d93e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800d940:	688a      	ldr	r2, [r1, #8]
 800d942:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d946:	4322      	orrs	r2, r4
 800d948:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d94a:	0699      	lsls	r1, r3, #26
 800d94c:	d506      	bpl.n	800d95c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d94e:	6801      	ldr	r1, [r0, #0]
 800d950:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800d952:	688a      	ldr	r2, [r1, #8]
 800d954:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d958:	4322      	orrs	r2, r4
 800d95a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d95c:	065a      	lsls	r2, r3, #25
 800d95e:	d509      	bpl.n	800d974 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d960:	6801      	ldr	r1, [r0, #0]
 800d962:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800d964:	684a      	ldr	r2, [r1, #4]
 800d966:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800d96a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d96c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d970:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d972:	d00b      	beq.n	800d98c <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d974:	061b      	lsls	r3, r3, #24
 800d976:	d506      	bpl.n	800d986 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d978:	6802      	ldr	r2, [r0, #0]
 800d97a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800d97c:	6853      	ldr	r3, [r2, #4]
 800d97e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800d982:	430b      	orrs	r3, r1
 800d984:	6053      	str	r3, [r2, #4]
}
 800d986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d98a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d98c:	684a      	ldr	r2, [r1, #4]
 800d98e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800d990:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800d994:	4322      	orrs	r2, r4
 800d996:	604a      	str	r2, [r1, #4]
 800d998:	e7ec      	b.n	800d974 <UART_AdvFeatureConfig+0x88>
 800d99a:	bf00      	nop

0800d99c <UART_WaitOnFlagUntilTimeout>:
{
 800d99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9a4:	6805      	ldr	r5, [r0, #0]
{
 800d9a6:	4681      	mov	r9, r0
 800d9a8:	460f      	mov	r7, r1
 800d9aa:	4616      	mov	r6, r2
 800d9ac:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9ae:	e002      	b.n	800d9b6 <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 800d9b0:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d9b4:	d10a      	bne.n	800d9cc <UART_WaitOnFlagUntilTimeout+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9b6:	69ec      	ldr	r4, [r5, #28]
 800d9b8:	ea37 0404 	bics.w	r4, r7, r4
 800d9bc:	bf0c      	ite	eq
 800d9be:	2401      	moveq	r4, #1
 800d9c0:	2400      	movne	r4, #0
 800d9c2:	42b4      	cmp	r4, r6
 800d9c4:	d0f4      	beq.n	800d9b0 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 800d9c6:	2000      	movs	r0, #0
}
 800d9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9cc:	f7fc fae2 	bl	8009f94 <HAL_GetTick>
 800d9d0:	eba0 000a 	sub.w	r0, r0, sl
 800d9d4:	4540      	cmp	r0, r8
 800d9d6:	d831      	bhi.n	800da3c <UART_WaitOnFlagUntilTimeout+0xa0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d9d8:	f8d9 5000 	ldr.w	r5, [r9]
 800d9dc:	462b      	mov	r3, r5
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9de:	f1b8 0f00 	cmp.w	r8, #0
 800d9e2:	d02d      	beq.n	800da40 <UART_WaitOnFlagUntilTimeout+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d9e4:	682a      	ldr	r2, [r5, #0]
 800d9e6:	0751      	lsls	r1, r2, #29
 800d9e8:	d5e5      	bpl.n	800d9b6 <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d9ea:	69ea      	ldr	r2, [r5, #28]
 800d9ec:	0512      	lsls	r2, r2, #20
 800d9ee:	d5e2      	bpl.n	800d9b6 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d9f4:	622a      	str	r2, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9f6:	e855 2f00 	ldrex	r2, [r5]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d9fa:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9fe:	e845 2100 	strex	r1, r2, [r5]
 800da02:	b139      	cbz	r1, 800da14 <UART_WaitOnFlagUntilTimeout+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da04:	e853 2f00 	ldrex	r2, [r3]
 800da08:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da0c:	e843 2100 	strex	r1, r2, [r3]
 800da10:	2900      	cmp	r1, #0
 800da12:	d1f7      	bne.n	800da04 <UART_WaitOnFlagUntilTimeout+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da14:	f103 0208 	add.w	r2, r3, #8
 800da18:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da1c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da20:	f103 0008 	add.w	r0, r3, #8
 800da24:	e840 2100 	strex	r1, r2, [r0]
 800da28:	2900      	cmp	r1, #0
 800da2a:	d1f3      	bne.n	800da14 <UART_WaitOnFlagUntilTimeout+0x78>
          huart->gState = HAL_UART_STATE_READY;
 800da2c:	2320      	movs	r3, #32
 800da2e:	f8c9 3078 	str.w	r3, [r9, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800da32:	f8c9 307c 	str.w	r3, [r9, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800da36:	f8c9 3080 	str.w	r3, [r9, #128]	@ 0x80
          return HAL_TIMEOUT;
 800da3a:	e01a      	b.n	800da72 <UART_WaitOnFlagUntilTimeout+0xd6>
 800da3c:	f8d9 3000 	ldr.w	r3, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da40:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800da44:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da48:	e843 2100 	strex	r1, r2, [r3]
 800da4c:	2900      	cmp	r1, #0
 800da4e:	d1f7      	bne.n	800da40 <UART_WaitOnFlagUntilTimeout+0xa4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da50:	f103 0208 	add.w	r2, r3, #8
 800da54:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da58:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da5c:	f103 0008 	add.w	r0, r3, #8
 800da60:	e840 2100 	strex	r1, r2, [r0]
 800da64:	2900      	cmp	r1, #0
 800da66:	d1f3      	bne.n	800da50 <UART_WaitOnFlagUntilTimeout+0xb4>
        huart->gState = HAL_UART_STATE_READY;
 800da68:	2320      	movs	r3, #32
 800da6a:	f8c9 3078 	str.w	r3, [r9, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800da6e:	f8c9 307c 	str.w	r3, [r9, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800da72:	2300      	movs	r3, #0
 800da74:	f889 3074 	strb.w	r3, [r9, #116]	@ 0x74
        return HAL_TIMEOUT;
 800da78:	2003      	movs	r0, #3
 800da7a:	e7a5      	b.n	800d9c8 <UART_WaitOnFlagUntilTimeout+0x2c>

0800da7c <HAL_UART_Transmit>:
{
 800da7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da80:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800da82:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800da84:	2820      	cmp	r0, #32
{
 800da86:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 800da88:	d148      	bne.n	800db1c <HAL_UART_Transmit+0xa0>
    if ((pData == NULL) || (Size == 0U))
 800da8a:	460d      	mov	r5, r1
 800da8c:	2900      	cmp	r1, #0
 800da8e:	d041      	beq.n	800db14 <HAL_UART_Transmit+0x98>
 800da90:	4617      	mov	r7, r2
 800da92:	2a00      	cmp	r2, #0
 800da94:	d03e      	beq.n	800db14 <HAL_UART_Transmit+0x98>
 800da96:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800da98:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	d03d      	beq.n	800db1c <HAL_UART_Transmit+0xa0>
 800daa0:	2301      	movs	r3, #1
 800daa2:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daa6:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800daaa:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daac:	f8c4 8080 	str.w	r8, [r4, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dab0:	67a3      	str	r3, [r4, #120]	@ 0x78
    tickstart = HAL_GetTick();
 800dab2:	f7fc fa6f 	bl	8009f94 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dab6:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800dab8:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dabc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800dac0:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    tickstart = HAL_GetTick();
 800dac4:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dac6:	d02d      	beq.n	800db24 <HAL_UART_Transmit+0xa8>
    while (huart->TxXferCount > 0U)
 800dac8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
    __HAL_UNLOCK(huart);
 800dacc:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800dace:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800dad0:	f884 2074 	strb.w	r2, [r4, #116]	@ 0x74
    while (huart->TxXferCount > 0U)
 800dad4:	b96b      	cbnz	r3, 800daf2 <HAL_UART_Transmit+0x76>
 800dad6:	e02f      	b.n	800db38 <HAL_UART_Transmit+0xbc>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dad8:	f815 2b01 	ldrb.w	r2, [r5], #1
 800dadc:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 800dade:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 800dae2:	3a01      	subs	r2, #1
 800dae4:	b292      	uxth	r2, r2
 800dae6:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800daea:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800daee:	b29b      	uxth	r3, r3
 800daf0:	b313      	cbz	r3, 800db38 <HAL_UART_Transmit+0xbc>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800daf2:	9600      	str	r6, [sp, #0]
 800daf4:	463b      	mov	r3, r7
 800daf6:	2200      	movs	r2, #0
 800daf8:	2180      	movs	r1, #128	@ 0x80
 800dafa:	4620      	mov	r0, r4
 800dafc:	f7ff ff4e 	bl	800d99c <UART_WaitOnFlagUntilTimeout>
 800db00:	b9b0      	cbnz	r0, 800db30 <HAL_UART_Transmit+0xb4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db02:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800db04:	2d00      	cmp	r5, #0
 800db06:	d1e7      	bne.n	800dad8 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db08:	f838 2b02 	ldrh.w	r2, [r8], #2
 800db0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db10:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800db12:	e7e4      	b.n	800dade <HAL_UART_Transmit+0x62>
      return  HAL_ERROR;
 800db14:	2001      	movs	r0, #1
}
 800db16:	b002      	add	sp, #8
 800db18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(huart);
 800db1c:	2002      	movs	r0, #2
}
 800db1e:	b002      	add	sp, #8
 800db20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db24:	6923      	ldr	r3, [r4, #16]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d1ce      	bne.n	800dac8 <HAL_UART_Transmit+0x4c>
 800db2a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800db2c:	461d      	mov	r5, r3
 800db2e:	e7cb      	b.n	800dac8 <HAL_UART_Transmit+0x4c>
        return HAL_TIMEOUT;
 800db30:	2003      	movs	r0, #3
}
 800db32:	b002      	add	sp, #8
 800db34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800db38:	9600      	str	r6, [sp, #0]
 800db3a:	463b      	mov	r3, r7
 800db3c:	2200      	movs	r2, #0
 800db3e:	2140      	movs	r1, #64	@ 0x40
 800db40:	4620      	mov	r0, r4
 800db42:	f7ff ff2b 	bl	800d99c <UART_WaitOnFlagUntilTimeout>
 800db46:	2800      	cmp	r0, #0
 800db48:	d1f2      	bne.n	800db30 <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 800db4a:	2320      	movs	r3, #32
 800db4c:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_OK;
 800db4e:	e7e2      	b.n	800db16 <HAL_UART_Transmit+0x9a>

0800db50 <UART_CheckIdleState>:
{
 800db50:	b570      	push	{r4, r5, r6, lr}
 800db52:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db54:	2600      	movs	r6, #0
{
 800db56:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db58:	f8c0 6080 	str.w	r6, [r0, #128]	@ 0x80
  tickstart = HAL_GetTick();
 800db5c:	f7fc fa1a 	bl	8009f94 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db60:	6823      	ldr	r3, [r4, #0]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800db66:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db68:	d40c      	bmi.n	800db84 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	075b      	lsls	r3, r3, #29
 800db6e:	d418      	bmi.n	800dba2 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db70:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800db72:	2220      	movs	r2, #32
  return HAL_OK;
 800db74:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800db76:	67a2      	str	r2, [r4, #120]	@ 0x78
  __HAL_UNLOCK(huart);
 800db78:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800db7c:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db7e:	6623      	str	r3, [r4, #96]	@ 0x60
}
 800db80:	b002      	add	sp, #8
 800db82:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	4632      	mov	r2, r6
 800db8c:	4603      	mov	r3, r0
 800db8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800db92:	4620      	mov	r0, r4
 800db94:	f7ff ff02 	bl	800d99c <UART_WaitOnFlagUntilTimeout>
 800db98:	b978      	cbnz	r0, 800dbba <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db9a:	6823      	ldr	r3, [r4, #0]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	075b      	lsls	r3, r3, #29
 800dba0:	d5e6      	bpl.n	800db70 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dba2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dba6:	9300      	str	r3, [sp, #0]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	462b      	mov	r3, r5
 800dbac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f7ff fef3 	bl	800d99c <UART_WaitOnFlagUntilTimeout>
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	d0da      	beq.n	800db70 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800dbba:	2003      	movs	r0, #3
}
 800dbbc:	b002      	add	sp, #8
 800dbbe:	bd70      	pop	{r4, r5, r6, pc}

0800dbc0 <HAL_UART_Init>:
  if (huart == NULL)
 800dbc0:	b370      	cbz	r0, 800dc20 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800dbc2:	6f83      	ldr	r3, [r0, #120]	@ 0x78
{
 800dbc4:	b510      	push	{r4, lr}
 800dbc6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800dbc8:	b32b      	cbz	r3, 800dc16 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 800dbca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800dbcc:	2324      	movs	r3, #36	@ 0x24
 800dbce:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UART_DISABLE(huart);
 800dbd0:	6813      	ldr	r3, [r2, #0]
 800dbd2:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dbd6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800dbd8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dbda:	f7ff fd8f 	bl	800d6fc <UART_SetConfig>
 800dbde:	2801      	cmp	r0, #1
 800dbe0:	d017      	beq.n	800dc12 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dbe2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dbe4:	b98b      	cbnz	r3, 800dc0a <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dbe6:	6823      	ldr	r3, [r4, #0]
 800dbe8:	685a      	ldr	r2, [r3, #4]
 800dbea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800dbee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dbf0:	689a      	ldr	r2, [r3, #8]
 800dbf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800dbf6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800dbfe:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800dc00:	601a      	str	r2, [r3, #0]
}
 800dc02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800dc06:	f7ff bfa3 	b.w	800db50 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	f7ff fe6e 	bl	800d8ec <UART_AdvFeatureConfig>
 800dc10:	e7e9      	b.n	800dbe6 <HAL_UART_Init+0x26>
}
 800dc12:	2001      	movs	r0, #1
 800dc14:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800dc16:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    HAL_UART_MspInit(huart);
 800dc1a:	f7f9 fa05 	bl	8007028 <HAL_UART_MspInit>
 800dc1e:	e7d4      	b.n	800dbca <HAL_UART_Init+0xa>
}
 800dc20:	2001      	movs	r0, #1
 800dc22:	4770      	bx	lr

0800dc24 <UART_Start_Receive_IT>:
{
 800dc24:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 800dc26:	6884      	ldr	r4, [r0, #8]
  huart->pRxBuffPtr  = pData;
 800dc28:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->RxISR       = NULL;
 800dc2a:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 800dc2c:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
  huart->RxXferSize  = Size;
 800dc30:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->RxXferCount = Size;
 800dc34:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800dc38:	6643      	str	r3, [r0, #100]	@ 0x64
  UART_MASK_COMPUTATION(huart);
 800dc3a:	d04e      	beq.n	800dcda <UART_Start_Receive_IT+0xb6>
 800dc3c:	bb74      	cbnz	r4, 800dc9c <UART_Start_Receive_IT+0x78>
 800dc3e:	6903      	ldr	r3, [r0, #16]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	bf14      	ite	ne
 800dc44:	237f      	movne	r3, #127	@ 0x7f
 800dc46:	23ff      	moveq	r3, #255	@ 0xff
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc48:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc4a:	2122      	movs	r1, #34	@ 0x22
 800dc4c:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc4e:	f8c0 4080 	str.w	r4, [r0, #128]	@ 0x80
  UART_MASK_COMPUTATION(huart);
 800dc52:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc56:	67c1      	str	r1, [r0, #124]	@ 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc58:	f102 0308 	add.w	r3, r2, #8
 800dc5c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc60:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc64:	f102 0408 	add.w	r4, r2, #8
 800dc68:	e844 3100 	strex	r1, r3, [r4]
 800dc6c:	2900      	cmp	r1, #0
 800dc6e:	d1f3      	bne.n	800dc58 <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc70:	6884      	ldr	r4, [r0, #8]
 800dc72:	6903      	ldr	r3, [r0, #16]
 800dc74:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 800dc78:	d019      	beq.n	800dcae <UART_Start_Receive_IT+0x8a>
 800dc7a:	4c1e      	ldr	r4, [pc, #120]	@ (800dcf4 <UART_Start_Receive_IT+0xd0>)
 800dc7c:	6644      	str	r4, [r0, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 800dc7e:	f880 1074 	strb.w	r1, [r0, #116]	@ 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dc82:	b1cb      	cbz	r3, 800dcb8 <UART_Start_Receive_IT+0x94>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc84:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800dc88:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc8c:	e842 3100 	strex	r1, r3, [r2]
 800dc90:	2900      	cmp	r1, #0
 800dc92:	d1f7      	bne.n	800dc84 <UART_Start_Receive_IT+0x60>
}
 800dc94:	2000      	movs	r0, #0
 800dc96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc9a:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800dc9c:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 800dca0:	d1d2      	bne.n	800dc48 <UART_Start_Receive_IT+0x24>
 800dca2:	6903      	ldr	r3, [r0, #16]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	bf14      	ite	ne
 800dca8:	233f      	movne	r3, #63	@ 0x3f
 800dcaa:	237f      	moveq	r3, #127	@ 0x7f
 800dcac:	e7cc      	b.n	800dc48 <UART_Start_Receive_IT+0x24>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dcae:	b9db      	cbnz	r3, 800dce8 <UART_Start_Receive_IT+0xc4>
 800dcb0:	4911      	ldr	r1, [pc, #68]	@ (800dcf8 <UART_Start_Receive_IT+0xd4>)
 800dcb2:	6641      	str	r1, [r0, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 800dcb4:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb8:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800dcbc:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc0:	e842 3100 	strex	r1, r3, [r2]
 800dcc4:	2900      	cmp	r1, #0
 800dcc6:	d0e5      	beq.n	800dc94 <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc8:	e852 3f00 	ldrex	r3, [r2]
 800dccc:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcd0:	e842 3100 	strex	r1, r3, [r2]
 800dcd4:	2900      	cmp	r1, #0
 800dcd6:	d1ef      	bne.n	800dcb8 <UART_Start_Receive_IT+0x94>
 800dcd8:	e7dc      	b.n	800dc94 <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 800dcda:	6902      	ldr	r2, [r0, #16]
 800dcdc:	2a00      	cmp	r2, #0
 800dcde:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800dce2:	bf18      	it	ne
 800dce4:	23ff      	movne	r3, #255	@ 0xff
 800dce6:	e7af      	b.n	800dc48 <UART_Start_Receive_IT+0x24>
 800dce8:	4b02      	ldr	r3, [pc, #8]	@ (800dcf4 <UART_Start_Receive_IT+0xd0>)
 800dcea:	6643      	str	r3, [r0, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 800dcec:	f880 1074 	strb.w	r1, [r0, #116]	@ 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dcf0:	e7c8      	b.n	800dc84 <UART_Start_Receive_IT+0x60>
 800dcf2:	bf00      	nop
 800dcf4:	0800d5bd 	.word	0x0800d5bd
 800dcf8:	0800d65d 	.word	0x0800d65d

0800dcfc <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800dcfc:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800dcfe:	2b20      	cmp	r3, #32
 800dd00:	d120      	bne.n	800dd44 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 800dd02:	b1e9      	cbz	r1, 800dd40 <HAL_UART_Receive_IT+0x44>
 800dd04:	b1e2      	cbz	r2, 800dd40 <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 800dd06:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d01a      	beq.n	800dd44 <HAL_UART_Receive_IT+0x48>
{
 800dd0e:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd10:	4b0d      	ldr	r3, [pc, #52]	@ (800dd48 <HAL_UART_Receive_IT+0x4c>)
 800dd12:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 800dd14:	2501      	movs	r5, #1
 800dd16:	f880 5074 	strb.w	r5, [r0, #116]	@ 0x74
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd1a:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd1c:	f04f 0500 	mov.w	r5, #0
 800dd20:	6605      	str	r5, [r0, #96]	@ 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd22:	d00a      	beq.n	800dd3a <HAL_UART_Receive_IT+0x3e>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd24:	6863      	ldr	r3, [r4, #4]
 800dd26:	021b      	lsls	r3, r3, #8
 800dd28:	d507      	bpl.n	800dd3a <HAL_UART_Receive_IT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd2a:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd32:	e844 3500 	strex	r5, r3, [r4]
 800dd36:	2d00      	cmp	r5, #0
 800dd38:	d1f7      	bne.n	800dd2a <HAL_UART_Receive_IT+0x2e>
}
 800dd3a:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 800dd3c:	f7ff bf72 	b.w	800dc24 <UART_Start_Receive_IT>
      return HAL_ERROR;
 800dd40:	2001      	movs	r0, #1
 800dd42:	4770      	bx	lr
    __HAL_LOCK(huart);
 800dd44:	2002      	movs	r0, #2
}
 800dd46:	4770      	bx	lr
 800dd48:	40008000 	.word	0x40008000

0800dd4c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop

0800dd50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dd50:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800dd52:	f000 fa77 	bl	800e244 <vTaskStartScheduler>
  
  return osOK;
}
 800dd56:	2000      	movs	r0, #0
 800dd58:	bd08      	pop	{r3, pc}
 800dd5a:	bf00      	nop

0800dd5c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800dd5c:	b510      	push	{r4, lr}
 800dd5e:	4684      	mov	ip, r0
 800dd60:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd62:	f8bc 2010 	ldrh.w	r2, [ip, #16]
 800dd66:	f8dc 1000 	ldr.w	r1, [ip]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dd6a:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd6e:	6840      	ldr	r0, [r0, #4]
{
 800dd70:	b084      	sub	sp, #16
  if (priority != osPriorityError) {
 800dd72:	f1bc 0f84 	cmp.w	ip, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 800dd76:	bf14      	ite	ne
 800dd78:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dd7c:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd7e:	9400      	str	r4, [sp, #0]
 800dd80:	ac03      	add	r4, sp, #12
 800dd82:	9401      	str	r4, [sp, #4]
 800dd84:	f000 f89e 	bl	800dec4 <xTaskCreate>
 800dd88:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800dd8a:	bf0c      	ite	eq
 800dd8c:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800dd8e:	2000      	movne	r0, #0
}
 800dd90:	b004      	add	sp, #16
 800dd92:	bd10      	pop	{r4, pc}

0800dd94 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800dd94:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800dd96:	2801      	cmp	r0, #1
 800dd98:	bf38      	it	cc
 800dd9a:	2001      	movcc	r0, #1
 800dd9c:	f000 fca2 	bl	800e6e4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800dda0:	2000      	movs	r0, #0
 800dda2:	bd08      	pop	{r3, pc}

0800dda4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dda4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dda8:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ddac:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ddae:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ddb2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ddb6:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop

0800ddbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop

0800ddc4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ddc4:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800ddc6:	6803      	ldr	r3, [r0, #0]
{
 800ddc8:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ddca:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 800ddcc:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ddce:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ddd2:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ddd4:	6091      	str	r1, [r2, #8]
}
 800ddd6:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 800ddda:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800dddc:	6003      	str	r3, [r0, #0]
}
 800ddde:	4770      	bx	lr

0800dde0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dde0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dde2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dde4:	1c6b      	adds	r3, r5, #1
 800dde6:	d010      	beq.n	800de0a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dde8:	f100 0308 	add.w	r3, r0, #8
 800ddec:	461c      	mov	r4, r3
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	42aa      	cmp	r2, r5
 800ddf4:	d9fa      	bls.n	800ddec <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800ddf6:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800ddf8:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800ddfa:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ddfc:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ddfe:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800de00:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800de02:	6108      	str	r0, [r1, #16]
}
 800de04:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 800de06:	6002      	str	r2, [r0, #0]
}
 800de08:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800de0a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800de0c:	6863      	ldr	r3, [r4, #4]
 800de0e:	e7f2      	b.n	800ddf6 <vListInsert+0x16>

0800de10 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800de10:	6903      	ldr	r3, [r0, #16]
{
 800de12:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de14:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800de18:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de1a:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 800de1c:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800de1e:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800de20:	bf08      	it	eq
 800de22:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800de24:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800de26:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 800de2a:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 800de2c:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 800de2e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800de30:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800de32:	6818      	ldr	r0, [r3, #0]
}
 800de34:	4770      	bx	lr
 800de36:	bf00      	nop

0800de38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800de38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800de3a:	4b1b      	ldr	r3, [pc, #108]	@ (800dea8 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de3c:	4e1b      	ldr	r6, [pc, #108]	@ (800deac <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800de3e:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de40:	6833      	ldr	r3, [r6, #0]
{
 800de42:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de44:	1d18      	adds	r0, r3, #4
{
 800de46:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de48:	f7ff ffe2 	bl	800de10 <uxListRemove>
 800de4c:	b940      	cbnz	r0, 800de60 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800de4e:	6833      	ldr	r3, [r6, #0]
 800de50:	4917      	ldr	r1, [pc, #92]	@ (800deb0 <prvAddCurrentTaskToDelayedList+0x78>)
 800de52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de54:	2201      	movs	r2, #1
 800de56:	409a      	lsls	r2, r3
 800de58:	680b      	ldr	r3, [r1, #0]
 800de5a:	ea23 0302 	bic.w	r3, r3, r2
 800de5e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de60:	1c6b      	adds	r3, r5, #1
 800de62:	d017      	beq.n	800de94 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800de64:	6833      	ldr	r3, [r6, #0]
 800de66:	1964      	adds	r4, r4, r5
 800de68:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800de6a:	d307      	bcc.n	800de7c <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de6c:	4b11      	ldr	r3, [pc, #68]	@ (800deb4 <prvAddCurrentTaskToDelayedList+0x7c>)
 800de6e:	6818      	ldr	r0, [r3, #0]
 800de70:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800de72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de76:	3104      	adds	r1, #4
 800de78:	f7ff bfb2 	b.w	800dde0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de7c:	4b0e      	ldr	r3, [pc, #56]	@ (800deb8 <prvAddCurrentTaskToDelayedList+0x80>)
 800de7e:	6818      	ldr	r0, [r3, #0]
 800de80:	6831      	ldr	r1, [r6, #0]
 800de82:	3104      	adds	r1, #4
 800de84:	f7ff ffac 	bl	800dde0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de88:	4b0c      	ldr	r3, [pc, #48]	@ (800debc <prvAddCurrentTaskToDelayedList+0x84>)
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800de8e:	bf88      	it	hi
 800de90:	601c      	strhi	r4, [r3, #0]
}
 800de92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de94:	2f00      	cmp	r7, #0
 800de96:	d0e5      	beq.n	800de64 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de98:	6831      	ldr	r1, [r6, #0]
 800de9a:	4809      	ldr	r0, [pc, #36]	@ (800dec0 <prvAddCurrentTaskToDelayedList+0x88>)
}
 800de9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dea0:	3104      	adds	r1, #4
 800dea2:	f7ff bf8f 	b.w	800ddc4 <vListInsertEnd>
 800dea6:	bf00      	nop
 800dea8:	20001c10 	.word	0x20001c10
 800deac:	20001d14 	.word	0x20001d14
 800deb0:	20001c0c 	.word	0x20001c0c
 800deb4:	20001c58 	.word	0x20001c58
 800deb8:	20001c5c 	.word	0x20001c5c
 800debc:	20001bf4 	.word	0x20001bf4
 800dec0:	20001c18 	.word	0x20001c18

0800dec4 <xTaskCreate>:
	{
 800dec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dec8:	0095      	lsls	r5, r2, #2
	{
 800deca:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800decc:	4628      	mov	r0, r5
	{
 800dece:	460f      	mov	r7, r1
 800ded0:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ded2:	f000 ff61 	bl	800ed98 <pvPortMalloc>
			if( pxStack != NULL )
 800ded6:	2800      	cmp	r0, #0
 800ded8:	f000 8087 	beq.w	800dfea <xTaskCreate+0x126>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dedc:	4606      	mov	r6, r0
 800dede:	20a0      	movs	r0, #160	@ 0xa0
 800dee0:	f000 ff5a 	bl	800ed98 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800dee4:	4604      	mov	r4, r0
 800dee6:	2800      	cmp	r0, #0
 800dee8:	d07c      	beq.n	800dfe4 <xTaskCreate+0x120>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800deea:	3d04      	subs	r5, #4
 800deec:	4435      	add	r5, r6
					pxNewTCB->pxStack = pxStack;
 800deee:	6306      	str	r6, [r0, #48]	@ 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800def0:	f025 0607 	bic.w	r6, r5, #7
	if( pcName != NULL )
 800def4:	2f00      	cmp	r7, #0
 800def6:	f000 808b 	beq.w	800e010 <xTaskCreate+0x14c>
 800defa:	f107 3cff 	add.w	ip, r7, #4294967295
 800defe:	f100 0333 	add.w	r3, r0, #51	@ 0x33
 800df02:	370f      	adds	r7, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df04:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 800df08:	f803 5f01 	strb.w	r5, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800df0c:	b10d      	cbz	r5, 800df12 <xTaskCreate+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df0e:	45bc      	cmp	ip, r7
 800df10:	d1f8      	bne.n	800df04 <xTaskCreate+0x40>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df12:	2300      	movs	r3, #0
 800df14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df18:	9d08      	ldr	r5, [sp, #32]
 800df1a:	2d06      	cmp	r5, #6
 800df1c:	bf28      	it	cs
 800df1e:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 800df20:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df24:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800df26:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800df28:	6465      	str	r5, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df2a:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 800df2c:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df30:	f7ff ff44 	bl	800ddbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df34:	f104 0018 	add.w	r0, r4, #24
 800df38:	f7ff ff40 	bl	800ddbc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df3c:	f1c5 0507 	rsb	r5, r5, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800df40:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df42:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800df44:	f8c4 a098 	str.w	sl, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800df48:	4651      	mov	r1, sl
 800df4a:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df4c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800df4e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800df50:	f884 a09c 	strb.w	sl, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800df54:	f003 f8ae 	bl	80110b4 <memset>
 800df58:	4b41      	ldr	r3, [pc, #260]	@ (800e060 <xTaskCreate+0x19c>)
 800df5a:	6523      	str	r3, [r4, #80]	@ 0x50
 800df5c:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 800df60:	33d0      	adds	r3, #208	@ 0xd0
 800df62:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df64:	464a      	mov	r2, r9
 800df66:	4641      	mov	r1, r8
 800df68:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800df6a:	6565      	str	r5, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df6c:	f000 fd08 	bl	800e980 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 800df70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df72:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800df74:	b103      	cbz	r3, 800df78 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800df76:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 800df78:	f000 fd2c 	bl	800e9d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800df7c:	4a39      	ldr	r2, [pc, #228]	@ (800e064 <xTaskCreate+0x1a0>)
		if( pxCurrentTCB == NULL )
 800df7e:	4d3a      	ldr	r5, [pc, #232]	@ (800e068 <xTaskCreate+0x1a4>)
		uxCurrentNumberOfTasks++;
 800df80:	6813      	ldr	r3, [r2, #0]
 800df82:	3301      	adds	r3, #1
 800df84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800df86:	682b      	ldr	r3, [r5, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d038      	beq.n	800dffe <xTaskCreate+0x13a>
			if( xSchedulerRunning == pdFALSE )
 800df8c:	4e37      	ldr	r6, [pc, #220]	@ (800e06c <xTaskCreate+0x1a8>)
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800df8e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800df90:	6833      	ldr	r3, [r6, #0]
 800df92:	b373      	cbz	r3, 800dff2 <xTaskCreate+0x12e>
 800df94:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 800e090 <xTaskCreate+0x1cc>
		prvAddTaskToReadyList( pxNewTCB );
 800df98:	4a35      	ldr	r2, [pc, #212]	@ (800e070 <xTaskCreate+0x1ac>)
 800df9a:	4639      	mov	r1, r7
		uxTaskNumber++;
 800df9c:	4f35      	ldr	r7, [pc, #212]	@ (800e074 <xTaskCreate+0x1b0>)
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800dfa4:	6817      	ldr	r7, [r2, #0]
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	4083      	lsls	r3, r0
 800dfaa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dfae:	433b      	orrs	r3, r7
 800dfb0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800dfb4:	6013      	str	r3, [r2, #0]
 800dfb6:	f7ff ff05 	bl	800ddc4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800dfba:	f000 fd2d 	bl	800ea18 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800dfbe:	6833      	ldr	r3, [r6, #0]
 800dfc0:	b173      	cbz	r3, 800dfe0 <xTaskCreate+0x11c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dfc2:	682a      	ldr	r2, [r5, #0]
 800dfc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dfc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d209      	bcs.n	800dfe0 <xTaskCreate+0x11c>
			taskYIELD_IF_USING_PREEMPTION();
 800dfcc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dfd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dfd8:	f3bf 8f4f 	dsb	sy
 800dfdc:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800dfe0:	2001      	movs	r0, #1
		return xReturn;
 800dfe2:	e004      	b.n	800dfee <xTaskCreate+0x12a>
					vPortFree( pxStack );
 800dfe4:	4630      	mov	r0, r6
 800dfe6:	f000 ff6b 	bl	800eec0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dfea:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800dfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dff2:	682b      	ldr	r3, [r5, #0]
 800dff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dff6:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 800dff8:	bf98      	it	ls
 800dffa:	602c      	strls	r4, [r5, #0]
 800dffc:	e7ca      	b.n	800df94 <xTaskCreate+0xd0>
			pxCurrentTCB = pxNewTCB;
 800dffe:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e000:	6813      	ldr	r3, [r2, #0]
 800e002:	2b01      	cmp	r3, #1
 800e004:	d007      	beq.n	800e016 <xTaskCreate+0x152>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e006:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800e008:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 800e090 <xTaskCreate+0x1cc>
 800e00c:	4e17      	ldr	r6, [pc, #92]	@ (800e06c <xTaskCreate+0x1a8>)
 800e00e:	e7c3      	b.n	800df98 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e010:	f880 7034 	strb.w	r7, [r0, #52]	@ 0x34
 800e014:	e780      	b.n	800df18 <xTaskCreate+0x54>
 800e016:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 800e090 <xTaskCreate+0x1cc>
 800e01a:	4646      	mov	r6, r8
 800e01c:	f108 098c 	add.w	r9, r8, #140	@ 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e020:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e022:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e024:	f7ff febe 	bl	800dda4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e028:	454e      	cmp	r6, r9
 800e02a:	d1f9      	bne.n	800e020 <xTaskCreate+0x15c>
	vListInitialise( &xDelayedTaskList1 );
 800e02c:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800e094 <xTaskCreate+0x1d0>
	vListInitialise( &xDelayedTaskList2 );
 800e030:	4e11      	ldr	r6, [pc, #68]	@ (800e078 <xTaskCreate+0x1b4>)
	vListInitialise( &xDelayedTaskList1 );
 800e032:	4648      	mov	r0, r9
 800e034:	f7ff feb6 	bl	800dda4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e038:	4630      	mov	r0, r6
 800e03a:	f7ff feb3 	bl	800dda4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e03e:	480f      	ldr	r0, [pc, #60]	@ (800e07c <xTaskCreate+0x1b8>)
 800e040:	f7ff feb0 	bl	800dda4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e044:	480e      	ldr	r0, [pc, #56]	@ (800e080 <xTaskCreate+0x1bc>)
 800e046:	f7ff fead 	bl	800dda4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e04a:	480e      	ldr	r0, [pc, #56]	@ (800e084 <xTaskCreate+0x1c0>)
 800e04c:	f7ff feaa 	bl	800dda4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e050:	4b0d      	ldr	r3, [pc, #52]	@ (800e088 <xTaskCreate+0x1c4>)
		prvAddTaskToReadyList( pxNewTCB );
 800e052:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 800e054:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e058:	4b0c      	ldr	r3, [pc, #48]	@ (800e08c <xTaskCreate+0x1c8>)
 800e05a:	601e      	str	r6, [r3, #0]
 800e05c:	4e03      	ldr	r6, [pc, #12]	@ (800e06c <xTaskCreate+0x1a8>)
}
 800e05e:	e79b      	b.n	800df98 <xTaskCreate+0xd4>
 800e060:	20005d54 	.word	0x20005d54
 800e064:	20001c14 	.word	0x20001c14
 800e068:	20001d14 	.word	0x20001d14
 800e06c:	20001c08 	.word	0x20001c08
 800e070:	20001c0c 	.word	0x20001c0c
 800e074:	20001bf8 	.word	0x20001bf8
 800e078:	20001c60 	.word	0x20001c60
 800e07c:	20001c44 	.word	0x20001c44
 800e080:	20001c30 	.word	0x20001c30
 800e084:	20001c18 	.word	0x20001c18
 800e088:	20001c5c 	.word	0x20001c5c
 800e08c:	20001c58 	.word	0x20001c58
 800e090:	20001c88 	.word	0x20001c88
 800e094:	20001c74 	.word	0x20001c74

0800e098 <vTaskDelete>:
	{
 800e098:	b570      	push	{r4, r5, r6, lr}
 800e09a:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e09c:	4d37      	ldr	r5, [pc, #220]	@ (800e17c <vTaskDelete+0xe4>)
		taskENTER_CRITICAL();
 800e09e:	f000 fc99 	bl	800e9d4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e0a2:	2c00      	cmp	r4, #0
 800e0a4:	d051      	beq.n	800e14a <vTaskDelete+0xb2>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0a6:	1d26      	adds	r6, r4, #4
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	f7ff feb1 	bl	800de10 <uxListRemove>
 800e0ae:	b938      	cbnz	r0, 800e0c0 <vTaskDelete+0x28>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e0b0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e0b2:	4933      	ldr	r1, [pc, #204]	@ (800e180 <vTaskDelete+0xe8>)
 800e0b4:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800e0b8:	009b      	lsls	r3, r3, #2
 800e0ba:	58cb      	ldr	r3, [r1, r3]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d032      	beq.n	800e126 <vTaskDelete+0x8e>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e0c0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e0c2:	b11b      	cbz	r3, 800e0cc <vTaskDelete+0x34>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0c4:	f104 0018 	add.w	r0, r4, #24
 800e0c8:	f7ff fea2 	bl	800de10 <uxListRemove>
			uxTaskNumber++;
 800e0cc:	4a2d      	ldr	r2, [pc, #180]	@ (800e184 <vTaskDelete+0xec>)
 800e0ce:	6813      	ldr	r3, [r2, #0]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 800e0d4:	682b      	ldr	r3, [r5, #0]
 800e0d6:	42a3      	cmp	r3, r4
 800e0d8:	d02e      	beq.n	800e138 <vTaskDelete+0xa0>
				--uxCurrentNumberOfTasks;
 800e0da:	4a2b      	ldr	r2, [pc, #172]	@ (800e188 <vTaskDelete+0xf0>)
 800e0dc:	6813      	ldr	r3, [r2, #0]
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e0de:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
				--uxCurrentNumberOfTasks;
 800e0e2:	3b01      	subs	r3, #1
 800e0e4:	6013      	str	r3, [r2, #0]
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e0e6:	f003 f849 	bl	801117c <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800e0ea:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e0ec:	f000 fee8 	bl	800eec0 <vPortFree>
			vPortFree( pxTCB );
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f000 fee5 	bl	800eec0 <vPortFree>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0f6:	4b25      	ldr	r3, [pc, #148]	@ (800e18c <vTaskDelete+0xf4>)
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	6812      	ldr	r2, [r2, #0]
 800e0fc:	b172      	cbz	r2, 800e11c <vTaskDelete+0x84>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0fe:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e100:	4b23      	ldr	r3, [pc, #140]	@ (800e190 <vTaskDelete+0xf8>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e102:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e104:	68d2      	ldr	r2, [r2, #12]
 800e106:	6852      	ldr	r2, [r2, #4]
 800e108:	601a      	str	r2, [r3, #0]
		taskEXIT_CRITICAL();
 800e10a:	f000 fc85 	bl	800ea18 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e10e:	4b21      	ldr	r3, [pc, #132]	@ (800e194 <vTaskDelete+0xfc>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	b113      	cbz	r3, 800e11a <vTaskDelete+0x82>
			if( pxTCB == pxCurrentTCB )
 800e114:	682b      	ldr	r3, [r5, #0]
 800e116:	42a3      	cmp	r3, r4
 800e118:	d019      	beq.n	800e14e <vTaskDelete+0xb6>
	}
 800e11a:	bd70      	pop	{r4, r5, r6, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 800e11c:	4b1c      	ldr	r3, [pc, #112]	@ (800e190 <vTaskDelete+0xf8>)
 800e11e:	f04f 32ff 	mov.w	r2, #4294967295
 800e122:	601a      	str	r2, [r3, #0]
 800e124:	e7f1      	b.n	800e10a <vTaskDelete+0x72>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e126:	491c      	ldr	r1, [pc, #112]	@ (800e198 <vTaskDelete+0x100>)
 800e128:	2301      	movs	r3, #1
 800e12a:	fa03 f202 	lsl.w	r2, r3, r2
 800e12e:	680b      	ldr	r3, [r1, #0]
 800e130:	ea23 0302 	bic.w	r3, r3, r2
 800e134:	600b      	str	r3, [r1, #0]
 800e136:	e7c3      	b.n	800e0c0 <vTaskDelete+0x28>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e138:	4818      	ldr	r0, [pc, #96]	@ (800e19c <vTaskDelete+0x104>)
 800e13a:	4631      	mov	r1, r6
 800e13c:	f7ff fe42 	bl	800ddc4 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 800e140:	4a17      	ldr	r2, [pc, #92]	@ (800e1a0 <vTaskDelete+0x108>)
 800e142:	6813      	ldr	r3, [r2, #0]
 800e144:	3301      	adds	r3, #1
 800e146:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 800e148:	e7df      	b.n	800e10a <vTaskDelete+0x72>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e14a:	682c      	ldr	r4, [r5, #0]
 800e14c:	e7ab      	b.n	800e0a6 <vTaskDelete+0xe>
				configASSERT( uxSchedulerSuspended == 0 );
 800e14e:	4b15      	ldr	r3, [pc, #84]	@ (800e1a4 <vTaskDelete+0x10c>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	b143      	cbz	r3, 800e166 <vTaskDelete+0xce>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e158:	f383 8811 	msr	BASEPRI, r3
 800e15c:	f3bf 8f6f 	isb	sy
 800e160:	f3bf 8f4f 	dsb	sy
 800e164:	e7fe      	b.n	800e164 <vTaskDelete+0xcc>
				portYIELD_WITHIN_API();
 800e166:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e16a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e16e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e172:	f3bf 8f4f 	dsb	sy
 800e176:	f3bf 8f6f 	isb	sy
	}
 800e17a:	bd70      	pop	{r4, r5, r6, pc}
 800e17c:	20001d14 	.word	0x20001d14
 800e180:	20001c88 	.word	0x20001c88
 800e184:	20001bf8 	.word	0x20001bf8
 800e188:	20001c14 	.word	0x20001c14
 800e18c:	20001c5c 	.word	0x20001c5c
 800e190:	20001bf4 	.word	0x20001bf4
 800e194:	20001c08 	.word	0x20001c08
 800e198:	20001c0c 	.word	0x20001c0c
 800e19c:	20001c30 	.word	0x20001c30
 800e1a0:	20001c2c 	.word	0x20001c2c
 800e1a4:	20001bec 	.word	0x20001bec

0800e1a8 <vTaskResume>:
	{
 800e1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 800e1aa:	b178      	cbz	r0, 800e1cc <vTaskResume+0x24>
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800e1ac:	4d20      	ldr	r5, [pc, #128]	@ (800e230 <vTaskResume+0x88>)
 800e1ae:	682b      	ldr	r3, [r5, #0]
 800e1b0:	4283      	cmp	r3, r0
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	d009      	beq.n	800e1ca <vTaskResume+0x22>
			taskENTER_CRITICAL();
 800e1b6:	f000 fc0d 	bl	800e9d4 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e1ba:	4b1e      	ldr	r3, [pc, #120]	@ (800e234 <vTaskResume+0x8c>)
 800e1bc:	6962      	ldr	r2, [r4, #20]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d00d      	beq.n	800e1de <vTaskResume+0x36>
	}
 800e1c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			taskEXIT_CRITICAL();
 800e1c6:	f000 bc27 	b.w	800ea18 <vPortExitCritical>
	}
 800e1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d0:	f383 8811 	msr	BASEPRI, r3
 800e1d4:	f3bf 8f6f 	isb	sy
 800e1d8:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 800e1dc:	e7fe      	b.n	800e1dc <vTaskResume+0x34>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800e1de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e1e0:	4a15      	ldr	r2, [pc, #84]	@ (800e238 <vTaskResume+0x90>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d0ed      	beq.n	800e1c2 <vTaskResume+0x1a>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d1eb      	bne.n	800e1c2 <vTaskResume+0x1a>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800e1ea:	1d26      	adds	r6, r4, #4
 800e1ec:	4630      	mov	r0, r6
 800e1ee:	f7ff fe0f 	bl	800de10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e1f2:	4812      	ldr	r0, [pc, #72]	@ (800e23c <vTaskResume+0x94>)
 800e1f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e1f6:	6807      	ldr	r7, [r0, #0]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	4631      	mov	r1, r6
 800e1fc:	409a      	lsls	r2, r3
 800e1fe:	4e10      	ldr	r6, [pc, #64]	@ (800e240 <vTaskResume+0x98>)
 800e200:	433a      	orrs	r2, r7
 800e202:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e206:	6002      	str	r2, [r0, #0]
 800e208:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 800e20c:	f7ff fdda 	bl	800ddc4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e210:	682b      	ldr	r3, [r5, #0]
 800e212:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e216:	429a      	cmp	r2, r3
 800e218:	d3d3      	bcc.n	800e1c2 <vTaskResume+0x1a>
						taskYIELD_IF_USING_PREEMPTION();
 800e21a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e21e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e222:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e226:	f3bf 8f4f 	dsb	sy
 800e22a:	f3bf 8f6f 	isb	sy
 800e22e:	e7c8      	b.n	800e1c2 <vTaskResume+0x1a>
 800e230:	20001d14 	.word	0x20001d14
 800e234:	20001c18 	.word	0x20001c18
 800e238:	20001c44 	.word	0x20001c44
 800e23c:	20001c0c 	.word	0x20001c0c
 800e240:	20001c88 	.word	0x20001c88

0800e244 <vTaskStartScheduler>:
{
 800e244:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800e246:	4b1a      	ldr	r3, [pc, #104]	@ (800e2b0 <vTaskStartScheduler+0x6c>)
 800e248:	491a      	ldr	r1, [pc, #104]	@ (800e2b4 <vTaskStartScheduler+0x70>)
 800e24a:	481b      	ldr	r0, [pc, #108]	@ (800e2b8 <vTaskStartScheduler+0x74>)
{
 800e24c:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 800e24e:	2400      	movs	r4, #0
 800e250:	e9cd 4300 	strd	r4, r3, [sp]
 800e254:	2280      	movs	r2, #128	@ 0x80
 800e256:	4623      	mov	r3, r4
 800e258:	f7ff fe34 	bl	800dec4 <xTaskCreate>
	if( xReturn == pdPASS )
 800e25c:	2801      	cmp	r0, #1
 800e25e:	d00c      	beq.n	800e27a <vTaskStartScheduler+0x36>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e260:	3001      	adds	r0, #1
 800e262:	d001      	beq.n	800e268 <vTaskStartScheduler+0x24>
}
 800e264:	b003      	add	sp, #12
 800e266:	bd30      	pop	{r4, r5, pc}
 800e268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e26c:	f383 8811 	msr	BASEPRI, r3
 800e270:	f3bf 8f6f 	isb	sy
 800e274:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e278:	e7fe      	b.n	800e278 <vTaskStartScheduler+0x34>
 800e27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e27e:	f383 8811 	msr	BASEPRI, r3
 800e282:	f3bf 8f6f 	isb	sy
 800e286:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e28a:	4b0c      	ldr	r3, [pc, #48]	@ (800e2bc <vTaskStartScheduler+0x78>)
 800e28c:	4a0c      	ldr	r2, [pc, #48]	@ (800e2c0 <vTaskStartScheduler+0x7c>)
 800e28e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800e290:	490c      	ldr	r1, [pc, #48]	@ (800e2c4 <vTaskStartScheduler+0x80>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e292:	334c      	adds	r3, #76	@ 0x4c
 800e294:	6013      	str	r3, [r2, #0]
		xSchedulerRunning = pdTRUE;
 800e296:	4a0c      	ldr	r2, [pc, #48]	@ (800e2c8 <vTaskStartScheduler+0x84>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e298:	4b0c      	ldr	r3, [pc, #48]	@ (800e2cc <vTaskStartScheduler+0x88>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800e29a:	f04f 35ff 	mov.w	r5, #4294967295
 800e29e:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800e2a0:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e2a2:	601c      	str	r4, [r3, #0]
}
 800e2a4:	b003      	add	sp, #12
 800e2a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 800e2aa:	f000 bcc1 	b.w	800ec30 <xPortStartScheduler>
 800e2ae:	bf00      	nop
 800e2b0:	20001bf0 	.word	0x20001bf0
 800e2b4:	080175c0 	.word	0x080175c0
 800e2b8:	0800e5b9 	.word	0x0800e5b9
 800e2bc:	20001d14 	.word	0x20001d14
 800e2c0:	200001b4 	.word	0x200001b4
 800e2c4:	20001bf4 	.word	0x20001bf4
 800e2c8:	20001c08 	.word	0x20001c08
 800e2cc:	20001c10 	.word	0x20001c10

0800e2d0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e2d0:	4a02      	ldr	r2, [pc, #8]	@ (800e2dc <vTaskSuspendAll+0xc>)
 800e2d2:	6813      	ldr	r3, [r2, #0]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	6013      	str	r3, [r2, #0]
}
 800e2d8:	4770      	bx	lr
 800e2da:	bf00      	nop
 800e2dc:	20001bec 	.word	0x20001bec

0800e2e0 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800e2e0:	4a09      	ldr	r2, [pc, #36]	@ (800e308 <vTaskStepTick+0x28>)
 800e2e2:	490a      	ldr	r1, [pc, #40]	@ (800e30c <vTaskStepTick+0x2c>)
 800e2e4:	6813      	ldr	r3, [r2, #0]
 800e2e6:	6809      	ldr	r1, [r1, #0]
 800e2e8:	4403      	add	r3, r0
 800e2ea:	428b      	cmp	r3, r1
 800e2ec:	d908      	bls.n	800e300 <vTaskStepTick+0x20>
 800e2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f2:	f383 8811 	msr	BASEPRI, r3
 800e2f6:	f3bf 8f6f 	isb	sy
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	e7fe      	b.n	800e2fe <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 800e300:	6813      	ldr	r3, [r2, #0]
 800e302:	4403      	add	r3, r0
 800e304:	6013      	str	r3, [r2, #0]
	}
 800e306:	4770      	bx	lr
 800e308:	20001c10 	.word	0x20001c10
 800e30c:	20001bf4 	.word	0x20001bf4

0800e310 <xTaskIncrementTick>:
{
 800e310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e314:	4b4e      	ldr	r3, [pc, #312]	@ (800e450 <xTaskIncrementTick+0x140>)
 800e316:	681b      	ldr	r3, [r3, #0]
{
 800e318:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d148      	bne.n	800e3b0 <xTaskIncrementTick+0xa0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e31e:	4b4d      	ldr	r3, [pc, #308]	@ (800e454 <xTaskIncrementTick+0x144>)
 800e320:	681d      	ldr	r5, [r3, #0]
 800e322:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800e324:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e326:	2d00      	cmp	r5, #0
 800e328:	d04b      	beq.n	800e3c2 <xTaskIncrementTick+0xb2>
 800e32a:	4b4b      	ldr	r3, [pc, #300]	@ (800e458 <xTaskIncrementTick+0x148>)
 800e32c:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e32e:	9b01      	ldr	r3, [sp, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	429d      	cmp	r5, r3
 800e334:	d352      	bcc.n	800e3dc <xTaskIncrementTick+0xcc>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e336:	4e49      	ldr	r6, [pc, #292]	@ (800e45c <xTaskIncrementTick+0x14c>)
 800e338:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 800e474 <xTaskIncrementTick+0x164>
 800e33c:	6833      	ldr	r3, [r6, #0]
 800e33e:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 800e478 <xTaskIncrementTick+0x168>
 800e342:	681c      	ldr	r4, [r3, #0]
 800e344:	2c00      	cmp	r4, #0
 800e346:	d075      	beq.n	800e434 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList( pxTCB );
 800e348:	4f45      	ldr	r7, [pc, #276]	@ (800e460 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 800e34a:	2400      	movs	r4, #0
 800e34c:	e022      	b.n	800e394 <xTaskIncrementTick+0x84>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e34e:	f7ff fd5f 	bl	800de10 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e352:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e356:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e35a:	b10a      	cbz	r2, 800e360 <xTaskIncrementTick+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e35c:	f7ff fd58 	bl	800de10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e360:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	2201      	movs	r2, #1
 800e368:	4082      	lsls	r2, r0
 800e36a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e36e:	431a      	orrs	r2, r3
 800e370:	4651      	mov	r1, sl
 800e372:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800e376:	603a      	str	r2, [r7, #0]
 800e378:	f7ff fd24 	bl	800ddc4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e37c:	f8d9 3000 	ldr.w	r3, [r9]
 800e380:	f8db 202c 	ldr.w	r2, [fp, #44]	@ 0x2c
 800e384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800e386:	429a      	cmp	r2, r3
 800e388:	bf28      	it	cs
 800e38a:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e38c:	6833      	ldr	r3, [r6, #0]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d04f      	beq.n	800e434 <xTaskIncrementTick+0x124>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e394:	6833      	ldr	r3, [r6, #0]
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e39c:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3a0:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 800e3a4:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3a6:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800e3a8:	d2d1      	bcs.n	800e34e <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
 800e3aa:	9b01      	ldr	r3, [sp, #4]
 800e3ac:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e3ae:	e01a      	b.n	800e3e6 <xTaskIncrementTick+0xd6>
		++xPendedTicks;
 800e3b0:	4a2c      	ldr	r2, [pc, #176]	@ (800e464 <xTaskIncrementTick+0x154>)
 800e3b2:	6813      	ldr	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e3b4:	2400      	movs	r4, #0
		++xPendedTicks;
 800e3b6:	3301      	adds	r3, #1
}
 800e3b8:	4620      	mov	r0, r4
		++xPendedTicks;
 800e3ba:	6013      	str	r3, [r2, #0]
}
 800e3bc:	b003      	add	sp, #12
 800e3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800e3c2:	4b26      	ldr	r3, [pc, #152]	@ (800e45c <xTaskIncrementTick+0x14c>)
 800e3c4:	681a      	ldr	r2, [r3, #0]
 800e3c6:	6812      	ldr	r2, [r2, #0]
 800e3c8:	b30a      	cbz	r2, 800e40e <xTaskIncrementTick+0xfe>
 800e3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	e7fe      	b.n	800e3da <xTaskIncrementTick+0xca>
 800e3dc:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 800e474 <xTaskIncrementTick+0x164>
 800e3e0:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 800e478 <xTaskIncrementTick+0x168>
BaseType_t xSwitchRequired = pdFALSE;
 800e3e4:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e3e6:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 800e3ea:	491f      	ldr	r1, [pc, #124]	@ (800e468 <xTaskIncrementTick+0x158>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 800e3f8:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 800e3fa:	2a02      	cmp	r2, #2
 800e3fc:	bf28      	it	cs
 800e3fe:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800e400:	2b00      	cmp	r3, #0
 800e402:	bf18      	it	ne
 800e404:	2401      	movne	r4, #1
}
 800e406:	4620      	mov	r0, r4
 800e408:	b003      	add	sp, #12
 800e40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800e40e:	4a17      	ldr	r2, [pc, #92]	@ (800e46c <xTaskIncrementTick+0x15c>)
 800e410:	6818      	ldr	r0, [r3, #0]
 800e412:	6811      	ldr	r1, [r2, #0]
 800e414:	6019      	str	r1, [r3, #0]
 800e416:	4916      	ldr	r1, [pc, #88]	@ (800e470 <xTaskIncrementTick+0x160>)
 800e418:	6010      	str	r0, [r2, #0]
 800e41a:	680a      	ldr	r2, [r1, #0]
 800e41c:	3201      	adds	r2, #1
 800e41e:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	6812      	ldr	r2, [r2, #0]
 800e424:	b95a      	cbnz	r2, 800e43e <xTaskIncrementTick+0x12e>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e426:	4b0c      	ldr	r3, [pc, #48]	@ (800e458 <xTaskIncrementTick+0x148>)
 800e428:	9301      	str	r3, [sp, #4]
 800e42a:	461a      	mov	r2, r3
 800e42c:	f04f 33ff 	mov.w	r3, #4294967295
 800e430:	6013      	str	r3, [r2, #0]
 800e432:	e77c      	b.n	800e32e <xTaskIncrementTick+0x1e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e434:	9a01      	ldr	r2, [sp, #4]
 800e436:	f04f 33ff 	mov.w	r3, #4294967295
 800e43a:	6013      	str	r3, [r2, #0]
					break;
 800e43c:	e7d3      	b.n	800e3e6 <xTaskIncrementTick+0xd6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e43e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e440:	4a05      	ldr	r2, [pc, #20]	@ (800e458 <xTaskIncrementTick+0x148>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e442:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e444:	9201      	str	r2, [sp, #4]
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	6013      	str	r3, [r2, #0]
}
 800e44c:	e76f      	b.n	800e32e <xTaskIncrementTick+0x1e>
 800e44e:	bf00      	nop
 800e450:	20001bec 	.word	0x20001bec
 800e454:	20001c10 	.word	0x20001c10
 800e458:	20001bf4 	.word	0x20001bf4
 800e45c:	20001c5c 	.word	0x20001c5c
 800e460:	20001c0c 	.word	0x20001c0c
 800e464:	20001c04 	.word	0x20001c04
 800e468:	20001c00 	.word	0x20001c00
 800e46c:	20001c58 	.word	0x20001c58
 800e470:	20001bfc 	.word	0x20001bfc
 800e474:	20001c88 	.word	0x20001c88
 800e478:	20001d14 	.word	0x20001d14

0800e47c <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800e47c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 800e480:	f000 faa8 	bl	800e9d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e484:	4b3a      	ldr	r3, [pc, #232]	@ (800e570 <xTaskResumeAll.part.0+0xf4>)
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	3a01      	subs	r2, #1
 800e48a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d160      	bne.n	800e554 <xTaskResumeAll.part.0+0xd8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e492:	4b38      	ldr	r3, [pc, #224]	@ (800e574 <xTaskResumeAll.part.0+0xf8>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d05c      	beq.n	800e554 <xTaskResumeAll.part.0+0xd8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e49a:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 800e58c <xTaskResumeAll.part.0+0x110>
 800e49e:	f8db 3000 	ldr.w	r3, [fp]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d061      	beq.n	800e56a <xTaskResumeAll.part.0+0xee>
 800e4a6:	4d34      	ldr	r5, [pc, #208]	@ (800e578 <xTaskResumeAll.part.0+0xfc>)
 800e4a8:	f8df 80e4 	ldr.w	r8, [pc, #228]	@ 800e590 <xTaskResumeAll.part.0+0x114>
 800e4ac:	4f33      	ldr	r7, [pc, #204]	@ (800e57c <xTaskResumeAll.part.0+0x100>)
 800e4ae:	f8df 90e4 	ldr.w	r9, [pc, #228]	@ 800e594 <xTaskResumeAll.part.0+0x118>
					prvAddTaskToReadyList( pxTCB );
 800e4b2:	2601      	movs	r6, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4b4:	f8db 300c 	ldr.w	r3, [fp, #12]
 800e4b8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4bc:	f10a 0404 	add.w	r4, sl, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4c0:	f10a 0018 	add.w	r0, sl, #24
 800e4c4:	f7ff fca4 	bl	800de10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f7ff fca1 	bl	800de10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e4ce:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 800e4d2:	682a      	ldr	r2, [r5, #0]
 800e4d4:	fa06 f300 	lsl.w	r3, r6, r0
 800e4d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	4621      	mov	r1, r4
 800e4e0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800e4e4:	602b      	str	r3, [r5, #0]
 800e4e6:	f7ff fc6d 	bl	800ddc4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	f8da 202c 	ldr.w	r2, [sl, #44]	@ 0x2c
 800e4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f2:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800e4f4:	bf28      	it	cs
 800e4f6:	f8c9 6000 	strcs.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4fa:	f8db 3000 	ldr.w	r3, [fp]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d1d8      	bne.n	800e4b4 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e502:	4b1f      	ldr	r3, [pc, #124]	@ (800e580 <xTaskResumeAll.part.0+0x104>)
 800e504:	681a      	ldr	r2, [r3, #0]
 800e506:	6812      	ldr	r2, [r2, #0]
 800e508:	b352      	cbz	r2, 800e560 <xTaskResumeAll.part.0+0xe4>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e50a:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e50c:	4b1d      	ldr	r3, [pc, #116]	@ (800e584 <xTaskResumeAll.part.0+0x108>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e50e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e510:	68d2      	ldr	r2, [r2, #12]
 800e512:	6852      	ldr	r2, [r2, #4]
 800e514:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e516:	4e1c      	ldr	r6, [pc, #112]	@ (800e588 <xTaskResumeAll.part.0+0x10c>)
 800e518:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800e51a:	b144      	cbz	r4, 800e52e <xTaskResumeAll.part.0+0xb2>
								xYieldPending = pdTRUE;
 800e51c:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e51e:	f7ff fef7 	bl	800e310 <xTaskIncrementTick>
 800e522:	b108      	cbz	r0, 800e528 <xTaskResumeAll.part.0+0xac>
								xYieldPending = pdTRUE;
 800e524:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e528:	3c01      	subs	r4, #1
 800e52a:	d1f8      	bne.n	800e51e <xTaskResumeAll.part.0+0xa2>
						xPendedTicks = 0;
 800e52c:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800e52e:	f8d9 3000 	ldr.w	r3, [r9]
 800e532:	b17b      	cbz	r3, 800e554 <xTaskResumeAll.part.0+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
 800e534:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e53c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e540:	f3bf 8f4f 	dsb	sy
 800e544:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e548:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800e54a:	f000 fa65 	bl	800ea18 <vPortExitCritical>
}
 800e54e:	4620      	mov	r0, r4
 800e550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 800e554:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e556:	f000 fa5f 	bl	800ea18 <vPortExitCritical>
}
 800e55a:	4620      	mov	r0, r4
 800e55c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 800e560:	4b08      	ldr	r3, [pc, #32]	@ (800e584 <xTaskResumeAll.part.0+0x108>)
 800e562:	f04f 32ff 	mov.w	r2, #4294967295
 800e566:	601a      	str	r2, [r3, #0]
 800e568:	e7d5      	b.n	800e516 <xTaskResumeAll.part.0+0x9a>
 800e56a:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 800e594 <xTaskResumeAll.part.0+0x118>
 800e56e:	e7d2      	b.n	800e516 <xTaskResumeAll.part.0+0x9a>
 800e570:	20001bec 	.word	0x20001bec
 800e574:	20001c14 	.word	0x20001c14
 800e578:	20001c0c 	.word	0x20001c0c
 800e57c:	20001d14 	.word	0x20001d14
 800e580:	20001c5c 	.word	0x20001c5c
 800e584:	20001bf4 	.word	0x20001bf4
 800e588:	20001c04 	.word	0x20001c04
 800e58c:	20001c44 	.word	0x20001c44
 800e590:	20001c88 	.word	0x20001c88
 800e594:	20001c00 	.word	0x20001c00

0800e598 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800e598:	4b06      	ldr	r3, [pc, #24]	@ (800e5b4 <xTaskResumeAll+0x1c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	b943      	cbnz	r3, 800e5b0 <xTaskResumeAll+0x18>
 800e59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a2:	f383 8811 	msr	BASEPRI, r3
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	f3bf 8f4f 	dsb	sy
 800e5ae:	e7fe      	b.n	800e5ae <xTaskResumeAll+0x16>
 800e5b0:	f7ff bf64 	b.w	800e47c <xTaskResumeAll.part.0>
 800e5b4:	20001bec 	.word	0x20001bec

0800e5b8 <prvIdleTask>:
{
 800e5b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5bc:	4d40      	ldr	r5, [pc, #256]	@ (800e6c0 <prvIdleTask+0x108>)
 800e5be:	4f41      	ldr	r7, [pc, #260]	@ (800e6c4 <prvIdleTask+0x10c>)
 800e5c0:	4e41      	ldr	r6, [pc, #260]	@ (800e6c8 <prvIdleTask+0x110>)
 800e5c2:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 800e6d8 <prvIdleTask+0x120>
 800e5c6:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 800e6dc <prvIdleTask+0x124>
 800e5ca:	f8df a114 	ldr.w	sl, [pc, #276]	@ 800e6e0 <prvIdleTask+0x128>
				taskYIELD();
 800e5ce:	f04f 2be0 	mov.w	fp, #3758153728	@ 0xe000e000
 800e5d2:	e018      	b.n	800e606 <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
 800e5d4:	f000 f9fe 	bl	800e9d4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5dc:	1d20      	adds	r0, r4, #4
 800e5de:	f7ff fc17 	bl	800de10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e5e2:	6833      	ldr	r3, [r6, #0]
 800e5e4:	3b01      	subs	r3, #1
 800e5e6:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e5e8:	682b      	ldr	r3, [r5, #0]
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 800e5ee:	f000 fa13 	bl	800ea18 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e5f2:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800e5f6:	f002 fdc1 	bl	801117c <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800e5fa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e5fc:	f000 fc60 	bl	800eec0 <vPortFree>
			vPortFree( pxTCB );
 800e600:	4620      	mov	r0, r4
 800e602:	f000 fc5d 	bl	800eec0 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e606:	682b      	ldr	r3, [r5, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d1e3      	bne.n	800e5d4 <prvIdleTask+0x1c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e60c:	f8d8 3000 	ldr.w	r3, [r8]
 800e610:	2b01      	cmp	r3, #1
 800e612:	d907      	bls.n	800e624 <prvIdleTask+0x6c>
				taskYIELD();
 800e614:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e618:	f8cb 3d04 	str.w	r3, [fp, #3332]	@ 0xd04
 800e61c:	f3bf 8f4f 	dsb	sy
 800e620:	f3bf 8f6f 	isb	sy
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800e624:	f8d9 3000 	ldr.w	r3, [r9]
 800e628:	2b01      	cmp	r3, #1
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800e62a:	f8da 3000 	ldr.w	r3, [sl]
 800e62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800e630:	d904      	bls.n	800e63c <prvIdleTask+0x84>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800e632:	2b00      	cmp	r3, #0
 800e634:	d1e7      	bne.n	800e606 <prvIdleTask+0x4e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800e636:	f8d8 3000 	ldr.w	r3, [r8]
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e63a:	e7e4      	b.n	800e606 <prvIdleTask+0x4e>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d1e2      	bne.n	800e606 <prvIdleTask+0x4e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800e640:	f8d8 3000 	ldr.w	r3, [r8]
 800e644:	2b01      	cmp	r3, #1
 800e646:	d8de      	bhi.n	800e606 <prvIdleTask+0x4e>
			xReturn = xNextTaskUnblockTime - xTickCount;
 800e648:	4920      	ldr	r1, [pc, #128]	@ (800e6cc <prvIdleTask+0x114>)
 800e64a:	4821      	ldr	r0, [pc, #132]	@ (800e6d0 <prvIdleTask+0x118>)
 800e64c:	680b      	ldr	r3, [r1, #0]
 800e64e:	6802      	ldr	r2, [r0, #0]
 800e650:	1a9b      	subs	r3, r3, r2
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e652:	2b01      	cmp	r3, #1
 800e654:	d9d7      	bls.n	800e606 <prvIdleTask+0x4e>
	++uxSchedulerSuspended;
 800e656:	4a1f      	ldr	r2, [pc, #124]	@ (800e6d4 <prvIdleTask+0x11c>)
 800e658:	6813      	ldr	r3, [r2, #0]
 800e65a:	3301      	adds	r3, #1
 800e65c:	6013      	str	r3, [r2, #0]
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800e65e:	680a      	ldr	r2, [r1, #0]
 800e660:	6803      	ldr	r3, [r0, #0]
 800e662:	429a      	cmp	r2, r3
 800e664:	d323      	bcc.n	800e6ae <prvIdleTask+0xf6>
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800e666:	f8d9 3000 	ldr.w	r3, [r9]
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800e66a:	f8da 2000 	ldr.w	r2, [sl]
 800e66e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e670:	b922      	cbnz	r2, 800e67c <prvIdleTask+0xc4>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800e672:	f8d8 2000 	ldr.w	r2, [r8]
 800e676:	4313      	orrs	r3, r2
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d90e      	bls.n	800e69a <prvIdleTask+0xe2>
	configASSERT( uxSchedulerSuspended );
 800e67c:	4b15      	ldr	r3, [pc, #84]	@ (800e6d4 <prvIdleTask+0x11c>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	b943      	cbnz	r3, 800e694 <prvIdleTask+0xdc>
 800e682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e686:	f383 8811 	msr	BASEPRI, r3
 800e68a:	f3bf 8f6f 	isb	sy
 800e68e:	f3bf 8f4f 	dsb	sy
 800e692:	e7fe      	b.n	800e692 <prvIdleTask+0xda>
 800e694:	f7ff fef2 	bl	800e47c <xTaskResumeAll.part.0>
 800e698:	e7b5      	b.n	800e606 <prvIdleTask+0x4e>
			xReturn = xNextTaskUnblockTime - xTickCount;
 800e69a:	4b0c      	ldr	r3, [pc, #48]	@ (800e6cc <prvIdleTask+0x114>)
 800e69c:	6818      	ldr	r0, [r3, #0]
 800e69e:	4b0c      	ldr	r3, [pc, #48]	@ (800e6d0 <prvIdleTask+0x118>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	1ac0      	subs	r0, r0, r3
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e6a4:	2801      	cmp	r0, #1
 800e6a6:	d9e9      	bls.n	800e67c <prvIdleTask+0xc4>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800e6a8:	f000 fa12 	bl	800ead0 <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
 800e6ac:	e7e6      	b.n	800e67c <prvIdleTask+0xc4>
 800e6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6b2:	f383 8811 	msr	BASEPRI, r3
 800e6b6:	f3bf 8f6f 	isb	sy
 800e6ba:	f3bf 8f4f 	dsb	sy
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800e6be:	e7fe      	b.n	800e6be <prvIdleTask+0x106>
 800e6c0:	20001c2c 	.word	0x20001c2c
 800e6c4:	20001c30 	.word	0x20001c30
 800e6c8:	20001c14 	.word	0x20001c14
 800e6cc:	20001bf4 	.word	0x20001bf4
 800e6d0:	20001c10 	.word	0x20001c10
 800e6d4:	20001bec 	.word	0x20001bec
 800e6d8:	20001c88 	.word	0x20001c88
 800e6dc:	20001c0c 	.word	0x20001c0c
 800e6e0:	20001d14 	.word	0x20001d14

0800e6e4 <vTaskDelay>:
	{
 800e6e4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e6e6:	b950      	cbnz	r0, 800e6fe <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800e6e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e6ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	f3bf 8f6f 	isb	sy
	}
 800e6fc:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800e6fe:	4c10      	ldr	r4, [pc, #64]	@ (800e740 <vTaskDelay+0x5c>)
 800e700:	6821      	ldr	r1, [r4, #0]
 800e702:	b141      	cbz	r1, 800e716 <vTaskDelay+0x32>
 800e704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e708:	f383 8811 	msr	BASEPRI, r3
 800e70c:	f3bf 8f6f 	isb	sy
 800e710:	f3bf 8f4f 	dsb	sy
 800e714:	e7fe      	b.n	800e714 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	3301      	adds	r3, #1
 800e71a:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e71c:	f7ff fb8c 	bl	800de38 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800e720:	6823      	ldr	r3, [r4, #0]
 800e722:	b943      	cbnz	r3, 800e736 <vTaskDelay+0x52>
 800e724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e728:	f383 8811 	msr	BASEPRI, r3
 800e72c:	f3bf 8f6f 	isb	sy
 800e730:	f3bf 8f4f 	dsb	sy
 800e734:	e7fe      	b.n	800e734 <vTaskDelay+0x50>
 800e736:	f7ff fea1 	bl	800e47c <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800e73a:	2800      	cmp	r0, #0
 800e73c:	d0d4      	beq.n	800e6e8 <vTaskDelay+0x4>
	}
 800e73e:	bd10      	pop	{r4, pc}
 800e740:	20001bec 	.word	0x20001bec

0800e744 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e744:	4b18      	ldr	r3, [pc, #96]	@ (800e7a8 <vTaskSwitchContext+0x64>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	b11b      	cbz	r3, 800e752 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800e74a:	4b18      	ldr	r3, [pc, #96]	@ (800e7ac <vTaskSwitchContext+0x68>)
 800e74c:	2201      	movs	r2, #1
 800e74e:	601a      	str	r2, [r3, #0]
 800e750:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800e752:	4916      	ldr	r1, [pc, #88]	@ (800e7ac <vTaskSwitchContext+0x68>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e754:	4a16      	ldr	r2, [pc, #88]	@ (800e7b0 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 800e756:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e758:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e75a:	fab3 f383 	clz	r3, r3
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	f1c3 031f 	rsb	r3, r3, #31
 800e764:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e768:	4912      	ldr	r1, [pc, #72]	@ (800e7b4 <vTaskSwitchContext+0x70>)
 800e76a:	009a      	lsls	r2, r3, #2
 800e76c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e770:	5888      	ldr	r0, [r1, r2]
 800e772:	b940      	cbnz	r0, 800e786 <vTaskSwitchContext+0x42>
	__asm volatile
 800e774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e778:	f383 8811 	msr	BASEPRI, r3
 800e77c:	f3bf 8f6f 	isb	sy
 800e780:	f3bf 8f4f 	dsb	sy
 800e784:	e7fe      	b.n	800e784 <vTaskSwitchContext+0x40>
 800e786:	6858      	ldr	r0, [r3, #4]
 800e788:	3208      	adds	r2, #8
 800e78a:	6840      	ldr	r0, [r0, #4]
 800e78c:	6058      	str	r0, [r3, #4]
 800e78e:	440a      	add	r2, r1
 800e790:	4290      	cmp	r0, r2
 800e792:	bf04      	itt	eq
 800e794:	6840      	ldreq	r0, [r0, #4]
 800e796:	6058      	streq	r0, [r3, #4]
 800e798:	4b07      	ldr	r3, [pc, #28]	@ (800e7b8 <vTaskSwitchContext+0x74>)
 800e79a:	68c2      	ldr	r2, [r0, #12]
 800e79c:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a06      	ldr	r2, [pc, #24]	@ (800e7bc <vTaskSwitchContext+0x78>)
 800e7a2:	334c      	adds	r3, #76	@ 0x4c
 800e7a4:	6013      	str	r3, [r2, #0]
}
 800e7a6:	4770      	bx	lr
 800e7a8:	20001bec 	.word	0x20001bec
 800e7ac:	20001c00 	.word	0x20001c00
 800e7b0:	20001c0c 	.word	0x20001c0c
 800e7b4:	20001c88 	.word	0x20001c88
 800e7b8:	20001d14 	.word	0x20001d14
 800e7bc:	200001b4 	.word	0x200001b4

0800e7c0 <vTaskSuspend>:
	{
 800e7c0:	b570      	push	{r4, r5, r6, lr}
 800e7c2:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e7c4:	4e38      	ldr	r6, [pc, #224]	@ (800e8a8 <vTaskSuspend+0xe8>)
		taskENTER_CRITICAL();
 800e7c6:	f000 f905 	bl	800e9d4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e7ca:	2c00      	cmp	r4, #0
 800e7cc:	d04d      	beq.n	800e86a <vTaskSuspend+0xaa>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7ce:	1d25      	adds	r5, r4, #4
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	f7ff fb1d 	bl	800de10 <uxListRemove>
 800e7d6:	b930      	cbnz	r0, 800e7e6 <vTaskSuspend+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e7d8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e7da:	4934      	ldr	r1, [pc, #208]	@ (800e8ac <vTaskSuspend+0xec>)
 800e7dc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	58cb      	ldr	r3, [r1, r3]
 800e7e4:	b34b      	cbz	r3, 800e83a <vTaskSuspend+0x7a>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e7e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e7e8:	b11b      	cbz	r3, 800e7f2 <vTaskSuspend+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7ea:	f104 0018 	add.w	r0, r4, #24
 800e7ee:	f7ff fb0f 	bl	800de10 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800e7f2:	4629      	mov	r1, r5
 800e7f4:	482e      	ldr	r0, [pc, #184]	@ (800e8b0 <vTaskSuspend+0xf0>)
		if( xSchedulerRunning != pdFALSE )
 800e7f6:	4d2f      	ldr	r5, [pc, #188]	@ (800e8b4 <vTaskSuspend+0xf4>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800e7f8:	f7ff fae4 	bl	800ddc4 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e7fc:	f894 309c 	ldrb.w	r3, [r4, #156]	@ 0x9c
 800e800:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e802:	bf04      	itt	eq
 800e804:	2300      	moveq	r3, #0
 800e806:	f884 309c 	strbeq.w	r3, [r4, #156]	@ 0x9c
		taskEXIT_CRITICAL();
 800e80a:	f000 f905 	bl	800ea18 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e80e:	682b      	ldr	r3, [r5, #0]
 800e810:	b9e3      	cbnz	r3, 800e84c <vTaskSuspend+0x8c>
		if( pxTCB == pxCurrentTCB )
 800e812:	6833      	ldr	r3, [r6, #0]
 800e814:	42a3      	cmp	r3, r4
 800e816:	d000      	beq.n	800e81a <vTaskSuspend+0x5a>
	}
 800e818:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 800e81a:	682b      	ldr	r3, [r5, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d02b      	beq.n	800e878 <vTaskSuspend+0xb8>
				configASSERT( uxSchedulerSuspended == 0 );
 800e820:	4b25      	ldr	r3, [pc, #148]	@ (800e8b8 <vTaskSuspend+0xf8>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d02f      	beq.n	800e888 <vTaskSuspend+0xc8>
 800e828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82c:	f383 8811 	msr	BASEPRI, r3
 800e830:	f3bf 8f6f 	isb	sy
 800e834:	f3bf 8f4f 	dsb	sy
 800e838:	e7fe      	b.n	800e838 <vTaskSuspend+0x78>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e83a:	4920      	ldr	r1, [pc, #128]	@ (800e8bc <vTaskSuspend+0xfc>)
 800e83c:	2301      	movs	r3, #1
 800e83e:	fa03 f202 	lsl.w	r2, r3, r2
 800e842:	680b      	ldr	r3, [r1, #0]
 800e844:	ea23 0302 	bic.w	r3, r3, r2
 800e848:	600b      	str	r3, [r1, #0]
 800e84a:	e7cc      	b.n	800e7e6 <vTaskSuspend+0x26>
			taskENTER_CRITICAL();
 800e84c:	f000 f8c2 	bl	800e9d4 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e850:	4b1b      	ldr	r3, [pc, #108]	@ (800e8c0 <vTaskSuspend+0x100>)
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	6812      	ldr	r2, [r2, #0]
 800e856:	b152      	cbz	r2, 800e86e <vTaskSuspend+0xae>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e858:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e85a:	4b1a      	ldr	r3, [pc, #104]	@ (800e8c4 <vTaskSuspend+0x104>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e85c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e85e:	68d2      	ldr	r2, [r2, #12]
 800e860:	6852      	ldr	r2, [r2, #4]
 800e862:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 800e864:	f000 f8d8 	bl	800ea18 <vPortExitCritical>
 800e868:	e7d3      	b.n	800e812 <vTaskSuspend+0x52>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e86a:	6834      	ldr	r4, [r6, #0]
 800e86c:	e7af      	b.n	800e7ce <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e86e:	4b15      	ldr	r3, [pc, #84]	@ (800e8c4 <vTaskSuspend+0x104>)
 800e870:	f04f 32ff 	mov.w	r2, #4294967295
 800e874:	601a      	str	r2, [r3, #0]
 800e876:	e7f5      	b.n	800e864 <vTaskSuspend+0xa4>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800e878:	490d      	ldr	r1, [pc, #52]	@ (800e8b0 <vTaskSuspend+0xf0>)
 800e87a:	4a13      	ldr	r2, [pc, #76]	@ (800e8c8 <vTaskSuspend+0x108>)
 800e87c:	6809      	ldr	r1, [r1, #0]
 800e87e:	6812      	ldr	r2, [r2, #0]
 800e880:	4291      	cmp	r1, r2
 800e882:	d10c      	bne.n	800e89e <vTaskSuspend+0xde>
					pxCurrentTCB = NULL;
 800e884:	6033      	str	r3, [r6, #0]
	}
 800e886:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 800e888:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e88c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e890:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e894:	f3bf 8f4f 	dsb	sy
 800e898:	f3bf 8f6f 	isb	sy
	}
 800e89c:	bd70      	pop	{r4, r5, r6, pc}
 800e89e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 800e8a2:	f7ff bf4f 	b.w	800e744 <vTaskSwitchContext>
 800e8a6:	bf00      	nop
 800e8a8:	20001d14 	.word	0x20001d14
 800e8ac:	20001c88 	.word	0x20001c88
 800e8b0:	20001c18 	.word	0x20001c18
 800e8b4:	20001c08 	.word	0x20001c08
 800e8b8:	20001bec 	.word	0x20001bec
 800e8bc:	20001c0c 	.word	0x20001c0c
 800e8c0:	20001c5c 	.word	0x20001c5c
 800e8c4:	20001bf4 	.word	0x20001bf4
 800e8c8:	20001c14 	.word	0x20001c14

0800e8cc <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800e8cc:	4b09      	ldr	r3, [pc, #36]	@ (800e8f4 <eTaskConfirmSleepModeStatus+0x28>)
 800e8ce:	6818      	ldr	r0, [r3, #0]
 800e8d0:	b918      	cbnz	r0, 800e8da <eTaskConfirmSleepModeStatus+0xe>
		else if( xYieldPending != pdFALSE )
 800e8d2:	4b09      	ldr	r3, [pc, #36]	@ (800e8f8 <eTaskConfirmSleepModeStatus+0x2c>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	b113      	cbz	r3, 800e8de <eTaskConfirmSleepModeStatus+0x12>
	}
 800e8d8:	4770      	bx	lr
			eReturn = eAbortSleep;
 800e8da:	2000      	movs	r0, #0
	}
 800e8dc:	4770      	bx	lr
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800e8de:	4a07      	ldr	r2, [pc, #28]	@ (800e8fc <eTaskConfirmSleepModeStatus+0x30>)
 800e8e0:	4b07      	ldr	r3, [pc, #28]	@ (800e900 <eTaskConfirmSleepModeStatus+0x34>)
 800e8e2:	6810      	ldr	r0, [r2, #0]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	3b01      	subs	r3, #1
	eSleepModeStatus eReturn = eStandardSleep;
 800e8e8:	4298      	cmp	r0, r3
 800e8ea:	bf0c      	ite	eq
 800e8ec:	2002      	moveq	r0, #2
 800e8ee:	2001      	movne	r0, #1
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop
 800e8f4:	20001c44 	.word	0x20001c44
 800e8f8:	20001c00 	.word	0x20001c00
 800e8fc:	20001c18 	.word	0x20001c18
 800e900:	20001c14 	.word	0x20001c14

0800e904 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e904:	4808      	ldr	r0, [pc, #32]	@ (800e928 <prvPortStartFirstTask+0x24>)
 800e906:	6800      	ldr	r0, [r0, #0]
 800e908:	6800      	ldr	r0, [r0, #0]
 800e90a:	f380 8808 	msr	MSP, r0
 800e90e:	f04f 0000 	mov.w	r0, #0
 800e912:	f380 8814 	msr	CONTROL, r0
 800e916:	b662      	cpsie	i
 800e918:	b661      	cpsie	f
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	f3bf 8f6f 	isb	sy
 800e922:	df00      	svc	0
 800e924:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e926:	0000      	.short	0x0000
 800e928:	e000ed08 	.word	0xe000ed08

0800e92c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e92c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e93c <vPortEnableVFP+0x10>
 800e930:	6801      	ldr	r1, [r0, #0]
 800e932:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e936:	6001      	str	r1, [r0, #0]
 800e938:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e93a:	0000      	.short	0x0000
 800e93c:	e000ed88 	.word	0xe000ed88

0800e940 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 800e940:	4b0e      	ldr	r3, [pc, #56]	@ (800e97c <prvTaskExitError+0x3c>)
 800e942:	681b      	ldr	r3, [r3, #0]
{
 800e944:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800e946:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800e948:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800e94a:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800e94c:	d008      	beq.n	800e960 <prvTaskExitError+0x20>
 800e94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e952:	f383 8811 	msr	BASEPRI, r3
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	f3bf 8f4f 	dsb	sy
 800e95e:	e7fe      	b.n	800e95e <prvTaskExitError+0x1e>
 800e960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e964:	f383 8811 	msr	BASEPRI, r3
 800e968:	f3bf 8f6f 	isb	sy
 800e96c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800e970:	9b01      	ldr	r3, [sp, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d0fc      	beq.n	800e970 <prvTaskExitError+0x30>
}
 800e976:	b002      	add	sp, #8
 800e978:	4770      	bx	lr
 800e97a:	bf00      	nop
 800e97c:	20000038 	.word	0x20000038

0800e980 <pxPortInitialiseStack>:
{
 800e980:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e982:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e986:	4c07      	ldr	r4, [pc, #28]	@ (800e9a4 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e988:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e98c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e990:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e994:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e998:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 800e99c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9a0:	3844      	subs	r0, #68	@ 0x44
 800e9a2:	4770      	bx	lr
 800e9a4:	0800e941 	.word	0x0800e941
	...

0800e9b0 <SVC_Handler>:
	__asm volatile (
 800e9b0:	4b07      	ldr	r3, [pc, #28]	@ (800e9d0 <pxCurrentTCBConst2>)
 800e9b2:	6819      	ldr	r1, [r3, #0]
 800e9b4:	6808      	ldr	r0, [r1, #0]
 800e9b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ba:	f380 8809 	msr	PSP, r0
 800e9be:	f3bf 8f6f 	isb	sy
 800e9c2:	f04f 0000 	mov.w	r0, #0
 800e9c6:	f380 8811 	msr	BASEPRI, r0
 800e9ca:	4770      	bx	lr
 800e9cc:	f3af 8000 	nop.w

0800e9d0 <pxCurrentTCBConst2>:
 800e9d0:	20001d14 	.word	0x20001d14

0800e9d4 <vPortEnterCritical>:
 800e9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9d8:	f383 8811 	msr	BASEPRI, r3
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800e9e4:	4a0b      	ldr	r2, [pc, #44]	@ (800ea14 <vPortEnterCritical+0x40>)
 800e9e6:	6813      	ldr	r3, [r2, #0]
 800e9e8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800e9ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800e9ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800e9ee:	d000      	beq.n	800e9f2 <vPortEnterCritical+0x1e>
}
 800e9f0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e9f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e9f6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d0f7      	beq.n	800e9f0 <vPortEnterCritical+0x1c>
 800ea00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea04:	f383 8811 	msr	BASEPRI, r3
 800ea08:	f3bf 8f6f 	isb	sy
 800ea0c:	f3bf 8f4f 	dsb	sy
 800ea10:	e7fe      	b.n	800ea10 <vPortEnterCritical+0x3c>
 800ea12:	bf00      	nop
 800ea14:	20000038 	.word	0x20000038

0800ea18 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800ea18:	4a08      	ldr	r2, [pc, #32]	@ (800ea3c <vPortExitCritical+0x24>)
 800ea1a:	6813      	ldr	r3, [r2, #0]
 800ea1c:	b943      	cbnz	r3, 800ea30 <vPortExitCritical+0x18>
 800ea1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea22:	f383 8811 	msr	BASEPRI, r3
 800ea26:	f3bf 8f6f 	isb	sy
 800ea2a:	f3bf 8f4f 	dsb	sy
 800ea2e:	e7fe      	b.n	800ea2e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800ea30:	3b01      	subs	r3, #1
 800ea32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea34:	b90b      	cbnz	r3, 800ea3a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ea36:	f383 8811 	msr	BASEPRI, r3
}
 800ea3a:	4770      	bx	lr
 800ea3c:	20000038 	.word	0x20000038

0800ea40 <PendSV_Handler>:
	__asm volatile
 800ea40:	f3ef 8009 	mrs	r0, PSP
 800ea44:	f3bf 8f6f 	isb	sy
 800ea48:	4b15      	ldr	r3, [pc, #84]	@ (800eaa0 <pxCurrentTCBConst>)
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	f01e 0f10 	tst.w	lr, #16
 800ea50:	bf08      	it	eq
 800ea52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea5a:	6010      	str	r0, [r2, #0]
 800ea5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ea64:	f380 8811 	msr	BASEPRI, r0
 800ea68:	f3bf 8f4f 	dsb	sy
 800ea6c:	f3bf 8f6f 	isb	sy
 800ea70:	f7ff fe68 	bl	800e744 <vTaskSwitchContext>
 800ea74:	f04f 0000 	mov.w	r0, #0
 800ea78:	f380 8811 	msr	BASEPRI, r0
 800ea7c:	bc09      	pop	{r0, r3}
 800ea7e:	6819      	ldr	r1, [r3, #0]
 800ea80:	6808      	ldr	r0, [r1, #0]
 800ea82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea86:	f01e 0f10 	tst.w	lr, #16
 800ea8a:	bf08      	it	eq
 800ea8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea90:	f380 8809 	msr	PSP, r0
 800ea94:	f3bf 8f6f 	isb	sy
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	f3af 8000 	nop.w

0800eaa0 <pxCurrentTCBConst>:
 800eaa0:	20001d14 	.word	0x20001d14

0800eaa4 <SysTick_Handler>:
{
 800eaa4:	b508      	push	{r3, lr}
	__asm volatile
 800eaa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaaa:	f383 8811 	msr	BASEPRI, r3
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800eab6:	f7ff fc2b 	bl	800e310 <xTaskIncrementTick>
 800eaba:	b128      	cbz	r0, 800eac8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eabc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800eac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eac4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800eac8:	2300      	movs	r3, #0
 800eaca:	f383 8811 	msr	BASEPRI, r3
}
 800eace:	bd08      	pop	{r3, pc}

0800ead0 <vPortSuppressTicksAndSleep>:
	{
 800ead0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800ead4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800ead8:	493c      	ldr	r1, [pc, #240]	@ (800ebcc <vPortSuppressTicksAndSleep+0xfc>)
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800eada:	691a      	ldr	r2, [r3, #16]
 800eadc:	6809      	ldr	r1, [r1, #0]
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800eade:	4f3c      	ldr	r7, [pc, #240]	@ (800ebd0 <vPortSuppressTicksAndSleep+0x100>)
		if( ulReloadValue > ulStoppedTimerCompensation )
 800eae0:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 800ebd4 <vPortSuppressTicksAndSleep+0x104>
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800eae4:	f022 0201 	bic.w	r2, r2, #1
 800eae8:	611a      	str	r2, [r3, #16]
 800eaea:	4288      	cmp	r0, r1
 800eaec:	bf28      	it	cs
 800eaee:	4608      	movcs	r0, r1
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800eaf0:	699c      	ldr	r4, [r3, #24]
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	f100 38ff 	add.w	r8, r0, #4294967295
 800eaf8:	fb03 4408 	mla	r4, r3, r8, r4
		if( ulReloadValue > ulStoppedTimerCompensation )
 800eafc:	f8d9 3000 	ldr.w	r3, [r9]
 800eb00:	42a3      	cmp	r3, r4
			ulReloadValue -= ulStoppedTimerCompensation;
 800eb02:	bf38      	it	cc
 800eb04:	1ae4      	subcc	r4, r4, r3
 800eb06:	4606      	mov	r6, r0
		__asm volatile( "cpsid i" ::: "memory" );
 800eb08:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800eb0a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800eb0e:	f3bf 8f6f 	isb	sy
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800eb12:	f7ff fedb 	bl	800e8cc <eTaskConfirmSleepModeStatus>
 800eb16:	b968      	cbnz	r0, 800eb34 <vPortSuppressTicksAndSleep+0x64>
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800eb18:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800eb1c:	699a      	ldr	r2, [r3, #24]
 800eb1e:	615a      	str	r2, [r3, #20]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800eb20:	691a      	ldr	r2, [r3, #16]
 800eb22:	f042 0201 	orr.w	r2, r2, #1
 800eb26:	611a      	str	r2, [r3, #16]
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800eb28:	683a      	ldr	r2, [r7, #0]
 800eb2a:	3a01      	subs	r2, #1
 800eb2c:	615a      	str	r2, [r3, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 800eb2e:	b662      	cpsie	i
	}
 800eb30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800eb34:	f04f 25e0 	mov.w	r5, #3758153728	@ 0xe000e000
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb38:	2000      	movs	r0, #0
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800eb3a:	616c      	str	r4, [r5, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb3c:	61a8      	str	r0, [r5, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800eb3e:	692b      	ldr	r3, [r5, #16]
 800eb40:	f043 0301 	orr.w	r3, r3, #1
 800eb44:	612b      	str	r3, [r5, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800eb46:	f7f7 fb81 	bl	800624c <PreSleepProcessing>
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800eb4a:	4630      	mov	r0, r6
 800eb4c:	f7f7 fb80 	bl	8006250 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800eb50:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800eb52:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800eb56:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800eb5a:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800eb5c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800eb60:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800eb64:	2306      	movs	r3, #6
 800eb66:	612b      	str	r3, [r5, #16]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800eb68:	692b      	ldr	r3, [r5, #16]
 800eb6a:	03db      	lsls	r3, r3, #15
 800eb6c:	d50f      	bpl.n	800eb8e <vPortSuppressTicksAndSleep+0xbe>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800eb6e:	69ab      	ldr	r3, [r5, #24]
 800eb70:	683a      	ldr	r2, [r7, #0]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800eb72:	f8d9 1000 	ldr.w	r1, [r9]
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800eb76:	4413      	add	r3, r2
 800eb78:	3b01      	subs	r3, #1
 800eb7a:	1b1b      	subs	r3, r3, r4
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800eb7c:	4299      	cmp	r1, r3
 800eb7e:	d801      	bhi.n	800eb84 <vPortSuppressTicksAndSleep+0xb4>
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d200      	bcs.n	800eb86 <vPortSuppressTicksAndSleep+0xb6>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800eb84:	1e53      	subs	r3, r2, #1
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800eb86:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800eb8a:	6153      	str	r3, [r2, #20]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800eb8c:	e00c      	b.n	800eba8 <vPortSuppressTicksAndSleep+0xd8>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	69aa      	ldr	r2, [r5, #24]
 800eb92:	fb06 f003 	mul.w	r0, r6, r3
 800eb96:	eba0 0802 	sub.w	r8, r0, r2
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800eb9a:	1a12      	subs	r2, r2, r0
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800eb9c:	fbb8 f8f3 	udiv	r8, r8, r3
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800eba0:	fb08 3303 	mla	r3, r8, r3, r3
 800eba4:	4413      	add	r3, r2
 800eba6:	616b      	str	r3, [r5, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eba8:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 800ebac:	2300      	movs	r3, #0
 800ebae:	61a3      	str	r3, [r4, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800ebb0:	6923      	ldr	r3, [r4, #16]
 800ebb2:	f043 0301 	orr.w	r3, r3, #1
 800ebb6:	6123      	str	r3, [r4, #16]
			vTaskStepTick( ulCompleteTickPeriods );
 800ebb8:	4640      	mov	r0, r8
 800ebba:	f7ff fb91 	bl	800e2e0 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	3b01      	subs	r3, #1
 800ebc2:	6163      	str	r3, [r4, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 800ebc4:	b662      	cpsie	i
	}
 800ebc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebca:	bf00      	nop
 800ebcc:	20001d24 	.word	0x20001d24
 800ebd0:	20001d28 	.word	0x20001d28
 800ebd4:	20001d20 	.word	0x20001d20

0800ebd8 <vPortSetupTimerInterrupt>:
{
 800ebd8:	b4f0      	push	{r4, r5, r6, r7}
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800ebda:	4c10      	ldr	r4, [pc, #64]	@ (800ec1c <vPortSetupTimerInterrupt+0x44>)
 800ebdc:	4910      	ldr	r1, [pc, #64]	@ (800ec20 <vPortSetupTimerInterrupt+0x48>)
 800ebde:	6823      	ldr	r3, [r4, #0]
 800ebe0:	4a10      	ldr	r2, [pc, #64]	@ (800ec24 <vPortSetupTimerInterrupt+0x4c>)
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800ebe2:	4e11      	ldr	r6, [pc, #68]	@ (800ec28 <vPortSetupTimerInterrupt+0x50>)
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800ebe4:	fba1 0303 	umull	r0, r3, r1, r3
 800ebe8:	099b      	lsrs	r3, r3, #6
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800ebea:	4810      	ldr	r0, [pc, #64]	@ (800ec2c <vPortSetupTimerInterrupt+0x54>)
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800ebec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ebee:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800ebf2:	2500      	movs	r5, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800ebf4:	272d      	movs	r7, #45	@ 0x2d
 800ebf6:	6007      	str	r7, [r0, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800ebf8:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800ebfc:	fbb0 f3f3 	udiv	r3, r0, r3
 800ec00:	6033      	str	r3, [r6, #0]
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ec02:	6115      	str	r5, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ec04:	6195      	str	r5, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ec06:	6823      	ldr	r3, [r4, #0]
 800ec08:	fba1 1303 	umull	r1, r3, r1, r3
 800ec0c:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ec0e:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ec10:	3b01      	subs	r3, #1
 800ec12:	6153      	str	r3, [r2, #20]
}
 800ec14:	bcf0      	pop	{r4, r5, r6, r7}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ec16:	6110      	str	r0, [r2, #16]
}
 800ec18:	4770      	bx	lr
 800ec1a:	bf00      	nop
 800ec1c:	20000004 	.word	0x20000004
 800ec20:	10624dd3 	.word	0x10624dd3
 800ec24:	20001d28 	.word	0x20001d28
 800ec28:	20001d24 	.word	0x20001d24
 800ec2c:	20001d20 	.word	0x20001d20

0800ec30 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ec30:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ec34:	4a3d      	ldr	r2, [pc, #244]	@ (800ed2c <xPortStartScheduler+0xfc>)
 800ec36:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800ec3a:	4291      	cmp	r1, r2
 800ec3c:	d041      	beq.n	800ecc2 <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ec3e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800ec42:	4b3b      	ldr	r3, [pc, #236]	@ (800ed30 <xPortStartScheduler+0x100>)
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d033      	beq.n	800ecb0 <xPortStartScheduler+0x80>
{
 800ec48:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ec4a:	4b3a      	ldr	r3, [pc, #232]	@ (800ed34 <xPortStartScheduler+0x104>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec4c:	4c3a      	ldr	r4, [pc, #232]	@ (800ed38 <xPortStartScheduler+0x108>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ec4e:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ec50:	483a      	ldr	r0, [pc, #232]	@ (800ed3c <xPortStartScheduler+0x10c>)
{
 800ec52:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ec54:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ec56:	b2d2      	uxtb	r2, r2
 800ec58:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ec5a:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec64:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec68:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec6c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ec70:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec72:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec74:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ec76:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec78:	bf48      	it	mi
 800ec7a:	2206      	movmi	r2, #6
 800ec7c:	d50f      	bpl.n	800ec9e <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ec7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ec82:	005b      	lsls	r3, r3, #1
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec8a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ec8e:	061b      	lsls	r3, r3, #24
 800ec90:	4611      	mov	r1, r2
 800ec92:	f102 32ff 	add.w	r2, r2, #4294967295
 800ec96:	d4f2      	bmi.n	800ec7e <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ec98:	2903      	cmp	r1, #3
 800ec9a:	d01b      	beq.n	800ecd4 <xPortStartScheduler+0xa4>
 800ec9c:	6001      	str	r1, [r0, #0]
	__asm volatile
 800ec9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eca2:	f383 8811 	msr	BASEPRI, r3
 800eca6:	f3bf 8f6f 	isb	sy
 800ecaa:	f3bf 8f4f 	dsb	sy
 800ecae:	e7fe      	b.n	800ecae <xPortStartScheduler+0x7e>
 800ecb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecb4:	f383 8811 	msr	BASEPRI, r3
 800ecb8:	f3bf 8f6f 	isb	sy
 800ecbc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ecc0:	e7fe      	b.n	800ecc0 <xPortStartScheduler+0x90>
 800ecc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecc6:	f383 8811 	msr	BASEPRI, r3
 800ecca:	f3bf 8f6f 	isb	sy
 800ecce:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ecd2:	e7fe      	b.n	800ecd2 <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ecd4:	9b01      	ldr	r3, [sp, #4]
 800ecd6:	4a17      	ldr	r2, [pc, #92]	@ (800ed34 <xPortStartScheduler+0x104>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ecd8:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ecdc:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ece0:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ece2:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ece4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ece6:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800ecea:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ecee:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ecf2:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800ecf6:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ecfa:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800ecfe:	f7ff ff6b 	bl	800ebd8 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ed02:	4b0f      	ldr	r3, [pc, #60]	@ (800ed40 <xPortStartScheduler+0x110>)
 800ed04:	2500      	movs	r5, #0
 800ed06:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800ed08:	f7ff fe10 	bl	800e92c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ed0c:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800ed10:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ed14:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800ed18:	f7ff fdf4 	bl	800e904 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800ed1c:	f7ff fd12 	bl	800e744 <vTaskSwitchContext>
	prvTaskExitError();
 800ed20:	f7ff fe0e 	bl	800e940 <prvTaskExitError>
}
 800ed24:	4628      	mov	r0, r5
 800ed26:	b003      	add	sp, #12
 800ed28:	bd30      	pop	{r4, r5, pc}
 800ed2a:	bf00      	nop
 800ed2c:	410fc271 	.word	0x410fc271
 800ed30:	410fc270 	.word	0x410fc270
 800ed34:	e000e400 	.word	0xe000e400
 800ed38:	20001d1c 	.word	0x20001d1c
 800ed3c:	20001d18 	.word	0x20001d18
 800ed40:	20000038 	.word	0x20000038

0800ed44 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ed44:	b430      	push	{r4, r5}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ed46:	4b12      	ldr	r3, [pc, #72]	@ (800ed90 <prvInsertBlockIntoFreeList+0x4c>)
 800ed48:	461a      	mov	r2, r3
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4283      	cmp	r3, r0
 800ed4e:	d3fb      	bcc.n	800ed48 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ed50:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed52:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ed54:	eb02 0c04 	add.w	ip, r2, r4
 800ed58:	4560      	cmp	r0, ip
 800ed5a:	d008      	beq.n	800ed6e <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed5c:	1844      	adds	r4, r0, r1
 800ed5e:	42a3      	cmp	r3, r4
 800ed60:	d00b      	beq.n	800ed7a <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed62:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed64:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed66:	bf18      	it	ne
 800ed68:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed6a:	bc30      	pop	{r4, r5}
 800ed6c:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed6e:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed70:	1850      	adds	r0, r2, r1
 800ed72:	4283      	cmp	r3, r0
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed74:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed76:	d1f8      	bne.n	800ed6a <prvInsertBlockIntoFreeList+0x26>
 800ed78:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed7a:	4c06      	ldr	r4, [pc, #24]	@ (800ed94 <prvInsertBlockIntoFreeList+0x50>)
 800ed7c:	6824      	ldr	r4, [r4, #0]
 800ed7e:	42a3      	cmp	r3, r4
 800ed80:	d003      	beq.n	800ed8a <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed82:	e9d3 4500 	ldrd	r4, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed86:	4429      	add	r1, r5
 800ed88:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed8a:	6004      	str	r4, [r0, #0]
 800ed8c:	e7ea      	b.n	800ed64 <prvInsertBlockIntoFreeList+0x20>
 800ed8e:	bf00      	nop
 800ed90:	20001d44 	.word	0x20001d44
 800ed94:	20001d40 	.word	0x20001d40

0800ed98 <pvPortMalloc>:
{
 800ed98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( pxEnd == NULL )
 800ed9c:	4e40      	ldr	r6, [pc, #256]	@ (800eea0 <pvPortMalloc+0x108>)
{
 800ed9e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800eda0:	f7ff fa96 	bl	800e2d0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800eda4:	6833      	ldr	r3, [r6, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d05c      	beq.n	800ee64 <pvPortMalloc+0xcc>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800edaa:	4b3e      	ldr	r3, [pc, #248]	@ (800eea4 <pvPortMalloc+0x10c>)
 800edac:	681d      	ldr	r5, [r3, #0]
 800edae:	422c      	tst	r4, r5
 800edb0:	d12e      	bne.n	800ee10 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 800edb2:	b36c      	cbz	r4, 800ee10 <pvPortMalloc+0x78>
				xWantedSize += xHeapStructSize;
 800edb4:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800edb8:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800edba:	bf1c      	itt	ne
 800edbc:	f021 0107 	bicne.w	r1, r1, #7
 800edc0:	3108      	addne	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800edc2:	b329      	cbz	r1, 800ee10 <pvPortMalloc+0x78>
 800edc4:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 800eebc <pvPortMalloc+0x124>
 800edc8:	f8d8 7000 	ldr.w	r7, [r8]
 800edcc:	428f      	cmp	r7, r1
 800edce:	d31f      	bcc.n	800ee10 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 800edd0:	4835      	ldr	r0, [pc, #212]	@ (800eea8 <pvPortMalloc+0x110>)
 800edd2:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800edd4:	e003      	b.n	800edde <pvPortMalloc+0x46>
 800edd6:	6823      	ldr	r3, [r4, #0]
 800edd8:	b123      	cbz	r3, 800ede4 <pvPortMalloc+0x4c>
 800edda:	4620      	mov	r0, r4
 800eddc:	461c      	mov	r4, r3
 800edde:	6862      	ldr	r2, [r4, #4]
 800ede0:	428a      	cmp	r2, r1
 800ede2:	d3f8      	bcc.n	800edd6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800ede4:	6833      	ldr	r3, [r6, #0]
 800ede6:	42a3      	cmp	r3, r4
 800ede8:	d012      	beq.n	800ee10 <pvPortMalloc+0x78>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800edea:	1a53      	subs	r3, r2, r1
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800edec:	6826      	ldr	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800edee:	f8d0 9000 	ldr.w	r9, [r0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800edf2:	6006      	str	r6, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800edf4:	2b10      	cmp	r3, #16
 800edf6:	d916      	bls.n	800ee26 <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800edf8:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800edfa:	0742      	lsls	r2, r0, #29
 800edfc:	d00e      	beq.n	800ee1c <pvPortMalloc+0x84>
 800edfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	e7fe      	b.n	800ee0e <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 800ee10:	f7ff fbc2 	bl	800e598 <xTaskResumeAll>
void *pvReturn = NULL;
 800ee14:	2600      	movs	r6, #0
}
 800ee16:	4630      	mov	r0, r6
 800ee18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ee1c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ee1e:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ee20:	f7ff ff90 	bl	800ed44 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ee24:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ee26:	4b21      	ldr	r3, [pc, #132]	@ (800eeac <pvPortMalloc+0x114>)
 800ee28:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ee2a:	1abf      	subs	r7, r7, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ee2c:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 800ee2e:	4920      	ldr	r1, [pc, #128]	@ (800eeb0 <pvPortMalloc+0x118>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ee30:	bf38      	it	cc
 800ee32:	601f      	strcc	r7, [r3, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ee34:	432a      	orrs	r2, r5
					pxBlock->pxNextFreeBlock = NULL;
 800ee36:	2300      	movs	r3, #0
 800ee38:	e9c4 3200 	strd	r3, r2, [r4]
					xNumberOfSuccessfulAllocations++;
 800ee3c:	680b      	ldr	r3, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ee3e:	f8c8 7000 	str.w	r7, [r8]
					xNumberOfSuccessfulAllocations++;
 800ee42:	3301      	adds	r3, #1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ee44:	f109 0608 	add.w	r6, r9, #8
					xNumberOfSuccessfulAllocations++;
 800ee48:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800ee4a:	f7ff fba5 	bl	800e598 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee4e:	0773      	lsls	r3, r6, #29
 800ee50:	d0e1      	beq.n	800ee16 <pvPortMalloc+0x7e>
 800ee52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee56:	f383 8811 	msr	BASEPRI, r3
 800ee5a:	f3bf 8f6f 	isb	sy
 800ee5e:	f3bf 8f4f 	dsb	sy
 800ee62:	e7fe      	b.n	800ee62 <pvPortMalloc+0xca>
	uxAddress = ( size_t ) ucHeap;
 800ee64:	4b13      	ldr	r3, [pc, #76]	@ (800eeb4 <pvPortMalloc+0x11c>)
	uxAddress -= xHeapStructSize;
 800ee66:	4a14      	ldr	r2, [pc, #80]	@ (800eeb8 <pvPortMalloc+0x120>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee68:	4910      	ldr	r1, [pc, #64]	@ (800eeac <pvPortMalloc+0x114>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee6a:	4f0e      	ldr	r7, [pc, #56]	@ (800eea4 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ee6c:	075d      	lsls	r5, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee6e:	bf18      	it	ne
 800ee70:	3307      	addne	r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee72:	4d0d      	ldr	r5, [pc, #52]	@ (800eea8 <pvPortMalloc+0x110>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee74:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee78:	bf18      	it	ne
 800ee7a:	f023 0307 	bicne.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee7e:	602b      	str	r3, [r5, #0]
 800ee80:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee82:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee84:	600b      	str	r3, [r1, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee86:	490d      	ldr	r1, [pc, #52]	@ (800eebc <pvPortMalloc+0x124>)
	pxEnd = ( void * ) uxAddress;
 800ee88:	6032      	str	r2, [r6, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee8a:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee8c:	2100      	movs	r1, #0
 800ee8e:	6069      	str	r1, [r5, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee90:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
 800ee94:	e9c2 1100 	strd	r1, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee98:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee9a:	e9c0 2300 	strd	r2, r3, [r0]
}
 800ee9e:	e786      	b.n	800edae <pvPortMalloc+0x16>
 800eea0:	20001d40 	.word	0x20001d40
 800eea4:	20001d2c 	.word	0x20001d2c
 800eea8:	20001d44 	.word	0x20001d44
 800eeac:	20001d38 	.word	0x20001d38
 800eeb0:	20001d34 	.word	0x20001d34
 800eeb4:	20001d4c 	.word	0x20001d4c
 800eeb8:	20005d44 	.word	0x20005d44
 800eebc:	20001d3c 	.word	0x20001d3c

0800eec0 <vPortFree>:
	if( pv != NULL )
 800eec0:	b1d0      	cbz	r0, 800eef8 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eec2:	4a1c      	ldr	r2, [pc, #112]	@ (800ef34 <vPortFree+0x74>)
 800eec4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800eec8:	6812      	ldr	r2, [r2, #0]
 800eeca:	4213      	tst	r3, r2
 800eecc:	d00b      	beq.n	800eee6 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eece:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800eed2:	b191      	cbz	r1, 800eefa <vPortFree+0x3a>
 800eed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eed8:	f383 8811 	msr	BASEPRI, r3
 800eedc:	f3bf 8f6f 	isb	sy
 800eee0:	f3bf 8f4f 	dsb	sy
 800eee4:	e7fe      	b.n	800eee4 <vPortFree+0x24>
 800eee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeea:	f383 8811 	msr	BASEPRI, r3
 800eeee:	f3bf 8f6f 	isb	sy
 800eef2:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eef6:	e7fe      	b.n	800eef6 <vPortFree+0x36>
 800eef8:	4770      	bx	lr
{
 800eefa:	b500      	push	{lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eefc:	ea23 0302 	bic.w	r3, r3, r2
{
 800ef00:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ef02:	f840 3c04 	str.w	r3, [r0, #-4]
 800ef06:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 800ef08:	f7ff f9e2 	bl	800e2d0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ef0c:	4a0a      	ldr	r2, [pc, #40]	@ (800ef38 <vPortFree+0x78>)
 800ef0e:	9801      	ldr	r0, [sp, #4]
 800ef10:	6811      	ldr	r1, [r2, #0]
 800ef12:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ef16:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ef18:	440b      	add	r3, r1
 800ef1a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ef1c:	f7ff ff12 	bl	800ed44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ef20:	4a06      	ldr	r2, [pc, #24]	@ (800ef3c <vPortFree+0x7c>)
 800ef22:	6813      	ldr	r3, [r2, #0]
 800ef24:	3301      	adds	r3, #1
 800ef26:	6013      	str	r3, [r2, #0]
}
 800ef28:	b003      	add	sp, #12
 800ef2a:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 800ef2e:	f7ff bb33 	b.w	800e598 <xTaskResumeAll>
 800ef32:	bf00      	nop
 800ef34:	20001d2c 	.word	0x20001d2c
 800ef38:	20001d3c 	.word	0x20001d3c
 800ef3c:	20001d30 	.word	0x20001d30

0800ef40 <atof>:
 800ef40:	2100      	movs	r1, #0
 800ef42:	f000 becb 	b.w	800fcdc <strtod>

0800ef46 <atoi>:
 800ef46:	220a      	movs	r2, #10
 800ef48:	2100      	movs	r1, #0
 800ef4a:	f000 bfb3 	b.w	800feb4 <strtol>
	...

0800ef50 <malloc>:
 800ef50:	4b02      	ldr	r3, [pc, #8]	@ (800ef5c <malloc+0xc>)
 800ef52:	4601      	mov	r1, r0
 800ef54:	6818      	ldr	r0, [r3, #0]
 800ef56:	f000 b82d 	b.w	800efb4 <_malloc_r>
 800ef5a:	bf00      	nop
 800ef5c:	200001b4 	.word	0x200001b4

0800ef60 <free>:
 800ef60:	4b02      	ldr	r3, [pc, #8]	@ (800ef6c <free+0xc>)
 800ef62:	4601      	mov	r1, r0
 800ef64:	6818      	ldr	r0, [r3, #0]
 800ef66:	f003 b843 	b.w	8011ff0 <_free_r>
 800ef6a:	bf00      	nop
 800ef6c:	200001b4 	.word	0x200001b4

0800ef70 <sbrk_aligned>:
 800ef70:	b570      	push	{r4, r5, r6, lr}
 800ef72:	4e0f      	ldr	r6, [pc, #60]	@ (800efb0 <sbrk_aligned+0x40>)
 800ef74:	460c      	mov	r4, r1
 800ef76:	6831      	ldr	r1, [r6, #0]
 800ef78:	4605      	mov	r5, r0
 800ef7a:	b911      	cbnz	r1, 800ef82 <sbrk_aligned+0x12>
 800ef7c:	f002 f978 	bl	8011270 <_sbrk_r>
 800ef80:	6030      	str	r0, [r6, #0]
 800ef82:	4621      	mov	r1, r4
 800ef84:	4628      	mov	r0, r5
 800ef86:	f002 f973 	bl	8011270 <_sbrk_r>
 800ef8a:	1c43      	adds	r3, r0, #1
 800ef8c:	d103      	bne.n	800ef96 <sbrk_aligned+0x26>
 800ef8e:	f04f 34ff 	mov.w	r4, #4294967295
 800ef92:	4620      	mov	r0, r4
 800ef94:	bd70      	pop	{r4, r5, r6, pc}
 800ef96:	1cc4      	adds	r4, r0, #3
 800ef98:	f024 0403 	bic.w	r4, r4, #3
 800ef9c:	42a0      	cmp	r0, r4
 800ef9e:	d0f8      	beq.n	800ef92 <sbrk_aligned+0x22>
 800efa0:	1a21      	subs	r1, r4, r0
 800efa2:	4628      	mov	r0, r5
 800efa4:	f002 f964 	bl	8011270 <_sbrk_r>
 800efa8:	3001      	adds	r0, #1
 800efaa:	d1f2      	bne.n	800ef92 <sbrk_aligned+0x22>
 800efac:	e7ef      	b.n	800ef8e <sbrk_aligned+0x1e>
 800efae:	bf00      	nop
 800efb0:	20005d4c 	.word	0x20005d4c

0800efb4 <_malloc_r>:
 800efb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efb8:	1ccd      	adds	r5, r1, #3
 800efba:	f025 0503 	bic.w	r5, r5, #3
 800efbe:	3508      	adds	r5, #8
 800efc0:	2d0c      	cmp	r5, #12
 800efc2:	bf38      	it	cc
 800efc4:	250c      	movcc	r5, #12
 800efc6:	2d00      	cmp	r5, #0
 800efc8:	4606      	mov	r6, r0
 800efca:	db01      	blt.n	800efd0 <_malloc_r+0x1c>
 800efcc:	42a9      	cmp	r1, r5
 800efce:	d904      	bls.n	800efda <_malloc_r+0x26>
 800efd0:	230c      	movs	r3, #12
 800efd2:	6033      	str	r3, [r6, #0]
 800efd4:	2000      	movs	r0, #0
 800efd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f0b0 <_malloc_r+0xfc>
 800efde:	f000 f869 	bl	800f0b4 <__malloc_lock>
 800efe2:	f8d8 3000 	ldr.w	r3, [r8]
 800efe6:	461c      	mov	r4, r3
 800efe8:	bb44      	cbnz	r4, 800f03c <_malloc_r+0x88>
 800efea:	4629      	mov	r1, r5
 800efec:	4630      	mov	r0, r6
 800efee:	f7ff ffbf 	bl	800ef70 <sbrk_aligned>
 800eff2:	1c43      	adds	r3, r0, #1
 800eff4:	4604      	mov	r4, r0
 800eff6:	d158      	bne.n	800f0aa <_malloc_r+0xf6>
 800eff8:	f8d8 4000 	ldr.w	r4, [r8]
 800effc:	4627      	mov	r7, r4
 800effe:	2f00      	cmp	r7, #0
 800f000:	d143      	bne.n	800f08a <_malloc_r+0xd6>
 800f002:	2c00      	cmp	r4, #0
 800f004:	d04b      	beq.n	800f09e <_malloc_r+0xea>
 800f006:	6823      	ldr	r3, [r4, #0]
 800f008:	4639      	mov	r1, r7
 800f00a:	4630      	mov	r0, r6
 800f00c:	eb04 0903 	add.w	r9, r4, r3
 800f010:	f002 f92e 	bl	8011270 <_sbrk_r>
 800f014:	4581      	cmp	r9, r0
 800f016:	d142      	bne.n	800f09e <_malloc_r+0xea>
 800f018:	6821      	ldr	r1, [r4, #0]
 800f01a:	1a6d      	subs	r5, r5, r1
 800f01c:	4629      	mov	r1, r5
 800f01e:	4630      	mov	r0, r6
 800f020:	f7ff ffa6 	bl	800ef70 <sbrk_aligned>
 800f024:	3001      	adds	r0, #1
 800f026:	d03a      	beq.n	800f09e <_malloc_r+0xea>
 800f028:	6823      	ldr	r3, [r4, #0]
 800f02a:	442b      	add	r3, r5
 800f02c:	6023      	str	r3, [r4, #0]
 800f02e:	f8d8 3000 	ldr.w	r3, [r8]
 800f032:	685a      	ldr	r2, [r3, #4]
 800f034:	bb62      	cbnz	r2, 800f090 <_malloc_r+0xdc>
 800f036:	f8c8 7000 	str.w	r7, [r8]
 800f03a:	e00f      	b.n	800f05c <_malloc_r+0xa8>
 800f03c:	6822      	ldr	r2, [r4, #0]
 800f03e:	1b52      	subs	r2, r2, r5
 800f040:	d420      	bmi.n	800f084 <_malloc_r+0xd0>
 800f042:	2a0b      	cmp	r2, #11
 800f044:	d917      	bls.n	800f076 <_malloc_r+0xc2>
 800f046:	1961      	adds	r1, r4, r5
 800f048:	42a3      	cmp	r3, r4
 800f04a:	6025      	str	r5, [r4, #0]
 800f04c:	bf18      	it	ne
 800f04e:	6059      	strne	r1, [r3, #4]
 800f050:	6863      	ldr	r3, [r4, #4]
 800f052:	bf08      	it	eq
 800f054:	f8c8 1000 	streq.w	r1, [r8]
 800f058:	5162      	str	r2, [r4, r5]
 800f05a:	604b      	str	r3, [r1, #4]
 800f05c:	4630      	mov	r0, r6
 800f05e:	f000 f82f 	bl	800f0c0 <__malloc_unlock>
 800f062:	f104 000b 	add.w	r0, r4, #11
 800f066:	1d23      	adds	r3, r4, #4
 800f068:	f020 0007 	bic.w	r0, r0, #7
 800f06c:	1ac2      	subs	r2, r0, r3
 800f06e:	bf1c      	itt	ne
 800f070:	1a1b      	subne	r3, r3, r0
 800f072:	50a3      	strne	r3, [r4, r2]
 800f074:	e7af      	b.n	800efd6 <_malloc_r+0x22>
 800f076:	6862      	ldr	r2, [r4, #4]
 800f078:	42a3      	cmp	r3, r4
 800f07a:	bf0c      	ite	eq
 800f07c:	f8c8 2000 	streq.w	r2, [r8]
 800f080:	605a      	strne	r2, [r3, #4]
 800f082:	e7eb      	b.n	800f05c <_malloc_r+0xa8>
 800f084:	4623      	mov	r3, r4
 800f086:	6864      	ldr	r4, [r4, #4]
 800f088:	e7ae      	b.n	800efe8 <_malloc_r+0x34>
 800f08a:	463c      	mov	r4, r7
 800f08c:	687f      	ldr	r7, [r7, #4]
 800f08e:	e7b6      	b.n	800effe <_malloc_r+0x4a>
 800f090:	461a      	mov	r2, r3
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	42a3      	cmp	r3, r4
 800f096:	d1fb      	bne.n	800f090 <_malloc_r+0xdc>
 800f098:	2300      	movs	r3, #0
 800f09a:	6053      	str	r3, [r2, #4]
 800f09c:	e7de      	b.n	800f05c <_malloc_r+0xa8>
 800f09e:	230c      	movs	r3, #12
 800f0a0:	6033      	str	r3, [r6, #0]
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	f000 f80c 	bl	800f0c0 <__malloc_unlock>
 800f0a8:	e794      	b.n	800efd4 <_malloc_r+0x20>
 800f0aa:	6005      	str	r5, [r0, #0]
 800f0ac:	e7d6      	b.n	800f05c <_malloc_r+0xa8>
 800f0ae:	bf00      	nop
 800f0b0:	20005d50 	.word	0x20005d50

0800f0b4 <__malloc_lock>:
 800f0b4:	4801      	ldr	r0, [pc, #4]	@ (800f0bc <__malloc_lock+0x8>)
 800f0b6:	f7fa bf1f 	b.w	8009ef8 <__retarget_lock_acquire_recursive>
 800f0ba:	bf00      	nop
 800f0bc:	20001bd0 	.word	0x20001bd0

0800f0c0 <__malloc_unlock>:
 800f0c0:	4801      	ldr	r0, [pc, #4]	@ (800f0c8 <__malloc_unlock+0x8>)
 800f0c2:	f7fa bf35 	b.w	8009f30 <__retarget_lock_release_recursive>
 800f0c6:	bf00      	nop
 800f0c8:	20001bd0 	.word	0x20001bd0

0800f0cc <sulp>:
 800f0cc:	b570      	push	{r4, r5, r6, lr}
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	460d      	mov	r5, r1
 800f0d2:	ec45 4b10 	vmov	d0, r4, r5
 800f0d6:	4616      	mov	r6, r2
 800f0d8:	f003 fe94 	bl	8012e04 <__ulp>
 800f0dc:	ec51 0b10 	vmov	r0, r1, d0
 800f0e0:	b17e      	cbz	r6, 800f102 <sulp+0x36>
 800f0e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f0e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	dd09      	ble.n	800f102 <sulp+0x36>
 800f0ee:	051b      	lsls	r3, r3, #20
 800f0f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f0f4:	2400      	movs	r4, #0
 800f0f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f0fa:	4622      	mov	r2, r4
 800f0fc:	462b      	mov	r3, r5
 800f0fe:	f7f1 fabb 	bl	8000678 <__aeabi_dmul>
 800f102:	ec41 0b10 	vmov	d0, r0, r1
 800f106:	bd70      	pop	{r4, r5, r6, pc}

0800f108 <_strtod_l>:
 800f108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f10c:	b09f      	sub	sp, #124	@ 0x7c
 800f10e:	460c      	mov	r4, r1
 800f110:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f112:	2200      	movs	r2, #0
 800f114:	921a      	str	r2, [sp, #104]	@ 0x68
 800f116:	9005      	str	r0, [sp, #20]
 800f118:	f04f 0a00 	mov.w	sl, #0
 800f11c:	f04f 0b00 	mov.w	fp, #0
 800f120:	460a      	mov	r2, r1
 800f122:	9219      	str	r2, [sp, #100]	@ 0x64
 800f124:	7811      	ldrb	r1, [r2, #0]
 800f126:	292b      	cmp	r1, #43	@ 0x2b
 800f128:	d04a      	beq.n	800f1c0 <_strtod_l+0xb8>
 800f12a:	d838      	bhi.n	800f19e <_strtod_l+0x96>
 800f12c:	290d      	cmp	r1, #13
 800f12e:	d832      	bhi.n	800f196 <_strtod_l+0x8e>
 800f130:	2908      	cmp	r1, #8
 800f132:	d832      	bhi.n	800f19a <_strtod_l+0x92>
 800f134:	2900      	cmp	r1, #0
 800f136:	d03b      	beq.n	800f1b0 <_strtod_l+0xa8>
 800f138:	2200      	movs	r2, #0
 800f13a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f13c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f13e:	782a      	ldrb	r2, [r5, #0]
 800f140:	2a30      	cmp	r2, #48	@ 0x30
 800f142:	f040 80b3 	bne.w	800f2ac <_strtod_l+0x1a4>
 800f146:	786a      	ldrb	r2, [r5, #1]
 800f148:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f14c:	2a58      	cmp	r2, #88	@ 0x58
 800f14e:	d16e      	bne.n	800f22e <_strtod_l+0x126>
 800f150:	9302      	str	r3, [sp, #8]
 800f152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f154:	9301      	str	r3, [sp, #4]
 800f156:	ab1a      	add	r3, sp, #104	@ 0x68
 800f158:	9300      	str	r3, [sp, #0]
 800f15a:	4a8e      	ldr	r2, [pc, #568]	@ (800f394 <_strtod_l+0x28c>)
 800f15c:	9805      	ldr	r0, [sp, #20]
 800f15e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f160:	a919      	add	r1, sp, #100	@ 0x64
 800f162:	f002 fff7 	bl	8012154 <__gethex>
 800f166:	f010 060f 	ands.w	r6, r0, #15
 800f16a:	4604      	mov	r4, r0
 800f16c:	d005      	beq.n	800f17a <_strtod_l+0x72>
 800f16e:	2e06      	cmp	r6, #6
 800f170:	d128      	bne.n	800f1c4 <_strtod_l+0xbc>
 800f172:	3501      	adds	r5, #1
 800f174:	2300      	movs	r3, #0
 800f176:	9519      	str	r5, [sp, #100]	@ 0x64
 800f178:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f17a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	f040 858e 	bne.w	800fc9e <_strtod_l+0xb96>
 800f182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f184:	b1cb      	cbz	r3, 800f1ba <_strtod_l+0xb2>
 800f186:	4652      	mov	r2, sl
 800f188:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f18c:	ec43 2b10 	vmov	d0, r2, r3
 800f190:	b01f      	add	sp, #124	@ 0x7c
 800f192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f196:	2920      	cmp	r1, #32
 800f198:	d1ce      	bne.n	800f138 <_strtod_l+0x30>
 800f19a:	3201      	adds	r2, #1
 800f19c:	e7c1      	b.n	800f122 <_strtod_l+0x1a>
 800f19e:	292d      	cmp	r1, #45	@ 0x2d
 800f1a0:	d1ca      	bne.n	800f138 <_strtod_l+0x30>
 800f1a2:	2101      	movs	r1, #1
 800f1a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f1a6:	1c51      	adds	r1, r2, #1
 800f1a8:	9119      	str	r1, [sp, #100]	@ 0x64
 800f1aa:	7852      	ldrb	r2, [r2, #1]
 800f1ac:	2a00      	cmp	r2, #0
 800f1ae:	d1c5      	bne.n	800f13c <_strtod_l+0x34>
 800f1b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f1b2:	9419      	str	r4, [sp, #100]	@ 0x64
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f040 8570 	bne.w	800fc9a <_strtod_l+0xb92>
 800f1ba:	4652      	mov	r2, sl
 800f1bc:	465b      	mov	r3, fp
 800f1be:	e7e5      	b.n	800f18c <_strtod_l+0x84>
 800f1c0:	2100      	movs	r1, #0
 800f1c2:	e7ef      	b.n	800f1a4 <_strtod_l+0x9c>
 800f1c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f1c6:	b13a      	cbz	r2, 800f1d8 <_strtod_l+0xd0>
 800f1c8:	2135      	movs	r1, #53	@ 0x35
 800f1ca:	a81c      	add	r0, sp, #112	@ 0x70
 800f1cc:	f003 ff14 	bl	8012ff8 <__copybits>
 800f1d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f1d2:	9805      	ldr	r0, [sp, #20]
 800f1d4:	f003 fae2 	bl	801279c <_Bfree>
 800f1d8:	3e01      	subs	r6, #1
 800f1da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f1dc:	2e04      	cmp	r6, #4
 800f1de:	d806      	bhi.n	800f1ee <_strtod_l+0xe6>
 800f1e0:	e8df f006 	tbb	[pc, r6]
 800f1e4:	201d0314 	.word	0x201d0314
 800f1e8:	14          	.byte	0x14
 800f1e9:	00          	.byte	0x00
 800f1ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f1ee:	05e1      	lsls	r1, r4, #23
 800f1f0:	bf48      	it	mi
 800f1f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f1f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f1fa:	0d1b      	lsrs	r3, r3, #20
 800f1fc:	051b      	lsls	r3, r3, #20
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d1bb      	bne.n	800f17a <_strtod_l+0x72>
 800f202:	f002 f857 	bl	80112b4 <__errno>
 800f206:	2322      	movs	r3, #34	@ 0x22
 800f208:	6003      	str	r3, [r0, #0]
 800f20a:	e7b6      	b.n	800f17a <_strtod_l+0x72>
 800f20c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f210:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f214:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f218:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f21c:	e7e7      	b.n	800f1ee <_strtod_l+0xe6>
 800f21e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f39c <_strtod_l+0x294>
 800f222:	e7e4      	b.n	800f1ee <_strtod_l+0xe6>
 800f224:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f228:	f04f 3aff 	mov.w	sl, #4294967295
 800f22c:	e7df      	b.n	800f1ee <_strtod_l+0xe6>
 800f22e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f230:	1c5a      	adds	r2, r3, #1
 800f232:	9219      	str	r2, [sp, #100]	@ 0x64
 800f234:	785b      	ldrb	r3, [r3, #1]
 800f236:	2b30      	cmp	r3, #48	@ 0x30
 800f238:	d0f9      	beq.n	800f22e <_strtod_l+0x126>
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d09d      	beq.n	800f17a <_strtod_l+0x72>
 800f23e:	2301      	movs	r3, #1
 800f240:	9309      	str	r3, [sp, #36]	@ 0x24
 800f242:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f244:	930c      	str	r3, [sp, #48]	@ 0x30
 800f246:	2300      	movs	r3, #0
 800f248:	9308      	str	r3, [sp, #32]
 800f24a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f24c:	461f      	mov	r7, r3
 800f24e:	220a      	movs	r2, #10
 800f250:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f252:	7805      	ldrb	r5, [r0, #0]
 800f254:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f258:	b2d9      	uxtb	r1, r3
 800f25a:	2909      	cmp	r1, #9
 800f25c:	d928      	bls.n	800f2b0 <_strtod_l+0x1a8>
 800f25e:	494e      	ldr	r1, [pc, #312]	@ (800f398 <_strtod_l+0x290>)
 800f260:	2201      	movs	r2, #1
 800f262:	f001 ff3c 	bl	80110de <strncmp>
 800f266:	2800      	cmp	r0, #0
 800f268:	d032      	beq.n	800f2d0 <_strtod_l+0x1c8>
 800f26a:	2000      	movs	r0, #0
 800f26c:	462a      	mov	r2, r5
 800f26e:	4681      	mov	r9, r0
 800f270:	463d      	mov	r5, r7
 800f272:	4603      	mov	r3, r0
 800f274:	2a65      	cmp	r2, #101	@ 0x65
 800f276:	d001      	beq.n	800f27c <_strtod_l+0x174>
 800f278:	2a45      	cmp	r2, #69	@ 0x45
 800f27a:	d114      	bne.n	800f2a6 <_strtod_l+0x19e>
 800f27c:	b91d      	cbnz	r5, 800f286 <_strtod_l+0x17e>
 800f27e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f280:	4302      	orrs	r2, r0
 800f282:	d095      	beq.n	800f1b0 <_strtod_l+0xa8>
 800f284:	2500      	movs	r5, #0
 800f286:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f288:	1c62      	adds	r2, r4, #1
 800f28a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f28c:	7862      	ldrb	r2, [r4, #1]
 800f28e:	2a2b      	cmp	r2, #43	@ 0x2b
 800f290:	d077      	beq.n	800f382 <_strtod_l+0x27a>
 800f292:	2a2d      	cmp	r2, #45	@ 0x2d
 800f294:	d07b      	beq.n	800f38e <_strtod_l+0x286>
 800f296:	f04f 0c00 	mov.w	ip, #0
 800f29a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f29e:	2909      	cmp	r1, #9
 800f2a0:	f240 8082 	bls.w	800f3a8 <_strtod_l+0x2a0>
 800f2a4:	9419      	str	r4, [sp, #100]	@ 0x64
 800f2a6:	f04f 0800 	mov.w	r8, #0
 800f2aa:	e0a2      	b.n	800f3f2 <_strtod_l+0x2ea>
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	e7c7      	b.n	800f240 <_strtod_l+0x138>
 800f2b0:	2f08      	cmp	r7, #8
 800f2b2:	bfd5      	itete	le
 800f2b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f2b6:	9908      	ldrgt	r1, [sp, #32]
 800f2b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800f2bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f2c0:	f100 0001 	add.w	r0, r0, #1
 800f2c4:	bfd4      	ite	le
 800f2c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f2c8:	9308      	strgt	r3, [sp, #32]
 800f2ca:	3701      	adds	r7, #1
 800f2cc:	9019      	str	r0, [sp, #100]	@ 0x64
 800f2ce:	e7bf      	b.n	800f250 <_strtod_l+0x148>
 800f2d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2d2:	1c5a      	adds	r2, r3, #1
 800f2d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800f2d6:	785a      	ldrb	r2, [r3, #1]
 800f2d8:	b37f      	cbz	r7, 800f33a <_strtod_l+0x232>
 800f2da:	4681      	mov	r9, r0
 800f2dc:	463d      	mov	r5, r7
 800f2de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f2e2:	2b09      	cmp	r3, #9
 800f2e4:	d912      	bls.n	800f30c <_strtod_l+0x204>
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	e7c4      	b.n	800f274 <_strtod_l+0x16c>
 800f2ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2ec:	1c5a      	adds	r2, r3, #1
 800f2ee:	9219      	str	r2, [sp, #100]	@ 0x64
 800f2f0:	785a      	ldrb	r2, [r3, #1]
 800f2f2:	3001      	adds	r0, #1
 800f2f4:	2a30      	cmp	r2, #48	@ 0x30
 800f2f6:	d0f8      	beq.n	800f2ea <_strtod_l+0x1e2>
 800f2f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f2fc:	2b08      	cmp	r3, #8
 800f2fe:	f200 84d3 	bhi.w	800fca8 <_strtod_l+0xba0>
 800f302:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f304:	930c      	str	r3, [sp, #48]	@ 0x30
 800f306:	4681      	mov	r9, r0
 800f308:	2000      	movs	r0, #0
 800f30a:	4605      	mov	r5, r0
 800f30c:	3a30      	subs	r2, #48	@ 0x30
 800f30e:	f100 0301 	add.w	r3, r0, #1
 800f312:	d02a      	beq.n	800f36a <_strtod_l+0x262>
 800f314:	4499      	add	r9, r3
 800f316:	eb00 0c05 	add.w	ip, r0, r5
 800f31a:	462b      	mov	r3, r5
 800f31c:	210a      	movs	r1, #10
 800f31e:	4563      	cmp	r3, ip
 800f320:	d10d      	bne.n	800f33e <_strtod_l+0x236>
 800f322:	1c69      	adds	r1, r5, #1
 800f324:	4401      	add	r1, r0
 800f326:	4428      	add	r0, r5
 800f328:	2808      	cmp	r0, #8
 800f32a:	dc16      	bgt.n	800f35a <_strtod_l+0x252>
 800f32c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f32e:	230a      	movs	r3, #10
 800f330:	fb03 2300 	mla	r3, r3, r0, r2
 800f334:	930a      	str	r3, [sp, #40]	@ 0x28
 800f336:	2300      	movs	r3, #0
 800f338:	e018      	b.n	800f36c <_strtod_l+0x264>
 800f33a:	4638      	mov	r0, r7
 800f33c:	e7da      	b.n	800f2f4 <_strtod_l+0x1ec>
 800f33e:	2b08      	cmp	r3, #8
 800f340:	f103 0301 	add.w	r3, r3, #1
 800f344:	dc03      	bgt.n	800f34e <_strtod_l+0x246>
 800f346:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f348:	434e      	muls	r6, r1
 800f34a:	960a      	str	r6, [sp, #40]	@ 0x28
 800f34c:	e7e7      	b.n	800f31e <_strtod_l+0x216>
 800f34e:	2b10      	cmp	r3, #16
 800f350:	bfde      	ittt	le
 800f352:	9e08      	ldrle	r6, [sp, #32]
 800f354:	434e      	mulle	r6, r1
 800f356:	9608      	strle	r6, [sp, #32]
 800f358:	e7e1      	b.n	800f31e <_strtod_l+0x216>
 800f35a:	280f      	cmp	r0, #15
 800f35c:	dceb      	bgt.n	800f336 <_strtod_l+0x22e>
 800f35e:	9808      	ldr	r0, [sp, #32]
 800f360:	230a      	movs	r3, #10
 800f362:	fb03 2300 	mla	r3, r3, r0, r2
 800f366:	9308      	str	r3, [sp, #32]
 800f368:	e7e5      	b.n	800f336 <_strtod_l+0x22e>
 800f36a:	4629      	mov	r1, r5
 800f36c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f36e:	1c50      	adds	r0, r2, #1
 800f370:	9019      	str	r0, [sp, #100]	@ 0x64
 800f372:	7852      	ldrb	r2, [r2, #1]
 800f374:	4618      	mov	r0, r3
 800f376:	460d      	mov	r5, r1
 800f378:	e7b1      	b.n	800f2de <_strtod_l+0x1d6>
 800f37a:	f04f 0900 	mov.w	r9, #0
 800f37e:	2301      	movs	r3, #1
 800f380:	e77d      	b.n	800f27e <_strtod_l+0x176>
 800f382:	f04f 0c00 	mov.w	ip, #0
 800f386:	1ca2      	adds	r2, r4, #2
 800f388:	9219      	str	r2, [sp, #100]	@ 0x64
 800f38a:	78a2      	ldrb	r2, [r4, #2]
 800f38c:	e785      	b.n	800f29a <_strtod_l+0x192>
 800f38e:	f04f 0c01 	mov.w	ip, #1
 800f392:	e7f8      	b.n	800f386 <_strtod_l+0x27e>
 800f394:	080175dc 	.word	0x080175dc
 800f398:	080175c5 	.word	0x080175c5
 800f39c:	7ff00000 	.word	0x7ff00000
 800f3a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f3a2:	1c51      	adds	r1, r2, #1
 800f3a4:	9119      	str	r1, [sp, #100]	@ 0x64
 800f3a6:	7852      	ldrb	r2, [r2, #1]
 800f3a8:	2a30      	cmp	r2, #48	@ 0x30
 800f3aa:	d0f9      	beq.n	800f3a0 <_strtod_l+0x298>
 800f3ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f3b0:	2908      	cmp	r1, #8
 800f3b2:	f63f af78 	bhi.w	800f2a6 <_strtod_l+0x19e>
 800f3b6:	3a30      	subs	r2, #48	@ 0x30
 800f3b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f3ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f3bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f3be:	f04f 080a 	mov.w	r8, #10
 800f3c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f3c4:	1c56      	adds	r6, r2, #1
 800f3c6:	9619      	str	r6, [sp, #100]	@ 0x64
 800f3c8:	7852      	ldrb	r2, [r2, #1]
 800f3ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f3ce:	f1be 0f09 	cmp.w	lr, #9
 800f3d2:	d939      	bls.n	800f448 <_strtod_l+0x340>
 800f3d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f3d6:	1a76      	subs	r6, r6, r1
 800f3d8:	2e08      	cmp	r6, #8
 800f3da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f3de:	dc03      	bgt.n	800f3e8 <_strtod_l+0x2e0>
 800f3e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f3e2:	4588      	cmp	r8, r1
 800f3e4:	bfa8      	it	ge
 800f3e6:	4688      	movge	r8, r1
 800f3e8:	f1bc 0f00 	cmp.w	ip, #0
 800f3ec:	d001      	beq.n	800f3f2 <_strtod_l+0x2ea>
 800f3ee:	f1c8 0800 	rsb	r8, r8, #0
 800f3f2:	2d00      	cmp	r5, #0
 800f3f4:	d14e      	bne.n	800f494 <_strtod_l+0x38c>
 800f3f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f3f8:	4308      	orrs	r0, r1
 800f3fa:	f47f aebe 	bne.w	800f17a <_strtod_l+0x72>
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	f47f aed6 	bne.w	800f1b0 <_strtod_l+0xa8>
 800f404:	2a69      	cmp	r2, #105	@ 0x69
 800f406:	d028      	beq.n	800f45a <_strtod_l+0x352>
 800f408:	dc25      	bgt.n	800f456 <_strtod_l+0x34e>
 800f40a:	2a49      	cmp	r2, #73	@ 0x49
 800f40c:	d025      	beq.n	800f45a <_strtod_l+0x352>
 800f40e:	2a4e      	cmp	r2, #78	@ 0x4e
 800f410:	f47f aece 	bne.w	800f1b0 <_strtod_l+0xa8>
 800f414:	499b      	ldr	r1, [pc, #620]	@ (800f684 <_strtod_l+0x57c>)
 800f416:	a819      	add	r0, sp, #100	@ 0x64
 800f418:	f003 f8be 	bl	8012598 <__match>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	f43f aec7 	beq.w	800f1b0 <_strtod_l+0xa8>
 800f422:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	2b28      	cmp	r3, #40	@ 0x28
 800f428:	d12e      	bne.n	800f488 <_strtod_l+0x380>
 800f42a:	4997      	ldr	r1, [pc, #604]	@ (800f688 <_strtod_l+0x580>)
 800f42c:	aa1c      	add	r2, sp, #112	@ 0x70
 800f42e:	a819      	add	r0, sp, #100	@ 0x64
 800f430:	f003 f8c6 	bl	80125c0 <__hexnan>
 800f434:	2805      	cmp	r0, #5
 800f436:	d127      	bne.n	800f488 <_strtod_l+0x380>
 800f438:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f43a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f43e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f442:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f446:	e698      	b.n	800f17a <_strtod_l+0x72>
 800f448:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f44a:	fb08 2101 	mla	r1, r8, r1, r2
 800f44e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f452:	920e      	str	r2, [sp, #56]	@ 0x38
 800f454:	e7b5      	b.n	800f3c2 <_strtod_l+0x2ba>
 800f456:	2a6e      	cmp	r2, #110	@ 0x6e
 800f458:	e7da      	b.n	800f410 <_strtod_l+0x308>
 800f45a:	498c      	ldr	r1, [pc, #560]	@ (800f68c <_strtod_l+0x584>)
 800f45c:	a819      	add	r0, sp, #100	@ 0x64
 800f45e:	f003 f89b 	bl	8012598 <__match>
 800f462:	2800      	cmp	r0, #0
 800f464:	f43f aea4 	beq.w	800f1b0 <_strtod_l+0xa8>
 800f468:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f46a:	4989      	ldr	r1, [pc, #548]	@ (800f690 <_strtod_l+0x588>)
 800f46c:	3b01      	subs	r3, #1
 800f46e:	a819      	add	r0, sp, #100	@ 0x64
 800f470:	9319      	str	r3, [sp, #100]	@ 0x64
 800f472:	f003 f891 	bl	8012598 <__match>
 800f476:	b910      	cbnz	r0, 800f47e <_strtod_l+0x376>
 800f478:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f47a:	3301      	adds	r3, #1
 800f47c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f47e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f6a0 <_strtod_l+0x598>
 800f482:	f04f 0a00 	mov.w	sl, #0
 800f486:	e678      	b.n	800f17a <_strtod_l+0x72>
 800f488:	4882      	ldr	r0, [pc, #520]	@ (800f694 <_strtod_l+0x58c>)
 800f48a:	f001 ff55 	bl	8011338 <nan>
 800f48e:	ec5b ab10 	vmov	sl, fp, d0
 800f492:	e672      	b.n	800f17a <_strtod_l+0x72>
 800f494:	eba8 0309 	sub.w	r3, r8, r9
 800f498:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f49a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f49c:	2f00      	cmp	r7, #0
 800f49e:	bf08      	it	eq
 800f4a0:	462f      	moveq	r7, r5
 800f4a2:	2d10      	cmp	r5, #16
 800f4a4:	462c      	mov	r4, r5
 800f4a6:	bfa8      	it	ge
 800f4a8:	2410      	movge	r4, #16
 800f4aa:	f7f1 f86b 	bl	8000584 <__aeabi_ui2d>
 800f4ae:	2d09      	cmp	r5, #9
 800f4b0:	4682      	mov	sl, r0
 800f4b2:	468b      	mov	fp, r1
 800f4b4:	dc13      	bgt.n	800f4de <_strtod_l+0x3d6>
 800f4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	f43f ae5e 	beq.w	800f17a <_strtod_l+0x72>
 800f4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4c0:	dd78      	ble.n	800f5b4 <_strtod_l+0x4ac>
 800f4c2:	2b16      	cmp	r3, #22
 800f4c4:	dc5f      	bgt.n	800f586 <_strtod_l+0x47e>
 800f4c6:	4974      	ldr	r1, [pc, #464]	@ (800f698 <_strtod_l+0x590>)
 800f4c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f4cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4d0:	4652      	mov	r2, sl
 800f4d2:	465b      	mov	r3, fp
 800f4d4:	f7f1 f8d0 	bl	8000678 <__aeabi_dmul>
 800f4d8:	4682      	mov	sl, r0
 800f4da:	468b      	mov	fp, r1
 800f4dc:	e64d      	b.n	800f17a <_strtod_l+0x72>
 800f4de:	4b6e      	ldr	r3, [pc, #440]	@ (800f698 <_strtod_l+0x590>)
 800f4e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f4e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f4e8:	f7f1 f8c6 	bl	8000678 <__aeabi_dmul>
 800f4ec:	4682      	mov	sl, r0
 800f4ee:	9808      	ldr	r0, [sp, #32]
 800f4f0:	468b      	mov	fp, r1
 800f4f2:	f7f1 f847 	bl	8000584 <__aeabi_ui2d>
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	4650      	mov	r0, sl
 800f4fc:	4659      	mov	r1, fp
 800f4fe:	f7f0 ff05 	bl	800030c <__adddf3>
 800f502:	2d0f      	cmp	r5, #15
 800f504:	4682      	mov	sl, r0
 800f506:	468b      	mov	fp, r1
 800f508:	ddd5      	ble.n	800f4b6 <_strtod_l+0x3ae>
 800f50a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f50c:	1b2c      	subs	r4, r5, r4
 800f50e:	441c      	add	r4, r3
 800f510:	2c00      	cmp	r4, #0
 800f512:	f340 8096 	ble.w	800f642 <_strtod_l+0x53a>
 800f516:	f014 030f 	ands.w	r3, r4, #15
 800f51a:	d00a      	beq.n	800f532 <_strtod_l+0x42a>
 800f51c:	495e      	ldr	r1, [pc, #376]	@ (800f698 <_strtod_l+0x590>)
 800f51e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f522:	4652      	mov	r2, sl
 800f524:	465b      	mov	r3, fp
 800f526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f52a:	f7f1 f8a5 	bl	8000678 <__aeabi_dmul>
 800f52e:	4682      	mov	sl, r0
 800f530:	468b      	mov	fp, r1
 800f532:	f034 040f 	bics.w	r4, r4, #15
 800f536:	d073      	beq.n	800f620 <_strtod_l+0x518>
 800f538:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f53c:	dd48      	ble.n	800f5d0 <_strtod_l+0x4c8>
 800f53e:	2400      	movs	r4, #0
 800f540:	46a0      	mov	r8, r4
 800f542:	940a      	str	r4, [sp, #40]	@ 0x28
 800f544:	46a1      	mov	r9, r4
 800f546:	9a05      	ldr	r2, [sp, #20]
 800f548:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f6a0 <_strtod_l+0x598>
 800f54c:	2322      	movs	r3, #34	@ 0x22
 800f54e:	6013      	str	r3, [r2, #0]
 800f550:	f04f 0a00 	mov.w	sl, #0
 800f554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f556:	2b00      	cmp	r3, #0
 800f558:	f43f ae0f 	beq.w	800f17a <_strtod_l+0x72>
 800f55c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f55e:	9805      	ldr	r0, [sp, #20]
 800f560:	f003 f91c 	bl	801279c <_Bfree>
 800f564:	9805      	ldr	r0, [sp, #20]
 800f566:	4649      	mov	r1, r9
 800f568:	f003 f918 	bl	801279c <_Bfree>
 800f56c:	9805      	ldr	r0, [sp, #20]
 800f56e:	4641      	mov	r1, r8
 800f570:	f003 f914 	bl	801279c <_Bfree>
 800f574:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f576:	9805      	ldr	r0, [sp, #20]
 800f578:	f003 f910 	bl	801279c <_Bfree>
 800f57c:	9805      	ldr	r0, [sp, #20]
 800f57e:	4621      	mov	r1, r4
 800f580:	f003 f90c 	bl	801279c <_Bfree>
 800f584:	e5f9      	b.n	800f17a <_strtod_l+0x72>
 800f586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f588:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f58c:	4293      	cmp	r3, r2
 800f58e:	dbbc      	blt.n	800f50a <_strtod_l+0x402>
 800f590:	4c41      	ldr	r4, [pc, #260]	@ (800f698 <_strtod_l+0x590>)
 800f592:	f1c5 050f 	rsb	r5, r5, #15
 800f596:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f59a:	4652      	mov	r2, sl
 800f59c:	465b      	mov	r3, fp
 800f59e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5a2:	f7f1 f869 	bl	8000678 <__aeabi_dmul>
 800f5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5a8:	1b5d      	subs	r5, r3, r5
 800f5aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f5ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f5b2:	e78f      	b.n	800f4d4 <_strtod_l+0x3cc>
 800f5b4:	3316      	adds	r3, #22
 800f5b6:	dba8      	blt.n	800f50a <_strtod_l+0x402>
 800f5b8:	4b37      	ldr	r3, [pc, #220]	@ (800f698 <_strtod_l+0x590>)
 800f5ba:	eba9 0808 	sub.w	r8, r9, r8
 800f5be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f5c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f5c6:	4650      	mov	r0, sl
 800f5c8:	4659      	mov	r1, fp
 800f5ca:	f7f1 f97f 	bl	80008cc <__aeabi_ddiv>
 800f5ce:	e783      	b.n	800f4d8 <_strtod_l+0x3d0>
 800f5d0:	4b32      	ldr	r3, [pc, #200]	@ (800f69c <_strtod_l+0x594>)
 800f5d2:	9308      	str	r3, [sp, #32]
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	1124      	asrs	r4, r4, #4
 800f5d8:	4650      	mov	r0, sl
 800f5da:	4659      	mov	r1, fp
 800f5dc:	461e      	mov	r6, r3
 800f5de:	2c01      	cmp	r4, #1
 800f5e0:	dc21      	bgt.n	800f626 <_strtod_l+0x51e>
 800f5e2:	b10b      	cbz	r3, 800f5e8 <_strtod_l+0x4e0>
 800f5e4:	4682      	mov	sl, r0
 800f5e6:	468b      	mov	fp, r1
 800f5e8:	492c      	ldr	r1, [pc, #176]	@ (800f69c <_strtod_l+0x594>)
 800f5ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f5ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f5f2:	4652      	mov	r2, sl
 800f5f4:	465b      	mov	r3, fp
 800f5f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5fa:	f7f1 f83d 	bl	8000678 <__aeabi_dmul>
 800f5fe:	4b28      	ldr	r3, [pc, #160]	@ (800f6a0 <_strtod_l+0x598>)
 800f600:	460a      	mov	r2, r1
 800f602:	400b      	ands	r3, r1
 800f604:	4927      	ldr	r1, [pc, #156]	@ (800f6a4 <_strtod_l+0x59c>)
 800f606:	428b      	cmp	r3, r1
 800f608:	4682      	mov	sl, r0
 800f60a:	d898      	bhi.n	800f53e <_strtod_l+0x436>
 800f60c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f610:	428b      	cmp	r3, r1
 800f612:	bf86      	itte	hi
 800f614:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f6a8 <_strtod_l+0x5a0>
 800f618:	f04f 3aff 	movhi.w	sl, #4294967295
 800f61c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f620:	2300      	movs	r3, #0
 800f622:	9308      	str	r3, [sp, #32]
 800f624:	e07a      	b.n	800f71c <_strtod_l+0x614>
 800f626:	07e2      	lsls	r2, r4, #31
 800f628:	d505      	bpl.n	800f636 <_strtod_l+0x52e>
 800f62a:	9b08      	ldr	r3, [sp, #32]
 800f62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f630:	f7f1 f822 	bl	8000678 <__aeabi_dmul>
 800f634:	2301      	movs	r3, #1
 800f636:	9a08      	ldr	r2, [sp, #32]
 800f638:	3208      	adds	r2, #8
 800f63a:	3601      	adds	r6, #1
 800f63c:	1064      	asrs	r4, r4, #1
 800f63e:	9208      	str	r2, [sp, #32]
 800f640:	e7cd      	b.n	800f5de <_strtod_l+0x4d6>
 800f642:	d0ed      	beq.n	800f620 <_strtod_l+0x518>
 800f644:	4264      	negs	r4, r4
 800f646:	f014 020f 	ands.w	r2, r4, #15
 800f64a:	d00a      	beq.n	800f662 <_strtod_l+0x55a>
 800f64c:	4b12      	ldr	r3, [pc, #72]	@ (800f698 <_strtod_l+0x590>)
 800f64e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f652:	4650      	mov	r0, sl
 800f654:	4659      	mov	r1, fp
 800f656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65a:	f7f1 f937 	bl	80008cc <__aeabi_ddiv>
 800f65e:	4682      	mov	sl, r0
 800f660:	468b      	mov	fp, r1
 800f662:	1124      	asrs	r4, r4, #4
 800f664:	d0dc      	beq.n	800f620 <_strtod_l+0x518>
 800f666:	2c1f      	cmp	r4, #31
 800f668:	dd20      	ble.n	800f6ac <_strtod_l+0x5a4>
 800f66a:	2400      	movs	r4, #0
 800f66c:	46a0      	mov	r8, r4
 800f66e:	940a      	str	r4, [sp, #40]	@ 0x28
 800f670:	46a1      	mov	r9, r4
 800f672:	9a05      	ldr	r2, [sp, #20]
 800f674:	2322      	movs	r3, #34	@ 0x22
 800f676:	f04f 0a00 	mov.w	sl, #0
 800f67a:	f04f 0b00 	mov.w	fp, #0
 800f67e:	6013      	str	r3, [r2, #0]
 800f680:	e768      	b.n	800f554 <_strtod_l+0x44c>
 800f682:	bf00      	nop
 800f684:	08017726 	.word	0x08017726
 800f688:	080175c8 	.word	0x080175c8
 800f68c:	0801771e 	.word	0x0801771e
 800f690:	0801775b 	.word	0x0801775b
 800f694:	08017a07 	.word	0x08017a07
 800f698:	080178d8 	.word	0x080178d8
 800f69c:	080178b0 	.word	0x080178b0
 800f6a0:	7ff00000 	.word	0x7ff00000
 800f6a4:	7ca00000 	.word	0x7ca00000
 800f6a8:	7fefffff 	.word	0x7fefffff
 800f6ac:	f014 0310 	ands.w	r3, r4, #16
 800f6b0:	bf18      	it	ne
 800f6b2:	236a      	movne	r3, #106	@ 0x6a
 800f6b4:	4ea9      	ldr	r6, [pc, #676]	@ (800f95c <_strtod_l+0x854>)
 800f6b6:	9308      	str	r3, [sp, #32]
 800f6b8:	4650      	mov	r0, sl
 800f6ba:	4659      	mov	r1, fp
 800f6bc:	2300      	movs	r3, #0
 800f6be:	07e2      	lsls	r2, r4, #31
 800f6c0:	d504      	bpl.n	800f6cc <_strtod_l+0x5c4>
 800f6c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f6c6:	f7f0 ffd7 	bl	8000678 <__aeabi_dmul>
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	1064      	asrs	r4, r4, #1
 800f6ce:	f106 0608 	add.w	r6, r6, #8
 800f6d2:	d1f4      	bne.n	800f6be <_strtod_l+0x5b6>
 800f6d4:	b10b      	cbz	r3, 800f6da <_strtod_l+0x5d2>
 800f6d6:	4682      	mov	sl, r0
 800f6d8:	468b      	mov	fp, r1
 800f6da:	9b08      	ldr	r3, [sp, #32]
 800f6dc:	b1b3      	cbz	r3, 800f70c <_strtod_l+0x604>
 800f6de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f6e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	4659      	mov	r1, fp
 800f6ea:	dd0f      	ble.n	800f70c <_strtod_l+0x604>
 800f6ec:	2b1f      	cmp	r3, #31
 800f6ee:	dd55      	ble.n	800f79c <_strtod_l+0x694>
 800f6f0:	2b34      	cmp	r3, #52	@ 0x34
 800f6f2:	bfde      	ittt	le
 800f6f4:	f04f 33ff 	movle.w	r3, #4294967295
 800f6f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f6fc:	4093      	lslle	r3, r2
 800f6fe:	f04f 0a00 	mov.w	sl, #0
 800f702:	bfcc      	ite	gt
 800f704:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f708:	ea03 0b01 	andle.w	fp, r3, r1
 800f70c:	2200      	movs	r2, #0
 800f70e:	2300      	movs	r3, #0
 800f710:	4650      	mov	r0, sl
 800f712:	4659      	mov	r1, fp
 800f714:	f7f1 fa18 	bl	8000b48 <__aeabi_dcmpeq>
 800f718:	2800      	cmp	r0, #0
 800f71a:	d1a6      	bne.n	800f66a <_strtod_l+0x562>
 800f71c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f71e:	9300      	str	r3, [sp, #0]
 800f720:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f722:	9805      	ldr	r0, [sp, #20]
 800f724:	462b      	mov	r3, r5
 800f726:	463a      	mov	r2, r7
 800f728:	f003 f8a0 	bl	801286c <__s2b>
 800f72c:	900a      	str	r0, [sp, #40]	@ 0x28
 800f72e:	2800      	cmp	r0, #0
 800f730:	f43f af05 	beq.w	800f53e <_strtod_l+0x436>
 800f734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f736:	2a00      	cmp	r2, #0
 800f738:	eba9 0308 	sub.w	r3, r9, r8
 800f73c:	bfa8      	it	ge
 800f73e:	2300      	movge	r3, #0
 800f740:	9312      	str	r3, [sp, #72]	@ 0x48
 800f742:	2400      	movs	r4, #0
 800f744:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f748:	9316      	str	r3, [sp, #88]	@ 0x58
 800f74a:	46a0      	mov	r8, r4
 800f74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f74e:	9805      	ldr	r0, [sp, #20]
 800f750:	6859      	ldr	r1, [r3, #4]
 800f752:	f002 ffe3 	bl	801271c <_Balloc>
 800f756:	4681      	mov	r9, r0
 800f758:	2800      	cmp	r0, #0
 800f75a:	f43f aef4 	beq.w	800f546 <_strtod_l+0x43e>
 800f75e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f760:	691a      	ldr	r2, [r3, #16]
 800f762:	3202      	adds	r2, #2
 800f764:	f103 010c 	add.w	r1, r3, #12
 800f768:	0092      	lsls	r2, r2, #2
 800f76a:	300c      	adds	r0, #12
 800f76c:	f001 fdd4 	bl	8011318 <memcpy>
 800f770:	ec4b ab10 	vmov	d0, sl, fp
 800f774:	9805      	ldr	r0, [sp, #20]
 800f776:	aa1c      	add	r2, sp, #112	@ 0x70
 800f778:	a91b      	add	r1, sp, #108	@ 0x6c
 800f77a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f77e:	f003 fbb1 	bl	8012ee4 <__d2b>
 800f782:	901a      	str	r0, [sp, #104]	@ 0x68
 800f784:	2800      	cmp	r0, #0
 800f786:	f43f aede 	beq.w	800f546 <_strtod_l+0x43e>
 800f78a:	9805      	ldr	r0, [sp, #20]
 800f78c:	2101      	movs	r1, #1
 800f78e:	f003 f903 	bl	8012998 <__i2b>
 800f792:	4680      	mov	r8, r0
 800f794:	b948      	cbnz	r0, 800f7aa <_strtod_l+0x6a2>
 800f796:	f04f 0800 	mov.w	r8, #0
 800f79a:	e6d4      	b.n	800f546 <_strtod_l+0x43e>
 800f79c:	f04f 32ff 	mov.w	r2, #4294967295
 800f7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800f7a4:	ea03 0a0a 	and.w	sl, r3, sl
 800f7a8:	e7b0      	b.n	800f70c <_strtod_l+0x604>
 800f7aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f7ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f7ae:	2d00      	cmp	r5, #0
 800f7b0:	bfab      	itete	ge
 800f7b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f7b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f7b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f7b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f7ba:	bfac      	ite	ge
 800f7bc:	18ef      	addge	r7, r5, r3
 800f7be:	1b5e      	sublt	r6, r3, r5
 800f7c0:	9b08      	ldr	r3, [sp, #32]
 800f7c2:	1aed      	subs	r5, r5, r3
 800f7c4:	4415      	add	r5, r2
 800f7c6:	4b66      	ldr	r3, [pc, #408]	@ (800f960 <_strtod_l+0x858>)
 800f7c8:	3d01      	subs	r5, #1
 800f7ca:	429d      	cmp	r5, r3
 800f7cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f7d0:	da50      	bge.n	800f874 <_strtod_l+0x76c>
 800f7d2:	1b5b      	subs	r3, r3, r5
 800f7d4:	2b1f      	cmp	r3, #31
 800f7d6:	eba2 0203 	sub.w	r2, r2, r3
 800f7da:	f04f 0101 	mov.w	r1, #1
 800f7de:	dc3d      	bgt.n	800f85c <_strtod_l+0x754>
 800f7e0:	fa01 f303 	lsl.w	r3, r1, r3
 800f7e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f7ea:	18bd      	adds	r5, r7, r2
 800f7ec:	9b08      	ldr	r3, [sp, #32]
 800f7ee:	42af      	cmp	r7, r5
 800f7f0:	4416      	add	r6, r2
 800f7f2:	441e      	add	r6, r3
 800f7f4:	463b      	mov	r3, r7
 800f7f6:	bfa8      	it	ge
 800f7f8:	462b      	movge	r3, r5
 800f7fa:	42b3      	cmp	r3, r6
 800f7fc:	bfa8      	it	ge
 800f7fe:	4633      	movge	r3, r6
 800f800:	2b00      	cmp	r3, #0
 800f802:	bfc2      	ittt	gt
 800f804:	1aed      	subgt	r5, r5, r3
 800f806:	1af6      	subgt	r6, r6, r3
 800f808:	1aff      	subgt	r7, r7, r3
 800f80a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	dd16      	ble.n	800f83e <_strtod_l+0x736>
 800f810:	4641      	mov	r1, r8
 800f812:	9805      	ldr	r0, [sp, #20]
 800f814:	461a      	mov	r2, r3
 800f816:	f003 f97f 	bl	8012b18 <__pow5mult>
 800f81a:	4680      	mov	r8, r0
 800f81c:	2800      	cmp	r0, #0
 800f81e:	d0ba      	beq.n	800f796 <_strtod_l+0x68e>
 800f820:	4601      	mov	r1, r0
 800f822:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f824:	9805      	ldr	r0, [sp, #20]
 800f826:	f003 f8cd 	bl	80129c4 <__multiply>
 800f82a:	900e      	str	r0, [sp, #56]	@ 0x38
 800f82c:	2800      	cmp	r0, #0
 800f82e:	f43f ae8a 	beq.w	800f546 <_strtod_l+0x43e>
 800f832:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f834:	9805      	ldr	r0, [sp, #20]
 800f836:	f002 ffb1 	bl	801279c <_Bfree>
 800f83a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f83c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f83e:	2d00      	cmp	r5, #0
 800f840:	dc1d      	bgt.n	800f87e <_strtod_l+0x776>
 800f842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f844:	2b00      	cmp	r3, #0
 800f846:	dd23      	ble.n	800f890 <_strtod_l+0x788>
 800f848:	4649      	mov	r1, r9
 800f84a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f84c:	9805      	ldr	r0, [sp, #20]
 800f84e:	f003 f963 	bl	8012b18 <__pow5mult>
 800f852:	4681      	mov	r9, r0
 800f854:	b9e0      	cbnz	r0, 800f890 <_strtod_l+0x788>
 800f856:	f04f 0900 	mov.w	r9, #0
 800f85a:	e674      	b.n	800f546 <_strtod_l+0x43e>
 800f85c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f860:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f864:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f868:	35e2      	adds	r5, #226	@ 0xe2
 800f86a:	fa01 f305 	lsl.w	r3, r1, r5
 800f86e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f870:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f872:	e7ba      	b.n	800f7ea <_strtod_l+0x6e2>
 800f874:	2300      	movs	r3, #0
 800f876:	9310      	str	r3, [sp, #64]	@ 0x40
 800f878:	2301      	movs	r3, #1
 800f87a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f87c:	e7b5      	b.n	800f7ea <_strtod_l+0x6e2>
 800f87e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f880:	9805      	ldr	r0, [sp, #20]
 800f882:	462a      	mov	r2, r5
 800f884:	f003 f9a2 	bl	8012bcc <__lshift>
 800f888:	901a      	str	r0, [sp, #104]	@ 0x68
 800f88a:	2800      	cmp	r0, #0
 800f88c:	d1d9      	bne.n	800f842 <_strtod_l+0x73a>
 800f88e:	e65a      	b.n	800f546 <_strtod_l+0x43e>
 800f890:	2e00      	cmp	r6, #0
 800f892:	dd07      	ble.n	800f8a4 <_strtod_l+0x79c>
 800f894:	4649      	mov	r1, r9
 800f896:	9805      	ldr	r0, [sp, #20]
 800f898:	4632      	mov	r2, r6
 800f89a:	f003 f997 	bl	8012bcc <__lshift>
 800f89e:	4681      	mov	r9, r0
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	d0d8      	beq.n	800f856 <_strtod_l+0x74e>
 800f8a4:	2f00      	cmp	r7, #0
 800f8a6:	dd08      	ble.n	800f8ba <_strtod_l+0x7b2>
 800f8a8:	4641      	mov	r1, r8
 800f8aa:	9805      	ldr	r0, [sp, #20]
 800f8ac:	463a      	mov	r2, r7
 800f8ae:	f003 f98d 	bl	8012bcc <__lshift>
 800f8b2:	4680      	mov	r8, r0
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	f43f ae46 	beq.w	800f546 <_strtod_l+0x43e>
 800f8ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f8bc:	9805      	ldr	r0, [sp, #20]
 800f8be:	464a      	mov	r2, r9
 800f8c0:	f003 fa0c 	bl	8012cdc <__mdiff>
 800f8c4:	4604      	mov	r4, r0
 800f8c6:	2800      	cmp	r0, #0
 800f8c8:	f43f ae3d 	beq.w	800f546 <_strtod_l+0x43e>
 800f8cc:	68c3      	ldr	r3, [r0, #12]
 800f8ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	60c3      	str	r3, [r0, #12]
 800f8d4:	4641      	mov	r1, r8
 800f8d6:	f003 f9e5 	bl	8012ca4 <__mcmp>
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	da46      	bge.n	800f96c <_strtod_l+0x864>
 800f8de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8e0:	ea53 030a 	orrs.w	r3, r3, sl
 800f8e4:	d16c      	bne.n	800f9c0 <_strtod_l+0x8b8>
 800f8e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d168      	bne.n	800f9c0 <_strtod_l+0x8b8>
 800f8ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f8f2:	0d1b      	lsrs	r3, r3, #20
 800f8f4:	051b      	lsls	r3, r3, #20
 800f8f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f8fa:	d961      	bls.n	800f9c0 <_strtod_l+0x8b8>
 800f8fc:	6963      	ldr	r3, [r4, #20]
 800f8fe:	b913      	cbnz	r3, 800f906 <_strtod_l+0x7fe>
 800f900:	6923      	ldr	r3, [r4, #16]
 800f902:	2b01      	cmp	r3, #1
 800f904:	dd5c      	ble.n	800f9c0 <_strtod_l+0x8b8>
 800f906:	4621      	mov	r1, r4
 800f908:	2201      	movs	r2, #1
 800f90a:	9805      	ldr	r0, [sp, #20]
 800f90c:	f003 f95e 	bl	8012bcc <__lshift>
 800f910:	4641      	mov	r1, r8
 800f912:	4604      	mov	r4, r0
 800f914:	f003 f9c6 	bl	8012ca4 <__mcmp>
 800f918:	2800      	cmp	r0, #0
 800f91a:	dd51      	ble.n	800f9c0 <_strtod_l+0x8b8>
 800f91c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f920:	9a08      	ldr	r2, [sp, #32]
 800f922:	0d1b      	lsrs	r3, r3, #20
 800f924:	051b      	lsls	r3, r3, #20
 800f926:	2a00      	cmp	r2, #0
 800f928:	d06b      	beq.n	800fa02 <_strtod_l+0x8fa>
 800f92a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f92e:	d868      	bhi.n	800fa02 <_strtod_l+0x8fa>
 800f930:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f934:	f67f ae9d 	bls.w	800f672 <_strtod_l+0x56a>
 800f938:	4b0a      	ldr	r3, [pc, #40]	@ (800f964 <_strtod_l+0x85c>)
 800f93a:	4650      	mov	r0, sl
 800f93c:	4659      	mov	r1, fp
 800f93e:	2200      	movs	r2, #0
 800f940:	f7f0 fe9a 	bl	8000678 <__aeabi_dmul>
 800f944:	4b08      	ldr	r3, [pc, #32]	@ (800f968 <_strtod_l+0x860>)
 800f946:	400b      	ands	r3, r1
 800f948:	4682      	mov	sl, r0
 800f94a:	468b      	mov	fp, r1
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	f47f ae05 	bne.w	800f55c <_strtod_l+0x454>
 800f952:	9a05      	ldr	r2, [sp, #20]
 800f954:	2322      	movs	r3, #34	@ 0x22
 800f956:	6013      	str	r3, [r2, #0]
 800f958:	e600      	b.n	800f55c <_strtod_l+0x454>
 800f95a:	bf00      	nop
 800f95c:	080175f0 	.word	0x080175f0
 800f960:	fffffc02 	.word	0xfffffc02
 800f964:	39500000 	.word	0x39500000
 800f968:	7ff00000 	.word	0x7ff00000
 800f96c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f970:	d165      	bne.n	800fa3e <_strtod_l+0x936>
 800f972:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f974:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f978:	b35a      	cbz	r2, 800f9d2 <_strtod_l+0x8ca>
 800f97a:	4a9f      	ldr	r2, [pc, #636]	@ (800fbf8 <_strtod_l+0xaf0>)
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d12b      	bne.n	800f9d8 <_strtod_l+0x8d0>
 800f980:	9b08      	ldr	r3, [sp, #32]
 800f982:	4651      	mov	r1, sl
 800f984:	b303      	cbz	r3, 800f9c8 <_strtod_l+0x8c0>
 800f986:	4b9d      	ldr	r3, [pc, #628]	@ (800fbfc <_strtod_l+0xaf4>)
 800f988:	465a      	mov	r2, fp
 800f98a:	4013      	ands	r3, r2
 800f98c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f990:	f04f 32ff 	mov.w	r2, #4294967295
 800f994:	d81b      	bhi.n	800f9ce <_strtod_l+0x8c6>
 800f996:	0d1b      	lsrs	r3, r3, #20
 800f998:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f99c:	fa02 f303 	lsl.w	r3, r2, r3
 800f9a0:	4299      	cmp	r1, r3
 800f9a2:	d119      	bne.n	800f9d8 <_strtod_l+0x8d0>
 800f9a4:	4b96      	ldr	r3, [pc, #600]	@ (800fc00 <_strtod_l+0xaf8>)
 800f9a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d102      	bne.n	800f9b2 <_strtod_l+0x8aa>
 800f9ac:	3101      	adds	r1, #1
 800f9ae:	f43f adca 	beq.w	800f546 <_strtod_l+0x43e>
 800f9b2:	4b92      	ldr	r3, [pc, #584]	@ (800fbfc <_strtod_l+0xaf4>)
 800f9b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f9b6:	401a      	ands	r2, r3
 800f9b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f9bc:	f04f 0a00 	mov.w	sl, #0
 800f9c0:	9b08      	ldr	r3, [sp, #32]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d1b8      	bne.n	800f938 <_strtod_l+0x830>
 800f9c6:	e5c9      	b.n	800f55c <_strtod_l+0x454>
 800f9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f9cc:	e7e8      	b.n	800f9a0 <_strtod_l+0x898>
 800f9ce:	4613      	mov	r3, r2
 800f9d0:	e7e6      	b.n	800f9a0 <_strtod_l+0x898>
 800f9d2:	ea53 030a 	orrs.w	r3, r3, sl
 800f9d6:	d0a1      	beq.n	800f91c <_strtod_l+0x814>
 800f9d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f9da:	b1db      	cbz	r3, 800fa14 <_strtod_l+0x90c>
 800f9dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f9de:	4213      	tst	r3, r2
 800f9e0:	d0ee      	beq.n	800f9c0 <_strtod_l+0x8b8>
 800f9e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9e4:	9a08      	ldr	r2, [sp, #32]
 800f9e6:	4650      	mov	r0, sl
 800f9e8:	4659      	mov	r1, fp
 800f9ea:	b1bb      	cbz	r3, 800fa1c <_strtod_l+0x914>
 800f9ec:	f7ff fb6e 	bl	800f0cc <sulp>
 800f9f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f9f4:	ec53 2b10 	vmov	r2, r3, d0
 800f9f8:	f7f0 fc88 	bl	800030c <__adddf3>
 800f9fc:	4682      	mov	sl, r0
 800f9fe:	468b      	mov	fp, r1
 800fa00:	e7de      	b.n	800f9c0 <_strtod_l+0x8b8>
 800fa02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fa06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fa0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fa0e:	f04f 3aff 	mov.w	sl, #4294967295
 800fa12:	e7d5      	b.n	800f9c0 <_strtod_l+0x8b8>
 800fa14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fa16:	ea13 0f0a 	tst.w	r3, sl
 800fa1a:	e7e1      	b.n	800f9e0 <_strtod_l+0x8d8>
 800fa1c:	f7ff fb56 	bl	800f0cc <sulp>
 800fa20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fa24:	ec53 2b10 	vmov	r2, r3, d0
 800fa28:	f7f0 fc6e 	bl	8000308 <__aeabi_dsub>
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	2300      	movs	r3, #0
 800fa30:	4682      	mov	sl, r0
 800fa32:	468b      	mov	fp, r1
 800fa34:	f7f1 f888 	bl	8000b48 <__aeabi_dcmpeq>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	d0c1      	beq.n	800f9c0 <_strtod_l+0x8b8>
 800fa3c:	e619      	b.n	800f672 <_strtod_l+0x56a>
 800fa3e:	4641      	mov	r1, r8
 800fa40:	4620      	mov	r0, r4
 800fa42:	f003 faa7 	bl	8012f94 <__ratio>
 800fa46:	ec57 6b10 	vmov	r6, r7, d0
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fa50:	4630      	mov	r0, r6
 800fa52:	4639      	mov	r1, r7
 800fa54:	f7f1 f88c 	bl	8000b70 <__aeabi_dcmple>
 800fa58:	2800      	cmp	r0, #0
 800fa5a:	d06f      	beq.n	800fb3c <_strtod_l+0xa34>
 800fa5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d17a      	bne.n	800fb58 <_strtod_l+0xa50>
 800fa62:	f1ba 0f00 	cmp.w	sl, #0
 800fa66:	d158      	bne.n	800fb1a <_strtod_l+0xa12>
 800fa68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d15a      	bne.n	800fb28 <_strtod_l+0xa20>
 800fa72:	4b64      	ldr	r3, [pc, #400]	@ (800fc04 <_strtod_l+0xafc>)
 800fa74:	2200      	movs	r2, #0
 800fa76:	4630      	mov	r0, r6
 800fa78:	4639      	mov	r1, r7
 800fa7a:	f7f1 f86f 	bl	8000b5c <__aeabi_dcmplt>
 800fa7e:	2800      	cmp	r0, #0
 800fa80:	d159      	bne.n	800fb36 <_strtod_l+0xa2e>
 800fa82:	4630      	mov	r0, r6
 800fa84:	4639      	mov	r1, r7
 800fa86:	4b60      	ldr	r3, [pc, #384]	@ (800fc08 <_strtod_l+0xb00>)
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f7f0 fdf5 	bl	8000678 <__aeabi_dmul>
 800fa8e:	4606      	mov	r6, r0
 800fa90:	460f      	mov	r7, r1
 800fa92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800fa96:	9606      	str	r6, [sp, #24]
 800fa98:	9307      	str	r3, [sp, #28]
 800fa9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fa9e:	4d57      	ldr	r5, [pc, #348]	@ (800fbfc <_strtod_l+0xaf4>)
 800faa0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800faa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800faa6:	401d      	ands	r5, r3
 800faa8:	4b58      	ldr	r3, [pc, #352]	@ (800fc0c <_strtod_l+0xb04>)
 800faaa:	429d      	cmp	r5, r3
 800faac:	f040 80b2 	bne.w	800fc14 <_strtod_l+0xb0c>
 800fab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fab2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fab6:	ec4b ab10 	vmov	d0, sl, fp
 800faba:	f003 f9a3 	bl	8012e04 <__ulp>
 800fabe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fac2:	ec51 0b10 	vmov	r0, r1, d0
 800fac6:	f7f0 fdd7 	bl	8000678 <__aeabi_dmul>
 800faca:	4652      	mov	r2, sl
 800facc:	465b      	mov	r3, fp
 800face:	f7f0 fc1d 	bl	800030c <__adddf3>
 800fad2:	460b      	mov	r3, r1
 800fad4:	4949      	ldr	r1, [pc, #292]	@ (800fbfc <_strtod_l+0xaf4>)
 800fad6:	4a4e      	ldr	r2, [pc, #312]	@ (800fc10 <_strtod_l+0xb08>)
 800fad8:	4019      	ands	r1, r3
 800fada:	4291      	cmp	r1, r2
 800fadc:	4682      	mov	sl, r0
 800fade:	d942      	bls.n	800fb66 <_strtod_l+0xa5e>
 800fae0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fae2:	4b47      	ldr	r3, [pc, #284]	@ (800fc00 <_strtod_l+0xaf8>)
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d103      	bne.n	800faf0 <_strtod_l+0x9e8>
 800fae8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800faea:	3301      	adds	r3, #1
 800faec:	f43f ad2b 	beq.w	800f546 <_strtod_l+0x43e>
 800faf0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fc00 <_strtod_l+0xaf8>
 800faf4:	f04f 3aff 	mov.w	sl, #4294967295
 800faf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fafa:	9805      	ldr	r0, [sp, #20]
 800fafc:	f002 fe4e 	bl	801279c <_Bfree>
 800fb00:	9805      	ldr	r0, [sp, #20]
 800fb02:	4649      	mov	r1, r9
 800fb04:	f002 fe4a 	bl	801279c <_Bfree>
 800fb08:	9805      	ldr	r0, [sp, #20]
 800fb0a:	4641      	mov	r1, r8
 800fb0c:	f002 fe46 	bl	801279c <_Bfree>
 800fb10:	9805      	ldr	r0, [sp, #20]
 800fb12:	4621      	mov	r1, r4
 800fb14:	f002 fe42 	bl	801279c <_Bfree>
 800fb18:	e618      	b.n	800f74c <_strtod_l+0x644>
 800fb1a:	f1ba 0f01 	cmp.w	sl, #1
 800fb1e:	d103      	bne.n	800fb28 <_strtod_l+0xa20>
 800fb20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	f43f ada5 	beq.w	800f672 <_strtod_l+0x56a>
 800fb28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fbd8 <_strtod_l+0xad0>
 800fb2c:	4f35      	ldr	r7, [pc, #212]	@ (800fc04 <_strtod_l+0xafc>)
 800fb2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fb32:	2600      	movs	r6, #0
 800fb34:	e7b1      	b.n	800fa9a <_strtod_l+0x992>
 800fb36:	4f34      	ldr	r7, [pc, #208]	@ (800fc08 <_strtod_l+0xb00>)
 800fb38:	2600      	movs	r6, #0
 800fb3a:	e7aa      	b.n	800fa92 <_strtod_l+0x98a>
 800fb3c:	4b32      	ldr	r3, [pc, #200]	@ (800fc08 <_strtod_l+0xb00>)
 800fb3e:	4630      	mov	r0, r6
 800fb40:	4639      	mov	r1, r7
 800fb42:	2200      	movs	r2, #0
 800fb44:	f7f0 fd98 	bl	8000678 <__aeabi_dmul>
 800fb48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb4a:	4606      	mov	r6, r0
 800fb4c:	460f      	mov	r7, r1
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d09f      	beq.n	800fa92 <_strtod_l+0x98a>
 800fb52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fb56:	e7a0      	b.n	800fa9a <_strtod_l+0x992>
 800fb58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fbe0 <_strtod_l+0xad8>
 800fb5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fb60:	ec57 6b17 	vmov	r6, r7, d7
 800fb64:	e799      	b.n	800fa9a <_strtod_l+0x992>
 800fb66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fb6a:	9b08      	ldr	r3, [sp, #32]
 800fb6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d1c1      	bne.n	800faf8 <_strtod_l+0x9f0>
 800fb74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fb78:	0d1b      	lsrs	r3, r3, #20
 800fb7a:	051b      	lsls	r3, r3, #20
 800fb7c:	429d      	cmp	r5, r3
 800fb7e:	d1bb      	bne.n	800faf8 <_strtod_l+0x9f0>
 800fb80:	4630      	mov	r0, r6
 800fb82:	4639      	mov	r1, r7
 800fb84:	f7f1 fa36 	bl	8000ff4 <__aeabi_d2lz>
 800fb88:	f7f0 fd48 	bl	800061c <__aeabi_l2d>
 800fb8c:	4602      	mov	r2, r0
 800fb8e:	460b      	mov	r3, r1
 800fb90:	4630      	mov	r0, r6
 800fb92:	4639      	mov	r1, r7
 800fb94:	f7f0 fbb8 	bl	8000308 <__aeabi_dsub>
 800fb98:	460b      	mov	r3, r1
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fba0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fba6:	ea46 060a 	orr.w	r6, r6, sl
 800fbaa:	431e      	orrs	r6, r3
 800fbac:	d06f      	beq.n	800fc8e <_strtod_l+0xb86>
 800fbae:	a30e      	add	r3, pc, #56	@ (adr r3, 800fbe8 <_strtod_l+0xae0>)
 800fbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb4:	f7f0 ffd2 	bl	8000b5c <__aeabi_dcmplt>
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	f47f accf 	bne.w	800f55c <_strtod_l+0x454>
 800fbbe:	a30c      	add	r3, pc, #48	@ (adr r3, 800fbf0 <_strtod_l+0xae8>)
 800fbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fbc8:	f7f0 ffe6 	bl	8000b98 <__aeabi_dcmpgt>
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	d093      	beq.n	800faf8 <_strtod_l+0x9f0>
 800fbd0:	e4c4      	b.n	800f55c <_strtod_l+0x454>
 800fbd2:	bf00      	nop
 800fbd4:	f3af 8000 	nop.w
 800fbd8:	00000000 	.word	0x00000000
 800fbdc:	bff00000 	.word	0xbff00000
 800fbe0:	00000000 	.word	0x00000000
 800fbe4:	3ff00000 	.word	0x3ff00000
 800fbe8:	94a03595 	.word	0x94a03595
 800fbec:	3fdfffff 	.word	0x3fdfffff
 800fbf0:	35afe535 	.word	0x35afe535
 800fbf4:	3fe00000 	.word	0x3fe00000
 800fbf8:	000fffff 	.word	0x000fffff
 800fbfc:	7ff00000 	.word	0x7ff00000
 800fc00:	7fefffff 	.word	0x7fefffff
 800fc04:	3ff00000 	.word	0x3ff00000
 800fc08:	3fe00000 	.word	0x3fe00000
 800fc0c:	7fe00000 	.word	0x7fe00000
 800fc10:	7c9fffff 	.word	0x7c9fffff
 800fc14:	9b08      	ldr	r3, [sp, #32]
 800fc16:	b323      	cbz	r3, 800fc62 <_strtod_l+0xb5a>
 800fc18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fc1c:	d821      	bhi.n	800fc62 <_strtod_l+0xb5a>
 800fc1e:	a328      	add	r3, pc, #160	@ (adr r3, 800fcc0 <_strtod_l+0xbb8>)
 800fc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc24:	4630      	mov	r0, r6
 800fc26:	4639      	mov	r1, r7
 800fc28:	f7f0 ffa2 	bl	8000b70 <__aeabi_dcmple>
 800fc2c:	b1a0      	cbz	r0, 800fc58 <_strtod_l+0xb50>
 800fc2e:	4639      	mov	r1, r7
 800fc30:	4630      	mov	r0, r6
 800fc32:	f7f0 fff9 	bl	8000c28 <__aeabi_d2uiz>
 800fc36:	2801      	cmp	r0, #1
 800fc38:	bf38      	it	cc
 800fc3a:	2001      	movcc	r0, #1
 800fc3c:	f7f0 fca2 	bl	8000584 <__aeabi_ui2d>
 800fc40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc42:	4606      	mov	r6, r0
 800fc44:	460f      	mov	r7, r1
 800fc46:	b9fb      	cbnz	r3, 800fc88 <_strtod_l+0xb80>
 800fc48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fc4c:	9014      	str	r0, [sp, #80]	@ 0x50
 800fc4e:	9315      	str	r3, [sp, #84]	@ 0x54
 800fc50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fc54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fc58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fc5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fc5e:	1b5b      	subs	r3, r3, r5
 800fc60:	9311      	str	r3, [sp, #68]	@ 0x44
 800fc62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fc66:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800fc6a:	f003 f8cb 	bl	8012e04 <__ulp>
 800fc6e:	4650      	mov	r0, sl
 800fc70:	ec53 2b10 	vmov	r2, r3, d0
 800fc74:	4659      	mov	r1, fp
 800fc76:	f7f0 fcff 	bl	8000678 <__aeabi_dmul>
 800fc7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fc7e:	f7f0 fb45 	bl	800030c <__adddf3>
 800fc82:	4682      	mov	sl, r0
 800fc84:	468b      	mov	fp, r1
 800fc86:	e770      	b.n	800fb6a <_strtod_l+0xa62>
 800fc88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fc8c:	e7e0      	b.n	800fc50 <_strtod_l+0xb48>
 800fc8e:	a30e      	add	r3, pc, #56	@ (adr r3, 800fcc8 <_strtod_l+0xbc0>)
 800fc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc94:	f7f0 ff62 	bl	8000b5c <__aeabi_dcmplt>
 800fc98:	e798      	b.n	800fbcc <_strtod_l+0xac4>
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fca0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fca2:	6013      	str	r3, [r2, #0]
 800fca4:	f7ff ba6d 	b.w	800f182 <_strtod_l+0x7a>
 800fca8:	2a65      	cmp	r2, #101	@ 0x65
 800fcaa:	f43f ab66 	beq.w	800f37a <_strtod_l+0x272>
 800fcae:	2a45      	cmp	r2, #69	@ 0x45
 800fcb0:	f43f ab63 	beq.w	800f37a <_strtod_l+0x272>
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	f7ff bb9e 	b.w	800f3f6 <_strtod_l+0x2ee>
 800fcba:	bf00      	nop
 800fcbc:	f3af 8000 	nop.w
 800fcc0:	ffc00000 	.word	0xffc00000
 800fcc4:	41dfffff 	.word	0x41dfffff
 800fcc8:	94a03595 	.word	0x94a03595
 800fccc:	3fcfffff 	.word	0x3fcfffff

0800fcd0 <_strtod_r>:
 800fcd0:	4b01      	ldr	r3, [pc, #4]	@ (800fcd8 <_strtod_r+0x8>)
 800fcd2:	f7ff ba19 	b.w	800f108 <_strtod_l>
 800fcd6:	bf00      	nop
 800fcd8:	20000048 	.word	0x20000048

0800fcdc <strtod>:
 800fcdc:	460a      	mov	r2, r1
 800fcde:	4601      	mov	r1, r0
 800fce0:	4802      	ldr	r0, [pc, #8]	@ (800fcec <strtod+0x10>)
 800fce2:	4b03      	ldr	r3, [pc, #12]	@ (800fcf0 <strtod+0x14>)
 800fce4:	6800      	ldr	r0, [r0, #0]
 800fce6:	f7ff ba0f 	b.w	800f108 <_strtod_l>
 800fcea:	bf00      	nop
 800fcec:	200001b4 	.word	0x200001b4
 800fcf0:	20000048 	.word	0x20000048

0800fcf4 <strtof>:
 800fcf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800fdb8 <strtof+0xc4>
 800fcfc:	4b29      	ldr	r3, [pc, #164]	@ (800fda4 <strtof+0xb0>)
 800fcfe:	460a      	mov	r2, r1
 800fd00:	ed2d 8b02 	vpush	{d8}
 800fd04:	4601      	mov	r1, r0
 800fd06:	f8d8 0000 	ldr.w	r0, [r8]
 800fd0a:	f7ff f9fd 	bl	800f108 <_strtod_l>
 800fd0e:	ec55 4b10 	vmov	r4, r5, d0
 800fd12:	4622      	mov	r2, r4
 800fd14:	462b      	mov	r3, r5
 800fd16:	4620      	mov	r0, r4
 800fd18:	4629      	mov	r1, r5
 800fd1a:	f7f0 ff47 	bl	8000bac <__aeabi_dcmpun>
 800fd1e:	b190      	cbz	r0, 800fd46 <strtof+0x52>
 800fd20:	2d00      	cmp	r5, #0
 800fd22:	4821      	ldr	r0, [pc, #132]	@ (800fda8 <strtof+0xb4>)
 800fd24:	da09      	bge.n	800fd3a <strtof+0x46>
 800fd26:	f001 fb0f 	bl	8011348 <nanf>
 800fd2a:	eeb1 8a40 	vneg.f32	s16, s0
 800fd2e:	eeb0 0a48 	vmov.f32	s0, s16
 800fd32:	ecbd 8b02 	vpop	{d8}
 800fd36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd3a:	ecbd 8b02 	vpop	{d8}
 800fd3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd42:	f001 bb01 	b.w	8011348 <nanf>
 800fd46:	4620      	mov	r0, r4
 800fd48:	4629      	mov	r1, r5
 800fd4a:	f7f0 ff8d 	bl	8000c68 <__aeabi_d2f>
 800fd4e:	ee08 0a10 	vmov	s16, r0
 800fd52:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800fdac <strtof+0xb8>
 800fd56:	eeb0 7ac8 	vabs.f32	s14, s16
 800fd5a:	eeb4 7a67 	vcmp.f32	s14, s15
 800fd5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd62:	dd11      	ble.n	800fd88 <strtof+0x94>
 800fd64:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800fd68:	4b11      	ldr	r3, [pc, #68]	@ (800fdb0 <strtof+0xbc>)
 800fd6a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd6e:	4620      	mov	r0, r4
 800fd70:	4639      	mov	r1, r7
 800fd72:	f7f0 ff1b 	bl	8000bac <__aeabi_dcmpun>
 800fd76:	b980      	cbnz	r0, 800fd9a <strtof+0xa6>
 800fd78:	4b0d      	ldr	r3, [pc, #52]	@ (800fdb0 <strtof+0xbc>)
 800fd7a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd7e:	4620      	mov	r0, r4
 800fd80:	4639      	mov	r1, r7
 800fd82:	f7f0 fef5 	bl	8000b70 <__aeabi_dcmple>
 800fd86:	b940      	cbnz	r0, 800fd9a <strtof+0xa6>
 800fd88:	ee18 3a10 	vmov	r3, s16
 800fd8c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fd90:	d1cd      	bne.n	800fd2e <strtof+0x3a>
 800fd92:	4b08      	ldr	r3, [pc, #32]	@ (800fdb4 <strtof+0xc0>)
 800fd94:	402b      	ands	r3, r5
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d0c9      	beq.n	800fd2e <strtof+0x3a>
 800fd9a:	f8d8 3000 	ldr.w	r3, [r8]
 800fd9e:	2222      	movs	r2, #34	@ 0x22
 800fda0:	601a      	str	r2, [r3, #0]
 800fda2:	e7c4      	b.n	800fd2e <strtof+0x3a>
 800fda4:	20000048 	.word	0x20000048
 800fda8:	08017a07 	.word	0x08017a07
 800fdac:	7f7fffff 	.word	0x7f7fffff
 800fdb0:	7fefffff 	.word	0x7fefffff
 800fdb4:	7ff00000 	.word	0x7ff00000
 800fdb8:	200001b4 	.word	0x200001b4

0800fdbc <_strtol_l.constprop.0>:
 800fdbc:	2b24      	cmp	r3, #36	@ 0x24
 800fdbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdc2:	4686      	mov	lr, r0
 800fdc4:	4690      	mov	r8, r2
 800fdc6:	d801      	bhi.n	800fdcc <_strtol_l.constprop.0+0x10>
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d106      	bne.n	800fdda <_strtol_l.constprop.0+0x1e>
 800fdcc:	f001 fa72 	bl	80112b4 <__errno>
 800fdd0:	2316      	movs	r3, #22
 800fdd2:	6003      	str	r3, [r0, #0]
 800fdd4:	2000      	movs	r0, #0
 800fdd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdda:	4834      	ldr	r0, [pc, #208]	@ (800feac <_strtol_l.constprop.0+0xf0>)
 800fddc:	460d      	mov	r5, r1
 800fdde:	462a      	mov	r2, r5
 800fde0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fde4:	5d06      	ldrb	r6, [r0, r4]
 800fde6:	f016 0608 	ands.w	r6, r6, #8
 800fdea:	d1f8      	bne.n	800fdde <_strtol_l.constprop.0+0x22>
 800fdec:	2c2d      	cmp	r4, #45	@ 0x2d
 800fdee:	d12d      	bne.n	800fe4c <_strtol_l.constprop.0+0x90>
 800fdf0:	782c      	ldrb	r4, [r5, #0]
 800fdf2:	2601      	movs	r6, #1
 800fdf4:	1c95      	adds	r5, r2, #2
 800fdf6:	f033 0210 	bics.w	r2, r3, #16
 800fdfa:	d109      	bne.n	800fe10 <_strtol_l.constprop.0+0x54>
 800fdfc:	2c30      	cmp	r4, #48	@ 0x30
 800fdfe:	d12a      	bne.n	800fe56 <_strtol_l.constprop.0+0x9a>
 800fe00:	782a      	ldrb	r2, [r5, #0]
 800fe02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fe06:	2a58      	cmp	r2, #88	@ 0x58
 800fe08:	d125      	bne.n	800fe56 <_strtol_l.constprop.0+0x9a>
 800fe0a:	786c      	ldrb	r4, [r5, #1]
 800fe0c:	2310      	movs	r3, #16
 800fe0e:	3502      	adds	r5, #2
 800fe10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fe14:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fe18:	2200      	movs	r2, #0
 800fe1a:	fbbc f9f3 	udiv	r9, ip, r3
 800fe1e:	4610      	mov	r0, r2
 800fe20:	fb03 ca19 	mls	sl, r3, r9, ip
 800fe24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fe28:	2f09      	cmp	r7, #9
 800fe2a:	d81b      	bhi.n	800fe64 <_strtol_l.constprop.0+0xa8>
 800fe2c:	463c      	mov	r4, r7
 800fe2e:	42a3      	cmp	r3, r4
 800fe30:	dd27      	ble.n	800fe82 <_strtol_l.constprop.0+0xc6>
 800fe32:	1c57      	adds	r7, r2, #1
 800fe34:	d007      	beq.n	800fe46 <_strtol_l.constprop.0+0x8a>
 800fe36:	4581      	cmp	r9, r0
 800fe38:	d320      	bcc.n	800fe7c <_strtol_l.constprop.0+0xc0>
 800fe3a:	d101      	bne.n	800fe40 <_strtol_l.constprop.0+0x84>
 800fe3c:	45a2      	cmp	sl, r4
 800fe3e:	db1d      	blt.n	800fe7c <_strtol_l.constprop.0+0xc0>
 800fe40:	fb00 4003 	mla	r0, r0, r3, r4
 800fe44:	2201      	movs	r2, #1
 800fe46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe4a:	e7eb      	b.n	800fe24 <_strtol_l.constprop.0+0x68>
 800fe4c:	2c2b      	cmp	r4, #43	@ 0x2b
 800fe4e:	bf04      	itt	eq
 800fe50:	782c      	ldrbeq	r4, [r5, #0]
 800fe52:	1c95      	addeq	r5, r2, #2
 800fe54:	e7cf      	b.n	800fdf6 <_strtol_l.constprop.0+0x3a>
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d1da      	bne.n	800fe10 <_strtol_l.constprop.0+0x54>
 800fe5a:	2c30      	cmp	r4, #48	@ 0x30
 800fe5c:	bf0c      	ite	eq
 800fe5e:	2308      	moveq	r3, #8
 800fe60:	230a      	movne	r3, #10
 800fe62:	e7d5      	b.n	800fe10 <_strtol_l.constprop.0+0x54>
 800fe64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fe68:	2f19      	cmp	r7, #25
 800fe6a:	d801      	bhi.n	800fe70 <_strtol_l.constprop.0+0xb4>
 800fe6c:	3c37      	subs	r4, #55	@ 0x37
 800fe6e:	e7de      	b.n	800fe2e <_strtol_l.constprop.0+0x72>
 800fe70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fe74:	2f19      	cmp	r7, #25
 800fe76:	d804      	bhi.n	800fe82 <_strtol_l.constprop.0+0xc6>
 800fe78:	3c57      	subs	r4, #87	@ 0x57
 800fe7a:	e7d8      	b.n	800fe2e <_strtol_l.constprop.0+0x72>
 800fe7c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe80:	e7e1      	b.n	800fe46 <_strtol_l.constprop.0+0x8a>
 800fe82:	1c53      	adds	r3, r2, #1
 800fe84:	d108      	bne.n	800fe98 <_strtol_l.constprop.0+0xdc>
 800fe86:	2322      	movs	r3, #34	@ 0x22
 800fe88:	f8ce 3000 	str.w	r3, [lr]
 800fe8c:	4660      	mov	r0, ip
 800fe8e:	f1b8 0f00 	cmp.w	r8, #0
 800fe92:	d0a0      	beq.n	800fdd6 <_strtol_l.constprop.0+0x1a>
 800fe94:	1e69      	subs	r1, r5, #1
 800fe96:	e006      	b.n	800fea6 <_strtol_l.constprop.0+0xea>
 800fe98:	b106      	cbz	r6, 800fe9c <_strtol_l.constprop.0+0xe0>
 800fe9a:	4240      	negs	r0, r0
 800fe9c:	f1b8 0f00 	cmp.w	r8, #0
 800fea0:	d099      	beq.n	800fdd6 <_strtol_l.constprop.0+0x1a>
 800fea2:	2a00      	cmp	r2, #0
 800fea4:	d1f6      	bne.n	800fe94 <_strtol_l.constprop.0+0xd8>
 800fea6:	f8c8 1000 	str.w	r1, [r8]
 800feaa:	e794      	b.n	800fdd6 <_strtol_l.constprop.0+0x1a>
 800feac:	08017619 	.word	0x08017619

0800feb0 <_strtol_r>:
 800feb0:	f7ff bf84 	b.w	800fdbc <_strtol_l.constprop.0>

0800feb4 <strtol>:
 800feb4:	4613      	mov	r3, r2
 800feb6:	460a      	mov	r2, r1
 800feb8:	4601      	mov	r1, r0
 800feba:	4802      	ldr	r0, [pc, #8]	@ (800fec4 <strtol+0x10>)
 800febc:	6800      	ldr	r0, [r0, #0]
 800febe:	f7ff bf7d 	b.w	800fdbc <_strtol_l.constprop.0>
 800fec2:	bf00      	nop
 800fec4:	200001b4 	.word	0x200001b4

0800fec8 <__cvt>:
 800fec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fecc:	ec57 6b10 	vmov	r6, r7, d0
 800fed0:	2f00      	cmp	r7, #0
 800fed2:	460c      	mov	r4, r1
 800fed4:	4619      	mov	r1, r3
 800fed6:	463b      	mov	r3, r7
 800fed8:	bfbb      	ittet	lt
 800feda:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fede:	461f      	movlt	r7, r3
 800fee0:	2300      	movge	r3, #0
 800fee2:	232d      	movlt	r3, #45	@ 0x2d
 800fee4:	700b      	strb	r3, [r1, #0]
 800fee6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fee8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800feec:	4691      	mov	r9, r2
 800feee:	f023 0820 	bic.w	r8, r3, #32
 800fef2:	bfbc      	itt	lt
 800fef4:	4632      	movlt	r2, r6
 800fef6:	4616      	movlt	r6, r2
 800fef8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fefc:	d005      	beq.n	800ff0a <__cvt+0x42>
 800fefe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ff02:	d100      	bne.n	800ff06 <__cvt+0x3e>
 800ff04:	3401      	adds	r4, #1
 800ff06:	2102      	movs	r1, #2
 800ff08:	e000      	b.n	800ff0c <__cvt+0x44>
 800ff0a:	2103      	movs	r1, #3
 800ff0c:	ab03      	add	r3, sp, #12
 800ff0e:	9301      	str	r3, [sp, #4]
 800ff10:	ab02      	add	r3, sp, #8
 800ff12:	9300      	str	r3, [sp, #0]
 800ff14:	ec47 6b10 	vmov	d0, r6, r7
 800ff18:	4653      	mov	r3, sl
 800ff1a:	4622      	mov	r2, r4
 800ff1c:	f001 faa4 	bl	8011468 <_dtoa_r>
 800ff20:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ff24:	4605      	mov	r5, r0
 800ff26:	d119      	bne.n	800ff5c <__cvt+0x94>
 800ff28:	f019 0f01 	tst.w	r9, #1
 800ff2c:	d00e      	beq.n	800ff4c <__cvt+0x84>
 800ff2e:	eb00 0904 	add.w	r9, r0, r4
 800ff32:	2200      	movs	r2, #0
 800ff34:	2300      	movs	r3, #0
 800ff36:	4630      	mov	r0, r6
 800ff38:	4639      	mov	r1, r7
 800ff3a:	f7f0 fe05 	bl	8000b48 <__aeabi_dcmpeq>
 800ff3e:	b108      	cbz	r0, 800ff44 <__cvt+0x7c>
 800ff40:	f8cd 900c 	str.w	r9, [sp, #12]
 800ff44:	2230      	movs	r2, #48	@ 0x30
 800ff46:	9b03      	ldr	r3, [sp, #12]
 800ff48:	454b      	cmp	r3, r9
 800ff4a:	d31e      	bcc.n	800ff8a <__cvt+0xc2>
 800ff4c:	9b03      	ldr	r3, [sp, #12]
 800ff4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff50:	1b5b      	subs	r3, r3, r5
 800ff52:	4628      	mov	r0, r5
 800ff54:	6013      	str	r3, [r2, #0]
 800ff56:	b004      	add	sp, #16
 800ff58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ff60:	eb00 0904 	add.w	r9, r0, r4
 800ff64:	d1e5      	bne.n	800ff32 <__cvt+0x6a>
 800ff66:	7803      	ldrb	r3, [r0, #0]
 800ff68:	2b30      	cmp	r3, #48	@ 0x30
 800ff6a:	d10a      	bne.n	800ff82 <__cvt+0xba>
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	2300      	movs	r3, #0
 800ff70:	4630      	mov	r0, r6
 800ff72:	4639      	mov	r1, r7
 800ff74:	f7f0 fde8 	bl	8000b48 <__aeabi_dcmpeq>
 800ff78:	b918      	cbnz	r0, 800ff82 <__cvt+0xba>
 800ff7a:	f1c4 0401 	rsb	r4, r4, #1
 800ff7e:	f8ca 4000 	str.w	r4, [sl]
 800ff82:	f8da 3000 	ldr.w	r3, [sl]
 800ff86:	4499      	add	r9, r3
 800ff88:	e7d3      	b.n	800ff32 <__cvt+0x6a>
 800ff8a:	1c59      	adds	r1, r3, #1
 800ff8c:	9103      	str	r1, [sp, #12]
 800ff8e:	701a      	strb	r2, [r3, #0]
 800ff90:	e7d9      	b.n	800ff46 <__cvt+0x7e>

0800ff92 <__exponent>:
 800ff92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff94:	2900      	cmp	r1, #0
 800ff96:	bfba      	itte	lt
 800ff98:	4249      	neglt	r1, r1
 800ff9a:	232d      	movlt	r3, #45	@ 0x2d
 800ff9c:	232b      	movge	r3, #43	@ 0x2b
 800ff9e:	2909      	cmp	r1, #9
 800ffa0:	7002      	strb	r2, [r0, #0]
 800ffa2:	7043      	strb	r3, [r0, #1]
 800ffa4:	dd29      	ble.n	800fffa <__exponent+0x68>
 800ffa6:	f10d 0307 	add.w	r3, sp, #7
 800ffaa:	461d      	mov	r5, r3
 800ffac:	270a      	movs	r7, #10
 800ffae:	461a      	mov	r2, r3
 800ffb0:	fbb1 f6f7 	udiv	r6, r1, r7
 800ffb4:	fb07 1416 	mls	r4, r7, r6, r1
 800ffb8:	3430      	adds	r4, #48	@ 0x30
 800ffba:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ffbe:	460c      	mov	r4, r1
 800ffc0:	2c63      	cmp	r4, #99	@ 0x63
 800ffc2:	f103 33ff 	add.w	r3, r3, #4294967295
 800ffc6:	4631      	mov	r1, r6
 800ffc8:	dcf1      	bgt.n	800ffae <__exponent+0x1c>
 800ffca:	3130      	adds	r1, #48	@ 0x30
 800ffcc:	1e94      	subs	r4, r2, #2
 800ffce:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ffd2:	1c41      	adds	r1, r0, #1
 800ffd4:	4623      	mov	r3, r4
 800ffd6:	42ab      	cmp	r3, r5
 800ffd8:	d30a      	bcc.n	800fff0 <__exponent+0x5e>
 800ffda:	f10d 0309 	add.w	r3, sp, #9
 800ffde:	1a9b      	subs	r3, r3, r2
 800ffe0:	42ac      	cmp	r4, r5
 800ffe2:	bf88      	it	hi
 800ffe4:	2300      	movhi	r3, #0
 800ffe6:	3302      	adds	r3, #2
 800ffe8:	4403      	add	r3, r0
 800ffea:	1a18      	subs	r0, r3, r0
 800ffec:	b003      	add	sp, #12
 800ffee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fff0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fff4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fff8:	e7ed      	b.n	800ffd6 <__exponent+0x44>
 800fffa:	2330      	movs	r3, #48	@ 0x30
 800fffc:	3130      	adds	r1, #48	@ 0x30
 800fffe:	7083      	strb	r3, [r0, #2]
 8010000:	70c1      	strb	r1, [r0, #3]
 8010002:	1d03      	adds	r3, r0, #4
 8010004:	e7f1      	b.n	800ffea <__exponent+0x58>
	...

08010008 <_printf_float>:
 8010008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801000c:	b08d      	sub	sp, #52	@ 0x34
 801000e:	460c      	mov	r4, r1
 8010010:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010014:	4616      	mov	r6, r2
 8010016:	461f      	mov	r7, r3
 8010018:	4605      	mov	r5, r0
 801001a:	f001 f89b 	bl	8011154 <_localeconv_r>
 801001e:	6803      	ldr	r3, [r0, #0]
 8010020:	9304      	str	r3, [sp, #16]
 8010022:	4618      	mov	r0, r3
 8010024:	f7f0 f964 	bl	80002f0 <strlen>
 8010028:	2300      	movs	r3, #0
 801002a:	930a      	str	r3, [sp, #40]	@ 0x28
 801002c:	f8d8 3000 	ldr.w	r3, [r8]
 8010030:	9005      	str	r0, [sp, #20]
 8010032:	3307      	adds	r3, #7
 8010034:	f023 0307 	bic.w	r3, r3, #7
 8010038:	f103 0208 	add.w	r2, r3, #8
 801003c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010040:	f8d4 b000 	ldr.w	fp, [r4]
 8010044:	f8c8 2000 	str.w	r2, [r8]
 8010048:	e9d3 8900 	ldrd	r8, r9, [r3]
 801004c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010050:	9307      	str	r3, [sp, #28]
 8010052:	f8cd 8018 	str.w	r8, [sp, #24]
 8010056:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801005a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801005e:	4b9c      	ldr	r3, [pc, #624]	@ (80102d0 <_printf_float+0x2c8>)
 8010060:	f04f 32ff 	mov.w	r2, #4294967295
 8010064:	f7f0 fda2 	bl	8000bac <__aeabi_dcmpun>
 8010068:	bb70      	cbnz	r0, 80100c8 <_printf_float+0xc0>
 801006a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801006e:	4b98      	ldr	r3, [pc, #608]	@ (80102d0 <_printf_float+0x2c8>)
 8010070:	f04f 32ff 	mov.w	r2, #4294967295
 8010074:	f7f0 fd7c 	bl	8000b70 <__aeabi_dcmple>
 8010078:	bb30      	cbnz	r0, 80100c8 <_printf_float+0xc0>
 801007a:	2200      	movs	r2, #0
 801007c:	2300      	movs	r3, #0
 801007e:	4640      	mov	r0, r8
 8010080:	4649      	mov	r1, r9
 8010082:	f7f0 fd6b 	bl	8000b5c <__aeabi_dcmplt>
 8010086:	b110      	cbz	r0, 801008e <_printf_float+0x86>
 8010088:	232d      	movs	r3, #45	@ 0x2d
 801008a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801008e:	4a91      	ldr	r2, [pc, #580]	@ (80102d4 <_printf_float+0x2cc>)
 8010090:	4b91      	ldr	r3, [pc, #580]	@ (80102d8 <_printf_float+0x2d0>)
 8010092:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010096:	bf94      	ite	ls
 8010098:	4690      	movls	r8, r2
 801009a:	4698      	movhi	r8, r3
 801009c:	2303      	movs	r3, #3
 801009e:	6123      	str	r3, [r4, #16]
 80100a0:	f02b 0304 	bic.w	r3, fp, #4
 80100a4:	6023      	str	r3, [r4, #0]
 80100a6:	f04f 0900 	mov.w	r9, #0
 80100aa:	9700      	str	r7, [sp, #0]
 80100ac:	4633      	mov	r3, r6
 80100ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80100b0:	4621      	mov	r1, r4
 80100b2:	4628      	mov	r0, r5
 80100b4:	f000 f9d2 	bl	801045c <_printf_common>
 80100b8:	3001      	adds	r0, #1
 80100ba:	f040 808d 	bne.w	80101d8 <_printf_float+0x1d0>
 80100be:	f04f 30ff 	mov.w	r0, #4294967295
 80100c2:	b00d      	add	sp, #52	@ 0x34
 80100c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c8:	4642      	mov	r2, r8
 80100ca:	464b      	mov	r3, r9
 80100cc:	4640      	mov	r0, r8
 80100ce:	4649      	mov	r1, r9
 80100d0:	f7f0 fd6c 	bl	8000bac <__aeabi_dcmpun>
 80100d4:	b140      	cbz	r0, 80100e8 <_printf_float+0xe0>
 80100d6:	464b      	mov	r3, r9
 80100d8:	2b00      	cmp	r3, #0
 80100da:	bfbc      	itt	lt
 80100dc:	232d      	movlt	r3, #45	@ 0x2d
 80100de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80100e2:	4a7e      	ldr	r2, [pc, #504]	@ (80102dc <_printf_float+0x2d4>)
 80100e4:	4b7e      	ldr	r3, [pc, #504]	@ (80102e0 <_printf_float+0x2d8>)
 80100e6:	e7d4      	b.n	8010092 <_printf_float+0x8a>
 80100e8:	6863      	ldr	r3, [r4, #4]
 80100ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80100ee:	9206      	str	r2, [sp, #24]
 80100f0:	1c5a      	adds	r2, r3, #1
 80100f2:	d13b      	bne.n	801016c <_printf_float+0x164>
 80100f4:	2306      	movs	r3, #6
 80100f6:	6063      	str	r3, [r4, #4]
 80100f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80100fc:	2300      	movs	r3, #0
 80100fe:	6022      	str	r2, [r4, #0]
 8010100:	9303      	str	r3, [sp, #12]
 8010102:	ab0a      	add	r3, sp, #40	@ 0x28
 8010104:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010108:	ab09      	add	r3, sp, #36	@ 0x24
 801010a:	9300      	str	r3, [sp, #0]
 801010c:	6861      	ldr	r1, [r4, #4]
 801010e:	ec49 8b10 	vmov	d0, r8, r9
 8010112:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010116:	4628      	mov	r0, r5
 8010118:	f7ff fed6 	bl	800fec8 <__cvt>
 801011c:	9b06      	ldr	r3, [sp, #24]
 801011e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010120:	2b47      	cmp	r3, #71	@ 0x47
 8010122:	4680      	mov	r8, r0
 8010124:	d129      	bne.n	801017a <_printf_float+0x172>
 8010126:	1cc8      	adds	r0, r1, #3
 8010128:	db02      	blt.n	8010130 <_printf_float+0x128>
 801012a:	6863      	ldr	r3, [r4, #4]
 801012c:	4299      	cmp	r1, r3
 801012e:	dd41      	ble.n	80101b4 <_printf_float+0x1ac>
 8010130:	f1aa 0a02 	sub.w	sl, sl, #2
 8010134:	fa5f fa8a 	uxtb.w	sl, sl
 8010138:	3901      	subs	r1, #1
 801013a:	4652      	mov	r2, sl
 801013c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010140:	9109      	str	r1, [sp, #36]	@ 0x24
 8010142:	f7ff ff26 	bl	800ff92 <__exponent>
 8010146:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010148:	1813      	adds	r3, r2, r0
 801014a:	2a01      	cmp	r2, #1
 801014c:	4681      	mov	r9, r0
 801014e:	6123      	str	r3, [r4, #16]
 8010150:	dc02      	bgt.n	8010158 <_printf_float+0x150>
 8010152:	6822      	ldr	r2, [r4, #0]
 8010154:	07d2      	lsls	r2, r2, #31
 8010156:	d501      	bpl.n	801015c <_printf_float+0x154>
 8010158:	3301      	adds	r3, #1
 801015a:	6123      	str	r3, [r4, #16]
 801015c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010160:	2b00      	cmp	r3, #0
 8010162:	d0a2      	beq.n	80100aa <_printf_float+0xa2>
 8010164:	232d      	movs	r3, #45	@ 0x2d
 8010166:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801016a:	e79e      	b.n	80100aa <_printf_float+0xa2>
 801016c:	9a06      	ldr	r2, [sp, #24]
 801016e:	2a47      	cmp	r2, #71	@ 0x47
 8010170:	d1c2      	bne.n	80100f8 <_printf_float+0xf0>
 8010172:	2b00      	cmp	r3, #0
 8010174:	d1c0      	bne.n	80100f8 <_printf_float+0xf0>
 8010176:	2301      	movs	r3, #1
 8010178:	e7bd      	b.n	80100f6 <_printf_float+0xee>
 801017a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801017e:	d9db      	bls.n	8010138 <_printf_float+0x130>
 8010180:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010184:	d118      	bne.n	80101b8 <_printf_float+0x1b0>
 8010186:	2900      	cmp	r1, #0
 8010188:	6863      	ldr	r3, [r4, #4]
 801018a:	dd0b      	ble.n	80101a4 <_printf_float+0x19c>
 801018c:	6121      	str	r1, [r4, #16]
 801018e:	b913      	cbnz	r3, 8010196 <_printf_float+0x18e>
 8010190:	6822      	ldr	r2, [r4, #0]
 8010192:	07d0      	lsls	r0, r2, #31
 8010194:	d502      	bpl.n	801019c <_printf_float+0x194>
 8010196:	3301      	adds	r3, #1
 8010198:	440b      	add	r3, r1
 801019a:	6123      	str	r3, [r4, #16]
 801019c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801019e:	f04f 0900 	mov.w	r9, #0
 80101a2:	e7db      	b.n	801015c <_printf_float+0x154>
 80101a4:	b913      	cbnz	r3, 80101ac <_printf_float+0x1a4>
 80101a6:	6822      	ldr	r2, [r4, #0]
 80101a8:	07d2      	lsls	r2, r2, #31
 80101aa:	d501      	bpl.n	80101b0 <_printf_float+0x1a8>
 80101ac:	3302      	adds	r3, #2
 80101ae:	e7f4      	b.n	801019a <_printf_float+0x192>
 80101b0:	2301      	movs	r3, #1
 80101b2:	e7f2      	b.n	801019a <_printf_float+0x192>
 80101b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80101b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101ba:	4299      	cmp	r1, r3
 80101bc:	db05      	blt.n	80101ca <_printf_float+0x1c2>
 80101be:	6823      	ldr	r3, [r4, #0]
 80101c0:	6121      	str	r1, [r4, #16]
 80101c2:	07d8      	lsls	r0, r3, #31
 80101c4:	d5ea      	bpl.n	801019c <_printf_float+0x194>
 80101c6:	1c4b      	adds	r3, r1, #1
 80101c8:	e7e7      	b.n	801019a <_printf_float+0x192>
 80101ca:	2900      	cmp	r1, #0
 80101cc:	bfd4      	ite	le
 80101ce:	f1c1 0202 	rsble	r2, r1, #2
 80101d2:	2201      	movgt	r2, #1
 80101d4:	4413      	add	r3, r2
 80101d6:	e7e0      	b.n	801019a <_printf_float+0x192>
 80101d8:	6823      	ldr	r3, [r4, #0]
 80101da:	055a      	lsls	r2, r3, #21
 80101dc:	d407      	bmi.n	80101ee <_printf_float+0x1e6>
 80101de:	6923      	ldr	r3, [r4, #16]
 80101e0:	4642      	mov	r2, r8
 80101e2:	4631      	mov	r1, r6
 80101e4:	4628      	mov	r0, r5
 80101e6:	47b8      	blx	r7
 80101e8:	3001      	adds	r0, #1
 80101ea:	d12b      	bne.n	8010244 <_printf_float+0x23c>
 80101ec:	e767      	b.n	80100be <_printf_float+0xb6>
 80101ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80101f2:	f240 80dd 	bls.w	80103b0 <_printf_float+0x3a8>
 80101f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80101fa:	2200      	movs	r2, #0
 80101fc:	2300      	movs	r3, #0
 80101fe:	f7f0 fca3 	bl	8000b48 <__aeabi_dcmpeq>
 8010202:	2800      	cmp	r0, #0
 8010204:	d033      	beq.n	801026e <_printf_float+0x266>
 8010206:	4a37      	ldr	r2, [pc, #220]	@ (80102e4 <_printf_float+0x2dc>)
 8010208:	2301      	movs	r3, #1
 801020a:	4631      	mov	r1, r6
 801020c:	4628      	mov	r0, r5
 801020e:	47b8      	blx	r7
 8010210:	3001      	adds	r0, #1
 8010212:	f43f af54 	beq.w	80100be <_printf_float+0xb6>
 8010216:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801021a:	4543      	cmp	r3, r8
 801021c:	db02      	blt.n	8010224 <_printf_float+0x21c>
 801021e:	6823      	ldr	r3, [r4, #0]
 8010220:	07d8      	lsls	r0, r3, #31
 8010222:	d50f      	bpl.n	8010244 <_printf_float+0x23c>
 8010224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010228:	4631      	mov	r1, r6
 801022a:	4628      	mov	r0, r5
 801022c:	47b8      	blx	r7
 801022e:	3001      	adds	r0, #1
 8010230:	f43f af45 	beq.w	80100be <_printf_float+0xb6>
 8010234:	f04f 0900 	mov.w	r9, #0
 8010238:	f108 38ff 	add.w	r8, r8, #4294967295
 801023c:	f104 0a1a 	add.w	sl, r4, #26
 8010240:	45c8      	cmp	r8, r9
 8010242:	dc09      	bgt.n	8010258 <_printf_float+0x250>
 8010244:	6823      	ldr	r3, [r4, #0]
 8010246:	079b      	lsls	r3, r3, #30
 8010248:	f100 8103 	bmi.w	8010452 <_printf_float+0x44a>
 801024c:	68e0      	ldr	r0, [r4, #12]
 801024e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010250:	4298      	cmp	r0, r3
 8010252:	bfb8      	it	lt
 8010254:	4618      	movlt	r0, r3
 8010256:	e734      	b.n	80100c2 <_printf_float+0xba>
 8010258:	2301      	movs	r3, #1
 801025a:	4652      	mov	r2, sl
 801025c:	4631      	mov	r1, r6
 801025e:	4628      	mov	r0, r5
 8010260:	47b8      	blx	r7
 8010262:	3001      	adds	r0, #1
 8010264:	f43f af2b 	beq.w	80100be <_printf_float+0xb6>
 8010268:	f109 0901 	add.w	r9, r9, #1
 801026c:	e7e8      	b.n	8010240 <_printf_float+0x238>
 801026e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010270:	2b00      	cmp	r3, #0
 8010272:	dc39      	bgt.n	80102e8 <_printf_float+0x2e0>
 8010274:	4a1b      	ldr	r2, [pc, #108]	@ (80102e4 <_printf_float+0x2dc>)
 8010276:	2301      	movs	r3, #1
 8010278:	4631      	mov	r1, r6
 801027a:	4628      	mov	r0, r5
 801027c:	47b8      	blx	r7
 801027e:	3001      	adds	r0, #1
 8010280:	f43f af1d 	beq.w	80100be <_printf_float+0xb6>
 8010284:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010288:	ea59 0303 	orrs.w	r3, r9, r3
 801028c:	d102      	bne.n	8010294 <_printf_float+0x28c>
 801028e:	6823      	ldr	r3, [r4, #0]
 8010290:	07d9      	lsls	r1, r3, #31
 8010292:	d5d7      	bpl.n	8010244 <_printf_float+0x23c>
 8010294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010298:	4631      	mov	r1, r6
 801029a:	4628      	mov	r0, r5
 801029c:	47b8      	blx	r7
 801029e:	3001      	adds	r0, #1
 80102a0:	f43f af0d 	beq.w	80100be <_printf_float+0xb6>
 80102a4:	f04f 0a00 	mov.w	sl, #0
 80102a8:	f104 0b1a 	add.w	fp, r4, #26
 80102ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102ae:	425b      	negs	r3, r3
 80102b0:	4553      	cmp	r3, sl
 80102b2:	dc01      	bgt.n	80102b8 <_printf_float+0x2b0>
 80102b4:	464b      	mov	r3, r9
 80102b6:	e793      	b.n	80101e0 <_printf_float+0x1d8>
 80102b8:	2301      	movs	r3, #1
 80102ba:	465a      	mov	r2, fp
 80102bc:	4631      	mov	r1, r6
 80102be:	4628      	mov	r0, r5
 80102c0:	47b8      	blx	r7
 80102c2:	3001      	adds	r0, #1
 80102c4:	f43f aefb 	beq.w	80100be <_printf_float+0xb6>
 80102c8:	f10a 0a01 	add.w	sl, sl, #1
 80102cc:	e7ee      	b.n	80102ac <_printf_float+0x2a4>
 80102ce:	bf00      	nop
 80102d0:	7fefffff 	.word	0x7fefffff
 80102d4:	08017719 	.word	0x08017719
 80102d8:	0801771d 	.word	0x0801771d
 80102dc:	08017721 	.word	0x08017721
 80102e0:	08017725 	.word	0x08017725
 80102e4:	080179c7 	.word	0x080179c7
 80102e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80102ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80102ee:	4553      	cmp	r3, sl
 80102f0:	bfa8      	it	ge
 80102f2:	4653      	movge	r3, sl
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	4699      	mov	r9, r3
 80102f8:	dc36      	bgt.n	8010368 <_printf_float+0x360>
 80102fa:	f04f 0b00 	mov.w	fp, #0
 80102fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010302:	f104 021a 	add.w	r2, r4, #26
 8010306:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010308:	9306      	str	r3, [sp, #24]
 801030a:	eba3 0309 	sub.w	r3, r3, r9
 801030e:	455b      	cmp	r3, fp
 8010310:	dc31      	bgt.n	8010376 <_printf_float+0x36e>
 8010312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010314:	459a      	cmp	sl, r3
 8010316:	dc3a      	bgt.n	801038e <_printf_float+0x386>
 8010318:	6823      	ldr	r3, [r4, #0]
 801031a:	07da      	lsls	r2, r3, #31
 801031c:	d437      	bmi.n	801038e <_printf_float+0x386>
 801031e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010320:	ebaa 0903 	sub.w	r9, sl, r3
 8010324:	9b06      	ldr	r3, [sp, #24]
 8010326:	ebaa 0303 	sub.w	r3, sl, r3
 801032a:	4599      	cmp	r9, r3
 801032c:	bfa8      	it	ge
 801032e:	4699      	movge	r9, r3
 8010330:	f1b9 0f00 	cmp.w	r9, #0
 8010334:	dc33      	bgt.n	801039e <_printf_float+0x396>
 8010336:	f04f 0800 	mov.w	r8, #0
 801033a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801033e:	f104 0b1a 	add.w	fp, r4, #26
 8010342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010344:	ebaa 0303 	sub.w	r3, sl, r3
 8010348:	eba3 0309 	sub.w	r3, r3, r9
 801034c:	4543      	cmp	r3, r8
 801034e:	f77f af79 	ble.w	8010244 <_printf_float+0x23c>
 8010352:	2301      	movs	r3, #1
 8010354:	465a      	mov	r2, fp
 8010356:	4631      	mov	r1, r6
 8010358:	4628      	mov	r0, r5
 801035a:	47b8      	blx	r7
 801035c:	3001      	adds	r0, #1
 801035e:	f43f aeae 	beq.w	80100be <_printf_float+0xb6>
 8010362:	f108 0801 	add.w	r8, r8, #1
 8010366:	e7ec      	b.n	8010342 <_printf_float+0x33a>
 8010368:	4642      	mov	r2, r8
 801036a:	4631      	mov	r1, r6
 801036c:	4628      	mov	r0, r5
 801036e:	47b8      	blx	r7
 8010370:	3001      	adds	r0, #1
 8010372:	d1c2      	bne.n	80102fa <_printf_float+0x2f2>
 8010374:	e6a3      	b.n	80100be <_printf_float+0xb6>
 8010376:	2301      	movs	r3, #1
 8010378:	4631      	mov	r1, r6
 801037a:	4628      	mov	r0, r5
 801037c:	9206      	str	r2, [sp, #24]
 801037e:	47b8      	blx	r7
 8010380:	3001      	adds	r0, #1
 8010382:	f43f ae9c 	beq.w	80100be <_printf_float+0xb6>
 8010386:	9a06      	ldr	r2, [sp, #24]
 8010388:	f10b 0b01 	add.w	fp, fp, #1
 801038c:	e7bb      	b.n	8010306 <_printf_float+0x2fe>
 801038e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010392:	4631      	mov	r1, r6
 8010394:	4628      	mov	r0, r5
 8010396:	47b8      	blx	r7
 8010398:	3001      	adds	r0, #1
 801039a:	d1c0      	bne.n	801031e <_printf_float+0x316>
 801039c:	e68f      	b.n	80100be <_printf_float+0xb6>
 801039e:	9a06      	ldr	r2, [sp, #24]
 80103a0:	464b      	mov	r3, r9
 80103a2:	4442      	add	r2, r8
 80103a4:	4631      	mov	r1, r6
 80103a6:	4628      	mov	r0, r5
 80103a8:	47b8      	blx	r7
 80103aa:	3001      	adds	r0, #1
 80103ac:	d1c3      	bne.n	8010336 <_printf_float+0x32e>
 80103ae:	e686      	b.n	80100be <_printf_float+0xb6>
 80103b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80103b4:	f1ba 0f01 	cmp.w	sl, #1
 80103b8:	dc01      	bgt.n	80103be <_printf_float+0x3b6>
 80103ba:	07db      	lsls	r3, r3, #31
 80103bc:	d536      	bpl.n	801042c <_printf_float+0x424>
 80103be:	2301      	movs	r3, #1
 80103c0:	4642      	mov	r2, r8
 80103c2:	4631      	mov	r1, r6
 80103c4:	4628      	mov	r0, r5
 80103c6:	47b8      	blx	r7
 80103c8:	3001      	adds	r0, #1
 80103ca:	f43f ae78 	beq.w	80100be <_printf_float+0xb6>
 80103ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103d2:	4631      	mov	r1, r6
 80103d4:	4628      	mov	r0, r5
 80103d6:	47b8      	blx	r7
 80103d8:	3001      	adds	r0, #1
 80103da:	f43f ae70 	beq.w	80100be <_printf_float+0xb6>
 80103de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80103e2:	2200      	movs	r2, #0
 80103e4:	2300      	movs	r3, #0
 80103e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80103ea:	f7f0 fbad 	bl	8000b48 <__aeabi_dcmpeq>
 80103ee:	b9c0      	cbnz	r0, 8010422 <_printf_float+0x41a>
 80103f0:	4653      	mov	r3, sl
 80103f2:	f108 0201 	add.w	r2, r8, #1
 80103f6:	4631      	mov	r1, r6
 80103f8:	4628      	mov	r0, r5
 80103fa:	47b8      	blx	r7
 80103fc:	3001      	adds	r0, #1
 80103fe:	d10c      	bne.n	801041a <_printf_float+0x412>
 8010400:	e65d      	b.n	80100be <_printf_float+0xb6>
 8010402:	2301      	movs	r3, #1
 8010404:	465a      	mov	r2, fp
 8010406:	4631      	mov	r1, r6
 8010408:	4628      	mov	r0, r5
 801040a:	47b8      	blx	r7
 801040c:	3001      	adds	r0, #1
 801040e:	f43f ae56 	beq.w	80100be <_printf_float+0xb6>
 8010412:	f108 0801 	add.w	r8, r8, #1
 8010416:	45d0      	cmp	r8, sl
 8010418:	dbf3      	blt.n	8010402 <_printf_float+0x3fa>
 801041a:	464b      	mov	r3, r9
 801041c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010420:	e6df      	b.n	80101e2 <_printf_float+0x1da>
 8010422:	f04f 0800 	mov.w	r8, #0
 8010426:	f104 0b1a 	add.w	fp, r4, #26
 801042a:	e7f4      	b.n	8010416 <_printf_float+0x40e>
 801042c:	2301      	movs	r3, #1
 801042e:	4642      	mov	r2, r8
 8010430:	e7e1      	b.n	80103f6 <_printf_float+0x3ee>
 8010432:	2301      	movs	r3, #1
 8010434:	464a      	mov	r2, r9
 8010436:	4631      	mov	r1, r6
 8010438:	4628      	mov	r0, r5
 801043a:	47b8      	blx	r7
 801043c:	3001      	adds	r0, #1
 801043e:	f43f ae3e 	beq.w	80100be <_printf_float+0xb6>
 8010442:	f108 0801 	add.w	r8, r8, #1
 8010446:	68e3      	ldr	r3, [r4, #12]
 8010448:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801044a:	1a5b      	subs	r3, r3, r1
 801044c:	4543      	cmp	r3, r8
 801044e:	dcf0      	bgt.n	8010432 <_printf_float+0x42a>
 8010450:	e6fc      	b.n	801024c <_printf_float+0x244>
 8010452:	f04f 0800 	mov.w	r8, #0
 8010456:	f104 0919 	add.w	r9, r4, #25
 801045a:	e7f4      	b.n	8010446 <_printf_float+0x43e>

0801045c <_printf_common>:
 801045c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010460:	4616      	mov	r6, r2
 8010462:	4698      	mov	r8, r3
 8010464:	688a      	ldr	r2, [r1, #8]
 8010466:	690b      	ldr	r3, [r1, #16]
 8010468:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801046c:	4293      	cmp	r3, r2
 801046e:	bfb8      	it	lt
 8010470:	4613      	movlt	r3, r2
 8010472:	6033      	str	r3, [r6, #0]
 8010474:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010478:	4607      	mov	r7, r0
 801047a:	460c      	mov	r4, r1
 801047c:	b10a      	cbz	r2, 8010482 <_printf_common+0x26>
 801047e:	3301      	adds	r3, #1
 8010480:	6033      	str	r3, [r6, #0]
 8010482:	6823      	ldr	r3, [r4, #0]
 8010484:	0699      	lsls	r1, r3, #26
 8010486:	bf42      	ittt	mi
 8010488:	6833      	ldrmi	r3, [r6, #0]
 801048a:	3302      	addmi	r3, #2
 801048c:	6033      	strmi	r3, [r6, #0]
 801048e:	6825      	ldr	r5, [r4, #0]
 8010490:	f015 0506 	ands.w	r5, r5, #6
 8010494:	d106      	bne.n	80104a4 <_printf_common+0x48>
 8010496:	f104 0a19 	add.w	sl, r4, #25
 801049a:	68e3      	ldr	r3, [r4, #12]
 801049c:	6832      	ldr	r2, [r6, #0]
 801049e:	1a9b      	subs	r3, r3, r2
 80104a0:	42ab      	cmp	r3, r5
 80104a2:	dc26      	bgt.n	80104f2 <_printf_common+0x96>
 80104a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80104a8:	6822      	ldr	r2, [r4, #0]
 80104aa:	3b00      	subs	r3, #0
 80104ac:	bf18      	it	ne
 80104ae:	2301      	movne	r3, #1
 80104b0:	0692      	lsls	r2, r2, #26
 80104b2:	d42b      	bmi.n	801050c <_printf_common+0xb0>
 80104b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80104b8:	4641      	mov	r1, r8
 80104ba:	4638      	mov	r0, r7
 80104bc:	47c8      	blx	r9
 80104be:	3001      	adds	r0, #1
 80104c0:	d01e      	beq.n	8010500 <_printf_common+0xa4>
 80104c2:	6823      	ldr	r3, [r4, #0]
 80104c4:	6922      	ldr	r2, [r4, #16]
 80104c6:	f003 0306 	and.w	r3, r3, #6
 80104ca:	2b04      	cmp	r3, #4
 80104cc:	bf02      	ittt	eq
 80104ce:	68e5      	ldreq	r5, [r4, #12]
 80104d0:	6833      	ldreq	r3, [r6, #0]
 80104d2:	1aed      	subeq	r5, r5, r3
 80104d4:	68a3      	ldr	r3, [r4, #8]
 80104d6:	bf0c      	ite	eq
 80104d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80104dc:	2500      	movne	r5, #0
 80104de:	4293      	cmp	r3, r2
 80104e0:	bfc4      	itt	gt
 80104e2:	1a9b      	subgt	r3, r3, r2
 80104e4:	18ed      	addgt	r5, r5, r3
 80104e6:	2600      	movs	r6, #0
 80104e8:	341a      	adds	r4, #26
 80104ea:	42b5      	cmp	r5, r6
 80104ec:	d11a      	bne.n	8010524 <_printf_common+0xc8>
 80104ee:	2000      	movs	r0, #0
 80104f0:	e008      	b.n	8010504 <_printf_common+0xa8>
 80104f2:	2301      	movs	r3, #1
 80104f4:	4652      	mov	r2, sl
 80104f6:	4641      	mov	r1, r8
 80104f8:	4638      	mov	r0, r7
 80104fa:	47c8      	blx	r9
 80104fc:	3001      	adds	r0, #1
 80104fe:	d103      	bne.n	8010508 <_printf_common+0xac>
 8010500:	f04f 30ff 	mov.w	r0, #4294967295
 8010504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010508:	3501      	adds	r5, #1
 801050a:	e7c6      	b.n	801049a <_printf_common+0x3e>
 801050c:	18e1      	adds	r1, r4, r3
 801050e:	1c5a      	adds	r2, r3, #1
 8010510:	2030      	movs	r0, #48	@ 0x30
 8010512:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010516:	4422      	add	r2, r4
 8010518:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801051c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010520:	3302      	adds	r3, #2
 8010522:	e7c7      	b.n	80104b4 <_printf_common+0x58>
 8010524:	2301      	movs	r3, #1
 8010526:	4622      	mov	r2, r4
 8010528:	4641      	mov	r1, r8
 801052a:	4638      	mov	r0, r7
 801052c:	47c8      	blx	r9
 801052e:	3001      	adds	r0, #1
 8010530:	d0e6      	beq.n	8010500 <_printf_common+0xa4>
 8010532:	3601      	adds	r6, #1
 8010534:	e7d9      	b.n	80104ea <_printf_common+0x8e>
	...

08010538 <_printf_i>:
 8010538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801053c:	7e0f      	ldrb	r7, [r1, #24]
 801053e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010540:	2f78      	cmp	r7, #120	@ 0x78
 8010542:	4691      	mov	r9, r2
 8010544:	4680      	mov	r8, r0
 8010546:	460c      	mov	r4, r1
 8010548:	469a      	mov	sl, r3
 801054a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801054e:	d807      	bhi.n	8010560 <_printf_i+0x28>
 8010550:	2f62      	cmp	r7, #98	@ 0x62
 8010552:	d80a      	bhi.n	801056a <_printf_i+0x32>
 8010554:	2f00      	cmp	r7, #0
 8010556:	f000 80d2 	beq.w	80106fe <_printf_i+0x1c6>
 801055a:	2f58      	cmp	r7, #88	@ 0x58
 801055c:	f000 80b9 	beq.w	80106d2 <_printf_i+0x19a>
 8010560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010564:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010568:	e03a      	b.n	80105e0 <_printf_i+0xa8>
 801056a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801056e:	2b15      	cmp	r3, #21
 8010570:	d8f6      	bhi.n	8010560 <_printf_i+0x28>
 8010572:	a101      	add	r1, pc, #4	@ (adr r1, 8010578 <_printf_i+0x40>)
 8010574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010578:	080105d1 	.word	0x080105d1
 801057c:	080105e5 	.word	0x080105e5
 8010580:	08010561 	.word	0x08010561
 8010584:	08010561 	.word	0x08010561
 8010588:	08010561 	.word	0x08010561
 801058c:	08010561 	.word	0x08010561
 8010590:	080105e5 	.word	0x080105e5
 8010594:	08010561 	.word	0x08010561
 8010598:	08010561 	.word	0x08010561
 801059c:	08010561 	.word	0x08010561
 80105a0:	08010561 	.word	0x08010561
 80105a4:	080106e5 	.word	0x080106e5
 80105a8:	0801060f 	.word	0x0801060f
 80105ac:	0801069f 	.word	0x0801069f
 80105b0:	08010561 	.word	0x08010561
 80105b4:	08010561 	.word	0x08010561
 80105b8:	08010707 	.word	0x08010707
 80105bc:	08010561 	.word	0x08010561
 80105c0:	0801060f 	.word	0x0801060f
 80105c4:	08010561 	.word	0x08010561
 80105c8:	08010561 	.word	0x08010561
 80105cc:	080106a7 	.word	0x080106a7
 80105d0:	6833      	ldr	r3, [r6, #0]
 80105d2:	1d1a      	adds	r2, r3, #4
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	6032      	str	r2, [r6, #0]
 80105d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80105dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80105e0:	2301      	movs	r3, #1
 80105e2:	e09d      	b.n	8010720 <_printf_i+0x1e8>
 80105e4:	6833      	ldr	r3, [r6, #0]
 80105e6:	6820      	ldr	r0, [r4, #0]
 80105e8:	1d19      	adds	r1, r3, #4
 80105ea:	6031      	str	r1, [r6, #0]
 80105ec:	0606      	lsls	r6, r0, #24
 80105ee:	d501      	bpl.n	80105f4 <_printf_i+0xbc>
 80105f0:	681d      	ldr	r5, [r3, #0]
 80105f2:	e003      	b.n	80105fc <_printf_i+0xc4>
 80105f4:	0645      	lsls	r5, r0, #25
 80105f6:	d5fb      	bpl.n	80105f0 <_printf_i+0xb8>
 80105f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80105fc:	2d00      	cmp	r5, #0
 80105fe:	da03      	bge.n	8010608 <_printf_i+0xd0>
 8010600:	232d      	movs	r3, #45	@ 0x2d
 8010602:	426d      	negs	r5, r5
 8010604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010608:	4859      	ldr	r0, [pc, #356]	@ (8010770 <_printf_i+0x238>)
 801060a:	230a      	movs	r3, #10
 801060c:	e011      	b.n	8010632 <_printf_i+0xfa>
 801060e:	6821      	ldr	r1, [r4, #0]
 8010610:	6833      	ldr	r3, [r6, #0]
 8010612:	0608      	lsls	r0, r1, #24
 8010614:	f853 5b04 	ldr.w	r5, [r3], #4
 8010618:	d402      	bmi.n	8010620 <_printf_i+0xe8>
 801061a:	0649      	lsls	r1, r1, #25
 801061c:	bf48      	it	mi
 801061e:	b2ad      	uxthmi	r5, r5
 8010620:	2f6f      	cmp	r7, #111	@ 0x6f
 8010622:	4853      	ldr	r0, [pc, #332]	@ (8010770 <_printf_i+0x238>)
 8010624:	6033      	str	r3, [r6, #0]
 8010626:	bf14      	ite	ne
 8010628:	230a      	movne	r3, #10
 801062a:	2308      	moveq	r3, #8
 801062c:	2100      	movs	r1, #0
 801062e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010632:	6866      	ldr	r6, [r4, #4]
 8010634:	60a6      	str	r6, [r4, #8]
 8010636:	2e00      	cmp	r6, #0
 8010638:	bfa2      	ittt	ge
 801063a:	6821      	ldrge	r1, [r4, #0]
 801063c:	f021 0104 	bicge.w	r1, r1, #4
 8010640:	6021      	strge	r1, [r4, #0]
 8010642:	b90d      	cbnz	r5, 8010648 <_printf_i+0x110>
 8010644:	2e00      	cmp	r6, #0
 8010646:	d04b      	beq.n	80106e0 <_printf_i+0x1a8>
 8010648:	4616      	mov	r6, r2
 801064a:	fbb5 f1f3 	udiv	r1, r5, r3
 801064e:	fb03 5711 	mls	r7, r3, r1, r5
 8010652:	5dc7      	ldrb	r7, [r0, r7]
 8010654:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010658:	462f      	mov	r7, r5
 801065a:	42bb      	cmp	r3, r7
 801065c:	460d      	mov	r5, r1
 801065e:	d9f4      	bls.n	801064a <_printf_i+0x112>
 8010660:	2b08      	cmp	r3, #8
 8010662:	d10b      	bne.n	801067c <_printf_i+0x144>
 8010664:	6823      	ldr	r3, [r4, #0]
 8010666:	07df      	lsls	r7, r3, #31
 8010668:	d508      	bpl.n	801067c <_printf_i+0x144>
 801066a:	6923      	ldr	r3, [r4, #16]
 801066c:	6861      	ldr	r1, [r4, #4]
 801066e:	4299      	cmp	r1, r3
 8010670:	bfde      	ittt	le
 8010672:	2330      	movle	r3, #48	@ 0x30
 8010674:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010678:	f106 36ff 	addle.w	r6, r6, #4294967295
 801067c:	1b92      	subs	r2, r2, r6
 801067e:	6122      	str	r2, [r4, #16]
 8010680:	f8cd a000 	str.w	sl, [sp]
 8010684:	464b      	mov	r3, r9
 8010686:	aa03      	add	r2, sp, #12
 8010688:	4621      	mov	r1, r4
 801068a:	4640      	mov	r0, r8
 801068c:	f7ff fee6 	bl	801045c <_printf_common>
 8010690:	3001      	adds	r0, #1
 8010692:	d14a      	bne.n	801072a <_printf_i+0x1f2>
 8010694:	f04f 30ff 	mov.w	r0, #4294967295
 8010698:	b004      	add	sp, #16
 801069a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801069e:	6823      	ldr	r3, [r4, #0]
 80106a0:	f043 0320 	orr.w	r3, r3, #32
 80106a4:	6023      	str	r3, [r4, #0]
 80106a6:	4833      	ldr	r0, [pc, #204]	@ (8010774 <_printf_i+0x23c>)
 80106a8:	2778      	movs	r7, #120	@ 0x78
 80106aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80106ae:	6823      	ldr	r3, [r4, #0]
 80106b0:	6831      	ldr	r1, [r6, #0]
 80106b2:	061f      	lsls	r7, r3, #24
 80106b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80106b8:	d402      	bmi.n	80106c0 <_printf_i+0x188>
 80106ba:	065f      	lsls	r7, r3, #25
 80106bc:	bf48      	it	mi
 80106be:	b2ad      	uxthmi	r5, r5
 80106c0:	6031      	str	r1, [r6, #0]
 80106c2:	07d9      	lsls	r1, r3, #31
 80106c4:	bf44      	itt	mi
 80106c6:	f043 0320 	orrmi.w	r3, r3, #32
 80106ca:	6023      	strmi	r3, [r4, #0]
 80106cc:	b11d      	cbz	r5, 80106d6 <_printf_i+0x19e>
 80106ce:	2310      	movs	r3, #16
 80106d0:	e7ac      	b.n	801062c <_printf_i+0xf4>
 80106d2:	4827      	ldr	r0, [pc, #156]	@ (8010770 <_printf_i+0x238>)
 80106d4:	e7e9      	b.n	80106aa <_printf_i+0x172>
 80106d6:	6823      	ldr	r3, [r4, #0]
 80106d8:	f023 0320 	bic.w	r3, r3, #32
 80106dc:	6023      	str	r3, [r4, #0]
 80106de:	e7f6      	b.n	80106ce <_printf_i+0x196>
 80106e0:	4616      	mov	r6, r2
 80106e2:	e7bd      	b.n	8010660 <_printf_i+0x128>
 80106e4:	6833      	ldr	r3, [r6, #0]
 80106e6:	6825      	ldr	r5, [r4, #0]
 80106e8:	6961      	ldr	r1, [r4, #20]
 80106ea:	1d18      	adds	r0, r3, #4
 80106ec:	6030      	str	r0, [r6, #0]
 80106ee:	062e      	lsls	r6, r5, #24
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	d501      	bpl.n	80106f8 <_printf_i+0x1c0>
 80106f4:	6019      	str	r1, [r3, #0]
 80106f6:	e002      	b.n	80106fe <_printf_i+0x1c6>
 80106f8:	0668      	lsls	r0, r5, #25
 80106fa:	d5fb      	bpl.n	80106f4 <_printf_i+0x1bc>
 80106fc:	8019      	strh	r1, [r3, #0]
 80106fe:	2300      	movs	r3, #0
 8010700:	6123      	str	r3, [r4, #16]
 8010702:	4616      	mov	r6, r2
 8010704:	e7bc      	b.n	8010680 <_printf_i+0x148>
 8010706:	6833      	ldr	r3, [r6, #0]
 8010708:	1d1a      	adds	r2, r3, #4
 801070a:	6032      	str	r2, [r6, #0]
 801070c:	681e      	ldr	r6, [r3, #0]
 801070e:	6862      	ldr	r2, [r4, #4]
 8010710:	2100      	movs	r1, #0
 8010712:	4630      	mov	r0, r6
 8010714:	f7ef fd9c 	bl	8000250 <memchr>
 8010718:	b108      	cbz	r0, 801071e <_printf_i+0x1e6>
 801071a:	1b80      	subs	r0, r0, r6
 801071c:	6060      	str	r0, [r4, #4]
 801071e:	6863      	ldr	r3, [r4, #4]
 8010720:	6123      	str	r3, [r4, #16]
 8010722:	2300      	movs	r3, #0
 8010724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010728:	e7aa      	b.n	8010680 <_printf_i+0x148>
 801072a:	6923      	ldr	r3, [r4, #16]
 801072c:	4632      	mov	r2, r6
 801072e:	4649      	mov	r1, r9
 8010730:	4640      	mov	r0, r8
 8010732:	47d0      	blx	sl
 8010734:	3001      	adds	r0, #1
 8010736:	d0ad      	beq.n	8010694 <_printf_i+0x15c>
 8010738:	6823      	ldr	r3, [r4, #0]
 801073a:	079b      	lsls	r3, r3, #30
 801073c:	d413      	bmi.n	8010766 <_printf_i+0x22e>
 801073e:	68e0      	ldr	r0, [r4, #12]
 8010740:	9b03      	ldr	r3, [sp, #12]
 8010742:	4298      	cmp	r0, r3
 8010744:	bfb8      	it	lt
 8010746:	4618      	movlt	r0, r3
 8010748:	e7a6      	b.n	8010698 <_printf_i+0x160>
 801074a:	2301      	movs	r3, #1
 801074c:	4632      	mov	r2, r6
 801074e:	4649      	mov	r1, r9
 8010750:	4640      	mov	r0, r8
 8010752:	47d0      	blx	sl
 8010754:	3001      	adds	r0, #1
 8010756:	d09d      	beq.n	8010694 <_printf_i+0x15c>
 8010758:	3501      	adds	r5, #1
 801075a:	68e3      	ldr	r3, [r4, #12]
 801075c:	9903      	ldr	r1, [sp, #12]
 801075e:	1a5b      	subs	r3, r3, r1
 8010760:	42ab      	cmp	r3, r5
 8010762:	dcf2      	bgt.n	801074a <_printf_i+0x212>
 8010764:	e7eb      	b.n	801073e <_printf_i+0x206>
 8010766:	2500      	movs	r5, #0
 8010768:	f104 0619 	add.w	r6, r4, #25
 801076c:	e7f5      	b.n	801075a <_printf_i+0x222>
 801076e:	bf00      	nop
 8010770:	08017729 	.word	0x08017729
 8010774:	0801773a 	.word	0x0801773a

08010778 <_scanf_float>:
 8010778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801077c:	b087      	sub	sp, #28
 801077e:	4617      	mov	r7, r2
 8010780:	9303      	str	r3, [sp, #12]
 8010782:	688b      	ldr	r3, [r1, #8]
 8010784:	1e5a      	subs	r2, r3, #1
 8010786:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801078a:	bf81      	itttt	hi
 801078c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010790:	eb03 0b05 	addhi.w	fp, r3, r5
 8010794:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010798:	608b      	strhi	r3, [r1, #8]
 801079a:	680b      	ldr	r3, [r1, #0]
 801079c:	460a      	mov	r2, r1
 801079e:	f04f 0500 	mov.w	r5, #0
 80107a2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80107a6:	f842 3b1c 	str.w	r3, [r2], #28
 80107aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80107ae:	4680      	mov	r8, r0
 80107b0:	460c      	mov	r4, r1
 80107b2:	bf98      	it	ls
 80107b4:	f04f 0b00 	movls.w	fp, #0
 80107b8:	9201      	str	r2, [sp, #4]
 80107ba:	4616      	mov	r6, r2
 80107bc:	46aa      	mov	sl, r5
 80107be:	46a9      	mov	r9, r5
 80107c0:	9502      	str	r5, [sp, #8]
 80107c2:	68a2      	ldr	r2, [r4, #8]
 80107c4:	b152      	cbz	r2, 80107dc <_scanf_float+0x64>
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	2b4e      	cmp	r3, #78	@ 0x4e
 80107cc:	d864      	bhi.n	8010898 <_scanf_float+0x120>
 80107ce:	2b40      	cmp	r3, #64	@ 0x40
 80107d0:	d83c      	bhi.n	801084c <_scanf_float+0xd4>
 80107d2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80107d6:	b2c8      	uxtb	r0, r1
 80107d8:	280e      	cmp	r0, #14
 80107da:	d93a      	bls.n	8010852 <_scanf_float+0xda>
 80107dc:	f1b9 0f00 	cmp.w	r9, #0
 80107e0:	d003      	beq.n	80107ea <_scanf_float+0x72>
 80107e2:	6823      	ldr	r3, [r4, #0]
 80107e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80107e8:	6023      	str	r3, [r4, #0]
 80107ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80107ee:	f1ba 0f01 	cmp.w	sl, #1
 80107f2:	f200 8117 	bhi.w	8010a24 <_scanf_float+0x2ac>
 80107f6:	9b01      	ldr	r3, [sp, #4]
 80107f8:	429e      	cmp	r6, r3
 80107fa:	f200 8108 	bhi.w	8010a0e <_scanf_float+0x296>
 80107fe:	2001      	movs	r0, #1
 8010800:	b007      	add	sp, #28
 8010802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010806:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801080a:	2a0d      	cmp	r2, #13
 801080c:	d8e6      	bhi.n	80107dc <_scanf_float+0x64>
 801080e:	a101      	add	r1, pc, #4	@ (adr r1, 8010814 <_scanf_float+0x9c>)
 8010810:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010814:	0801095b 	.word	0x0801095b
 8010818:	080107dd 	.word	0x080107dd
 801081c:	080107dd 	.word	0x080107dd
 8010820:	080107dd 	.word	0x080107dd
 8010824:	080109bb 	.word	0x080109bb
 8010828:	08010993 	.word	0x08010993
 801082c:	080107dd 	.word	0x080107dd
 8010830:	080107dd 	.word	0x080107dd
 8010834:	08010969 	.word	0x08010969
 8010838:	080107dd 	.word	0x080107dd
 801083c:	080107dd 	.word	0x080107dd
 8010840:	080107dd 	.word	0x080107dd
 8010844:	080107dd 	.word	0x080107dd
 8010848:	08010921 	.word	0x08010921
 801084c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010850:	e7db      	b.n	801080a <_scanf_float+0x92>
 8010852:	290e      	cmp	r1, #14
 8010854:	d8c2      	bhi.n	80107dc <_scanf_float+0x64>
 8010856:	a001      	add	r0, pc, #4	@ (adr r0, 801085c <_scanf_float+0xe4>)
 8010858:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801085c:	08010911 	.word	0x08010911
 8010860:	080107dd 	.word	0x080107dd
 8010864:	08010911 	.word	0x08010911
 8010868:	080109a7 	.word	0x080109a7
 801086c:	080107dd 	.word	0x080107dd
 8010870:	080108b9 	.word	0x080108b9
 8010874:	080108f7 	.word	0x080108f7
 8010878:	080108f7 	.word	0x080108f7
 801087c:	080108f7 	.word	0x080108f7
 8010880:	080108f7 	.word	0x080108f7
 8010884:	080108f7 	.word	0x080108f7
 8010888:	080108f7 	.word	0x080108f7
 801088c:	080108f7 	.word	0x080108f7
 8010890:	080108f7 	.word	0x080108f7
 8010894:	080108f7 	.word	0x080108f7
 8010898:	2b6e      	cmp	r3, #110	@ 0x6e
 801089a:	d809      	bhi.n	80108b0 <_scanf_float+0x138>
 801089c:	2b60      	cmp	r3, #96	@ 0x60
 801089e:	d8b2      	bhi.n	8010806 <_scanf_float+0x8e>
 80108a0:	2b54      	cmp	r3, #84	@ 0x54
 80108a2:	d07b      	beq.n	801099c <_scanf_float+0x224>
 80108a4:	2b59      	cmp	r3, #89	@ 0x59
 80108a6:	d199      	bne.n	80107dc <_scanf_float+0x64>
 80108a8:	2d07      	cmp	r5, #7
 80108aa:	d197      	bne.n	80107dc <_scanf_float+0x64>
 80108ac:	2508      	movs	r5, #8
 80108ae:	e02c      	b.n	801090a <_scanf_float+0x192>
 80108b0:	2b74      	cmp	r3, #116	@ 0x74
 80108b2:	d073      	beq.n	801099c <_scanf_float+0x224>
 80108b4:	2b79      	cmp	r3, #121	@ 0x79
 80108b6:	e7f6      	b.n	80108a6 <_scanf_float+0x12e>
 80108b8:	6821      	ldr	r1, [r4, #0]
 80108ba:	05c8      	lsls	r0, r1, #23
 80108bc:	d51b      	bpl.n	80108f6 <_scanf_float+0x17e>
 80108be:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80108c2:	6021      	str	r1, [r4, #0]
 80108c4:	f109 0901 	add.w	r9, r9, #1
 80108c8:	f1bb 0f00 	cmp.w	fp, #0
 80108cc:	d003      	beq.n	80108d6 <_scanf_float+0x15e>
 80108ce:	3201      	adds	r2, #1
 80108d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80108d4:	60a2      	str	r2, [r4, #8]
 80108d6:	68a3      	ldr	r3, [r4, #8]
 80108d8:	3b01      	subs	r3, #1
 80108da:	60a3      	str	r3, [r4, #8]
 80108dc:	6923      	ldr	r3, [r4, #16]
 80108de:	3301      	adds	r3, #1
 80108e0:	6123      	str	r3, [r4, #16]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	3b01      	subs	r3, #1
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	607b      	str	r3, [r7, #4]
 80108ea:	f340 8087 	ble.w	80109fc <_scanf_float+0x284>
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	3301      	adds	r3, #1
 80108f2:	603b      	str	r3, [r7, #0]
 80108f4:	e765      	b.n	80107c2 <_scanf_float+0x4a>
 80108f6:	eb1a 0105 	adds.w	r1, sl, r5
 80108fa:	f47f af6f 	bne.w	80107dc <_scanf_float+0x64>
 80108fe:	6822      	ldr	r2, [r4, #0]
 8010900:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010904:	6022      	str	r2, [r4, #0]
 8010906:	460d      	mov	r5, r1
 8010908:	468a      	mov	sl, r1
 801090a:	f806 3b01 	strb.w	r3, [r6], #1
 801090e:	e7e2      	b.n	80108d6 <_scanf_float+0x15e>
 8010910:	6822      	ldr	r2, [r4, #0]
 8010912:	0610      	lsls	r0, r2, #24
 8010914:	f57f af62 	bpl.w	80107dc <_scanf_float+0x64>
 8010918:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801091c:	6022      	str	r2, [r4, #0]
 801091e:	e7f4      	b.n	801090a <_scanf_float+0x192>
 8010920:	f1ba 0f00 	cmp.w	sl, #0
 8010924:	d10e      	bne.n	8010944 <_scanf_float+0x1cc>
 8010926:	f1b9 0f00 	cmp.w	r9, #0
 801092a:	d10e      	bne.n	801094a <_scanf_float+0x1d2>
 801092c:	6822      	ldr	r2, [r4, #0]
 801092e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010932:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010936:	d108      	bne.n	801094a <_scanf_float+0x1d2>
 8010938:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801093c:	6022      	str	r2, [r4, #0]
 801093e:	f04f 0a01 	mov.w	sl, #1
 8010942:	e7e2      	b.n	801090a <_scanf_float+0x192>
 8010944:	f1ba 0f02 	cmp.w	sl, #2
 8010948:	d055      	beq.n	80109f6 <_scanf_float+0x27e>
 801094a:	2d01      	cmp	r5, #1
 801094c:	d002      	beq.n	8010954 <_scanf_float+0x1dc>
 801094e:	2d04      	cmp	r5, #4
 8010950:	f47f af44 	bne.w	80107dc <_scanf_float+0x64>
 8010954:	3501      	adds	r5, #1
 8010956:	b2ed      	uxtb	r5, r5
 8010958:	e7d7      	b.n	801090a <_scanf_float+0x192>
 801095a:	f1ba 0f01 	cmp.w	sl, #1
 801095e:	f47f af3d 	bne.w	80107dc <_scanf_float+0x64>
 8010962:	f04f 0a02 	mov.w	sl, #2
 8010966:	e7d0      	b.n	801090a <_scanf_float+0x192>
 8010968:	b97d      	cbnz	r5, 801098a <_scanf_float+0x212>
 801096a:	f1b9 0f00 	cmp.w	r9, #0
 801096e:	f47f af38 	bne.w	80107e2 <_scanf_float+0x6a>
 8010972:	6822      	ldr	r2, [r4, #0]
 8010974:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010978:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801097c:	f040 8108 	bne.w	8010b90 <_scanf_float+0x418>
 8010980:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010984:	6022      	str	r2, [r4, #0]
 8010986:	2501      	movs	r5, #1
 8010988:	e7bf      	b.n	801090a <_scanf_float+0x192>
 801098a:	2d03      	cmp	r5, #3
 801098c:	d0e2      	beq.n	8010954 <_scanf_float+0x1dc>
 801098e:	2d05      	cmp	r5, #5
 8010990:	e7de      	b.n	8010950 <_scanf_float+0x1d8>
 8010992:	2d02      	cmp	r5, #2
 8010994:	f47f af22 	bne.w	80107dc <_scanf_float+0x64>
 8010998:	2503      	movs	r5, #3
 801099a:	e7b6      	b.n	801090a <_scanf_float+0x192>
 801099c:	2d06      	cmp	r5, #6
 801099e:	f47f af1d 	bne.w	80107dc <_scanf_float+0x64>
 80109a2:	2507      	movs	r5, #7
 80109a4:	e7b1      	b.n	801090a <_scanf_float+0x192>
 80109a6:	6822      	ldr	r2, [r4, #0]
 80109a8:	0591      	lsls	r1, r2, #22
 80109aa:	f57f af17 	bpl.w	80107dc <_scanf_float+0x64>
 80109ae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80109b2:	6022      	str	r2, [r4, #0]
 80109b4:	f8cd 9008 	str.w	r9, [sp, #8]
 80109b8:	e7a7      	b.n	801090a <_scanf_float+0x192>
 80109ba:	6822      	ldr	r2, [r4, #0]
 80109bc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80109c0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80109c4:	d006      	beq.n	80109d4 <_scanf_float+0x25c>
 80109c6:	0550      	lsls	r0, r2, #21
 80109c8:	f57f af08 	bpl.w	80107dc <_scanf_float+0x64>
 80109cc:	f1b9 0f00 	cmp.w	r9, #0
 80109d0:	f000 80de 	beq.w	8010b90 <_scanf_float+0x418>
 80109d4:	0591      	lsls	r1, r2, #22
 80109d6:	bf58      	it	pl
 80109d8:	9902      	ldrpl	r1, [sp, #8]
 80109da:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80109de:	bf58      	it	pl
 80109e0:	eba9 0101 	subpl.w	r1, r9, r1
 80109e4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80109e8:	bf58      	it	pl
 80109ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80109ee:	6022      	str	r2, [r4, #0]
 80109f0:	f04f 0900 	mov.w	r9, #0
 80109f4:	e789      	b.n	801090a <_scanf_float+0x192>
 80109f6:	f04f 0a03 	mov.w	sl, #3
 80109fa:	e786      	b.n	801090a <_scanf_float+0x192>
 80109fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010a00:	4639      	mov	r1, r7
 8010a02:	4640      	mov	r0, r8
 8010a04:	4798      	blx	r3
 8010a06:	2800      	cmp	r0, #0
 8010a08:	f43f aedb 	beq.w	80107c2 <_scanf_float+0x4a>
 8010a0c:	e6e6      	b.n	80107dc <_scanf_float+0x64>
 8010a0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010a16:	463a      	mov	r2, r7
 8010a18:	4640      	mov	r0, r8
 8010a1a:	4798      	blx	r3
 8010a1c:	6923      	ldr	r3, [r4, #16]
 8010a1e:	3b01      	subs	r3, #1
 8010a20:	6123      	str	r3, [r4, #16]
 8010a22:	e6e8      	b.n	80107f6 <_scanf_float+0x7e>
 8010a24:	1e6b      	subs	r3, r5, #1
 8010a26:	2b06      	cmp	r3, #6
 8010a28:	d824      	bhi.n	8010a74 <_scanf_float+0x2fc>
 8010a2a:	2d02      	cmp	r5, #2
 8010a2c:	d836      	bhi.n	8010a9c <_scanf_float+0x324>
 8010a2e:	9b01      	ldr	r3, [sp, #4]
 8010a30:	429e      	cmp	r6, r3
 8010a32:	f67f aee4 	bls.w	80107fe <_scanf_float+0x86>
 8010a36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010a3e:	463a      	mov	r2, r7
 8010a40:	4640      	mov	r0, r8
 8010a42:	4798      	blx	r3
 8010a44:	6923      	ldr	r3, [r4, #16]
 8010a46:	3b01      	subs	r3, #1
 8010a48:	6123      	str	r3, [r4, #16]
 8010a4a:	e7f0      	b.n	8010a2e <_scanf_float+0x2b6>
 8010a4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a50:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010a54:	463a      	mov	r2, r7
 8010a56:	4640      	mov	r0, r8
 8010a58:	4798      	blx	r3
 8010a5a:	6923      	ldr	r3, [r4, #16]
 8010a5c:	3b01      	subs	r3, #1
 8010a5e:	6123      	str	r3, [r4, #16]
 8010a60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a64:	fa5f fa8a 	uxtb.w	sl, sl
 8010a68:	f1ba 0f02 	cmp.w	sl, #2
 8010a6c:	d1ee      	bne.n	8010a4c <_scanf_float+0x2d4>
 8010a6e:	3d03      	subs	r5, #3
 8010a70:	b2ed      	uxtb	r5, r5
 8010a72:	1b76      	subs	r6, r6, r5
 8010a74:	6823      	ldr	r3, [r4, #0]
 8010a76:	05da      	lsls	r2, r3, #23
 8010a78:	d530      	bpl.n	8010adc <_scanf_float+0x364>
 8010a7a:	055b      	lsls	r3, r3, #21
 8010a7c:	d511      	bpl.n	8010aa2 <_scanf_float+0x32a>
 8010a7e:	9b01      	ldr	r3, [sp, #4]
 8010a80:	429e      	cmp	r6, r3
 8010a82:	f67f aebc 	bls.w	80107fe <_scanf_float+0x86>
 8010a86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010a8e:	463a      	mov	r2, r7
 8010a90:	4640      	mov	r0, r8
 8010a92:	4798      	blx	r3
 8010a94:	6923      	ldr	r3, [r4, #16]
 8010a96:	3b01      	subs	r3, #1
 8010a98:	6123      	str	r3, [r4, #16]
 8010a9a:	e7f0      	b.n	8010a7e <_scanf_float+0x306>
 8010a9c:	46aa      	mov	sl, r5
 8010a9e:	46b3      	mov	fp, r6
 8010aa0:	e7de      	b.n	8010a60 <_scanf_float+0x2e8>
 8010aa2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010aa6:	6923      	ldr	r3, [r4, #16]
 8010aa8:	2965      	cmp	r1, #101	@ 0x65
 8010aaa:	f103 33ff 	add.w	r3, r3, #4294967295
 8010aae:	f106 35ff 	add.w	r5, r6, #4294967295
 8010ab2:	6123      	str	r3, [r4, #16]
 8010ab4:	d00c      	beq.n	8010ad0 <_scanf_float+0x358>
 8010ab6:	2945      	cmp	r1, #69	@ 0x45
 8010ab8:	d00a      	beq.n	8010ad0 <_scanf_float+0x358>
 8010aba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010abe:	463a      	mov	r2, r7
 8010ac0:	4640      	mov	r0, r8
 8010ac2:	4798      	blx	r3
 8010ac4:	6923      	ldr	r3, [r4, #16]
 8010ac6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010aca:	3b01      	subs	r3, #1
 8010acc:	1eb5      	subs	r5, r6, #2
 8010ace:	6123      	str	r3, [r4, #16]
 8010ad0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010ad4:	463a      	mov	r2, r7
 8010ad6:	4640      	mov	r0, r8
 8010ad8:	4798      	blx	r3
 8010ada:	462e      	mov	r6, r5
 8010adc:	6822      	ldr	r2, [r4, #0]
 8010ade:	f012 0210 	ands.w	r2, r2, #16
 8010ae2:	d001      	beq.n	8010ae8 <_scanf_float+0x370>
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	e68b      	b.n	8010800 <_scanf_float+0x88>
 8010ae8:	7032      	strb	r2, [r6, #0]
 8010aea:	6823      	ldr	r3, [r4, #0]
 8010aec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010af0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010af4:	d11c      	bne.n	8010b30 <_scanf_float+0x3b8>
 8010af6:	9b02      	ldr	r3, [sp, #8]
 8010af8:	454b      	cmp	r3, r9
 8010afa:	eba3 0209 	sub.w	r2, r3, r9
 8010afe:	d123      	bne.n	8010b48 <_scanf_float+0x3d0>
 8010b00:	9901      	ldr	r1, [sp, #4]
 8010b02:	2200      	movs	r2, #0
 8010b04:	4640      	mov	r0, r8
 8010b06:	f7ff f8e3 	bl	800fcd0 <_strtod_r>
 8010b0a:	9b03      	ldr	r3, [sp, #12]
 8010b0c:	6821      	ldr	r1, [r4, #0]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	f011 0f02 	tst.w	r1, #2
 8010b14:	ec57 6b10 	vmov	r6, r7, d0
 8010b18:	f103 0204 	add.w	r2, r3, #4
 8010b1c:	d01f      	beq.n	8010b5e <_scanf_float+0x3e6>
 8010b1e:	9903      	ldr	r1, [sp, #12]
 8010b20:	600a      	str	r2, [r1, #0]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	e9c3 6700 	strd	r6, r7, [r3]
 8010b28:	68e3      	ldr	r3, [r4, #12]
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	60e3      	str	r3, [r4, #12]
 8010b2e:	e7d9      	b.n	8010ae4 <_scanf_float+0x36c>
 8010b30:	9b04      	ldr	r3, [sp, #16]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d0e4      	beq.n	8010b00 <_scanf_float+0x388>
 8010b36:	9905      	ldr	r1, [sp, #20]
 8010b38:	230a      	movs	r3, #10
 8010b3a:	3101      	adds	r1, #1
 8010b3c:	4640      	mov	r0, r8
 8010b3e:	f7ff f9b7 	bl	800feb0 <_strtol_r>
 8010b42:	9b04      	ldr	r3, [sp, #16]
 8010b44:	9e05      	ldr	r6, [sp, #20]
 8010b46:	1ac2      	subs	r2, r0, r3
 8010b48:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010b4c:	429e      	cmp	r6, r3
 8010b4e:	bf28      	it	cs
 8010b50:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010b54:	4910      	ldr	r1, [pc, #64]	@ (8010b98 <_scanf_float+0x420>)
 8010b56:	4630      	mov	r0, r6
 8010b58:	f000 f988 	bl	8010e6c <siprintf>
 8010b5c:	e7d0      	b.n	8010b00 <_scanf_float+0x388>
 8010b5e:	f011 0f04 	tst.w	r1, #4
 8010b62:	9903      	ldr	r1, [sp, #12]
 8010b64:	600a      	str	r2, [r1, #0]
 8010b66:	d1dc      	bne.n	8010b22 <_scanf_float+0x3aa>
 8010b68:	681d      	ldr	r5, [r3, #0]
 8010b6a:	4632      	mov	r2, r6
 8010b6c:	463b      	mov	r3, r7
 8010b6e:	4630      	mov	r0, r6
 8010b70:	4639      	mov	r1, r7
 8010b72:	f7f0 f81b 	bl	8000bac <__aeabi_dcmpun>
 8010b76:	b128      	cbz	r0, 8010b84 <_scanf_float+0x40c>
 8010b78:	4808      	ldr	r0, [pc, #32]	@ (8010b9c <_scanf_float+0x424>)
 8010b7a:	f000 fbe5 	bl	8011348 <nanf>
 8010b7e:	ed85 0a00 	vstr	s0, [r5]
 8010b82:	e7d1      	b.n	8010b28 <_scanf_float+0x3b0>
 8010b84:	4630      	mov	r0, r6
 8010b86:	4639      	mov	r1, r7
 8010b88:	f7f0 f86e 	bl	8000c68 <__aeabi_d2f>
 8010b8c:	6028      	str	r0, [r5, #0]
 8010b8e:	e7cb      	b.n	8010b28 <_scanf_float+0x3b0>
 8010b90:	f04f 0900 	mov.w	r9, #0
 8010b94:	e629      	b.n	80107ea <_scanf_float+0x72>
 8010b96:	bf00      	nop
 8010b98:	0801774b 	.word	0x0801774b
 8010b9c:	08017a07 	.word	0x08017a07

08010ba0 <std>:
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	b510      	push	{r4, lr}
 8010ba4:	4604      	mov	r4, r0
 8010ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8010baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010bae:	6083      	str	r3, [r0, #8]
 8010bb0:	8181      	strh	r1, [r0, #12]
 8010bb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8010bb4:	81c2      	strh	r2, [r0, #14]
 8010bb6:	6183      	str	r3, [r0, #24]
 8010bb8:	4619      	mov	r1, r3
 8010bba:	2208      	movs	r2, #8
 8010bbc:	305c      	adds	r0, #92	@ 0x5c
 8010bbe:	f000 fa79 	bl	80110b4 <memset>
 8010bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8010bf8 <std+0x58>)
 8010bc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8010bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8010bfc <std+0x5c>)
 8010bc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010bca:	4b0d      	ldr	r3, [pc, #52]	@ (8010c00 <std+0x60>)
 8010bcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010bce:	4b0d      	ldr	r3, [pc, #52]	@ (8010c04 <std+0x64>)
 8010bd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8010bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8010c08 <std+0x68>)
 8010bd4:	6224      	str	r4, [r4, #32]
 8010bd6:	429c      	cmp	r4, r3
 8010bd8:	d006      	beq.n	8010be8 <std+0x48>
 8010bda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010bde:	4294      	cmp	r4, r2
 8010be0:	d002      	beq.n	8010be8 <std+0x48>
 8010be2:	33d0      	adds	r3, #208	@ 0xd0
 8010be4:	429c      	cmp	r4, r3
 8010be6:	d105      	bne.n	8010bf4 <std+0x54>
 8010be8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bf0:	f7f9 b966 	b.w	8009ec0 <__retarget_lock_init_recursive>
 8010bf4:	bd10      	pop	{r4, pc}
 8010bf6:	bf00      	nop
 8010bf8:	08010f01 	.word	0x08010f01
 8010bfc:	08010f27 	.word	0x08010f27
 8010c00:	08010f5f 	.word	0x08010f5f
 8010c04:	08010f83 	.word	0x08010f83
 8010c08:	20005d54 	.word	0x20005d54

08010c0c <stdio_exit_handler>:
 8010c0c:	4a02      	ldr	r2, [pc, #8]	@ (8010c18 <stdio_exit_handler+0xc>)
 8010c0e:	4903      	ldr	r1, [pc, #12]	@ (8010c1c <stdio_exit_handler+0x10>)
 8010c10:	4803      	ldr	r0, [pc, #12]	@ (8010c20 <stdio_exit_handler+0x14>)
 8010c12:	f000 b869 	b.w	8010ce8 <_fwalk_sglue>
 8010c16:	bf00      	nop
 8010c18:	2000003c 	.word	0x2000003c
 8010c1c:	08013d09 	.word	0x08013d09
 8010c20:	200001b8 	.word	0x200001b8

08010c24 <cleanup_stdio>:
 8010c24:	6841      	ldr	r1, [r0, #4]
 8010c26:	4b0c      	ldr	r3, [pc, #48]	@ (8010c58 <cleanup_stdio+0x34>)
 8010c28:	4299      	cmp	r1, r3
 8010c2a:	b510      	push	{r4, lr}
 8010c2c:	4604      	mov	r4, r0
 8010c2e:	d001      	beq.n	8010c34 <cleanup_stdio+0x10>
 8010c30:	f003 f86a 	bl	8013d08 <_fflush_r>
 8010c34:	68a1      	ldr	r1, [r4, #8]
 8010c36:	4b09      	ldr	r3, [pc, #36]	@ (8010c5c <cleanup_stdio+0x38>)
 8010c38:	4299      	cmp	r1, r3
 8010c3a:	d002      	beq.n	8010c42 <cleanup_stdio+0x1e>
 8010c3c:	4620      	mov	r0, r4
 8010c3e:	f003 f863 	bl	8013d08 <_fflush_r>
 8010c42:	68e1      	ldr	r1, [r4, #12]
 8010c44:	4b06      	ldr	r3, [pc, #24]	@ (8010c60 <cleanup_stdio+0x3c>)
 8010c46:	4299      	cmp	r1, r3
 8010c48:	d004      	beq.n	8010c54 <cleanup_stdio+0x30>
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c50:	f003 b85a 	b.w	8013d08 <_fflush_r>
 8010c54:	bd10      	pop	{r4, pc}
 8010c56:	bf00      	nop
 8010c58:	20005d54 	.word	0x20005d54
 8010c5c:	20005dbc 	.word	0x20005dbc
 8010c60:	20005e24 	.word	0x20005e24

08010c64 <global_stdio_init.part.0>:
 8010c64:	b510      	push	{r4, lr}
 8010c66:	4b0b      	ldr	r3, [pc, #44]	@ (8010c94 <global_stdio_init.part.0+0x30>)
 8010c68:	4c0b      	ldr	r4, [pc, #44]	@ (8010c98 <global_stdio_init.part.0+0x34>)
 8010c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8010c9c <global_stdio_init.part.0+0x38>)
 8010c6c:	601a      	str	r2, [r3, #0]
 8010c6e:	4620      	mov	r0, r4
 8010c70:	2200      	movs	r2, #0
 8010c72:	2104      	movs	r1, #4
 8010c74:	f7ff ff94 	bl	8010ba0 <std>
 8010c78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010c7c:	2201      	movs	r2, #1
 8010c7e:	2109      	movs	r1, #9
 8010c80:	f7ff ff8e 	bl	8010ba0 <std>
 8010c84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010c88:	2202      	movs	r2, #2
 8010c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c8e:	2112      	movs	r1, #18
 8010c90:	f7ff bf86 	b.w	8010ba0 <std>
 8010c94:	20005e8c 	.word	0x20005e8c
 8010c98:	20005d54 	.word	0x20005d54
 8010c9c:	08010c0d 	.word	0x08010c0d

08010ca0 <__sfp_lock_acquire>:
 8010ca0:	4801      	ldr	r0, [pc, #4]	@ (8010ca8 <__sfp_lock_acquire+0x8>)
 8010ca2:	f7f9 b929 	b.w	8009ef8 <__retarget_lock_acquire_recursive>
 8010ca6:	bf00      	nop
 8010ca8:	20001bdc 	.word	0x20001bdc

08010cac <__sfp_lock_release>:
 8010cac:	4801      	ldr	r0, [pc, #4]	@ (8010cb4 <__sfp_lock_release+0x8>)
 8010cae:	f7f9 b93f 	b.w	8009f30 <__retarget_lock_release_recursive>
 8010cb2:	bf00      	nop
 8010cb4:	20001bdc 	.word	0x20001bdc

08010cb8 <__sinit>:
 8010cb8:	b510      	push	{r4, lr}
 8010cba:	4604      	mov	r4, r0
 8010cbc:	f7ff fff0 	bl	8010ca0 <__sfp_lock_acquire>
 8010cc0:	6a23      	ldr	r3, [r4, #32]
 8010cc2:	b11b      	cbz	r3, 8010ccc <__sinit+0x14>
 8010cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cc8:	f7ff bff0 	b.w	8010cac <__sfp_lock_release>
 8010ccc:	4b04      	ldr	r3, [pc, #16]	@ (8010ce0 <__sinit+0x28>)
 8010cce:	6223      	str	r3, [r4, #32]
 8010cd0:	4b04      	ldr	r3, [pc, #16]	@ (8010ce4 <__sinit+0x2c>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d1f5      	bne.n	8010cc4 <__sinit+0xc>
 8010cd8:	f7ff ffc4 	bl	8010c64 <global_stdio_init.part.0>
 8010cdc:	e7f2      	b.n	8010cc4 <__sinit+0xc>
 8010cde:	bf00      	nop
 8010ce0:	08010c25 	.word	0x08010c25
 8010ce4:	20005e8c 	.word	0x20005e8c

08010ce8 <_fwalk_sglue>:
 8010ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cec:	4607      	mov	r7, r0
 8010cee:	4688      	mov	r8, r1
 8010cf0:	4614      	mov	r4, r2
 8010cf2:	2600      	movs	r6, #0
 8010cf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010cf8:	f1b9 0901 	subs.w	r9, r9, #1
 8010cfc:	d505      	bpl.n	8010d0a <_fwalk_sglue+0x22>
 8010cfe:	6824      	ldr	r4, [r4, #0]
 8010d00:	2c00      	cmp	r4, #0
 8010d02:	d1f7      	bne.n	8010cf4 <_fwalk_sglue+0xc>
 8010d04:	4630      	mov	r0, r6
 8010d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d0a:	89ab      	ldrh	r3, [r5, #12]
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	d907      	bls.n	8010d20 <_fwalk_sglue+0x38>
 8010d10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d14:	3301      	adds	r3, #1
 8010d16:	d003      	beq.n	8010d20 <_fwalk_sglue+0x38>
 8010d18:	4629      	mov	r1, r5
 8010d1a:	4638      	mov	r0, r7
 8010d1c:	47c0      	blx	r8
 8010d1e:	4306      	orrs	r6, r0
 8010d20:	3568      	adds	r5, #104	@ 0x68
 8010d22:	e7e9      	b.n	8010cf8 <_fwalk_sglue+0x10>

08010d24 <iprintf>:
 8010d24:	b40f      	push	{r0, r1, r2, r3}
 8010d26:	b507      	push	{r0, r1, r2, lr}
 8010d28:	4906      	ldr	r1, [pc, #24]	@ (8010d44 <iprintf+0x20>)
 8010d2a:	ab04      	add	r3, sp, #16
 8010d2c:	6808      	ldr	r0, [r1, #0]
 8010d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d32:	6881      	ldr	r1, [r0, #8]
 8010d34:	9301      	str	r3, [sp, #4]
 8010d36:	f002 fcfd 	bl	8013734 <_vfiprintf_r>
 8010d3a:	b003      	add	sp, #12
 8010d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d40:	b004      	add	sp, #16
 8010d42:	4770      	bx	lr
 8010d44:	200001b4 	.word	0x200001b4

08010d48 <_puts_r>:
 8010d48:	6a03      	ldr	r3, [r0, #32]
 8010d4a:	b570      	push	{r4, r5, r6, lr}
 8010d4c:	6884      	ldr	r4, [r0, #8]
 8010d4e:	4605      	mov	r5, r0
 8010d50:	460e      	mov	r6, r1
 8010d52:	b90b      	cbnz	r3, 8010d58 <_puts_r+0x10>
 8010d54:	f7ff ffb0 	bl	8010cb8 <__sinit>
 8010d58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d5a:	07db      	lsls	r3, r3, #31
 8010d5c:	d405      	bmi.n	8010d6a <_puts_r+0x22>
 8010d5e:	89a3      	ldrh	r3, [r4, #12]
 8010d60:	0598      	lsls	r0, r3, #22
 8010d62:	d402      	bmi.n	8010d6a <_puts_r+0x22>
 8010d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d66:	f7f9 f8c7 	bl	8009ef8 <__retarget_lock_acquire_recursive>
 8010d6a:	89a3      	ldrh	r3, [r4, #12]
 8010d6c:	0719      	lsls	r1, r3, #28
 8010d6e:	d502      	bpl.n	8010d76 <_puts_r+0x2e>
 8010d70:	6923      	ldr	r3, [r4, #16]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d135      	bne.n	8010de2 <_puts_r+0x9a>
 8010d76:	4621      	mov	r1, r4
 8010d78:	4628      	mov	r0, r5
 8010d7a:	f000 f945 	bl	8011008 <__swsetup_r>
 8010d7e:	b380      	cbz	r0, 8010de2 <_puts_r+0x9a>
 8010d80:	f04f 35ff 	mov.w	r5, #4294967295
 8010d84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d86:	07da      	lsls	r2, r3, #31
 8010d88:	d405      	bmi.n	8010d96 <_puts_r+0x4e>
 8010d8a:	89a3      	ldrh	r3, [r4, #12]
 8010d8c:	059b      	lsls	r3, r3, #22
 8010d8e:	d402      	bmi.n	8010d96 <_puts_r+0x4e>
 8010d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d92:	f7f9 f8cd 	bl	8009f30 <__retarget_lock_release_recursive>
 8010d96:	4628      	mov	r0, r5
 8010d98:	bd70      	pop	{r4, r5, r6, pc}
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	da04      	bge.n	8010da8 <_puts_r+0x60>
 8010d9e:	69a2      	ldr	r2, [r4, #24]
 8010da0:	429a      	cmp	r2, r3
 8010da2:	dc17      	bgt.n	8010dd4 <_puts_r+0x8c>
 8010da4:	290a      	cmp	r1, #10
 8010da6:	d015      	beq.n	8010dd4 <_puts_r+0x8c>
 8010da8:	6823      	ldr	r3, [r4, #0]
 8010daa:	1c5a      	adds	r2, r3, #1
 8010dac:	6022      	str	r2, [r4, #0]
 8010dae:	7019      	strb	r1, [r3, #0]
 8010db0:	68a3      	ldr	r3, [r4, #8]
 8010db2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010db6:	3b01      	subs	r3, #1
 8010db8:	60a3      	str	r3, [r4, #8]
 8010dba:	2900      	cmp	r1, #0
 8010dbc:	d1ed      	bne.n	8010d9a <_puts_r+0x52>
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	da11      	bge.n	8010de6 <_puts_r+0x9e>
 8010dc2:	4622      	mov	r2, r4
 8010dc4:	210a      	movs	r1, #10
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f000 f8df 	bl	8010f8a <__swbuf_r>
 8010dcc:	3001      	adds	r0, #1
 8010dce:	d0d7      	beq.n	8010d80 <_puts_r+0x38>
 8010dd0:	250a      	movs	r5, #10
 8010dd2:	e7d7      	b.n	8010d84 <_puts_r+0x3c>
 8010dd4:	4622      	mov	r2, r4
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	f000 f8d7 	bl	8010f8a <__swbuf_r>
 8010ddc:	3001      	adds	r0, #1
 8010dde:	d1e7      	bne.n	8010db0 <_puts_r+0x68>
 8010de0:	e7ce      	b.n	8010d80 <_puts_r+0x38>
 8010de2:	3e01      	subs	r6, #1
 8010de4:	e7e4      	b.n	8010db0 <_puts_r+0x68>
 8010de6:	6823      	ldr	r3, [r4, #0]
 8010de8:	1c5a      	adds	r2, r3, #1
 8010dea:	6022      	str	r2, [r4, #0]
 8010dec:	220a      	movs	r2, #10
 8010dee:	701a      	strb	r2, [r3, #0]
 8010df0:	e7ee      	b.n	8010dd0 <_puts_r+0x88>
	...

08010df4 <puts>:
 8010df4:	4b02      	ldr	r3, [pc, #8]	@ (8010e00 <puts+0xc>)
 8010df6:	4601      	mov	r1, r0
 8010df8:	6818      	ldr	r0, [r3, #0]
 8010dfa:	f7ff bfa5 	b.w	8010d48 <_puts_r>
 8010dfe:	bf00      	nop
 8010e00:	200001b4 	.word	0x200001b4

08010e04 <sniprintf>:
 8010e04:	b40c      	push	{r2, r3}
 8010e06:	b530      	push	{r4, r5, lr}
 8010e08:	4b17      	ldr	r3, [pc, #92]	@ (8010e68 <sniprintf+0x64>)
 8010e0a:	1e0c      	subs	r4, r1, #0
 8010e0c:	681d      	ldr	r5, [r3, #0]
 8010e0e:	b09d      	sub	sp, #116	@ 0x74
 8010e10:	da08      	bge.n	8010e24 <sniprintf+0x20>
 8010e12:	238b      	movs	r3, #139	@ 0x8b
 8010e14:	602b      	str	r3, [r5, #0]
 8010e16:	f04f 30ff 	mov.w	r0, #4294967295
 8010e1a:	b01d      	add	sp, #116	@ 0x74
 8010e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e20:	b002      	add	sp, #8
 8010e22:	4770      	bx	lr
 8010e24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010e28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010e2c:	bf14      	ite	ne
 8010e2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010e32:	4623      	moveq	r3, r4
 8010e34:	9304      	str	r3, [sp, #16]
 8010e36:	9307      	str	r3, [sp, #28]
 8010e38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010e3c:	9002      	str	r0, [sp, #8]
 8010e3e:	9006      	str	r0, [sp, #24]
 8010e40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010e44:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010e46:	ab21      	add	r3, sp, #132	@ 0x84
 8010e48:	a902      	add	r1, sp, #8
 8010e4a:	4628      	mov	r0, r5
 8010e4c:	9301      	str	r3, [sp, #4]
 8010e4e:	f002 f97f 	bl	8013150 <_svfiprintf_r>
 8010e52:	1c43      	adds	r3, r0, #1
 8010e54:	bfbc      	itt	lt
 8010e56:	238b      	movlt	r3, #139	@ 0x8b
 8010e58:	602b      	strlt	r3, [r5, #0]
 8010e5a:	2c00      	cmp	r4, #0
 8010e5c:	d0dd      	beq.n	8010e1a <sniprintf+0x16>
 8010e5e:	9b02      	ldr	r3, [sp, #8]
 8010e60:	2200      	movs	r2, #0
 8010e62:	701a      	strb	r2, [r3, #0]
 8010e64:	e7d9      	b.n	8010e1a <sniprintf+0x16>
 8010e66:	bf00      	nop
 8010e68:	200001b4 	.word	0x200001b4

08010e6c <siprintf>:
 8010e6c:	b40e      	push	{r1, r2, r3}
 8010e6e:	b500      	push	{lr}
 8010e70:	b09c      	sub	sp, #112	@ 0x70
 8010e72:	ab1d      	add	r3, sp, #116	@ 0x74
 8010e74:	9002      	str	r0, [sp, #8]
 8010e76:	9006      	str	r0, [sp, #24]
 8010e78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010e7c:	4809      	ldr	r0, [pc, #36]	@ (8010ea4 <siprintf+0x38>)
 8010e7e:	9107      	str	r1, [sp, #28]
 8010e80:	9104      	str	r1, [sp, #16]
 8010e82:	4909      	ldr	r1, [pc, #36]	@ (8010ea8 <siprintf+0x3c>)
 8010e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e88:	9105      	str	r1, [sp, #20]
 8010e8a:	6800      	ldr	r0, [r0, #0]
 8010e8c:	9301      	str	r3, [sp, #4]
 8010e8e:	a902      	add	r1, sp, #8
 8010e90:	f002 f95e 	bl	8013150 <_svfiprintf_r>
 8010e94:	9b02      	ldr	r3, [sp, #8]
 8010e96:	2200      	movs	r2, #0
 8010e98:	701a      	strb	r2, [r3, #0]
 8010e9a:	b01c      	add	sp, #112	@ 0x70
 8010e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ea0:	b003      	add	sp, #12
 8010ea2:	4770      	bx	lr
 8010ea4:	200001b4 	.word	0x200001b4
 8010ea8:	ffff0208 	.word	0xffff0208

08010eac <siscanf>:
 8010eac:	b40e      	push	{r1, r2, r3}
 8010eae:	b530      	push	{r4, r5, lr}
 8010eb0:	b09c      	sub	sp, #112	@ 0x70
 8010eb2:	ac1f      	add	r4, sp, #124	@ 0x7c
 8010eb4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8010eb8:	f854 5b04 	ldr.w	r5, [r4], #4
 8010ebc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010ec0:	9002      	str	r0, [sp, #8]
 8010ec2:	9006      	str	r0, [sp, #24]
 8010ec4:	f7ef fa14 	bl	80002f0 <strlen>
 8010ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8010ef8 <siscanf+0x4c>)
 8010eca:	9003      	str	r0, [sp, #12]
 8010ecc:	9007      	str	r0, [sp, #28]
 8010ece:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ed0:	480a      	ldr	r0, [pc, #40]	@ (8010efc <siscanf+0x50>)
 8010ed2:	9401      	str	r4, [sp, #4]
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010ed8:	9314      	str	r3, [sp, #80]	@ 0x50
 8010eda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010ede:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010ee2:	462a      	mov	r2, r5
 8010ee4:	4623      	mov	r3, r4
 8010ee6:	a902      	add	r1, sp, #8
 8010ee8:	6800      	ldr	r0, [r0, #0]
 8010eea:	f002 fa85 	bl	80133f8 <__ssvfiscanf_r>
 8010eee:	b01c      	add	sp, #112	@ 0x70
 8010ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ef4:	b003      	add	sp, #12
 8010ef6:	4770      	bx	lr
 8010ef8:	08010f23 	.word	0x08010f23
 8010efc:	200001b4 	.word	0x200001b4

08010f00 <__sread>:
 8010f00:	b510      	push	{r4, lr}
 8010f02:	460c      	mov	r4, r1
 8010f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f08:	f000 f9a0 	bl	801124c <_read_r>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	bfab      	itete	ge
 8010f10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010f12:	89a3      	ldrhlt	r3, [r4, #12]
 8010f14:	181b      	addge	r3, r3, r0
 8010f16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010f1a:	bfac      	ite	ge
 8010f1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010f1e:	81a3      	strhlt	r3, [r4, #12]
 8010f20:	bd10      	pop	{r4, pc}

08010f22 <__seofread>:
 8010f22:	2000      	movs	r0, #0
 8010f24:	4770      	bx	lr

08010f26 <__swrite>:
 8010f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f2a:	461f      	mov	r7, r3
 8010f2c:	898b      	ldrh	r3, [r1, #12]
 8010f2e:	05db      	lsls	r3, r3, #23
 8010f30:	4605      	mov	r5, r0
 8010f32:	460c      	mov	r4, r1
 8010f34:	4616      	mov	r6, r2
 8010f36:	d505      	bpl.n	8010f44 <__swrite+0x1e>
 8010f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f3c:	2302      	movs	r3, #2
 8010f3e:	2200      	movs	r2, #0
 8010f40:	f000 f972 	bl	8011228 <_lseek_r>
 8010f44:	89a3      	ldrh	r3, [r4, #12]
 8010f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010f4e:	81a3      	strh	r3, [r4, #12]
 8010f50:	4632      	mov	r2, r6
 8010f52:	463b      	mov	r3, r7
 8010f54:	4628      	mov	r0, r5
 8010f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f5a:	f000 b999 	b.w	8011290 <_write_r>

08010f5e <__sseek>:
 8010f5e:	b510      	push	{r4, lr}
 8010f60:	460c      	mov	r4, r1
 8010f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f66:	f000 f95f 	bl	8011228 <_lseek_r>
 8010f6a:	1c43      	adds	r3, r0, #1
 8010f6c:	89a3      	ldrh	r3, [r4, #12]
 8010f6e:	bf15      	itete	ne
 8010f70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010f72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010f76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010f7a:	81a3      	strheq	r3, [r4, #12]
 8010f7c:	bf18      	it	ne
 8010f7e:	81a3      	strhne	r3, [r4, #12]
 8010f80:	bd10      	pop	{r4, pc}

08010f82 <__sclose>:
 8010f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f86:	f000 b8e9 	b.w	801115c <_close_r>

08010f8a <__swbuf_r>:
 8010f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f8c:	460e      	mov	r6, r1
 8010f8e:	4614      	mov	r4, r2
 8010f90:	4605      	mov	r5, r0
 8010f92:	b118      	cbz	r0, 8010f9c <__swbuf_r+0x12>
 8010f94:	6a03      	ldr	r3, [r0, #32]
 8010f96:	b90b      	cbnz	r3, 8010f9c <__swbuf_r+0x12>
 8010f98:	f7ff fe8e 	bl	8010cb8 <__sinit>
 8010f9c:	69a3      	ldr	r3, [r4, #24]
 8010f9e:	60a3      	str	r3, [r4, #8]
 8010fa0:	89a3      	ldrh	r3, [r4, #12]
 8010fa2:	071a      	lsls	r2, r3, #28
 8010fa4:	d501      	bpl.n	8010faa <__swbuf_r+0x20>
 8010fa6:	6923      	ldr	r3, [r4, #16]
 8010fa8:	b943      	cbnz	r3, 8010fbc <__swbuf_r+0x32>
 8010faa:	4621      	mov	r1, r4
 8010fac:	4628      	mov	r0, r5
 8010fae:	f000 f82b 	bl	8011008 <__swsetup_r>
 8010fb2:	b118      	cbz	r0, 8010fbc <__swbuf_r+0x32>
 8010fb4:	f04f 37ff 	mov.w	r7, #4294967295
 8010fb8:	4638      	mov	r0, r7
 8010fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fbc:	6823      	ldr	r3, [r4, #0]
 8010fbe:	6922      	ldr	r2, [r4, #16]
 8010fc0:	1a98      	subs	r0, r3, r2
 8010fc2:	6963      	ldr	r3, [r4, #20]
 8010fc4:	b2f6      	uxtb	r6, r6
 8010fc6:	4283      	cmp	r3, r0
 8010fc8:	4637      	mov	r7, r6
 8010fca:	dc05      	bgt.n	8010fd8 <__swbuf_r+0x4e>
 8010fcc:	4621      	mov	r1, r4
 8010fce:	4628      	mov	r0, r5
 8010fd0:	f002 fe9a 	bl	8013d08 <_fflush_r>
 8010fd4:	2800      	cmp	r0, #0
 8010fd6:	d1ed      	bne.n	8010fb4 <__swbuf_r+0x2a>
 8010fd8:	68a3      	ldr	r3, [r4, #8]
 8010fda:	3b01      	subs	r3, #1
 8010fdc:	60a3      	str	r3, [r4, #8]
 8010fde:	6823      	ldr	r3, [r4, #0]
 8010fe0:	1c5a      	adds	r2, r3, #1
 8010fe2:	6022      	str	r2, [r4, #0]
 8010fe4:	701e      	strb	r6, [r3, #0]
 8010fe6:	6962      	ldr	r2, [r4, #20]
 8010fe8:	1c43      	adds	r3, r0, #1
 8010fea:	429a      	cmp	r2, r3
 8010fec:	d004      	beq.n	8010ff8 <__swbuf_r+0x6e>
 8010fee:	89a3      	ldrh	r3, [r4, #12]
 8010ff0:	07db      	lsls	r3, r3, #31
 8010ff2:	d5e1      	bpl.n	8010fb8 <__swbuf_r+0x2e>
 8010ff4:	2e0a      	cmp	r6, #10
 8010ff6:	d1df      	bne.n	8010fb8 <__swbuf_r+0x2e>
 8010ff8:	4621      	mov	r1, r4
 8010ffa:	4628      	mov	r0, r5
 8010ffc:	f002 fe84 	bl	8013d08 <_fflush_r>
 8011000:	2800      	cmp	r0, #0
 8011002:	d0d9      	beq.n	8010fb8 <__swbuf_r+0x2e>
 8011004:	e7d6      	b.n	8010fb4 <__swbuf_r+0x2a>
	...

08011008 <__swsetup_r>:
 8011008:	b538      	push	{r3, r4, r5, lr}
 801100a:	4b29      	ldr	r3, [pc, #164]	@ (80110b0 <__swsetup_r+0xa8>)
 801100c:	4605      	mov	r5, r0
 801100e:	6818      	ldr	r0, [r3, #0]
 8011010:	460c      	mov	r4, r1
 8011012:	b118      	cbz	r0, 801101c <__swsetup_r+0x14>
 8011014:	6a03      	ldr	r3, [r0, #32]
 8011016:	b90b      	cbnz	r3, 801101c <__swsetup_r+0x14>
 8011018:	f7ff fe4e 	bl	8010cb8 <__sinit>
 801101c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011020:	0719      	lsls	r1, r3, #28
 8011022:	d422      	bmi.n	801106a <__swsetup_r+0x62>
 8011024:	06da      	lsls	r2, r3, #27
 8011026:	d407      	bmi.n	8011038 <__swsetup_r+0x30>
 8011028:	2209      	movs	r2, #9
 801102a:	602a      	str	r2, [r5, #0]
 801102c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011030:	81a3      	strh	r3, [r4, #12]
 8011032:	f04f 30ff 	mov.w	r0, #4294967295
 8011036:	e033      	b.n	80110a0 <__swsetup_r+0x98>
 8011038:	0758      	lsls	r0, r3, #29
 801103a:	d512      	bpl.n	8011062 <__swsetup_r+0x5a>
 801103c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801103e:	b141      	cbz	r1, 8011052 <__swsetup_r+0x4a>
 8011040:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011044:	4299      	cmp	r1, r3
 8011046:	d002      	beq.n	801104e <__swsetup_r+0x46>
 8011048:	4628      	mov	r0, r5
 801104a:	f000 ffd1 	bl	8011ff0 <_free_r>
 801104e:	2300      	movs	r3, #0
 8011050:	6363      	str	r3, [r4, #52]	@ 0x34
 8011052:	89a3      	ldrh	r3, [r4, #12]
 8011054:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011058:	81a3      	strh	r3, [r4, #12]
 801105a:	2300      	movs	r3, #0
 801105c:	6063      	str	r3, [r4, #4]
 801105e:	6923      	ldr	r3, [r4, #16]
 8011060:	6023      	str	r3, [r4, #0]
 8011062:	89a3      	ldrh	r3, [r4, #12]
 8011064:	f043 0308 	orr.w	r3, r3, #8
 8011068:	81a3      	strh	r3, [r4, #12]
 801106a:	6923      	ldr	r3, [r4, #16]
 801106c:	b94b      	cbnz	r3, 8011082 <__swsetup_r+0x7a>
 801106e:	89a3      	ldrh	r3, [r4, #12]
 8011070:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011078:	d003      	beq.n	8011082 <__swsetup_r+0x7a>
 801107a:	4621      	mov	r1, r4
 801107c:	4628      	mov	r0, r5
 801107e:	f002 fe91 	bl	8013da4 <__smakebuf_r>
 8011082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011086:	f013 0201 	ands.w	r2, r3, #1
 801108a:	d00a      	beq.n	80110a2 <__swsetup_r+0x9a>
 801108c:	2200      	movs	r2, #0
 801108e:	60a2      	str	r2, [r4, #8]
 8011090:	6962      	ldr	r2, [r4, #20]
 8011092:	4252      	negs	r2, r2
 8011094:	61a2      	str	r2, [r4, #24]
 8011096:	6922      	ldr	r2, [r4, #16]
 8011098:	b942      	cbnz	r2, 80110ac <__swsetup_r+0xa4>
 801109a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801109e:	d1c5      	bne.n	801102c <__swsetup_r+0x24>
 80110a0:	bd38      	pop	{r3, r4, r5, pc}
 80110a2:	0799      	lsls	r1, r3, #30
 80110a4:	bf58      	it	pl
 80110a6:	6962      	ldrpl	r2, [r4, #20]
 80110a8:	60a2      	str	r2, [r4, #8]
 80110aa:	e7f4      	b.n	8011096 <__swsetup_r+0x8e>
 80110ac:	2000      	movs	r0, #0
 80110ae:	e7f7      	b.n	80110a0 <__swsetup_r+0x98>
 80110b0:	200001b4 	.word	0x200001b4

080110b4 <memset>:
 80110b4:	4402      	add	r2, r0
 80110b6:	4603      	mov	r3, r0
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d100      	bne.n	80110be <memset+0xa>
 80110bc:	4770      	bx	lr
 80110be:	f803 1b01 	strb.w	r1, [r3], #1
 80110c2:	e7f9      	b.n	80110b8 <memset+0x4>

080110c4 <strchr>:
 80110c4:	b2c9      	uxtb	r1, r1
 80110c6:	4603      	mov	r3, r0
 80110c8:	4618      	mov	r0, r3
 80110ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110ce:	b112      	cbz	r2, 80110d6 <strchr+0x12>
 80110d0:	428a      	cmp	r2, r1
 80110d2:	d1f9      	bne.n	80110c8 <strchr+0x4>
 80110d4:	4770      	bx	lr
 80110d6:	2900      	cmp	r1, #0
 80110d8:	bf18      	it	ne
 80110da:	2000      	movne	r0, #0
 80110dc:	4770      	bx	lr

080110de <strncmp>:
 80110de:	b510      	push	{r4, lr}
 80110e0:	b16a      	cbz	r2, 80110fe <strncmp+0x20>
 80110e2:	3901      	subs	r1, #1
 80110e4:	1884      	adds	r4, r0, r2
 80110e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d103      	bne.n	80110fa <strncmp+0x1c>
 80110f2:	42a0      	cmp	r0, r4
 80110f4:	d001      	beq.n	80110fa <strncmp+0x1c>
 80110f6:	2a00      	cmp	r2, #0
 80110f8:	d1f5      	bne.n	80110e6 <strncmp+0x8>
 80110fa:	1ad0      	subs	r0, r2, r3
 80110fc:	bd10      	pop	{r4, pc}
 80110fe:	4610      	mov	r0, r2
 8011100:	e7fc      	b.n	80110fc <strncmp+0x1e>

08011102 <strncpy>:
 8011102:	b510      	push	{r4, lr}
 8011104:	3901      	subs	r1, #1
 8011106:	4603      	mov	r3, r0
 8011108:	b132      	cbz	r2, 8011118 <strncpy+0x16>
 801110a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801110e:	f803 4b01 	strb.w	r4, [r3], #1
 8011112:	3a01      	subs	r2, #1
 8011114:	2c00      	cmp	r4, #0
 8011116:	d1f7      	bne.n	8011108 <strncpy+0x6>
 8011118:	441a      	add	r2, r3
 801111a:	2100      	movs	r1, #0
 801111c:	4293      	cmp	r3, r2
 801111e:	d100      	bne.n	8011122 <strncpy+0x20>
 8011120:	bd10      	pop	{r4, pc}
 8011122:	f803 1b01 	strb.w	r1, [r3], #1
 8011126:	e7f9      	b.n	801111c <strncpy+0x1a>

08011128 <strstr>:
 8011128:	780a      	ldrb	r2, [r1, #0]
 801112a:	b570      	push	{r4, r5, r6, lr}
 801112c:	b96a      	cbnz	r2, 801114a <strstr+0x22>
 801112e:	bd70      	pop	{r4, r5, r6, pc}
 8011130:	429a      	cmp	r2, r3
 8011132:	d109      	bne.n	8011148 <strstr+0x20>
 8011134:	460c      	mov	r4, r1
 8011136:	4605      	mov	r5, r0
 8011138:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801113c:	2b00      	cmp	r3, #0
 801113e:	d0f6      	beq.n	801112e <strstr+0x6>
 8011140:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011144:	429e      	cmp	r6, r3
 8011146:	d0f7      	beq.n	8011138 <strstr+0x10>
 8011148:	3001      	adds	r0, #1
 801114a:	7803      	ldrb	r3, [r0, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d1ef      	bne.n	8011130 <strstr+0x8>
 8011150:	4618      	mov	r0, r3
 8011152:	e7ec      	b.n	801112e <strstr+0x6>

08011154 <_localeconv_r>:
 8011154:	4800      	ldr	r0, [pc, #0]	@ (8011158 <_localeconv_r+0x4>)
 8011156:	4770      	bx	lr
 8011158:	20000138 	.word	0x20000138

0801115c <_close_r>:
 801115c:	b538      	push	{r3, r4, r5, lr}
 801115e:	4d06      	ldr	r5, [pc, #24]	@ (8011178 <_close_r+0x1c>)
 8011160:	2300      	movs	r3, #0
 8011162:	4604      	mov	r4, r0
 8011164:	4608      	mov	r0, r1
 8011166:	602b      	str	r3, [r5, #0]
 8011168:	f7f6 f870 	bl	800724c <_close>
 801116c:	1c43      	adds	r3, r0, #1
 801116e:	d102      	bne.n	8011176 <_close_r+0x1a>
 8011170:	682b      	ldr	r3, [r5, #0]
 8011172:	b103      	cbz	r3, 8011176 <_close_r+0x1a>
 8011174:	6023      	str	r3, [r4, #0]
 8011176:	bd38      	pop	{r3, r4, r5, pc}
 8011178:	20005e90 	.word	0x20005e90

0801117c <_reclaim_reent>:
 801117c:	4b29      	ldr	r3, [pc, #164]	@ (8011224 <_reclaim_reent+0xa8>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4283      	cmp	r3, r0
 8011182:	b570      	push	{r4, r5, r6, lr}
 8011184:	4604      	mov	r4, r0
 8011186:	d04b      	beq.n	8011220 <_reclaim_reent+0xa4>
 8011188:	69c3      	ldr	r3, [r0, #28]
 801118a:	b1ab      	cbz	r3, 80111b8 <_reclaim_reent+0x3c>
 801118c:	68db      	ldr	r3, [r3, #12]
 801118e:	b16b      	cbz	r3, 80111ac <_reclaim_reent+0x30>
 8011190:	2500      	movs	r5, #0
 8011192:	69e3      	ldr	r3, [r4, #28]
 8011194:	68db      	ldr	r3, [r3, #12]
 8011196:	5959      	ldr	r1, [r3, r5]
 8011198:	2900      	cmp	r1, #0
 801119a:	d13b      	bne.n	8011214 <_reclaim_reent+0x98>
 801119c:	3504      	adds	r5, #4
 801119e:	2d80      	cmp	r5, #128	@ 0x80
 80111a0:	d1f7      	bne.n	8011192 <_reclaim_reent+0x16>
 80111a2:	69e3      	ldr	r3, [r4, #28]
 80111a4:	4620      	mov	r0, r4
 80111a6:	68d9      	ldr	r1, [r3, #12]
 80111a8:	f000 ff22 	bl	8011ff0 <_free_r>
 80111ac:	69e3      	ldr	r3, [r4, #28]
 80111ae:	6819      	ldr	r1, [r3, #0]
 80111b0:	b111      	cbz	r1, 80111b8 <_reclaim_reent+0x3c>
 80111b2:	4620      	mov	r0, r4
 80111b4:	f000 ff1c 	bl	8011ff0 <_free_r>
 80111b8:	6961      	ldr	r1, [r4, #20]
 80111ba:	b111      	cbz	r1, 80111c2 <_reclaim_reent+0x46>
 80111bc:	4620      	mov	r0, r4
 80111be:	f000 ff17 	bl	8011ff0 <_free_r>
 80111c2:	69e1      	ldr	r1, [r4, #28]
 80111c4:	b111      	cbz	r1, 80111cc <_reclaim_reent+0x50>
 80111c6:	4620      	mov	r0, r4
 80111c8:	f000 ff12 	bl	8011ff0 <_free_r>
 80111cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80111ce:	b111      	cbz	r1, 80111d6 <_reclaim_reent+0x5a>
 80111d0:	4620      	mov	r0, r4
 80111d2:	f000 ff0d 	bl	8011ff0 <_free_r>
 80111d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80111d8:	b111      	cbz	r1, 80111e0 <_reclaim_reent+0x64>
 80111da:	4620      	mov	r0, r4
 80111dc:	f000 ff08 	bl	8011ff0 <_free_r>
 80111e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80111e2:	b111      	cbz	r1, 80111ea <_reclaim_reent+0x6e>
 80111e4:	4620      	mov	r0, r4
 80111e6:	f000 ff03 	bl	8011ff0 <_free_r>
 80111ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80111ec:	b111      	cbz	r1, 80111f4 <_reclaim_reent+0x78>
 80111ee:	4620      	mov	r0, r4
 80111f0:	f000 fefe 	bl	8011ff0 <_free_r>
 80111f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80111f6:	b111      	cbz	r1, 80111fe <_reclaim_reent+0x82>
 80111f8:	4620      	mov	r0, r4
 80111fa:	f000 fef9 	bl	8011ff0 <_free_r>
 80111fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011200:	b111      	cbz	r1, 8011208 <_reclaim_reent+0x8c>
 8011202:	4620      	mov	r0, r4
 8011204:	f000 fef4 	bl	8011ff0 <_free_r>
 8011208:	6a23      	ldr	r3, [r4, #32]
 801120a:	b14b      	cbz	r3, 8011220 <_reclaim_reent+0xa4>
 801120c:	4620      	mov	r0, r4
 801120e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011212:	4718      	bx	r3
 8011214:	680e      	ldr	r6, [r1, #0]
 8011216:	4620      	mov	r0, r4
 8011218:	f000 feea 	bl	8011ff0 <_free_r>
 801121c:	4631      	mov	r1, r6
 801121e:	e7bb      	b.n	8011198 <_reclaim_reent+0x1c>
 8011220:	bd70      	pop	{r4, r5, r6, pc}
 8011222:	bf00      	nop
 8011224:	200001b4 	.word	0x200001b4

08011228 <_lseek_r>:
 8011228:	b538      	push	{r3, r4, r5, lr}
 801122a:	4d07      	ldr	r5, [pc, #28]	@ (8011248 <_lseek_r+0x20>)
 801122c:	4604      	mov	r4, r0
 801122e:	4608      	mov	r0, r1
 8011230:	4611      	mov	r1, r2
 8011232:	2200      	movs	r2, #0
 8011234:	602a      	str	r2, [r5, #0]
 8011236:	461a      	mov	r2, r3
 8011238:	f7f6 f814 	bl	8007264 <_lseek>
 801123c:	1c43      	adds	r3, r0, #1
 801123e:	d102      	bne.n	8011246 <_lseek_r+0x1e>
 8011240:	682b      	ldr	r3, [r5, #0]
 8011242:	b103      	cbz	r3, 8011246 <_lseek_r+0x1e>
 8011244:	6023      	str	r3, [r4, #0]
 8011246:	bd38      	pop	{r3, r4, r5, pc}
 8011248:	20005e90 	.word	0x20005e90

0801124c <_read_r>:
 801124c:	b538      	push	{r3, r4, r5, lr}
 801124e:	4d07      	ldr	r5, [pc, #28]	@ (801126c <_read_r+0x20>)
 8011250:	4604      	mov	r4, r0
 8011252:	4608      	mov	r0, r1
 8011254:	4611      	mov	r1, r2
 8011256:	2200      	movs	r2, #0
 8011258:	602a      	str	r2, [r5, #0]
 801125a:	461a      	mov	r2, r3
 801125c:	f7f6 f9b4 	bl	80075c8 <_read>
 8011260:	1c43      	adds	r3, r0, #1
 8011262:	d102      	bne.n	801126a <_read_r+0x1e>
 8011264:	682b      	ldr	r3, [r5, #0]
 8011266:	b103      	cbz	r3, 801126a <_read_r+0x1e>
 8011268:	6023      	str	r3, [r4, #0]
 801126a:	bd38      	pop	{r3, r4, r5, pc}
 801126c:	20005e90 	.word	0x20005e90

08011270 <_sbrk_r>:
 8011270:	b538      	push	{r3, r4, r5, lr}
 8011272:	4d06      	ldr	r5, [pc, #24]	@ (801128c <_sbrk_r+0x1c>)
 8011274:	2300      	movs	r3, #0
 8011276:	4604      	mov	r4, r0
 8011278:	4608      	mov	r0, r1
 801127a:	602b      	str	r3, [r5, #0]
 801127c:	f7f5 fff4 	bl	8007268 <_sbrk>
 8011280:	1c43      	adds	r3, r0, #1
 8011282:	d102      	bne.n	801128a <_sbrk_r+0x1a>
 8011284:	682b      	ldr	r3, [r5, #0]
 8011286:	b103      	cbz	r3, 801128a <_sbrk_r+0x1a>
 8011288:	6023      	str	r3, [r4, #0]
 801128a:	bd38      	pop	{r3, r4, r5, pc}
 801128c:	20005e90 	.word	0x20005e90

08011290 <_write_r>:
 8011290:	b538      	push	{r3, r4, r5, lr}
 8011292:	4d07      	ldr	r5, [pc, #28]	@ (80112b0 <_write_r+0x20>)
 8011294:	4604      	mov	r4, r0
 8011296:	4608      	mov	r0, r1
 8011298:	4611      	mov	r1, r2
 801129a:	2200      	movs	r2, #0
 801129c:	602a      	str	r2, [r5, #0]
 801129e:	461a      	mov	r2, r3
 80112a0:	f7f2 febc 	bl	800401c <_write>
 80112a4:	1c43      	adds	r3, r0, #1
 80112a6:	d102      	bne.n	80112ae <_write_r+0x1e>
 80112a8:	682b      	ldr	r3, [r5, #0]
 80112aa:	b103      	cbz	r3, 80112ae <_write_r+0x1e>
 80112ac:	6023      	str	r3, [r4, #0]
 80112ae:	bd38      	pop	{r3, r4, r5, pc}
 80112b0:	20005e90 	.word	0x20005e90

080112b4 <__errno>:
 80112b4:	4b01      	ldr	r3, [pc, #4]	@ (80112bc <__errno+0x8>)
 80112b6:	6818      	ldr	r0, [r3, #0]
 80112b8:	4770      	bx	lr
 80112ba:	bf00      	nop
 80112bc:	200001b4 	.word	0x200001b4

080112c0 <__libc_init_array>:
 80112c0:	b570      	push	{r4, r5, r6, lr}
 80112c2:	4d0d      	ldr	r5, [pc, #52]	@ (80112f8 <__libc_init_array+0x38>)
 80112c4:	4c0d      	ldr	r4, [pc, #52]	@ (80112fc <__libc_init_array+0x3c>)
 80112c6:	1b64      	subs	r4, r4, r5
 80112c8:	10a4      	asrs	r4, r4, #2
 80112ca:	2600      	movs	r6, #0
 80112cc:	42a6      	cmp	r6, r4
 80112ce:	d109      	bne.n	80112e4 <__libc_init_array+0x24>
 80112d0:	4d0b      	ldr	r5, [pc, #44]	@ (8011300 <__libc_init_array+0x40>)
 80112d2:	4c0c      	ldr	r4, [pc, #48]	@ (8011304 <__libc_init_array+0x44>)
 80112d4:	f002 ff88 	bl	80141e8 <_init>
 80112d8:	1b64      	subs	r4, r4, r5
 80112da:	10a4      	asrs	r4, r4, #2
 80112dc:	2600      	movs	r6, #0
 80112de:	42a6      	cmp	r6, r4
 80112e0:	d105      	bne.n	80112ee <__libc_init_array+0x2e>
 80112e2:	bd70      	pop	{r4, r5, r6, pc}
 80112e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80112e8:	4798      	blx	r3
 80112ea:	3601      	adds	r6, #1
 80112ec:	e7ee      	b.n	80112cc <__libc_init_array+0xc>
 80112ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80112f2:	4798      	blx	r3
 80112f4:	3601      	adds	r6, #1
 80112f6:	e7f2      	b.n	80112de <__libc_init_array+0x1e>
 80112f8:	08017a10 	.word	0x08017a10
 80112fc:	08017a10 	.word	0x08017a10
 8011300:	08017a10 	.word	0x08017a10
 8011304:	08017a14 	.word	0x08017a14

08011308 <strcpy>:
 8011308:	4603      	mov	r3, r0
 801130a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801130e:	f803 2b01 	strb.w	r2, [r3], #1
 8011312:	2a00      	cmp	r2, #0
 8011314:	d1f9      	bne.n	801130a <strcpy+0x2>
 8011316:	4770      	bx	lr

08011318 <memcpy>:
 8011318:	440a      	add	r2, r1
 801131a:	4291      	cmp	r1, r2
 801131c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011320:	d100      	bne.n	8011324 <memcpy+0xc>
 8011322:	4770      	bx	lr
 8011324:	b510      	push	{r4, lr}
 8011326:	f811 4b01 	ldrb.w	r4, [r1], #1
 801132a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801132e:	4291      	cmp	r1, r2
 8011330:	d1f9      	bne.n	8011326 <memcpy+0xe>
 8011332:	bd10      	pop	{r4, pc}
 8011334:	0000      	movs	r0, r0
	...

08011338 <nan>:
 8011338:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011340 <nan+0x8>
 801133c:	4770      	bx	lr
 801133e:	bf00      	nop
 8011340:	00000000 	.word	0x00000000
 8011344:	7ff80000 	.word	0x7ff80000

08011348 <nanf>:
 8011348:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011350 <nanf+0x8>
 801134c:	4770      	bx	lr
 801134e:	bf00      	nop
 8011350:	7fc00000 	.word	0x7fc00000

08011354 <quorem>:
 8011354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011358:	6903      	ldr	r3, [r0, #16]
 801135a:	690c      	ldr	r4, [r1, #16]
 801135c:	42a3      	cmp	r3, r4
 801135e:	4607      	mov	r7, r0
 8011360:	db7e      	blt.n	8011460 <quorem+0x10c>
 8011362:	3c01      	subs	r4, #1
 8011364:	f101 0814 	add.w	r8, r1, #20
 8011368:	00a3      	lsls	r3, r4, #2
 801136a:	f100 0514 	add.w	r5, r0, #20
 801136e:	9300      	str	r3, [sp, #0]
 8011370:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011374:	9301      	str	r3, [sp, #4]
 8011376:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801137a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801137e:	3301      	adds	r3, #1
 8011380:	429a      	cmp	r2, r3
 8011382:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011386:	fbb2 f6f3 	udiv	r6, r2, r3
 801138a:	d32e      	bcc.n	80113ea <quorem+0x96>
 801138c:	f04f 0a00 	mov.w	sl, #0
 8011390:	46c4      	mov	ip, r8
 8011392:	46ae      	mov	lr, r5
 8011394:	46d3      	mov	fp, sl
 8011396:	f85c 3b04 	ldr.w	r3, [ip], #4
 801139a:	b298      	uxth	r0, r3
 801139c:	fb06 a000 	mla	r0, r6, r0, sl
 80113a0:	0c02      	lsrs	r2, r0, #16
 80113a2:	0c1b      	lsrs	r3, r3, #16
 80113a4:	fb06 2303 	mla	r3, r6, r3, r2
 80113a8:	f8de 2000 	ldr.w	r2, [lr]
 80113ac:	b280      	uxth	r0, r0
 80113ae:	b292      	uxth	r2, r2
 80113b0:	1a12      	subs	r2, r2, r0
 80113b2:	445a      	add	r2, fp
 80113b4:	f8de 0000 	ldr.w	r0, [lr]
 80113b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80113bc:	b29b      	uxth	r3, r3
 80113be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80113c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80113c6:	b292      	uxth	r2, r2
 80113c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80113cc:	45e1      	cmp	r9, ip
 80113ce:	f84e 2b04 	str.w	r2, [lr], #4
 80113d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80113d6:	d2de      	bcs.n	8011396 <quorem+0x42>
 80113d8:	9b00      	ldr	r3, [sp, #0]
 80113da:	58eb      	ldr	r3, [r5, r3]
 80113dc:	b92b      	cbnz	r3, 80113ea <quorem+0x96>
 80113de:	9b01      	ldr	r3, [sp, #4]
 80113e0:	3b04      	subs	r3, #4
 80113e2:	429d      	cmp	r5, r3
 80113e4:	461a      	mov	r2, r3
 80113e6:	d32f      	bcc.n	8011448 <quorem+0xf4>
 80113e8:	613c      	str	r4, [r7, #16]
 80113ea:	4638      	mov	r0, r7
 80113ec:	f001 fc5a 	bl	8012ca4 <__mcmp>
 80113f0:	2800      	cmp	r0, #0
 80113f2:	db25      	blt.n	8011440 <quorem+0xec>
 80113f4:	4629      	mov	r1, r5
 80113f6:	2000      	movs	r0, #0
 80113f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80113fc:	f8d1 c000 	ldr.w	ip, [r1]
 8011400:	fa1f fe82 	uxth.w	lr, r2
 8011404:	fa1f f38c 	uxth.w	r3, ip
 8011408:	eba3 030e 	sub.w	r3, r3, lr
 801140c:	4403      	add	r3, r0
 801140e:	0c12      	lsrs	r2, r2, #16
 8011410:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011414:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011418:	b29b      	uxth	r3, r3
 801141a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801141e:	45c1      	cmp	r9, r8
 8011420:	f841 3b04 	str.w	r3, [r1], #4
 8011424:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011428:	d2e6      	bcs.n	80113f8 <quorem+0xa4>
 801142a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801142e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011432:	b922      	cbnz	r2, 801143e <quorem+0xea>
 8011434:	3b04      	subs	r3, #4
 8011436:	429d      	cmp	r5, r3
 8011438:	461a      	mov	r2, r3
 801143a:	d30b      	bcc.n	8011454 <quorem+0x100>
 801143c:	613c      	str	r4, [r7, #16]
 801143e:	3601      	adds	r6, #1
 8011440:	4630      	mov	r0, r6
 8011442:	b003      	add	sp, #12
 8011444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011448:	6812      	ldr	r2, [r2, #0]
 801144a:	3b04      	subs	r3, #4
 801144c:	2a00      	cmp	r2, #0
 801144e:	d1cb      	bne.n	80113e8 <quorem+0x94>
 8011450:	3c01      	subs	r4, #1
 8011452:	e7c6      	b.n	80113e2 <quorem+0x8e>
 8011454:	6812      	ldr	r2, [r2, #0]
 8011456:	3b04      	subs	r3, #4
 8011458:	2a00      	cmp	r2, #0
 801145a:	d1ef      	bne.n	801143c <quorem+0xe8>
 801145c:	3c01      	subs	r4, #1
 801145e:	e7ea      	b.n	8011436 <quorem+0xe2>
 8011460:	2000      	movs	r0, #0
 8011462:	e7ee      	b.n	8011442 <quorem+0xee>
 8011464:	0000      	movs	r0, r0
	...

08011468 <_dtoa_r>:
 8011468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801146c:	69c7      	ldr	r7, [r0, #28]
 801146e:	b099      	sub	sp, #100	@ 0x64
 8011470:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011474:	ec55 4b10 	vmov	r4, r5, d0
 8011478:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801147a:	9109      	str	r1, [sp, #36]	@ 0x24
 801147c:	4683      	mov	fp, r0
 801147e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011480:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011482:	b97f      	cbnz	r7, 80114a4 <_dtoa_r+0x3c>
 8011484:	2010      	movs	r0, #16
 8011486:	f7fd fd63 	bl	800ef50 <malloc>
 801148a:	4602      	mov	r2, r0
 801148c:	f8cb 001c 	str.w	r0, [fp, #28]
 8011490:	b920      	cbnz	r0, 801149c <_dtoa_r+0x34>
 8011492:	4ba7      	ldr	r3, [pc, #668]	@ (8011730 <_dtoa_r+0x2c8>)
 8011494:	21ef      	movs	r1, #239	@ 0xef
 8011496:	48a7      	ldr	r0, [pc, #668]	@ (8011734 <_dtoa_r+0x2cc>)
 8011498:	f002 fd70 	bl	8013f7c <__assert_func>
 801149c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80114a0:	6007      	str	r7, [r0, #0]
 80114a2:	60c7      	str	r7, [r0, #12]
 80114a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80114a8:	6819      	ldr	r1, [r3, #0]
 80114aa:	b159      	cbz	r1, 80114c4 <_dtoa_r+0x5c>
 80114ac:	685a      	ldr	r2, [r3, #4]
 80114ae:	604a      	str	r2, [r1, #4]
 80114b0:	2301      	movs	r3, #1
 80114b2:	4093      	lsls	r3, r2
 80114b4:	608b      	str	r3, [r1, #8]
 80114b6:	4658      	mov	r0, fp
 80114b8:	f001 f970 	bl	801279c <_Bfree>
 80114bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80114c0:	2200      	movs	r2, #0
 80114c2:	601a      	str	r2, [r3, #0]
 80114c4:	1e2b      	subs	r3, r5, #0
 80114c6:	bfb9      	ittee	lt
 80114c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80114cc:	9303      	strlt	r3, [sp, #12]
 80114ce:	2300      	movge	r3, #0
 80114d0:	6033      	strge	r3, [r6, #0]
 80114d2:	9f03      	ldr	r7, [sp, #12]
 80114d4:	4b98      	ldr	r3, [pc, #608]	@ (8011738 <_dtoa_r+0x2d0>)
 80114d6:	bfbc      	itt	lt
 80114d8:	2201      	movlt	r2, #1
 80114da:	6032      	strlt	r2, [r6, #0]
 80114dc:	43bb      	bics	r3, r7
 80114de:	d112      	bne.n	8011506 <_dtoa_r+0x9e>
 80114e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80114e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80114e6:	6013      	str	r3, [r2, #0]
 80114e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80114ec:	4323      	orrs	r3, r4
 80114ee:	f000 854d 	beq.w	8011f8c <_dtoa_r+0xb24>
 80114f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80114f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801174c <_dtoa_r+0x2e4>
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	f000 854f 	beq.w	8011f9c <_dtoa_r+0xb34>
 80114fe:	f10a 0303 	add.w	r3, sl, #3
 8011502:	f000 bd49 	b.w	8011f98 <_dtoa_r+0xb30>
 8011506:	ed9d 7b02 	vldr	d7, [sp, #8]
 801150a:	2200      	movs	r2, #0
 801150c:	ec51 0b17 	vmov	r0, r1, d7
 8011510:	2300      	movs	r3, #0
 8011512:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011516:	f7ef fb17 	bl	8000b48 <__aeabi_dcmpeq>
 801151a:	4680      	mov	r8, r0
 801151c:	b158      	cbz	r0, 8011536 <_dtoa_r+0xce>
 801151e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011520:	2301      	movs	r3, #1
 8011522:	6013      	str	r3, [r2, #0]
 8011524:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011526:	b113      	cbz	r3, 801152e <_dtoa_r+0xc6>
 8011528:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801152a:	4b84      	ldr	r3, [pc, #528]	@ (801173c <_dtoa_r+0x2d4>)
 801152c:	6013      	str	r3, [r2, #0]
 801152e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011750 <_dtoa_r+0x2e8>
 8011532:	f000 bd33 	b.w	8011f9c <_dtoa_r+0xb34>
 8011536:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801153a:	aa16      	add	r2, sp, #88	@ 0x58
 801153c:	a917      	add	r1, sp, #92	@ 0x5c
 801153e:	4658      	mov	r0, fp
 8011540:	f001 fcd0 	bl	8012ee4 <__d2b>
 8011544:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011548:	4681      	mov	r9, r0
 801154a:	2e00      	cmp	r6, #0
 801154c:	d077      	beq.n	801163e <_dtoa_r+0x1d6>
 801154e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011550:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801155c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011560:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011564:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011568:	4619      	mov	r1, r3
 801156a:	2200      	movs	r2, #0
 801156c:	4b74      	ldr	r3, [pc, #464]	@ (8011740 <_dtoa_r+0x2d8>)
 801156e:	f7ee fecb 	bl	8000308 <__aeabi_dsub>
 8011572:	a369      	add	r3, pc, #420	@ (adr r3, 8011718 <_dtoa_r+0x2b0>)
 8011574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011578:	f7ef f87e 	bl	8000678 <__aeabi_dmul>
 801157c:	a368      	add	r3, pc, #416	@ (adr r3, 8011720 <_dtoa_r+0x2b8>)
 801157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011582:	f7ee fec3 	bl	800030c <__adddf3>
 8011586:	4604      	mov	r4, r0
 8011588:	4630      	mov	r0, r6
 801158a:	460d      	mov	r5, r1
 801158c:	f7ef f80a 	bl	80005a4 <__aeabi_i2d>
 8011590:	a365      	add	r3, pc, #404	@ (adr r3, 8011728 <_dtoa_r+0x2c0>)
 8011592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011596:	f7ef f86f 	bl	8000678 <__aeabi_dmul>
 801159a:	4602      	mov	r2, r0
 801159c:	460b      	mov	r3, r1
 801159e:	4620      	mov	r0, r4
 80115a0:	4629      	mov	r1, r5
 80115a2:	f7ee feb3 	bl	800030c <__adddf3>
 80115a6:	4604      	mov	r4, r0
 80115a8:	460d      	mov	r5, r1
 80115aa:	f7ef fb15 	bl	8000bd8 <__aeabi_d2iz>
 80115ae:	2200      	movs	r2, #0
 80115b0:	4607      	mov	r7, r0
 80115b2:	2300      	movs	r3, #0
 80115b4:	4620      	mov	r0, r4
 80115b6:	4629      	mov	r1, r5
 80115b8:	f7ef fad0 	bl	8000b5c <__aeabi_dcmplt>
 80115bc:	b140      	cbz	r0, 80115d0 <_dtoa_r+0x168>
 80115be:	4638      	mov	r0, r7
 80115c0:	f7ee fff0 	bl	80005a4 <__aeabi_i2d>
 80115c4:	4622      	mov	r2, r4
 80115c6:	462b      	mov	r3, r5
 80115c8:	f7ef fabe 	bl	8000b48 <__aeabi_dcmpeq>
 80115cc:	b900      	cbnz	r0, 80115d0 <_dtoa_r+0x168>
 80115ce:	3f01      	subs	r7, #1
 80115d0:	2f16      	cmp	r7, #22
 80115d2:	d851      	bhi.n	8011678 <_dtoa_r+0x210>
 80115d4:	4b5b      	ldr	r3, [pc, #364]	@ (8011744 <_dtoa_r+0x2dc>)
 80115d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80115da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80115e2:	f7ef fabb 	bl	8000b5c <__aeabi_dcmplt>
 80115e6:	2800      	cmp	r0, #0
 80115e8:	d048      	beq.n	801167c <_dtoa_r+0x214>
 80115ea:	3f01      	subs	r7, #1
 80115ec:	2300      	movs	r3, #0
 80115ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80115f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80115f2:	1b9b      	subs	r3, r3, r6
 80115f4:	1e5a      	subs	r2, r3, #1
 80115f6:	bf44      	itt	mi
 80115f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80115fc:	2300      	movmi	r3, #0
 80115fe:	9208      	str	r2, [sp, #32]
 8011600:	bf54      	ite	pl
 8011602:	f04f 0800 	movpl.w	r8, #0
 8011606:	9308      	strmi	r3, [sp, #32]
 8011608:	2f00      	cmp	r7, #0
 801160a:	db39      	blt.n	8011680 <_dtoa_r+0x218>
 801160c:	9b08      	ldr	r3, [sp, #32]
 801160e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011610:	443b      	add	r3, r7
 8011612:	9308      	str	r3, [sp, #32]
 8011614:	2300      	movs	r3, #0
 8011616:	930a      	str	r3, [sp, #40]	@ 0x28
 8011618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801161a:	2b09      	cmp	r3, #9
 801161c:	d864      	bhi.n	80116e8 <_dtoa_r+0x280>
 801161e:	2b05      	cmp	r3, #5
 8011620:	bfc4      	itt	gt
 8011622:	3b04      	subgt	r3, #4
 8011624:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011628:	f1a3 0302 	sub.w	r3, r3, #2
 801162c:	bfcc      	ite	gt
 801162e:	2400      	movgt	r4, #0
 8011630:	2401      	movle	r4, #1
 8011632:	2b03      	cmp	r3, #3
 8011634:	d863      	bhi.n	80116fe <_dtoa_r+0x296>
 8011636:	e8df f003 	tbb	[pc, r3]
 801163a:	372a      	.short	0x372a
 801163c:	5535      	.short	0x5535
 801163e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011642:	441e      	add	r6, r3
 8011644:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011648:	2b20      	cmp	r3, #32
 801164a:	bfc1      	itttt	gt
 801164c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011650:	409f      	lslgt	r7, r3
 8011652:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011656:	fa24 f303 	lsrgt.w	r3, r4, r3
 801165a:	bfd6      	itet	le
 801165c:	f1c3 0320 	rsble	r3, r3, #32
 8011660:	ea47 0003 	orrgt.w	r0, r7, r3
 8011664:	fa04 f003 	lslle.w	r0, r4, r3
 8011668:	f7ee ff8c 	bl	8000584 <__aeabi_ui2d>
 801166c:	2201      	movs	r2, #1
 801166e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011672:	3e01      	subs	r6, #1
 8011674:	9214      	str	r2, [sp, #80]	@ 0x50
 8011676:	e777      	b.n	8011568 <_dtoa_r+0x100>
 8011678:	2301      	movs	r3, #1
 801167a:	e7b8      	b.n	80115ee <_dtoa_r+0x186>
 801167c:	9012      	str	r0, [sp, #72]	@ 0x48
 801167e:	e7b7      	b.n	80115f0 <_dtoa_r+0x188>
 8011680:	427b      	negs	r3, r7
 8011682:	930a      	str	r3, [sp, #40]	@ 0x28
 8011684:	2300      	movs	r3, #0
 8011686:	eba8 0807 	sub.w	r8, r8, r7
 801168a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801168c:	e7c4      	b.n	8011618 <_dtoa_r+0x1b0>
 801168e:	2300      	movs	r3, #0
 8011690:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011694:	2b00      	cmp	r3, #0
 8011696:	dc35      	bgt.n	8011704 <_dtoa_r+0x29c>
 8011698:	2301      	movs	r3, #1
 801169a:	9300      	str	r3, [sp, #0]
 801169c:	9307      	str	r3, [sp, #28]
 801169e:	461a      	mov	r2, r3
 80116a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80116a2:	e00b      	b.n	80116bc <_dtoa_r+0x254>
 80116a4:	2301      	movs	r3, #1
 80116a6:	e7f3      	b.n	8011690 <_dtoa_r+0x228>
 80116a8:	2300      	movs	r3, #0
 80116aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80116ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80116ae:	18fb      	adds	r3, r7, r3
 80116b0:	9300      	str	r3, [sp, #0]
 80116b2:	3301      	adds	r3, #1
 80116b4:	2b01      	cmp	r3, #1
 80116b6:	9307      	str	r3, [sp, #28]
 80116b8:	bfb8      	it	lt
 80116ba:	2301      	movlt	r3, #1
 80116bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80116c0:	2100      	movs	r1, #0
 80116c2:	2204      	movs	r2, #4
 80116c4:	f102 0514 	add.w	r5, r2, #20
 80116c8:	429d      	cmp	r5, r3
 80116ca:	d91f      	bls.n	801170c <_dtoa_r+0x2a4>
 80116cc:	6041      	str	r1, [r0, #4]
 80116ce:	4658      	mov	r0, fp
 80116d0:	f001 f824 	bl	801271c <_Balloc>
 80116d4:	4682      	mov	sl, r0
 80116d6:	2800      	cmp	r0, #0
 80116d8:	d13c      	bne.n	8011754 <_dtoa_r+0x2ec>
 80116da:	4b1b      	ldr	r3, [pc, #108]	@ (8011748 <_dtoa_r+0x2e0>)
 80116dc:	4602      	mov	r2, r0
 80116de:	f240 11af 	movw	r1, #431	@ 0x1af
 80116e2:	e6d8      	b.n	8011496 <_dtoa_r+0x2e>
 80116e4:	2301      	movs	r3, #1
 80116e6:	e7e0      	b.n	80116aa <_dtoa_r+0x242>
 80116e8:	2401      	movs	r4, #1
 80116ea:	2300      	movs	r3, #0
 80116ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80116ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80116f0:	f04f 33ff 	mov.w	r3, #4294967295
 80116f4:	9300      	str	r3, [sp, #0]
 80116f6:	9307      	str	r3, [sp, #28]
 80116f8:	2200      	movs	r2, #0
 80116fa:	2312      	movs	r3, #18
 80116fc:	e7d0      	b.n	80116a0 <_dtoa_r+0x238>
 80116fe:	2301      	movs	r3, #1
 8011700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011702:	e7f5      	b.n	80116f0 <_dtoa_r+0x288>
 8011704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011706:	9300      	str	r3, [sp, #0]
 8011708:	9307      	str	r3, [sp, #28]
 801170a:	e7d7      	b.n	80116bc <_dtoa_r+0x254>
 801170c:	3101      	adds	r1, #1
 801170e:	0052      	lsls	r2, r2, #1
 8011710:	e7d8      	b.n	80116c4 <_dtoa_r+0x25c>
 8011712:	bf00      	nop
 8011714:	f3af 8000 	nop.w
 8011718:	636f4361 	.word	0x636f4361
 801171c:	3fd287a7 	.word	0x3fd287a7
 8011720:	8b60c8b3 	.word	0x8b60c8b3
 8011724:	3fc68a28 	.word	0x3fc68a28
 8011728:	509f79fb 	.word	0x509f79fb
 801172c:	3fd34413 	.word	0x3fd34413
 8011730:	08017765 	.word	0x08017765
 8011734:	0801777c 	.word	0x0801777c
 8011738:	7ff00000 	.word	0x7ff00000
 801173c:	080179c8 	.word	0x080179c8
 8011740:	3ff80000 	.word	0x3ff80000
 8011744:	080178d8 	.word	0x080178d8
 8011748:	080177d4 	.word	0x080177d4
 801174c:	08017761 	.word	0x08017761
 8011750:	080179c7 	.word	0x080179c7
 8011754:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011758:	6018      	str	r0, [r3, #0]
 801175a:	9b07      	ldr	r3, [sp, #28]
 801175c:	2b0e      	cmp	r3, #14
 801175e:	f200 80a4 	bhi.w	80118aa <_dtoa_r+0x442>
 8011762:	2c00      	cmp	r4, #0
 8011764:	f000 80a1 	beq.w	80118aa <_dtoa_r+0x442>
 8011768:	2f00      	cmp	r7, #0
 801176a:	dd33      	ble.n	80117d4 <_dtoa_r+0x36c>
 801176c:	4bad      	ldr	r3, [pc, #692]	@ (8011a24 <_dtoa_r+0x5bc>)
 801176e:	f007 020f 	and.w	r2, r7, #15
 8011772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011776:	ed93 7b00 	vldr	d7, [r3]
 801177a:	05f8      	lsls	r0, r7, #23
 801177c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011780:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011784:	d516      	bpl.n	80117b4 <_dtoa_r+0x34c>
 8011786:	4ba8      	ldr	r3, [pc, #672]	@ (8011a28 <_dtoa_r+0x5c0>)
 8011788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801178c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011790:	f7ef f89c 	bl	80008cc <__aeabi_ddiv>
 8011794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011798:	f004 040f 	and.w	r4, r4, #15
 801179c:	2603      	movs	r6, #3
 801179e:	4da2      	ldr	r5, [pc, #648]	@ (8011a28 <_dtoa_r+0x5c0>)
 80117a0:	b954      	cbnz	r4, 80117b8 <_dtoa_r+0x350>
 80117a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80117a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117aa:	f7ef f88f 	bl	80008cc <__aeabi_ddiv>
 80117ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117b2:	e028      	b.n	8011806 <_dtoa_r+0x39e>
 80117b4:	2602      	movs	r6, #2
 80117b6:	e7f2      	b.n	801179e <_dtoa_r+0x336>
 80117b8:	07e1      	lsls	r1, r4, #31
 80117ba:	d508      	bpl.n	80117ce <_dtoa_r+0x366>
 80117bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80117c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80117c4:	f7ee ff58 	bl	8000678 <__aeabi_dmul>
 80117c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80117cc:	3601      	adds	r6, #1
 80117ce:	1064      	asrs	r4, r4, #1
 80117d0:	3508      	adds	r5, #8
 80117d2:	e7e5      	b.n	80117a0 <_dtoa_r+0x338>
 80117d4:	f000 80d2 	beq.w	801197c <_dtoa_r+0x514>
 80117d8:	427c      	negs	r4, r7
 80117da:	4b92      	ldr	r3, [pc, #584]	@ (8011a24 <_dtoa_r+0x5bc>)
 80117dc:	4d92      	ldr	r5, [pc, #584]	@ (8011a28 <_dtoa_r+0x5c0>)
 80117de:	f004 020f 	and.w	r2, r4, #15
 80117e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80117e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80117ee:	f7ee ff43 	bl	8000678 <__aeabi_dmul>
 80117f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117f6:	1124      	asrs	r4, r4, #4
 80117f8:	2300      	movs	r3, #0
 80117fa:	2602      	movs	r6, #2
 80117fc:	2c00      	cmp	r4, #0
 80117fe:	f040 80b2 	bne.w	8011966 <_dtoa_r+0x4fe>
 8011802:	2b00      	cmp	r3, #0
 8011804:	d1d3      	bne.n	80117ae <_dtoa_r+0x346>
 8011806:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011808:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801180c:	2b00      	cmp	r3, #0
 801180e:	f000 80b7 	beq.w	8011980 <_dtoa_r+0x518>
 8011812:	4b86      	ldr	r3, [pc, #536]	@ (8011a2c <_dtoa_r+0x5c4>)
 8011814:	2200      	movs	r2, #0
 8011816:	4620      	mov	r0, r4
 8011818:	4629      	mov	r1, r5
 801181a:	f7ef f99f 	bl	8000b5c <__aeabi_dcmplt>
 801181e:	2800      	cmp	r0, #0
 8011820:	f000 80ae 	beq.w	8011980 <_dtoa_r+0x518>
 8011824:	9b07      	ldr	r3, [sp, #28]
 8011826:	2b00      	cmp	r3, #0
 8011828:	f000 80aa 	beq.w	8011980 <_dtoa_r+0x518>
 801182c:	9b00      	ldr	r3, [sp, #0]
 801182e:	2b00      	cmp	r3, #0
 8011830:	dd37      	ble.n	80118a2 <_dtoa_r+0x43a>
 8011832:	1e7b      	subs	r3, r7, #1
 8011834:	9304      	str	r3, [sp, #16]
 8011836:	4620      	mov	r0, r4
 8011838:	4b7d      	ldr	r3, [pc, #500]	@ (8011a30 <_dtoa_r+0x5c8>)
 801183a:	2200      	movs	r2, #0
 801183c:	4629      	mov	r1, r5
 801183e:	f7ee ff1b 	bl	8000678 <__aeabi_dmul>
 8011842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011846:	9c00      	ldr	r4, [sp, #0]
 8011848:	3601      	adds	r6, #1
 801184a:	4630      	mov	r0, r6
 801184c:	f7ee feaa 	bl	80005a4 <__aeabi_i2d>
 8011850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011854:	f7ee ff10 	bl	8000678 <__aeabi_dmul>
 8011858:	4b76      	ldr	r3, [pc, #472]	@ (8011a34 <_dtoa_r+0x5cc>)
 801185a:	2200      	movs	r2, #0
 801185c:	f7ee fd56 	bl	800030c <__adddf3>
 8011860:	4605      	mov	r5, r0
 8011862:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011866:	2c00      	cmp	r4, #0
 8011868:	f040 808d 	bne.w	8011986 <_dtoa_r+0x51e>
 801186c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011870:	4b71      	ldr	r3, [pc, #452]	@ (8011a38 <_dtoa_r+0x5d0>)
 8011872:	2200      	movs	r2, #0
 8011874:	f7ee fd48 	bl	8000308 <__aeabi_dsub>
 8011878:	4602      	mov	r2, r0
 801187a:	460b      	mov	r3, r1
 801187c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011880:	462a      	mov	r2, r5
 8011882:	4633      	mov	r3, r6
 8011884:	f7ef f988 	bl	8000b98 <__aeabi_dcmpgt>
 8011888:	2800      	cmp	r0, #0
 801188a:	f040 828b 	bne.w	8011da4 <_dtoa_r+0x93c>
 801188e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011892:	462a      	mov	r2, r5
 8011894:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011898:	f7ef f960 	bl	8000b5c <__aeabi_dcmplt>
 801189c:	2800      	cmp	r0, #0
 801189e:	f040 8128 	bne.w	8011af2 <_dtoa_r+0x68a>
 80118a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80118a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80118aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	f2c0 815a 	blt.w	8011b66 <_dtoa_r+0x6fe>
 80118b2:	2f0e      	cmp	r7, #14
 80118b4:	f300 8157 	bgt.w	8011b66 <_dtoa_r+0x6fe>
 80118b8:	4b5a      	ldr	r3, [pc, #360]	@ (8011a24 <_dtoa_r+0x5bc>)
 80118ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80118be:	ed93 7b00 	vldr	d7, [r3]
 80118c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	ed8d 7b00 	vstr	d7, [sp]
 80118ca:	da03      	bge.n	80118d4 <_dtoa_r+0x46c>
 80118cc:	9b07      	ldr	r3, [sp, #28]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	f340 8101 	ble.w	8011ad6 <_dtoa_r+0x66e>
 80118d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80118d8:	4656      	mov	r6, sl
 80118da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118de:	4620      	mov	r0, r4
 80118e0:	4629      	mov	r1, r5
 80118e2:	f7ee fff3 	bl	80008cc <__aeabi_ddiv>
 80118e6:	f7ef f977 	bl	8000bd8 <__aeabi_d2iz>
 80118ea:	4680      	mov	r8, r0
 80118ec:	f7ee fe5a 	bl	80005a4 <__aeabi_i2d>
 80118f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118f4:	f7ee fec0 	bl	8000678 <__aeabi_dmul>
 80118f8:	4602      	mov	r2, r0
 80118fa:	460b      	mov	r3, r1
 80118fc:	4620      	mov	r0, r4
 80118fe:	4629      	mov	r1, r5
 8011900:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011904:	f7ee fd00 	bl	8000308 <__aeabi_dsub>
 8011908:	f806 4b01 	strb.w	r4, [r6], #1
 801190c:	9d07      	ldr	r5, [sp, #28]
 801190e:	eba6 040a 	sub.w	r4, r6, sl
 8011912:	42a5      	cmp	r5, r4
 8011914:	4602      	mov	r2, r0
 8011916:	460b      	mov	r3, r1
 8011918:	f040 8117 	bne.w	8011b4a <_dtoa_r+0x6e2>
 801191c:	f7ee fcf6 	bl	800030c <__adddf3>
 8011920:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011924:	4604      	mov	r4, r0
 8011926:	460d      	mov	r5, r1
 8011928:	f7ef f936 	bl	8000b98 <__aeabi_dcmpgt>
 801192c:	2800      	cmp	r0, #0
 801192e:	f040 80f9 	bne.w	8011b24 <_dtoa_r+0x6bc>
 8011932:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011936:	4620      	mov	r0, r4
 8011938:	4629      	mov	r1, r5
 801193a:	f7ef f905 	bl	8000b48 <__aeabi_dcmpeq>
 801193e:	b118      	cbz	r0, 8011948 <_dtoa_r+0x4e0>
 8011940:	f018 0f01 	tst.w	r8, #1
 8011944:	f040 80ee 	bne.w	8011b24 <_dtoa_r+0x6bc>
 8011948:	4649      	mov	r1, r9
 801194a:	4658      	mov	r0, fp
 801194c:	f000 ff26 	bl	801279c <_Bfree>
 8011950:	2300      	movs	r3, #0
 8011952:	7033      	strb	r3, [r6, #0]
 8011954:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011956:	3701      	adds	r7, #1
 8011958:	601f      	str	r7, [r3, #0]
 801195a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801195c:	2b00      	cmp	r3, #0
 801195e:	f000 831d 	beq.w	8011f9c <_dtoa_r+0xb34>
 8011962:	601e      	str	r6, [r3, #0]
 8011964:	e31a      	b.n	8011f9c <_dtoa_r+0xb34>
 8011966:	07e2      	lsls	r2, r4, #31
 8011968:	d505      	bpl.n	8011976 <_dtoa_r+0x50e>
 801196a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801196e:	f7ee fe83 	bl	8000678 <__aeabi_dmul>
 8011972:	3601      	adds	r6, #1
 8011974:	2301      	movs	r3, #1
 8011976:	1064      	asrs	r4, r4, #1
 8011978:	3508      	adds	r5, #8
 801197a:	e73f      	b.n	80117fc <_dtoa_r+0x394>
 801197c:	2602      	movs	r6, #2
 801197e:	e742      	b.n	8011806 <_dtoa_r+0x39e>
 8011980:	9c07      	ldr	r4, [sp, #28]
 8011982:	9704      	str	r7, [sp, #16]
 8011984:	e761      	b.n	801184a <_dtoa_r+0x3e2>
 8011986:	4b27      	ldr	r3, [pc, #156]	@ (8011a24 <_dtoa_r+0x5bc>)
 8011988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801198a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801198e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011992:	4454      	add	r4, sl
 8011994:	2900      	cmp	r1, #0
 8011996:	d053      	beq.n	8011a40 <_dtoa_r+0x5d8>
 8011998:	4928      	ldr	r1, [pc, #160]	@ (8011a3c <_dtoa_r+0x5d4>)
 801199a:	2000      	movs	r0, #0
 801199c:	f7ee ff96 	bl	80008cc <__aeabi_ddiv>
 80119a0:	4633      	mov	r3, r6
 80119a2:	462a      	mov	r2, r5
 80119a4:	f7ee fcb0 	bl	8000308 <__aeabi_dsub>
 80119a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80119ac:	4656      	mov	r6, sl
 80119ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119b2:	f7ef f911 	bl	8000bd8 <__aeabi_d2iz>
 80119b6:	4605      	mov	r5, r0
 80119b8:	f7ee fdf4 	bl	80005a4 <__aeabi_i2d>
 80119bc:	4602      	mov	r2, r0
 80119be:	460b      	mov	r3, r1
 80119c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119c4:	f7ee fca0 	bl	8000308 <__aeabi_dsub>
 80119c8:	3530      	adds	r5, #48	@ 0x30
 80119ca:	4602      	mov	r2, r0
 80119cc:	460b      	mov	r3, r1
 80119ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80119d2:	f806 5b01 	strb.w	r5, [r6], #1
 80119d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80119da:	f7ef f8bf 	bl	8000b5c <__aeabi_dcmplt>
 80119de:	2800      	cmp	r0, #0
 80119e0:	d171      	bne.n	8011ac6 <_dtoa_r+0x65e>
 80119e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80119e6:	4911      	ldr	r1, [pc, #68]	@ (8011a2c <_dtoa_r+0x5c4>)
 80119e8:	2000      	movs	r0, #0
 80119ea:	f7ee fc8d 	bl	8000308 <__aeabi_dsub>
 80119ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80119f2:	f7ef f8b3 	bl	8000b5c <__aeabi_dcmplt>
 80119f6:	2800      	cmp	r0, #0
 80119f8:	f040 8095 	bne.w	8011b26 <_dtoa_r+0x6be>
 80119fc:	42a6      	cmp	r6, r4
 80119fe:	f43f af50 	beq.w	80118a2 <_dtoa_r+0x43a>
 8011a02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011a06:	4b0a      	ldr	r3, [pc, #40]	@ (8011a30 <_dtoa_r+0x5c8>)
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f7ee fe35 	bl	8000678 <__aeabi_dmul>
 8011a0e:	4b08      	ldr	r3, [pc, #32]	@ (8011a30 <_dtoa_r+0x5c8>)
 8011a10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011a14:	2200      	movs	r2, #0
 8011a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a1a:	f7ee fe2d 	bl	8000678 <__aeabi_dmul>
 8011a1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a22:	e7c4      	b.n	80119ae <_dtoa_r+0x546>
 8011a24:	080178d8 	.word	0x080178d8
 8011a28:	080178b0 	.word	0x080178b0
 8011a2c:	3ff00000 	.word	0x3ff00000
 8011a30:	40240000 	.word	0x40240000
 8011a34:	401c0000 	.word	0x401c0000
 8011a38:	40140000 	.word	0x40140000
 8011a3c:	3fe00000 	.word	0x3fe00000
 8011a40:	4631      	mov	r1, r6
 8011a42:	4628      	mov	r0, r5
 8011a44:	f7ee fe18 	bl	8000678 <__aeabi_dmul>
 8011a48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011a4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8011a4e:	4656      	mov	r6, sl
 8011a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a54:	f7ef f8c0 	bl	8000bd8 <__aeabi_d2iz>
 8011a58:	4605      	mov	r5, r0
 8011a5a:	f7ee fda3 	bl	80005a4 <__aeabi_i2d>
 8011a5e:	4602      	mov	r2, r0
 8011a60:	460b      	mov	r3, r1
 8011a62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a66:	f7ee fc4f 	bl	8000308 <__aeabi_dsub>
 8011a6a:	3530      	adds	r5, #48	@ 0x30
 8011a6c:	f806 5b01 	strb.w	r5, [r6], #1
 8011a70:	4602      	mov	r2, r0
 8011a72:	460b      	mov	r3, r1
 8011a74:	42a6      	cmp	r6, r4
 8011a76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011a7a:	f04f 0200 	mov.w	r2, #0
 8011a7e:	d124      	bne.n	8011aca <_dtoa_r+0x662>
 8011a80:	4bac      	ldr	r3, [pc, #688]	@ (8011d34 <_dtoa_r+0x8cc>)
 8011a82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011a86:	f7ee fc41 	bl	800030c <__adddf3>
 8011a8a:	4602      	mov	r2, r0
 8011a8c:	460b      	mov	r3, r1
 8011a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a92:	f7ef f881 	bl	8000b98 <__aeabi_dcmpgt>
 8011a96:	2800      	cmp	r0, #0
 8011a98:	d145      	bne.n	8011b26 <_dtoa_r+0x6be>
 8011a9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011a9e:	49a5      	ldr	r1, [pc, #660]	@ (8011d34 <_dtoa_r+0x8cc>)
 8011aa0:	2000      	movs	r0, #0
 8011aa2:	f7ee fc31 	bl	8000308 <__aeabi_dsub>
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011aae:	f7ef f855 	bl	8000b5c <__aeabi_dcmplt>
 8011ab2:	2800      	cmp	r0, #0
 8011ab4:	f43f aef5 	beq.w	80118a2 <_dtoa_r+0x43a>
 8011ab8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011aba:	1e73      	subs	r3, r6, #1
 8011abc:	9315      	str	r3, [sp, #84]	@ 0x54
 8011abe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011ac2:	2b30      	cmp	r3, #48	@ 0x30
 8011ac4:	d0f8      	beq.n	8011ab8 <_dtoa_r+0x650>
 8011ac6:	9f04      	ldr	r7, [sp, #16]
 8011ac8:	e73e      	b.n	8011948 <_dtoa_r+0x4e0>
 8011aca:	4b9b      	ldr	r3, [pc, #620]	@ (8011d38 <_dtoa_r+0x8d0>)
 8011acc:	f7ee fdd4 	bl	8000678 <__aeabi_dmul>
 8011ad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ad4:	e7bc      	b.n	8011a50 <_dtoa_r+0x5e8>
 8011ad6:	d10c      	bne.n	8011af2 <_dtoa_r+0x68a>
 8011ad8:	4b98      	ldr	r3, [pc, #608]	@ (8011d3c <_dtoa_r+0x8d4>)
 8011ada:	2200      	movs	r2, #0
 8011adc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ae0:	f7ee fdca 	bl	8000678 <__aeabi_dmul>
 8011ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ae8:	f7ef f84c 	bl	8000b84 <__aeabi_dcmpge>
 8011aec:	2800      	cmp	r0, #0
 8011aee:	f000 8157 	beq.w	8011da0 <_dtoa_r+0x938>
 8011af2:	2400      	movs	r4, #0
 8011af4:	4625      	mov	r5, r4
 8011af6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011af8:	43db      	mvns	r3, r3
 8011afa:	9304      	str	r3, [sp, #16]
 8011afc:	4656      	mov	r6, sl
 8011afe:	2700      	movs	r7, #0
 8011b00:	4621      	mov	r1, r4
 8011b02:	4658      	mov	r0, fp
 8011b04:	f000 fe4a 	bl	801279c <_Bfree>
 8011b08:	2d00      	cmp	r5, #0
 8011b0a:	d0dc      	beq.n	8011ac6 <_dtoa_r+0x65e>
 8011b0c:	b12f      	cbz	r7, 8011b1a <_dtoa_r+0x6b2>
 8011b0e:	42af      	cmp	r7, r5
 8011b10:	d003      	beq.n	8011b1a <_dtoa_r+0x6b2>
 8011b12:	4639      	mov	r1, r7
 8011b14:	4658      	mov	r0, fp
 8011b16:	f000 fe41 	bl	801279c <_Bfree>
 8011b1a:	4629      	mov	r1, r5
 8011b1c:	4658      	mov	r0, fp
 8011b1e:	f000 fe3d 	bl	801279c <_Bfree>
 8011b22:	e7d0      	b.n	8011ac6 <_dtoa_r+0x65e>
 8011b24:	9704      	str	r7, [sp, #16]
 8011b26:	4633      	mov	r3, r6
 8011b28:	461e      	mov	r6, r3
 8011b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011b2e:	2a39      	cmp	r2, #57	@ 0x39
 8011b30:	d107      	bne.n	8011b42 <_dtoa_r+0x6da>
 8011b32:	459a      	cmp	sl, r3
 8011b34:	d1f8      	bne.n	8011b28 <_dtoa_r+0x6c0>
 8011b36:	9a04      	ldr	r2, [sp, #16]
 8011b38:	3201      	adds	r2, #1
 8011b3a:	9204      	str	r2, [sp, #16]
 8011b3c:	2230      	movs	r2, #48	@ 0x30
 8011b3e:	f88a 2000 	strb.w	r2, [sl]
 8011b42:	781a      	ldrb	r2, [r3, #0]
 8011b44:	3201      	adds	r2, #1
 8011b46:	701a      	strb	r2, [r3, #0]
 8011b48:	e7bd      	b.n	8011ac6 <_dtoa_r+0x65e>
 8011b4a:	4b7b      	ldr	r3, [pc, #492]	@ (8011d38 <_dtoa_r+0x8d0>)
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	f7ee fd93 	bl	8000678 <__aeabi_dmul>
 8011b52:	2200      	movs	r2, #0
 8011b54:	2300      	movs	r3, #0
 8011b56:	4604      	mov	r4, r0
 8011b58:	460d      	mov	r5, r1
 8011b5a:	f7ee fff5 	bl	8000b48 <__aeabi_dcmpeq>
 8011b5e:	2800      	cmp	r0, #0
 8011b60:	f43f aebb 	beq.w	80118da <_dtoa_r+0x472>
 8011b64:	e6f0      	b.n	8011948 <_dtoa_r+0x4e0>
 8011b66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011b68:	2a00      	cmp	r2, #0
 8011b6a:	f000 80db 	beq.w	8011d24 <_dtoa_r+0x8bc>
 8011b6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b70:	2a01      	cmp	r2, #1
 8011b72:	f300 80bf 	bgt.w	8011cf4 <_dtoa_r+0x88c>
 8011b76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011b78:	2a00      	cmp	r2, #0
 8011b7a:	f000 80b7 	beq.w	8011cec <_dtoa_r+0x884>
 8011b7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011b82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011b84:	4646      	mov	r6, r8
 8011b86:	9a08      	ldr	r2, [sp, #32]
 8011b88:	2101      	movs	r1, #1
 8011b8a:	441a      	add	r2, r3
 8011b8c:	4658      	mov	r0, fp
 8011b8e:	4498      	add	r8, r3
 8011b90:	9208      	str	r2, [sp, #32]
 8011b92:	f000 ff01 	bl	8012998 <__i2b>
 8011b96:	4605      	mov	r5, r0
 8011b98:	b15e      	cbz	r6, 8011bb2 <_dtoa_r+0x74a>
 8011b9a:	9b08      	ldr	r3, [sp, #32]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	dd08      	ble.n	8011bb2 <_dtoa_r+0x74a>
 8011ba0:	42b3      	cmp	r3, r6
 8011ba2:	9a08      	ldr	r2, [sp, #32]
 8011ba4:	bfa8      	it	ge
 8011ba6:	4633      	movge	r3, r6
 8011ba8:	eba8 0803 	sub.w	r8, r8, r3
 8011bac:	1af6      	subs	r6, r6, r3
 8011bae:	1ad3      	subs	r3, r2, r3
 8011bb0:	9308      	str	r3, [sp, #32]
 8011bb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011bb4:	b1f3      	cbz	r3, 8011bf4 <_dtoa_r+0x78c>
 8011bb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	f000 80b7 	beq.w	8011d2c <_dtoa_r+0x8c4>
 8011bbe:	b18c      	cbz	r4, 8011be4 <_dtoa_r+0x77c>
 8011bc0:	4629      	mov	r1, r5
 8011bc2:	4622      	mov	r2, r4
 8011bc4:	4658      	mov	r0, fp
 8011bc6:	f000 ffa7 	bl	8012b18 <__pow5mult>
 8011bca:	464a      	mov	r2, r9
 8011bcc:	4601      	mov	r1, r0
 8011bce:	4605      	mov	r5, r0
 8011bd0:	4658      	mov	r0, fp
 8011bd2:	f000 fef7 	bl	80129c4 <__multiply>
 8011bd6:	4649      	mov	r1, r9
 8011bd8:	9004      	str	r0, [sp, #16]
 8011bda:	4658      	mov	r0, fp
 8011bdc:	f000 fdde 	bl	801279c <_Bfree>
 8011be0:	9b04      	ldr	r3, [sp, #16]
 8011be2:	4699      	mov	r9, r3
 8011be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011be6:	1b1a      	subs	r2, r3, r4
 8011be8:	d004      	beq.n	8011bf4 <_dtoa_r+0x78c>
 8011bea:	4649      	mov	r1, r9
 8011bec:	4658      	mov	r0, fp
 8011bee:	f000 ff93 	bl	8012b18 <__pow5mult>
 8011bf2:	4681      	mov	r9, r0
 8011bf4:	2101      	movs	r1, #1
 8011bf6:	4658      	mov	r0, fp
 8011bf8:	f000 fece 	bl	8012998 <__i2b>
 8011bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011bfe:	4604      	mov	r4, r0
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	f000 81cf 	beq.w	8011fa4 <_dtoa_r+0xb3c>
 8011c06:	461a      	mov	r2, r3
 8011c08:	4601      	mov	r1, r0
 8011c0a:	4658      	mov	r0, fp
 8011c0c:	f000 ff84 	bl	8012b18 <__pow5mult>
 8011c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c12:	2b01      	cmp	r3, #1
 8011c14:	4604      	mov	r4, r0
 8011c16:	f300 8095 	bgt.w	8011d44 <_dtoa_r+0x8dc>
 8011c1a:	9b02      	ldr	r3, [sp, #8]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	f040 8087 	bne.w	8011d30 <_dtoa_r+0x8c8>
 8011c22:	9b03      	ldr	r3, [sp, #12]
 8011c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	f040 8089 	bne.w	8011d40 <_dtoa_r+0x8d8>
 8011c2e:	9b03      	ldr	r3, [sp, #12]
 8011c30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011c34:	0d1b      	lsrs	r3, r3, #20
 8011c36:	051b      	lsls	r3, r3, #20
 8011c38:	b12b      	cbz	r3, 8011c46 <_dtoa_r+0x7de>
 8011c3a:	9b08      	ldr	r3, [sp, #32]
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	9308      	str	r3, [sp, #32]
 8011c40:	f108 0801 	add.w	r8, r8, #1
 8011c44:	2301      	movs	r3, #1
 8011c46:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	f000 81b0 	beq.w	8011fb0 <_dtoa_r+0xb48>
 8011c50:	6923      	ldr	r3, [r4, #16]
 8011c52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011c56:	6918      	ldr	r0, [r3, #16]
 8011c58:	f000 fe52 	bl	8012900 <__hi0bits>
 8011c5c:	f1c0 0020 	rsb	r0, r0, #32
 8011c60:	9b08      	ldr	r3, [sp, #32]
 8011c62:	4418      	add	r0, r3
 8011c64:	f010 001f 	ands.w	r0, r0, #31
 8011c68:	d077      	beq.n	8011d5a <_dtoa_r+0x8f2>
 8011c6a:	f1c0 0320 	rsb	r3, r0, #32
 8011c6e:	2b04      	cmp	r3, #4
 8011c70:	dd6b      	ble.n	8011d4a <_dtoa_r+0x8e2>
 8011c72:	9b08      	ldr	r3, [sp, #32]
 8011c74:	f1c0 001c 	rsb	r0, r0, #28
 8011c78:	4403      	add	r3, r0
 8011c7a:	4480      	add	r8, r0
 8011c7c:	4406      	add	r6, r0
 8011c7e:	9308      	str	r3, [sp, #32]
 8011c80:	f1b8 0f00 	cmp.w	r8, #0
 8011c84:	dd05      	ble.n	8011c92 <_dtoa_r+0x82a>
 8011c86:	4649      	mov	r1, r9
 8011c88:	4642      	mov	r2, r8
 8011c8a:	4658      	mov	r0, fp
 8011c8c:	f000 ff9e 	bl	8012bcc <__lshift>
 8011c90:	4681      	mov	r9, r0
 8011c92:	9b08      	ldr	r3, [sp, #32]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	dd05      	ble.n	8011ca4 <_dtoa_r+0x83c>
 8011c98:	4621      	mov	r1, r4
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	4658      	mov	r0, fp
 8011c9e:	f000 ff95 	bl	8012bcc <__lshift>
 8011ca2:	4604      	mov	r4, r0
 8011ca4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d059      	beq.n	8011d5e <_dtoa_r+0x8f6>
 8011caa:	4621      	mov	r1, r4
 8011cac:	4648      	mov	r0, r9
 8011cae:	f000 fff9 	bl	8012ca4 <__mcmp>
 8011cb2:	2800      	cmp	r0, #0
 8011cb4:	da53      	bge.n	8011d5e <_dtoa_r+0x8f6>
 8011cb6:	1e7b      	subs	r3, r7, #1
 8011cb8:	9304      	str	r3, [sp, #16]
 8011cba:	4649      	mov	r1, r9
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	220a      	movs	r2, #10
 8011cc0:	4658      	mov	r0, fp
 8011cc2:	f000 fd8d 	bl	80127e0 <__multadd>
 8011cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011cc8:	4681      	mov	r9, r0
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	f000 8172 	beq.w	8011fb4 <_dtoa_r+0xb4c>
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	4629      	mov	r1, r5
 8011cd4:	220a      	movs	r2, #10
 8011cd6:	4658      	mov	r0, fp
 8011cd8:	f000 fd82 	bl	80127e0 <__multadd>
 8011cdc:	9b00      	ldr	r3, [sp, #0]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	4605      	mov	r5, r0
 8011ce2:	dc67      	bgt.n	8011db4 <_dtoa_r+0x94c>
 8011ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ce6:	2b02      	cmp	r3, #2
 8011ce8:	dc41      	bgt.n	8011d6e <_dtoa_r+0x906>
 8011cea:	e063      	b.n	8011db4 <_dtoa_r+0x94c>
 8011cec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011cee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011cf2:	e746      	b.n	8011b82 <_dtoa_r+0x71a>
 8011cf4:	9b07      	ldr	r3, [sp, #28]
 8011cf6:	1e5c      	subs	r4, r3, #1
 8011cf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cfa:	42a3      	cmp	r3, r4
 8011cfc:	bfbf      	itttt	lt
 8011cfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011d00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011d02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011d04:	1ae3      	sublt	r3, r4, r3
 8011d06:	bfb4      	ite	lt
 8011d08:	18d2      	addlt	r2, r2, r3
 8011d0a:	1b1c      	subge	r4, r3, r4
 8011d0c:	9b07      	ldr	r3, [sp, #28]
 8011d0e:	bfbc      	itt	lt
 8011d10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011d12:	2400      	movlt	r4, #0
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	bfb5      	itete	lt
 8011d18:	eba8 0603 	sublt.w	r6, r8, r3
 8011d1c:	9b07      	ldrge	r3, [sp, #28]
 8011d1e:	2300      	movlt	r3, #0
 8011d20:	4646      	movge	r6, r8
 8011d22:	e730      	b.n	8011b86 <_dtoa_r+0x71e>
 8011d24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011d26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011d28:	4646      	mov	r6, r8
 8011d2a:	e735      	b.n	8011b98 <_dtoa_r+0x730>
 8011d2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011d2e:	e75c      	b.n	8011bea <_dtoa_r+0x782>
 8011d30:	2300      	movs	r3, #0
 8011d32:	e788      	b.n	8011c46 <_dtoa_r+0x7de>
 8011d34:	3fe00000 	.word	0x3fe00000
 8011d38:	40240000 	.word	0x40240000
 8011d3c:	40140000 	.word	0x40140000
 8011d40:	9b02      	ldr	r3, [sp, #8]
 8011d42:	e780      	b.n	8011c46 <_dtoa_r+0x7de>
 8011d44:	2300      	movs	r3, #0
 8011d46:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d48:	e782      	b.n	8011c50 <_dtoa_r+0x7e8>
 8011d4a:	d099      	beq.n	8011c80 <_dtoa_r+0x818>
 8011d4c:	9a08      	ldr	r2, [sp, #32]
 8011d4e:	331c      	adds	r3, #28
 8011d50:	441a      	add	r2, r3
 8011d52:	4498      	add	r8, r3
 8011d54:	441e      	add	r6, r3
 8011d56:	9208      	str	r2, [sp, #32]
 8011d58:	e792      	b.n	8011c80 <_dtoa_r+0x818>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	e7f6      	b.n	8011d4c <_dtoa_r+0x8e4>
 8011d5e:	9b07      	ldr	r3, [sp, #28]
 8011d60:	9704      	str	r7, [sp, #16]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	dc20      	bgt.n	8011da8 <_dtoa_r+0x940>
 8011d66:	9300      	str	r3, [sp, #0]
 8011d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d6a:	2b02      	cmp	r3, #2
 8011d6c:	dd1e      	ble.n	8011dac <_dtoa_r+0x944>
 8011d6e:	9b00      	ldr	r3, [sp, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	f47f aec0 	bne.w	8011af6 <_dtoa_r+0x68e>
 8011d76:	4621      	mov	r1, r4
 8011d78:	2205      	movs	r2, #5
 8011d7a:	4658      	mov	r0, fp
 8011d7c:	f000 fd30 	bl	80127e0 <__multadd>
 8011d80:	4601      	mov	r1, r0
 8011d82:	4604      	mov	r4, r0
 8011d84:	4648      	mov	r0, r9
 8011d86:	f000 ff8d 	bl	8012ca4 <__mcmp>
 8011d8a:	2800      	cmp	r0, #0
 8011d8c:	f77f aeb3 	ble.w	8011af6 <_dtoa_r+0x68e>
 8011d90:	4656      	mov	r6, sl
 8011d92:	2331      	movs	r3, #49	@ 0x31
 8011d94:	f806 3b01 	strb.w	r3, [r6], #1
 8011d98:	9b04      	ldr	r3, [sp, #16]
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	9304      	str	r3, [sp, #16]
 8011d9e:	e6ae      	b.n	8011afe <_dtoa_r+0x696>
 8011da0:	9c07      	ldr	r4, [sp, #28]
 8011da2:	9704      	str	r7, [sp, #16]
 8011da4:	4625      	mov	r5, r4
 8011da6:	e7f3      	b.n	8011d90 <_dtoa_r+0x928>
 8011da8:	9b07      	ldr	r3, [sp, #28]
 8011daa:	9300      	str	r3, [sp, #0]
 8011dac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	f000 8104 	beq.w	8011fbc <_dtoa_r+0xb54>
 8011db4:	2e00      	cmp	r6, #0
 8011db6:	dd05      	ble.n	8011dc4 <_dtoa_r+0x95c>
 8011db8:	4629      	mov	r1, r5
 8011dba:	4632      	mov	r2, r6
 8011dbc:	4658      	mov	r0, fp
 8011dbe:	f000 ff05 	bl	8012bcc <__lshift>
 8011dc2:	4605      	mov	r5, r0
 8011dc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d05a      	beq.n	8011e80 <_dtoa_r+0xa18>
 8011dca:	6869      	ldr	r1, [r5, #4]
 8011dcc:	4658      	mov	r0, fp
 8011dce:	f000 fca5 	bl	801271c <_Balloc>
 8011dd2:	4606      	mov	r6, r0
 8011dd4:	b928      	cbnz	r0, 8011de2 <_dtoa_r+0x97a>
 8011dd6:	4b84      	ldr	r3, [pc, #528]	@ (8011fe8 <_dtoa_r+0xb80>)
 8011dd8:	4602      	mov	r2, r0
 8011dda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011dde:	f7ff bb5a 	b.w	8011496 <_dtoa_r+0x2e>
 8011de2:	692a      	ldr	r2, [r5, #16]
 8011de4:	3202      	adds	r2, #2
 8011de6:	0092      	lsls	r2, r2, #2
 8011de8:	f105 010c 	add.w	r1, r5, #12
 8011dec:	300c      	adds	r0, #12
 8011dee:	f7ff fa93 	bl	8011318 <memcpy>
 8011df2:	2201      	movs	r2, #1
 8011df4:	4631      	mov	r1, r6
 8011df6:	4658      	mov	r0, fp
 8011df8:	f000 fee8 	bl	8012bcc <__lshift>
 8011dfc:	f10a 0301 	add.w	r3, sl, #1
 8011e00:	9307      	str	r3, [sp, #28]
 8011e02:	9b00      	ldr	r3, [sp, #0]
 8011e04:	4453      	add	r3, sl
 8011e06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011e08:	9b02      	ldr	r3, [sp, #8]
 8011e0a:	f003 0301 	and.w	r3, r3, #1
 8011e0e:	462f      	mov	r7, r5
 8011e10:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e12:	4605      	mov	r5, r0
 8011e14:	9b07      	ldr	r3, [sp, #28]
 8011e16:	4621      	mov	r1, r4
 8011e18:	3b01      	subs	r3, #1
 8011e1a:	4648      	mov	r0, r9
 8011e1c:	9300      	str	r3, [sp, #0]
 8011e1e:	f7ff fa99 	bl	8011354 <quorem>
 8011e22:	4639      	mov	r1, r7
 8011e24:	9002      	str	r0, [sp, #8]
 8011e26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011e2a:	4648      	mov	r0, r9
 8011e2c:	f000 ff3a 	bl	8012ca4 <__mcmp>
 8011e30:	462a      	mov	r2, r5
 8011e32:	9008      	str	r0, [sp, #32]
 8011e34:	4621      	mov	r1, r4
 8011e36:	4658      	mov	r0, fp
 8011e38:	f000 ff50 	bl	8012cdc <__mdiff>
 8011e3c:	68c2      	ldr	r2, [r0, #12]
 8011e3e:	4606      	mov	r6, r0
 8011e40:	bb02      	cbnz	r2, 8011e84 <_dtoa_r+0xa1c>
 8011e42:	4601      	mov	r1, r0
 8011e44:	4648      	mov	r0, r9
 8011e46:	f000 ff2d 	bl	8012ca4 <__mcmp>
 8011e4a:	4602      	mov	r2, r0
 8011e4c:	4631      	mov	r1, r6
 8011e4e:	4658      	mov	r0, fp
 8011e50:	920e      	str	r2, [sp, #56]	@ 0x38
 8011e52:	f000 fca3 	bl	801279c <_Bfree>
 8011e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e5a:	9e07      	ldr	r6, [sp, #28]
 8011e5c:	ea43 0102 	orr.w	r1, r3, r2
 8011e60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e62:	4319      	orrs	r1, r3
 8011e64:	d110      	bne.n	8011e88 <_dtoa_r+0xa20>
 8011e66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011e6a:	d029      	beq.n	8011ec0 <_dtoa_r+0xa58>
 8011e6c:	9b08      	ldr	r3, [sp, #32]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	dd02      	ble.n	8011e78 <_dtoa_r+0xa10>
 8011e72:	9b02      	ldr	r3, [sp, #8]
 8011e74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011e78:	9b00      	ldr	r3, [sp, #0]
 8011e7a:	f883 8000 	strb.w	r8, [r3]
 8011e7e:	e63f      	b.n	8011b00 <_dtoa_r+0x698>
 8011e80:	4628      	mov	r0, r5
 8011e82:	e7bb      	b.n	8011dfc <_dtoa_r+0x994>
 8011e84:	2201      	movs	r2, #1
 8011e86:	e7e1      	b.n	8011e4c <_dtoa_r+0x9e4>
 8011e88:	9b08      	ldr	r3, [sp, #32]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	db04      	blt.n	8011e98 <_dtoa_r+0xa30>
 8011e8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011e90:	430b      	orrs	r3, r1
 8011e92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011e94:	430b      	orrs	r3, r1
 8011e96:	d120      	bne.n	8011eda <_dtoa_r+0xa72>
 8011e98:	2a00      	cmp	r2, #0
 8011e9a:	dded      	ble.n	8011e78 <_dtoa_r+0xa10>
 8011e9c:	4649      	mov	r1, r9
 8011e9e:	2201      	movs	r2, #1
 8011ea0:	4658      	mov	r0, fp
 8011ea2:	f000 fe93 	bl	8012bcc <__lshift>
 8011ea6:	4621      	mov	r1, r4
 8011ea8:	4681      	mov	r9, r0
 8011eaa:	f000 fefb 	bl	8012ca4 <__mcmp>
 8011eae:	2800      	cmp	r0, #0
 8011eb0:	dc03      	bgt.n	8011eba <_dtoa_r+0xa52>
 8011eb2:	d1e1      	bne.n	8011e78 <_dtoa_r+0xa10>
 8011eb4:	f018 0f01 	tst.w	r8, #1
 8011eb8:	d0de      	beq.n	8011e78 <_dtoa_r+0xa10>
 8011eba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011ebe:	d1d8      	bne.n	8011e72 <_dtoa_r+0xa0a>
 8011ec0:	9a00      	ldr	r2, [sp, #0]
 8011ec2:	2339      	movs	r3, #57	@ 0x39
 8011ec4:	7013      	strb	r3, [r2, #0]
 8011ec6:	4633      	mov	r3, r6
 8011ec8:	461e      	mov	r6, r3
 8011eca:	3b01      	subs	r3, #1
 8011ecc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011ed0:	2a39      	cmp	r2, #57	@ 0x39
 8011ed2:	d052      	beq.n	8011f7a <_dtoa_r+0xb12>
 8011ed4:	3201      	adds	r2, #1
 8011ed6:	701a      	strb	r2, [r3, #0]
 8011ed8:	e612      	b.n	8011b00 <_dtoa_r+0x698>
 8011eda:	2a00      	cmp	r2, #0
 8011edc:	dd07      	ble.n	8011eee <_dtoa_r+0xa86>
 8011ede:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011ee2:	d0ed      	beq.n	8011ec0 <_dtoa_r+0xa58>
 8011ee4:	9a00      	ldr	r2, [sp, #0]
 8011ee6:	f108 0301 	add.w	r3, r8, #1
 8011eea:	7013      	strb	r3, [r2, #0]
 8011eec:	e608      	b.n	8011b00 <_dtoa_r+0x698>
 8011eee:	9b07      	ldr	r3, [sp, #28]
 8011ef0:	9a07      	ldr	r2, [sp, #28]
 8011ef2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ef8:	4293      	cmp	r3, r2
 8011efa:	d028      	beq.n	8011f4e <_dtoa_r+0xae6>
 8011efc:	4649      	mov	r1, r9
 8011efe:	2300      	movs	r3, #0
 8011f00:	220a      	movs	r2, #10
 8011f02:	4658      	mov	r0, fp
 8011f04:	f000 fc6c 	bl	80127e0 <__multadd>
 8011f08:	42af      	cmp	r7, r5
 8011f0a:	4681      	mov	r9, r0
 8011f0c:	f04f 0300 	mov.w	r3, #0
 8011f10:	f04f 020a 	mov.w	r2, #10
 8011f14:	4639      	mov	r1, r7
 8011f16:	4658      	mov	r0, fp
 8011f18:	d107      	bne.n	8011f2a <_dtoa_r+0xac2>
 8011f1a:	f000 fc61 	bl	80127e0 <__multadd>
 8011f1e:	4607      	mov	r7, r0
 8011f20:	4605      	mov	r5, r0
 8011f22:	9b07      	ldr	r3, [sp, #28]
 8011f24:	3301      	adds	r3, #1
 8011f26:	9307      	str	r3, [sp, #28]
 8011f28:	e774      	b.n	8011e14 <_dtoa_r+0x9ac>
 8011f2a:	f000 fc59 	bl	80127e0 <__multadd>
 8011f2e:	4629      	mov	r1, r5
 8011f30:	4607      	mov	r7, r0
 8011f32:	2300      	movs	r3, #0
 8011f34:	220a      	movs	r2, #10
 8011f36:	4658      	mov	r0, fp
 8011f38:	f000 fc52 	bl	80127e0 <__multadd>
 8011f3c:	4605      	mov	r5, r0
 8011f3e:	e7f0      	b.n	8011f22 <_dtoa_r+0xaba>
 8011f40:	9b00      	ldr	r3, [sp, #0]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	bfcc      	ite	gt
 8011f46:	461e      	movgt	r6, r3
 8011f48:	2601      	movle	r6, #1
 8011f4a:	4456      	add	r6, sl
 8011f4c:	2700      	movs	r7, #0
 8011f4e:	4649      	mov	r1, r9
 8011f50:	2201      	movs	r2, #1
 8011f52:	4658      	mov	r0, fp
 8011f54:	f000 fe3a 	bl	8012bcc <__lshift>
 8011f58:	4621      	mov	r1, r4
 8011f5a:	4681      	mov	r9, r0
 8011f5c:	f000 fea2 	bl	8012ca4 <__mcmp>
 8011f60:	2800      	cmp	r0, #0
 8011f62:	dcb0      	bgt.n	8011ec6 <_dtoa_r+0xa5e>
 8011f64:	d102      	bne.n	8011f6c <_dtoa_r+0xb04>
 8011f66:	f018 0f01 	tst.w	r8, #1
 8011f6a:	d1ac      	bne.n	8011ec6 <_dtoa_r+0xa5e>
 8011f6c:	4633      	mov	r3, r6
 8011f6e:	461e      	mov	r6, r3
 8011f70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011f74:	2a30      	cmp	r2, #48	@ 0x30
 8011f76:	d0fa      	beq.n	8011f6e <_dtoa_r+0xb06>
 8011f78:	e5c2      	b.n	8011b00 <_dtoa_r+0x698>
 8011f7a:	459a      	cmp	sl, r3
 8011f7c:	d1a4      	bne.n	8011ec8 <_dtoa_r+0xa60>
 8011f7e:	9b04      	ldr	r3, [sp, #16]
 8011f80:	3301      	adds	r3, #1
 8011f82:	9304      	str	r3, [sp, #16]
 8011f84:	2331      	movs	r3, #49	@ 0x31
 8011f86:	f88a 3000 	strb.w	r3, [sl]
 8011f8a:	e5b9      	b.n	8011b00 <_dtoa_r+0x698>
 8011f8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011f8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011fec <_dtoa_r+0xb84>
 8011f92:	b11b      	cbz	r3, 8011f9c <_dtoa_r+0xb34>
 8011f94:	f10a 0308 	add.w	r3, sl, #8
 8011f98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011f9a:	6013      	str	r3, [r2, #0]
 8011f9c:	4650      	mov	r0, sl
 8011f9e:	b019      	add	sp, #100	@ 0x64
 8011fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	f77f ae37 	ble.w	8011c1a <_dtoa_r+0x7b2>
 8011fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8011fb0:	2001      	movs	r0, #1
 8011fb2:	e655      	b.n	8011c60 <_dtoa_r+0x7f8>
 8011fb4:	9b00      	ldr	r3, [sp, #0]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	f77f aed6 	ble.w	8011d68 <_dtoa_r+0x900>
 8011fbc:	4656      	mov	r6, sl
 8011fbe:	4621      	mov	r1, r4
 8011fc0:	4648      	mov	r0, r9
 8011fc2:	f7ff f9c7 	bl	8011354 <quorem>
 8011fc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011fca:	f806 8b01 	strb.w	r8, [r6], #1
 8011fce:	9b00      	ldr	r3, [sp, #0]
 8011fd0:	eba6 020a 	sub.w	r2, r6, sl
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	ddb3      	ble.n	8011f40 <_dtoa_r+0xad8>
 8011fd8:	4649      	mov	r1, r9
 8011fda:	2300      	movs	r3, #0
 8011fdc:	220a      	movs	r2, #10
 8011fde:	4658      	mov	r0, fp
 8011fe0:	f000 fbfe 	bl	80127e0 <__multadd>
 8011fe4:	4681      	mov	r9, r0
 8011fe6:	e7ea      	b.n	8011fbe <_dtoa_r+0xb56>
 8011fe8:	080177d4 	.word	0x080177d4
 8011fec:	08017758 	.word	0x08017758

08011ff0 <_free_r>:
 8011ff0:	b538      	push	{r3, r4, r5, lr}
 8011ff2:	4605      	mov	r5, r0
 8011ff4:	2900      	cmp	r1, #0
 8011ff6:	d041      	beq.n	801207c <_free_r+0x8c>
 8011ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ffc:	1f0c      	subs	r4, r1, #4
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	bfb8      	it	lt
 8012002:	18e4      	addlt	r4, r4, r3
 8012004:	f7fd f856 	bl	800f0b4 <__malloc_lock>
 8012008:	4a1d      	ldr	r2, [pc, #116]	@ (8012080 <_free_r+0x90>)
 801200a:	6813      	ldr	r3, [r2, #0]
 801200c:	b933      	cbnz	r3, 801201c <_free_r+0x2c>
 801200e:	6063      	str	r3, [r4, #4]
 8012010:	6014      	str	r4, [r2, #0]
 8012012:	4628      	mov	r0, r5
 8012014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012018:	f7fd b852 	b.w	800f0c0 <__malloc_unlock>
 801201c:	42a3      	cmp	r3, r4
 801201e:	d908      	bls.n	8012032 <_free_r+0x42>
 8012020:	6820      	ldr	r0, [r4, #0]
 8012022:	1821      	adds	r1, r4, r0
 8012024:	428b      	cmp	r3, r1
 8012026:	bf01      	itttt	eq
 8012028:	6819      	ldreq	r1, [r3, #0]
 801202a:	685b      	ldreq	r3, [r3, #4]
 801202c:	1809      	addeq	r1, r1, r0
 801202e:	6021      	streq	r1, [r4, #0]
 8012030:	e7ed      	b.n	801200e <_free_r+0x1e>
 8012032:	461a      	mov	r2, r3
 8012034:	685b      	ldr	r3, [r3, #4]
 8012036:	b10b      	cbz	r3, 801203c <_free_r+0x4c>
 8012038:	42a3      	cmp	r3, r4
 801203a:	d9fa      	bls.n	8012032 <_free_r+0x42>
 801203c:	6811      	ldr	r1, [r2, #0]
 801203e:	1850      	adds	r0, r2, r1
 8012040:	42a0      	cmp	r0, r4
 8012042:	d10b      	bne.n	801205c <_free_r+0x6c>
 8012044:	6820      	ldr	r0, [r4, #0]
 8012046:	4401      	add	r1, r0
 8012048:	1850      	adds	r0, r2, r1
 801204a:	4283      	cmp	r3, r0
 801204c:	6011      	str	r1, [r2, #0]
 801204e:	d1e0      	bne.n	8012012 <_free_r+0x22>
 8012050:	6818      	ldr	r0, [r3, #0]
 8012052:	685b      	ldr	r3, [r3, #4]
 8012054:	6053      	str	r3, [r2, #4]
 8012056:	4408      	add	r0, r1
 8012058:	6010      	str	r0, [r2, #0]
 801205a:	e7da      	b.n	8012012 <_free_r+0x22>
 801205c:	d902      	bls.n	8012064 <_free_r+0x74>
 801205e:	230c      	movs	r3, #12
 8012060:	602b      	str	r3, [r5, #0]
 8012062:	e7d6      	b.n	8012012 <_free_r+0x22>
 8012064:	6820      	ldr	r0, [r4, #0]
 8012066:	1821      	adds	r1, r4, r0
 8012068:	428b      	cmp	r3, r1
 801206a:	bf04      	itt	eq
 801206c:	6819      	ldreq	r1, [r3, #0]
 801206e:	685b      	ldreq	r3, [r3, #4]
 8012070:	6063      	str	r3, [r4, #4]
 8012072:	bf04      	itt	eq
 8012074:	1809      	addeq	r1, r1, r0
 8012076:	6021      	streq	r1, [r4, #0]
 8012078:	6054      	str	r4, [r2, #4]
 801207a:	e7ca      	b.n	8012012 <_free_r+0x22>
 801207c:	bd38      	pop	{r3, r4, r5, pc}
 801207e:	bf00      	nop
 8012080:	20005d50 	.word	0x20005d50

08012084 <rshift>:
 8012084:	6903      	ldr	r3, [r0, #16]
 8012086:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801208a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801208e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012092:	f100 0414 	add.w	r4, r0, #20
 8012096:	dd45      	ble.n	8012124 <rshift+0xa0>
 8012098:	f011 011f 	ands.w	r1, r1, #31
 801209c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80120a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80120a4:	d10c      	bne.n	80120c0 <rshift+0x3c>
 80120a6:	f100 0710 	add.w	r7, r0, #16
 80120aa:	4629      	mov	r1, r5
 80120ac:	42b1      	cmp	r1, r6
 80120ae:	d334      	bcc.n	801211a <rshift+0x96>
 80120b0:	1a9b      	subs	r3, r3, r2
 80120b2:	009b      	lsls	r3, r3, #2
 80120b4:	1eea      	subs	r2, r5, #3
 80120b6:	4296      	cmp	r6, r2
 80120b8:	bf38      	it	cc
 80120ba:	2300      	movcc	r3, #0
 80120bc:	4423      	add	r3, r4
 80120be:	e015      	b.n	80120ec <rshift+0x68>
 80120c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80120c4:	f1c1 0820 	rsb	r8, r1, #32
 80120c8:	40cf      	lsrs	r7, r1
 80120ca:	f105 0e04 	add.w	lr, r5, #4
 80120ce:	46a1      	mov	r9, r4
 80120d0:	4576      	cmp	r6, lr
 80120d2:	46f4      	mov	ip, lr
 80120d4:	d815      	bhi.n	8012102 <rshift+0x7e>
 80120d6:	1a9a      	subs	r2, r3, r2
 80120d8:	0092      	lsls	r2, r2, #2
 80120da:	3a04      	subs	r2, #4
 80120dc:	3501      	adds	r5, #1
 80120de:	42ae      	cmp	r6, r5
 80120e0:	bf38      	it	cc
 80120e2:	2200      	movcc	r2, #0
 80120e4:	18a3      	adds	r3, r4, r2
 80120e6:	50a7      	str	r7, [r4, r2]
 80120e8:	b107      	cbz	r7, 80120ec <rshift+0x68>
 80120ea:	3304      	adds	r3, #4
 80120ec:	1b1a      	subs	r2, r3, r4
 80120ee:	42a3      	cmp	r3, r4
 80120f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80120f4:	bf08      	it	eq
 80120f6:	2300      	moveq	r3, #0
 80120f8:	6102      	str	r2, [r0, #16]
 80120fa:	bf08      	it	eq
 80120fc:	6143      	streq	r3, [r0, #20]
 80120fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012102:	f8dc c000 	ldr.w	ip, [ip]
 8012106:	fa0c fc08 	lsl.w	ip, ip, r8
 801210a:	ea4c 0707 	orr.w	r7, ip, r7
 801210e:	f849 7b04 	str.w	r7, [r9], #4
 8012112:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012116:	40cf      	lsrs	r7, r1
 8012118:	e7da      	b.n	80120d0 <rshift+0x4c>
 801211a:	f851 cb04 	ldr.w	ip, [r1], #4
 801211e:	f847 cf04 	str.w	ip, [r7, #4]!
 8012122:	e7c3      	b.n	80120ac <rshift+0x28>
 8012124:	4623      	mov	r3, r4
 8012126:	e7e1      	b.n	80120ec <rshift+0x68>

08012128 <__hexdig_fun>:
 8012128:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801212c:	2b09      	cmp	r3, #9
 801212e:	d802      	bhi.n	8012136 <__hexdig_fun+0xe>
 8012130:	3820      	subs	r0, #32
 8012132:	b2c0      	uxtb	r0, r0
 8012134:	4770      	bx	lr
 8012136:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801213a:	2b05      	cmp	r3, #5
 801213c:	d801      	bhi.n	8012142 <__hexdig_fun+0x1a>
 801213e:	3847      	subs	r0, #71	@ 0x47
 8012140:	e7f7      	b.n	8012132 <__hexdig_fun+0xa>
 8012142:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012146:	2b05      	cmp	r3, #5
 8012148:	d801      	bhi.n	801214e <__hexdig_fun+0x26>
 801214a:	3827      	subs	r0, #39	@ 0x27
 801214c:	e7f1      	b.n	8012132 <__hexdig_fun+0xa>
 801214e:	2000      	movs	r0, #0
 8012150:	4770      	bx	lr
	...

08012154 <__gethex>:
 8012154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012158:	b085      	sub	sp, #20
 801215a:	468a      	mov	sl, r1
 801215c:	9302      	str	r3, [sp, #8]
 801215e:	680b      	ldr	r3, [r1, #0]
 8012160:	9001      	str	r0, [sp, #4]
 8012162:	4690      	mov	r8, r2
 8012164:	1c9c      	adds	r4, r3, #2
 8012166:	46a1      	mov	r9, r4
 8012168:	f814 0b01 	ldrb.w	r0, [r4], #1
 801216c:	2830      	cmp	r0, #48	@ 0x30
 801216e:	d0fa      	beq.n	8012166 <__gethex+0x12>
 8012170:	eba9 0303 	sub.w	r3, r9, r3
 8012174:	f1a3 0b02 	sub.w	fp, r3, #2
 8012178:	f7ff ffd6 	bl	8012128 <__hexdig_fun>
 801217c:	4605      	mov	r5, r0
 801217e:	2800      	cmp	r0, #0
 8012180:	d168      	bne.n	8012254 <__gethex+0x100>
 8012182:	49a0      	ldr	r1, [pc, #640]	@ (8012404 <__gethex+0x2b0>)
 8012184:	2201      	movs	r2, #1
 8012186:	4648      	mov	r0, r9
 8012188:	f7fe ffa9 	bl	80110de <strncmp>
 801218c:	4607      	mov	r7, r0
 801218e:	2800      	cmp	r0, #0
 8012190:	d167      	bne.n	8012262 <__gethex+0x10e>
 8012192:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012196:	4626      	mov	r6, r4
 8012198:	f7ff ffc6 	bl	8012128 <__hexdig_fun>
 801219c:	2800      	cmp	r0, #0
 801219e:	d062      	beq.n	8012266 <__gethex+0x112>
 80121a0:	4623      	mov	r3, r4
 80121a2:	7818      	ldrb	r0, [r3, #0]
 80121a4:	2830      	cmp	r0, #48	@ 0x30
 80121a6:	4699      	mov	r9, r3
 80121a8:	f103 0301 	add.w	r3, r3, #1
 80121ac:	d0f9      	beq.n	80121a2 <__gethex+0x4e>
 80121ae:	f7ff ffbb 	bl	8012128 <__hexdig_fun>
 80121b2:	fab0 f580 	clz	r5, r0
 80121b6:	096d      	lsrs	r5, r5, #5
 80121b8:	f04f 0b01 	mov.w	fp, #1
 80121bc:	464a      	mov	r2, r9
 80121be:	4616      	mov	r6, r2
 80121c0:	3201      	adds	r2, #1
 80121c2:	7830      	ldrb	r0, [r6, #0]
 80121c4:	f7ff ffb0 	bl	8012128 <__hexdig_fun>
 80121c8:	2800      	cmp	r0, #0
 80121ca:	d1f8      	bne.n	80121be <__gethex+0x6a>
 80121cc:	498d      	ldr	r1, [pc, #564]	@ (8012404 <__gethex+0x2b0>)
 80121ce:	2201      	movs	r2, #1
 80121d0:	4630      	mov	r0, r6
 80121d2:	f7fe ff84 	bl	80110de <strncmp>
 80121d6:	2800      	cmp	r0, #0
 80121d8:	d13f      	bne.n	801225a <__gethex+0x106>
 80121da:	b944      	cbnz	r4, 80121ee <__gethex+0x9a>
 80121dc:	1c74      	adds	r4, r6, #1
 80121de:	4622      	mov	r2, r4
 80121e0:	4616      	mov	r6, r2
 80121e2:	3201      	adds	r2, #1
 80121e4:	7830      	ldrb	r0, [r6, #0]
 80121e6:	f7ff ff9f 	bl	8012128 <__hexdig_fun>
 80121ea:	2800      	cmp	r0, #0
 80121ec:	d1f8      	bne.n	80121e0 <__gethex+0x8c>
 80121ee:	1ba4      	subs	r4, r4, r6
 80121f0:	00a7      	lsls	r7, r4, #2
 80121f2:	7833      	ldrb	r3, [r6, #0]
 80121f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80121f8:	2b50      	cmp	r3, #80	@ 0x50
 80121fa:	d13e      	bne.n	801227a <__gethex+0x126>
 80121fc:	7873      	ldrb	r3, [r6, #1]
 80121fe:	2b2b      	cmp	r3, #43	@ 0x2b
 8012200:	d033      	beq.n	801226a <__gethex+0x116>
 8012202:	2b2d      	cmp	r3, #45	@ 0x2d
 8012204:	d034      	beq.n	8012270 <__gethex+0x11c>
 8012206:	1c71      	adds	r1, r6, #1
 8012208:	2400      	movs	r4, #0
 801220a:	7808      	ldrb	r0, [r1, #0]
 801220c:	f7ff ff8c 	bl	8012128 <__hexdig_fun>
 8012210:	1e43      	subs	r3, r0, #1
 8012212:	b2db      	uxtb	r3, r3
 8012214:	2b18      	cmp	r3, #24
 8012216:	d830      	bhi.n	801227a <__gethex+0x126>
 8012218:	f1a0 0210 	sub.w	r2, r0, #16
 801221c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012220:	f7ff ff82 	bl	8012128 <__hexdig_fun>
 8012224:	f100 3cff 	add.w	ip, r0, #4294967295
 8012228:	fa5f fc8c 	uxtb.w	ip, ip
 801222c:	f1bc 0f18 	cmp.w	ip, #24
 8012230:	f04f 030a 	mov.w	r3, #10
 8012234:	d91e      	bls.n	8012274 <__gethex+0x120>
 8012236:	b104      	cbz	r4, 801223a <__gethex+0xe6>
 8012238:	4252      	negs	r2, r2
 801223a:	4417      	add	r7, r2
 801223c:	f8ca 1000 	str.w	r1, [sl]
 8012240:	b1ed      	cbz	r5, 801227e <__gethex+0x12a>
 8012242:	f1bb 0f00 	cmp.w	fp, #0
 8012246:	bf0c      	ite	eq
 8012248:	2506      	moveq	r5, #6
 801224a:	2500      	movne	r5, #0
 801224c:	4628      	mov	r0, r5
 801224e:	b005      	add	sp, #20
 8012250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012254:	2500      	movs	r5, #0
 8012256:	462c      	mov	r4, r5
 8012258:	e7b0      	b.n	80121bc <__gethex+0x68>
 801225a:	2c00      	cmp	r4, #0
 801225c:	d1c7      	bne.n	80121ee <__gethex+0x9a>
 801225e:	4627      	mov	r7, r4
 8012260:	e7c7      	b.n	80121f2 <__gethex+0x9e>
 8012262:	464e      	mov	r6, r9
 8012264:	462f      	mov	r7, r5
 8012266:	2501      	movs	r5, #1
 8012268:	e7c3      	b.n	80121f2 <__gethex+0x9e>
 801226a:	2400      	movs	r4, #0
 801226c:	1cb1      	adds	r1, r6, #2
 801226e:	e7cc      	b.n	801220a <__gethex+0xb6>
 8012270:	2401      	movs	r4, #1
 8012272:	e7fb      	b.n	801226c <__gethex+0x118>
 8012274:	fb03 0002 	mla	r0, r3, r2, r0
 8012278:	e7ce      	b.n	8012218 <__gethex+0xc4>
 801227a:	4631      	mov	r1, r6
 801227c:	e7de      	b.n	801223c <__gethex+0xe8>
 801227e:	eba6 0309 	sub.w	r3, r6, r9
 8012282:	3b01      	subs	r3, #1
 8012284:	4629      	mov	r1, r5
 8012286:	2b07      	cmp	r3, #7
 8012288:	dc0a      	bgt.n	80122a0 <__gethex+0x14c>
 801228a:	9801      	ldr	r0, [sp, #4]
 801228c:	f000 fa46 	bl	801271c <_Balloc>
 8012290:	4604      	mov	r4, r0
 8012292:	b940      	cbnz	r0, 80122a6 <__gethex+0x152>
 8012294:	4b5c      	ldr	r3, [pc, #368]	@ (8012408 <__gethex+0x2b4>)
 8012296:	4602      	mov	r2, r0
 8012298:	21e4      	movs	r1, #228	@ 0xe4
 801229a:	485c      	ldr	r0, [pc, #368]	@ (801240c <__gethex+0x2b8>)
 801229c:	f001 fe6e 	bl	8013f7c <__assert_func>
 80122a0:	3101      	adds	r1, #1
 80122a2:	105b      	asrs	r3, r3, #1
 80122a4:	e7ef      	b.n	8012286 <__gethex+0x132>
 80122a6:	f100 0a14 	add.w	sl, r0, #20
 80122aa:	2300      	movs	r3, #0
 80122ac:	4655      	mov	r5, sl
 80122ae:	469b      	mov	fp, r3
 80122b0:	45b1      	cmp	r9, r6
 80122b2:	d337      	bcc.n	8012324 <__gethex+0x1d0>
 80122b4:	f845 bb04 	str.w	fp, [r5], #4
 80122b8:	eba5 050a 	sub.w	r5, r5, sl
 80122bc:	10ad      	asrs	r5, r5, #2
 80122be:	6125      	str	r5, [r4, #16]
 80122c0:	4658      	mov	r0, fp
 80122c2:	f000 fb1d 	bl	8012900 <__hi0bits>
 80122c6:	016d      	lsls	r5, r5, #5
 80122c8:	f8d8 6000 	ldr.w	r6, [r8]
 80122cc:	1a2d      	subs	r5, r5, r0
 80122ce:	42b5      	cmp	r5, r6
 80122d0:	dd54      	ble.n	801237c <__gethex+0x228>
 80122d2:	1bad      	subs	r5, r5, r6
 80122d4:	4629      	mov	r1, r5
 80122d6:	4620      	mov	r0, r4
 80122d8:	f000 feb1 	bl	801303e <__any_on>
 80122dc:	4681      	mov	r9, r0
 80122de:	b178      	cbz	r0, 8012300 <__gethex+0x1ac>
 80122e0:	1e6b      	subs	r3, r5, #1
 80122e2:	1159      	asrs	r1, r3, #5
 80122e4:	f003 021f 	and.w	r2, r3, #31
 80122e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80122ec:	f04f 0901 	mov.w	r9, #1
 80122f0:	fa09 f202 	lsl.w	r2, r9, r2
 80122f4:	420a      	tst	r2, r1
 80122f6:	d003      	beq.n	8012300 <__gethex+0x1ac>
 80122f8:	454b      	cmp	r3, r9
 80122fa:	dc36      	bgt.n	801236a <__gethex+0x216>
 80122fc:	f04f 0902 	mov.w	r9, #2
 8012300:	4629      	mov	r1, r5
 8012302:	4620      	mov	r0, r4
 8012304:	f7ff febe 	bl	8012084 <rshift>
 8012308:	442f      	add	r7, r5
 801230a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801230e:	42bb      	cmp	r3, r7
 8012310:	da42      	bge.n	8012398 <__gethex+0x244>
 8012312:	9801      	ldr	r0, [sp, #4]
 8012314:	4621      	mov	r1, r4
 8012316:	f000 fa41 	bl	801279c <_Bfree>
 801231a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801231c:	2300      	movs	r3, #0
 801231e:	6013      	str	r3, [r2, #0]
 8012320:	25a3      	movs	r5, #163	@ 0xa3
 8012322:	e793      	b.n	801224c <__gethex+0xf8>
 8012324:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012328:	2a2e      	cmp	r2, #46	@ 0x2e
 801232a:	d012      	beq.n	8012352 <__gethex+0x1fe>
 801232c:	2b20      	cmp	r3, #32
 801232e:	d104      	bne.n	801233a <__gethex+0x1e6>
 8012330:	f845 bb04 	str.w	fp, [r5], #4
 8012334:	f04f 0b00 	mov.w	fp, #0
 8012338:	465b      	mov	r3, fp
 801233a:	7830      	ldrb	r0, [r6, #0]
 801233c:	9303      	str	r3, [sp, #12]
 801233e:	f7ff fef3 	bl	8012128 <__hexdig_fun>
 8012342:	9b03      	ldr	r3, [sp, #12]
 8012344:	f000 000f 	and.w	r0, r0, #15
 8012348:	4098      	lsls	r0, r3
 801234a:	ea4b 0b00 	orr.w	fp, fp, r0
 801234e:	3304      	adds	r3, #4
 8012350:	e7ae      	b.n	80122b0 <__gethex+0x15c>
 8012352:	45b1      	cmp	r9, r6
 8012354:	d8ea      	bhi.n	801232c <__gethex+0x1d8>
 8012356:	492b      	ldr	r1, [pc, #172]	@ (8012404 <__gethex+0x2b0>)
 8012358:	9303      	str	r3, [sp, #12]
 801235a:	2201      	movs	r2, #1
 801235c:	4630      	mov	r0, r6
 801235e:	f7fe febe 	bl	80110de <strncmp>
 8012362:	9b03      	ldr	r3, [sp, #12]
 8012364:	2800      	cmp	r0, #0
 8012366:	d1e1      	bne.n	801232c <__gethex+0x1d8>
 8012368:	e7a2      	b.n	80122b0 <__gethex+0x15c>
 801236a:	1ea9      	subs	r1, r5, #2
 801236c:	4620      	mov	r0, r4
 801236e:	f000 fe66 	bl	801303e <__any_on>
 8012372:	2800      	cmp	r0, #0
 8012374:	d0c2      	beq.n	80122fc <__gethex+0x1a8>
 8012376:	f04f 0903 	mov.w	r9, #3
 801237a:	e7c1      	b.n	8012300 <__gethex+0x1ac>
 801237c:	da09      	bge.n	8012392 <__gethex+0x23e>
 801237e:	1b75      	subs	r5, r6, r5
 8012380:	4621      	mov	r1, r4
 8012382:	9801      	ldr	r0, [sp, #4]
 8012384:	462a      	mov	r2, r5
 8012386:	f000 fc21 	bl	8012bcc <__lshift>
 801238a:	1b7f      	subs	r7, r7, r5
 801238c:	4604      	mov	r4, r0
 801238e:	f100 0a14 	add.w	sl, r0, #20
 8012392:	f04f 0900 	mov.w	r9, #0
 8012396:	e7b8      	b.n	801230a <__gethex+0x1b6>
 8012398:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801239c:	42bd      	cmp	r5, r7
 801239e:	dd6f      	ble.n	8012480 <__gethex+0x32c>
 80123a0:	1bed      	subs	r5, r5, r7
 80123a2:	42ae      	cmp	r6, r5
 80123a4:	dc34      	bgt.n	8012410 <__gethex+0x2bc>
 80123a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80123aa:	2b02      	cmp	r3, #2
 80123ac:	d022      	beq.n	80123f4 <__gethex+0x2a0>
 80123ae:	2b03      	cmp	r3, #3
 80123b0:	d024      	beq.n	80123fc <__gethex+0x2a8>
 80123b2:	2b01      	cmp	r3, #1
 80123b4:	d115      	bne.n	80123e2 <__gethex+0x28e>
 80123b6:	42ae      	cmp	r6, r5
 80123b8:	d113      	bne.n	80123e2 <__gethex+0x28e>
 80123ba:	2e01      	cmp	r6, #1
 80123bc:	d10b      	bne.n	80123d6 <__gethex+0x282>
 80123be:	9a02      	ldr	r2, [sp, #8]
 80123c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80123c4:	6013      	str	r3, [r2, #0]
 80123c6:	2301      	movs	r3, #1
 80123c8:	6123      	str	r3, [r4, #16]
 80123ca:	f8ca 3000 	str.w	r3, [sl]
 80123ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123d0:	2562      	movs	r5, #98	@ 0x62
 80123d2:	601c      	str	r4, [r3, #0]
 80123d4:	e73a      	b.n	801224c <__gethex+0xf8>
 80123d6:	1e71      	subs	r1, r6, #1
 80123d8:	4620      	mov	r0, r4
 80123da:	f000 fe30 	bl	801303e <__any_on>
 80123de:	2800      	cmp	r0, #0
 80123e0:	d1ed      	bne.n	80123be <__gethex+0x26a>
 80123e2:	9801      	ldr	r0, [sp, #4]
 80123e4:	4621      	mov	r1, r4
 80123e6:	f000 f9d9 	bl	801279c <_Bfree>
 80123ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123ec:	2300      	movs	r3, #0
 80123ee:	6013      	str	r3, [r2, #0]
 80123f0:	2550      	movs	r5, #80	@ 0x50
 80123f2:	e72b      	b.n	801224c <__gethex+0xf8>
 80123f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d1f3      	bne.n	80123e2 <__gethex+0x28e>
 80123fa:	e7e0      	b.n	80123be <__gethex+0x26a>
 80123fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d1dd      	bne.n	80123be <__gethex+0x26a>
 8012402:	e7ee      	b.n	80123e2 <__gethex+0x28e>
 8012404:	080175c5 	.word	0x080175c5
 8012408:	080177d4 	.word	0x080177d4
 801240c:	080177e5 	.word	0x080177e5
 8012410:	1e6f      	subs	r7, r5, #1
 8012412:	f1b9 0f00 	cmp.w	r9, #0
 8012416:	d130      	bne.n	801247a <__gethex+0x326>
 8012418:	b127      	cbz	r7, 8012424 <__gethex+0x2d0>
 801241a:	4639      	mov	r1, r7
 801241c:	4620      	mov	r0, r4
 801241e:	f000 fe0e 	bl	801303e <__any_on>
 8012422:	4681      	mov	r9, r0
 8012424:	117a      	asrs	r2, r7, #5
 8012426:	2301      	movs	r3, #1
 8012428:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801242c:	f007 071f 	and.w	r7, r7, #31
 8012430:	40bb      	lsls	r3, r7
 8012432:	4213      	tst	r3, r2
 8012434:	4629      	mov	r1, r5
 8012436:	4620      	mov	r0, r4
 8012438:	bf18      	it	ne
 801243a:	f049 0902 	orrne.w	r9, r9, #2
 801243e:	f7ff fe21 	bl	8012084 <rshift>
 8012442:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012446:	1b76      	subs	r6, r6, r5
 8012448:	2502      	movs	r5, #2
 801244a:	f1b9 0f00 	cmp.w	r9, #0
 801244e:	d047      	beq.n	80124e0 <__gethex+0x38c>
 8012450:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012454:	2b02      	cmp	r3, #2
 8012456:	d015      	beq.n	8012484 <__gethex+0x330>
 8012458:	2b03      	cmp	r3, #3
 801245a:	d017      	beq.n	801248c <__gethex+0x338>
 801245c:	2b01      	cmp	r3, #1
 801245e:	d109      	bne.n	8012474 <__gethex+0x320>
 8012460:	f019 0f02 	tst.w	r9, #2
 8012464:	d006      	beq.n	8012474 <__gethex+0x320>
 8012466:	f8da 3000 	ldr.w	r3, [sl]
 801246a:	ea49 0903 	orr.w	r9, r9, r3
 801246e:	f019 0f01 	tst.w	r9, #1
 8012472:	d10e      	bne.n	8012492 <__gethex+0x33e>
 8012474:	f045 0510 	orr.w	r5, r5, #16
 8012478:	e032      	b.n	80124e0 <__gethex+0x38c>
 801247a:	f04f 0901 	mov.w	r9, #1
 801247e:	e7d1      	b.n	8012424 <__gethex+0x2d0>
 8012480:	2501      	movs	r5, #1
 8012482:	e7e2      	b.n	801244a <__gethex+0x2f6>
 8012484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012486:	f1c3 0301 	rsb	r3, r3, #1
 801248a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801248c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801248e:	2b00      	cmp	r3, #0
 8012490:	d0f0      	beq.n	8012474 <__gethex+0x320>
 8012492:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012496:	f104 0314 	add.w	r3, r4, #20
 801249a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801249e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80124a2:	f04f 0c00 	mov.w	ip, #0
 80124a6:	4618      	mov	r0, r3
 80124a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80124ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80124b0:	d01b      	beq.n	80124ea <__gethex+0x396>
 80124b2:	3201      	adds	r2, #1
 80124b4:	6002      	str	r2, [r0, #0]
 80124b6:	2d02      	cmp	r5, #2
 80124b8:	f104 0314 	add.w	r3, r4, #20
 80124bc:	d13c      	bne.n	8012538 <__gethex+0x3e4>
 80124be:	f8d8 2000 	ldr.w	r2, [r8]
 80124c2:	3a01      	subs	r2, #1
 80124c4:	42b2      	cmp	r2, r6
 80124c6:	d109      	bne.n	80124dc <__gethex+0x388>
 80124c8:	1171      	asrs	r1, r6, #5
 80124ca:	2201      	movs	r2, #1
 80124cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80124d0:	f006 061f 	and.w	r6, r6, #31
 80124d4:	fa02 f606 	lsl.w	r6, r2, r6
 80124d8:	421e      	tst	r6, r3
 80124da:	d13a      	bne.n	8012552 <__gethex+0x3fe>
 80124dc:	f045 0520 	orr.w	r5, r5, #32
 80124e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124e2:	601c      	str	r4, [r3, #0]
 80124e4:	9b02      	ldr	r3, [sp, #8]
 80124e6:	601f      	str	r7, [r3, #0]
 80124e8:	e6b0      	b.n	801224c <__gethex+0xf8>
 80124ea:	4299      	cmp	r1, r3
 80124ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80124f0:	d8d9      	bhi.n	80124a6 <__gethex+0x352>
 80124f2:	68a3      	ldr	r3, [r4, #8]
 80124f4:	459b      	cmp	fp, r3
 80124f6:	db17      	blt.n	8012528 <__gethex+0x3d4>
 80124f8:	6861      	ldr	r1, [r4, #4]
 80124fa:	9801      	ldr	r0, [sp, #4]
 80124fc:	3101      	adds	r1, #1
 80124fe:	f000 f90d 	bl	801271c <_Balloc>
 8012502:	4681      	mov	r9, r0
 8012504:	b918      	cbnz	r0, 801250e <__gethex+0x3ba>
 8012506:	4b1a      	ldr	r3, [pc, #104]	@ (8012570 <__gethex+0x41c>)
 8012508:	4602      	mov	r2, r0
 801250a:	2184      	movs	r1, #132	@ 0x84
 801250c:	e6c5      	b.n	801229a <__gethex+0x146>
 801250e:	6922      	ldr	r2, [r4, #16]
 8012510:	3202      	adds	r2, #2
 8012512:	f104 010c 	add.w	r1, r4, #12
 8012516:	0092      	lsls	r2, r2, #2
 8012518:	300c      	adds	r0, #12
 801251a:	f7fe fefd 	bl	8011318 <memcpy>
 801251e:	4621      	mov	r1, r4
 8012520:	9801      	ldr	r0, [sp, #4]
 8012522:	f000 f93b 	bl	801279c <_Bfree>
 8012526:	464c      	mov	r4, r9
 8012528:	6923      	ldr	r3, [r4, #16]
 801252a:	1c5a      	adds	r2, r3, #1
 801252c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012530:	6122      	str	r2, [r4, #16]
 8012532:	2201      	movs	r2, #1
 8012534:	615a      	str	r2, [r3, #20]
 8012536:	e7be      	b.n	80124b6 <__gethex+0x362>
 8012538:	6922      	ldr	r2, [r4, #16]
 801253a:	455a      	cmp	r2, fp
 801253c:	dd0b      	ble.n	8012556 <__gethex+0x402>
 801253e:	2101      	movs	r1, #1
 8012540:	4620      	mov	r0, r4
 8012542:	f7ff fd9f 	bl	8012084 <rshift>
 8012546:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801254a:	3701      	adds	r7, #1
 801254c:	42bb      	cmp	r3, r7
 801254e:	f6ff aee0 	blt.w	8012312 <__gethex+0x1be>
 8012552:	2501      	movs	r5, #1
 8012554:	e7c2      	b.n	80124dc <__gethex+0x388>
 8012556:	f016 061f 	ands.w	r6, r6, #31
 801255a:	d0fa      	beq.n	8012552 <__gethex+0x3fe>
 801255c:	4453      	add	r3, sl
 801255e:	f1c6 0620 	rsb	r6, r6, #32
 8012562:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012566:	f000 f9cb 	bl	8012900 <__hi0bits>
 801256a:	42b0      	cmp	r0, r6
 801256c:	dbe7      	blt.n	801253e <__gethex+0x3ea>
 801256e:	e7f0      	b.n	8012552 <__gethex+0x3fe>
 8012570:	080177d4 	.word	0x080177d4

08012574 <L_shift>:
 8012574:	f1c2 0208 	rsb	r2, r2, #8
 8012578:	0092      	lsls	r2, r2, #2
 801257a:	b570      	push	{r4, r5, r6, lr}
 801257c:	f1c2 0620 	rsb	r6, r2, #32
 8012580:	6843      	ldr	r3, [r0, #4]
 8012582:	6804      	ldr	r4, [r0, #0]
 8012584:	fa03 f506 	lsl.w	r5, r3, r6
 8012588:	432c      	orrs	r4, r5
 801258a:	40d3      	lsrs	r3, r2
 801258c:	6004      	str	r4, [r0, #0]
 801258e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012592:	4288      	cmp	r0, r1
 8012594:	d3f4      	bcc.n	8012580 <L_shift+0xc>
 8012596:	bd70      	pop	{r4, r5, r6, pc}

08012598 <__match>:
 8012598:	b530      	push	{r4, r5, lr}
 801259a:	6803      	ldr	r3, [r0, #0]
 801259c:	3301      	adds	r3, #1
 801259e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125a2:	b914      	cbnz	r4, 80125aa <__match+0x12>
 80125a4:	6003      	str	r3, [r0, #0]
 80125a6:	2001      	movs	r0, #1
 80125a8:	bd30      	pop	{r4, r5, pc}
 80125aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80125b2:	2d19      	cmp	r5, #25
 80125b4:	bf98      	it	ls
 80125b6:	3220      	addls	r2, #32
 80125b8:	42a2      	cmp	r2, r4
 80125ba:	d0f0      	beq.n	801259e <__match+0x6>
 80125bc:	2000      	movs	r0, #0
 80125be:	e7f3      	b.n	80125a8 <__match+0x10>

080125c0 <__hexnan>:
 80125c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125c4:	680b      	ldr	r3, [r1, #0]
 80125c6:	6801      	ldr	r1, [r0, #0]
 80125c8:	115e      	asrs	r6, r3, #5
 80125ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80125ce:	f013 031f 	ands.w	r3, r3, #31
 80125d2:	b087      	sub	sp, #28
 80125d4:	bf18      	it	ne
 80125d6:	3604      	addne	r6, #4
 80125d8:	2500      	movs	r5, #0
 80125da:	1f37      	subs	r7, r6, #4
 80125dc:	4682      	mov	sl, r0
 80125de:	4690      	mov	r8, r2
 80125e0:	9301      	str	r3, [sp, #4]
 80125e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80125e6:	46b9      	mov	r9, r7
 80125e8:	463c      	mov	r4, r7
 80125ea:	9502      	str	r5, [sp, #8]
 80125ec:	46ab      	mov	fp, r5
 80125ee:	784a      	ldrb	r2, [r1, #1]
 80125f0:	1c4b      	adds	r3, r1, #1
 80125f2:	9303      	str	r3, [sp, #12]
 80125f4:	b342      	cbz	r2, 8012648 <__hexnan+0x88>
 80125f6:	4610      	mov	r0, r2
 80125f8:	9105      	str	r1, [sp, #20]
 80125fa:	9204      	str	r2, [sp, #16]
 80125fc:	f7ff fd94 	bl	8012128 <__hexdig_fun>
 8012600:	2800      	cmp	r0, #0
 8012602:	d151      	bne.n	80126a8 <__hexnan+0xe8>
 8012604:	9a04      	ldr	r2, [sp, #16]
 8012606:	9905      	ldr	r1, [sp, #20]
 8012608:	2a20      	cmp	r2, #32
 801260a:	d818      	bhi.n	801263e <__hexnan+0x7e>
 801260c:	9b02      	ldr	r3, [sp, #8]
 801260e:	459b      	cmp	fp, r3
 8012610:	dd13      	ble.n	801263a <__hexnan+0x7a>
 8012612:	454c      	cmp	r4, r9
 8012614:	d206      	bcs.n	8012624 <__hexnan+0x64>
 8012616:	2d07      	cmp	r5, #7
 8012618:	dc04      	bgt.n	8012624 <__hexnan+0x64>
 801261a:	462a      	mov	r2, r5
 801261c:	4649      	mov	r1, r9
 801261e:	4620      	mov	r0, r4
 8012620:	f7ff ffa8 	bl	8012574 <L_shift>
 8012624:	4544      	cmp	r4, r8
 8012626:	d952      	bls.n	80126ce <__hexnan+0x10e>
 8012628:	2300      	movs	r3, #0
 801262a:	f1a4 0904 	sub.w	r9, r4, #4
 801262e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012632:	f8cd b008 	str.w	fp, [sp, #8]
 8012636:	464c      	mov	r4, r9
 8012638:	461d      	mov	r5, r3
 801263a:	9903      	ldr	r1, [sp, #12]
 801263c:	e7d7      	b.n	80125ee <__hexnan+0x2e>
 801263e:	2a29      	cmp	r2, #41	@ 0x29
 8012640:	d157      	bne.n	80126f2 <__hexnan+0x132>
 8012642:	3102      	adds	r1, #2
 8012644:	f8ca 1000 	str.w	r1, [sl]
 8012648:	f1bb 0f00 	cmp.w	fp, #0
 801264c:	d051      	beq.n	80126f2 <__hexnan+0x132>
 801264e:	454c      	cmp	r4, r9
 8012650:	d206      	bcs.n	8012660 <__hexnan+0xa0>
 8012652:	2d07      	cmp	r5, #7
 8012654:	dc04      	bgt.n	8012660 <__hexnan+0xa0>
 8012656:	462a      	mov	r2, r5
 8012658:	4649      	mov	r1, r9
 801265a:	4620      	mov	r0, r4
 801265c:	f7ff ff8a 	bl	8012574 <L_shift>
 8012660:	4544      	cmp	r4, r8
 8012662:	d936      	bls.n	80126d2 <__hexnan+0x112>
 8012664:	f1a8 0204 	sub.w	r2, r8, #4
 8012668:	4623      	mov	r3, r4
 801266a:	f853 1b04 	ldr.w	r1, [r3], #4
 801266e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012672:	429f      	cmp	r7, r3
 8012674:	d2f9      	bcs.n	801266a <__hexnan+0xaa>
 8012676:	1b3b      	subs	r3, r7, r4
 8012678:	f023 0303 	bic.w	r3, r3, #3
 801267c:	3304      	adds	r3, #4
 801267e:	3401      	adds	r4, #1
 8012680:	3e03      	subs	r6, #3
 8012682:	42b4      	cmp	r4, r6
 8012684:	bf88      	it	hi
 8012686:	2304      	movhi	r3, #4
 8012688:	4443      	add	r3, r8
 801268a:	2200      	movs	r2, #0
 801268c:	f843 2b04 	str.w	r2, [r3], #4
 8012690:	429f      	cmp	r7, r3
 8012692:	d2fb      	bcs.n	801268c <__hexnan+0xcc>
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	b91b      	cbnz	r3, 80126a0 <__hexnan+0xe0>
 8012698:	4547      	cmp	r7, r8
 801269a:	d128      	bne.n	80126ee <__hexnan+0x12e>
 801269c:	2301      	movs	r3, #1
 801269e:	603b      	str	r3, [r7, #0]
 80126a0:	2005      	movs	r0, #5
 80126a2:	b007      	add	sp, #28
 80126a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126a8:	3501      	adds	r5, #1
 80126aa:	2d08      	cmp	r5, #8
 80126ac:	f10b 0b01 	add.w	fp, fp, #1
 80126b0:	dd06      	ble.n	80126c0 <__hexnan+0x100>
 80126b2:	4544      	cmp	r4, r8
 80126b4:	d9c1      	bls.n	801263a <__hexnan+0x7a>
 80126b6:	2300      	movs	r3, #0
 80126b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80126bc:	2501      	movs	r5, #1
 80126be:	3c04      	subs	r4, #4
 80126c0:	6822      	ldr	r2, [r4, #0]
 80126c2:	f000 000f 	and.w	r0, r0, #15
 80126c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80126ca:	6020      	str	r0, [r4, #0]
 80126cc:	e7b5      	b.n	801263a <__hexnan+0x7a>
 80126ce:	2508      	movs	r5, #8
 80126d0:	e7b3      	b.n	801263a <__hexnan+0x7a>
 80126d2:	9b01      	ldr	r3, [sp, #4]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d0dd      	beq.n	8012694 <__hexnan+0xd4>
 80126d8:	f1c3 0320 	rsb	r3, r3, #32
 80126dc:	f04f 32ff 	mov.w	r2, #4294967295
 80126e0:	40da      	lsrs	r2, r3
 80126e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80126e6:	4013      	ands	r3, r2
 80126e8:	f846 3c04 	str.w	r3, [r6, #-4]
 80126ec:	e7d2      	b.n	8012694 <__hexnan+0xd4>
 80126ee:	3f04      	subs	r7, #4
 80126f0:	e7d0      	b.n	8012694 <__hexnan+0xd4>
 80126f2:	2004      	movs	r0, #4
 80126f4:	e7d5      	b.n	80126a2 <__hexnan+0xe2>

080126f6 <__ascii_mbtowc>:
 80126f6:	b082      	sub	sp, #8
 80126f8:	b901      	cbnz	r1, 80126fc <__ascii_mbtowc+0x6>
 80126fa:	a901      	add	r1, sp, #4
 80126fc:	b142      	cbz	r2, 8012710 <__ascii_mbtowc+0x1a>
 80126fe:	b14b      	cbz	r3, 8012714 <__ascii_mbtowc+0x1e>
 8012700:	7813      	ldrb	r3, [r2, #0]
 8012702:	600b      	str	r3, [r1, #0]
 8012704:	7812      	ldrb	r2, [r2, #0]
 8012706:	1e10      	subs	r0, r2, #0
 8012708:	bf18      	it	ne
 801270a:	2001      	movne	r0, #1
 801270c:	b002      	add	sp, #8
 801270e:	4770      	bx	lr
 8012710:	4610      	mov	r0, r2
 8012712:	e7fb      	b.n	801270c <__ascii_mbtowc+0x16>
 8012714:	f06f 0001 	mvn.w	r0, #1
 8012718:	e7f8      	b.n	801270c <__ascii_mbtowc+0x16>
	...

0801271c <_Balloc>:
 801271c:	b570      	push	{r4, r5, r6, lr}
 801271e:	69c6      	ldr	r6, [r0, #28]
 8012720:	4604      	mov	r4, r0
 8012722:	460d      	mov	r5, r1
 8012724:	b976      	cbnz	r6, 8012744 <_Balloc+0x28>
 8012726:	2010      	movs	r0, #16
 8012728:	f7fc fc12 	bl	800ef50 <malloc>
 801272c:	4602      	mov	r2, r0
 801272e:	61e0      	str	r0, [r4, #28]
 8012730:	b920      	cbnz	r0, 801273c <_Balloc+0x20>
 8012732:	4b18      	ldr	r3, [pc, #96]	@ (8012794 <_Balloc+0x78>)
 8012734:	4818      	ldr	r0, [pc, #96]	@ (8012798 <_Balloc+0x7c>)
 8012736:	216b      	movs	r1, #107	@ 0x6b
 8012738:	f001 fc20 	bl	8013f7c <__assert_func>
 801273c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012740:	6006      	str	r6, [r0, #0]
 8012742:	60c6      	str	r6, [r0, #12]
 8012744:	69e6      	ldr	r6, [r4, #28]
 8012746:	68f3      	ldr	r3, [r6, #12]
 8012748:	b183      	cbz	r3, 801276c <_Balloc+0x50>
 801274a:	69e3      	ldr	r3, [r4, #28]
 801274c:	68db      	ldr	r3, [r3, #12]
 801274e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012752:	b9b8      	cbnz	r0, 8012784 <_Balloc+0x68>
 8012754:	2101      	movs	r1, #1
 8012756:	fa01 f605 	lsl.w	r6, r1, r5
 801275a:	1d72      	adds	r2, r6, #5
 801275c:	0092      	lsls	r2, r2, #2
 801275e:	4620      	mov	r0, r4
 8012760:	f001 fc2a 	bl	8013fb8 <_calloc_r>
 8012764:	b160      	cbz	r0, 8012780 <_Balloc+0x64>
 8012766:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801276a:	e00e      	b.n	801278a <_Balloc+0x6e>
 801276c:	2221      	movs	r2, #33	@ 0x21
 801276e:	2104      	movs	r1, #4
 8012770:	4620      	mov	r0, r4
 8012772:	f001 fc21 	bl	8013fb8 <_calloc_r>
 8012776:	69e3      	ldr	r3, [r4, #28]
 8012778:	60f0      	str	r0, [r6, #12]
 801277a:	68db      	ldr	r3, [r3, #12]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d1e4      	bne.n	801274a <_Balloc+0x2e>
 8012780:	2000      	movs	r0, #0
 8012782:	bd70      	pop	{r4, r5, r6, pc}
 8012784:	6802      	ldr	r2, [r0, #0]
 8012786:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801278a:	2300      	movs	r3, #0
 801278c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012790:	e7f7      	b.n	8012782 <_Balloc+0x66>
 8012792:	bf00      	nop
 8012794:	08017765 	.word	0x08017765
 8012798:	08017845 	.word	0x08017845

0801279c <_Bfree>:
 801279c:	b570      	push	{r4, r5, r6, lr}
 801279e:	69c6      	ldr	r6, [r0, #28]
 80127a0:	4605      	mov	r5, r0
 80127a2:	460c      	mov	r4, r1
 80127a4:	b976      	cbnz	r6, 80127c4 <_Bfree+0x28>
 80127a6:	2010      	movs	r0, #16
 80127a8:	f7fc fbd2 	bl	800ef50 <malloc>
 80127ac:	4602      	mov	r2, r0
 80127ae:	61e8      	str	r0, [r5, #28]
 80127b0:	b920      	cbnz	r0, 80127bc <_Bfree+0x20>
 80127b2:	4b09      	ldr	r3, [pc, #36]	@ (80127d8 <_Bfree+0x3c>)
 80127b4:	4809      	ldr	r0, [pc, #36]	@ (80127dc <_Bfree+0x40>)
 80127b6:	218f      	movs	r1, #143	@ 0x8f
 80127b8:	f001 fbe0 	bl	8013f7c <__assert_func>
 80127bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127c0:	6006      	str	r6, [r0, #0]
 80127c2:	60c6      	str	r6, [r0, #12]
 80127c4:	b13c      	cbz	r4, 80127d6 <_Bfree+0x3a>
 80127c6:	69eb      	ldr	r3, [r5, #28]
 80127c8:	6862      	ldr	r2, [r4, #4]
 80127ca:	68db      	ldr	r3, [r3, #12]
 80127cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80127d0:	6021      	str	r1, [r4, #0]
 80127d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80127d6:	bd70      	pop	{r4, r5, r6, pc}
 80127d8:	08017765 	.word	0x08017765
 80127dc:	08017845 	.word	0x08017845

080127e0 <__multadd>:
 80127e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127e4:	690d      	ldr	r5, [r1, #16]
 80127e6:	4607      	mov	r7, r0
 80127e8:	460c      	mov	r4, r1
 80127ea:	461e      	mov	r6, r3
 80127ec:	f101 0c14 	add.w	ip, r1, #20
 80127f0:	2000      	movs	r0, #0
 80127f2:	f8dc 3000 	ldr.w	r3, [ip]
 80127f6:	b299      	uxth	r1, r3
 80127f8:	fb02 6101 	mla	r1, r2, r1, r6
 80127fc:	0c1e      	lsrs	r6, r3, #16
 80127fe:	0c0b      	lsrs	r3, r1, #16
 8012800:	fb02 3306 	mla	r3, r2, r6, r3
 8012804:	b289      	uxth	r1, r1
 8012806:	3001      	adds	r0, #1
 8012808:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801280c:	4285      	cmp	r5, r0
 801280e:	f84c 1b04 	str.w	r1, [ip], #4
 8012812:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012816:	dcec      	bgt.n	80127f2 <__multadd+0x12>
 8012818:	b30e      	cbz	r6, 801285e <__multadd+0x7e>
 801281a:	68a3      	ldr	r3, [r4, #8]
 801281c:	42ab      	cmp	r3, r5
 801281e:	dc19      	bgt.n	8012854 <__multadd+0x74>
 8012820:	6861      	ldr	r1, [r4, #4]
 8012822:	4638      	mov	r0, r7
 8012824:	3101      	adds	r1, #1
 8012826:	f7ff ff79 	bl	801271c <_Balloc>
 801282a:	4680      	mov	r8, r0
 801282c:	b928      	cbnz	r0, 801283a <__multadd+0x5a>
 801282e:	4602      	mov	r2, r0
 8012830:	4b0c      	ldr	r3, [pc, #48]	@ (8012864 <__multadd+0x84>)
 8012832:	480d      	ldr	r0, [pc, #52]	@ (8012868 <__multadd+0x88>)
 8012834:	21ba      	movs	r1, #186	@ 0xba
 8012836:	f001 fba1 	bl	8013f7c <__assert_func>
 801283a:	6922      	ldr	r2, [r4, #16]
 801283c:	3202      	adds	r2, #2
 801283e:	f104 010c 	add.w	r1, r4, #12
 8012842:	0092      	lsls	r2, r2, #2
 8012844:	300c      	adds	r0, #12
 8012846:	f7fe fd67 	bl	8011318 <memcpy>
 801284a:	4621      	mov	r1, r4
 801284c:	4638      	mov	r0, r7
 801284e:	f7ff ffa5 	bl	801279c <_Bfree>
 8012852:	4644      	mov	r4, r8
 8012854:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012858:	3501      	adds	r5, #1
 801285a:	615e      	str	r6, [r3, #20]
 801285c:	6125      	str	r5, [r4, #16]
 801285e:	4620      	mov	r0, r4
 8012860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012864:	080177d4 	.word	0x080177d4
 8012868:	08017845 	.word	0x08017845

0801286c <__s2b>:
 801286c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012870:	460c      	mov	r4, r1
 8012872:	4615      	mov	r5, r2
 8012874:	461f      	mov	r7, r3
 8012876:	2209      	movs	r2, #9
 8012878:	3308      	adds	r3, #8
 801287a:	4606      	mov	r6, r0
 801287c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012880:	2100      	movs	r1, #0
 8012882:	2201      	movs	r2, #1
 8012884:	429a      	cmp	r2, r3
 8012886:	db09      	blt.n	801289c <__s2b+0x30>
 8012888:	4630      	mov	r0, r6
 801288a:	f7ff ff47 	bl	801271c <_Balloc>
 801288e:	b940      	cbnz	r0, 80128a2 <__s2b+0x36>
 8012890:	4602      	mov	r2, r0
 8012892:	4b19      	ldr	r3, [pc, #100]	@ (80128f8 <__s2b+0x8c>)
 8012894:	4819      	ldr	r0, [pc, #100]	@ (80128fc <__s2b+0x90>)
 8012896:	21d3      	movs	r1, #211	@ 0xd3
 8012898:	f001 fb70 	bl	8013f7c <__assert_func>
 801289c:	0052      	lsls	r2, r2, #1
 801289e:	3101      	adds	r1, #1
 80128a0:	e7f0      	b.n	8012884 <__s2b+0x18>
 80128a2:	9b08      	ldr	r3, [sp, #32]
 80128a4:	6143      	str	r3, [r0, #20]
 80128a6:	2d09      	cmp	r5, #9
 80128a8:	f04f 0301 	mov.w	r3, #1
 80128ac:	6103      	str	r3, [r0, #16]
 80128ae:	dd16      	ble.n	80128de <__s2b+0x72>
 80128b0:	f104 0909 	add.w	r9, r4, #9
 80128b4:	46c8      	mov	r8, r9
 80128b6:	442c      	add	r4, r5
 80128b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80128bc:	4601      	mov	r1, r0
 80128be:	3b30      	subs	r3, #48	@ 0x30
 80128c0:	220a      	movs	r2, #10
 80128c2:	4630      	mov	r0, r6
 80128c4:	f7ff ff8c 	bl	80127e0 <__multadd>
 80128c8:	45a0      	cmp	r8, r4
 80128ca:	d1f5      	bne.n	80128b8 <__s2b+0x4c>
 80128cc:	f1a5 0408 	sub.w	r4, r5, #8
 80128d0:	444c      	add	r4, r9
 80128d2:	1b2d      	subs	r5, r5, r4
 80128d4:	1963      	adds	r3, r4, r5
 80128d6:	42bb      	cmp	r3, r7
 80128d8:	db04      	blt.n	80128e4 <__s2b+0x78>
 80128da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128de:	340a      	adds	r4, #10
 80128e0:	2509      	movs	r5, #9
 80128e2:	e7f6      	b.n	80128d2 <__s2b+0x66>
 80128e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80128e8:	4601      	mov	r1, r0
 80128ea:	3b30      	subs	r3, #48	@ 0x30
 80128ec:	220a      	movs	r2, #10
 80128ee:	4630      	mov	r0, r6
 80128f0:	f7ff ff76 	bl	80127e0 <__multadd>
 80128f4:	e7ee      	b.n	80128d4 <__s2b+0x68>
 80128f6:	bf00      	nop
 80128f8:	080177d4 	.word	0x080177d4
 80128fc:	08017845 	.word	0x08017845

08012900 <__hi0bits>:
 8012900:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012904:	4603      	mov	r3, r0
 8012906:	bf36      	itet	cc
 8012908:	0403      	lslcc	r3, r0, #16
 801290a:	2000      	movcs	r0, #0
 801290c:	2010      	movcc	r0, #16
 801290e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012912:	bf3c      	itt	cc
 8012914:	021b      	lslcc	r3, r3, #8
 8012916:	3008      	addcc	r0, #8
 8012918:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801291c:	bf3c      	itt	cc
 801291e:	011b      	lslcc	r3, r3, #4
 8012920:	3004      	addcc	r0, #4
 8012922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012926:	bf3c      	itt	cc
 8012928:	009b      	lslcc	r3, r3, #2
 801292a:	3002      	addcc	r0, #2
 801292c:	2b00      	cmp	r3, #0
 801292e:	db05      	blt.n	801293c <__hi0bits+0x3c>
 8012930:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012934:	f100 0001 	add.w	r0, r0, #1
 8012938:	bf08      	it	eq
 801293a:	2020      	moveq	r0, #32
 801293c:	4770      	bx	lr

0801293e <__lo0bits>:
 801293e:	6803      	ldr	r3, [r0, #0]
 8012940:	4602      	mov	r2, r0
 8012942:	f013 0007 	ands.w	r0, r3, #7
 8012946:	d00b      	beq.n	8012960 <__lo0bits+0x22>
 8012948:	07d9      	lsls	r1, r3, #31
 801294a:	d421      	bmi.n	8012990 <__lo0bits+0x52>
 801294c:	0798      	lsls	r0, r3, #30
 801294e:	bf49      	itett	mi
 8012950:	085b      	lsrmi	r3, r3, #1
 8012952:	089b      	lsrpl	r3, r3, #2
 8012954:	2001      	movmi	r0, #1
 8012956:	6013      	strmi	r3, [r2, #0]
 8012958:	bf5c      	itt	pl
 801295a:	6013      	strpl	r3, [r2, #0]
 801295c:	2002      	movpl	r0, #2
 801295e:	4770      	bx	lr
 8012960:	b299      	uxth	r1, r3
 8012962:	b909      	cbnz	r1, 8012968 <__lo0bits+0x2a>
 8012964:	0c1b      	lsrs	r3, r3, #16
 8012966:	2010      	movs	r0, #16
 8012968:	b2d9      	uxtb	r1, r3
 801296a:	b909      	cbnz	r1, 8012970 <__lo0bits+0x32>
 801296c:	3008      	adds	r0, #8
 801296e:	0a1b      	lsrs	r3, r3, #8
 8012970:	0719      	lsls	r1, r3, #28
 8012972:	bf04      	itt	eq
 8012974:	091b      	lsreq	r3, r3, #4
 8012976:	3004      	addeq	r0, #4
 8012978:	0799      	lsls	r1, r3, #30
 801297a:	bf04      	itt	eq
 801297c:	089b      	lsreq	r3, r3, #2
 801297e:	3002      	addeq	r0, #2
 8012980:	07d9      	lsls	r1, r3, #31
 8012982:	d403      	bmi.n	801298c <__lo0bits+0x4e>
 8012984:	085b      	lsrs	r3, r3, #1
 8012986:	f100 0001 	add.w	r0, r0, #1
 801298a:	d003      	beq.n	8012994 <__lo0bits+0x56>
 801298c:	6013      	str	r3, [r2, #0]
 801298e:	4770      	bx	lr
 8012990:	2000      	movs	r0, #0
 8012992:	4770      	bx	lr
 8012994:	2020      	movs	r0, #32
 8012996:	4770      	bx	lr

08012998 <__i2b>:
 8012998:	b510      	push	{r4, lr}
 801299a:	460c      	mov	r4, r1
 801299c:	2101      	movs	r1, #1
 801299e:	f7ff febd 	bl	801271c <_Balloc>
 80129a2:	4602      	mov	r2, r0
 80129a4:	b928      	cbnz	r0, 80129b2 <__i2b+0x1a>
 80129a6:	4b05      	ldr	r3, [pc, #20]	@ (80129bc <__i2b+0x24>)
 80129a8:	4805      	ldr	r0, [pc, #20]	@ (80129c0 <__i2b+0x28>)
 80129aa:	f240 1145 	movw	r1, #325	@ 0x145
 80129ae:	f001 fae5 	bl	8013f7c <__assert_func>
 80129b2:	2301      	movs	r3, #1
 80129b4:	6144      	str	r4, [r0, #20]
 80129b6:	6103      	str	r3, [r0, #16]
 80129b8:	bd10      	pop	{r4, pc}
 80129ba:	bf00      	nop
 80129bc:	080177d4 	.word	0x080177d4
 80129c0:	08017845 	.word	0x08017845

080129c4 <__multiply>:
 80129c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c8:	4614      	mov	r4, r2
 80129ca:	690a      	ldr	r2, [r1, #16]
 80129cc:	6923      	ldr	r3, [r4, #16]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	bfa8      	it	ge
 80129d2:	4623      	movge	r3, r4
 80129d4:	460f      	mov	r7, r1
 80129d6:	bfa4      	itt	ge
 80129d8:	460c      	movge	r4, r1
 80129da:	461f      	movge	r7, r3
 80129dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80129e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80129e4:	68a3      	ldr	r3, [r4, #8]
 80129e6:	6861      	ldr	r1, [r4, #4]
 80129e8:	eb0a 0609 	add.w	r6, sl, r9
 80129ec:	42b3      	cmp	r3, r6
 80129ee:	b085      	sub	sp, #20
 80129f0:	bfb8      	it	lt
 80129f2:	3101      	addlt	r1, #1
 80129f4:	f7ff fe92 	bl	801271c <_Balloc>
 80129f8:	b930      	cbnz	r0, 8012a08 <__multiply+0x44>
 80129fa:	4602      	mov	r2, r0
 80129fc:	4b44      	ldr	r3, [pc, #272]	@ (8012b10 <__multiply+0x14c>)
 80129fe:	4845      	ldr	r0, [pc, #276]	@ (8012b14 <__multiply+0x150>)
 8012a00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012a04:	f001 faba 	bl	8013f7c <__assert_func>
 8012a08:	f100 0514 	add.w	r5, r0, #20
 8012a0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012a10:	462b      	mov	r3, r5
 8012a12:	2200      	movs	r2, #0
 8012a14:	4543      	cmp	r3, r8
 8012a16:	d321      	bcc.n	8012a5c <__multiply+0x98>
 8012a18:	f107 0114 	add.w	r1, r7, #20
 8012a1c:	f104 0214 	add.w	r2, r4, #20
 8012a20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012a24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012a28:	9302      	str	r3, [sp, #8]
 8012a2a:	1b13      	subs	r3, r2, r4
 8012a2c:	3b15      	subs	r3, #21
 8012a2e:	f023 0303 	bic.w	r3, r3, #3
 8012a32:	3304      	adds	r3, #4
 8012a34:	f104 0715 	add.w	r7, r4, #21
 8012a38:	42ba      	cmp	r2, r7
 8012a3a:	bf38      	it	cc
 8012a3c:	2304      	movcc	r3, #4
 8012a3e:	9301      	str	r3, [sp, #4]
 8012a40:	9b02      	ldr	r3, [sp, #8]
 8012a42:	9103      	str	r1, [sp, #12]
 8012a44:	428b      	cmp	r3, r1
 8012a46:	d80c      	bhi.n	8012a62 <__multiply+0x9e>
 8012a48:	2e00      	cmp	r6, #0
 8012a4a:	dd03      	ble.n	8012a54 <__multiply+0x90>
 8012a4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d05b      	beq.n	8012b0c <__multiply+0x148>
 8012a54:	6106      	str	r6, [r0, #16]
 8012a56:	b005      	add	sp, #20
 8012a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a5c:	f843 2b04 	str.w	r2, [r3], #4
 8012a60:	e7d8      	b.n	8012a14 <__multiply+0x50>
 8012a62:	f8b1 a000 	ldrh.w	sl, [r1]
 8012a66:	f1ba 0f00 	cmp.w	sl, #0
 8012a6a:	d024      	beq.n	8012ab6 <__multiply+0xf2>
 8012a6c:	f104 0e14 	add.w	lr, r4, #20
 8012a70:	46a9      	mov	r9, r5
 8012a72:	f04f 0c00 	mov.w	ip, #0
 8012a76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012a7a:	f8d9 3000 	ldr.w	r3, [r9]
 8012a7e:	fa1f fb87 	uxth.w	fp, r7
 8012a82:	b29b      	uxth	r3, r3
 8012a84:	fb0a 330b 	mla	r3, sl, fp, r3
 8012a88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012a8c:	f8d9 7000 	ldr.w	r7, [r9]
 8012a90:	4463      	add	r3, ip
 8012a92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012a96:	fb0a c70b 	mla	r7, sl, fp, ip
 8012a9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012aa4:	4572      	cmp	r2, lr
 8012aa6:	f849 3b04 	str.w	r3, [r9], #4
 8012aaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012aae:	d8e2      	bhi.n	8012a76 <__multiply+0xb2>
 8012ab0:	9b01      	ldr	r3, [sp, #4]
 8012ab2:	f845 c003 	str.w	ip, [r5, r3]
 8012ab6:	9b03      	ldr	r3, [sp, #12]
 8012ab8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012abc:	3104      	adds	r1, #4
 8012abe:	f1b9 0f00 	cmp.w	r9, #0
 8012ac2:	d021      	beq.n	8012b08 <__multiply+0x144>
 8012ac4:	682b      	ldr	r3, [r5, #0]
 8012ac6:	f104 0c14 	add.w	ip, r4, #20
 8012aca:	46ae      	mov	lr, r5
 8012acc:	f04f 0a00 	mov.w	sl, #0
 8012ad0:	f8bc b000 	ldrh.w	fp, [ip]
 8012ad4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012ad8:	fb09 770b 	mla	r7, r9, fp, r7
 8012adc:	4457      	add	r7, sl
 8012ade:	b29b      	uxth	r3, r3
 8012ae0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012ae4:	f84e 3b04 	str.w	r3, [lr], #4
 8012ae8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012aec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012af0:	f8be 3000 	ldrh.w	r3, [lr]
 8012af4:	fb09 330a 	mla	r3, r9, sl, r3
 8012af8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012afc:	4562      	cmp	r2, ip
 8012afe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012b02:	d8e5      	bhi.n	8012ad0 <__multiply+0x10c>
 8012b04:	9f01      	ldr	r7, [sp, #4]
 8012b06:	51eb      	str	r3, [r5, r7]
 8012b08:	3504      	adds	r5, #4
 8012b0a:	e799      	b.n	8012a40 <__multiply+0x7c>
 8012b0c:	3e01      	subs	r6, #1
 8012b0e:	e79b      	b.n	8012a48 <__multiply+0x84>
 8012b10:	080177d4 	.word	0x080177d4
 8012b14:	08017845 	.word	0x08017845

08012b18 <__pow5mult>:
 8012b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b1c:	4615      	mov	r5, r2
 8012b1e:	f012 0203 	ands.w	r2, r2, #3
 8012b22:	4607      	mov	r7, r0
 8012b24:	460e      	mov	r6, r1
 8012b26:	d007      	beq.n	8012b38 <__pow5mult+0x20>
 8012b28:	4c25      	ldr	r4, [pc, #148]	@ (8012bc0 <__pow5mult+0xa8>)
 8012b2a:	3a01      	subs	r2, #1
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b32:	f7ff fe55 	bl	80127e0 <__multadd>
 8012b36:	4606      	mov	r6, r0
 8012b38:	10ad      	asrs	r5, r5, #2
 8012b3a:	d03d      	beq.n	8012bb8 <__pow5mult+0xa0>
 8012b3c:	69fc      	ldr	r4, [r7, #28]
 8012b3e:	b97c      	cbnz	r4, 8012b60 <__pow5mult+0x48>
 8012b40:	2010      	movs	r0, #16
 8012b42:	f7fc fa05 	bl	800ef50 <malloc>
 8012b46:	4602      	mov	r2, r0
 8012b48:	61f8      	str	r0, [r7, #28]
 8012b4a:	b928      	cbnz	r0, 8012b58 <__pow5mult+0x40>
 8012b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8012bc4 <__pow5mult+0xac>)
 8012b4e:	481e      	ldr	r0, [pc, #120]	@ (8012bc8 <__pow5mult+0xb0>)
 8012b50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012b54:	f001 fa12 	bl	8013f7c <__assert_func>
 8012b58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b5c:	6004      	str	r4, [r0, #0]
 8012b5e:	60c4      	str	r4, [r0, #12]
 8012b60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012b64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012b68:	b94c      	cbnz	r4, 8012b7e <__pow5mult+0x66>
 8012b6a:	f240 2171 	movw	r1, #625	@ 0x271
 8012b6e:	4638      	mov	r0, r7
 8012b70:	f7ff ff12 	bl	8012998 <__i2b>
 8012b74:	2300      	movs	r3, #0
 8012b76:	f8c8 0008 	str.w	r0, [r8, #8]
 8012b7a:	4604      	mov	r4, r0
 8012b7c:	6003      	str	r3, [r0, #0]
 8012b7e:	f04f 0900 	mov.w	r9, #0
 8012b82:	07eb      	lsls	r3, r5, #31
 8012b84:	d50a      	bpl.n	8012b9c <__pow5mult+0x84>
 8012b86:	4631      	mov	r1, r6
 8012b88:	4622      	mov	r2, r4
 8012b8a:	4638      	mov	r0, r7
 8012b8c:	f7ff ff1a 	bl	80129c4 <__multiply>
 8012b90:	4631      	mov	r1, r6
 8012b92:	4680      	mov	r8, r0
 8012b94:	4638      	mov	r0, r7
 8012b96:	f7ff fe01 	bl	801279c <_Bfree>
 8012b9a:	4646      	mov	r6, r8
 8012b9c:	106d      	asrs	r5, r5, #1
 8012b9e:	d00b      	beq.n	8012bb8 <__pow5mult+0xa0>
 8012ba0:	6820      	ldr	r0, [r4, #0]
 8012ba2:	b938      	cbnz	r0, 8012bb4 <__pow5mult+0x9c>
 8012ba4:	4622      	mov	r2, r4
 8012ba6:	4621      	mov	r1, r4
 8012ba8:	4638      	mov	r0, r7
 8012baa:	f7ff ff0b 	bl	80129c4 <__multiply>
 8012bae:	6020      	str	r0, [r4, #0]
 8012bb0:	f8c0 9000 	str.w	r9, [r0]
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	e7e4      	b.n	8012b82 <__pow5mult+0x6a>
 8012bb8:	4630      	mov	r0, r6
 8012bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bbe:	bf00      	nop
 8012bc0:	080178a0 	.word	0x080178a0
 8012bc4:	08017765 	.word	0x08017765
 8012bc8:	08017845 	.word	0x08017845

08012bcc <__lshift>:
 8012bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bd0:	460c      	mov	r4, r1
 8012bd2:	6849      	ldr	r1, [r1, #4]
 8012bd4:	6923      	ldr	r3, [r4, #16]
 8012bd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012bda:	68a3      	ldr	r3, [r4, #8]
 8012bdc:	4607      	mov	r7, r0
 8012bde:	4691      	mov	r9, r2
 8012be0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012be4:	f108 0601 	add.w	r6, r8, #1
 8012be8:	42b3      	cmp	r3, r6
 8012bea:	db0b      	blt.n	8012c04 <__lshift+0x38>
 8012bec:	4638      	mov	r0, r7
 8012bee:	f7ff fd95 	bl	801271c <_Balloc>
 8012bf2:	4605      	mov	r5, r0
 8012bf4:	b948      	cbnz	r0, 8012c0a <__lshift+0x3e>
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	4b28      	ldr	r3, [pc, #160]	@ (8012c9c <__lshift+0xd0>)
 8012bfa:	4829      	ldr	r0, [pc, #164]	@ (8012ca0 <__lshift+0xd4>)
 8012bfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012c00:	f001 f9bc 	bl	8013f7c <__assert_func>
 8012c04:	3101      	adds	r1, #1
 8012c06:	005b      	lsls	r3, r3, #1
 8012c08:	e7ee      	b.n	8012be8 <__lshift+0x1c>
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	f100 0114 	add.w	r1, r0, #20
 8012c10:	f100 0210 	add.w	r2, r0, #16
 8012c14:	4618      	mov	r0, r3
 8012c16:	4553      	cmp	r3, sl
 8012c18:	db33      	blt.n	8012c82 <__lshift+0xb6>
 8012c1a:	6920      	ldr	r0, [r4, #16]
 8012c1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c20:	f104 0314 	add.w	r3, r4, #20
 8012c24:	f019 091f 	ands.w	r9, r9, #31
 8012c28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012c30:	d02b      	beq.n	8012c8a <__lshift+0xbe>
 8012c32:	f1c9 0e20 	rsb	lr, r9, #32
 8012c36:	468a      	mov	sl, r1
 8012c38:	2200      	movs	r2, #0
 8012c3a:	6818      	ldr	r0, [r3, #0]
 8012c3c:	fa00 f009 	lsl.w	r0, r0, r9
 8012c40:	4310      	orrs	r0, r2
 8012c42:	f84a 0b04 	str.w	r0, [sl], #4
 8012c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c4a:	459c      	cmp	ip, r3
 8012c4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012c50:	d8f3      	bhi.n	8012c3a <__lshift+0x6e>
 8012c52:	ebac 0304 	sub.w	r3, ip, r4
 8012c56:	3b15      	subs	r3, #21
 8012c58:	f023 0303 	bic.w	r3, r3, #3
 8012c5c:	3304      	adds	r3, #4
 8012c5e:	f104 0015 	add.w	r0, r4, #21
 8012c62:	4584      	cmp	ip, r0
 8012c64:	bf38      	it	cc
 8012c66:	2304      	movcc	r3, #4
 8012c68:	50ca      	str	r2, [r1, r3]
 8012c6a:	b10a      	cbz	r2, 8012c70 <__lshift+0xa4>
 8012c6c:	f108 0602 	add.w	r6, r8, #2
 8012c70:	3e01      	subs	r6, #1
 8012c72:	4638      	mov	r0, r7
 8012c74:	612e      	str	r6, [r5, #16]
 8012c76:	4621      	mov	r1, r4
 8012c78:	f7ff fd90 	bl	801279c <_Bfree>
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c82:	f842 0f04 	str.w	r0, [r2, #4]!
 8012c86:	3301      	adds	r3, #1
 8012c88:	e7c5      	b.n	8012c16 <__lshift+0x4a>
 8012c8a:	3904      	subs	r1, #4
 8012c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c90:	f841 2f04 	str.w	r2, [r1, #4]!
 8012c94:	459c      	cmp	ip, r3
 8012c96:	d8f9      	bhi.n	8012c8c <__lshift+0xc0>
 8012c98:	e7ea      	b.n	8012c70 <__lshift+0xa4>
 8012c9a:	bf00      	nop
 8012c9c:	080177d4 	.word	0x080177d4
 8012ca0:	08017845 	.word	0x08017845

08012ca4 <__mcmp>:
 8012ca4:	690a      	ldr	r2, [r1, #16]
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	6900      	ldr	r0, [r0, #16]
 8012caa:	1a80      	subs	r0, r0, r2
 8012cac:	b530      	push	{r4, r5, lr}
 8012cae:	d10e      	bne.n	8012cce <__mcmp+0x2a>
 8012cb0:	3314      	adds	r3, #20
 8012cb2:	3114      	adds	r1, #20
 8012cb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012cb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012cbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012cc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012cc4:	4295      	cmp	r5, r2
 8012cc6:	d003      	beq.n	8012cd0 <__mcmp+0x2c>
 8012cc8:	d205      	bcs.n	8012cd6 <__mcmp+0x32>
 8012cca:	f04f 30ff 	mov.w	r0, #4294967295
 8012cce:	bd30      	pop	{r4, r5, pc}
 8012cd0:	42a3      	cmp	r3, r4
 8012cd2:	d3f3      	bcc.n	8012cbc <__mcmp+0x18>
 8012cd4:	e7fb      	b.n	8012cce <__mcmp+0x2a>
 8012cd6:	2001      	movs	r0, #1
 8012cd8:	e7f9      	b.n	8012cce <__mcmp+0x2a>
	...

08012cdc <__mdiff>:
 8012cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce0:	4689      	mov	r9, r1
 8012ce2:	4606      	mov	r6, r0
 8012ce4:	4611      	mov	r1, r2
 8012ce6:	4648      	mov	r0, r9
 8012ce8:	4614      	mov	r4, r2
 8012cea:	f7ff ffdb 	bl	8012ca4 <__mcmp>
 8012cee:	1e05      	subs	r5, r0, #0
 8012cf0:	d112      	bne.n	8012d18 <__mdiff+0x3c>
 8012cf2:	4629      	mov	r1, r5
 8012cf4:	4630      	mov	r0, r6
 8012cf6:	f7ff fd11 	bl	801271c <_Balloc>
 8012cfa:	4602      	mov	r2, r0
 8012cfc:	b928      	cbnz	r0, 8012d0a <__mdiff+0x2e>
 8012cfe:	4b3f      	ldr	r3, [pc, #252]	@ (8012dfc <__mdiff+0x120>)
 8012d00:	f240 2137 	movw	r1, #567	@ 0x237
 8012d04:	483e      	ldr	r0, [pc, #248]	@ (8012e00 <__mdiff+0x124>)
 8012d06:	f001 f939 	bl	8013f7c <__assert_func>
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012d10:	4610      	mov	r0, r2
 8012d12:	b003      	add	sp, #12
 8012d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d18:	bfbc      	itt	lt
 8012d1a:	464b      	movlt	r3, r9
 8012d1c:	46a1      	movlt	r9, r4
 8012d1e:	4630      	mov	r0, r6
 8012d20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012d24:	bfba      	itte	lt
 8012d26:	461c      	movlt	r4, r3
 8012d28:	2501      	movlt	r5, #1
 8012d2a:	2500      	movge	r5, #0
 8012d2c:	f7ff fcf6 	bl	801271c <_Balloc>
 8012d30:	4602      	mov	r2, r0
 8012d32:	b918      	cbnz	r0, 8012d3c <__mdiff+0x60>
 8012d34:	4b31      	ldr	r3, [pc, #196]	@ (8012dfc <__mdiff+0x120>)
 8012d36:	f240 2145 	movw	r1, #581	@ 0x245
 8012d3a:	e7e3      	b.n	8012d04 <__mdiff+0x28>
 8012d3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012d40:	6926      	ldr	r6, [r4, #16]
 8012d42:	60c5      	str	r5, [r0, #12]
 8012d44:	f109 0310 	add.w	r3, r9, #16
 8012d48:	f109 0514 	add.w	r5, r9, #20
 8012d4c:	f104 0e14 	add.w	lr, r4, #20
 8012d50:	f100 0b14 	add.w	fp, r0, #20
 8012d54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012d58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012d5c:	9301      	str	r3, [sp, #4]
 8012d5e:	46d9      	mov	r9, fp
 8012d60:	f04f 0c00 	mov.w	ip, #0
 8012d64:	9b01      	ldr	r3, [sp, #4]
 8012d66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012d6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012d6e:	9301      	str	r3, [sp, #4]
 8012d70:	fa1f f38a 	uxth.w	r3, sl
 8012d74:	4619      	mov	r1, r3
 8012d76:	b283      	uxth	r3, r0
 8012d78:	1acb      	subs	r3, r1, r3
 8012d7a:	0c00      	lsrs	r0, r0, #16
 8012d7c:	4463      	add	r3, ip
 8012d7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012d82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012d86:	b29b      	uxth	r3, r3
 8012d88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012d8c:	4576      	cmp	r6, lr
 8012d8e:	f849 3b04 	str.w	r3, [r9], #4
 8012d92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012d96:	d8e5      	bhi.n	8012d64 <__mdiff+0x88>
 8012d98:	1b33      	subs	r3, r6, r4
 8012d9a:	3b15      	subs	r3, #21
 8012d9c:	f023 0303 	bic.w	r3, r3, #3
 8012da0:	3415      	adds	r4, #21
 8012da2:	3304      	adds	r3, #4
 8012da4:	42a6      	cmp	r6, r4
 8012da6:	bf38      	it	cc
 8012da8:	2304      	movcc	r3, #4
 8012daa:	441d      	add	r5, r3
 8012dac:	445b      	add	r3, fp
 8012dae:	461e      	mov	r6, r3
 8012db0:	462c      	mov	r4, r5
 8012db2:	4544      	cmp	r4, r8
 8012db4:	d30e      	bcc.n	8012dd4 <__mdiff+0xf8>
 8012db6:	f108 0103 	add.w	r1, r8, #3
 8012dba:	1b49      	subs	r1, r1, r5
 8012dbc:	f021 0103 	bic.w	r1, r1, #3
 8012dc0:	3d03      	subs	r5, #3
 8012dc2:	45a8      	cmp	r8, r5
 8012dc4:	bf38      	it	cc
 8012dc6:	2100      	movcc	r1, #0
 8012dc8:	440b      	add	r3, r1
 8012dca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012dce:	b191      	cbz	r1, 8012df6 <__mdiff+0x11a>
 8012dd0:	6117      	str	r7, [r2, #16]
 8012dd2:	e79d      	b.n	8012d10 <__mdiff+0x34>
 8012dd4:	f854 1b04 	ldr.w	r1, [r4], #4
 8012dd8:	46e6      	mov	lr, ip
 8012dda:	0c08      	lsrs	r0, r1, #16
 8012ddc:	fa1c fc81 	uxtah	ip, ip, r1
 8012de0:	4471      	add	r1, lr
 8012de2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012de6:	b289      	uxth	r1, r1
 8012de8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012dec:	f846 1b04 	str.w	r1, [r6], #4
 8012df0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012df4:	e7dd      	b.n	8012db2 <__mdiff+0xd6>
 8012df6:	3f01      	subs	r7, #1
 8012df8:	e7e7      	b.n	8012dca <__mdiff+0xee>
 8012dfa:	bf00      	nop
 8012dfc:	080177d4 	.word	0x080177d4
 8012e00:	08017845 	.word	0x08017845

08012e04 <__ulp>:
 8012e04:	b082      	sub	sp, #8
 8012e06:	ed8d 0b00 	vstr	d0, [sp]
 8012e0a:	9a01      	ldr	r2, [sp, #4]
 8012e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8012e4c <__ulp+0x48>)
 8012e0e:	4013      	ands	r3, r2
 8012e10:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	dc08      	bgt.n	8012e2a <__ulp+0x26>
 8012e18:	425b      	negs	r3, r3
 8012e1a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012e1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012e22:	da04      	bge.n	8012e2e <__ulp+0x2a>
 8012e24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012e28:	4113      	asrs	r3, r2
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	e008      	b.n	8012e40 <__ulp+0x3c>
 8012e2e:	f1a2 0314 	sub.w	r3, r2, #20
 8012e32:	2b1e      	cmp	r3, #30
 8012e34:	bfda      	itte	le
 8012e36:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012e3a:	40da      	lsrle	r2, r3
 8012e3c:	2201      	movgt	r2, #1
 8012e3e:	2300      	movs	r3, #0
 8012e40:	4619      	mov	r1, r3
 8012e42:	4610      	mov	r0, r2
 8012e44:	ec41 0b10 	vmov	d0, r0, r1
 8012e48:	b002      	add	sp, #8
 8012e4a:	4770      	bx	lr
 8012e4c:	7ff00000 	.word	0x7ff00000

08012e50 <__b2d>:
 8012e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e54:	6906      	ldr	r6, [r0, #16]
 8012e56:	f100 0814 	add.w	r8, r0, #20
 8012e5a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012e5e:	1f37      	subs	r7, r6, #4
 8012e60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012e64:	4610      	mov	r0, r2
 8012e66:	f7ff fd4b 	bl	8012900 <__hi0bits>
 8012e6a:	f1c0 0320 	rsb	r3, r0, #32
 8012e6e:	280a      	cmp	r0, #10
 8012e70:	600b      	str	r3, [r1, #0]
 8012e72:	491b      	ldr	r1, [pc, #108]	@ (8012ee0 <__b2d+0x90>)
 8012e74:	dc15      	bgt.n	8012ea2 <__b2d+0x52>
 8012e76:	f1c0 0c0b 	rsb	ip, r0, #11
 8012e7a:	fa22 f30c 	lsr.w	r3, r2, ip
 8012e7e:	45b8      	cmp	r8, r7
 8012e80:	ea43 0501 	orr.w	r5, r3, r1
 8012e84:	bf34      	ite	cc
 8012e86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012e8a:	2300      	movcs	r3, #0
 8012e8c:	3015      	adds	r0, #21
 8012e8e:	fa02 f000 	lsl.w	r0, r2, r0
 8012e92:	fa23 f30c 	lsr.w	r3, r3, ip
 8012e96:	4303      	orrs	r3, r0
 8012e98:	461c      	mov	r4, r3
 8012e9a:	ec45 4b10 	vmov	d0, r4, r5
 8012e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ea2:	45b8      	cmp	r8, r7
 8012ea4:	bf3a      	itte	cc
 8012ea6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012eaa:	f1a6 0708 	subcc.w	r7, r6, #8
 8012eae:	2300      	movcs	r3, #0
 8012eb0:	380b      	subs	r0, #11
 8012eb2:	d012      	beq.n	8012eda <__b2d+0x8a>
 8012eb4:	f1c0 0120 	rsb	r1, r0, #32
 8012eb8:	fa23 f401 	lsr.w	r4, r3, r1
 8012ebc:	4082      	lsls	r2, r0
 8012ebe:	4322      	orrs	r2, r4
 8012ec0:	4547      	cmp	r7, r8
 8012ec2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012ec6:	bf8c      	ite	hi
 8012ec8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012ecc:	2200      	movls	r2, #0
 8012ece:	4083      	lsls	r3, r0
 8012ed0:	40ca      	lsrs	r2, r1
 8012ed2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012ed6:	4313      	orrs	r3, r2
 8012ed8:	e7de      	b.n	8012e98 <__b2d+0x48>
 8012eda:	ea42 0501 	orr.w	r5, r2, r1
 8012ede:	e7db      	b.n	8012e98 <__b2d+0x48>
 8012ee0:	3ff00000 	.word	0x3ff00000

08012ee4 <__d2b>:
 8012ee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012ee8:	460f      	mov	r7, r1
 8012eea:	2101      	movs	r1, #1
 8012eec:	ec59 8b10 	vmov	r8, r9, d0
 8012ef0:	4616      	mov	r6, r2
 8012ef2:	f7ff fc13 	bl	801271c <_Balloc>
 8012ef6:	4604      	mov	r4, r0
 8012ef8:	b930      	cbnz	r0, 8012f08 <__d2b+0x24>
 8012efa:	4602      	mov	r2, r0
 8012efc:	4b23      	ldr	r3, [pc, #140]	@ (8012f8c <__d2b+0xa8>)
 8012efe:	4824      	ldr	r0, [pc, #144]	@ (8012f90 <__d2b+0xac>)
 8012f00:	f240 310f 	movw	r1, #783	@ 0x30f
 8012f04:	f001 f83a 	bl	8013f7c <__assert_func>
 8012f08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012f0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012f10:	b10d      	cbz	r5, 8012f16 <__d2b+0x32>
 8012f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012f16:	9301      	str	r3, [sp, #4]
 8012f18:	f1b8 0300 	subs.w	r3, r8, #0
 8012f1c:	d023      	beq.n	8012f66 <__d2b+0x82>
 8012f1e:	4668      	mov	r0, sp
 8012f20:	9300      	str	r3, [sp, #0]
 8012f22:	f7ff fd0c 	bl	801293e <__lo0bits>
 8012f26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012f2a:	b1d0      	cbz	r0, 8012f62 <__d2b+0x7e>
 8012f2c:	f1c0 0320 	rsb	r3, r0, #32
 8012f30:	fa02 f303 	lsl.w	r3, r2, r3
 8012f34:	430b      	orrs	r3, r1
 8012f36:	40c2      	lsrs	r2, r0
 8012f38:	6163      	str	r3, [r4, #20]
 8012f3a:	9201      	str	r2, [sp, #4]
 8012f3c:	9b01      	ldr	r3, [sp, #4]
 8012f3e:	61a3      	str	r3, [r4, #24]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	bf0c      	ite	eq
 8012f44:	2201      	moveq	r2, #1
 8012f46:	2202      	movne	r2, #2
 8012f48:	6122      	str	r2, [r4, #16]
 8012f4a:	b1a5      	cbz	r5, 8012f76 <__d2b+0x92>
 8012f4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012f50:	4405      	add	r5, r0
 8012f52:	603d      	str	r5, [r7, #0]
 8012f54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012f58:	6030      	str	r0, [r6, #0]
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	b003      	add	sp, #12
 8012f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f62:	6161      	str	r1, [r4, #20]
 8012f64:	e7ea      	b.n	8012f3c <__d2b+0x58>
 8012f66:	a801      	add	r0, sp, #4
 8012f68:	f7ff fce9 	bl	801293e <__lo0bits>
 8012f6c:	9b01      	ldr	r3, [sp, #4]
 8012f6e:	6163      	str	r3, [r4, #20]
 8012f70:	3020      	adds	r0, #32
 8012f72:	2201      	movs	r2, #1
 8012f74:	e7e8      	b.n	8012f48 <__d2b+0x64>
 8012f76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012f7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012f7e:	6038      	str	r0, [r7, #0]
 8012f80:	6918      	ldr	r0, [r3, #16]
 8012f82:	f7ff fcbd 	bl	8012900 <__hi0bits>
 8012f86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012f8a:	e7e5      	b.n	8012f58 <__d2b+0x74>
 8012f8c:	080177d4 	.word	0x080177d4
 8012f90:	08017845 	.word	0x08017845

08012f94 <__ratio>:
 8012f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f98:	b085      	sub	sp, #20
 8012f9a:	e9cd 1000 	strd	r1, r0, [sp]
 8012f9e:	a902      	add	r1, sp, #8
 8012fa0:	f7ff ff56 	bl	8012e50 <__b2d>
 8012fa4:	9800      	ldr	r0, [sp, #0]
 8012fa6:	a903      	add	r1, sp, #12
 8012fa8:	ec55 4b10 	vmov	r4, r5, d0
 8012fac:	f7ff ff50 	bl	8012e50 <__b2d>
 8012fb0:	9b01      	ldr	r3, [sp, #4]
 8012fb2:	6919      	ldr	r1, [r3, #16]
 8012fb4:	9b00      	ldr	r3, [sp, #0]
 8012fb6:	691b      	ldr	r3, [r3, #16]
 8012fb8:	1ac9      	subs	r1, r1, r3
 8012fba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012fbe:	1a9b      	subs	r3, r3, r2
 8012fc0:	ec5b ab10 	vmov	sl, fp, d0
 8012fc4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	bfce      	itee	gt
 8012fcc:	462a      	movgt	r2, r5
 8012fce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012fd2:	465a      	movle	r2, fp
 8012fd4:	462f      	mov	r7, r5
 8012fd6:	46d9      	mov	r9, fp
 8012fd8:	bfcc      	ite	gt
 8012fda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012fde:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012fe2:	464b      	mov	r3, r9
 8012fe4:	4652      	mov	r2, sl
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	4639      	mov	r1, r7
 8012fea:	f7ed fc6f 	bl	80008cc <__aeabi_ddiv>
 8012fee:	ec41 0b10 	vmov	d0, r0, r1
 8012ff2:	b005      	add	sp, #20
 8012ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ff8 <__copybits>:
 8012ff8:	3901      	subs	r1, #1
 8012ffa:	b570      	push	{r4, r5, r6, lr}
 8012ffc:	1149      	asrs	r1, r1, #5
 8012ffe:	6914      	ldr	r4, [r2, #16]
 8013000:	3101      	adds	r1, #1
 8013002:	f102 0314 	add.w	r3, r2, #20
 8013006:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801300a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801300e:	1f05      	subs	r5, r0, #4
 8013010:	42a3      	cmp	r3, r4
 8013012:	d30c      	bcc.n	801302e <__copybits+0x36>
 8013014:	1aa3      	subs	r3, r4, r2
 8013016:	3b11      	subs	r3, #17
 8013018:	f023 0303 	bic.w	r3, r3, #3
 801301c:	3211      	adds	r2, #17
 801301e:	42a2      	cmp	r2, r4
 8013020:	bf88      	it	hi
 8013022:	2300      	movhi	r3, #0
 8013024:	4418      	add	r0, r3
 8013026:	2300      	movs	r3, #0
 8013028:	4288      	cmp	r0, r1
 801302a:	d305      	bcc.n	8013038 <__copybits+0x40>
 801302c:	bd70      	pop	{r4, r5, r6, pc}
 801302e:	f853 6b04 	ldr.w	r6, [r3], #4
 8013032:	f845 6f04 	str.w	r6, [r5, #4]!
 8013036:	e7eb      	b.n	8013010 <__copybits+0x18>
 8013038:	f840 3b04 	str.w	r3, [r0], #4
 801303c:	e7f4      	b.n	8013028 <__copybits+0x30>

0801303e <__any_on>:
 801303e:	f100 0214 	add.w	r2, r0, #20
 8013042:	6900      	ldr	r0, [r0, #16]
 8013044:	114b      	asrs	r3, r1, #5
 8013046:	4298      	cmp	r0, r3
 8013048:	b510      	push	{r4, lr}
 801304a:	db11      	blt.n	8013070 <__any_on+0x32>
 801304c:	dd0a      	ble.n	8013064 <__any_on+0x26>
 801304e:	f011 011f 	ands.w	r1, r1, #31
 8013052:	d007      	beq.n	8013064 <__any_on+0x26>
 8013054:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013058:	fa24 f001 	lsr.w	r0, r4, r1
 801305c:	fa00 f101 	lsl.w	r1, r0, r1
 8013060:	428c      	cmp	r4, r1
 8013062:	d10b      	bne.n	801307c <__any_on+0x3e>
 8013064:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013068:	4293      	cmp	r3, r2
 801306a:	d803      	bhi.n	8013074 <__any_on+0x36>
 801306c:	2000      	movs	r0, #0
 801306e:	bd10      	pop	{r4, pc}
 8013070:	4603      	mov	r3, r0
 8013072:	e7f7      	b.n	8013064 <__any_on+0x26>
 8013074:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013078:	2900      	cmp	r1, #0
 801307a:	d0f5      	beq.n	8013068 <__any_on+0x2a>
 801307c:	2001      	movs	r0, #1
 801307e:	e7f6      	b.n	801306e <__any_on+0x30>

08013080 <__ascii_wctomb>:
 8013080:	4603      	mov	r3, r0
 8013082:	4608      	mov	r0, r1
 8013084:	b141      	cbz	r1, 8013098 <__ascii_wctomb+0x18>
 8013086:	2aff      	cmp	r2, #255	@ 0xff
 8013088:	d904      	bls.n	8013094 <__ascii_wctomb+0x14>
 801308a:	228a      	movs	r2, #138	@ 0x8a
 801308c:	601a      	str	r2, [r3, #0]
 801308e:	f04f 30ff 	mov.w	r0, #4294967295
 8013092:	4770      	bx	lr
 8013094:	700a      	strb	r2, [r1, #0]
 8013096:	2001      	movs	r0, #1
 8013098:	4770      	bx	lr

0801309a <__ssputs_r>:
 801309a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801309e:	688e      	ldr	r6, [r1, #8]
 80130a0:	461f      	mov	r7, r3
 80130a2:	42be      	cmp	r6, r7
 80130a4:	680b      	ldr	r3, [r1, #0]
 80130a6:	4682      	mov	sl, r0
 80130a8:	460c      	mov	r4, r1
 80130aa:	4690      	mov	r8, r2
 80130ac:	d82d      	bhi.n	801310a <__ssputs_r+0x70>
 80130ae:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80130b2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80130b6:	d026      	beq.n	8013106 <__ssputs_r+0x6c>
 80130b8:	6965      	ldr	r5, [r4, #20]
 80130ba:	6909      	ldr	r1, [r1, #16]
 80130bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80130c0:	eba3 0901 	sub.w	r9, r3, r1
 80130c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80130c8:	1c7b      	adds	r3, r7, #1
 80130ca:	444b      	add	r3, r9
 80130cc:	106d      	asrs	r5, r5, #1
 80130ce:	429d      	cmp	r5, r3
 80130d0:	bf38      	it	cc
 80130d2:	461d      	movcc	r5, r3
 80130d4:	0553      	lsls	r3, r2, #21
 80130d6:	d527      	bpl.n	8013128 <__ssputs_r+0x8e>
 80130d8:	4629      	mov	r1, r5
 80130da:	f7fb ff6b 	bl	800efb4 <_malloc_r>
 80130de:	4606      	mov	r6, r0
 80130e0:	b360      	cbz	r0, 801313c <__ssputs_r+0xa2>
 80130e2:	6921      	ldr	r1, [r4, #16]
 80130e4:	464a      	mov	r2, r9
 80130e6:	f7fe f917 	bl	8011318 <memcpy>
 80130ea:	89a3      	ldrh	r3, [r4, #12]
 80130ec:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80130f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80130f4:	81a3      	strh	r3, [r4, #12]
 80130f6:	6126      	str	r6, [r4, #16]
 80130f8:	6165      	str	r5, [r4, #20]
 80130fa:	444e      	add	r6, r9
 80130fc:	eba5 0509 	sub.w	r5, r5, r9
 8013100:	6026      	str	r6, [r4, #0]
 8013102:	60a5      	str	r5, [r4, #8]
 8013104:	463e      	mov	r6, r7
 8013106:	42be      	cmp	r6, r7
 8013108:	d900      	bls.n	801310c <__ssputs_r+0x72>
 801310a:	463e      	mov	r6, r7
 801310c:	6820      	ldr	r0, [r4, #0]
 801310e:	4632      	mov	r2, r6
 8013110:	4641      	mov	r1, r8
 8013112:	f000 fef6 	bl	8013f02 <memmove>
 8013116:	68a3      	ldr	r3, [r4, #8]
 8013118:	1b9b      	subs	r3, r3, r6
 801311a:	60a3      	str	r3, [r4, #8]
 801311c:	6823      	ldr	r3, [r4, #0]
 801311e:	4433      	add	r3, r6
 8013120:	6023      	str	r3, [r4, #0]
 8013122:	2000      	movs	r0, #0
 8013124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013128:	462a      	mov	r2, r5
 801312a:	f000 ff59 	bl	8013fe0 <_realloc_r>
 801312e:	4606      	mov	r6, r0
 8013130:	2800      	cmp	r0, #0
 8013132:	d1e0      	bne.n	80130f6 <__ssputs_r+0x5c>
 8013134:	6921      	ldr	r1, [r4, #16]
 8013136:	4650      	mov	r0, sl
 8013138:	f7fe ff5a 	bl	8011ff0 <_free_r>
 801313c:	230c      	movs	r3, #12
 801313e:	f8ca 3000 	str.w	r3, [sl]
 8013142:	89a3      	ldrh	r3, [r4, #12]
 8013144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013148:	81a3      	strh	r3, [r4, #12]
 801314a:	f04f 30ff 	mov.w	r0, #4294967295
 801314e:	e7e9      	b.n	8013124 <__ssputs_r+0x8a>

08013150 <_svfiprintf_r>:
 8013150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013154:	4698      	mov	r8, r3
 8013156:	898b      	ldrh	r3, [r1, #12]
 8013158:	061b      	lsls	r3, r3, #24
 801315a:	b09d      	sub	sp, #116	@ 0x74
 801315c:	4607      	mov	r7, r0
 801315e:	460d      	mov	r5, r1
 8013160:	4614      	mov	r4, r2
 8013162:	d510      	bpl.n	8013186 <_svfiprintf_r+0x36>
 8013164:	690b      	ldr	r3, [r1, #16]
 8013166:	b973      	cbnz	r3, 8013186 <_svfiprintf_r+0x36>
 8013168:	2140      	movs	r1, #64	@ 0x40
 801316a:	f7fb ff23 	bl	800efb4 <_malloc_r>
 801316e:	6028      	str	r0, [r5, #0]
 8013170:	6128      	str	r0, [r5, #16]
 8013172:	b930      	cbnz	r0, 8013182 <_svfiprintf_r+0x32>
 8013174:	230c      	movs	r3, #12
 8013176:	603b      	str	r3, [r7, #0]
 8013178:	f04f 30ff 	mov.w	r0, #4294967295
 801317c:	b01d      	add	sp, #116	@ 0x74
 801317e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013182:	2340      	movs	r3, #64	@ 0x40
 8013184:	616b      	str	r3, [r5, #20]
 8013186:	2300      	movs	r3, #0
 8013188:	9309      	str	r3, [sp, #36]	@ 0x24
 801318a:	2320      	movs	r3, #32
 801318c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013190:	f8cd 800c 	str.w	r8, [sp, #12]
 8013194:	2330      	movs	r3, #48	@ 0x30
 8013196:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013334 <_svfiprintf_r+0x1e4>
 801319a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801319e:	f04f 0901 	mov.w	r9, #1
 80131a2:	4623      	mov	r3, r4
 80131a4:	469a      	mov	sl, r3
 80131a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131aa:	b10a      	cbz	r2, 80131b0 <_svfiprintf_r+0x60>
 80131ac:	2a25      	cmp	r2, #37	@ 0x25
 80131ae:	d1f9      	bne.n	80131a4 <_svfiprintf_r+0x54>
 80131b0:	ebba 0b04 	subs.w	fp, sl, r4
 80131b4:	d00b      	beq.n	80131ce <_svfiprintf_r+0x7e>
 80131b6:	465b      	mov	r3, fp
 80131b8:	4622      	mov	r2, r4
 80131ba:	4629      	mov	r1, r5
 80131bc:	4638      	mov	r0, r7
 80131be:	f7ff ff6c 	bl	801309a <__ssputs_r>
 80131c2:	3001      	adds	r0, #1
 80131c4:	f000 80a7 	beq.w	8013316 <_svfiprintf_r+0x1c6>
 80131c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80131ca:	445a      	add	r2, fp
 80131cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80131ce:	f89a 3000 	ldrb.w	r3, [sl]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	f000 809f 	beq.w	8013316 <_svfiprintf_r+0x1c6>
 80131d8:	2300      	movs	r3, #0
 80131da:	f04f 32ff 	mov.w	r2, #4294967295
 80131de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131e2:	f10a 0a01 	add.w	sl, sl, #1
 80131e6:	9304      	str	r3, [sp, #16]
 80131e8:	9307      	str	r3, [sp, #28]
 80131ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80131ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80131f0:	4654      	mov	r4, sl
 80131f2:	2205      	movs	r2, #5
 80131f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131f8:	484e      	ldr	r0, [pc, #312]	@ (8013334 <_svfiprintf_r+0x1e4>)
 80131fa:	f7ed f829 	bl	8000250 <memchr>
 80131fe:	9a04      	ldr	r2, [sp, #16]
 8013200:	b9d8      	cbnz	r0, 801323a <_svfiprintf_r+0xea>
 8013202:	06d0      	lsls	r0, r2, #27
 8013204:	bf44      	itt	mi
 8013206:	2320      	movmi	r3, #32
 8013208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801320c:	0711      	lsls	r1, r2, #28
 801320e:	bf44      	itt	mi
 8013210:	232b      	movmi	r3, #43	@ 0x2b
 8013212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013216:	f89a 3000 	ldrb.w	r3, [sl]
 801321a:	2b2a      	cmp	r3, #42	@ 0x2a
 801321c:	d015      	beq.n	801324a <_svfiprintf_r+0xfa>
 801321e:	9a07      	ldr	r2, [sp, #28]
 8013220:	4654      	mov	r4, sl
 8013222:	2000      	movs	r0, #0
 8013224:	f04f 0c0a 	mov.w	ip, #10
 8013228:	4621      	mov	r1, r4
 801322a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801322e:	3b30      	subs	r3, #48	@ 0x30
 8013230:	2b09      	cmp	r3, #9
 8013232:	d94b      	bls.n	80132cc <_svfiprintf_r+0x17c>
 8013234:	b1b0      	cbz	r0, 8013264 <_svfiprintf_r+0x114>
 8013236:	9207      	str	r2, [sp, #28]
 8013238:	e014      	b.n	8013264 <_svfiprintf_r+0x114>
 801323a:	eba0 0308 	sub.w	r3, r0, r8
 801323e:	fa09 f303 	lsl.w	r3, r9, r3
 8013242:	4313      	orrs	r3, r2
 8013244:	9304      	str	r3, [sp, #16]
 8013246:	46a2      	mov	sl, r4
 8013248:	e7d2      	b.n	80131f0 <_svfiprintf_r+0xa0>
 801324a:	9b03      	ldr	r3, [sp, #12]
 801324c:	1d19      	adds	r1, r3, #4
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	9103      	str	r1, [sp, #12]
 8013252:	2b00      	cmp	r3, #0
 8013254:	bfbb      	ittet	lt
 8013256:	425b      	neglt	r3, r3
 8013258:	f042 0202 	orrlt.w	r2, r2, #2
 801325c:	9307      	strge	r3, [sp, #28]
 801325e:	9307      	strlt	r3, [sp, #28]
 8013260:	bfb8      	it	lt
 8013262:	9204      	strlt	r2, [sp, #16]
 8013264:	7823      	ldrb	r3, [r4, #0]
 8013266:	2b2e      	cmp	r3, #46	@ 0x2e
 8013268:	d10a      	bne.n	8013280 <_svfiprintf_r+0x130>
 801326a:	7863      	ldrb	r3, [r4, #1]
 801326c:	2b2a      	cmp	r3, #42	@ 0x2a
 801326e:	d132      	bne.n	80132d6 <_svfiprintf_r+0x186>
 8013270:	9b03      	ldr	r3, [sp, #12]
 8013272:	1d1a      	adds	r2, r3, #4
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	9203      	str	r2, [sp, #12]
 8013278:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801327c:	3402      	adds	r4, #2
 801327e:	9305      	str	r3, [sp, #20]
 8013280:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013344 <_svfiprintf_r+0x1f4>
 8013284:	7821      	ldrb	r1, [r4, #0]
 8013286:	2203      	movs	r2, #3
 8013288:	4650      	mov	r0, sl
 801328a:	f7ec ffe1 	bl	8000250 <memchr>
 801328e:	b138      	cbz	r0, 80132a0 <_svfiprintf_r+0x150>
 8013290:	9b04      	ldr	r3, [sp, #16]
 8013292:	eba0 000a 	sub.w	r0, r0, sl
 8013296:	2240      	movs	r2, #64	@ 0x40
 8013298:	4082      	lsls	r2, r0
 801329a:	4313      	orrs	r3, r2
 801329c:	3401      	adds	r4, #1
 801329e:	9304      	str	r3, [sp, #16]
 80132a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132a4:	4824      	ldr	r0, [pc, #144]	@ (8013338 <_svfiprintf_r+0x1e8>)
 80132a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80132aa:	2206      	movs	r2, #6
 80132ac:	f7ec ffd0 	bl	8000250 <memchr>
 80132b0:	2800      	cmp	r0, #0
 80132b2:	d036      	beq.n	8013322 <_svfiprintf_r+0x1d2>
 80132b4:	4b21      	ldr	r3, [pc, #132]	@ (801333c <_svfiprintf_r+0x1ec>)
 80132b6:	bb1b      	cbnz	r3, 8013300 <_svfiprintf_r+0x1b0>
 80132b8:	9b03      	ldr	r3, [sp, #12]
 80132ba:	3307      	adds	r3, #7
 80132bc:	f023 0307 	bic.w	r3, r3, #7
 80132c0:	3308      	adds	r3, #8
 80132c2:	9303      	str	r3, [sp, #12]
 80132c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132c6:	4433      	add	r3, r6
 80132c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80132ca:	e76a      	b.n	80131a2 <_svfiprintf_r+0x52>
 80132cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80132d0:	460c      	mov	r4, r1
 80132d2:	2001      	movs	r0, #1
 80132d4:	e7a8      	b.n	8013228 <_svfiprintf_r+0xd8>
 80132d6:	2300      	movs	r3, #0
 80132d8:	3401      	adds	r4, #1
 80132da:	9305      	str	r3, [sp, #20]
 80132dc:	4619      	mov	r1, r3
 80132de:	f04f 0c0a 	mov.w	ip, #10
 80132e2:	4620      	mov	r0, r4
 80132e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132e8:	3a30      	subs	r2, #48	@ 0x30
 80132ea:	2a09      	cmp	r2, #9
 80132ec:	d903      	bls.n	80132f6 <_svfiprintf_r+0x1a6>
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d0c6      	beq.n	8013280 <_svfiprintf_r+0x130>
 80132f2:	9105      	str	r1, [sp, #20]
 80132f4:	e7c4      	b.n	8013280 <_svfiprintf_r+0x130>
 80132f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80132fa:	4604      	mov	r4, r0
 80132fc:	2301      	movs	r3, #1
 80132fe:	e7f0      	b.n	80132e2 <_svfiprintf_r+0x192>
 8013300:	ab03      	add	r3, sp, #12
 8013302:	9300      	str	r3, [sp, #0]
 8013304:	462a      	mov	r2, r5
 8013306:	4b0e      	ldr	r3, [pc, #56]	@ (8013340 <_svfiprintf_r+0x1f0>)
 8013308:	a904      	add	r1, sp, #16
 801330a:	4638      	mov	r0, r7
 801330c:	f7fc fe7c 	bl	8010008 <_printf_float>
 8013310:	1c42      	adds	r2, r0, #1
 8013312:	4606      	mov	r6, r0
 8013314:	d1d6      	bne.n	80132c4 <_svfiprintf_r+0x174>
 8013316:	89ab      	ldrh	r3, [r5, #12]
 8013318:	065b      	lsls	r3, r3, #25
 801331a:	f53f af2d 	bmi.w	8013178 <_svfiprintf_r+0x28>
 801331e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013320:	e72c      	b.n	801317c <_svfiprintf_r+0x2c>
 8013322:	ab03      	add	r3, sp, #12
 8013324:	9300      	str	r3, [sp, #0]
 8013326:	462a      	mov	r2, r5
 8013328:	4b05      	ldr	r3, [pc, #20]	@ (8013340 <_svfiprintf_r+0x1f0>)
 801332a:	a904      	add	r1, sp, #16
 801332c:	4638      	mov	r0, r7
 801332e:	f7fd f903 	bl	8010538 <_printf_i>
 8013332:	e7ed      	b.n	8013310 <_svfiprintf_r+0x1c0>
 8013334:	080179a0 	.word	0x080179a0
 8013338:	080179aa 	.word	0x080179aa
 801333c:	08010009 	.word	0x08010009
 8013340:	0801309b 	.word	0x0801309b
 8013344:	080179a6 	.word	0x080179a6

08013348 <_sungetc_r>:
 8013348:	b538      	push	{r3, r4, r5, lr}
 801334a:	1c4b      	adds	r3, r1, #1
 801334c:	4614      	mov	r4, r2
 801334e:	d103      	bne.n	8013358 <_sungetc_r+0x10>
 8013350:	f04f 35ff 	mov.w	r5, #4294967295
 8013354:	4628      	mov	r0, r5
 8013356:	bd38      	pop	{r3, r4, r5, pc}
 8013358:	8993      	ldrh	r3, [r2, #12]
 801335a:	f023 0320 	bic.w	r3, r3, #32
 801335e:	8193      	strh	r3, [r2, #12]
 8013360:	6853      	ldr	r3, [r2, #4]
 8013362:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8013364:	b2cd      	uxtb	r5, r1
 8013366:	b18a      	cbz	r2, 801338c <_sungetc_r+0x44>
 8013368:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801336a:	429a      	cmp	r2, r3
 801336c:	dd08      	ble.n	8013380 <_sungetc_r+0x38>
 801336e:	6823      	ldr	r3, [r4, #0]
 8013370:	1e5a      	subs	r2, r3, #1
 8013372:	6022      	str	r2, [r4, #0]
 8013374:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013378:	6863      	ldr	r3, [r4, #4]
 801337a:	3301      	adds	r3, #1
 801337c:	6063      	str	r3, [r4, #4]
 801337e:	e7e9      	b.n	8013354 <_sungetc_r+0xc>
 8013380:	4621      	mov	r1, r4
 8013382:	f000 fd84 	bl	8013e8e <__submore>
 8013386:	2800      	cmp	r0, #0
 8013388:	d0f1      	beq.n	801336e <_sungetc_r+0x26>
 801338a:	e7e1      	b.n	8013350 <_sungetc_r+0x8>
 801338c:	6921      	ldr	r1, [r4, #16]
 801338e:	6822      	ldr	r2, [r4, #0]
 8013390:	b141      	cbz	r1, 80133a4 <_sungetc_r+0x5c>
 8013392:	4291      	cmp	r1, r2
 8013394:	d206      	bcs.n	80133a4 <_sungetc_r+0x5c>
 8013396:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801339a:	42a9      	cmp	r1, r5
 801339c:	d102      	bne.n	80133a4 <_sungetc_r+0x5c>
 801339e:	3a01      	subs	r2, #1
 80133a0:	6022      	str	r2, [r4, #0]
 80133a2:	e7ea      	b.n	801337a <_sungetc_r+0x32>
 80133a4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80133a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80133ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80133ae:	2303      	movs	r3, #3
 80133b0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80133b2:	4623      	mov	r3, r4
 80133b4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80133b8:	6023      	str	r3, [r4, #0]
 80133ba:	2301      	movs	r3, #1
 80133bc:	e7de      	b.n	801337c <_sungetc_r+0x34>

080133be <__ssrefill_r>:
 80133be:	b510      	push	{r4, lr}
 80133c0:	460c      	mov	r4, r1
 80133c2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80133c4:	b169      	cbz	r1, 80133e2 <__ssrefill_r+0x24>
 80133c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80133ca:	4299      	cmp	r1, r3
 80133cc:	d001      	beq.n	80133d2 <__ssrefill_r+0x14>
 80133ce:	f7fe fe0f 	bl	8011ff0 <_free_r>
 80133d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80133d4:	6063      	str	r3, [r4, #4]
 80133d6:	2000      	movs	r0, #0
 80133d8:	6360      	str	r0, [r4, #52]	@ 0x34
 80133da:	b113      	cbz	r3, 80133e2 <__ssrefill_r+0x24>
 80133dc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80133de:	6023      	str	r3, [r4, #0]
 80133e0:	bd10      	pop	{r4, pc}
 80133e2:	6923      	ldr	r3, [r4, #16]
 80133e4:	6023      	str	r3, [r4, #0]
 80133e6:	2300      	movs	r3, #0
 80133e8:	6063      	str	r3, [r4, #4]
 80133ea:	89a3      	ldrh	r3, [r4, #12]
 80133ec:	f043 0320 	orr.w	r3, r3, #32
 80133f0:	81a3      	strh	r3, [r4, #12]
 80133f2:	f04f 30ff 	mov.w	r0, #4294967295
 80133f6:	e7f3      	b.n	80133e0 <__ssrefill_r+0x22>

080133f8 <__ssvfiscanf_r>:
 80133f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133fc:	460c      	mov	r4, r1
 80133fe:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8013402:	2100      	movs	r1, #0
 8013404:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8013408:	49a5      	ldr	r1, [pc, #660]	@ (80136a0 <__ssvfiscanf_r+0x2a8>)
 801340a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801340c:	f10d 0804 	add.w	r8, sp, #4
 8013410:	49a4      	ldr	r1, [pc, #656]	@ (80136a4 <__ssvfiscanf_r+0x2ac>)
 8013412:	4fa5      	ldr	r7, [pc, #660]	@ (80136a8 <__ssvfiscanf_r+0x2b0>)
 8013414:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8013418:	4606      	mov	r6, r0
 801341a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801341c:	9300      	str	r3, [sp, #0]
 801341e:	7813      	ldrb	r3, [r2, #0]
 8013420:	2b00      	cmp	r3, #0
 8013422:	f000 8158 	beq.w	80136d6 <__ssvfiscanf_r+0x2de>
 8013426:	5cf9      	ldrb	r1, [r7, r3]
 8013428:	f011 0108 	ands.w	r1, r1, #8
 801342c:	f102 0501 	add.w	r5, r2, #1
 8013430:	d019      	beq.n	8013466 <__ssvfiscanf_r+0x6e>
 8013432:	6863      	ldr	r3, [r4, #4]
 8013434:	2b00      	cmp	r3, #0
 8013436:	dd0f      	ble.n	8013458 <__ssvfiscanf_r+0x60>
 8013438:	6823      	ldr	r3, [r4, #0]
 801343a:	781a      	ldrb	r2, [r3, #0]
 801343c:	5cba      	ldrb	r2, [r7, r2]
 801343e:	0712      	lsls	r2, r2, #28
 8013440:	d401      	bmi.n	8013446 <__ssvfiscanf_r+0x4e>
 8013442:	462a      	mov	r2, r5
 8013444:	e7eb      	b.n	801341e <__ssvfiscanf_r+0x26>
 8013446:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013448:	3201      	adds	r2, #1
 801344a:	9245      	str	r2, [sp, #276]	@ 0x114
 801344c:	6862      	ldr	r2, [r4, #4]
 801344e:	3301      	adds	r3, #1
 8013450:	3a01      	subs	r2, #1
 8013452:	6062      	str	r2, [r4, #4]
 8013454:	6023      	str	r3, [r4, #0]
 8013456:	e7ec      	b.n	8013432 <__ssvfiscanf_r+0x3a>
 8013458:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801345a:	4621      	mov	r1, r4
 801345c:	4630      	mov	r0, r6
 801345e:	4798      	blx	r3
 8013460:	2800      	cmp	r0, #0
 8013462:	d0e9      	beq.n	8013438 <__ssvfiscanf_r+0x40>
 8013464:	e7ed      	b.n	8013442 <__ssvfiscanf_r+0x4a>
 8013466:	2b25      	cmp	r3, #37	@ 0x25
 8013468:	d012      	beq.n	8013490 <__ssvfiscanf_r+0x98>
 801346a:	4699      	mov	r9, r3
 801346c:	6863      	ldr	r3, [r4, #4]
 801346e:	2b00      	cmp	r3, #0
 8013470:	f340 8093 	ble.w	801359a <__ssvfiscanf_r+0x1a2>
 8013474:	6822      	ldr	r2, [r4, #0]
 8013476:	7813      	ldrb	r3, [r2, #0]
 8013478:	454b      	cmp	r3, r9
 801347a:	f040 812c 	bne.w	80136d6 <__ssvfiscanf_r+0x2de>
 801347e:	6863      	ldr	r3, [r4, #4]
 8013480:	3b01      	subs	r3, #1
 8013482:	6063      	str	r3, [r4, #4]
 8013484:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8013486:	3201      	adds	r2, #1
 8013488:	3301      	adds	r3, #1
 801348a:	6022      	str	r2, [r4, #0]
 801348c:	9345      	str	r3, [sp, #276]	@ 0x114
 801348e:	e7d8      	b.n	8013442 <__ssvfiscanf_r+0x4a>
 8013490:	9141      	str	r1, [sp, #260]	@ 0x104
 8013492:	9143      	str	r1, [sp, #268]	@ 0x10c
 8013494:	7853      	ldrb	r3, [r2, #1]
 8013496:	2b2a      	cmp	r3, #42	@ 0x2a
 8013498:	bf02      	ittt	eq
 801349a:	2310      	moveq	r3, #16
 801349c:	1c95      	addeq	r5, r2, #2
 801349e:	9341      	streq	r3, [sp, #260]	@ 0x104
 80134a0:	220a      	movs	r2, #10
 80134a2:	46a9      	mov	r9, r5
 80134a4:	f819 1b01 	ldrb.w	r1, [r9], #1
 80134a8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80134ac:	2b09      	cmp	r3, #9
 80134ae:	d91e      	bls.n	80134ee <__ssvfiscanf_r+0xf6>
 80134b0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80136ac <__ssvfiscanf_r+0x2b4>
 80134b4:	2203      	movs	r2, #3
 80134b6:	4650      	mov	r0, sl
 80134b8:	f7ec feca 	bl	8000250 <memchr>
 80134bc:	b138      	cbz	r0, 80134ce <__ssvfiscanf_r+0xd6>
 80134be:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80134c0:	eba0 000a 	sub.w	r0, r0, sl
 80134c4:	2301      	movs	r3, #1
 80134c6:	4083      	lsls	r3, r0
 80134c8:	4313      	orrs	r3, r2
 80134ca:	9341      	str	r3, [sp, #260]	@ 0x104
 80134cc:	464d      	mov	r5, r9
 80134ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80134d2:	2b78      	cmp	r3, #120	@ 0x78
 80134d4:	d806      	bhi.n	80134e4 <__ssvfiscanf_r+0xec>
 80134d6:	2b57      	cmp	r3, #87	@ 0x57
 80134d8:	d810      	bhi.n	80134fc <__ssvfiscanf_r+0x104>
 80134da:	2b25      	cmp	r3, #37	@ 0x25
 80134dc:	d0c5      	beq.n	801346a <__ssvfiscanf_r+0x72>
 80134de:	d857      	bhi.n	8013590 <__ssvfiscanf_r+0x198>
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d065      	beq.n	80135b0 <__ssvfiscanf_r+0x1b8>
 80134e4:	2303      	movs	r3, #3
 80134e6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80134e8:	230a      	movs	r3, #10
 80134ea:	9342      	str	r3, [sp, #264]	@ 0x108
 80134ec:	e078      	b.n	80135e0 <__ssvfiscanf_r+0x1e8>
 80134ee:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80134f0:	fb02 1103 	mla	r1, r2, r3, r1
 80134f4:	3930      	subs	r1, #48	@ 0x30
 80134f6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80134f8:	464d      	mov	r5, r9
 80134fa:	e7d2      	b.n	80134a2 <__ssvfiscanf_r+0xaa>
 80134fc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8013500:	2a20      	cmp	r2, #32
 8013502:	d8ef      	bhi.n	80134e4 <__ssvfiscanf_r+0xec>
 8013504:	a101      	add	r1, pc, #4	@ (adr r1, 801350c <__ssvfiscanf_r+0x114>)
 8013506:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801350a:	bf00      	nop
 801350c:	080135bf 	.word	0x080135bf
 8013510:	080134e5 	.word	0x080134e5
 8013514:	080134e5 	.word	0x080134e5
 8013518:	08013619 	.word	0x08013619
 801351c:	080134e5 	.word	0x080134e5
 8013520:	080134e5 	.word	0x080134e5
 8013524:	080134e5 	.word	0x080134e5
 8013528:	080134e5 	.word	0x080134e5
 801352c:	080134e5 	.word	0x080134e5
 8013530:	080134e5 	.word	0x080134e5
 8013534:	080134e5 	.word	0x080134e5
 8013538:	0801362f 	.word	0x0801362f
 801353c:	08013615 	.word	0x08013615
 8013540:	08013597 	.word	0x08013597
 8013544:	08013597 	.word	0x08013597
 8013548:	08013597 	.word	0x08013597
 801354c:	080134e5 	.word	0x080134e5
 8013550:	080135d1 	.word	0x080135d1
 8013554:	080134e5 	.word	0x080134e5
 8013558:	080134e5 	.word	0x080134e5
 801355c:	080134e5 	.word	0x080134e5
 8013560:	080134e5 	.word	0x080134e5
 8013564:	0801363f 	.word	0x0801363f
 8013568:	080135d9 	.word	0x080135d9
 801356c:	080135b7 	.word	0x080135b7
 8013570:	080134e5 	.word	0x080134e5
 8013574:	080134e5 	.word	0x080134e5
 8013578:	0801363b 	.word	0x0801363b
 801357c:	080134e5 	.word	0x080134e5
 8013580:	08013615 	.word	0x08013615
 8013584:	080134e5 	.word	0x080134e5
 8013588:	080134e5 	.word	0x080134e5
 801358c:	080135bf 	.word	0x080135bf
 8013590:	3b45      	subs	r3, #69	@ 0x45
 8013592:	2b02      	cmp	r3, #2
 8013594:	d8a6      	bhi.n	80134e4 <__ssvfiscanf_r+0xec>
 8013596:	2305      	movs	r3, #5
 8013598:	e021      	b.n	80135de <__ssvfiscanf_r+0x1e6>
 801359a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801359c:	4621      	mov	r1, r4
 801359e:	4630      	mov	r0, r6
 80135a0:	4798      	blx	r3
 80135a2:	2800      	cmp	r0, #0
 80135a4:	f43f af66 	beq.w	8013474 <__ssvfiscanf_r+0x7c>
 80135a8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80135aa:	2800      	cmp	r0, #0
 80135ac:	f040 808b 	bne.w	80136c6 <__ssvfiscanf_r+0x2ce>
 80135b0:	f04f 30ff 	mov.w	r0, #4294967295
 80135b4:	e08b      	b.n	80136ce <__ssvfiscanf_r+0x2d6>
 80135b6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80135b8:	f042 0220 	orr.w	r2, r2, #32
 80135bc:	9241      	str	r2, [sp, #260]	@ 0x104
 80135be:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80135c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80135c4:	9241      	str	r2, [sp, #260]	@ 0x104
 80135c6:	2210      	movs	r2, #16
 80135c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80135ca:	9242      	str	r2, [sp, #264]	@ 0x108
 80135cc:	d902      	bls.n	80135d4 <__ssvfiscanf_r+0x1dc>
 80135ce:	e005      	b.n	80135dc <__ssvfiscanf_r+0x1e4>
 80135d0:	2300      	movs	r3, #0
 80135d2:	9342      	str	r3, [sp, #264]	@ 0x108
 80135d4:	2303      	movs	r3, #3
 80135d6:	e002      	b.n	80135de <__ssvfiscanf_r+0x1e6>
 80135d8:	2308      	movs	r3, #8
 80135da:	9342      	str	r3, [sp, #264]	@ 0x108
 80135dc:	2304      	movs	r3, #4
 80135de:	9347      	str	r3, [sp, #284]	@ 0x11c
 80135e0:	6863      	ldr	r3, [r4, #4]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	dd39      	ble.n	801365a <__ssvfiscanf_r+0x262>
 80135e6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80135e8:	0659      	lsls	r1, r3, #25
 80135ea:	d404      	bmi.n	80135f6 <__ssvfiscanf_r+0x1fe>
 80135ec:	6823      	ldr	r3, [r4, #0]
 80135ee:	781a      	ldrb	r2, [r3, #0]
 80135f0:	5cba      	ldrb	r2, [r7, r2]
 80135f2:	0712      	lsls	r2, r2, #28
 80135f4:	d438      	bmi.n	8013668 <__ssvfiscanf_r+0x270>
 80135f6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80135f8:	2b02      	cmp	r3, #2
 80135fa:	dc47      	bgt.n	801368c <__ssvfiscanf_r+0x294>
 80135fc:	466b      	mov	r3, sp
 80135fe:	4622      	mov	r2, r4
 8013600:	a941      	add	r1, sp, #260	@ 0x104
 8013602:	4630      	mov	r0, r6
 8013604:	f000 f9ae 	bl	8013964 <_scanf_chars>
 8013608:	2801      	cmp	r0, #1
 801360a:	d064      	beq.n	80136d6 <__ssvfiscanf_r+0x2de>
 801360c:	2802      	cmp	r0, #2
 801360e:	f47f af18 	bne.w	8013442 <__ssvfiscanf_r+0x4a>
 8013612:	e7c9      	b.n	80135a8 <__ssvfiscanf_r+0x1b0>
 8013614:	220a      	movs	r2, #10
 8013616:	e7d7      	b.n	80135c8 <__ssvfiscanf_r+0x1d0>
 8013618:	4629      	mov	r1, r5
 801361a:	4640      	mov	r0, r8
 801361c:	f000 fbfe 	bl	8013e1c <__sccl>
 8013620:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8013622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013626:	9341      	str	r3, [sp, #260]	@ 0x104
 8013628:	4605      	mov	r5, r0
 801362a:	2301      	movs	r3, #1
 801362c:	e7d7      	b.n	80135de <__ssvfiscanf_r+0x1e6>
 801362e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8013630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013634:	9341      	str	r3, [sp, #260]	@ 0x104
 8013636:	2300      	movs	r3, #0
 8013638:	e7d1      	b.n	80135de <__ssvfiscanf_r+0x1e6>
 801363a:	2302      	movs	r3, #2
 801363c:	e7cf      	b.n	80135de <__ssvfiscanf_r+0x1e6>
 801363e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8013640:	06c3      	lsls	r3, r0, #27
 8013642:	f53f aefe 	bmi.w	8013442 <__ssvfiscanf_r+0x4a>
 8013646:	9b00      	ldr	r3, [sp, #0]
 8013648:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801364a:	1d19      	adds	r1, r3, #4
 801364c:	9100      	str	r1, [sp, #0]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	07c0      	lsls	r0, r0, #31
 8013652:	bf4c      	ite	mi
 8013654:	801a      	strhmi	r2, [r3, #0]
 8013656:	601a      	strpl	r2, [r3, #0]
 8013658:	e6f3      	b.n	8013442 <__ssvfiscanf_r+0x4a>
 801365a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801365c:	4621      	mov	r1, r4
 801365e:	4630      	mov	r0, r6
 8013660:	4798      	blx	r3
 8013662:	2800      	cmp	r0, #0
 8013664:	d0bf      	beq.n	80135e6 <__ssvfiscanf_r+0x1ee>
 8013666:	e79f      	b.n	80135a8 <__ssvfiscanf_r+0x1b0>
 8013668:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801366a:	3201      	adds	r2, #1
 801366c:	9245      	str	r2, [sp, #276]	@ 0x114
 801366e:	6862      	ldr	r2, [r4, #4]
 8013670:	3a01      	subs	r2, #1
 8013672:	2a00      	cmp	r2, #0
 8013674:	6062      	str	r2, [r4, #4]
 8013676:	dd02      	ble.n	801367e <__ssvfiscanf_r+0x286>
 8013678:	3301      	adds	r3, #1
 801367a:	6023      	str	r3, [r4, #0]
 801367c:	e7b6      	b.n	80135ec <__ssvfiscanf_r+0x1f4>
 801367e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013680:	4621      	mov	r1, r4
 8013682:	4630      	mov	r0, r6
 8013684:	4798      	blx	r3
 8013686:	2800      	cmp	r0, #0
 8013688:	d0b0      	beq.n	80135ec <__ssvfiscanf_r+0x1f4>
 801368a:	e78d      	b.n	80135a8 <__ssvfiscanf_r+0x1b0>
 801368c:	2b04      	cmp	r3, #4
 801368e:	dc0f      	bgt.n	80136b0 <__ssvfiscanf_r+0x2b8>
 8013690:	466b      	mov	r3, sp
 8013692:	4622      	mov	r2, r4
 8013694:	a941      	add	r1, sp, #260	@ 0x104
 8013696:	4630      	mov	r0, r6
 8013698:	f000 f9be 	bl	8013a18 <_scanf_i>
 801369c:	e7b4      	b.n	8013608 <__ssvfiscanf_r+0x210>
 801369e:	bf00      	nop
 80136a0:	08013349 	.word	0x08013349
 80136a4:	080133bf 	.word	0x080133bf
 80136a8:	08017619 	.word	0x08017619
 80136ac:	080179a6 	.word	0x080179a6
 80136b0:	4b0a      	ldr	r3, [pc, #40]	@ (80136dc <__ssvfiscanf_r+0x2e4>)
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	f43f aec5 	beq.w	8013442 <__ssvfiscanf_r+0x4a>
 80136b8:	466b      	mov	r3, sp
 80136ba:	4622      	mov	r2, r4
 80136bc:	a941      	add	r1, sp, #260	@ 0x104
 80136be:	4630      	mov	r0, r6
 80136c0:	f7fd f85a 	bl	8010778 <_scanf_float>
 80136c4:	e7a0      	b.n	8013608 <__ssvfiscanf_r+0x210>
 80136c6:	89a3      	ldrh	r3, [r4, #12]
 80136c8:	065b      	lsls	r3, r3, #25
 80136ca:	f53f af71 	bmi.w	80135b0 <__ssvfiscanf_r+0x1b8>
 80136ce:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80136d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136d6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80136d8:	e7f9      	b.n	80136ce <__ssvfiscanf_r+0x2d6>
 80136da:	bf00      	nop
 80136dc:	08010779 	.word	0x08010779

080136e0 <__sfputc_r>:
 80136e0:	6893      	ldr	r3, [r2, #8]
 80136e2:	3b01      	subs	r3, #1
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	b410      	push	{r4}
 80136e8:	6093      	str	r3, [r2, #8]
 80136ea:	da08      	bge.n	80136fe <__sfputc_r+0x1e>
 80136ec:	6994      	ldr	r4, [r2, #24]
 80136ee:	42a3      	cmp	r3, r4
 80136f0:	db01      	blt.n	80136f6 <__sfputc_r+0x16>
 80136f2:	290a      	cmp	r1, #10
 80136f4:	d103      	bne.n	80136fe <__sfputc_r+0x1e>
 80136f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136fa:	f7fd bc46 	b.w	8010f8a <__swbuf_r>
 80136fe:	6813      	ldr	r3, [r2, #0]
 8013700:	1c58      	adds	r0, r3, #1
 8013702:	6010      	str	r0, [r2, #0]
 8013704:	7019      	strb	r1, [r3, #0]
 8013706:	4608      	mov	r0, r1
 8013708:	f85d 4b04 	ldr.w	r4, [sp], #4
 801370c:	4770      	bx	lr

0801370e <__sfputs_r>:
 801370e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013710:	4606      	mov	r6, r0
 8013712:	460f      	mov	r7, r1
 8013714:	4614      	mov	r4, r2
 8013716:	18d5      	adds	r5, r2, r3
 8013718:	42ac      	cmp	r4, r5
 801371a:	d101      	bne.n	8013720 <__sfputs_r+0x12>
 801371c:	2000      	movs	r0, #0
 801371e:	e007      	b.n	8013730 <__sfputs_r+0x22>
 8013720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013724:	463a      	mov	r2, r7
 8013726:	4630      	mov	r0, r6
 8013728:	f7ff ffda 	bl	80136e0 <__sfputc_r>
 801372c:	1c43      	adds	r3, r0, #1
 801372e:	d1f3      	bne.n	8013718 <__sfputs_r+0xa>
 8013730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013734 <_vfiprintf_r>:
 8013734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013738:	460d      	mov	r5, r1
 801373a:	b09d      	sub	sp, #116	@ 0x74
 801373c:	4614      	mov	r4, r2
 801373e:	4698      	mov	r8, r3
 8013740:	4606      	mov	r6, r0
 8013742:	b118      	cbz	r0, 801374c <_vfiprintf_r+0x18>
 8013744:	6a03      	ldr	r3, [r0, #32]
 8013746:	b90b      	cbnz	r3, 801374c <_vfiprintf_r+0x18>
 8013748:	f7fd fab6 	bl	8010cb8 <__sinit>
 801374c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801374e:	07d9      	lsls	r1, r3, #31
 8013750:	d405      	bmi.n	801375e <_vfiprintf_r+0x2a>
 8013752:	89ab      	ldrh	r3, [r5, #12]
 8013754:	059a      	lsls	r2, r3, #22
 8013756:	d402      	bmi.n	801375e <_vfiprintf_r+0x2a>
 8013758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801375a:	f7f6 fbcd 	bl	8009ef8 <__retarget_lock_acquire_recursive>
 801375e:	89ab      	ldrh	r3, [r5, #12]
 8013760:	071b      	lsls	r3, r3, #28
 8013762:	d501      	bpl.n	8013768 <_vfiprintf_r+0x34>
 8013764:	692b      	ldr	r3, [r5, #16]
 8013766:	b99b      	cbnz	r3, 8013790 <_vfiprintf_r+0x5c>
 8013768:	4629      	mov	r1, r5
 801376a:	4630      	mov	r0, r6
 801376c:	f7fd fc4c 	bl	8011008 <__swsetup_r>
 8013770:	b170      	cbz	r0, 8013790 <_vfiprintf_r+0x5c>
 8013772:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013774:	07dc      	lsls	r4, r3, #31
 8013776:	d504      	bpl.n	8013782 <_vfiprintf_r+0x4e>
 8013778:	f04f 30ff 	mov.w	r0, #4294967295
 801377c:	b01d      	add	sp, #116	@ 0x74
 801377e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013782:	89ab      	ldrh	r3, [r5, #12]
 8013784:	0598      	lsls	r0, r3, #22
 8013786:	d4f7      	bmi.n	8013778 <_vfiprintf_r+0x44>
 8013788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801378a:	f7f6 fbd1 	bl	8009f30 <__retarget_lock_release_recursive>
 801378e:	e7f3      	b.n	8013778 <_vfiprintf_r+0x44>
 8013790:	2300      	movs	r3, #0
 8013792:	9309      	str	r3, [sp, #36]	@ 0x24
 8013794:	2320      	movs	r3, #32
 8013796:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801379a:	f8cd 800c 	str.w	r8, [sp, #12]
 801379e:	2330      	movs	r3, #48	@ 0x30
 80137a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013950 <_vfiprintf_r+0x21c>
 80137a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80137a8:	f04f 0901 	mov.w	r9, #1
 80137ac:	4623      	mov	r3, r4
 80137ae:	469a      	mov	sl, r3
 80137b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137b4:	b10a      	cbz	r2, 80137ba <_vfiprintf_r+0x86>
 80137b6:	2a25      	cmp	r2, #37	@ 0x25
 80137b8:	d1f9      	bne.n	80137ae <_vfiprintf_r+0x7a>
 80137ba:	ebba 0b04 	subs.w	fp, sl, r4
 80137be:	d00b      	beq.n	80137d8 <_vfiprintf_r+0xa4>
 80137c0:	465b      	mov	r3, fp
 80137c2:	4622      	mov	r2, r4
 80137c4:	4629      	mov	r1, r5
 80137c6:	4630      	mov	r0, r6
 80137c8:	f7ff ffa1 	bl	801370e <__sfputs_r>
 80137cc:	3001      	adds	r0, #1
 80137ce:	f000 80a7 	beq.w	8013920 <_vfiprintf_r+0x1ec>
 80137d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80137d4:	445a      	add	r2, fp
 80137d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80137d8:	f89a 3000 	ldrb.w	r3, [sl]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	f000 809f 	beq.w	8013920 <_vfiprintf_r+0x1ec>
 80137e2:	2300      	movs	r3, #0
 80137e4:	f04f 32ff 	mov.w	r2, #4294967295
 80137e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137ec:	f10a 0a01 	add.w	sl, sl, #1
 80137f0:	9304      	str	r3, [sp, #16]
 80137f2:	9307      	str	r3, [sp, #28]
 80137f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80137f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80137fa:	4654      	mov	r4, sl
 80137fc:	2205      	movs	r2, #5
 80137fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013802:	4853      	ldr	r0, [pc, #332]	@ (8013950 <_vfiprintf_r+0x21c>)
 8013804:	f7ec fd24 	bl	8000250 <memchr>
 8013808:	9a04      	ldr	r2, [sp, #16]
 801380a:	b9d8      	cbnz	r0, 8013844 <_vfiprintf_r+0x110>
 801380c:	06d1      	lsls	r1, r2, #27
 801380e:	bf44      	itt	mi
 8013810:	2320      	movmi	r3, #32
 8013812:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013816:	0713      	lsls	r3, r2, #28
 8013818:	bf44      	itt	mi
 801381a:	232b      	movmi	r3, #43	@ 0x2b
 801381c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013820:	f89a 3000 	ldrb.w	r3, [sl]
 8013824:	2b2a      	cmp	r3, #42	@ 0x2a
 8013826:	d015      	beq.n	8013854 <_vfiprintf_r+0x120>
 8013828:	9a07      	ldr	r2, [sp, #28]
 801382a:	4654      	mov	r4, sl
 801382c:	2000      	movs	r0, #0
 801382e:	f04f 0c0a 	mov.w	ip, #10
 8013832:	4621      	mov	r1, r4
 8013834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013838:	3b30      	subs	r3, #48	@ 0x30
 801383a:	2b09      	cmp	r3, #9
 801383c:	d94b      	bls.n	80138d6 <_vfiprintf_r+0x1a2>
 801383e:	b1b0      	cbz	r0, 801386e <_vfiprintf_r+0x13a>
 8013840:	9207      	str	r2, [sp, #28]
 8013842:	e014      	b.n	801386e <_vfiprintf_r+0x13a>
 8013844:	eba0 0308 	sub.w	r3, r0, r8
 8013848:	fa09 f303 	lsl.w	r3, r9, r3
 801384c:	4313      	orrs	r3, r2
 801384e:	9304      	str	r3, [sp, #16]
 8013850:	46a2      	mov	sl, r4
 8013852:	e7d2      	b.n	80137fa <_vfiprintf_r+0xc6>
 8013854:	9b03      	ldr	r3, [sp, #12]
 8013856:	1d19      	adds	r1, r3, #4
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	9103      	str	r1, [sp, #12]
 801385c:	2b00      	cmp	r3, #0
 801385e:	bfbb      	ittet	lt
 8013860:	425b      	neglt	r3, r3
 8013862:	f042 0202 	orrlt.w	r2, r2, #2
 8013866:	9307      	strge	r3, [sp, #28]
 8013868:	9307      	strlt	r3, [sp, #28]
 801386a:	bfb8      	it	lt
 801386c:	9204      	strlt	r2, [sp, #16]
 801386e:	7823      	ldrb	r3, [r4, #0]
 8013870:	2b2e      	cmp	r3, #46	@ 0x2e
 8013872:	d10a      	bne.n	801388a <_vfiprintf_r+0x156>
 8013874:	7863      	ldrb	r3, [r4, #1]
 8013876:	2b2a      	cmp	r3, #42	@ 0x2a
 8013878:	d132      	bne.n	80138e0 <_vfiprintf_r+0x1ac>
 801387a:	9b03      	ldr	r3, [sp, #12]
 801387c:	1d1a      	adds	r2, r3, #4
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	9203      	str	r2, [sp, #12]
 8013882:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013886:	3402      	adds	r4, #2
 8013888:	9305      	str	r3, [sp, #20]
 801388a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013960 <_vfiprintf_r+0x22c>
 801388e:	7821      	ldrb	r1, [r4, #0]
 8013890:	2203      	movs	r2, #3
 8013892:	4650      	mov	r0, sl
 8013894:	f7ec fcdc 	bl	8000250 <memchr>
 8013898:	b138      	cbz	r0, 80138aa <_vfiprintf_r+0x176>
 801389a:	9b04      	ldr	r3, [sp, #16]
 801389c:	eba0 000a 	sub.w	r0, r0, sl
 80138a0:	2240      	movs	r2, #64	@ 0x40
 80138a2:	4082      	lsls	r2, r0
 80138a4:	4313      	orrs	r3, r2
 80138a6:	3401      	adds	r4, #1
 80138a8:	9304      	str	r3, [sp, #16]
 80138aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138ae:	4829      	ldr	r0, [pc, #164]	@ (8013954 <_vfiprintf_r+0x220>)
 80138b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80138b4:	2206      	movs	r2, #6
 80138b6:	f7ec fccb 	bl	8000250 <memchr>
 80138ba:	2800      	cmp	r0, #0
 80138bc:	d03f      	beq.n	801393e <_vfiprintf_r+0x20a>
 80138be:	4b26      	ldr	r3, [pc, #152]	@ (8013958 <_vfiprintf_r+0x224>)
 80138c0:	bb1b      	cbnz	r3, 801390a <_vfiprintf_r+0x1d6>
 80138c2:	9b03      	ldr	r3, [sp, #12]
 80138c4:	3307      	adds	r3, #7
 80138c6:	f023 0307 	bic.w	r3, r3, #7
 80138ca:	3308      	adds	r3, #8
 80138cc:	9303      	str	r3, [sp, #12]
 80138ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138d0:	443b      	add	r3, r7
 80138d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80138d4:	e76a      	b.n	80137ac <_vfiprintf_r+0x78>
 80138d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80138da:	460c      	mov	r4, r1
 80138dc:	2001      	movs	r0, #1
 80138de:	e7a8      	b.n	8013832 <_vfiprintf_r+0xfe>
 80138e0:	2300      	movs	r3, #0
 80138e2:	3401      	adds	r4, #1
 80138e4:	9305      	str	r3, [sp, #20]
 80138e6:	4619      	mov	r1, r3
 80138e8:	f04f 0c0a 	mov.w	ip, #10
 80138ec:	4620      	mov	r0, r4
 80138ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138f2:	3a30      	subs	r2, #48	@ 0x30
 80138f4:	2a09      	cmp	r2, #9
 80138f6:	d903      	bls.n	8013900 <_vfiprintf_r+0x1cc>
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d0c6      	beq.n	801388a <_vfiprintf_r+0x156>
 80138fc:	9105      	str	r1, [sp, #20]
 80138fe:	e7c4      	b.n	801388a <_vfiprintf_r+0x156>
 8013900:	fb0c 2101 	mla	r1, ip, r1, r2
 8013904:	4604      	mov	r4, r0
 8013906:	2301      	movs	r3, #1
 8013908:	e7f0      	b.n	80138ec <_vfiprintf_r+0x1b8>
 801390a:	ab03      	add	r3, sp, #12
 801390c:	9300      	str	r3, [sp, #0]
 801390e:	462a      	mov	r2, r5
 8013910:	4b12      	ldr	r3, [pc, #72]	@ (801395c <_vfiprintf_r+0x228>)
 8013912:	a904      	add	r1, sp, #16
 8013914:	4630      	mov	r0, r6
 8013916:	f7fc fb77 	bl	8010008 <_printf_float>
 801391a:	4607      	mov	r7, r0
 801391c:	1c78      	adds	r0, r7, #1
 801391e:	d1d6      	bne.n	80138ce <_vfiprintf_r+0x19a>
 8013920:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013922:	07d9      	lsls	r1, r3, #31
 8013924:	d405      	bmi.n	8013932 <_vfiprintf_r+0x1fe>
 8013926:	89ab      	ldrh	r3, [r5, #12]
 8013928:	059a      	lsls	r2, r3, #22
 801392a:	d402      	bmi.n	8013932 <_vfiprintf_r+0x1fe>
 801392c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801392e:	f7f6 faff 	bl	8009f30 <__retarget_lock_release_recursive>
 8013932:	89ab      	ldrh	r3, [r5, #12]
 8013934:	065b      	lsls	r3, r3, #25
 8013936:	f53f af1f 	bmi.w	8013778 <_vfiprintf_r+0x44>
 801393a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801393c:	e71e      	b.n	801377c <_vfiprintf_r+0x48>
 801393e:	ab03      	add	r3, sp, #12
 8013940:	9300      	str	r3, [sp, #0]
 8013942:	462a      	mov	r2, r5
 8013944:	4b05      	ldr	r3, [pc, #20]	@ (801395c <_vfiprintf_r+0x228>)
 8013946:	a904      	add	r1, sp, #16
 8013948:	4630      	mov	r0, r6
 801394a:	f7fc fdf5 	bl	8010538 <_printf_i>
 801394e:	e7e4      	b.n	801391a <_vfiprintf_r+0x1e6>
 8013950:	080179a0 	.word	0x080179a0
 8013954:	080179aa 	.word	0x080179aa
 8013958:	08010009 	.word	0x08010009
 801395c:	0801370f 	.word	0x0801370f
 8013960:	080179a6 	.word	0x080179a6

08013964 <_scanf_chars>:
 8013964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013968:	4615      	mov	r5, r2
 801396a:	688a      	ldr	r2, [r1, #8]
 801396c:	4680      	mov	r8, r0
 801396e:	460c      	mov	r4, r1
 8013970:	b932      	cbnz	r2, 8013980 <_scanf_chars+0x1c>
 8013972:	698a      	ldr	r2, [r1, #24]
 8013974:	2a00      	cmp	r2, #0
 8013976:	bf14      	ite	ne
 8013978:	f04f 32ff 	movne.w	r2, #4294967295
 801397c:	2201      	moveq	r2, #1
 801397e:	608a      	str	r2, [r1, #8]
 8013980:	6822      	ldr	r2, [r4, #0]
 8013982:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8013a14 <_scanf_chars+0xb0>
 8013986:	06d1      	lsls	r1, r2, #27
 8013988:	bf5f      	itttt	pl
 801398a:	681a      	ldrpl	r2, [r3, #0]
 801398c:	1d11      	addpl	r1, r2, #4
 801398e:	6019      	strpl	r1, [r3, #0]
 8013990:	6816      	ldrpl	r6, [r2, #0]
 8013992:	2700      	movs	r7, #0
 8013994:	69a0      	ldr	r0, [r4, #24]
 8013996:	b188      	cbz	r0, 80139bc <_scanf_chars+0x58>
 8013998:	2801      	cmp	r0, #1
 801399a:	d107      	bne.n	80139ac <_scanf_chars+0x48>
 801399c:	682b      	ldr	r3, [r5, #0]
 801399e:	781a      	ldrb	r2, [r3, #0]
 80139a0:	6963      	ldr	r3, [r4, #20]
 80139a2:	5c9b      	ldrb	r3, [r3, r2]
 80139a4:	b953      	cbnz	r3, 80139bc <_scanf_chars+0x58>
 80139a6:	2f00      	cmp	r7, #0
 80139a8:	d031      	beq.n	8013a0e <_scanf_chars+0xaa>
 80139aa:	e022      	b.n	80139f2 <_scanf_chars+0x8e>
 80139ac:	2802      	cmp	r0, #2
 80139ae:	d120      	bne.n	80139f2 <_scanf_chars+0x8e>
 80139b0:	682b      	ldr	r3, [r5, #0]
 80139b2:	781b      	ldrb	r3, [r3, #0]
 80139b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80139b8:	071b      	lsls	r3, r3, #28
 80139ba:	d41a      	bmi.n	80139f2 <_scanf_chars+0x8e>
 80139bc:	6823      	ldr	r3, [r4, #0]
 80139be:	06da      	lsls	r2, r3, #27
 80139c0:	bf5e      	ittt	pl
 80139c2:	682b      	ldrpl	r3, [r5, #0]
 80139c4:	781b      	ldrbpl	r3, [r3, #0]
 80139c6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80139ca:	682a      	ldr	r2, [r5, #0]
 80139cc:	686b      	ldr	r3, [r5, #4]
 80139ce:	3201      	adds	r2, #1
 80139d0:	602a      	str	r2, [r5, #0]
 80139d2:	68a2      	ldr	r2, [r4, #8]
 80139d4:	3b01      	subs	r3, #1
 80139d6:	3a01      	subs	r2, #1
 80139d8:	606b      	str	r3, [r5, #4]
 80139da:	3701      	adds	r7, #1
 80139dc:	60a2      	str	r2, [r4, #8]
 80139de:	b142      	cbz	r2, 80139f2 <_scanf_chars+0x8e>
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	dcd7      	bgt.n	8013994 <_scanf_chars+0x30>
 80139e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80139e8:	4629      	mov	r1, r5
 80139ea:	4640      	mov	r0, r8
 80139ec:	4798      	blx	r3
 80139ee:	2800      	cmp	r0, #0
 80139f0:	d0d0      	beq.n	8013994 <_scanf_chars+0x30>
 80139f2:	6823      	ldr	r3, [r4, #0]
 80139f4:	f013 0310 	ands.w	r3, r3, #16
 80139f8:	d105      	bne.n	8013a06 <_scanf_chars+0xa2>
 80139fa:	68e2      	ldr	r2, [r4, #12]
 80139fc:	3201      	adds	r2, #1
 80139fe:	60e2      	str	r2, [r4, #12]
 8013a00:	69a2      	ldr	r2, [r4, #24]
 8013a02:	b102      	cbz	r2, 8013a06 <_scanf_chars+0xa2>
 8013a04:	7033      	strb	r3, [r6, #0]
 8013a06:	6923      	ldr	r3, [r4, #16]
 8013a08:	443b      	add	r3, r7
 8013a0a:	6123      	str	r3, [r4, #16]
 8013a0c:	2000      	movs	r0, #0
 8013a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a12:	bf00      	nop
 8013a14:	08017619 	.word	0x08017619

08013a18 <_scanf_i>:
 8013a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a1c:	4698      	mov	r8, r3
 8013a1e:	4b74      	ldr	r3, [pc, #464]	@ (8013bf0 <_scanf_i+0x1d8>)
 8013a20:	460c      	mov	r4, r1
 8013a22:	4682      	mov	sl, r0
 8013a24:	4616      	mov	r6, r2
 8013a26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013a2a:	b087      	sub	sp, #28
 8013a2c:	ab03      	add	r3, sp, #12
 8013a2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013a32:	4b70      	ldr	r3, [pc, #448]	@ (8013bf4 <_scanf_i+0x1dc>)
 8013a34:	69a1      	ldr	r1, [r4, #24]
 8013a36:	4a70      	ldr	r2, [pc, #448]	@ (8013bf8 <_scanf_i+0x1e0>)
 8013a38:	2903      	cmp	r1, #3
 8013a3a:	bf08      	it	eq
 8013a3c:	461a      	moveq	r2, r3
 8013a3e:	68a3      	ldr	r3, [r4, #8]
 8013a40:	9201      	str	r2, [sp, #4]
 8013a42:	1e5a      	subs	r2, r3, #1
 8013a44:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013a48:	bf88      	it	hi
 8013a4a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013a4e:	4627      	mov	r7, r4
 8013a50:	bf82      	ittt	hi
 8013a52:	eb03 0905 	addhi.w	r9, r3, r5
 8013a56:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013a5a:	60a3      	strhi	r3, [r4, #8]
 8013a5c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013a60:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8013a64:	bf98      	it	ls
 8013a66:	f04f 0900 	movls.w	r9, #0
 8013a6a:	6023      	str	r3, [r4, #0]
 8013a6c:	463d      	mov	r5, r7
 8013a6e:	f04f 0b00 	mov.w	fp, #0
 8013a72:	6831      	ldr	r1, [r6, #0]
 8013a74:	ab03      	add	r3, sp, #12
 8013a76:	7809      	ldrb	r1, [r1, #0]
 8013a78:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013a7c:	2202      	movs	r2, #2
 8013a7e:	f7ec fbe7 	bl	8000250 <memchr>
 8013a82:	b328      	cbz	r0, 8013ad0 <_scanf_i+0xb8>
 8013a84:	f1bb 0f01 	cmp.w	fp, #1
 8013a88:	d159      	bne.n	8013b3e <_scanf_i+0x126>
 8013a8a:	6862      	ldr	r2, [r4, #4]
 8013a8c:	b92a      	cbnz	r2, 8013a9a <_scanf_i+0x82>
 8013a8e:	6822      	ldr	r2, [r4, #0]
 8013a90:	2108      	movs	r1, #8
 8013a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013a96:	6061      	str	r1, [r4, #4]
 8013a98:	6022      	str	r2, [r4, #0]
 8013a9a:	6822      	ldr	r2, [r4, #0]
 8013a9c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8013aa0:	6022      	str	r2, [r4, #0]
 8013aa2:	68a2      	ldr	r2, [r4, #8]
 8013aa4:	1e51      	subs	r1, r2, #1
 8013aa6:	60a1      	str	r1, [r4, #8]
 8013aa8:	b192      	cbz	r2, 8013ad0 <_scanf_i+0xb8>
 8013aaa:	6832      	ldr	r2, [r6, #0]
 8013aac:	1c51      	adds	r1, r2, #1
 8013aae:	6031      	str	r1, [r6, #0]
 8013ab0:	7812      	ldrb	r2, [r2, #0]
 8013ab2:	f805 2b01 	strb.w	r2, [r5], #1
 8013ab6:	6872      	ldr	r2, [r6, #4]
 8013ab8:	3a01      	subs	r2, #1
 8013aba:	2a00      	cmp	r2, #0
 8013abc:	6072      	str	r2, [r6, #4]
 8013abe:	dc07      	bgt.n	8013ad0 <_scanf_i+0xb8>
 8013ac0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8013ac4:	4631      	mov	r1, r6
 8013ac6:	4650      	mov	r0, sl
 8013ac8:	4790      	blx	r2
 8013aca:	2800      	cmp	r0, #0
 8013acc:	f040 8085 	bne.w	8013bda <_scanf_i+0x1c2>
 8013ad0:	f10b 0b01 	add.w	fp, fp, #1
 8013ad4:	f1bb 0f03 	cmp.w	fp, #3
 8013ad8:	d1cb      	bne.n	8013a72 <_scanf_i+0x5a>
 8013ada:	6863      	ldr	r3, [r4, #4]
 8013adc:	b90b      	cbnz	r3, 8013ae2 <_scanf_i+0xca>
 8013ade:	230a      	movs	r3, #10
 8013ae0:	6063      	str	r3, [r4, #4]
 8013ae2:	6863      	ldr	r3, [r4, #4]
 8013ae4:	4945      	ldr	r1, [pc, #276]	@ (8013bfc <_scanf_i+0x1e4>)
 8013ae6:	6960      	ldr	r0, [r4, #20]
 8013ae8:	1ac9      	subs	r1, r1, r3
 8013aea:	f000 f997 	bl	8013e1c <__sccl>
 8013aee:	f04f 0b00 	mov.w	fp, #0
 8013af2:	68a3      	ldr	r3, [r4, #8]
 8013af4:	6822      	ldr	r2, [r4, #0]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d03d      	beq.n	8013b76 <_scanf_i+0x15e>
 8013afa:	6831      	ldr	r1, [r6, #0]
 8013afc:	6960      	ldr	r0, [r4, #20]
 8013afe:	f891 c000 	ldrb.w	ip, [r1]
 8013b02:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013b06:	2800      	cmp	r0, #0
 8013b08:	d035      	beq.n	8013b76 <_scanf_i+0x15e>
 8013b0a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8013b0e:	d124      	bne.n	8013b5a <_scanf_i+0x142>
 8013b10:	0510      	lsls	r0, r2, #20
 8013b12:	d522      	bpl.n	8013b5a <_scanf_i+0x142>
 8013b14:	f10b 0b01 	add.w	fp, fp, #1
 8013b18:	f1b9 0f00 	cmp.w	r9, #0
 8013b1c:	d003      	beq.n	8013b26 <_scanf_i+0x10e>
 8013b1e:	3301      	adds	r3, #1
 8013b20:	f109 39ff 	add.w	r9, r9, #4294967295
 8013b24:	60a3      	str	r3, [r4, #8]
 8013b26:	6873      	ldr	r3, [r6, #4]
 8013b28:	3b01      	subs	r3, #1
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	6073      	str	r3, [r6, #4]
 8013b2e:	dd1b      	ble.n	8013b68 <_scanf_i+0x150>
 8013b30:	6833      	ldr	r3, [r6, #0]
 8013b32:	3301      	adds	r3, #1
 8013b34:	6033      	str	r3, [r6, #0]
 8013b36:	68a3      	ldr	r3, [r4, #8]
 8013b38:	3b01      	subs	r3, #1
 8013b3a:	60a3      	str	r3, [r4, #8]
 8013b3c:	e7d9      	b.n	8013af2 <_scanf_i+0xda>
 8013b3e:	f1bb 0f02 	cmp.w	fp, #2
 8013b42:	d1ae      	bne.n	8013aa2 <_scanf_i+0x8a>
 8013b44:	6822      	ldr	r2, [r4, #0]
 8013b46:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8013b4a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8013b4e:	d1bf      	bne.n	8013ad0 <_scanf_i+0xb8>
 8013b50:	2110      	movs	r1, #16
 8013b52:	6061      	str	r1, [r4, #4]
 8013b54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013b58:	e7a2      	b.n	8013aa0 <_scanf_i+0x88>
 8013b5a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8013b5e:	6022      	str	r2, [r4, #0]
 8013b60:	780b      	ldrb	r3, [r1, #0]
 8013b62:	f805 3b01 	strb.w	r3, [r5], #1
 8013b66:	e7de      	b.n	8013b26 <_scanf_i+0x10e>
 8013b68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013b6c:	4631      	mov	r1, r6
 8013b6e:	4650      	mov	r0, sl
 8013b70:	4798      	blx	r3
 8013b72:	2800      	cmp	r0, #0
 8013b74:	d0df      	beq.n	8013b36 <_scanf_i+0x11e>
 8013b76:	6823      	ldr	r3, [r4, #0]
 8013b78:	05d9      	lsls	r1, r3, #23
 8013b7a:	d50d      	bpl.n	8013b98 <_scanf_i+0x180>
 8013b7c:	42bd      	cmp	r5, r7
 8013b7e:	d909      	bls.n	8013b94 <_scanf_i+0x17c>
 8013b80:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013b84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013b88:	4632      	mov	r2, r6
 8013b8a:	4650      	mov	r0, sl
 8013b8c:	4798      	blx	r3
 8013b8e:	f105 39ff 	add.w	r9, r5, #4294967295
 8013b92:	464d      	mov	r5, r9
 8013b94:	42bd      	cmp	r5, r7
 8013b96:	d028      	beq.n	8013bea <_scanf_i+0x1d2>
 8013b98:	6822      	ldr	r2, [r4, #0]
 8013b9a:	f012 0210 	ands.w	r2, r2, #16
 8013b9e:	d113      	bne.n	8013bc8 <_scanf_i+0x1b0>
 8013ba0:	702a      	strb	r2, [r5, #0]
 8013ba2:	6863      	ldr	r3, [r4, #4]
 8013ba4:	9e01      	ldr	r6, [sp, #4]
 8013ba6:	4639      	mov	r1, r7
 8013ba8:	4650      	mov	r0, sl
 8013baa:	47b0      	blx	r6
 8013bac:	f8d8 3000 	ldr.w	r3, [r8]
 8013bb0:	6821      	ldr	r1, [r4, #0]
 8013bb2:	1d1a      	adds	r2, r3, #4
 8013bb4:	f8c8 2000 	str.w	r2, [r8]
 8013bb8:	f011 0f20 	tst.w	r1, #32
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	d00f      	beq.n	8013be0 <_scanf_i+0x1c8>
 8013bc0:	6018      	str	r0, [r3, #0]
 8013bc2:	68e3      	ldr	r3, [r4, #12]
 8013bc4:	3301      	adds	r3, #1
 8013bc6:	60e3      	str	r3, [r4, #12]
 8013bc8:	6923      	ldr	r3, [r4, #16]
 8013bca:	1bed      	subs	r5, r5, r7
 8013bcc:	445d      	add	r5, fp
 8013bce:	442b      	add	r3, r5
 8013bd0:	6123      	str	r3, [r4, #16]
 8013bd2:	2000      	movs	r0, #0
 8013bd4:	b007      	add	sp, #28
 8013bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bda:	f04f 0b00 	mov.w	fp, #0
 8013bde:	e7ca      	b.n	8013b76 <_scanf_i+0x15e>
 8013be0:	07ca      	lsls	r2, r1, #31
 8013be2:	bf4c      	ite	mi
 8013be4:	8018      	strhmi	r0, [r3, #0]
 8013be6:	6018      	strpl	r0, [r3, #0]
 8013be8:	e7eb      	b.n	8013bc2 <_scanf_i+0x1aa>
 8013bea:	2001      	movs	r0, #1
 8013bec:	e7f2      	b.n	8013bd4 <_scanf_i+0x1bc>
 8013bee:	bf00      	nop
 8013bf0:	0801427c 	.word	0x0801427c
 8013bf4:	0800feb1 	.word	0x0800feb1
 8013bf8:	08014119 	.word	0x08014119
 8013bfc:	080179c1 	.word	0x080179c1

08013c00 <__sflush_r>:
 8013c00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c08:	0716      	lsls	r6, r2, #28
 8013c0a:	4605      	mov	r5, r0
 8013c0c:	460c      	mov	r4, r1
 8013c0e:	d454      	bmi.n	8013cba <__sflush_r+0xba>
 8013c10:	684b      	ldr	r3, [r1, #4]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	dc02      	bgt.n	8013c1c <__sflush_r+0x1c>
 8013c16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	dd48      	ble.n	8013cae <__sflush_r+0xae>
 8013c1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c1e:	2e00      	cmp	r6, #0
 8013c20:	d045      	beq.n	8013cae <__sflush_r+0xae>
 8013c22:	2300      	movs	r3, #0
 8013c24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013c28:	682f      	ldr	r7, [r5, #0]
 8013c2a:	6a21      	ldr	r1, [r4, #32]
 8013c2c:	602b      	str	r3, [r5, #0]
 8013c2e:	d030      	beq.n	8013c92 <__sflush_r+0x92>
 8013c30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013c32:	89a3      	ldrh	r3, [r4, #12]
 8013c34:	0759      	lsls	r1, r3, #29
 8013c36:	d505      	bpl.n	8013c44 <__sflush_r+0x44>
 8013c38:	6863      	ldr	r3, [r4, #4]
 8013c3a:	1ad2      	subs	r2, r2, r3
 8013c3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013c3e:	b10b      	cbz	r3, 8013c44 <__sflush_r+0x44>
 8013c40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013c42:	1ad2      	subs	r2, r2, r3
 8013c44:	2300      	movs	r3, #0
 8013c46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c48:	6a21      	ldr	r1, [r4, #32]
 8013c4a:	4628      	mov	r0, r5
 8013c4c:	47b0      	blx	r6
 8013c4e:	1c43      	adds	r3, r0, #1
 8013c50:	89a3      	ldrh	r3, [r4, #12]
 8013c52:	d106      	bne.n	8013c62 <__sflush_r+0x62>
 8013c54:	6829      	ldr	r1, [r5, #0]
 8013c56:	291d      	cmp	r1, #29
 8013c58:	d82b      	bhi.n	8013cb2 <__sflush_r+0xb2>
 8013c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8013d04 <__sflush_r+0x104>)
 8013c5c:	410a      	asrs	r2, r1
 8013c5e:	07d6      	lsls	r6, r2, #31
 8013c60:	d427      	bmi.n	8013cb2 <__sflush_r+0xb2>
 8013c62:	2200      	movs	r2, #0
 8013c64:	6062      	str	r2, [r4, #4]
 8013c66:	04d9      	lsls	r1, r3, #19
 8013c68:	6922      	ldr	r2, [r4, #16]
 8013c6a:	6022      	str	r2, [r4, #0]
 8013c6c:	d504      	bpl.n	8013c78 <__sflush_r+0x78>
 8013c6e:	1c42      	adds	r2, r0, #1
 8013c70:	d101      	bne.n	8013c76 <__sflush_r+0x76>
 8013c72:	682b      	ldr	r3, [r5, #0]
 8013c74:	b903      	cbnz	r3, 8013c78 <__sflush_r+0x78>
 8013c76:	6560      	str	r0, [r4, #84]	@ 0x54
 8013c78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013c7a:	602f      	str	r7, [r5, #0]
 8013c7c:	b1b9      	cbz	r1, 8013cae <__sflush_r+0xae>
 8013c7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013c82:	4299      	cmp	r1, r3
 8013c84:	d002      	beq.n	8013c8c <__sflush_r+0x8c>
 8013c86:	4628      	mov	r0, r5
 8013c88:	f7fe f9b2 	bl	8011ff0 <_free_r>
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8013c90:	e00d      	b.n	8013cae <__sflush_r+0xae>
 8013c92:	2301      	movs	r3, #1
 8013c94:	4628      	mov	r0, r5
 8013c96:	47b0      	blx	r6
 8013c98:	4602      	mov	r2, r0
 8013c9a:	1c50      	adds	r0, r2, #1
 8013c9c:	d1c9      	bne.n	8013c32 <__sflush_r+0x32>
 8013c9e:	682b      	ldr	r3, [r5, #0]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d0c6      	beq.n	8013c32 <__sflush_r+0x32>
 8013ca4:	2b1d      	cmp	r3, #29
 8013ca6:	d001      	beq.n	8013cac <__sflush_r+0xac>
 8013ca8:	2b16      	cmp	r3, #22
 8013caa:	d11e      	bne.n	8013cea <__sflush_r+0xea>
 8013cac:	602f      	str	r7, [r5, #0]
 8013cae:	2000      	movs	r0, #0
 8013cb0:	e022      	b.n	8013cf8 <__sflush_r+0xf8>
 8013cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cb6:	b21b      	sxth	r3, r3
 8013cb8:	e01b      	b.n	8013cf2 <__sflush_r+0xf2>
 8013cba:	690f      	ldr	r7, [r1, #16]
 8013cbc:	2f00      	cmp	r7, #0
 8013cbe:	d0f6      	beq.n	8013cae <__sflush_r+0xae>
 8013cc0:	0793      	lsls	r3, r2, #30
 8013cc2:	680e      	ldr	r6, [r1, #0]
 8013cc4:	bf08      	it	eq
 8013cc6:	694b      	ldreq	r3, [r1, #20]
 8013cc8:	600f      	str	r7, [r1, #0]
 8013cca:	bf18      	it	ne
 8013ccc:	2300      	movne	r3, #0
 8013cce:	eba6 0807 	sub.w	r8, r6, r7
 8013cd2:	608b      	str	r3, [r1, #8]
 8013cd4:	f1b8 0f00 	cmp.w	r8, #0
 8013cd8:	dde9      	ble.n	8013cae <__sflush_r+0xae>
 8013cda:	6a21      	ldr	r1, [r4, #32]
 8013cdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013cde:	4643      	mov	r3, r8
 8013ce0:	463a      	mov	r2, r7
 8013ce2:	4628      	mov	r0, r5
 8013ce4:	47b0      	blx	r6
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	dc08      	bgt.n	8013cfc <__sflush_r+0xfc>
 8013cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cf2:	81a3      	strh	r3, [r4, #12]
 8013cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8013cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cfc:	4407      	add	r7, r0
 8013cfe:	eba8 0800 	sub.w	r8, r8, r0
 8013d02:	e7e7      	b.n	8013cd4 <__sflush_r+0xd4>
 8013d04:	dfbffffe 	.word	0xdfbffffe

08013d08 <_fflush_r>:
 8013d08:	b538      	push	{r3, r4, r5, lr}
 8013d0a:	690b      	ldr	r3, [r1, #16]
 8013d0c:	4605      	mov	r5, r0
 8013d0e:	460c      	mov	r4, r1
 8013d10:	b913      	cbnz	r3, 8013d18 <_fflush_r+0x10>
 8013d12:	2500      	movs	r5, #0
 8013d14:	4628      	mov	r0, r5
 8013d16:	bd38      	pop	{r3, r4, r5, pc}
 8013d18:	b118      	cbz	r0, 8013d22 <_fflush_r+0x1a>
 8013d1a:	6a03      	ldr	r3, [r0, #32]
 8013d1c:	b90b      	cbnz	r3, 8013d22 <_fflush_r+0x1a>
 8013d1e:	f7fc ffcb 	bl	8010cb8 <__sinit>
 8013d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d0f3      	beq.n	8013d12 <_fflush_r+0xa>
 8013d2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013d2c:	07d0      	lsls	r0, r2, #31
 8013d2e:	d404      	bmi.n	8013d3a <_fflush_r+0x32>
 8013d30:	0599      	lsls	r1, r3, #22
 8013d32:	d402      	bmi.n	8013d3a <_fflush_r+0x32>
 8013d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013d36:	f7f6 f8df 	bl	8009ef8 <__retarget_lock_acquire_recursive>
 8013d3a:	4628      	mov	r0, r5
 8013d3c:	4621      	mov	r1, r4
 8013d3e:	f7ff ff5f 	bl	8013c00 <__sflush_r>
 8013d42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013d44:	07da      	lsls	r2, r3, #31
 8013d46:	4605      	mov	r5, r0
 8013d48:	d4e4      	bmi.n	8013d14 <_fflush_r+0xc>
 8013d4a:	89a3      	ldrh	r3, [r4, #12]
 8013d4c:	059b      	lsls	r3, r3, #22
 8013d4e:	d4e1      	bmi.n	8013d14 <_fflush_r+0xc>
 8013d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013d52:	f7f6 f8ed 	bl	8009f30 <__retarget_lock_release_recursive>
 8013d56:	e7dd      	b.n	8013d14 <_fflush_r+0xc>

08013d58 <__swhatbuf_r>:
 8013d58:	b570      	push	{r4, r5, r6, lr}
 8013d5a:	460c      	mov	r4, r1
 8013d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d60:	2900      	cmp	r1, #0
 8013d62:	b096      	sub	sp, #88	@ 0x58
 8013d64:	4615      	mov	r5, r2
 8013d66:	461e      	mov	r6, r3
 8013d68:	da0d      	bge.n	8013d86 <__swhatbuf_r+0x2e>
 8013d6a:	89a3      	ldrh	r3, [r4, #12]
 8013d6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013d70:	f04f 0100 	mov.w	r1, #0
 8013d74:	bf14      	ite	ne
 8013d76:	2340      	movne	r3, #64	@ 0x40
 8013d78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013d7c:	2000      	movs	r0, #0
 8013d7e:	6031      	str	r1, [r6, #0]
 8013d80:	602b      	str	r3, [r5, #0]
 8013d82:	b016      	add	sp, #88	@ 0x58
 8013d84:	bd70      	pop	{r4, r5, r6, pc}
 8013d86:	466a      	mov	r2, sp
 8013d88:	f000 f8d6 	bl	8013f38 <_fstat_r>
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	dbec      	blt.n	8013d6a <__swhatbuf_r+0x12>
 8013d90:	9901      	ldr	r1, [sp, #4]
 8013d92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013d96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013d9a:	4259      	negs	r1, r3
 8013d9c:	4159      	adcs	r1, r3
 8013d9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013da2:	e7eb      	b.n	8013d7c <__swhatbuf_r+0x24>

08013da4 <__smakebuf_r>:
 8013da4:	898b      	ldrh	r3, [r1, #12]
 8013da6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013da8:	079d      	lsls	r5, r3, #30
 8013daa:	4606      	mov	r6, r0
 8013dac:	460c      	mov	r4, r1
 8013dae:	d507      	bpl.n	8013dc0 <__smakebuf_r+0x1c>
 8013db0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013db4:	6023      	str	r3, [r4, #0]
 8013db6:	6123      	str	r3, [r4, #16]
 8013db8:	2301      	movs	r3, #1
 8013dba:	6163      	str	r3, [r4, #20]
 8013dbc:	b003      	add	sp, #12
 8013dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dc0:	ab01      	add	r3, sp, #4
 8013dc2:	466a      	mov	r2, sp
 8013dc4:	f7ff ffc8 	bl	8013d58 <__swhatbuf_r>
 8013dc8:	9f00      	ldr	r7, [sp, #0]
 8013dca:	4605      	mov	r5, r0
 8013dcc:	4639      	mov	r1, r7
 8013dce:	4630      	mov	r0, r6
 8013dd0:	f7fb f8f0 	bl	800efb4 <_malloc_r>
 8013dd4:	b948      	cbnz	r0, 8013dea <__smakebuf_r+0x46>
 8013dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dda:	059a      	lsls	r2, r3, #22
 8013ddc:	d4ee      	bmi.n	8013dbc <__smakebuf_r+0x18>
 8013dde:	f023 0303 	bic.w	r3, r3, #3
 8013de2:	f043 0302 	orr.w	r3, r3, #2
 8013de6:	81a3      	strh	r3, [r4, #12]
 8013de8:	e7e2      	b.n	8013db0 <__smakebuf_r+0xc>
 8013dea:	89a3      	ldrh	r3, [r4, #12]
 8013dec:	6020      	str	r0, [r4, #0]
 8013dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013df2:	81a3      	strh	r3, [r4, #12]
 8013df4:	9b01      	ldr	r3, [sp, #4]
 8013df6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013dfa:	b15b      	cbz	r3, 8013e14 <__smakebuf_r+0x70>
 8013dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e00:	4630      	mov	r0, r6
 8013e02:	f000 f8ab 	bl	8013f5c <_isatty_r>
 8013e06:	b128      	cbz	r0, 8013e14 <__smakebuf_r+0x70>
 8013e08:	89a3      	ldrh	r3, [r4, #12]
 8013e0a:	f023 0303 	bic.w	r3, r3, #3
 8013e0e:	f043 0301 	orr.w	r3, r3, #1
 8013e12:	81a3      	strh	r3, [r4, #12]
 8013e14:	89a3      	ldrh	r3, [r4, #12]
 8013e16:	431d      	orrs	r5, r3
 8013e18:	81a5      	strh	r5, [r4, #12]
 8013e1a:	e7cf      	b.n	8013dbc <__smakebuf_r+0x18>

08013e1c <__sccl>:
 8013e1c:	b570      	push	{r4, r5, r6, lr}
 8013e1e:	780b      	ldrb	r3, [r1, #0]
 8013e20:	4604      	mov	r4, r0
 8013e22:	2b5e      	cmp	r3, #94	@ 0x5e
 8013e24:	bf0b      	itete	eq
 8013e26:	784b      	ldrbeq	r3, [r1, #1]
 8013e28:	1c4a      	addne	r2, r1, #1
 8013e2a:	1c8a      	addeq	r2, r1, #2
 8013e2c:	2100      	movne	r1, #0
 8013e2e:	bf08      	it	eq
 8013e30:	2101      	moveq	r1, #1
 8013e32:	3801      	subs	r0, #1
 8013e34:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8013e38:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013e3c:	42a8      	cmp	r0, r5
 8013e3e:	d1fb      	bne.n	8013e38 <__sccl+0x1c>
 8013e40:	b90b      	cbnz	r3, 8013e46 <__sccl+0x2a>
 8013e42:	1e50      	subs	r0, r2, #1
 8013e44:	bd70      	pop	{r4, r5, r6, pc}
 8013e46:	f081 0101 	eor.w	r1, r1, #1
 8013e4a:	54e1      	strb	r1, [r4, r3]
 8013e4c:	4610      	mov	r0, r2
 8013e4e:	4602      	mov	r2, r0
 8013e50:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013e54:	2d2d      	cmp	r5, #45	@ 0x2d
 8013e56:	d005      	beq.n	8013e64 <__sccl+0x48>
 8013e58:	2d5d      	cmp	r5, #93	@ 0x5d
 8013e5a:	d016      	beq.n	8013e8a <__sccl+0x6e>
 8013e5c:	2d00      	cmp	r5, #0
 8013e5e:	d0f1      	beq.n	8013e44 <__sccl+0x28>
 8013e60:	462b      	mov	r3, r5
 8013e62:	e7f2      	b.n	8013e4a <__sccl+0x2e>
 8013e64:	7846      	ldrb	r6, [r0, #1]
 8013e66:	2e5d      	cmp	r6, #93	@ 0x5d
 8013e68:	d0fa      	beq.n	8013e60 <__sccl+0x44>
 8013e6a:	42b3      	cmp	r3, r6
 8013e6c:	dcf8      	bgt.n	8013e60 <__sccl+0x44>
 8013e6e:	3002      	adds	r0, #2
 8013e70:	461a      	mov	r2, r3
 8013e72:	3201      	adds	r2, #1
 8013e74:	4296      	cmp	r6, r2
 8013e76:	54a1      	strb	r1, [r4, r2]
 8013e78:	dcfb      	bgt.n	8013e72 <__sccl+0x56>
 8013e7a:	1af2      	subs	r2, r6, r3
 8013e7c:	3a01      	subs	r2, #1
 8013e7e:	1c5d      	adds	r5, r3, #1
 8013e80:	42b3      	cmp	r3, r6
 8013e82:	bfa8      	it	ge
 8013e84:	2200      	movge	r2, #0
 8013e86:	18ab      	adds	r3, r5, r2
 8013e88:	e7e1      	b.n	8013e4e <__sccl+0x32>
 8013e8a:	4610      	mov	r0, r2
 8013e8c:	e7da      	b.n	8013e44 <__sccl+0x28>

08013e8e <__submore>:
 8013e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e92:	460c      	mov	r4, r1
 8013e94:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013e96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013e9a:	4299      	cmp	r1, r3
 8013e9c:	d11d      	bne.n	8013eda <__submore+0x4c>
 8013e9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8013ea2:	f7fb f887 	bl	800efb4 <_malloc_r>
 8013ea6:	b918      	cbnz	r0, 8013eb0 <__submore+0x22>
 8013ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8013eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013eb4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013eb6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8013eba:	6360      	str	r0, [r4, #52]	@ 0x34
 8013ebc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8013ec0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8013ec4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8013ec8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013ecc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8013ed0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8013ed4:	6020      	str	r0, [r4, #0]
 8013ed6:	2000      	movs	r0, #0
 8013ed8:	e7e8      	b.n	8013eac <__submore+0x1e>
 8013eda:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8013edc:	0077      	lsls	r7, r6, #1
 8013ede:	463a      	mov	r2, r7
 8013ee0:	f000 f87e 	bl	8013fe0 <_realloc_r>
 8013ee4:	4605      	mov	r5, r0
 8013ee6:	2800      	cmp	r0, #0
 8013ee8:	d0de      	beq.n	8013ea8 <__submore+0x1a>
 8013eea:	eb00 0806 	add.w	r8, r0, r6
 8013eee:	4601      	mov	r1, r0
 8013ef0:	4632      	mov	r2, r6
 8013ef2:	4640      	mov	r0, r8
 8013ef4:	f7fd fa10 	bl	8011318 <memcpy>
 8013ef8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8013efc:	f8c4 8000 	str.w	r8, [r4]
 8013f00:	e7e9      	b.n	8013ed6 <__submore+0x48>

08013f02 <memmove>:
 8013f02:	4288      	cmp	r0, r1
 8013f04:	b510      	push	{r4, lr}
 8013f06:	eb01 0402 	add.w	r4, r1, r2
 8013f0a:	d902      	bls.n	8013f12 <memmove+0x10>
 8013f0c:	4284      	cmp	r4, r0
 8013f0e:	4623      	mov	r3, r4
 8013f10:	d807      	bhi.n	8013f22 <memmove+0x20>
 8013f12:	1e43      	subs	r3, r0, #1
 8013f14:	42a1      	cmp	r1, r4
 8013f16:	d008      	beq.n	8013f2a <memmove+0x28>
 8013f18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013f20:	e7f8      	b.n	8013f14 <memmove+0x12>
 8013f22:	4402      	add	r2, r0
 8013f24:	4601      	mov	r1, r0
 8013f26:	428a      	cmp	r2, r1
 8013f28:	d100      	bne.n	8013f2c <memmove+0x2a>
 8013f2a:	bd10      	pop	{r4, pc}
 8013f2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f30:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013f34:	e7f7      	b.n	8013f26 <memmove+0x24>
	...

08013f38 <_fstat_r>:
 8013f38:	b538      	push	{r3, r4, r5, lr}
 8013f3a:	4d07      	ldr	r5, [pc, #28]	@ (8013f58 <_fstat_r+0x20>)
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	4604      	mov	r4, r0
 8013f40:	4608      	mov	r0, r1
 8013f42:	4611      	mov	r1, r2
 8013f44:	602b      	str	r3, [r5, #0]
 8013f46:	f7f3 f985 	bl	8007254 <_fstat>
 8013f4a:	1c43      	adds	r3, r0, #1
 8013f4c:	d102      	bne.n	8013f54 <_fstat_r+0x1c>
 8013f4e:	682b      	ldr	r3, [r5, #0]
 8013f50:	b103      	cbz	r3, 8013f54 <_fstat_r+0x1c>
 8013f52:	6023      	str	r3, [r4, #0]
 8013f54:	bd38      	pop	{r3, r4, r5, pc}
 8013f56:	bf00      	nop
 8013f58:	20005e90 	.word	0x20005e90

08013f5c <_isatty_r>:
 8013f5c:	b538      	push	{r3, r4, r5, lr}
 8013f5e:	4d06      	ldr	r5, [pc, #24]	@ (8013f78 <_isatty_r+0x1c>)
 8013f60:	2300      	movs	r3, #0
 8013f62:	4604      	mov	r4, r0
 8013f64:	4608      	mov	r0, r1
 8013f66:	602b      	str	r3, [r5, #0]
 8013f68:	f7f3 f97a 	bl	8007260 <_isatty>
 8013f6c:	1c43      	adds	r3, r0, #1
 8013f6e:	d102      	bne.n	8013f76 <_isatty_r+0x1a>
 8013f70:	682b      	ldr	r3, [r5, #0]
 8013f72:	b103      	cbz	r3, 8013f76 <_isatty_r+0x1a>
 8013f74:	6023      	str	r3, [r4, #0]
 8013f76:	bd38      	pop	{r3, r4, r5, pc}
 8013f78:	20005e90 	.word	0x20005e90

08013f7c <__assert_func>:
 8013f7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f7e:	4614      	mov	r4, r2
 8013f80:	461a      	mov	r2, r3
 8013f82:	4b09      	ldr	r3, [pc, #36]	@ (8013fa8 <__assert_func+0x2c>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	4605      	mov	r5, r0
 8013f88:	68d8      	ldr	r0, [r3, #12]
 8013f8a:	b954      	cbnz	r4, 8013fa2 <__assert_func+0x26>
 8013f8c:	4b07      	ldr	r3, [pc, #28]	@ (8013fac <__assert_func+0x30>)
 8013f8e:	461c      	mov	r4, r3
 8013f90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013f94:	9100      	str	r1, [sp, #0]
 8013f96:	462b      	mov	r3, r5
 8013f98:	4905      	ldr	r1, [pc, #20]	@ (8013fb0 <__assert_func+0x34>)
 8013f9a:	f000 f8bf 	bl	801411c <fiprintf>
 8013f9e:	f000 f8cf 	bl	8014140 <abort>
 8013fa2:	4b04      	ldr	r3, [pc, #16]	@ (8013fb4 <__assert_func+0x38>)
 8013fa4:	e7f4      	b.n	8013f90 <__assert_func+0x14>
 8013fa6:	bf00      	nop
 8013fa8:	200001b4 	.word	0x200001b4
 8013fac:	08017a07 	.word	0x08017a07
 8013fb0:	080179d9 	.word	0x080179d9
 8013fb4:	080179cc 	.word	0x080179cc

08013fb8 <_calloc_r>:
 8013fb8:	b570      	push	{r4, r5, r6, lr}
 8013fba:	fba1 5402 	umull	r5, r4, r1, r2
 8013fbe:	b93c      	cbnz	r4, 8013fd0 <_calloc_r+0x18>
 8013fc0:	4629      	mov	r1, r5
 8013fc2:	f7fa fff7 	bl	800efb4 <_malloc_r>
 8013fc6:	4606      	mov	r6, r0
 8013fc8:	b928      	cbnz	r0, 8013fd6 <_calloc_r+0x1e>
 8013fca:	2600      	movs	r6, #0
 8013fcc:	4630      	mov	r0, r6
 8013fce:	bd70      	pop	{r4, r5, r6, pc}
 8013fd0:	220c      	movs	r2, #12
 8013fd2:	6002      	str	r2, [r0, #0]
 8013fd4:	e7f9      	b.n	8013fca <_calloc_r+0x12>
 8013fd6:	462a      	mov	r2, r5
 8013fd8:	4621      	mov	r1, r4
 8013fda:	f7fd f86b 	bl	80110b4 <memset>
 8013fde:	e7f5      	b.n	8013fcc <_calloc_r+0x14>

08013fe0 <_realloc_r>:
 8013fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fe4:	4680      	mov	r8, r0
 8013fe6:	4615      	mov	r5, r2
 8013fe8:	460c      	mov	r4, r1
 8013fea:	b921      	cbnz	r1, 8013ff6 <_realloc_r+0x16>
 8013fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ff0:	4611      	mov	r1, r2
 8013ff2:	f7fa bfdf 	b.w	800efb4 <_malloc_r>
 8013ff6:	b92a      	cbnz	r2, 8014004 <_realloc_r+0x24>
 8013ff8:	f7fd fffa 	bl	8011ff0 <_free_r>
 8013ffc:	2400      	movs	r4, #0
 8013ffe:	4620      	mov	r0, r4
 8014000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014004:	f000 f8a3 	bl	801414e <_malloc_usable_size_r>
 8014008:	4285      	cmp	r5, r0
 801400a:	4606      	mov	r6, r0
 801400c:	d802      	bhi.n	8014014 <_realloc_r+0x34>
 801400e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014012:	d8f4      	bhi.n	8013ffe <_realloc_r+0x1e>
 8014014:	4629      	mov	r1, r5
 8014016:	4640      	mov	r0, r8
 8014018:	f7fa ffcc 	bl	800efb4 <_malloc_r>
 801401c:	4607      	mov	r7, r0
 801401e:	2800      	cmp	r0, #0
 8014020:	d0ec      	beq.n	8013ffc <_realloc_r+0x1c>
 8014022:	42b5      	cmp	r5, r6
 8014024:	462a      	mov	r2, r5
 8014026:	4621      	mov	r1, r4
 8014028:	bf28      	it	cs
 801402a:	4632      	movcs	r2, r6
 801402c:	f7fd f974 	bl	8011318 <memcpy>
 8014030:	4621      	mov	r1, r4
 8014032:	4640      	mov	r0, r8
 8014034:	f7fd ffdc 	bl	8011ff0 <_free_r>
 8014038:	463c      	mov	r4, r7
 801403a:	e7e0      	b.n	8013ffe <_realloc_r+0x1e>

0801403c <_strtoul_l.constprop.0>:
 801403c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014040:	4e34      	ldr	r6, [pc, #208]	@ (8014114 <_strtoul_l.constprop.0+0xd8>)
 8014042:	4686      	mov	lr, r0
 8014044:	460d      	mov	r5, r1
 8014046:	4628      	mov	r0, r5
 8014048:	f815 4b01 	ldrb.w	r4, [r5], #1
 801404c:	5d37      	ldrb	r7, [r6, r4]
 801404e:	f017 0708 	ands.w	r7, r7, #8
 8014052:	d1f8      	bne.n	8014046 <_strtoul_l.constprop.0+0xa>
 8014054:	2c2d      	cmp	r4, #45	@ 0x2d
 8014056:	d12f      	bne.n	80140b8 <_strtoul_l.constprop.0+0x7c>
 8014058:	782c      	ldrb	r4, [r5, #0]
 801405a:	2701      	movs	r7, #1
 801405c:	1c85      	adds	r5, r0, #2
 801405e:	f033 0010 	bics.w	r0, r3, #16
 8014062:	d109      	bne.n	8014078 <_strtoul_l.constprop.0+0x3c>
 8014064:	2c30      	cmp	r4, #48	@ 0x30
 8014066:	d12c      	bne.n	80140c2 <_strtoul_l.constprop.0+0x86>
 8014068:	7828      	ldrb	r0, [r5, #0]
 801406a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801406e:	2858      	cmp	r0, #88	@ 0x58
 8014070:	d127      	bne.n	80140c2 <_strtoul_l.constprop.0+0x86>
 8014072:	786c      	ldrb	r4, [r5, #1]
 8014074:	2310      	movs	r3, #16
 8014076:	3502      	adds	r5, #2
 8014078:	f04f 38ff 	mov.w	r8, #4294967295
 801407c:	2600      	movs	r6, #0
 801407e:	fbb8 f8f3 	udiv	r8, r8, r3
 8014082:	fb03 f908 	mul.w	r9, r3, r8
 8014086:	ea6f 0909 	mvn.w	r9, r9
 801408a:	4630      	mov	r0, r6
 801408c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8014090:	f1bc 0f09 	cmp.w	ip, #9
 8014094:	d81c      	bhi.n	80140d0 <_strtoul_l.constprop.0+0x94>
 8014096:	4664      	mov	r4, ip
 8014098:	42a3      	cmp	r3, r4
 801409a:	dd2a      	ble.n	80140f2 <_strtoul_l.constprop.0+0xb6>
 801409c:	f1b6 3fff 	cmp.w	r6, #4294967295
 80140a0:	d007      	beq.n	80140b2 <_strtoul_l.constprop.0+0x76>
 80140a2:	4580      	cmp	r8, r0
 80140a4:	d322      	bcc.n	80140ec <_strtoul_l.constprop.0+0xb0>
 80140a6:	d101      	bne.n	80140ac <_strtoul_l.constprop.0+0x70>
 80140a8:	45a1      	cmp	r9, r4
 80140aa:	db1f      	blt.n	80140ec <_strtoul_l.constprop.0+0xb0>
 80140ac:	fb00 4003 	mla	r0, r0, r3, r4
 80140b0:	2601      	movs	r6, #1
 80140b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80140b6:	e7e9      	b.n	801408c <_strtoul_l.constprop.0+0x50>
 80140b8:	2c2b      	cmp	r4, #43	@ 0x2b
 80140ba:	bf04      	itt	eq
 80140bc:	782c      	ldrbeq	r4, [r5, #0]
 80140be:	1c85      	addeq	r5, r0, #2
 80140c0:	e7cd      	b.n	801405e <_strtoul_l.constprop.0+0x22>
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d1d8      	bne.n	8014078 <_strtoul_l.constprop.0+0x3c>
 80140c6:	2c30      	cmp	r4, #48	@ 0x30
 80140c8:	bf0c      	ite	eq
 80140ca:	2308      	moveq	r3, #8
 80140cc:	230a      	movne	r3, #10
 80140ce:	e7d3      	b.n	8014078 <_strtoul_l.constprop.0+0x3c>
 80140d0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80140d4:	f1bc 0f19 	cmp.w	ip, #25
 80140d8:	d801      	bhi.n	80140de <_strtoul_l.constprop.0+0xa2>
 80140da:	3c37      	subs	r4, #55	@ 0x37
 80140dc:	e7dc      	b.n	8014098 <_strtoul_l.constprop.0+0x5c>
 80140de:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80140e2:	f1bc 0f19 	cmp.w	ip, #25
 80140e6:	d804      	bhi.n	80140f2 <_strtoul_l.constprop.0+0xb6>
 80140e8:	3c57      	subs	r4, #87	@ 0x57
 80140ea:	e7d5      	b.n	8014098 <_strtoul_l.constprop.0+0x5c>
 80140ec:	f04f 36ff 	mov.w	r6, #4294967295
 80140f0:	e7df      	b.n	80140b2 <_strtoul_l.constprop.0+0x76>
 80140f2:	1c73      	adds	r3, r6, #1
 80140f4:	d106      	bne.n	8014104 <_strtoul_l.constprop.0+0xc8>
 80140f6:	2322      	movs	r3, #34	@ 0x22
 80140f8:	f8ce 3000 	str.w	r3, [lr]
 80140fc:	4630      	mov	r0, r6
 80140fe:	b932      	cbnz	r2, 801410e <_strtoul_l.constprop.0+0xd2>
 8014100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014104:	b107      	cbz	r7, 8014108 <_strtoul_l.constprop.0+0xcc>
 8014106:	4240      	negs	r0, r0
 8014108:	2a00      	cmp	r2, #0
 801410a:	d0f9      	beq.n	8014100 <_strtoul_l.constprop.0+0xc4>
 801410c:	b106      	cbz	r6, 8014110 <_strtoul_l.constprop.0+0xd4>
 801410e:	1e69      	subs	r1, r5, #1
 8014110:	6011      	str	r1, [r2, #0]
 8014112:	e7f5      	b.n	8014100 <_strtoul_l.constprop.0+0xc4>
 8014114:	08017619 	.word	0x08017619

08014118 <_strtoul_r>:
 8014118:	f7ff bf90 	b.w	801403c <_strtoul_l.constprop.0>

0801411c <fiprintf>:
 801411c:	b40e      	push	{r1, r2, r3}
 801411e:	b503      	push	{r0, r1, lr}
 8014120:	4601      	mov	r1, r0
 8014122:	ab03      	add	r3, sp, #12
 8014124:	4805      	ldr	r0, [pc, #20]	@ (801413c <fiprintf+0x20>)
 8014126:	f853 2b04 	ldr.w	r2, [r3], #4
 801412a:	6800      	ldr	r0, [r0, #0]
 801412c:	9301      	str	r3, [sp, #4]
 801412e:	f7ff fb01 	bl	8013734 <_vfiprintf_r>
 8014132:	b002      	add	sp, #8
 8014134:	f85d eb04 	ldr.w	lr, [sp], #4
 8014138:	b003      	add	sp, #12
 801413a:	4770      	bx	lr
 801413c:	200001b4 	.word	0x200001b4

08014140 <abort>:
 8014140:	b508      	push	{r3, lr}
 8014142:	2006      	movs	r0, #6
 8014144:	f000 f834 	bl	80141b0 <raise>
 8014148:	2001      	movs	r0, #1
 801414a:	f7f3 f879 	bl	8007240 <_exit>

0801414e <_malloc_usable_size_r>:
 801414e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014152:	1f18      	subs	r0, r3, #4
 8014154:	2b00      	cmp	r3, #0
 8014156:	bfbc      	itt	lt
 8014158:	580b      	ldrlt	r3, [r1, r0]
 801415a:	18c0      	addlt	r0, r0, r3
 801415c:	4770      	bx	lr

0801415e <_raise_r>:
 801415e:	291f      	cmp	r1, #31
 8014160:	b538      	push	{r3, r4, r5, lr}
 8014162:	4605      	mov	r5, r0
 8014164:	460c      	mov	r4, r1
 8014166:	d904      	bls.n	8014172 <_raise_r+0x14>
 8014168:	2316      	movs	r3, #22
 801416a:	6003      	str	r3, [r0, #0]
 801416c:	f04f 30ff 	mov.w	r0, #4294967295
 8014170:	bd38      	pop	{r3, r4, r5, pc}
 8014172:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014174:	b112      	cbz	r2, 801417c <_raise_r+0x1e>
 8014176:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801417a:	b94b      	cbnz	r3, 8014190 <_raise_r+0x32>
 801417c:	4628      	mov	r0, r5
 801417e:	f000 f831 	bl	80141e4 <_getpid_r>
 8014182:	4622      	mov	r2, r4
 8014184:	4601      	mov	r1, r0
 8014186:	4628      	mov	r0, r5
 8014188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801418c:	f000 b818 	b.w	80141c0 <_kill_r>
 8014190:	2b01      	cmp	r3, #1
 8014192:	d00a      	beq.n	80141aa <_raise_r+0x4c>
 8014194:	1c59      	adds	r1, r3, #1
 8014196:	d103      	bne.n	80141a0 <_raise_r+0x42>
 8014198:	2316      	movs	r3, #22
 801419a:	6003      	str	r3, [r0, #0]
 801419c:	2001      	movs	r0, #1
 801419e:	e7e7      	b.n	8014170 <_raise_r+0x12>
 80141a0:	2100      	movs	r1, #0
 80141a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80141a6:	4620      	mov	r0, r4
 80141a8:	4798      	blx	r3
 80141aa:	2000      	movs	r0, #0
 80141ac:	e7e0      	b.n	8014170 <_raise_r+0x12>
	...

080141b0 <raise>:
 80141b0:	4b02      	ldr	r3, [pc, #8]	@ (80141bc <raise+0xc>)
 80141b2:	4601      	mov	r1, r0
 80141b4:	6818      	ldr	r0, [r3, #0]
 80141b6:	f7ff bfd2 	b.w	801415e <_raise_r>
 80141ba:	bf00      	nop
 80141bc:	200001b4 	.word	0x200001b4

080141c0 <_kill_r>:
 80141c0:	b538      	push	{r3, r4, r5, lr}
 80141c2:	4d07      	ldr	r5, [pc, #28]	@ (80141e0 <_kill_r+0x20>)
 80141c4:	2300      	movs	r3, #0
 80141c6:	4604      	mov	r4, r0
 80141c8:	4608      	mov	r0, r1
 80141ca:	4611      	mov	r1, r2
 80141cc:	602b      	str	r3, [r5, #0]
 80141ce:	f7f3 f82f 	bl	8007230 <_kill>
 80141d2:	1c43      	adds	r3, r0, #1
 80141d4:	d102      	bne.n	80141dc <_kill_r+0x1c>
 80141d6:	682b      	ldr	r3, [r5, #0]
 80141d8:	b103      	cbz	r3, 80141dc <_kill_r+0x1c>
 80141da:	6023      	str	r3, [r4, #0]
 80141dc:	bd38      	pop	{r3, r4, r5, pc}
 80141de:	bf00      	nop
 80141e0:	20005e90 	.word	0x20005e90

080141e4 <_getpid_r>:
 80141e4:	f7f3 b822 	b.w	800722c <_getpid>

080141e8 <_init>:
 80141e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ea:	bf00      	nop
 80141ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141ee:	bc08      	pop	{r3}
 80141f0:	469e      	mov	lr, r3
 80141f2:	4770      	bx	lr

080141f4 <_fini>:
 80141f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141f6:	bf00      	nop
 80141f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141fa:	bc08      	pop	{r3}
 80141fc:	469e      	mov	lr, r3
 80141fe:	4770      	bx	lr
