
THPFW-testy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003068  08013be0  08013be0  00014be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016c48  08016c48  00018204  2**0
                  CONTENTS
  4 .ARM          00000008  08016c48  08016c48  00017c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016c50  08016c50  00018204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016c50  08016c50  00017c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016c54  08016c54  00017c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08016c58  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c2c  20000208  08016e5c  00018208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005e34  08016e5c  00018e34  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00018204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048711  00000000  00000000  00018238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009885  00000000  00000000  00060949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001bc7e  00000000  00000000  0006a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002310  00000000  00000000  00085e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000376e  00000000  00000000  00088160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030364  00000000  00000000  0008b8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004c7de  00000000  00000000  000bbc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f77f4  00000000  00000000  00108410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ffc04  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000004  00000000  00000000  001ffc48  2**2
                  CONTENTS, READONLY
 22 .debug_frame  000084d4  00000000  00000000  001ffc4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004f  00000000  00000000  00208120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013bc8 	.word	0x08013bc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08013bc8 	.word	0x08013bc8

080001d0 <cmox_initialize>:
 80001d0:	b538      	push	{r3, r4, r5, lr}
 80001d2:	2800      	cmp	r0, #0
 80001d4:	bf1c      	itt	ne
 80001d6:	6801      	ldrne	r1, [r0, #0]
 80001d8:	2900      	cmpne	r1, #0
 80001da:	4a18      	ldr	r2, [pc, #96]	@ (800023c <cmox_initialize+0x6c>)
 80001dc:	d123      	bne.n	8000226 <cmox_initialize+0x56>
 80001de:	4b18      	ldr	r3, [pc, #96]	@ (8000240 <cmox_initialize+0x70>)
 80001e0:	681c      	ldr	r4, [r3, #0]
 80001e2:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 80001e6:	400c      	ands	r4, r1
 80001e8:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80001ec:	42ac      	cmp	r4, r5
 80001ee:	bf1f      	itttt	ne
 80001f0:	681b      	ldrne	r3, [r3, #0]
 80001f2:	4019      	andne	r1, r3
 80001f4:	f24c 2470 	movwne	r4, #49776	@ 0xc270
 80001f8:	42a1      	cmpne	r1, r4
 80001fa:	d112      	bne.n	8000222 <cmox_initialize+0x52>
 80001fc:	4d11      	ldr	r5, [pc, #68]	@ (8000244 <cmox_initialize+0x74>)
 80001fe:	6829      	ldr	r1, [r5, #0]
 8000200:	b979      	cbnz	r1, 8000222 <cmox_initialize+0x52>
 8000202:	4911      	ldr	r1, [pc, #68]	@ (8000248 <cmox_initialize+0x78>)
 8000204:	680b      	ldr	r3, [r1, #0]
 8000206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800020a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800020e:	bf1f      	itttt	ne
 8000210:	6809      	ldrne	r1, [r1, #0]
 8000212:	f3c1 010b 	ubfxne	r1, r1, #0, #12
 8000216:	f240 4383 	movwne	r3, #1155	@ 0x483
 800021a:	4299      	cmpne	r1, r3
 800021c:	bf04      	itt	eq
 800021e:	2101      	moveq	r1, #1
 8000220:	7011      	strbeq	r1, [r2, #0]
 8000222:	b928      	cbnz	r0, 8000230 <cmox_initialize+0x60>
 8000224:	e005      	b.n	8000232 <cmox_initialize+0x62>
 8000226:	4b09      	ldr	r3, [pc, #36]	@ (800024c <cmox_initialize+0x7c>)
 8000228:	4299      	cmp	r1, r3
 800022a:	bf04      	itt	eq
 800022c:	2101      	moveq	r1, #1
 800022e:	7011      	strbeq	r1, [r2, #0]
 8000230:	6840      	ldr	r0, [r0, #4]
 8000232:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 8000236:	f005 bb6d 	b.w	8005914 <cmox_ll_init>
 800023a:	bf00      	nop
 800023c:	20000224 	.word	0x20000224
 8000240:	e000ed00 	.word	0xe000ed00
 8000244:	e0042000 	.word	0xe0042000
 8000248:	5c001000 	.word	0x5c001000
 800024c:	48370000 	.word	0x48370000

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	@ 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__aeabi_dmul>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800067e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000682:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000686:	bf1d      	ittte	ne
 8000688:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800068c:	ea94 0f0c 	teqne	r4, ip
 8000690:	ea95 0f0c 	teqne	r5, ip
 8000694:	f000 f8de 	bleq	8000854 <__aeabi_dmul+0x1dc>
 8000698:	442c      	add	r4, r5
 800069a:	ea81 0603 	eor.w	r6, r1, r3
 800069e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006aa:	bf18      	it	ne
 80006ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006b8:	d038      	beq.n	800072c <__aeabi_dmul+0xb4>
 80006ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80006be:	f04f 0500 	mov.w	r5, #0
 80006c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ce:	f04f 0600 	mov.w	r6, #0
 80006d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006d6:	f09c 0f00 	teq	ip, #0
 80006da:	bf18      	it	ne
 80006dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ec:	d204      	bcs.n	80006f8 <__aeabi_dmul+0x80>
 80006ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006f2:	416d      	adcs	r5, r5
 80006f4:	eb46 0606 	adc.w	r6, r6, r6
 80006f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000700:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000704:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000708:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800070c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000710:	bf88      	it	hi
 8000712:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000716:	d81e      	bhi.n	8000756 <__aeabi_dmul+0xde>
 8000718:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800071c:	bf08      	it	eq
 800071e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000722:	f150 0000 	adcs.w	r0, r0, #0
 8000726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000730:	ea46 0101 	orr.w	r1, r6, r1
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000740:	bfc2      	ittt	gt
 8000742:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000746:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800074a:	bd70      	popgt	{r4, r5, r6, pc}
 800074c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000750:	f04f 0e00 	mov.w	lr, #0
 8000754:	3c01      	subs	r4, #1
 8000756:	f300 80ab 	bgt.w	80008b0 <__aeabi_dmul+0x238>
 800075a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800075e:	bfde      	ittt	le
 8000760:	2000      	movle	r0, #0
 8000762:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000766:	bd70      	pople	{r4, r5, r6, pc}
 8000768:	f1c4 0400 	rsb	r4, r4, #0
 800076c:	3c20      	subs	r4, #32
 800076e:	da35      	bge.n	80007dc <__aeabi_dmul+0x164>
 8000770:	340c      	adds	r4, #12
 8000772:	dc1b      	bgt.n	80007ac <__aeabi_dmul+0x134>
 8000774:	f104 0414 	add.w	r4, r4, #20
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f305 	lsl.w	r3, r0, r5
 8000780:	fa20 f004 	lsr.w	r0, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000798:	fa21 f604 	lsr.w	r6, r1, r4
 800079c:	eb42 0106 	adc.w	r1, r2, r6
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 040c 	rsb	r4, r4, #12
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f304 	lsl.w	r3, r0, r4
 80007b8:	fa20 f005 	lsr.w	r0, r0, r5
 80007bc:	fa01 f204 	lsl.w	r2, r1, r4
 80007c0:	ea40 0002 	orr.w	r0, r0, r2
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007cc:	f141 0100 	adc.w	r1, r1, #0
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 0520 	rsb	r5, r4, #32
 80007e0:	fa00 f205 	lsl.w	r2, r0, r5
 80007e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ec:	fa01 f205 	lsl.w	r2, r1, r5
 80007f0:	ea43 0302 	orr.w	r3, r3, r2
 80007f4:	fa21 f004 	lsr.w	r0, r1, r4
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000800:	ea20 0002 	bic.w	r0, r0, r2
 8000804:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800080c:	bf08      	it	eq
 800080e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f094 0f00 	teq	r4, #0
 8000818:	d10f      	bne.n	800083a <__aeabi_dmul+0x1c2>
 800081a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800081e:	0040      	lsls	r0, r0, #1
 8000820:	eb41 0101 	adc.w	r1, r1, r1
 8000824:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3c01      	subeq	r4, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1a6>
 800082e:	ea41 0106 	orr.w	r1, r1, r6
 8000832:	f095 0f00 	teq	r5, #0
 8000836:	bf18      	it	ne
 8000838:	4770      	bxne	lr
 800083a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	eb43 0303 	adc.w	r3, r3, r3
 8000844:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000848:	bf08      	it	eq
 800084a:	3d01      	subeq	r5, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1c6>
 800084e:	ea43 0306 	orr.w	r3, r3, r6
 8000852:	4770      	bx	lr
 8000854:	ea94 0f0c 	teq	r4, ip
 8000858:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800085c:	bf18      	it	ne
 800085e:	ea95 0f0c 	teqne	r5, ip
 8000862:	d00c      	beq.n	800087e <__aeabi_dmul+0x206>
 8000864:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000868:	bf18      	it	ne
 800086a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086e:	d1d1      	bne.n	8000814 <__aeabi_dmul+0x19c>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	bd70      	pop	{r4, r5, r6, pc}
 800087e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000882:	bf06      	itte	eq
 8000884:	4610      	moveq	r0, r2
 8000886:	4619      	moveq	r1, r3
 8000888:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088c:	d019      	beq.n	80008c2 <__aeabi_dmul+0x24a>
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	d102      	bne.n	800089a <__aeabi_dmul+0x222>
 8000894:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000898:	d113      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 800089a:	ea95 0f0c 	teq	r5, ip
 800089e:	d105      	bne.n	80008ac <__aeabi_dmul+0x234>
 80008a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008a4:	bf1c      	itt	ne
 80008a6:	4610      	movne	r0, r2
 80008a8:	4619      	movne	r1, r3
 80008aa:	d10a      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 80008ac:	ea81 0103 	eor.w	r1, r1, r3
 80008b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
 80008c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ca:	bd70      	pop	{r4, r5, r6, pc}

080008cc <__aeabi_ddiv>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008da:	bf1d      	ittte	ne
 80008dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008e0:	ea94 0f0c 	teqne	r4, ip
 80008e4:	ea95 0f0c 	teqne	r5, ip
 80008e8:	f000 f8a7 	bleq	8000a3a <__aeabi_ddiv+0x16e>
 80008ec:	eba4 0405 	sub.w	r4, r4, r5
 80008f0:	ea81 0e03 	eor.w	lr, r1, r3
 80008f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008fc:	f000 8088 	beq.w	8000a10 <__aeabi_ddiv+0x144>
 8000900:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000904:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000908:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800090c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000910:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000914:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000918:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800091c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000920:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000924:	429d      	cmp	r5, r3
 8000926:	bf08      	it	eq
 8000928:	4296      	cmpeq	r6, r2
 800092a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800092e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000932:	d202      	bcs.n	800093a <__aeabi_ddiv+0x6e>
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	1ab6      	subs	r6, r6, r2
 800093c:	eb65 0503 	sbc.w	r5, r5, r3
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800094a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ac:	d018      	beq.n	80009e0 <__aeabi_ddiv+0x114>
 80009ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ca:	d1c0      	bne.n	800094e <__aeabi_ddiv+0x82>
 80009cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d0:	d10b      	bne.n	80009ea <__aeabi_ddiv+0x11e>
 80009d2:	ea41 0100 	orr.w	r1, r1, r0
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009de:	e7b6      	b.n	800094e <__aeabi_ddiv+0x82>
 80009e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009e4:	bf04      	itt	eq
 80009e6:	4301      	orreq	r1, r0
 80009e8:	2000      	moveq	r0, #0
 80009ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ee:	bf88      	it	hi
 80009f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009f4:	f63f aeaf 	bhi.w	8000756 <__aeabi_dmul+0xde>
 80009f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009fc:	bf04      	itt	eq
 80009fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a06:	f150 0000 	adcs.w	r0, r0, #0
 8000a0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a1c:	bfc2      	ittt	gt
 8000a1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a26:	bd70      	popgt	{r4, r5, r6, pc}
 8000a28:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a2c:	f04f 0e00 	mov.w	lr, #0
 8000a30:	3c01      	subs	r4, #1
 8000a32:	e690      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a34:	ea45 0e06 	orr.w	lr, r5, r6
 8000a38:	e68d      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a3e:	ea94 0f0c 	teq	r4, ip
 8000a42:	bf08      	it	eq
 8000a44:	ea95 0f0c 	teqeq	r5, ip
 8000a48:	f43f af3b 	beq.w	80008c2 <__aeabi_dmul+0x24a>
 8000a4c:	ea94 0f0c 	teq	r4, ip
 8000a50:	d10a      	bne.n	8000a68 <__aeabi_ddiv+0x19c>
 8000a52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a56:	f47f af34 	bne.w	80008c2 <__aeabi_dmul+0x24a>
 8000a5a:	ea95 0f0c 	teq	r5, ip
 8000a5e:	f47f af25 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a62:	4610      	mov	r0, r2
 8000a64:	4619      	mov	r1, r3
 8000a66:	e72c      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a68:	ea95 0f0c 	teq	r5, ip
 8000a6c:	d106      	bne.n	8000a7c <__aeabi_ddiv+0x1b0>
 8000a6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a72:	f43f aefd 	beq.w	8000870 <__aeabi_dmul+0x1f8>
 8000a76:	4610      	mov	r0, r2
 8000a78:	4619      	mov	r1, r3
 8000a7a:	e722      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a86:	f47f aec5 	bne.w	8000814 <__aeabi_dmul+0x19c>
 8000a8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a8e:	f47f af0d 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a96:	f47f aeeb 	bne.w	8000870 <__aeabi_dmul+0x1f8>
 8000a9a:	e712      	b.n	80008c2 <__aeabi_dmul+0x24a>

08000a9c <__gedf2>:
 8000a9c:	f04f 3cff 	mov.w	ip, #4294967295
 8000aa0:	e006      	b.n	8000ab0 <__cmpdf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__ledf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	e002      	b.n	8000ab0 <__cmpdf2+0x4>
 8000aaa:	bf00      	nop

08000aac <__cmpdf2>:
 8000aac:	f04f 0c01 	mov.w	ip, #1
 8000ab0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ac6:	d01b      	beq.n	8000b00 <__cmpdf2+0x54>
 8000ac8:	b001      	add	sp, #4
 8000aca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ace:	bf0c      	ite	eq
 8000ad0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ad4:	ea91 0f03 	teqne	r1, r3
 8000ad8:	bf02      	ittt	eq
 8000ada:	ea90 0f02 	teqeq	r0, r2
 8000ade:	2000      	moveq	r0, #0
 8000ae0:	4770      	bxeq	lr
 8000ae2:	f110 0f00 	cmn.w	r0, #0
 8000ae6:	ea91 0f03 	teq	r1, r3
 8000aea:	bf58      	it	pl
 8000aec:	4299      	cmppl	r1, r3
 8000aee:	bf08      	it	eq
 8000af0:	4290      	cmpeq	r0, r2
 8000af2:	bf2c      	ite	cs
 8000af4:	17d8      	asrcs	r0, r3, #31
 8000af6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000afa:	f040 0001 	orr.w	r0, r0, #1
 8000afe:	4770      	bx	lr
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__cmpdf2+0x64>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d107      	bne.n	8000b20 <__cmpdf2+0x74>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d1d6      	bne.n	8000ac8 <__cmpdf2+0x1c>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d0d3      	beq.n	8000ac8 <__cmpdf2+0x1c>
 8000b20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdrcmple>:
 8000b28:	4684      	mov	ip, r0
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4662      	mov	r2, ip
 8000b2e:	468c      	mov	ip, r1
 8000b30:	4619      	mov	r1, r3
 8000b32:	4663      	mov	r3, ip
 8000b34:	e000      	b.n	8000b38 <__aeabi_cdcmpeq>
 8000b36:	bf00      	nop

08000b38 <__aeabi_cdcmpeq>:
 8000b38:	b501      	push	{r0, lr}
 8000b3a:	f7ff ffb7 	bl	8000aac <__cmpdf2>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	bf48      	it	mi
 8000b42:	f110 0f00 	cmnmi.w	r0, #0
 8000b46:	bd01      	pop	{r0, pc}

08000b48 <__aeabi_dcmpeq>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff fff4 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b50:	bf0c      	ite	eq
 8000b52:	2001      	moveq	r0, #1
 8000b54:	2000      	movne	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmplt>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffea 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b64:	bf34      	ite	cc
 8000b66:	2001      	movcc	r0, #1
 8000b68:	2000      	movcs	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmple>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffe0 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b78:	bf94      	ite	ls
 8000b7a:	2001      	movls	r0, #1
 8000b7c:	2000      	movhi	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpge>:
 8000b84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b88:	f7ff ffce 	bl	8000b28 <__aeabi_cdrcmple>
 8000b8c:	bf94      	ite	ls
 8000b8e:	2001      	movls	r0, #1
 8000b90:	2000      	movhi	r0, #0
 8000b92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b96:	bf00      	nop

08000b98 <__aeabi_dcmpgt>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff ffc4 	bl	8000b28 <__aeabi_cdrcmple>
 8000ba0:	bf34      	ite	cc
 8000ba2:	2001      	movcc	r0, #1
 8000ba4:	2000      	movcs	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmpun>:
 8000bac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x10>
 8000bb6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bba:	d10a      	bne.n	8000bd2 <__aeabi_dcmpun+0x26>
 8000bbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc4:	d102      	bne.n	8000bcc <__aeabi_dcmpun+0x20>
 8000bc6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_dcmpun+0x26>
 8000bcc:	f04f 0000 	mov.w	r0, #0
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0001 	mov.w	r0, #1
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2iz>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d215      	bcs.n	8000c0e <__aeabi_d2iz+0x36>
 8000be2:	d511      	bpl.n	8000c08 <__aeabi_d2iz+0x30>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d912      	bls.n	8000c14 <__aeabi_d2iz+0x3c>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	bf18      	it	ne
 8000c04:	4240      	negne	r0, r0
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c12:	d105      	bne.n	8000c20 <__aeabi_d2iz+0x48>
 8000c14:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	bf08      	it	eq
 8000c1a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_d2uiz>:
 8000c28:	004a      	lsls	r2, r1, #1
 8000c2a:	d211      	bcs.n	8000c50 <__aeabi_d2uiz+0x28>
 8000c2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c30:	d211      	bcs.n	8000c56 <__aeabi_d2uiz+0x2e>
 8000c32:	d50d      	bpl.n	8000c50 <__aeabi_d2uiz+0x28>
 8000c34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c3c:	d40e      	bmi.n	8000c5c <__aeabi_d2uiz+0x34>
 8000c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c5a:	d102      	bne.n	8000c62 <__aeabi_d2uiz+0x3a>
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	4770      	bx	lr
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2f>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c70:	bf24      	itt	cs
 8000c72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c7a:	d90d      	bls.n	8000c98 <__aeabi_d2f+0x30>
 8000c7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c9c:	d121      	bne.n	8000ce2 <__aeabi_d2f+0x7a>
 8000c9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ca2:	bfbc      	itt	lt
 8000ca4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ca8:	4770      	bxlt	lr
 8000caa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cb2:	f1c2 0218 	rsb	r2, r2, #24
 8000cb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000cc2:	bf18      	it	ne
 8000cc4:	f040 0001 	orrne.w	r0, r0, #1
 8000cc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ccc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cd4:	ea40 000c 	orr.w	r0, r0, ip
 8000cd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ce0:	e7cc      	b.n	8000c7c <__aeabi_d2f+0x14>
 8000ce2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ce6:	d107      	bne.n	8000cf8 <__aeabi_d2f+0x90>
 8000ce8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cec:	bf1e      	ittt	ne
 8000cee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cf2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cf6:	4770      	bxne	lr
 8000cf8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__aeabi_frsub>:
 8000d08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000d0c:	e002      	b.n	8000d14 <__addsf3>
 8000d0e:	bf00      	nop

08000d10 <__aeabi_fsub>:
 8000d10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000d14 <__addsf3>:
 8000d14:	0042      	lsls	r2, r0, #1
 8000d16:	bf1f      	itttt	ne
 8000d18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000d1c:	ea92 0f03 	teqne	r2, r3
 8000d20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d28:	d06a      	beq.n	8000e00 <__addsf3+0xec>
 8000d2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d32:	bfc1      	itttt	gt
 8000d34:	18d2      	addgt	r2, r2, r3
 8000d36:	4041      	eorgt	r1, r0
 8000d38:	4048      	eorgt	r0, r1
 8000d3a:	4041      	eorgt	r1, r0
 8000d3c:	bfb8      	it	lt
 8000d3e:	425b      	neglt	r3, r3
 8000d40:	2b19      	cmp	r3, #25
 8000d42:	bf88      	it	hi
 8000d44:	4770      	bxhi	lr
 8000d46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d52:	bf18      	it	ne
 8000d54:	4240      	negne	r0, r0
 8000d56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d62:	bf18      	it	ne
 8000d64:	4249      	negne	r1, r1
 8000d66:	ea92 0f03 	teq	r2, r3
 8000d6a:	d03f      	beq.n	8000dec <__addsf3+0xd8>
 8000d6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d70:	fa41 fc03 	asr.w	ip, r1, r3
 8000d74:	eb10 000c 	adds.w	r0, r0, ip
 8000d78:	f1c3 0320 	rsb	r3, r3, #32
 8000d7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d84:	d502      	bpl.n	8000d8c <__addsf3+0x78>
 8000d86:	4249      	negs	r1, r1
 8000d88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d90:	d313      	bcc.n	8000dba <__addsf3+0xa6>
 8000d92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d96:	d306      	bcc.n	8000da6 <__addsf3+0x92>
 8000d98:	0840      	lsrs	r0, r0, #1
 8000d9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d9e:	f102 0201 	add.w	r2, r2, #1
 8000da2:	2afe      	cmp	r2, #254	@ 0xfe
 8000da4:	d251      	bcs.n	8000e4a <__addsf3+0x136>
 8000da6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000daa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dae:	bf08      	it	eq
 8000db0:	f020 0001 	biceq.w	r0, r0, #1
 8000db4:	ea40 0003 	orr.w	r0, r0, r3
 8000db8:	4770      	bx	lr
 8000dba:	0049      	lsls	r1, r1, #1
 8000dbc:	eb40 0000 	adc.w	r0, r0, r0
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000dc8:	d2ed      	bcs.n	8000da6 <__addsf3+0x92>
 8000dca:	fab0 fc80 	clz	ip, r0
 8000dce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000dd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000dd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000dda:	bfaa      	itet	ge
 8000ddc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000de0:	4252      	neglt	r2, r2
 8000de2:	4318      	orrge	r0, r3
 8000de4:	bfbc      	itt	lt
 8000de6:	40d0      	lsrlt	r0, r2
 8000de8:	4318      	orrlt	r0, r3
 8000dea:	4770      	bx	lr
 8000dec:	f092 0f00 	teq	r2, #0
 8000df0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000df4:	bf06      	itte	eq
 8000df6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dfa:	3201      	addeq	r2, #1
 8000dfc:	3b01      	subne	r3, #1
 8000dfe:	e7b5      	b.n	8000d6c <__addsf3+0x58>
 8000e00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e08:	bf18      	it	ne
 8000e0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e0e:	d021      	beq.n	8000e54 <__addsf3+0x140>
 8000e10:	ea92 0f03 	teq	r2, r3
 8000e14:	d004      	beq.n	8000e20 <__addsf3+0x10c>
 8000e16:	f092 0f00 	teq	r2, #0
 8000e1a:	bf08      	it	eq
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	4770      	bx	lr
 8000e20:	ea90 0f01 	teq	r0, r1
 8000e24:	bf1c      	itt	ne
 8000e26:	2000      	movne	r0, #0
 8000e28:	4770      	bxne	lr
 8000e2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000e2e:	d104      	bne.n	8000e3a <__addsf3+0x126>
 8000e30:	0040      	lsls	r0, r0, #1
 8000e32:	bf28      	it	cs
 8000e34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	4770      	bx	lr
 8000e3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e3e:	bf3c      	itt	cc
 8000e40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e44:	4770      	bxcc	lr
 8000e46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e52:	4770      	bx	lr
 8000e54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e58:	bf16      	itet	ne
 8000e5a:	4608      	movne	r0, r1
 8000e5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e60:	4601      	movne	r1, r0
 8000e62:	0242      	lsls	r2, r0, #9
 8000e64:	bf06      	itte	eq
 8000e66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e6a:	ea90 0f01 	teqeq	r0, r1
 8000e6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_ui2f>:
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	e004      	b.n	8000e84 <__aeabi_i2f+0x8>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_i2f>:
 8000e7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e80:	bf48      	it	mi
 8000e82:	4240      	negmi	r0, r0
 8000e84:	ea5f 0c00 	movs.w	ip, r0
 8000e88:	bf08      	it	eq
 8000e8a:	4770      	bxeq	lr
 8000e8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e90:	4601      	mov	r1, r0
 8000e92:	f04f 0000 	mov.w	r0, #0
 8000e96:	e01c      	b.n	8000ed2 <__aeabi_l2f+0x2a>

08000e98 <__aeabi_ul2f>:
 8000e98:	ea50 0201 	orrs.w	r2, r0, r1
 8000e9c:	bf08      	it	eq
 8000e9e:	4770      	bxeq	lr
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	e00a      	b.n	8000ebc <__aeabi_l2f+0x14>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_l2f>:
 8000ea8:	ea50 0201 	orrs.w	r2, r0, r1
 8000eac:	bf08      	it	eq
 8000eae:	4770      	bxeq	lr
 8000eb0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000eb4:	d502      	bpl.n	8000ebc <__aeabi_l2f+0x14>
 8000eb6:	4240      	negs	r0, r0
 8000eb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ebc:	ea5f 0c01 	movs.w	ip, r1
 8000ec0:	bf02      	ittt	eq
 8000ec2:	4684      	moveq	ip, r0
 8000ec4:	4601      	moveq	r1, r0
 8000ec6:	2000      	moveq	r0, #0
 8000ec8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ecc:	bf08      	it	eq
 8000ece:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ed2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ed6:	fabc f28c 	clz	r2, ip
 8000eda:	3a08      	subs	r2, #8
 8000edc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ee0:	db10      	blt.n	8000f04 <__aeabi_l2f+0x5c>
 8000ee2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eec:	f1c2 0220 	rsb	r2, r2, #32
 8000ef0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ef4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ef8:	eb43 0002 	adc.w	r0, r3, r2
 8000efc:	bf08      	it	eq
 8000efe:	f020 0001 	biceq.w	r0, r0, #1
 8000f02:	4770      	bx	lr
 8000f04:	f102 0220 	add.w	r2, r2, #32
 8000f08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f0c:	f1c2 0220 	rsb	r2, r2, #32
 8000f10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f14:	fa21 f202 	lsr.w	r2, r1, r2
 8000f18:	eb43 0002 	adc.w	r0, r3, r2
 8000f1c:	bf08      	it	eq
 8000f1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_ldivmod>:
 8000f24:	b97b      	cbnz	r3, 8000f46 <__aeabi_ldivmod+0x22>
 8000f26:	b972      	cbnz	r2, 8000f46 <__aeabi_ldivmod+0x22>
 8000f28:	2900      	cmp	r1, #0
 8000f2a:	bfbe      	ittt	lt
 8000f2c:	2000      	movlt	r0, #0
 8000f2e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000f32:	e006      	blt.n	8000f42 <__aeabi_ldivmod+0x1e>
 8000f34:	bf08      	it	eq
 8000f36:	2800      	cmpeq	r0, #0
 8000f38:	bf1c      	itt	ne
 8000f3a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000f3e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f42:	f000 b9eb 	b.w	800131c <__aeabi_idiv0>
 8000f46:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f4a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f4e:	2900      	cmp	r1, #0
 8000f50:	db09      	blt.n	8000f66 <__aeabi_ldivmod+0x42>
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db1a      	blt.n	8000f8c <__aeabi_ldivmod+0x68>
 8000f56:	f000 f883 	bl	8001060 <__udivmoddi4>
 8000f5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f62:	b004      	add	sp, #16
 8000f64:	4770      	bx	lr
 8000f66:	4240      	negs	r0, r0
 8000f68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db1b      	blt.n	8000fa8 <__aeabi_ldivmod+0x84>
 8000f70:	f000 f876 	bl	8001060 <__udivmoddi4>
 8000f74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7c:	b004      	add	sp, #16
 8000f7e:	4240      	negs	r0, r0
 8000f80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f84:	4252      	negs	r2, r2
 8000f86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f8a:	4770      	bx	lr
 8000f8c:	4252      	negs	r2, r2
 8000f8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f92:	f000 f865 	bl	8001060 <__udivmoddi4>
 8000f96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f9e:	b004      	add	sp, #16
 8000fa0:	4240      	negs	r0, r0
 8000fa2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa6:	4770      	bx	lr
 8000fa8:	4252      	negs	r2, r2
 8000faa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fae:	f000 f857 	bl	8001060 <__udivmoddi4>
 8000fb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fba:	b004      	add	sp, #16
 8000fbc:	4252      	negs	r2, r2
 8000fbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_uldivmod>:
 8000fc4:	b953      	cbnz	r3, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc6:	b94a      	cbnz	r2, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc8:	2900      	cmp	r1, #0
 8000fca:	bf08      	it	eq
 8000fcc:	2800      	cmpeq	r0, #0
 8000fce:	bf1c      	itt	ne
 8000fd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000fd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000fd8:	f000 b9a0 	b.w	800131c <__aeabi_idiv0>
 8000fdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fe4:	f000 f83c 	bl	8001060 <__udivmoddi4>
 8000fe8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ff0:	b004      	add	sp, #16
 8000ff2:	4770      	bx	lr

08000ff4 <__aeabi_d2lz>:
 8000ff4:	b538      	push	{r3, r4, r5, lr}
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	460d      	mov	r5, r1
 8000ffe:	f7ff fdad 	bl	8000b5c <__aeabi_dcmplt>
 8001002:	b928      	cbnz	r0, 8001010 <__aeabi_d2lz+0x1c>
 8001004:	4620      	mov	r0, r4
 8001006:	4629      	mov	r1, r5
 8001008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800100c:	f000 b80a 	b.w	8001024 <__aeabi_d2ulz>
 8001010:	4620      	mov	r0, r4
 8001012:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001016:	f000 f805 	bl	8001024 <__aeabi_d2ulz>
 800101a:	4240      	negs	r0, r0
 800101c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001020:	bd38      	pop	{r3, r4, r5, pc}
 8001022:	bf00      	nop

08001024 <__aeabi_d2ulz>:
 8001024:	b5d0      	push	{r4, r6, r7, lr}
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <__aeabi_d2ulz+0x34>)
 8001028:	2200      	movs	r2, #0
 800102a:	4606      	mov	r6, r0
 800102c:	460f      	mov	r7, r1
 800102e:	f7ff fb23 	bl	8000678 <__aeabi_dmul>
 8001032:	f7ff fdf9 	bl	8000c28 <__aeabi_d2uiz>
 8001036:	4604      	mov	r4, r0
 8001038:	f7ff faa4 	bl	8000584 <__aeabi_ui2d>
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <__aeabi_d2ulz+0x38>)
 800103e:	2200      	movs	r2, #0
 8001040:	f7ff fb1a 	bl	8000678 <__aeabi_dmul>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4630      	mov	r0, r6
 800104a:	4639      	mov	r1, r7
 800104c:	f7ff f95c 	bl	8000308 <__aeabi_dsub>
 8001050:	f7ff fdea 	bl	8000c28 <__aeabi_d2uiz>
 8001054:	4621      	mov	r1, r4
 8001056:	bdd0      	pop	{r4, r6, r7, pc}
 8001058:	3df00000 	.word	0x3df00000
 800105c:	41f00000 	.word	0x41f00000

08001060 <__udivmoddi4>:
 8001060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001064:	9d08      	ldr	r5, [sp, #32]
 8001066:	460c      	mov	r4, r1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d14e      	bne.n	800110a <__udivmoddi4+0xaa>
 800106c:	4694      	mov	ip, r2
 800106e:	458c      	cmp	ip, r1
 8001070:	4686      	mov	lr, r0
 8001072:	fab2 f282 	clz	r2, r2
 8001076:	d962      	bls.n	800113e <__udivmoddi4+0xde>
 8001078:	b14a      	cbz	r2, 800108e <__udivmoddi4+0x2e>
 800107a:	f1c2 0320 	rsb	r3, r2, #32
 800107e:	4091      	lsls	r1, r2
 8001080:	fa20 f303 	lsr.w	r3, r0, r3
 8001084:	fa0c fc02 	lsl.w	ip, ip, r2
 8001088:	4319      	orrs	r1, r3
 800108a:	fa00 fe02 	lsl.w	lr, r0, r2
 800108e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001092:	fa1f f68c 	uxth.w	r6, ip
 8001096:	fbb1 f4f7 	udiv	r4, r1, r7
 800109a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800109e:	fb07 1114 	mls	r1, r7, r4, r1
 80010a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010a6:	fb04 f106 	mul.w	r1, r4, r6
 80010aa:	4299      	cmp	r1, r3
 80010ac:	d90a      	bls.n	80010c4 <__udivmoddi4+0x64>
 80010ae:	eb1c 0303 	adds.w	r3, ip, r3
 80010b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80010b6:	f080 8112 	bcs.w	80012de <__udivmoddi4+0x27e>
 80010ba:	4299      	cmp	r1, r3
 80010bc:	f240 810f 	bls.w	80012de <__udivmoddi4+0x27e>
 80010c0:	3c02      	subs	r4, #2
 80010c2:	4463      	add	r3, ip
 80010c4:	1a59      	subs	r1, r3, r1
 80010c6:	fa1f f38e 	uxth.w	r3, lr
 80010ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80010ce:	fb07 1110 	mls	r1, r7, r0, r1
 80010d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010d6:	fb00 f606 	mul.w	r6, r0, r6
 80010da:	429e      	cmp	r6, r3
 80010dc:	d90a      	bls.n	80010f4 <__udivmoddi4+0x94>
 80010de:	eb1c 0303 	adds.w	r3, ip, r3
 80010e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80010e6:	f080 80fc 	bcs.w	80012e2 <__udivmoddi4+0x282>
 80010ea:	429e      	cmp	r6, r3
 80010ec:	f240 80f9 	bls.w	80012e2 <__udivmoddi4+0x282>
 80010f0:	4463      	add	r3, ip
 80010f2:	3802      	subs	r0, #2
 80010f4:	1b9b      	subs	r3, r3, r6
 80010f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010fa:	2100      	movs	r1, #0
 80010fc:	b11d      	cbz	r5, 8001106 <__udivmoddi4+0xa6>
 80010fe:	40d3      	lsrs	r3, r2
 8001100:	2200      	movs	r2, #0
 8001102:	e9c5 3200 	strd	r3, r2, [r5]
 8001106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800110a:	428b      	cmp	r3, r1
 800110c:	d905      	bls.n	800111a <__udivmoddi4+0xba>
 800110e:	b10d      	cbz	r5, 8001114 <__udivmoddi4+0xb4>
 8001110:	e9c5 0100 	strd	r0, r1, [r5]
 8001114:	2100      	movs	r1, #0
 8001116:	4608      	mov	r0, r1
 8001118:	e7f5      	b.n	8001106 <__udivmoddi4+0xa6>
 800111a:	fab3 f183 	clz	r1, r3
 800111e:	2900      	cmp	r1, #0
 8001120:	d146      	bne.n	80011b0 <__udivmoddi4+0x150>
 8001122:	42a3      	cmp	r3, r4
 8001124:	d302      	bcc.n	800112c <__udivmoddi4+0xcc>
 8001126:	4290      	cmp	r0, r2
 8001128:	f0c0 80f0 	bcc.w	800130c <__udivmoddi4+0x2ac>
 800112c:	1a86      	subs	r6, r0, r2
 800112e:	eb64 0303 	sbc.w	r3, r4, r3
 8001132:	2001      	movs	r0, #1
 8001134:	2d00      	cmp	r5, #0
 8001136:	d0e6      	beq.n	8001106 <__udivmoddi4+0xa6>
 8001138:	e9c5 6300 	strd	r6, r3, [r5]
 800113c:	e7e3      	b.n	8001106 <__udivmoddi4+0xa6>
 800113e:	2a00      	cmp	r2, #0
 8001140:	f040 8090 	bne.w	8001264 <__udivmoddi4+0x204>
 8001144:	eba1 040c 	sub.w	r4, r1, ip
 8001148:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800114c:	fa1f f78c 	uxth.w	r7, ip
 8001150:	2101      	movs	r1, #1
 8001152:	fbb4 f6f8 	udiv	r6, r4, r8
 8001156:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800115a:	fb08 4416 	mls	r4, r8, r6, r4
 800115e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001162:	fb07 f006 	mul.w	r0, r7, r6
 8001166:	4298      	cmp	r0, r3
 8001168:	d908      	bls.n	800117c <__udivmoddi4+0x11c>
 800116a:	eb1c 0303 	adds.w	r3, ip, r3
 800116e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001172:	d202      	bcs.n	800117a <__udivmoddi4+0x11a>
 8001174:	4298      	cmp	r0, r3
 8001176:	f200 80cd 	bhi.w	8001314 <__udivmoddi4+0x2b4>
 800117a:	4626      	mov	r6, r4
 800117c:	1a1c      	subs	r4, r3, r0
 800117e:	fa1f f38e 	uxth.w	r3, lr
 8001182:	fbb4 f0f8 	udiv	r0, r4, r8
 8001186:	fb08 4410 	mls	r4, r8, r0, r4
 800118a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800118e:	fb00 f707 	mul.w	r7, r0, r7
 8001192:	429f      	cmp	r7, r3
 8001194:	d908      	bls.n	80011a8 <__udivmoddi4+0x148>
 8001196:	eb1c 0303 	adds.w	r3, ip, r3
 800119a:	f100 34ff 	add.w	r4, r0, #4294967295
 800119e:	d202      	bcs.n	80011a6 <__udivmoddi4+0x146>
 80011a0:	429f      	cmp	r7, r3
 80011a2:	f200 80b0 	bhi.w	8001306 <__udivmoddi4+0x2a6>
 80011a6:	4620      	mov	r0, r4
 80011a8:	1bdb      	subs	r3, r3, r7
 80011aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80011ae:	e7a5      	b.n	80010fc <__udivmoddi4+0x9c>
 80011b0:	f1c1 0620 	rsb	r6, r1, #32
 80011b4:	408b      	lsls	r3, r1
 80011b6:	fa22 f706 	lsr.w	r7, r2, r6
 80011ba:	431f      	orrs	r7, r3
 80011bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80011c0:	fa04 f301 	lsl.w	r3, r4, r1
 80011c4:	ea43 030c 	orr.w	r3, r3, ip
 80011c8:	40f4      	lsrs	r4, r6
 80011ca:	fa00 f801 	lsl.w	r8, r0, r1
 80011ce:	0c38      	lsrs	r0, r7, #16
 80011d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80011d4:	fbb4 fef0 	udiv	lr, r4, r0
 80011d8:	fa1f fc87 	uxth.w	ip, r7
 80011dc:	fb00 441e 	mls	r4, r0, lr, r4
 80011e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011e4:	fb0e f90c 	mul.w	r9, lr, ip
 80011e8:	45a1      	cmp	r9, r4
 80011ea:	fa02 f201 	lsl.w	r2, r2, r1
 80011ee:	d90a      	bls.n	8001206 <__udivmoddi4+0x1a6>
 80011f0:	193c      	adds	r4, r7, r4
 80011f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80011f6:	f080 8084 	bcs.w	8001302 <__udivmoddi4+0x2a2>
 80011fa:	45a1      	cmp	r9, r4
 80011fc:	f240 8081 	bls.w	8001302 <__udivmoddi4+0x2a2>
 8001200:	f1ae 0e02 	sub.w	lr, lr, #2
 8001204:	443c      	add	r4, r7
 8001206:	eba4 0409 	sub.w	r4, r4, r9
 800120a:	fa1f f983 	uxth.w	r9, r3
 800120e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001212:	fb00 4413 	mls	r4, r0, r3, r4
 8001216:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800121a:	fb03 fc0c 	mul.w	ip, r3, ip
 800121e:	45a4      	cmp	ip, r4
 8001220:	d907      	bls.n	8001232 <__udivmoddi4+0x1d2>
 8001222:	193c      	adds	r4, r7, r4
 8001224:	f103 30ff 	add.w	r0, r3, #4294967295
 8001228:	d267      	bcs.n	80012fa <__udivmoddi4+0x29a>
 800122a:	45a4      	cmp	ip, r4
 800122c:	d965      	bls.n	80012fa <__udivmoddi4+0x29a>
 800122e:	3b02      	subs	r3, #2
 8001230:	443c      	add	r4, r7
 8001232:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001236:	fba0 9302 	umull	r9, r3, r0, r2
 800123a:	eba4 040c 	sub.w	r4, r4, ip
 800123e:	429c      	cmp	r4, r3
 8001240:	46ce      	mov	lr, r9
 8001242:	469c      	mov	ip, r3
 8001244:	d351      	bcc.n	80012ea <__udivmoddi4+0x28a>
 8001246:	d04e      	beq.n	80012e6 <__udivmoddi4+0x286>
 8001248:	b155      	cbz	r5, 8001260 <__udivmoddi4+0x200>
 800124a:	ebb8 030e 	subs.w	r3, r8, lr
 800124e:	eb64 040c 	sbc.w	r4, r4, ip
 8001252:	fa04 f606 	lsl.w	r6, r4, r6
 8001256:	40cb      	lsrs	r3, r1
 8001258:	431e      	orrs	r6, r3
 800125a:	40cc      	lsrs	r4, r1
 800125c:	e9c5 6400 	strd	r6, r4, [r5]
 8001260:	2100      	movs	r1, #0
 8001262:	e750      	b.n	8001106 <__udivmoddi4+0xa6>
 8001264:	f1c2 0320 	rsb	r3, r2, #32
 8001268:	fa20 f103 	lsr.w	r1, r0, r3
 800126c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001270:	fa24 f303 	lsr.w	r3, r4, r3
 8001274:	4094      	lsls	r4, r2
 8001276:	430c      	orrs	r4, r1
 8001278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800127c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001280:	fa1f f78c 	uxth.w	r7, ip
 8001284:	fbb3 f0f8 	udiv	r0, r3, r8
 8001288:	fb08 3110 	mls	r1, r8, r0, r3
 800128c:	0c23      	lsrs	r3, r4, #16
 800128e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001292:	fb00 f107 	mul.w	r1, r0, r7
 8001296:	4299      	cmp	r1, r3
 8001298:	d908      	bls.n	80012ac <__udivmoddi4+0x24c>
 800129a:	eb1c 0303 	adds.w	r3, ip, r3
 800129e:	f100 36ff 	add.w	r6, r0, #4294967295
 80012a2:	d22c      	bcs.n	80012fe <__udivmoddi4+0x29e>
 80012a4:	4299      	cmp	r1, r3
 80012a6:	d92a      	bls.n	80012fe <__udivmoddi4+0x29e>
 80012a8:	3802      	subs	r0, #2
 80012aa:	4463      	add	r3, ip
 80012ac:	1a5b      	subs	r3, r3, r1
 80012ae:	b2a4      	uxth	r4, r4
 80012b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80012b4:	fb08 3311 	mls	r3, r8, r1, r3
 80012b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012bc:	fb01 f307 	mul.w	r3, r1, r7
 80012c0:	42a3      	cmp	r3, r4
 80012c2:	d908      	bls.n	80012d6 <__udivmoddi4+0x276>
 80012c4:	eb1c 0404 	adds.w	r4, ip, r4
 80012c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80012cc:	d213      	bcs.n	80012f6 <__udivmoddi4+0x296>
 80012ce:	42a3      	cmp	r3, r4
 80012d0:	d911      	bls.n	80012f6 <__udivmoddi4+0x296>
 80012d2:	3902      	subs	r1, #2
 80012d4:	4464      	add	r4, ip
 80012d6:	1ae4      	subs	r4, r4, r3
 80012d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012dc:	e739      	b.n	8001152 <__udivmoddi4+0xf2>
 80012de:	4604      	mov	r4, r0
 80012e0:	e6f0      	b.n	80010c4 <__udivmoddi4+0x64>
 80012e2:	4608      	mov	r0, r1
 80012e4:	e706      	b.n	80010f4 <__udivmoddi4+0x94>
 80012e6:	45c8      	cmp	r8, r9
 80012e8:	d2ae      	bcs.n	8001248 <__udivmoddi4+0x1e8>
 80012ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80012ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80012f2:	3801      	subs	r0, #1
 80012f4:	e7a8      	b.n	8001248 <__udivmoddi4+0x1e8>
 80012f6:	4631      	mov	r1, r6
 80012f8:	e7ed      	b.n	80012d6 <__udivmoddi4+0x276>
 80012fa:	4603      	mov	r3, r0
 80012fc:	e799      	b.n	8001232 <__udivmoddi4+0x1d2>
 80012fe:	4630      	mov	r0, r6
 8001300:	e7d4      	b.n	80012ac <__udivmoddi4+0x24c>
 8001302:	46d6      	mov	lr, sl
 8001304:	e77f      	b.n	8001206 <__udivmoddi4+0x1a6>
 8001306:	4463      	add	r3, ip
 8001308:	3802      	subs	r0, #2
 800130a:	e74d      	b.n	80011a8 <__udivmoddi4+0x148>
 800130c:	4606      	mov	r6, r0
 800130e:	4623      	mov	r3, r4
 8001310:	4608      	mov	r0, r1
 8001312:	e70f      	b.n	8001134 <__udivmoddi4+0xd4>
 8001314:	3e02      	subs	r6, #2
 8001316:	4463      	add	r3, ip
 8001318:	e730      	b.n	800117c <__udivmoddi4+0x11c>
 800131a:	bf00      	nop

0800131c <__aeabi_idiv0>:
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop

08001320 <Calc_config_crc>:
	return crc;
}

void Calc_config_crc(void)		// aktualizacja CRC struktury config
{
	config.checksum = 0xFFFF;
 8001320:	480e      	ldr	r0, [pc, #56]	@ (800135c <Calc_config_crc+0x3c>)
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	f880 30f1 	strb.w	r3, [r0, #241]	@ 0xf1
 800132a:	f880 30f2 	strb.w	r3, [r0, #242]	@ 0xf2
	uint8_t *p = (uint8_t*)&config;
 800132e:	4601      	mov	r1, r0
	config.checksum = 0xFFFF;
 8001330:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001334:	f100 0cf1 	add.w	ip, r0, #241	@ 0xf1
	uint8_t x = crc >> 8 ^ data;
 8001338:	f811 2b01 	ldrb.w	r2, [r1], #1
 800133c:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 8001340:	ea82 1212 	eor.w	r2, r2, r2, lsr #4
 8001344:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001348:	ea83 3302 	eor.w	r3, r3, r2, lsl #12
 800134c:	ea83 1342 	eor.w	r3, r3, r2, lsl #5
	for(int i=0; i<sizeof(config)-2; ++i) config.checksum = Crc16_up(config.checksum, *p++);
 8001350:	4561      	cmp	r1, ip
 8001352:	f8a0 30f1 	strh.w	r3, [r0, #241]	@ 0xf1
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 8001356:	b29b      	uxth	r3, r3
	for(int i=0; i<sizeof(config)-2; ++i) config.checksum = Crc16_up(config.checksum, *p++);
 8001358:	d1ee      	bne.n	8001338 <Calc_config_crc+0x18>
}
 800135a:	4770      	bx	lr
 800135c:	200019c0 	.word	0x200019c0

08001360 <Flash_write_block>:

#define ADDR_FLASH_PAGE_0   ((uint32_t)0x08000000) /* Base @ of Page 0, 2 Kbytes */
#define FLASH_PAGE_ADDRESS 	(ADDR_FLASH_PAGE_0 | (FLASH_PAGE_SIZE * USE_FLASH_PAGE))

uint8_t Flash_write_block(uint32_t blk, uint8_t *buff, uint32_t len)
{
 8001360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001364:	b086      	sub	sp, #24
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError = 0;
 8001366:	2300      	movs	r3, #0
{
 8001368:	4606      	mov	r6, r0
 800136a:	460c      	mov	r4, r1
 800136c:	4690      	mov	r8, r2
	uint32_t PAGEError = 0;
 800136e:	9301      	str	r3, [sp, #4]
//	WDR();
	HAL_FLASH_Unlock();
 8001370:	f009 fa7c 	bl	800a86c <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001374:	4b20      	ldr	r3, [pc, #128]	@ (80013f8 <Flash_write_block+0x98>)
 8001376:	699a      	ldr	r2, [r3, #24]
 8001378:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800137c:	619a      	str	r2, [r3, #24]
 800137e:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8001382:	611a      	str	r2, [r3, #16]
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001384:	2301      	movs	r3, #1
 8001386:	2200      	movs	r2, #0
 8001388:	e9cd 2302 	strd	r2, r3, [sp, #8]
	EraseInitStruct.Banks       = FLASH_BANK_1;
	EraseInitStruct.Page        = blk;                                  // 2kb page
	EraseInitStruct.NbPages     = 1;
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)		// kasuj cala strone
 800138c:	a901      	add	r1, sp, #4
	EraseInitStruct.NbPages     = 1;
 800138e:	2301      	movs	r3, #1
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)		// kasuj cala strone
 8001390:	a802      	add	r0, sp, #8
	EraseInitStruct.NbPages     = 1;
 8001392:	e9cd 6304 	strd	r6, r3, [sp, #16]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)		// kasuj cala strone
 8001396:	f009 fb53 	bl	800aa40 <HAL_FLASHEx_Erase>
 800139a:	bb28      	cbnz	r0, 80013e8 <Flash_write_block+0x88>
		return 0;
	}
    blk *= FLASH_PAGE_SIZE;
    blk += ADDR_FLASH_PAGE_0;
	uint64_t data64;
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 800139c:	ebc4 26c6 	rsb	r6, r4, r6, lsl #11
    {
        data64 = *(uint64_t*)buff;
        buff += 8;
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 80013a0:	f106 6600 	add.w	r6, r6, #134217728	@ 0x8000000
 80013a4:	4605      	mov	r5, r0
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 80013a6:	ea4f 08d8 	mov.w	r8, r8, lsr #3
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 80013aa:	3e08      	subs	r6, #8
 80013ac:	e002      	b.n	80013b4 <Flash_write_block+0x54>
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 80013ae:	45a8      	cmp	r8, r5
 80013b0:	d014      	beq.n	80013dc <Flash_write_block+0x7c>
 80013b2:	461d      	mov	r5, r3
        data64 = *(uint64_t*)buff;
 80013b4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 80013b8:	19a7      	adds	r7, r4, r6
 80013ba:	2000      	movs	r0, #0
 80013bc:	4639      	mov	r1, r7
 80013be:	f009 fa9f 	bl	800a900 <HAL_FLASH_Program>
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 80013c2:	1c6b      	adds	r3, r5, #1
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d0f2      	beq.n	80013ae <Flash_write_block+0x4e>
        {
            HAL_FLASH_Lock();
 80013c8:	f009 fa64 	bl	800a894 <HAL_FLASH_Lock>
//            HAL_IWDG_Refresh(&hiwdg);
            printf("Programming error at %X\r\n",(unsigned int)(8*i + blk));
 80013cc:	4639      	mov	r1, r7
 80013ce:	480b      	ldr	r0, [pc, #44]	@ (80013fc <Flash_write_block+0x9c>)
 80013d0:	f00f f998 	bl	8010704 <iprintf>
            return 1;                               // blad
 80013d4:	2001      	movs	r0, #1
        }
    }
	HAL_FLASH_Lock();
//	WDR();
	return 0;										// OK
}
 80013d6:	b006      	add	sp, #24
 80013d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	HAL_FLASH_Lock();
 80013dc:	f009 fa5a 	bl	800a894 <HAL_FLASH_Lock>
		return 0;
 80013e0:	2000      	movs	r0, #0
}
 80013e2:	b006      	add	sp, #24
 80013e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_FLASH_Lock();			// blad kasowania
 80013e8:	f009 fa54 	bl	800a894 <HAL_FLASH_Lock>
		printf("Erase error at %u\r\n", (int)blk);
 80013ec:	4631      	mov	r1, r6
 80013ee:	4804      	ldr	r0, [pc, #16]	@ (8001400 <Flash_write_block+0xa0>)
 80013f0:	f00f f988 	bl	8010704 <iprintf>
		return 0;
 80013f4:	e7f4      	b.n	80013e0 <Flash_write_block+0x80>
 80013f6:	bf00      	nop
 80013f8:	40022000 	.word	0x40022000
 80013fc:	08013c7c 	.word	0x08013c7c
 8001400:	08013c68 	.word	0x08013c68

08001404 <Save_config>:
    adr += (FLASH_PAGE_SIZE * USE_FLASH_PAGE);
    Flash_read(adr, data, size);
}

uint8_t Save_config(void)
{
 8001404:	b570      	push	{r4, r5, r6, lr}
    uint8_t err = 0;
    uint16_t oldcrc = config.checksum;
 8001406:	4e12      	ldr	r6, [pc, #72]	@ (8001450 <Save_config+0x4c>)
 8001408:	f8b6 40f1 	ldrh.w	r4, [r6, #241]	@ 0xf1
    Calc_config_crc();
 800140c:	f7ff ff88 	bl	8001320 <Calc_config_crc>
    if(config.checksum != oldcrc)
 8001410:	f8b6 30f1 	ldrh.w	r3, [r6, #241]	@ 0xf1
 8001414:	42a3      	cmp	r3, r4
 8001416:	d101      	bne.n	800141c <Save_config+0x18>
    uint8_t err = 0;
 8001418:	2000      	movs	r0, #0
        err  = FLASH_write_block(0, p, sizeof(config));     // zapisz do 1 kopii
        err |= FLASH_write_block(1, p, sizeof(config));     // zapisz do 2 kopii
        err++;
    }
    return err;         // 0=NotNeed, 1=OK, 2=blad
}
 800141a:	bd70      	pop	{r4, r5, r6, pc}
 800141c:	2504      	movs	r5, #4
        err =  Flash_write_block(adr, buff, len);
 800141e:	22f3      	movs	r2, #243	@ 0xf3
 8001420:	4631      	mov	r1, r6
 8001422:	207e      	movs	r0, #126	@ 0x7e
 8001424:	f7ff ff9c 	bl	8001360 <Flash_write_block>
        if(err == 0) break;
 8001428:	4604      	mov	r4, r0
 800142a:	b108      	cbz	r0, 8001430 <Save_config+0x2c>
    for(int i=0; i<4; ++i)
 800142c:	3d01      	subs	r5, #1
 800142e:	d1f6      	bne.n	800141e <Save_config+0x1a>
        err =  Flash_write_block(adr, buff, len);
 8001430:	4e07      	ldr	r6, [pc, #28]	@ (8001450 <Save_config+0x4c>)
 8001432:	2504      	movs	r5, #4
 8001434:	22f3      	movs	r2, #243	@ 0xf3
 8001436:	4631      	mov	r1, r6
 8001438:	207f      	movs	r0, #127	@ 0x7f
 800143a:	f7ff ff91 	bl	8001360 <Flash_write_block>
        if(err == 0) break;
 800143e:	b118      	cbz	r0, 8001448 <Save_config+0x44>
    for(int i=0; i<4; ++i)
 8001440:	3d01      	subs	r5, #1
 8001442:	d1f7      	bne.n	8001434 <Save_config+0x30>
        err |= FLASH_write_block(1, p, sizeof(config));     // zapisz do 2 kopii
 8001444:	4320      	orrs	r0, r4
 8001446:	b2c4      	uxtb	r4, r0
        err++;
 8001448:	1c60      	adds	r0, r4, #1
 800144a:	b2c0      	uxtb	r0, r0
}
 800144c:	bd70      	pop	{r4, r5, r6, pc}
 800144e:	bf00      	nop
 8001450:	200019c0 	.word	0x200019c0

08001454 <Load_defaults>:
    }
    return 0;                                                   // config OK
}

void Load_defaults()
{
 8001454:	b510      	push	{r4, lr}
	memset((uint8_t*)&config, 0, sizeof(config));
 8001456:	4c14      	ldr	r4, [pc, #80]	@ (80014a8 <Load_defaults+0x54>)
 8001458:	22ec      	movs	r2, #236	@ 0xec
 800145a:	2100      	movs	r1, #0
 800145c:	4620      	mov	r0, r4
 800145e:	f00f fb19 	bl	8010a94 <memset>

	config.version = CONFIG_VERSION;
 8001462:	1fe3      	subs	r3, r4, #7
	config.bat_scale = 0.0505f;
 8001464:	4a11      	ldr	r2, [pc, #68]	@ (80014ac <Load_defaults+0x58>)
 8001466:	f844 2c06 	str.w	r2, [r4, #-6]
	config.version = CONFIG_VERSION;
 800146a:	2102      	movs	r1, #2
 800146c:	f804 1c07 	strb.w	r1, [r4, #-7]
	config.batt_alarm = BATT_ALARM_VOLTAGE;  // definicja w main.h
 8001470:	220c      	movs	r2, #12
 8001472:	f06f 011b 	mvn.w	r1, #27
 8001476:	2000      	movs	r0, #0
 8001478:	7159      	strb	r1, [r3, #5]
 800147a:	719a      	strb	r2, [r3, #6]
	config.MS8607_h_use = 1;
	config.MS8607_p_use = 1;
	config.MS8607_t_offset = 0.0f;
	config.MS8607_h_offset = 0.0f;
	config.MS8607_p_offset = 0.0f;
	config.BME280_use = 1;
 800147c:	21f5      	movs	r1, #245	@ 0xf5
	config.MS8607_use = 1;
 800147e:	22e7      	movs	r2, #231	@ 0xe7
	config.DPS368_t_use = 1;
	config.DPS368_p_use = 1;
	config.DPS368_t_offset = 0.0f;
	config.DPS368_p_offset = 0.0f;

	config.tim_interval = 15;			// w minutach zaokraglany do 15min przez system
 8001480:	70a0      	strb	r0, [r4, #2]
	config.MS8607_use = 1;
 8001482:	761a      	strb	r2, [r3, #24]
	config.SHT3_use = 1;
 8001484:	2441      	movs	r4, #65	@ 0x41
	config.DPS368_use = 1;
 8001486:	2271      	movs	r2, #113	@ 0x71
	config.BME280_use = 1;
 8001488:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
	config.measures = 20;
 800148c:	2114      	movs	r1, #20
	config.TMP117_use = 1;
 800148e:	2023      	movs	r0, #35	@ 0x23
	config.SHT3_use = 1;
 8001490:	73dc      	strb	r4, [r3, #15]
	config.DPS368_use = 1;
 8001492:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	config.tim_interval = 15;			// w minutach zaokraglany do 15min przez system
 8001496:	240f      	movs	r4, #15
	config.sendFormat = 1;
 8001498:	2201      	movs	r2, #1
	config.measures = 20;
 800149a:	f883 103b 	strb.w	r1, [r3, #59]	@ 0x3b
	config.tim_interval = 15;			// w minutach zaokraglany do 15min przez system
 800149e:	721c      	strb	r4, [r3, #8]
	config.TMP117_use = 1;
 80014a0:	7298      	strb	r0, [r3, #10]
	config.sendFormat = 1;
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80014a6:	bd10      	pop	{r4, pc}
 80014a8:	200019c7 	.word	0x200019c7
 80014ac:	3d4ed917 	.word	0x3d4ed917

080014b0 <Load_config>:
{
 80014b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b2:	4d39      	ldr	r5, [pc, #228]	@ (8001598 <Load_config+0xe8>)
 80014b4:	f1c5 6400 	rsb	r4, r5, #134217728	@ 0x8000000
 80014b8:	1c6e      	adds	r6, r5, #1
 80014ba:	f105 0ef3 	add.w	lr, r5, #243	@ 0xf3
 80014be:	462b      	mov	r3, r5
 80014c0:	f504 347c 	add.w	r4, r4, #258048	@ 0x3f000
    for(uint32_t i=0; i<size; ++i) data[i] = *psrc++;
 80014c4:	5d1a      	ldrb	r2, [r3, r4]
 80014c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80014ca:	459e      	cmp	lr, r3
 80014cc:	d1fa      	bne.n	80014c4 <Load_config+0x14>
    uint8_t *p = (uint8_t*)&config;
 80014ce:	4933      	ldr	r1, [pc, #204]	@ (800159c <Load_config+0xec>)
    uint16_t chk = 0xFFFF;
 80014d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014d4:	f101 0cf1 	add.w	ip, r1, #241	@ 0xf1
	uint8_t x = crc >> 8 ^ data;
 80014d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014dc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 80014e0:	ea83 1313 	eor.w	r3, r3, r3, lsr #4
 80014e4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80014e8:	ea82 3203 	eor.w	r2, r2, r3, lsl #12
 80014ec:	ea82 1243 	eor.w	r2, r2, r3, lsl #5
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 80014f0:	4561      	cmp	r1, ip
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 80014f2:	b292      	uxth	r2, r2
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 80014f4:	d1f0      	bne.n	80014d8 <Load_config+0x28>
    if(chk == config.checksum) eepok |= 1;                      // zaznacz ze jest ok
 80014f6:	482a      	ldr	r0, [pc, #168]	@ (80015a0 <Load_config+0xf0>)
 80014f8:	f8b6 70f1 	ldrh.w	r7, [r6, #241]	@ 0xf1
 80014fc:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <Load_config+0xe8>)
 80014fe:	1b80      	subs	r0, r0, r6
    for(uint32_t i=0; i<size; ++i) data[i] = *psrc++;
 8001500:	5cc1      	ldrb	r1, [r0, r3]
 8001502:	f803 1f01 	strb.w	r1, [r3, #1]!
 8001506:	459e      	cmp	lr, r3
 8001508:	d1fa      	bne.n	8001500 <Load_config+0x50>
    p = (uint8_t*)&config;
 800150a:	4824      	ldr	r0, [pc, #144]	@ (800159c <Load_config+0xec>)
    chk = 0xFFFF;
 800150c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
	uint8_t x = crc >> 8 ^ data;
 8001510:	f810 1b01 	ldrb.w	r1, [r0], #1
 8001514:	ea81 2113 	eor.w	r1, r1, r3, lsr #8
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 8001518:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800151c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001520:	ea83 3301 	eor.w	r3, r3, r1, lsl #12
 8001524:	ea83 1341 	eor.w	r3, r3, r1, lsl #5
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 8001528:	4560      	cmp	r0, ip
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 800152a:	b29b      	uxth	r3, r3
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 800152c:	d1f0      	bne.n	8001510 <Load_config+0x60>
    if(chk == config.checksum) eepok |= 2;                      // zaznacz ze jest ok
 800152e:	f8b6 10f1 	ldrh.w	r1, [r6, #241]	@ 0xf1
 8001532:	4299      	cmp	r1, r3
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 8001534:	f810 3cf1 	ldrb.w	r3, [r0, #-241]
    if(chk == config.checksum) eepok |= 2;                      // zaznacz ze jest ok
 8001538:	d014      	beq.n	8001564 <Load_config+0xb4>
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 800153a:	2b02      	cmp	r3, #2
 800153c:	d114      	bne.n	8001568 <Load_config+0xb8>
    switch(eepok)
 800153e:	4297      	cmp	r7, r2
 8001540:	d112      	bne.n	8001568 <Load_config+0xb8>
    for(uint32_t i=0; i<size; ++i) data[i] = *psrc++;
 8001542:	5d2b      	ldrb	r3, [r5, r4]
 8001544:	f805 3f01 	strb.w	r3, [r5, #1]!
 8001548:	45ae      	cmp	lr, r5
 800154a:	d1fa      	bne.n	8001542 <Load_config+0x92>
        err =  Flash_write_block(adr, buff, len);
 800154c:	4d13      	ldr	r5, [pc, #76]	@ (800159c <Load_config+0xec>)
 800154e:	2404      	movs	r4, #4
 8001550:	22f3      	movs	r2, #243	@ 0xf3
 8001552:	4629      	mov	r1, r5
 8001554:	207f      	movs	r0, #127	@ 0x7f
 8001556:	f7ff ff03 	bl	8001360 <Flash_write_block>
        if(err == 0) break;
 800155a:	b1d0      	cbz	r0, 8001592 <Load_config+0xe2>
    for(int i=0; i<4; ++i)
 800155c:	3c01      	subs	r4, #1
 800155e:	d1f7      	bne.n	8001550 <Load_config+0xa0>
            if(eepok>1) return 3; else return 2;                // 2=zaladowano defaulty, 3=blad zapisu flash
 8001560:	2003      	movs	r0, #3
}
 8001562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 8001564:	2b02      	cmp	r3, #2
 8001566:	d007      	beq.n	8001578 <Load_config+0xc8>
            Load_defaults();
 8001568:	f7ff ff74 	bl	8001454 <Load_defaults>
            eepok = Save_config();
 800156c:	f7ff ff4a 	bl	8001404 <Save_config>
            if(eepok>1) return 3; else return 2;                // 2=zaladowano defaulty, 3=blad zapisu flash
 8001570:	2801      	cmp	r0, #1
 8001572:	d8f5      	bhi.n	8001560 <Load_config+0xb0>
 8001574:	2002      	movs	r0, #2
}
 8001576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(eepok)
 8001578:	4297      	cmp	r7, r2
 800157a:	d00a      	beq.n	8001592 <Load_config+0xe2>
        err =  Flash_write_block(adr, buff, len);
 800157c:	4d07      	ldr	r5, [pc, #28]	@ (800159c <Load_config+0xec>)
    switch(eepok)
 800157e:	2404      	movs	r4, #4
        err =  Flash_write_block(adr, buff, len);
 8001580:	22f3      	movs	r2, #243	@ 0xf3
 8001582:	4629      	mov	r1, r5
 8001584:	207e      	movs	r0, #126	@ 0x7e
 8001586:	f7ff feeb 	bl	8001360 <Flash_write_block>
        if(err == 0) break;
 800158a:	b110      	cbz	r0, 8001592 <Load_config+0xe2>
    for(int i=0; i<4; ++i)
 800158c:	3c01      	subs	r4, #1
 800158e:	d1f7      	bne.n	8001580 <Load_config+0xd0>
 8001590:	e7e6      	b.n	8001560 <Load_config+0xb0>
    return 0;                                                   // config OK
 8001592:	2000      	movs	r0, #0
}
 8001594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001596:	bf00      	nop
 8001598:	200019bf 	.word	0x200019bf
 800159c:	200019c0 	.word	0x200019c0
 80015a0:	0803f801 	.word	0x0803f801

080015a4 <EEPROM_Print_config>:

void EEPROM_Print_config(void)
{
 80015a4:	b570      	push	{r4, r5, r6, lr}
	printf("================================= \r\n");
 80015a6:	4eb2      	ldr	r6, [pc, #712]	@ (8001870 <EEPROM_Print_config+0x2cc>)
	printf("Config version: %i \r\n", config.version);
 80015a8:	4cb2      	ldr	r4, [pc, #712]	@ (8001874 <EEPROM_Print_config+0x2d0>)
	printf("MQTT IP: %s \r\n", config.mqttIP);
	printf("MQTT Port: %i \r\n", config.mqttPort);
	printf("MQTT User: %s \r\n", config.mqttUser);
	printf("MQTT Pass: %s \r\n", config.mqttPass);

	printf("TMP117 sensor use %i %i \r\n", config.TMP117_use, TMP117.sensor_use);
 80015aa:	4db3      	ldr	r5, [pc, #716]	@ (8001878 <EEPROM_Print_config+0x2d4>)
	printf("================================= \r\n");
 80015ac:	4630      	mov	r0, r6
 80015ae:	f00f f911 	bl	80107d4 <puts>
	printf("Config version: %i \r\n", config.version);
 80015b2:	7821      	ldrb	r1, [r4, #0]
 80015b4:	48b1      	ldr	r0, [pc, #708]	@ (800187c <EEPROM_Print_config+0x2d8>)
 80015b6:	f00f f8a5 	bl	8010704 <iprintf>
	printf("Battery scale: %f \r\n", config.bat_scale);
 80015ba:	f8d4 0001 	ldr.w	r0, [r4, #1]
 80015be:	f7ff f803 	bl	80005c8 <__aeabi_f2d>
 80015c2:	460b      	mov	r3, r1
 80015c4:	4602      	mov	r2, r0
 80015c6:	48ae      	ldr	r0, [pc, #696]	@ (8001880 <EEPROM_Print_config+0x2dc>)
 80015c8:	f00f f89c 	bl	8010704 <iprintf>
	printf("Low Batt alarm: %i \r\n", config.batt_alarm);
 80015cc:	f8b4 1005 	ldrh.w	r1, [r4, #5]
 80015d0:	48ac      	ldr	r0, [pc, #688]	@ (8001884 <EEPROM_Print_config+0x2e0>)
 80015d2:	f00f f897 	bl	8010704 <iprintf>
	printf("Meas interval: %i \r\n", config.tim_interval);
 80015d6:	8921      	ldrh	r1, [r4, #8]
 80015d8:	48ab      	ldr	r0, [pc, #684]	@ (8001888 <EEPROM_Print_config+0x2e4>)
 80015da:	f00f f893 	bl	8010704 <iprintf>
	printf("Meas count: %i \r\n", config.measures);
 80015de:	f894 103b 	ldrb.w	r1, [r4, #59]	@ 0x3b
 80015e2:	48aa      	ldr	r0, [pc, #680]	@ (800188c <EEPROM_Print_config+0x2e8>)
 80015e4:	f00f f88e 	bl	8010704 <iprintf>
	printf("Send Format: %i \r\n", config.sendFormat);
 80015e8:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 80015ec:	48a8      	ldr	r0, [pc, #672]	@ (8001890 <EEPROM_Print_config+0x2ec>)
 80015ee:	f001 0103 	and.w	r1, r1, #3
 80015f2:	f00f f887 	bl	8010704 <iprintf>
	printf("Server IP: %s \r\n", config.serverIP);
 80015f6:	f104 014d 	add.w	r1, r4, #77	@ 0x4d
 80015fa:	48a6      	ldr	r0, [pc, #664]	@ (8001894 <EEPROM_Print_config+0x2f0>)
 80015fc:	f00f f882 	bl	8010704 <iprintf>
	printf("Server Port: %i \r\n", config.serverPort);
 8001600:	f8b4 107d 	ldrh.w	r1, [r4, #125]	@ 0x7d
 8001604:	48a4      	ldr	r0, [pc, #656]	@ (8001898 <EEPROM_Print_config+0x2f4>)
 8001606:	f00f f87d 	bl	8010704 <iprintf>
	printf("MQTT IP: %s \r\n", config.mqttIP);
 800160a:	f104 017f 	add.w	r1, r4, #127	@ 0x7f
 800160e:	48a3      	ldr	r0, [pc, #652]	@ (800189c <EEPROM_Print_config+0x2f8>)
 8001610:	f00f f878 	bl	8010704 <iprintf>
	printf("MQTT Port: %i \r\n", config.mqttPort);
 8001614:	f8b4 10af 	ldrh.w	r1, [r4, #175]	@ 0xaf
 8001618:	48a1      	ldr	r0, [pc, #644]	@ (80018a0 <EEPROM_Print_config+0x2fc>)
 800161a:	f00f f873 	bl	8010704 <iprintf>
	printf("MQTT User: %s \r\n", config.mqttUser);
 800161e:	f104 01b1 	add.w	r1, r4, #177	@ 0xb1
 8001622:	48a0      	ldr	r0, [pc, #640]	@ (80018a4 <EEPROM_Print_config+0x300>)
 8001624:	f00f f86e 	bl	8010704 <iprintf>
	printf("MQTT Pass: %s \r\n", config.mqttPass);
 8001628:	f104 01c1 	add.w	r1, r4, #193	@ 0xc1
 800162c:	489e      	ldr	r0, [pc, #632]	@ (80018a8 <EEPROM_Print_config+0x304>)
 800162e:	f00f f869 	bl	8010704 <iprintf>
	printf("TMP117 sensor use %i %i \r\n", config.TMP117_use, TMP117.sensor_use);
 8001632:	782a      	ldrb	r2, [r5, #0]
 8001634:	7aa1      	ldrb	r1, [r4, #10]
 8001636:	489d      	ldr	r0, [pc, #628]	@ (80018ac <EEPROM_Print_config+0x308>)
 8001638:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800163c:	f001 0101 	and.w	r1, r1, #1
 8001640:	f00f f860 	bl	8010704 <iprintf>
	printf("TMP117 config %i %i \r\n", config.TMP117_conf, TMP117.sensor_conf);
 8001644:	782a      	ldrb	r2, [r5, #0]
 8001646:	7aa1      	ldrb	r1, [r4, #10]
 8001648:	4899      	ldr	r0, [pc, #612]	@ (80018b0 <EEPROM_Print_config+0x30c>)
 800164a:	f3c2 0283 	ubfx	r2, r2, #2, #4
 800164e:	f3c1 0143 	ubfx	r1, r1, #1, #4
 8001652:	f00f f857 	bl	8010704 <iprintf>
	printf("TMP117 temp meas %i %i \r\n", config.TMP117_t_use, TMP117.temp.use_meas);
 8001656:	786a      	ldrb	r2, [r5, #1]
 8001658:	7aa1      	ldrb	r1, [r4, #10]
 800165a:	4896      	ldr	r0, [pc, #600]	@ (80018b4 <EEPROM_Print_config+0x310>)
	printf("TMP117 temp offset: %f \r\n", config.TMP117_t_offset);

	printf("SHTC3 sensor use %i %i \r\n", config.SHT3_use, SHT3.sensor_use);
 800165c:	4d96      	ldr	r5, [pc, #600]	@ (80018b8 <EEPROM_Print_config+0x314>)
	printf("TMP117 temp meas %i %i \r\n", config.TMP117_t_use, TMP117.temp.use_meas);
 800165e:	f002 0201 	and.w	r2, r2, #1
 8001662:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001666:	f00f f84d 	bl	8010704 <iprintf>
	printf("TMP117 temp offset: %f \r\n", config.TMP117_t_offset);
 800166a:	f8d4 000b 	ldr.w	r0, [r4, #11]
 800166e:	f7fe ffab 	bl	80005c8 <__aeabi_f2d>
 8001672:	460b      	mov	r3, r1
 8001674:	4602      	mov	r2, r0
 8001676:	4891      	ldr	r0, [pc, #580]	@ (80018bc <EEPROM_Print_config+0x318>)
 8001678:	f00f f844 	bl	8010704 <iprintf>
	printf("SHTC3 sensor use %i %i \r\n", config.SHT3_use, SHT3.sensor_use);
 800167c:	7be1      	ldrb	r1, [r4, #15]
 800167e:	782a      	ldrb	r2, [r5, #0]
 8001680:	488f      	ldr	r0, [pc, #572]	@ (80018c0 <EEPROM_Print_config+0x31c>)
 8001682:	f001 0101 	and.w	r1, r1, #1
 8001686:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800168a:	f00f f83b 	bl	8010704 <iprintf>
	printf("SHTC3 config %i %i \r\n", config.SHT3_conf, SHT3.sensor_conf);
 800168e:	782a      	ldrb	r2, [r5, #0]
 8001690:	7be1      	ldrb	r1, [r4, #15]
 8001692:	488c      	ldr	r0, [pc, #560]	@ (80018c4 <EEPROM_Print_config+0x320>)
 8001694:	f3c2 0283 	ubfx	r2, r2, #2, #4
 8001698:	f3c1 0143 	ubfx	r1, r1, #1, #4
 800169c:	f00f f832 	bl	8010704 <iprintf>
	printf("SHTC3 temp meas %i %i \r\n", config.SHT3_t_use, SHT3.temp.use_meas);
 80016a0:	786a      	ldrb	r2, [r5, #1]
 80016a2:	7be1      	ldrb	r1, [r4, #15]
 80016a4:	4888      	ldr	r0, [pc, #544]	@ (80018c8 <EEPROM_Print_config+0x324>)
 80016a6:	f002 0201 	and.w	r2, r2, #1
 80016aa:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80016ae:	f00f f829 	bl	8010704 <iprintf>
	printf("SHTC3 hum meas %i %i \r\n", config.SHT3_h_use, SHT3.hum.use_meas);
 80016b2:	7aaa      	ldrb	r2, [r5, #10]
 80016b4:	7be1      	ldrb	r1, [r4, #15]
 80016b6:	4885      	ldr	r0, [pc, #532]	@ (80018cc <EEPROM_Print_config+0x328>)
	printf("SHTC3 temp offset: %f \r\n", config.SHT3_t_offset);
	printf("SHTC3 hum offset: %f \r\n", config.SHT3_h_offset);

	printf("MS8607 sensor use %i %i \r\n", config.MS8607_use, MS8607.sensor_use);
 80016b8:	4d85      	ldr	r5, [pc, #532]	@ (80018d0 <EEPROM_Print_config+0x32c>)
	printf("SHTC3 hum meas %i %i \r\n", config.SHT3_h_use, SHT3.hum.use_meas);
 80016ba:	f002 0201 	and.w	r2, r2, #1
 80016be:	f3c1 1180 	ubfx	r1, r1, #6, #1
 80016c2:	f00f f81f 	bl	8010704 <iprintf>
	printf("SHTC3 temp offset: %f \r\n", config.SHT3_t_offset);
 80016c6:	6920      	ldr	r0, [r4, #16]
 80016c8:	f7fe ff7e 	bl	80005c8 <__aeabi_f2d>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4880      	ldr	r0, [pc, #512]	@ (80018d4 <EEPROM_Print_config+0x330>)
 80016d2:	f00f f817 	bl	8010704 <iprintf>
	printf("SHTC3 hum offset: %f \r\n", config.SHT3_h_offset);
 80016d6:	6960      	ldr	r0, [r4, #20]
 80016d8:	f7fe ff76 	bl	80005c8 <__aeabi_f2d>
 80016dc:	460b      	mov	r3, r1
 80016de:	4602      	mov	r2, r0
 80016e0:	487d      	ldr	r0, [pc, #500]	@ (80018d8 <EEPROM_Print_config+0x334>)
 80016e2:	f00f f80f 	bl	8010704 <iprintf>
	printf("MS8607 sensor use %i %i \r\n", config.MS8607_use, MS8607.sensor_use);
 80016e6:	7e21      	ldrb	r1, [r4, #24]
 80016e8:	782a      	ldrb	r2, [r5, #0]
 80016ea:	487c      	ldr	r0, [pc, #496]	@ (80018dc <EEPROM_Print_config+0x338>)
 80016ec:	f001 0101 	and.w	r1, r1, #1
 80016f0:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80016f4:	f00f f806 	bl	8010704 <iprintf>
	printf("MS8607 config %i %i \r\n", config.MS8607_conf, MS8607.sensor_conf);
 80016f8:	782a      	ldrb	r2, [r5, #0]
 80016fa:	7e21      	ldrb	r1, [r4, #24]
 80016fc:	4878      	ldr	r0, [pc, #480]	@ (80018e0 <EEPROM_Print_config+0x33c>)
 80016fe:	f3c2 0283 	ubfx	r2, r2, #2, #4
 8001702:	f3c1 0143 	ubfx	r1, r1, #1, #4
 8001706:	f00e fffd 	bl	8010704 <iprintf>
	printf("MS8607 temp meas %i %i \r\n", config.MS8607_t_use, MS8607.temp.use_meas);
 800170a:	786a      	ldrb	r2, [r5, #1]
 800170c:	7e21      	ldrb	r1, [r4, #24]
 800170e:	4875      	ldr	r0, [pc, #468]	@ (80018e4 <EEPROM_Print_config+0x340>)
 8001710:	f002 0201 	and.w	r2, r2, #1
 8001714:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001718:	f00e fff4 	bl	8010704 <iprintf>
	printf("MS8607 press meas %i %i \r\n", config.MS8607_p_use, MS8607.press.use_meas);
 800171c:	7cea      	ldrb	r2, [r5, #19]
 800171e:	7e21      	ldrb	r1, [r4, #24]
 8001720:	4871      	ldr	r0, [pc, #452]	@ (80018e8 <EEPROM_Print_config+0x344>)
 8001722:	f002 0201 	and.w	r2, r2, #1
 8001726:	09c9      	lsrs	r1, r1, #7
 8001728:	f00e ffec 	bl	8010704 <iprintf>
	printf("MS8607 hum meas %i %i \r\n", config.MS8607_h_use, MS8607.hum.use_meas);
 800172c:	7aaa      	ldrb	r2, [r5, #10]
 800172e:	7e21      	ldrb	r1, [r4, #24]
 8001730:	486e      	ldr	r0, [pc, #440]	@ (80018ec <EEPROM_Print_config+0x348>)

	printf("MS8607 temp offset: %f \r\n", config.MS8607_t_offset);
	printf("MS8607 press ofset: %f \r\n", config.MS8607_p_offset);
	printf("MS8607 hum offset: %f  \r\n", config.MS8607_h_offset);

	printf("BME280 sensor use %i %i \r\n", config.BME280_use, BME280.sensor_use);
 8001732:	4d6f      	ldr	r5, [pc, #444]	@ (80018f0 <EEPROM_Print_config+0x34c>)
	printf("MS8607 hum meas %i %i \r\n", config.MS8607_h_use, MS8607.hum.use_meas);
 8001734:	f002 0201 	and.w	r2, r2, #1
 8001738:	f3c1 1180 	ubfx	r1, r1, #6, #1
 800173c:	f00e ffe2 	bl	8010704 <iprintf>
	printf("MS8607 temp offset: %f \r\n", config.MS8607_t_offset);
 8001740:	f8d4 0019 	ldr.w	r0, [r4, #25]
 8001744:	f7fe ff40 	bl	80005c8 <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4869      	ldr	r0, [pc, #420]	@ (80018f4 <EEPROM_Print_config+0x350>)
 800174e:	f00e ffd9 	bl	8010704 <iprintf>
	printf("MS8607 press ofset: %f \r\n", config.MS8607_p_offset);
 8001752:	f8d4 0021 	ldr.w	r0, [r4, #33]	@ 0x21
 8001756:	f7fe ff37 	bl	80005c8 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4866      	ldr	r0, [pc, #408]	@ (80018f8 <EEPROM_Print_config+0x354>)
 8001760:	f00e ffd0 	bl	8010704 <iprintf>
	printf("MS8607 hum offset: %f  \r\n", config.MS8607_h_offset);
 8001764:	f8d4 001d 	ldr.w	r0, [r4, #29]
 8001768:	f7fe ff2e 	bl	80005c8 <__aeabi_f2d>
 800176c:	460b      	mov	r3, r1
 800176e:	4602      	mov	r2, r0
 8001770:	4862      	ldr	r0, [pc, #392]	@ (80018fc <EEPROM_Print_config+0x358>)
 8001772:	f00e ffc7 	bl	8010704 <iprintf>
	printf("BME280 sensor use %i %i \r\n", config.BME280_use, BME280.sensor_use);
 8001776:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 800177a:	782a      	ldrb	r2, [r5, #0]
 800177c:	4860      	ldr	r0, [pc, #384]	@ (8001900 <EEPROM_Print_config+0x35c>)
 800177e:	f001 0101 	and.w	r1, r1, #1
 8001782:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001786:	f00e ffbd 	bl	8010704 <iprintf>
	printf("BME280 temp meas %i %i \r\n", config.BME280_t_use, BME280.temp.use_meas);
 800178a:	786a      	ldrb	r2, [r5, #1]
 800178c:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 8001790:	485c      	ldr	r0, [pc, #368]	@ (8001904 <EEPROM_Print_config+0x360>)
 8001792:	f002 0201 	and.w	r2, r2, #1
 8001796:	f3c1 1140 	ubfx	r1, r1, #5, #1
 800179a:	f00e ffb3 	bl	8010704 <iprintf>
	printf("BME280 press meas %i %i \r\n", config.BME280_p_use, BME280.press.use_meas);
 800179e:	7cea      	ldrb	r2, [r5, #19]
 80017a0:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 80017a4:	4858      	ldr	r0, [pc, #352]	@ (8001908 <EEPROM_Print_config+0x364>)
 80017a6:	f002 0201 	and.w	r2, r2, #1
 80017aa:	09c9      	lsrs	r1, r1, #7
 80017ac:	f00e ffaa 	bl	8010704 <iprintf>
	printf("BME280 hum meas %i %i \r\n", config.BME280_h_use, BME280.hum.use_meas);
 80017b0:	7aaa      	ldrb	r2, [r5, #10]
 80017b2:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 80017b6:	4855      	ldr	r0, [pc, #340]	@ (800190c <EEPROM_Print_config+0x368>)

	printf("BME280 temp offset: %f \r\n", config.BME280_t_offset);
	printf("BME280 press ofset: %f \r\n", config.BME280_p_offset);
	printf("BME280 hum offset: %f  \r\n", config.BME280_h_offset);

	printf("DPS368 sensor use %i %i \r\n", config.DPS368_use, DPS368.sensor_use);
 80017b8:	4d55      	ldr	r5, [pc, #340]	@ (8001910 <EEPROM_Print_config+0x36c>)
	printf("BME280 hum meas %i %i \r\n", config.BME280_h_use, BME280.hum.use_meas);
 80017ba:	f002 0201 	and.w	r2, r2, #1
 80017be:	f3c1 1180 	ubfx	r1, r1, #6, #1
 80017c2:	f00e ff9f 	bl	8010704 <iprintf>
	printf("BME280 temp offset: %f \r\n", config.BME280_t_offset);
 80017c6:	f8d4 0026 	ldr.w	r0, [r4, #38]	@ 0x26
 80017ca:	f7fe fefd 	bl	80005c8 <__aeabi_f2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4850      	ldr	r0, [pc, #320]	@ (8001914 <EEPROM_Print_config+0x370>)
 80017d4:	f00e ff96 	bl	8010704 <iprintf>
	printf("BME280 press ofset: %f \r\n", config.BME280_p_offset);
 80017d8:	f8d4 002e 	ldr.w	r0, [r4, #46]	@ 0x2e
 80017dc:	f7fe fef4 	bl	80005c8 <__aeabi_f2d>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	484c      	ldr	r0, [pc, #304]	@ (8001918 <EEPROM_Print_config+0x374>)
 80017e6:	f00e ff8d 	bl	8010704 <iprintf>
	printf("BME280 hum offset: %f  \r\n", config.BME280_h_offset);
 80017ea:	f8d4 002a 	ldr.w	r0, [r4, #42]	@ 0x2a
 80017ee:	f7fe feeb 	bl	80005c8 <__aeabi_f2d>
 80017f2:	460b      	mov	r3, r1
 80017f4:	4602      	mov	r2, r0
 80017f6:	4849      	ldr	r0, [pc, #292]	@ (800191c <EEPROM_Print_config+0x378>)
 80017f8:	f00e ff84 	bl	8010704 <iprintf>
	printf("DPS368 sensor use %i %i \r\n", config.DPS368_use, DPS368.sensor_use);
 80017fc:	f894 1032 	ldrb.w	r1, [r4, #50]	@ 0x32
 8001800:	782a      	ldrb	r2, [r5, #0]
 8001802:	4847      	ldr	r0, [pc, #284]	@ (8001920 <EEPROM_Print_config+0x37c>)
 8001804:	f001 0101 	and.w	r1, r1, #1
 8001808:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800180c:	f00e ff7a 	bl	8010704 <iprintf>
	printf("DPS368 temp meas %i %i \r\n", config.DPS368_t_use, DPS368.temp.use_meas);
 8001810:	786a      	ldrb	r2, [r5, #1]
 8001812:	f894 1032 	ldrb.w	r1, [r4, #50]	@ 0x32
 8001816:	4843      	ldr	r0, [pc, #268]	@ (8001924 <EEPROM_Print_config+0x380>)
 8001818:	f002 0201 	and.w	r2, r2, #1
 800181c:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001820:	f00e ff70 	bl	8010704 <iprintf>
	printf("DPS368 press meas %i %i \r\n", config.DPS368_p_use, DPS368.press.use_meas);
 8001824:	7aaa      	ldrb	r2, [r5, #10]
 8001826:	f894 1032 	ldrb.w	r1, [r4, #50]	@ 0x32
 800182a:	483f      	ldr	r0, [pc, #252]	@ (8001928 <EEPROM_Print_config+0x384>)
 800182c:	f002 0201 	and.w	r2, r2, #1
 8001830:	f3c1 1180 	ubfx	r1, r1, #6, #1
 8001834:	f00e ff66 	bl	8010704 <iprintf>
	printf("DPS368 temp offset: %f \r\n", config.DPS368_t_offset);
 8001838:	f8d4 0033 	ldr.w	r0, [r4, #51]	@ 0x33
 800183c:	f7fe fec4 	bl	80005c8 <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4839      	ldr	r0, [pc, #228]	@ (800192c <EEPROM_Print_config+0x388>)
 8001846:	f00e ff5d 	bl	8010704 <iprintf>
	printf("DPS368 press offset: %f \r\n", config.DPS368_p_offset);
 800184a:	f8d4 0037 	ldr.w	r0, [r4, #55]	@ 0x37
 800184e:	f7fe febb 	bl	80005c8 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4836      	ldr	r0, [pc, #216]	@ (8001930 <EEPROM_Print_config+0x38c>)
 8001858:	f00e ff54 	bl	8010704 <iprintf>

	printf("CHECKSUM: 0x%4X \r\n", config.checksum);
 800185c:	f8b4 10f1 	ldrh.w	r1, [r4, #241]	@ 0xf1
 8001860:	4834      	ldr	r0, [pc, #208]	@ (8001934 <EEPROM_Print_config+0x390>)
 8001862:	f00e ff4f 	bl	8010704 <iprintf>
	printf("================================= \r\n");
 8001866:	4630      	mov	r0, r6

}
 8001868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("================================= \r\n");
 800186c:	f00e bfb2 	b.w	80107d4 <puts>
 8001870:	08013c98 	.word	0x08013c98
 8001874:	200019c0 	.word	0x200019c0
 8001878:	20001b60 	.word	0x20001b60
 800187c:	08013cbc 	.word	0x08013cbc
 8001880:	08013cd4 	.word	0x08013cd4
 8001884:	08013cec 	.word	0x08013cec
 8001888:	08013d04 	.word	0x08013d04
 800188c:	08013d1c 	.word	0x08013d1c
 8001890:	08013d30 	.word	0x08013d30
 8001894:	08013d44 	.word	0x08013d44
 8001898:	08013d58 	.word	0x08013d58
 800189c:	08013d6c 	.word	0x08013d6c
 80018a0:	08013d7c 	.word	0x08013d7c
 80018a4:	08013d90 	.word	0x08013d90
 80018a8:	08013da4 	.word	0x08013da4
 80018ac:	08013db8 	.word	0x08013db8
 80018b0:	08013dd4 	.word	0x08013dd4
 80018b4:	08013dec 	.word	0x08013dec
 80018b8:	20001b48 	.word	0x20001b48
 80018bc:	08013e08 	.word	0x08013e08
 80018c0:	08013e24 	.word	0x08013e24
 80018c4:	08013e40 	.word	0x08013e40
 80018c8:	08013e58 	.word	0x08013e58
 80018cc:	08013e74 	.word	0x08013e74
 80018d0:	20001b24 	.word	0x20001b24
 80018d4:	08013e8c 	.word	0x08013e8c
 80018d8:	08013ea8 	.word	0x08013ea8
 80018dc:	08013ec0 	.word	0x08013ec0
 80018e0:	08013edc 	.word	0x08013edc
 80018e4:	08013ef4 	.word	0x08013ef4
 80018e8:	08013f10 	.word	0x08013f10
 80018ec:	08013f2c 	.word	0x08013f2c
 80018f0:	20001b00 	.word	0x20001b00
 80018f4:	08013f48 	.word	0x08013f48
 80018f8:	08013f64 	.word	0x08013f64
 80018fc:	08013f80 	.word	0x08013f80
 8001900:	08013f9c 	.word	0x08013f9c
 8001904:	08013fb8 	.word	0x08013fb8
 8001908:	08013fd4 	.word	0x08013fd4
 800190c:	08013ff0 	.word	0x08013ff0
 8001910:	20001ae8 	.word	0x20001ae8
 8001914:	0801400c 	.word	0x0801400c
 8001918:	08014028 	.word	0x08014028
 800191c:	08014044 	.word	0x08014044
 8001920:	08014060 	.word	0x08014060
 8001924:	0801407c 	.word	0x0801407c
 8001928:	08014098 	.word	0x08014098
 800192c:	080140b4 	.word	0x080140b4
 8001930:	080140d0 	.word	0x080140d0
 8001934:	080140ec 	.word	0x080140ec

08001938 <GPRS_SetAPN>:
    return false;
  }
}
//####################################################################################################
bool  GPRS_SetAPN(char *Name,char *username,char *password)
{
 8001938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193a:	b093      	sub	sp, #76	@ 0x4c
  char str[64];
  uint8_t answer;
  sprintf(str,"AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n",Name,username,password);
 800193c:	460b      	mov	r3, r1
 800193e:	9200      	str	r2, [sp, #0]
{
 8001940:	4607      	mov	r7, r0
 8001942:	460e      	mov	r6, r1
 8001944:	4615      	mov	r5, r2
  sprintf(str,"AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n",Name,username,password);
 8001946:	4911      	ldr	r1, [pc, #68]	@ (800198c <GPRS_SetAPN+0x54>)
 8001948:	4602      	mov	r2, r0
 800194a:	a802      	add	r0, sp, #8
 800194c:	f00e ff7e 	bl	801084c <siprintf>
  answer = Sim80x_SendAtCommand(str,1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001950:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <GPRS_SetAPN+0x58>)
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	a802      	add	r0, sp, #8
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <GPRS_SetAPN+0x5c>)
 8001958:	2202      	movs	r2, #2
 800195a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800195e:	f000 fca1 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001962:	2801      	cmp	r0, #1
 8001964:	d002      	beq.n	800196c <GPRS_SetAPN+0x34>
  else
  {
    #if (_SIM80X_DEBUG==1)
    printf("\r\nGPRS_SetAPN(\"%s\",\"%s\",\"%s\") ---> ERROR\r\n",Name,username,password);
    #endif    
    return false;  
 8001966:	2000      	movs	r0, #0
  }  
}
 8001968:	b013      	add	sp, #76	@ 0x4c
 800196a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800196c:	4604      	mov	r4, r0
    strcpy(Sim80x.GPRS.APN,Name);
 800196e:	4639      	mov	r1, r7
 8001970:	4809      	ldr	r0, [pc, #36]	@ (8001998 <GPRS_SetAPN+0x60>)
 8001972:	f00f f9b9 	bl	8010ce8 <strcpy>
    strcpy(Sim80x.GPRS.APN_UserName,username);
 8001976:	4631      	mov	r1, r6
 8001978:	4808      	ldr	r0, [pc, #32]	@ (800199c <GPRS_SetAPN+0x64>)
 800197a:	f00f f9b5 	bl	8010ce8 <strcpy>
    strcpy(Sim80x.GPRS.APN_Password,password);
 800197e:	4629      	mov	r1, r5
 8001980:	4807      	ldr	r0, [pc, #28]	@ (80019a0 <GPRS_SetAPN+0x68>)
 8001982:	f00f f9b1 	bl	8010ce8 <strcpy>
 8001986:	4620      	mov	r0, r4
}
 8001988:	b013      	add	sp, #76	@ 0x4c
 800198a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198c:	08014118 	.word	0x08014118
 8001990:	0801410c 	.word	0x0801410c
 8001994:	08014908 	.word	0x08014908
 8001998:	20000a17 	.word	0x20000a17
 800199c:	20000a28 	.word	0x20000a28
 80019a0:	20000a39 	.word	0x20000a39

080019a4 <GPRS_DeactivatePDPContext>:
//####################################################################################################
bool  GPRS_DeactivatePDPContext(void)
{
 80019a4:	b500      	push	{lr}
 80019a6:	b083      	sub	sp, #12
  uint8_t answer;
  answer = Sim80x_SendAtCommand("AT+CIPSHUT\r\n",10000,2,"\r\nSHUT OK\r\n","\r\nERROR\r\n");
 80019a8:	4a08      	ldr	r2, [pc, #32]	@ (80019cc <GPRS_DeactivatePDPContext+0x28>)
 80019aa:	9200      	str	r2, [sp, #0]
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <GPRS_DeactivatePDPContext+0x2c>)
 80019ae:	4809      	ldr	r0, [pc, #36]	@ (80019d4 <GPRS_DeactivatePDPContext+0x30>)
 80019b0:	2202      	movs	r2, #2
 80019b2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80019b6:	f000 fc75 	bl	80022a4 <Sim80x_SendAtCommand>
    #if (_SIM80X_DEBUG==1)
    printf("\r\nGPRS_DeactivatePDPContext() ---> ERROR\r\n");
    #endif    
    return false;  
  }
}
 80019ba:	f1a0 0001 	sub.w	r0, r0, #1
 80019be:	fab0 f080 	clz	r0, r0
 80019c2:	0940      	lsrs	r0, r0, #5
 80019c4:	b003      	add	sp, #12
 80019c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80019ca:	bf00      	nop
 80019cc:	0801410c 	.word	0x0801410c
 80019d0:	08014134 	.word	0x08014134
 80019d4:	08014140 	.word	0x08014140

080019d8 <GPRS_SetMultiConnection>:
  #endif  
  return Sim80x.GPRS.MultiConnection;
}
//####################################################################################################
bool  GPRS_SetMultiConnection(bool Enable)
{
 80019d8:	b510      	push	{r4, lr}
 80019da:	b082      	sub	sp, #8
  uint8_t answer;
  if(Enable==true)
    answer = Sim80x_SendAtCommand(" AT+CIPMUX=1\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");  
 80019dc:	4a0f      	ldr	r2, [pc, #60]	@ (8001a1c <GPRS_SetMultiConnection+0x44>)
 80019de:	9200      	str	r2, [sp, #0]
 80019e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <GPRS_SetMultiConnection+0x48>)
  if(Enable==true)
 80019e2:	4604      	mov	r4, r0
    answer = Sim80x_SendAtCommand(" AT+CIPMUX=1\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");  
 80019e4:	2202      	movs	r2, #2
  if(Enable==true)
 80019e6:	b148      	cbz	r0, 80019fc <GPRS_SetMultiConnection+0x24>
    answer = Sim80x_SendAtCommand(" AT+CIPMUX=1\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");  
 80019e8:	480e      	ldr	r0, [pc, #56]	@ (8001a24 <GPRS_SetMultiConnection+0x4c>)
 80019ea:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019ee:	f000 fc59 	bl	80022a4 <Sim80x_SendAtCommand>
  else
    answer = Sim80x_SendAtCommand(" AT+CIPMUX=0\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");  
  if(answer == 1)
 80019f2:	2801      	cmp	r0, #1
 80019f4:	d009      	beq.n	8001a0a <GPRS_SetMultiConnection+0x32>
  else
  {
    #if (_SIM80X_DEBUG==1)
    printf("\r\nGPRS_SetMultiConnection(%d) ---> ERROR\r\n",Enable);
    #endif  
    return false;
 80019f6:	2000      	movs	r0, #0
  }
}
 80019f8:	b002      	add	sp, #8
 80019fa:	bd10      	pop	{r4, pc}
    answer = Sim80x_SendAtCommand(" AT+CIPMUX=0\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");  
 80019fc:	480a      	ldr	r0, [pc, #40]	@ (8001a28 <GPRS_SetMultiConnection+0x50>)
 80019fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a02:	f000 fc4f 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001a06:	2801      	cmp	r0, #1
 8001a08:	d1f5      	bne.n	80019f6 <GPRS_SetMultiConnection+0x1e>
    Sim80x.GPRS.MultiConnection=Enable;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <GPRS_SetMultiConnection+0x54>)
 8001a0c:	f893 27e6 	ldrb.w	r2, [r3, #2022]	@ 0x7e6
 8001a10:	f364 0200 	bfi	r2, r4, #0, #1
 8001a14:	f883 27e6 	strb.w	r2, [r3, #2022]	@ 0x7e6
}
 8001a18:	b002      	add	sp, #8
 8001a1a:	bd10      	pop	{r4, pc}
 8001a1c:	0801410c 	.word	0x0801410c
 8001a20:	08014908 	.word	0x08014908
 8001a24:	0801416c 	.word	0x0801416c
 8001a28:	0801417c 	.word	0x0801417c
 8001a2c:	20000230 	.word	0x20000230

08001a30 <GPRS_ConnectToNetwork>:
//####################################################################################################
//####################################################################################################
//####################################################################################################
bool  GPRS_ConnectToNetwork(char *Name,char *username,char *password,bool EnableMultiConnection)
{
 8001a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a34:	b082      	sub	sp, #8
  answer = Sim80x_SendAtCommand("AT+CIPSHUT\r\n",10000,2,"\r\nSHUT OK\r\n","\r\nERROR\r\n");
 8001a36:	4f1e      	ldr	r7, [pc, #120]	@ (8001ab0 <GPRS_ConnectToNetwork+0x80>)
 8001a38:	9700      	str	r7, [sp, #0]
{
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	460d      	mov	r5, r1
  answer = Sim80x_SendAtCommand("AT+CIPSHUT\r\n",10000,2,"\r\nSHUT OK\r\n","\r\nERROR\r\n");
 8001a3e:	481d      	ldr	r0, [pc, #116]	@ (8001ab4 <GPRS_ConnectToNetwork+0x84>)
{
 8001a40:	4616      	mov	r6, r2
 8001a42:	4698      	mov	r8, r3
  answer = Sim80x_SendAtCommand("AT+CIPSHUT\r\n",10000,2,"\r\nSHUT OK\r\n","\r\nERROR\r\n");
 8001a44:	2202      	movs	r2, #2
 8001a46:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <GPRS_ConnectToNetwork+0x88>)
 8001a48:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001a4c:	f000 fc2a 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001a50:	2801      	cmp	r0, #1
 8001a52:	d004      	beq.n	8001a5e <GPRS_ConnectToNetwork+0x2e>
  if(GPRS_DeactivatePDPContext()==false)
  {
    #if (_SIM80X_DEBUG==1)
    printf("\r\nGPRS_ConnectToNetwork() ---> ERROR\r\n");
    #endif 
    return false;
 8001a54:	2400      	movs	r4, #0
  printf("\r\nGPRS_ConnectToNetwork() ---> OK\r\n");
  #endif

  Sim80x_SendAtCommand("AT+CIPHEAD=1\r\n", 500, 1, "\r\nOK\r\n");
  return true;
}
 8001a56:	4620      	mov	r0, r4
 8001a58:	b002      	add	sp, #8
 8001a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  GPRS_SetMultiConnection(EnableMultiConnection);
 8001a5e:	4640      	mov	r0, r8
 8001a60:	f7ff ffba 	bl	80019d8 <GPRS_SetMultiConnection>
  if(GPRS_SetAPN(Name,username,password)==false)
 8001a64:	4620      	mov	r0, r4
 8001a66:	4632      	mov	r2, r6
 8001a68:	4629      	mov	r1, r5
 8001a6a:	f7ff ff65 	bl	8001938 <GPRS_SetAPN>
 8001a6e:	4604      	mov	r4, r0
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d0ef      	beq.n	8001a54 <GPRS_ConnectToNetwork+0x24>
  answer = Sim80x_SendAtCommand("AT+CIICR\r\n",85000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <GPRS_ConnectToNetwork+0x8c>)
 8001a76:	4912      	ldr	r1, [pc, #72]	@ (8001ac0 <GPRS_ConnectToNetwork+0x90>)
 8001a78:	4812      	ldr	r0, [pc, #72]	@ (8001ac4 <GPRS_ConnectToNetwork+0x94>)
 8001a7a:	9700      	str	r7, [sp, #0]
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	f000 fc11 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001a82:	2801      	cmp	r0, #1
  answer = Sim80x_SendAtCommand("AT+CIICR\r\n",85000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001a84:	4605      	mov	r5, r0
  if(answer == 1)
 8001a86:	d1e5      	bne.n	8001a54 <GPRS_ConnectToNetwork+0x24>
  answer = Sim80x_SendAtCommand("AT+CIFSR\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <GPRS_ConnectToNetwork+0x8c>)
 8001a8a:	9700      	str	r7, [sp, #0]
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a92:	480d      	ldr	r0, [pc, #52]	@ (8001ac8 <GPRS_ConnectToNetwork+0x98>)
 8001a94:	f000 fc06 	bl	80022a4 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+CIPHEAD=1\r\n", 500, 1, "\r\nOK\r\n");
 8001a98:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <GPRS_ConnectToNetwork+0x8c>)
 8001a9a:	480c      	ldr	r0, [pc, #48]	@ (8001acc <GPRS_ConnectToNetwork+0x9c>)
 8001a9c:	462a      	mov	r2, r5
 8001a9e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001aa2:	f000 fbff 	bl	80022a4 <Sim80x_SendAtCommand>
}
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	b002      	add	sp, #8
 8001aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aae:	bf00      	nop
 8001ab0:	0801410c 	.word	0x0801410c
 8001ab4:	08014140 	.word	0x08014140
 8001ab8:	08014134 	.word	0x08014134
 8001abc:	08014908 	.word	0x08014908
 8001ac0:	00014c08 	.word	0x00014c08
 8001ac4:	08014100 	.word	0x08014100
 8001ac8:	08014150 	.word	0x08014150
 8001acc:	0801418c 	.word	0x0801418c

08001ad0 <GPRS_ConnectToServer>:
//####################################################################################################
bool GPRS_ConnectToServer(char *ip, uint16_t port)
{
 8001ad0:	b510      	push	{r4, lr}
 8001ad2:	b092      	sub	sp, #72	@ 0x48
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	4603      	mov	r3, r0
	uint8_t answer;
	char buf[64];
	snprintf(buf, sizeof(buf), "AT+CIPSTART=\"TCP\",\"%s\",\"%u\"\r\n", ip, port);
 8001ad8:	4a14      	ldr	r2, [pc, #80]	@ (8001b2c <GPRS_ConnectToServer+0x5c>)
 8001ada:	9400      	str	r4, [sp, #0]
 8001adc:	2140      	movs	r1, #64	@ 0x40
	answer = Sim80x_SendAtCommand(buf, 10000, 2, "\r\nOK\r\n","\r\nERROR\r\n");
 8001ade:	4c14      	ldr	r4, [pc, #80]	@ (8001b30 <GPRS_ConnectToServer+0x60>)
	snprintf(buf, sizeof(buf), "AT+CIPSTART=\"TCP\",\"%s\",\"%u\"\r\n", ip, port);
 8001ae0:	a802      	add	r0, sp, #8
 8001ae2:	f00e fe7f 	bl	80107e4 <sniprintf>
	answer = Sim80x_SendAtCommand(buf, 10000, 2, "\r\nOK\r\n","\r\nERROR\r\n");
 8001ae6:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <GPRS_ConnectToServer+0x64>)
 8001ae8:	9400      	str	r4, [sp, #0]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001af0:	a802      	add	r0, sp, #8
 8001af2:	f000 fbd7 	bl	80022a4 <Sim80x_SendAtCommand>
	if(answer == 1)
 8001af6:	2801      	cmp	r0, #1
 8001af8:	d014      	beq.n	8001b24 <GPRS_ConnectToServer+0x54>
  Sim80x_SendAtCommand(" AT+CIPSTATUS\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");  
 8001afa:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <GPRS_ConnectToServer+0x64>)
 8001afc:	480e      	ldr	r0, [pc, #56]	@ (8001b38 <GPRS_ConnectToServer+0x68>)
 8001afe:	9400      	str	r4, [sp, #0]
 8001b00:	2202      	movs	r2, #2
 8001b02:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b06:	f000 fbcd 	bl	80022a4 <Sim80x_SendAtCommand>
		return true;
	}
	else
	{
		GPRS_GetCurrentConnectionStatus();
		if(Sim80x.GPRS.Connection == GPRSConnection_AlreadyConnect)
 8001b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b3c <GPRS_ConnectToServer+0x6c>)
 8001b0c:	f892 382b 	ldrb.w	r3, [r2, #2091]	@ 0x82b
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d007      	beq.n	8001b24 <GPRS_ConnectToServer+0x54>
		{
			return true;
		}
	}
	if(Sim80x.GPRS.Connection) Sim80x.GPRS.Connection = GPRSConnection_GPRSup;
 8001b14:	b913      	cbnz	r3, 8001b1c <GPRS_ConnectToServer+0x4c>
	return false;
 8001b16:	2000      	movs	r0, #0
}
 8001b18:	b012      	add	sp, #72	@ 0x48
 8001b1a:	bd10      	pop	{r4, pc}
	if(Sim80x.GPRS.Connection) Sim80x.GPRS.Connection = GPRSConnection_GPRSup;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f882 382b 	strb.w	r3, [r2, #2091]	@ 0x82b
 8001b22:	e7f8      	b.n	8001b16 <GPRS_ConnectToServer+0x46>
		return true;
 8001b24:	2001      	movs	r0, #1
}
 8001b26:	b012      	add	sp, #72	@ 0x48
 8001b28:	bd10      	pop	{r4, pc}
 8001b2a:	bf00      	nop
 8001b2c:	0801419c 	.word	0x0801419c
 8001b30:	0801410c 	.word	0x0801410c
 8001b34:	08014908 	.word	0x08014908
 8001b38:	0801415c 	.word	0x0801415c
 8001b3c:	20000230 	.word	0x20000230

08001b40 <GPRS_DisconnectFromServer>:
//#################################################################################################################
bool GPRS_DisconnectFromServer()
{
 8001b40:	b508      	push	{r3, lr}
	uint8_t answer;
	answer = Sim80x_SendAtCommand("AT+CIPCLOSE=0\r\n", 5000, 1, "\r\nOK\r\n");
 8001b42:	4809      	ldr	r0, [pc, #36]	@ (8001b68 <GPRS_DisconnectFromServer+0x28>)
 8001b44:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <GPRS_DisconnectFromServer+0x2c>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001b4c:	f000 fbaa 	bl	80022a4 <Sim80x_SendAtCommand>
	if(answer == 1)
 8001b50:	2801      	cmp	r0, #1
 8001b52:	d001      	beq.n	8001b58 <GPRS_DisconnectFromServer+0x18>
	{
		if(Sim80x.GPRS.Connection) Sim80x.GPRS.Connection = GPRSConnection_GPRSup;
		return true;
	}
	return false;
 8001b54:	2000      	movs	r0, #0
}
 8001b56:	bd08      	pop	{r3, pc}
		if(Sim80x.GPRS.Connection) Sim80x.GPRS.Connection = GPRSConnection_GPRSup;
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <GPRS_DisconnectFromServer+0x30>)
 8001b5a:	f893 282b 	ldrb.w	r2, [r3, #2091]	@ 0x82b
 8001b5e:	b10a      	cbz	r2, 8001b64 <GPRS_DisconnectFromServer+0x24>
 8001b60:	f883 082b 	strb.w	r0, [r3, #2091]	@ 0x82b
		return true;
 8001b64:	2001      	movs	r0, #1
}
 8001b66:	bd08      	pop	{r3, pc}
 8001b68:	080141bc 	.word	0x080141bc
 8001b6c:	08014908 	.word	0x08014908
 8001b70:	20000230 	.word	0x20000230

08001b74 <GPRS_SendString>:
//#################################################################################################################
bool  GPRS_SendString(char *DataString)
{
 8001b74:	b570      	push	{r4, r5, r6, lr}
  uint8_t answer;
  char str[4];
  Sim80x.GPRS.SendStatus = GPRSSendData_SendInProgress;
 8001b76:	4d15      	ldr	r5, [pc, #84]	@ (8001bcc <GPRS_SendString+0x58>)
  answer = Sim80x_SendAtCommand("AT+CIPSEND\r\n",1500,2,"\r\r\n> ","\r\nERROR\r\n");
 8001b78:	4e15      	ldr	r6, [pc, #84]	@ (8001bd0 <GPRS_SendString+0x5c>)
 8001b7a:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <GPRS_SendString+0x60>)
{
 8001b7c:	b084      	sub	sp, #16
  Sim80x.GPRS.SendStatus = GPRSSendData_SendInProgress;
 8001b7e:	2201      	movs	r2, #1
  answer = Sim80x_SendAtCommand("AT+CIPSEND\r\n",1500,2,"\r\r\n> ","\r\nERROR\r\n");
 8001b80:	9600      	str	r6, [sp, #0]
{
 8001b82:	4604      	mov	r4, r0
  Sim80x.GPRS.SendStatus = GPRSSendData_SendInProgress;
 8001b84:	f885 282c 	strb.w	r2, [r5, #2092]	@ 0x82c
  answer = Sim80x_SendAtCommand("AT+CIPSEND\r\n",1500,2,"\r\r\n> ","\r\nERROR\r\n");
 8001b88:	4813      	ldr	r0, [pc, #76]	@ (8001bd8 <GPRS_SendString+0x64>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001b90:	f000 fb88 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001b94:	2801      	cmp	r0, #1
 8001b96:	d005      	beq.n	8001ba4 <GPRS_SendString+0x30>
    Sim80x_SendString(DataString);
    sprintf(str,"%c",26);
    answer = Sim80x_SendAtCommand(str,2000,2,"\r\nSEND OK\r\n","\r\nERROR\r\n");
    if(answer == 1) return true;
  }
  Sim80x.GPRS.SendStatus = GPRSSendData_SendFail;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	f885 382c 	strb.w	r3, [r5, #2092]	@ 0x82c
  return false;
 8001b9e:	2000      	movs	r0, #0
}
 8001ba0:	b004      	add	sp, #16
 8001ba2:	bd70      	pop	{r4, r5, r6, pc}
    Sim80x_SendString(DataString);
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f000 fb41 	bl	800222c <Sim80x_SendString>
    sprintf(str,"%c",26);
 8001baa:	490c      	ldr	r1, [pc, #48]	@ (8001bdc <GPRS_SendString+0x68>)
 8001bac:	221a      	movs	r2, #26
 8001bae:	a803      	add	r0, sp, #12
 8001bb0:	f00e fe4c 	bl	801084c <siprintf>
    answer = Sim80x_SendAtCommand(str,2000,2,"\r\nSEND OK\r\n","\r\nERROR\r\n");
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <GPRS_SendString+0x6c>)
 8001bb6:	9600      	str	r6, [sp, #0]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001bbe:	a803      	add	r0, sp, #12
 8001bc0:	f000 fb70 	bl	80022a4 <Sim80x_SendAtCommand>
    if(answer == 1) return true;
 8001bc4:	2801      	cmp	r0, #1
 8001bc6:	d1e7      	bne.n	8001b98 <GPRS_SendString+0x24>
 8001bc8:	e7ea      	b.n	8001ba0 <GPRS_SendString+0x2c>
 8001bca:	bf00      	nop
 8001bcc:	20000230 	.word	0x20000230
 8001bd0:	0801410c 	.word	0x0801410c
 8001bd4:	080141cc 	.word	0x080141cc
 8001bd8:	080141d4 	.word	0x080141d4
 8001bdc:	080141e4 	.word	0x080141e4
 8001be0:	080141e8 	.word	0x080141e8

08001be4 <GPRS_SendRaw>:
//#################################################################################################################
bool  GPRS_SendRaw(uint8_t *Data, uint16_t len)
{
 8001be4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t answer;
  char str[20];
  Sim80x.GPRS.SendStatus = GPRSSendData_SendInProgress;
 8001be6:	4f14      	ldr	r7, [pc, #80]	@ (8001c38 <GPRS_SendRaw+0x54>)
  snprintf(str,sizeof(str),"AT+CIPSEND=%d\r\n",len);
 8001be8:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <GPRS_SendRaw+0x58>)
{
 8001bea:	b089      	sub	sp, #36	@ 0x24
  Sim80x.GPRS.SendStatus = GPRSSendData_SendInProgress;
 8001bec:	2301      	movs	r3, #1
 8001bee:	f887 382c 	strb.w	r3, [r7, #2092]	@ 0x82c
{
 8001bf2:	460d      	mov	r5, r1
  snprintf(str,sizeof(str),"AT+CIPSEND=%d\r\n",len);
 8001bf4:	460b      	mov	r3, r1
{
 8001bf6:	4606      	mov	r6, r0
  snprintf(str,sizeof(str),"AT+CIPSEND=%d\r\n",len);
 8001bf8:	2114      	movs	r1, #20
 8001bfa:	a803      	add	r0, sp, #12
 8001bfc:	f00e fdf2 	bl	80107e4 <sniprintf>
  answer = Sim80x_SendAtCommand(str,1500,2,"\r\r\n> ","\r\nERROR\r\n");
 8001c00:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <GPRS_SendRaw+0x5c>)
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	a803      	add	r0, sp, #12
 8001c06:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <GPRS_SendRaw+0x60>)
 8001c08:	2202      	movs	r2, #2
 8001c0a:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001c0e:	f000 fb49 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001c12:	2801      	cmp	r0, #1
 8001c14:	d005      	beq.n	8001c22 <GPRS_SendRaw+0x3e>
    return true;
//    str[0] = 0;
//    answer = Sim80x_SendAtCommand(str,2000,2,"\r\nSEND OK\r\n","\r\nERROR\r\n");
//    if(answer == 1) return true;
  }
  Sim80x.GPRS.SendStatus = GPRSSendData_SendFail;
 8001c16:	2303      	movs	r3, #3
  return false;
 8001c18:	2000      	movs	r0, #0
  Sim80x.GPRS.SendStatus = GPRSSendData_SendFail;
 8001c1a:	f887 382c 	strb.w	r3, [r7, #2092]	@ 0x82c
}
 8001c1e:	b009      	add	sp, #36	@ 0x24
 8001c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c22:	4604      	mov	r4, r0
    Sim80x_SendRaw(Data, len);
 8001c24:	4629      	mov	r1, r5
 8001c26:	4630      	mov	r0, r6
 8001c28:	f000 fb16 	bl	8002258 <Sim80x_SendRaw>
    osDelay(30);
 8001c2c:	201e      	movs	r0, #30
 8001c2e:	f00b fda3 	bl	800d778 <osDelay>
    return true;
 8001c32:	4620      	mov	r0, r4
}
 8001c34:	b009      	add	sp, #36	@ 0x24
 8001c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c38:	20000230 	.word	0x20000230
 8001c3c:	080141f4 	.word	0x080141f4
 8001c40:	0801410c 	.word	0x0801410c
 8001c44:	080141cc 	.word	0x080141cc

08001c48 <GPS_SetBaud>:
	}
	return true;
}

bool GPS_SetBaud()
{
 8001c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char *brtab[6] = {"115200","9600","19200","38400","57600","115200"};
 8001c4c:	4c26      	ldr	r4, [pc, #152]	@ (8001ce8 <GPS_SetBaud+0xa0>)
 8001c4e:	4f27      	ldr	r7, [pc, #156]	@ (8001cec <GPS_SetBaud+0xa4>)
    char str[20];
    while(1)
    {
        tout = 0;
        Sim80x.GPS.RunStatus = 0;
        uint8_t answer = Sim80x_SendAtCommand("AT+CGNSVER\r\n",500,2,"\r\nOK\r\n","\r\nERROR\r\n");  // zapytaj o wersje GPS
 8001c50:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8001cf8 <GPS_SetBaud+0xb0>
            {
                if(++baudrate > 5)  goto reterr;
                #if (_SIM80X_DEBUG==1)
                printf("GPS_Init():Checking %s baud...\r\n", brtab[baudrate]);
                #endif
                snprintf(str, sizeof(str), "AT+CGNSIPR=%s\r\n", brtab[baudrate]);
 8001c54:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8001cfc <GPS_SetBaud+0xb4>
    const char *brtab[6] = {"115200","9600","19200","38400","57600","115200"};
 8001c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
 8001c5a:	b08f      	sub	sp, #60	@ 0x3c
    const char *brtab[6] = {"115200","9600","19200","38400","57600","115200"};
 8001c5c:	ae08      	add	r6, sp, #32
 8001c5e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c64:	4c22      	ldr	r4, [pc, #136]	@ (8001cf0 <GPS_SetBaud+0xa8>)
 8001c66:	e886 0003 	stmia.w	r6, {r0, r1}
        uint8_t answer = Sim80x_SendAtCommand("AT+CGNSVER\r\n",500,2,"\r\nOK\r\n","\r\nERROR\r\n");  // zapytaj o wersje GPS
 8001c6a:	4e22      	ldr	r6, [pc, #136]	@ (8001cf4 <GPS_SetBaud+0xac>)
 8001c6c:	ad07      	add	r5, sp, #28
 8001c6e:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
        Sim80x.GPS.RunStatus = 0;
 8001c72:	2100      	movs	r1, #0
        uint8_t answer = Sim80x_SendAtCommand("AT+CGNSVER\r\n",500,2,"\r\nOK\r\n","\r\nERROR\r\n");  // zapytaj o wersje GPS
 8001c74:	9700      	str	r7, [sp, #0]
 8001c76:	4633      	mov	r3, r6
        Sim80x.GPS.RunStatus = 0;
 8001c78:	f884 1b31 	strb.w	r1, [r4, #2865]	@ 0xb31
        uint8_t answer = Sim80x_SendAtCommand("AT+CGNSVER\r\n",500,2,"\r\nOK\r\n","\r\nERROR\r\n");  // zapytaj o wersje GPS
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001c82:	4640      	mov	r0, r8
 8001c84:	f000 fb0e 	bl	80022a4 <Sim80x_SendAtCommand>
        if(answer == 1)
 8001c88:	2801      	cmp	r0, #1
 8001c8a:	d129      	bne.n	8001ce0 <GPS_SetBaud+0x98>
 8001c8c:	f04f 0b65 	mov.w	fp, #101	@ 0x65
 8001c90:	e006      	b.n	8001ca0 <GPS_SetBaud+0x58>
                osDelay(8);
 8001c92:	f00b fd71 	bl	800d778 <osDelay>
                if(++tout > 100) break;         // max 800ms na odpowiedz, normalnie prsychodzi po ok 320ms
 8001c96:	f10b 33ff 	add.w	r3, fp, #4294967295
 8001c9a:	f013 0bff 	ands.w	fp, r3, #255	@ 0xff
 8001c9e:	d008      	beq.n	8001cb2 <GPS_SetBaud+0x6a>
            while(Sim80x.GPS.RunStatus == 0)   // czekaj na odpowiedz z GPS z wersja firmware.
 8001ca0:	f894 3b31 	ldrb.w	r3, [r4, #2865]	@ 0xb31
                osDelay(8);
 8001ca4:	2008      	movs	r0, #8
            while(Sim80x.GPS.RunStatus == 0)   // czekaj na odpowiedz z GPS z wersja firmware.
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f3      	beq.n	8001c92 <GPS_SetBaud+0x4a>
            {
                #if (_SIM80X_DEBUG==1)
            	if(baudrate == 255) baudrate = 0;
                printf("\r\nGPS_Init():GPS Baudrate %s\r\n", brtab[baudrate]);
                #endif
                return true;
 8001caa:	2001      	movs	r0, #1
        #if (_SIM80X_DEBUG==1)
        printf("\r\nGPS_Init():SetBaudRate ---> ERROR\r\n");
        #endif
        return false;
    }
}
 8001cac:	b00f      	add	sp, #60	@ 0x3c
 8001cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(Sim80x.GPS.RunStatus == 0)      // brak odpowiedzi lub pakietow URC, testuj kolejne baudrate
 8001cb2:	f894 3b31 	ldrb.w	r3, [r4, #2865]	@ 0xb31
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f7      	bne.n	8001caa <GPS_SetBaud+0x62>
                if(++baudrate > 5)  goto reterr;
 8001cba:	454d      	cmp	r5, r9
 8001cbc:	d010      	beq.n	8001ce0 <GPS_SetBaud+0x98>
                snprintf(str, sizeof(str), "AT+CGNSIPR=%s\r\n", brtab[baudrate]);
 8001cbe:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8001cc2:	4652      	mov	r2, sl
 8001cc4:	2114      	movs	r1, #20
 8001cc6:	a803      	add	r0, sp, #12
 8001cc8:	f00e fd8c 	bl	80107e4 <sniprintf>
                answer = Sim80x_SendAtCommand(str, 500, 2, "\r\nOK\r\n","\r\nERROR\r\n");   // zmien baudrate
 8001ccc:	9700      	str	r7, [sp, #0]
 8001cce:	4633      	mov	r3, r6
 8001cd0:	a803      	add	r0, sp, #12
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001cd8:	f000 fae4 	bl	80022a4 <Sim80x_SendAtCommand>
                if(answer == 2)  goto reterr;                                               // blad zmiany baud
 8001cdc:	2802      	cmp	r0, #2
 8001cde:	d1c8      	bne.n	8001c72 <GPS_SetBaud+0x2a>
        return false;
 8001ce0:	2000      	movs	r0, #0
}
 8001ce2:	b00f      	add	sp, #60	@ 0x3c
 8001ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ce8:	08013be0 	.word	0x08013be0
 8001cec:	0801410c 	.word	0x0801410c
 8001cf0:	20000230 	.word	0x20000230
 8001cf4:	08014908 	.word	0x08014908
 8001cf8:	0801429c 	.word	0x0801429c
 8001cfc:	080142ac 	.word	0x080142ac

08001d00 <GPS_SetPower>:


bool  GPS_SetPower(bool TurnOn)
{
 8001d00:	b570      	push	{r4, r5, r6, lr}
	uint8_t answer;
	if(!Sim80x.Status.Power)
 8001d02:	4c66      	ldr	r4, [pc, #408]	@ (8001e9c <GPS_SetPower+0x19c>)
 8001d04:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8001d08:	075a      	lsls	r2, r3, #29
{
 8001d0a:	b082      	sub	sp, #8
	if(!Sim80x.Status.Power)
 8001d0c:	d530      	bpl.n	8001d70 <GPS_SetPower+0x70>
		#if (_SIM80X_DEBUG==1)
		printf("\r\nGPS_Init():Check power ---> ERROR\r\n");
		#endif
		return false;
	}
	if(TurnOn)
 8001d0e:	b978      	cbnz	r0, 8001d30 <GPS_SetPower+0x30>
		return false;
	  }
	}
	else
	{
	  if(Sim80x.GPS.RunStatus)
 8001d10:	f894 2b31 	ldrb.w	r2, [r4, #2865]	@ 0xb31
 8001d14:	2a00      	cmp	r2, #0
 8001d16:	f040 8095 	bne.w	8001e44 <GPS_SetPower+0x144>
		  // wylacz zasilanie GPS
		  answer = Sim80x_SendAtCommand("AT+CGNSPWR=0\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
		  osDelay(50);
	  } else answer = 1;
	  // wlacz spowrotem slow clk (low power)
	  if(Sim80x.GPRS.Connection == GPRSConnection_Idle) Sim80x.Status.LowPowerMode = 1;
 8001d1a:	f894 282b 	ldrb.w	r2, [r4, #2091]	@ 0x82b
 8001d1e:	b352      	cbz	r2, 8001d76 <GPS_SetPower+0x76>
	  {
		#if (_SIM80X_DEBUG==1)
		printf("\r\nGPS_PowerOff() ---> OK\r\n");
		#endif
		Sim80x.GPS.RunStatus = 0;
		Sim80x.GPS.SatInUse = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f884 3b4c 	strb.w	r3, [r4, #2892]	@ 0xb4c
		Sim80x.GPS.RunStatus = 0;
 8001d26:	f8a4 3b31 	strh.w	r3, [r4, #2865]	@ 0xb31
		return true;
 8001d2a:	2001      	movs	r0, #1
		Sim80x.GPS.SatInUse = 0;
		Sim80x.GPS.Fix = 0;
		return false;
	  }
	}
}
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd70      	pop	{r4, r5, r6, pc}
	  Sim80x.Status.LowPowerMode = 0;
 8001d30:	f36f 1345 	bfc	r3, #5, #1
	  answer = Sim80x_SendAtCommand("AT+CGNSPWR=1\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001d34:	4e5a      	ldr	r6, [pc, #360]	@ (8001ea0 <GPS_SetPower+0x1a0>)
	  Sim80x.Status.LowPowerMode = 0;
 8001d36:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
	  osDelay(100);
 8001d3a:	2064      	movs	r0, #100	@ 0x64
 8001d3c:	f00b fd1c 	bl	800d778 <osDelay>
	  answer = Sim80x_SendAtCommand("AT+CGNSPWR=1\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001d40:	4b58      	ldr	r3, [pc, #352]	@ (8001ea4 <GPS_SetPower+0x1a4>)
 8001d42:	4859      	ldr	r0, [pc, #356]	@ (8001ea8 <GPS_SetPower+0x1a8>)
 8001d44:	9600      	str	r6, [sp, #0]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d4c:	f000 faaa 	bl	80022a4 <Sim80x_SendAtCommand>
	  if(answer == 1)
 8001d50:	2801      	cmp	r0, #1
	  answer = Sim80x_SendAtCommand("AT+CGNSPWR=1\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001d52:	4605      	mov	r5, r0
	  if(answer == 1)
 8001d54:	d014      	beq.n	8001d80 <GPS_SetPower+0x80>
		printf("\r\nGPS_PowerOn() ---> ERROR\r\n");
 8001d56:	4855      	ldr	r0, [pc, #340]	@ (8001eac <GPS_SetPower+0x1ac>)
 8001d58:	f00e fd3c 	bl	80107d4 <puts>
		if(Sim80x.GPS.RunStatus)
 8001d5c:	f894 3b31 	ldrb.w	r3, [r4, #2865]	@ 0xb31
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f040 8091 	bne.w	8001e88 <GPS_SetPower+0x188>
		memset(&Sim80x.GPS, 0, sizeof(GPS_t));
 8001d66:	4852      	ldr	r0, [pc, #328]	@ (8001eb0 <GPS_SetPower+0x1b0>)
 8001d68:	2220      	movs	r2, #32
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	f00e fe92 	bl	8010a94 <memset>
		return false;
 8001d70:	2000      	movs	r0, #0
}
 8001d72:	b002      	add	sp, #8
 8001d74:	bd70      	pop	{r4, r5, r6, pc}
	  if(Sim80x.GPRS.Connection == GPRSConnection_Idle) Sim80x.Status.LowPowerMode = 1;
 8001d76:	f043 0320 	orr.w	r3, r3, #32
 8001d7a:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
	  if(answer == 1)
 8001d7e:	e7cf      	b.n	8001d20 <GPS_SetPower+0x20>
		memset(&Sim80x.GPS, 0, sizeof(GPS_t));
 8001d80:	2220      	movs	r2, #32
 8001d82:	2100      	movs	r1, #0
 8001d84:	f504 6033 	add.w	r0, r4, #2864	@ 0xb30
 8001d88:	f00e fe84 	bl	8010a94 <memset>
		osDelay(700);
 8001d8c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001d90:	f00b fcf2 	bl	800d778 <osDelay>
	uint8_t answer = Sim80x_SendAtCommand("AT+CGNSURC=1\r\n",300,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001d94:	4b43      	ldr	r3, [pc, #268]	@ (8001ea4 <GPS_SetPower+0x1a4>)
 8001d96:	4847      	ldr	r0, [pc, #284]	@ (8001eb4 <GPS_SetPower+0x1b4>)
 8001d98:	9600      	str	r6, [sp, #0]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001da0:	f000 fa80 	bl	80022a4 <Sim80x_SendAtCommand>
	if(answer == 2)
 8001da4:	2802      	cmp	r0, #2
 8001da6:	d0d6      	beq.n	8001d56 <GPS_SetPower+0x56>
		osDelay(700);
 8001da8:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001dac:	f00b fce4 	bl	800d778 <osDelay>
	    if(!GPS_SetBaud()) goto OnErr;					// ustawienie baudrate dla portu 2 simcomma
 8001db0:	f7ff ff4a 	bl	8001c48 <GPS_SetBaud>
 8001db4:	2800      	cmp	r0, #0
 8001db6:	d0ce      	beq.n	8001d56 <GPS_SetPower+0x56>
		osDelay(100);
 8001db8:	2064      	movs	r0, #100	@ 0x64
 8001dba:	f00b fcdd 	bl	800d778 <osDelay>
		answer = Sim80x_SendAtCommand("AT+CGNSCMD=0,\"$PMTK285,4,600*3F\"\r\n", 500, 1,"\r\nOK\r\n");
 8001dbe:	4b39      	ldr	r3, [pc, #228]	@ (8001ea4 <GPS_SetPower+0x1a4>)
 8001dc0:	483d      	ldr	r0, [pc, #244]	@ (8001eb8 <GPS_SetPower+0x1b8>)
 8001dc2:	462a      	mov	r2, r5
 8001dc4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001dc8:	f000 fa6c 	bl	80022a4 <Sim80x_SendAtCommand>
		if(answer != 1) {
 8001dcc:	2801      	cmp	r0, #1
 8001dce:	d009      	beq.n	8001de4 <GPS_SetPower+0xe4>
			osDelay(100);
 8001dd0:	2064      	movs	r0, #100	@ 0x64
 8001dd2:	f00b fcd1 	bl	800d778 <osDelay>
			Sim80x_SendAtCommand("AT+CGNSCMD=0,\"$PMTK285,4,600*3F\"\r\n", 500, 1,"\r\nOK\r\n");
 8001dd6:	4b33      	ldr	r3, [pc, #204]	@ (8001ea4 <GPS_SetPower+0x1a4>)
 8001dd8:	4837      	ldr	r0, [pc, #220]	@ (8001eb8 <GPS_SetPower+0x1b8>)
 8001dda:	462a      	mov	r2, r5
 8001ddc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001de0:	f000 fa60 	bl	80022a4 <Sim80x_SendAtCommand>
		osDelay(20);
 8001de4:	2014      	movs	r0, #20
 8001de6:	f00b fcc7 	bl	800d778 <osDelay>
	uint8_t answer = Sim80x_SendAtCommand("AT+CGNSCMD=0,\"$PMTK353,1,1,0,0,0*2B\"\r\n", 300, 2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001dea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea4 <GPS_SetPower+0x1a4>)
 8001dec:	9600      	str	r6, [sp, #0]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001df4:	4831      	ldr	r0, [pc, #196]	@ (8001ebc <GPS_SetPower+0x1bc>)
 8001df6:	f000 fa55 	bl	80022a4 <Sim80x_SendAtCommand>
		osDelay(20);
 8001dfa:	2014      	movs	r0, #20
 8001dfc:	f00b fcbc 	bl	800d778 <osDelay>
	uint8_t answer = Sim80x_SendAtCommand("AT+CGNSCMD=0,\"$PMTK301,2*2E\"\r\n", 300, 2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001e00:	4b28      	ldr	r3, [pc, #160]	@ (8001ea4 <GPS_SetPower+0x1a4>)
 8001e02:	9600      	str	r6, [sp, #0]
 8001e04:	2202      	movs	r2, #2
 8001e06:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001e0a:	482d      	ldr	r0, [pc, #180]	@ (8001ec0 <GPS_SetPower+0x1c0>)
 8001e0c:	f000 fa4a 	bl	80022a4 <Sim80x_SendAtCommand>
		osDelay(20);
 8001e10:	2014      	movs	r0, #20
 8001e12:	f00b fcb1 	bl	800d778 <osDelay>
	uint8_t answer = Sim80x_SendAtCommand("AT+CGNSCMD=0,\"$PMTK313,1*2E\"\r\n", 300, 2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001e16:	4b23      	ldr	r3, [pc, #140]	@ (8001ea4 <GPS_SetPower+0x1a4>)
 8001e18:	9600      	str	r6, [sp, #0]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001e20:	4828      	ldr	r0, [pc, #160]	@ (8001ec4 <GPS_SetPower+0x1c4>)
 8001e22:	f000 fa3f 	bl	80022a4 <Sim80x_SendAtCommand>
		osDelay(20);
 8001e26:	2014      	movs	r0, #20
 8001e28:	f00b fca6 	bl	800d778 <osDelay>
	uint8_t answer = Sim80x_SendAtCommand("AT+CGNSCMD=0,\"$PMTK886,1*29\"\r\n", 300, 2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <GPS_SetPower+0x1a4>)
 8001e2e:	9600      	str	r6, [sp, #0]
 8001e30:	2202      	movs	r2, #2
 8001e32:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001e36:	4824      	ldr	r0, [pc, #144]	@ (8001ec8 <GPS_SetPower+0x1c8>)
 8001e38:	f000 fa34 	bl	80022a4 <Sim80x_SendAtCommand>
		osDelay(50);
 8001e3c:	2032      	movs	r0, #50	@ 0x32
 8001e3e:	f00b fc9b 	bl	800d778 <osDelay>
		return true;
 8001e42:	e772      	b.n	8001d2a <GPS_SetPower+0x2a>
		  answer = Sim80x_SendAtCommand("AT+CGNSPWR=0\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001e44:	4816      	ldr	r0, [pc, #88]	@ (8001ea0 <GPS_SetPower+0x1a0>)
 8001e46:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <GPS_SetPower+0x1a4>)
 8001e48:	9000      	str	r0, [sp, #0]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e50:	481e      	ldr	r0, [pc, #120]	@ (8001ecc <GPS_SetPower+0x1cc>)
 8001e52:	f000 fa27 	bl	80022a4 <Sim80x_SendAtCommand>
 8001e56:	4605      	mov	r5, r0
		  osDelay(50);
 8001e58:	2032      	movs	r0, #50	@ 0x32
 8001e5a:	f00b fc8d 	bl	800d778 <osDelay>
	  if(Sim80x.GPRS.Connection == GPRSConnection_Idle) Sim80x.Status.LowPowerMode = 1;
 8001e5e:	f894 382b 	ldrb.w	r3, [r4, #2091]	@ 0x82b
 8001e62:	b92b      	cbnz	r3, 8001e70 <GPS_SetPower+0x170>
 8001e64:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8001e68:	f043 0320 	orr.w	r3, r3, #32
 8001e6c:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
	  if(answer == 1)
 8001e70:	2d01      	cmp	r5, #1
 8001e72:	f43f af55 	beq.w	8001d20 <GPS_SetPower+0x20>
		printf("\r\nGPS_PowerOff() ---> ERROR\r\n");
 8001e76:	4816      	ldr	r0, [pc, #88]	@ (8001ed0 <GPS_SetPower+0x1d0>)
 8001e78:	f00e fcac 	bl	80107d4 <puts>
		Sim80x.GPS.SatInUse = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f884 3b4c 	strb.w	r3, [r4, #2892]	@ 0xb4c
		Sim80x.GPS.RunStatus = 0;
 8001e82:	f8a4 3b31 	strh.w	r3, [r4, #2865]	@ 0xb31
		return false;
 8001e86:	e773      	b.n	8001d70 <GPS_SetPower+0x70>
			Sim80x_SendAtCommand("AT+CGNSPWR=0\r\n",1000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <GPS_SetPower+0x1a4>)
 8001e8a:	9600      	str	r6, [sp, #0]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e92:	480e      	ldr	r0, [pc, #56]	@ (8001ecc <GPS_SetPower+0x1cc>)
 8001e94:	f000 fa06 	bl	80022a4 <Sim80x_SendAtCommand>
 8001e98:	e765      	b.n	8001d66 <GPS_SetPower+0x66>
 8001e9a:	bf00      	nop
 8001e9c:	20000230 	.word	0x20000230
 8001ea0:	0801410c 	.word	0x0801410c
 8001ea4:	08014908 	.word	0x08014908
 8001ea8:	080142bc 	.word	0x080142bc
 8001eac:	080142f0 	.word	0x080142f0
 8001eb0:	20000d60 	.word	0x20000d60
 8001eb4:	0801428c 	.word	0x0801428c
 8001eb8:	080142cc 	.word	0x080142cc
 8001ebc:	08014204 	.word	0x08014204
 8001ec0:	0801422c 	.word	0x0801422c
 8001ec4:	0801424c 	.word	0x0801424c
 8001ec8:	0801426c 	.word	0x0801426c
 8001ecc:	0801430c 	.word	0x0801430c
 8001ed0:	0801431c 	.word	0x0801431c

08001ed4 <Gsm_CallDisconnect>:
  else
    return false;
}
//######################################################################################################
bool  Gsm_CallDisconnect(void)
{
 8001ed4:	b500      	push	{lr}
 8001ed6:	b083      	sub	sp, #12
  uint8_t answer = Sim80x_SendAtCommand("AT+HVOIC\r\n",20000,2,"AT+HVOIC\r\r\nOK\r\n","AT+HVOIC\r\r\nERROR\r\n");
 8001ed8:	4a09      	ldr	r2, [pc, #36]	@ (8001f00 <Gsm_CallDisconnect+0x2c>)
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <Gsm_CallDisconnect+0x30>)
 8001edc:	9200      	str	r2, [sp, #0]
 8001ede:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	4808      	ldr	r0, [pc, #32]	@ (8001f08 <Gsm_CallDisconnect+0x34>)
 8001ee6:	f000 f9dd 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001eea:	2801      	cmp	r0, #1
  {
    Sim80x.Gsm.GsmVoiceStatus = GsmVoiceStatus_Idle;
 8001eec:	bf05      	ittet	eq
 8001eee:	4b07      	ldreq	r3, [pc, #28]	@ (8001f0c <Gsm_CallDisconnect+0x38>)
 8001ef0:	2200      	moveq	r2, #0
    return true;
  }
  else
    return false;
 8001ef2:	2000      	movne	r0, #0
    Sim80x.Gsm.GsmVoiceStatus = GsmVoiceStatus_Idle;
 8001ef4:	f883 265a 	strbeq.w	r2, [r3, #1626]	@ 0x65a
}
 8001ef8:	b003      	add	sp, #12
 8001efa:	f85d fb04 	ldr.w	pc, [sp], #4
 8001efe:	bf00      	nop
 8001f00:	08014388 	.word	0x08014388
 8001f04:	0801436c 	.word	0x0801436c
 8001f08:	0801437c 	.word	0x0801437c
 8001f0c:	20000230 	.word	0x20000230

08001f10 <Gsm_MsgGetFormat>:
}
//######################################################################################################
//######################################################################################################
//######################################################################################################
GsmMsgFormat_t  Gsm_MsgGetFormat(void)
{
 8001f10:	b500      	push	{lr}
 8001f12:	b083      	sub	sp, #12
  uint8_t   answer;
  answer = Sim80x_SendAtCommand("AT+CMGF?\r\n",1000,2,"+CMGF: 0\r\n\r\nOK\r\n","+CMGF: 1\r\n\r\nOK\r\n");
 8001f14:	4a0b      	ldr	r2, [pc, #44]	@ (8001f44 <Gsm_MsgGetFormat+0x34>)
 8001f16:	9200      	str	r2, [sp, #0]
 8001f18:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <Gsm_MsgGetFormat+0x38>)
 8001f1a:	480c      	ldr	r0, [pc, #48]	@ (8001f4c <Gsm_MsgGetFormat+0x3c>)
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f22:	f000 f9bf 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001f26:	2801      	cmp	r0, #1
 8001f28:	d005      	beq.n	8001f36 <Gsm_MsgGetFormat+0x26>
  {
    Sim80x.Gsm.MsgFormat = GsmMsgFormat_PDU;
    return GsmMsgFormat_PDU;
  }
  else if(answer == 2)
 8001f2a:	2802      	cmp	r0, #2
 8001f2c:	d003      	beq.n	8001f36 <Gsm_MsgGetFormat+0x26>
  {
    Sim80x.Gsm.MsgFormat = GsmMsgFormat_Text;
    return GsmMsgFormat_Text;
  }
  else
    return GsmMsgFormat_Error;  
 8001f2e:	2000      	movs	r0, #0
}
 8001f30:	b003      	add	sp, #12
 8001f32:	f85d fb04 	ldr.w	pc, [sp], #4
    Sim80x.Gsm.MsgFormat = GsmMsgFormat_Text;
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <Gsm_MsgGetFormat+0x40>)
 8001f38:	f883 07d9 	strb.w	r0, [r3, #2009]	@ 0x7d9
}
 8001f3c:	b003      	add	sp, #12
 8001f3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f42:	bf00      	nop
 8001f44:	080143bc 	.word	0x080143bc
 8001f48:	0801439c 	.word	0x0801439c
 8001f4c:	080143b0 	.word	0x080143b0
 8001f50:	20000230 	.word	0x20000230

08001f54 <Gsm_MsgSetFormat>:
//######################################################################################################
bool  Gsm_MsgSetFormat(GsmMsgFormat_t GsmMsgFormat)
{
 8001f54:	b510      	push	{r4, lr}
  uint8_t   answer;
  if(GsmMsgFormat == GsmMsgFormat_PDU)
 8001f56:	2801      	cmp	r0, #1
{
 8001f58:	b082      	sub	sp, #8
  if(GsmMsgFormat == GsmMsgFormat_PDU)
 8001f5a:	d015      	beq.n	8001f88 <Gsm_MsgSetFormat+0x34>
    answer = Sim80x_SendAtCommand("AT+CMGF=0\r\n",1000,2,"AT+CMGF=0\r\r\nOK\r\n","AT+CMGF=0\r\r\nERROR\r\n");
  else  if(GsmMsgFormat == GsmMsgFormat_Text)
 8001f5c:	2802      	cmp	r0, #2
 8001f5e:	4604      	mov	r4, r0
 8001f60:	d002      	beq.n	8001f68 <Gsm_MsgSetFormat+0x14>
    answer = Sim80x_SendAtCommand("AT+CMGF=1\r\n",1000,2,"AT+CMGF=1\r\r\nOK\r\n","AT+CMGF=1\r\r\nERROR\r\n");
  else
    return false;
 8001f62:	2000      	movs	r0, #0
      Sim80x.Gsm.MsgFormat = GsmMsgFormat_Text;
    return true;    
  }
  else
    return false;  
}
 8001f64:	b002      	add	sp, #8
 8001f66:	bd10      	pop	{r4, pc}
    answer = Sim80x_SendAtCommand("AT+CMGF=1\r\n",1000,2,"AT+CMGF=1\r\r\nOK\r\n","AT+CMGF=1\r\r\nERROR\r\n");
 8001f68:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa4 <Gsm_MsgSetFormat+0x50>)
 8001f6a:	9200      	str	r2, [sp, #0]
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <Gsm_MsgSetFormat+0x54>)
 8001f6e:	4602      	mov	r2, r0
 8001f70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f74:	480d      	ldr	r0, [pc, #52]	@ (8001fac <Gsm_MsgSetFormat+0x58>)
 8001f76:	f000 f995 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001f7a:	2801      	cmp	r0, #1
 8001f7c:	d1f1      	bne.n	8001f62 <Gsm_MsgSetFormat+0xe>
      Sim80x.Gsm.MsgFormat = GsmMsgFormat_Text;
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <Gsm_MsgSetFormat+0x5c>)
 8001f80:	2001      	movs	r0, #1
 8001f82:	f883 47d9 	strb.w	r4, [r3, #2009]	@ 0x7d9
 8001f86:	e7ed      	b.n	8001f64 <Gsm_MsgSetFormat+0x10>
    answer = Sim80x_SendAtCommand("AT+CMGF=0\r\n",1000,2,"AT+CMGF=0\r\r\nOK\r\n","AT+CMGF=0\r\r\nERROR\r\n");
 8001f88:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb4 <Gsm_MsgSetFormat+0x60>)
 8001f8a:	9200      	str	r2, [sp, #0]
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <Gsm_MsgSetFormat+0x64>)
 8001f8e:	480b      	ldr	r0, [pc, #44]	@ (8001fbc <Gsm_MsgSetFormat+0x68>)
 8001f90:	2202      	movs	r2, #2
 8001f92:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f96:	f000 f985 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001f9a:	2801      	cmp	r0, #1
    answer = Sim80x_SendAtCommand("AT+CMGF=0\r\n",1000,2,"AT+CMGF=0\r\r\nOK\r\n","AT+CMGF=0\r\r\nERROR\r\n");
 8001f9c:	4604      	mov	r4, r0
  if(answer == 1)
 8001f9e:	d1e0      	bne.n	8001f62 <Gsm_MsgSetFormat+0xe>
 8001fa0:	e7ed      	b.n	8001f7e <Gsm_MsgSetFormat+0x2a>
 8001fa2:	bf00      	nop
 8001fa4:	08014424 	.word	0x08014424
 8001fa8:	08014404 	.word	0x08014404
 8001fac:	08014418 	.word	0x08014418
 8001fb0:	20000230 	.word	0x20000230
 8001fb4:	080143f0 	.word	0x080143f0
 8001fb8:	080143d0 	.word	0x080143d0
 8001fbc:	080143e4 	.word	0x080143e4

08001fc0 <Gsm_MsgGetMemoryStatus>:
//######################################################################################################
GsmMsgMemory_t  Gsm_MsgGetMemoryStatus(void)
{
 8001fc0:	b500      	push	{lr}
 8001fc2:	b083      	sub	sp, #12
  uint8_t   answer;
  answer = Sim80x_SendAtCommand("AT+CPMS?\r\n",1000,2,"AT+CPMS?\r\r\n+CPMS: \"SM\"","AT+CPMS?\r\r\n+CPMS: \"ME\"");
 8001fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff4 <Gsm_MsgGetMemoryStatus+0x34>)
 8001fc6:	9200      	str	r2, [sp, #0]
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <Gsm_MsgGetMemoryStatus+0x38>)
 8001fca:	480c      	ldr	r0, [pc, #48]	@ (8001ffc <Gsm_MsgGetMemoryStatus+0x3c>)
 8001fcc:	2202      	movs	r2, #2
 8001fce:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fd2:	f000 f967 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer == 1)
 8001fd6:	2801      	cmp	r0, #1
 8001fd8:	d005      	beq.n	8001fe6 <Gsm_MsgGetMemoryStatus+0x26>
    Sim80x.Gsm.MsgMemory = GsmMsgMemory_OnSim;
  else if(answer == 2)
 8001fda:	f1a0 0002 	sub.w	r0, r0, #2
 8001fde:	fab0 f080 	clz	r0, r0
 8001fe2:	0940      	lsrs	r0, r0, #5
 8001fe4:	0040      	lsls	r0, r0, #1
    Sim80x.Gsm.MsgMemory = GsmMsgMemory_OnSim;
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <Gsm_MsgGetMemoryStatus+0x40>)
 8001fe8:	f883 07d8 	strb.w	r0, [r3, #2008]	@ 0x7d8
    Sim80x.Gsm.MsgMemory = GsmMsgMemory_OnModule;
  else
    Sim80x.Gsm.MsgMemory = GsmMsgMemory_Error;
  return  Sim80x.Gsm.MsgMemory; 
}
 8001fec:	b003      	add	sp, #12
 8001fee:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ff2:	bf00      	nop
 8001ff4:	0801445c 	.word	0x0801445c
 8001ff8:	08014438 	.word	0x08014438
 8001ffc:	08014450 	.word	0x08014450
 8002000:	20000230 	.word	0x20000230

08002004 <Gsm_MsgSetMemoryLocation>:
//######################################################################################################
bool  Gsm_MsgSetMemoryLocation(GsmMsgMemory_t GsmMsgMemory)
{
  uint8_t   answer;
  if(GsmMsgMemory == GsmMsgMemory_OnSim)
 8002004:	2801      	cmp	r0, #1
{
 8002006:	b510      	push	{r4, lr}
 8002008:	4604      	mov	r4, r0
  if(GsmMsgMemory == GsmMsgMemory_OnSim)
 800200a:	d003      	beq.n	8002014 <Gsm_MsgSetMemoryLocation+0x10>
      return true;
    }
    else
      return false;
  }
  if(GsmMsgMemory == GsmMsgMemory_OnModule)
 800200c:	2802      	cmp	r0, #2
 800200e:	d010      	beq.n	8002032 <Gsm_MsgSetMemoryLocation+0x2e>
      return false;
 8002010:	2000      	movs	r0, #0
    }
    else
      return false;
  }
  return false;
}
 8002012:	bd10      	pop	{r4, pc}
    answer = Sim80x_SendAtCommand("AT+CPMS=\"SM\",\"SM\",\"SM\"\r\n",1000,1,"\r\n+CPMS:");
 8002014:	4602      	mov	r2, r0
 8002016:	4b0c      	ldr	r3, [pc, #48]	@ (8002048 <Gsm_MsgSetMemoryLocation+0x44>)
 8002018:	480c      	ldr	r0, [pc, #48]	@ (800204c <Gsm_MsgSetMemoryLocation+0x48>)
 800201a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800201e:	f000 f941 	bl	80022a4 <Sim80x_SendAtCommand>
    if(answer == 1)
 8002022:	2801      	cmp	r0, #1
    answer = Sim80x_SendAtCommand("AT+CPMS=\"SM\",\"SM\",\"SM\"\r\n",1000,1,"\r\n+CPMS:");
 8002024:	4604      	mov	r4, r0
    if(answer == 1)
 8002026:	d1f3      	bne.n	8002010 <Gsm_MsgSetMemoryLocation+0xc>
      Sim80x.Gsm.MsgMemory = GsmMsgMemory_OnModule;
 8002028:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <Gsm_MsgSetMemoryLocation+0x4c>)
 800202a:	f883 47d8 	strb.w	r4, [r3, #2008]	@ 0x7d8
      return true;
 800202e:	2001      	movs	r0, #1
}
 8002030:	bd10      	pop	{r4, pc}
    answer = Sim80x_SendAtCommand("AT+CPMS=\"ME\",\"ME\",\"ME\"\r\n",1000,1,"\r\n+CPMS:");
 8002032:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <Gsm_MsgSetMemoryLocation+0x44>)
 8002034:	4807      	ldr	r0, [pc, #28]	@ (8002054 <Gsm_MsgSetMemoryLocation+0x50>)
 8002036:	2201      	movs	r2, #1
 8002038:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800203c:	f000 f932 	bl	80022a4 <Sim80x_SendAtCommand>
    if(answer == 1)
 8002040:	2801      	cmp	r0, #1
 8002042:	d1e5      	bne.n	8002010 <Gsm_MsgSetMemoryLocation+0xc>
 8002044:	e7f0      	b.n	8002028 <Gsm_MsgSetMemoryLocation+0x24>
 8002046:	bf00      	nop
 8002048:	08014474 	.word	0x08014474
 800204c:	08014480 	.word	0x08014480
 8002050:	20000230 	.word	0x20000230
 8002054:	0801449c 	.word	0x0801449c

08002058 <Gsm_MsgGetCharacterFormat>:
//######################################################################################################
GsmTECharacterSet_t     Gsm_MsgGetCharacterFormat(void)
{
 8002058:	b510      	push	{r4, lr}
  Sim80x.Gsm.TeCharacterFormat = (GsmTECharacterSet_t)Sim80x_SendAtCommand("AT+CSCS?\r\n",1000,7,"\r\n+CSCS: \"GSM\"\r\n","\r\n+CSCS: \"UCS2\"\r\n","\r\n+CSCS: \"IRA\"\r\n","\r\n+CSCS: \"HEX\"\r\n","\r\n+CSCS: \"PCCP\"\r\n","\r\n+CSCS: \"PCDN\"\r\n","\r\n+CSCS: \"8859-1\"\r\n");
 800205a:	4a0c      	ldr	r2, [pc, #48]	@ (800208c <Gsm_MsgGetCharacterFormat+0x34>)
 800205c:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <Gsm_MsgGetCharacterFormat+0x38>)
 800205e:	4c0d      	ldr	r4, [pc, #52]	@ (8002094 <Gsm_MsgGetCharacterFormat+0x3c>)
 8002060:	480d      	ldr	r0, [pc, #52]	@ (8002098 <Gsm_MsgGetCharacterFormat+0x40>)
 8002062:	490e      	ldr	r1, [pc, #56]	@ (800209c <Gsm_MsgGetCharacterFormat+0x44>)
{
 8002064:	b086      	sub	sp, #24
  Sim80x.Gsm.TeCharacterFormat = (GsmTECharacterSet_t)Sim80x_SendAtCommand("AT+CSCS?\r\n",1000,7,"\r\n+CSCS: \"GSM\"\r\n","\r\n+CSCS: \"UCS2\"\r\n","\r\n+CSCS: \"IRA\"\r\n","\r\n+CSCS: \"HEX\"\r\n","\r\n+CSCS: \"PCCP\"\r\n","\r\n+CSCS: \"PCDN\"\r\n","\r\n+CSCS: \"8859-1\"\r\n");
 8002066:	e9cd 3204 	strd	r3, r2, [sp, #16]
 800206a:	4a0d      	ldr	r2, [pc, #52]	@ (80020a0 <Gsm_MsgGetCharacterFormat+0x48>)
 800206c:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <Gsm_MsgGetCharacterFormat+0x4c>)
 800206e:	e9cd 2100 	strd	r2, r1, [sp]
 8002072:	e9cd 0402 	strd	r0, r4, [sp, #8]
 8002076:	2207      	movs	r2, #7
 8002078:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800207c:	480a      	ldr	r0, [pc, #40]	@ (80020a8 <Gsm_MsgGetCharacterFormat+0x50>)
 800207e:	f000 f911 	bl	80022a4 <Sim80x_SendAtCommand>
 8002082:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <Gsm_MsgGetCharacterFormat+0x54>)
 8002084:	f883 07d7 	strb.w	r0, [r3, #2007]	@ 0x7d7
  return Sim80x.Gsm.TeCharacterFormat;
}
 8002088:	b006      	add	sp, #24
 800208a:	bd10      	pop	{r4, pc}
 800208c:	080144d8 	.word	0x080144d8
 8002090:	080144ec 	.word	0x080144ec
 8002094:	08014500 	.word	0x08014500
 8002098:	08014514 	.word	0x08014514
 800209c:	08014528 	.word	0x08014528
 80020a0:	0801453c 	.word	0x0801453c
 80020a4:	080144b8 	.word	0x080144b8
 80020a8:	080144cc 	.word	0x080144cc
 80020ac:	20000230 	.word	0x20000230

080020b0 <Gsm_MsgRead>:
  else
    return false;
}
//######################################################################################################
bool  Gsm_MsgRead(uint8_t index)
{
 80020b0:	b530      	push	{r4, r5, lr}
  uint8_t answer;
  char str[16];
  memset(Sim80x.Gsm.Msg,0,sizeof(Sim80x.Gsm.Msg));
 80020b2:	4d1b      	ldr	r5, [pc, #108]	@ (8002120 <Gsm_MsgRead+0x70>)
{
 80020b4:	b087      	sub	sp, #28
 80020b6:	4604      	mov	r4, r0
  memset(Sim80x.Gsm.Msg,0,sizeof(Sim80x.Gsm.Msg));
 80020b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020bc:	2100      	movs	r1, #0
 80020be:	4628      	mov	r0, r5
 80020c0:	f00e fce8 	bl	8010a94 <memset>
  memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
  memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
  memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));  
  sprintf(str,"AT+CMGR=%d\r\n",index);
 80020c4:	4622      	mov	r2, r4
 80020c6:	4917      	ldr	r1, [pc, #92]	@ (8002124 <Gsm_MsgRead+0x74>)
  memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 80020c8:	2400      	movs	r4, #0
  sprintf(str,"AT+CMGR=%d\r\n",index);
 80020ca:	a802      	add	r0, sp, #8
  memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 80020cc:	f805 4c0a 	strb.w	r4, [r5, #-10]
  memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));  
 80020d0:	f805 4c01 	strb.w	r4, [r5, #-1]
  memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 80020d4:	f845 4c12 	str.w	r4, [r5, #-18]
 80020d8:	f845 4c0e 	str.w	r4, [r5, #-14]
  memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
 80020dc:	f845 4c23 	str.w	r4, [r5, #-35]
 80020e0:	f845 4c1f 	str.w	r4, [r5, #-31]
 80020e4:	f845 4c1b 	str.w	r4, [r5, #-27]
 80020e8:	f845 4c17 	str.w	r4, [r5, #-23]
 80020ec:	f805 4c13 	strb.w	r4, [r5, #-19]
  memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));  
 80020f0:	f845 4c09 	str.w	r4, [r5, #-9]
 80020f4:	f845 4c05 	str.w	r4, [r5, #-5]
  sprintf(str,"AT+CMGR=%d\r\n",index);
 80020f8:	f00e fba8 	bl	801084c <siprintf>
  answer = Sim80x_SendAtCommand(str,5000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 80020fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <Gsm_MsgRead+0x78>)
 80020fe:	9200      	str	r2, [sp, #0]
 8002100:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <Gsm_MsgRead+0x7c>)
 8002102:	a802      	add	r0, sp, #8
 8002104:	2202      	movs	r2, #2
 8002106:	f241 3188 	movw	r1, #5000	@ 0x1388
 800210a:	f000 f8cb 	bl	80022a4 <Sim80x_SendAtCommand>
  if((answer == 1 ) && (Sim80x.Gsm.MsgReadIsOK==1))
 800210e:	2801      	cmp	r0, #1
 8002110:	bf0a      	itet	eq
 8002112:	f815 0c8b 	ldrbeq.w	r0, [r5, #-139]
    return true;
  else
    return false;    
 8002116:	4620      	movne	r0, r4
  if((answer == 1 ) && (Sim80x.Gsm.MsgReadIsOK==1))
 8002118:	f3c0 0040 	ubfxeq	r0, r0, #1, #1
}
 800211c:	b007      	add	sp, #28
 800211e:	bd30      	pop	{r4, r5, pc}
 8002120:	20000907 	.word	0x20000907
 8002124:	08014550 	.word	0x08014550
 8002128:	0801410c 	.word	0x0801410c
 800212c:	08014908 	.word	0x08014908

08002130 <Gsm_MsgDelete>:
//######################################################################################################
bool  Gsm_MsgDelete(uint8_t index)
{
 8002130:	b530      	push	{r4, r5, lr}
 8002132:	b093      	sub	sp, #76	@ 0x4c
 8002134:	4604      	mov	r4, r0
  uint8_t answer;
  char str[16];
  char strP1[22];
  char strP2[22];
  sprintf(str,"AT+CMGD=%d\r\n",index);
 8002136:	4602      	mov	r2, r0
 8002138:	490e      	ldr	r1, [pc, #56]	@ (8002174 <Gsm_MsgDelete+0x44>)
 800213a:	a802      	add	r0, sp, #8
 800213c:	f00e fb86 	bl	801084c <siprintf>
  sprintf(strP1,"AT+CMGD=%d\r\r\nOK\r\n",index);
  sprintf(strP2,"AT+CMGD=%d\r\r\nERROR\r\n",index);
 8002140:	ad0c      	add	r5, sp, #48	@ 0x30
  sprintf(strP1,"AT+CMGD=%d\r\r\nOK\r\n",index);
 8002142:	4622      	mov	r2, r4
 8002144:	490c      	ldr	r1, [pc, #48]	@ (8002178 <Gsm_MsgDelete+0x48>)
 8002146:	a806      	add	r0, sp, #24
 8002148:	f00e fb80 	bl	801084c <siprintf>
  sprintf(strP2,"AT+CMGD=%d\r\r\nERROR\r\n",index);
 800214c:	4622      	mov	r2, r4
 800214e:	490b      	ldr	r1, [pc, #44]	@ (800217c <Gsm_MsgDelete+0x4c>)
 8002150:	4628      	mov	r0, r5
 8002152:	f00e fb7b 	bl	801084c <siprintf>
  answer = Sim80x_SendAtCommand(str,25000,2,strP1,strP2);
 8002156:	9500      	str	r5, [sp, #0]
 8002158:	ab06      	add	r3, sp, #24
 800215a:	2202      	movs	r2, #2
 800215c:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8002160:	a802      	add	r0, sp, #8
 8002162:	f000 f89f 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer == 1)
    return true;
  else
    return false;  
}
 8002166:	f1a0 0001 	sub.w	r0, r0, #1
 800216a:	fab0 f080 	clz	r0, r0
 800216e:	0940      	lsrs	r0, r0, #5
 8002170:	b013      	add	sp, #76	@ 0x4c
 8002172:	bd30      	pop	{r4, r5, pc}
 8002174:	08014560 	.word	0x08014560
 8002178:	08014570 	.word	0x08014570
 800217c:	08014584 	.word	0x08014584

08002180 <Gsm_MsgGetServiceNumber>:
//######################################################################################################
bool  Gsm_MsgGetServiceNumber(void)
{
 8002180:	b508      	push	{r3, lr}
  uint8_t answer;
  answer = Sim80x_SendAtCommand("AT+CSCA?\r\n",5000,1,"\r\n+CSCA:");
 8002182:	4809      	ldr	r0, [pc, #36]	@ (80021a8 <Gsm_MsgGetServiceNumber+0x28>)
 8002184:	4b09      	ldr	r3, [pc, #36]	@ (80021ac <Gsm_MsgGetServiceNumber+0x2c>)
 8002186:	2201      	movs	r2, #1
 8002188:	f241 3188 	movw	r1, #5000	@ 0x1388
 800218c:	f000 f88a 	bl	80022a4 <Sim80x_SendAtCommand>
  if((answer == 1) && (Sim80x.Gsm.MsgServiceNumber[0]!=0))
 8002190:	2801      	cmp	r0, #1
 8002192:	d106      	bne.n	80021a2 <Gsm_MsgGetServiceNumber+0x22>
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <Gsm_MsgGetServiceNumber+0x30>)
 8002196:	f893 0692 	ldrb.w	r0, [r3, #1682]	@ 0x692
 800219a:	3800      	subs	r0, #0
 800219c:	bf18      	it	ne
 800219e:	2001      	movne	r0, #1
    return true;
  else
    return false;
}
 80021a0:	bd08      	pop	{r3, pc}
    return false;
 80021a2:	2000      	movs	r0, #0
}
 80021a4:	bd08      	pop	{r3, pc}
 80021a6:	bf00      	nop
 80021a8:	080145a8 	.word	0x080145a8
 80021ac:	0801459c 	.word	0x0801459c
 80021b0:	20000230 	.word	0x20000230

080021b4 <Gsm_MsgGetTextModeParameter>:
  else
    return false;
}
//######################################################################################################
bool  Gsm_MsgGetTextModeParameter(void)
{
 80021b4:	b508      	push	{r3, lr}
  uint8_t answer;
  answer = Sim80x_SendAtCommand("AT+CSMP?\r\n",500,1,"\r\nOK\r\n");
 80021b6:	2201      	movs	r2, #1
 80021b8:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <Gsm_MsgGetTextModeParameter+0x1c>)
 80021ba:	4806      	ldr	r0, [pc, #24]	@ (80021d4 <Gsm_MsgGetTextModeParameter+0x20>)
 80021bc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80021c0:	f000 f870 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer == 1)
    return true;
  else
    return false;  
}
 80021c4:	f1a0 0001 	sub.w	r0, r0, #1
 80021c8:	fab0 f080 	clz	r0, r0
 80021cc:	0940      	lsrs	r0, r0, #5
 80021ce:	bd08      	pop	{r3, pc}
 80021d0:	08014908 	.word	0x08014908
 80021d4:	080145b4 	.word	0x080145b4

080021d8 <Gsm_MsgSetTextModeParameter>:
//######################################################################################################
bool  Gsm_MsgSetTextModeParameter(uint8_t fo,uint8_t vp,uint8_t pid,uint8_t dcs)
{
 80021d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021da:	b095      	sub	sp, #84	@ 0x54
  uint8_t answer;
  char str[32];
  char strParam[32];
  snprintf(str,sizeof(str),"AT+CSMP=%d,%d,%d,%d\r\n",fo,vp,pid,dcs);
 80021dc:	e9cd 2301 	strd	r2, r3, [sp, #4]
{
 80021e0:	4604      	mov	r4, r0
 80021e2:	460d      	mov	r5, r1
 80021e4:	4616      	mov	r6, r2
 80021e6:	461f      	mov	r7, r3
  snprintf(str,sizeof(str),"AT+CSMP=%d,%d,%d,%d\r\n",fo,vp,pid,dcs);
 80021e8:	9100      	str	r1, [sp, #0]
 80021ea:	4603      	mov	r3, r0
 80021ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002224 <Gsm_MsgSetTextModeParameter+0x4c>)
 80021ee:	2120      	movs	r1, #32
 80021f0:	a804      	add	r0, sp, #16
 80021f2:	f00e faf7 	bl	80107e4 <sniprintf>
  snprintf(strParam,sizeof(strParam),"AT+CSMP=%d,%d,%d,%d\r\nOK\r\n",fo,vp,pid,dcs);
 80021f6:	4623      	mov	r3, r4
 80021f8:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80021fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <Gsm_MsgSetTextModeParameter+0x50>)
 80021fe:	9500      	str	r5, [sp, #0]
 8002200:	2120      	movs	r1, #32
 8002202:	a80c      	add	r0, sp, #48	@ 0x30
 8002204:	f00e faee 	bl	80107e4 <sniprintf>
  answer = Sim80x_SendAtCommand(str,500,1,strParam);
 8002208:	ab0c      	add	r3, sp, #48	@ 0x30
 800220a:	2201      	movs	r2, #1
 800220c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002210:	a804      	add	r0, sp, #16
 8002212:	f000 f847 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer == 1)
    return true;
  else
    return false;
}
 8002216:	f1a0 0001 	sub.w	r0, r0, #1
 800221a:	fab0 f080 	clz	r0, r0
 800221e:	0940      	lsrs	r0, r0, #5
 8002220:	b015      	add	sp, #84	@ 0x54
 8002222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002224:	080145c0 	.word	0x080145c0
 8002228:	080145d8 	.word	0x080145d8

0800222c <Sim80x_SendString>:
//######################################################################################################################
//######################################################################################################################
//######################################################################################################################
void	Sim80x_SendString(char *str)
{
	if(*str == 0) return;
 800222c:	7803      	ldrb	r3, [r0, #0]
 800222e:	b903      	cbnz	r3, 8002232 <Sim80x_SendString+0x6>
 8002230:	4770      	bx	lr
{
 8002232:	b510      	push	{r4, lr}
 8002234:	4604      	mov	r4, r0
	while(_SIM80X_USART.hdmatx->State != HAL_DMA_STATE_READY)
		osDelay(10);
  #else
//    if(osMutexWait(GsmMutexId, 500) == osOK)
    {
        HAL_UART_Transmit(&_SIM80X_USART,(uint8_t*)str,strlen(str),100);
 8002236:	f7fe f85b 	bl	80002f0 <strlen>
 800223a:	4602      	mov	r2, r0
 800223c:	4621      	mov	r1, r4
 800223e:	4805      	ldr	r0, [pc, #20]	@ (8002254 <Sim80x_SendString+0x28>)
 8002240:	2364      	movs	r3, #100	@ 0x64
 8002242:	b292      	uxth	r2, r2
 8002244:	f00b f90c 	bl	800d460 <HAL_UART_Transmit>
//        osMutexRelease(GsmMutexId);
    }
  osDelay(10);
  #endif
}
 8002248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osDelay(10);
 800224c:	200a      	movs	r0, #10
 800224e:	f00b ba93 	b.w	800d778 <osDelay>
 8002252:	bf00      	nop
 8002254:	20001650 	.word	0x20001650

08002258 <Sim80x_SendRaw>:
//######################################################################################################################
void  Sim80x_SendRaw(uint8_t *Data,uint16_t len)
{
 8002258:	b508      	push	{r3, lr}
 800225a:	4684      	mov	ip, r0
 800225c:	460a      	mov	r2, r1
	while(_SIM80X_USART.hdmatx->State != HAL_DMA_STATE_READY)
		osDelay(10);
  #else
//    if(osMutexWait(GsmMutexId, 500) == osOK)
    {
        HAL_UART_Transmit(&_SIM80X_USART,Data,len,400);
 800225e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002262:	4804      	ldr	r0, [pc, #16]	@ (8002274 <Sim80x_SendRaw+0x1c>)
 8002264:	4661      	mov	r1, ip
 8002266:	f00b f8fb 	bl	800d460 <HAL_UART_Transmit>
//        osMutexRelease(GsmMutexId);
    }
  osDelay(10);
  #endif

}
 800226a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osDelay(10);
 800226e:	200a      	movs	r0, #10
 8002270:	f00b ba82 	b.w	800d778 <osDelay>
 8002274:	20001650 	.word	0x20001650

08002278 <Sim80x_RxCallBack>:
//######################################################################################################################
void	Sim80x_RxCallBack(uint8_t ch)
{
 8002278:	b510      	push	{r4, lr}
 800227a:	4604      	mov	r4, r0
    Sim80x.UsartRxLastTime = HAL_GetTick();
 800227c:	f007 fb8e 	bl	800999c <HAL_GetTick>
 8002280:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <Sim80x_RxCallBack+0x28>)
    Sim80x.UsartRxBuffer[Sim80x.UsartRxIndex] = ch; //Sim80x.UsartRxTemp;
 8002282:	881a      	ldrh	r2, [r3, #0]
    Sim80x.UsartRxLastTime = HAL_GetTick();
 8002284:	2100      	movs	r1, #0
 8002286:	e9c3 01c2 	strd	r0, r1, [r3, #776]	@ 0x308
    Sim80x.UsartRxBuffer[Sim80x.UsartRxIndex] = ch; //Sim80x.UsartRxTemp;
 800228a:	1898      	adds	r0, r3, r2
    if(Sim80x.UsartRxIndex < (_SIM80X_BUFFER_SIZE-1))
 800228c:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8002290:	428a      	cmp	r2, r1
      Sim80x.UsartRxIndex++;
 8002292:	bf98      	it	ls
 8002294:	3201      	addls	r2, #1
    Sim80x.UsartRxBuffer[Sim80x.UsartRxIndex] = ch; //Sim80x.UsartRxTemp;
 8002296:	70c4      	strb	r4, [r0, #3]
      Sim80x.UsartRxIndex++;
 8002298:	bf98      	it	ls
 800229a:	801a      	strhls	r2, [r3, #0]
}
 800229c:	bd10      	pop	{r4, pc}
 800229e:	bf00      	nop
 80022a0:	20000230 	.word	0x20000230

080022a4 <Sim80x_SendAtCommand>:
//######################################################################################################################
uint8_t     Sim80x_SendAtCommand(char *AtCommand, int32_t MaxWaiting_ms, uint8_t HowMuchAnswers,...)
{
 80022a4:	b40c      	push	{r2, r3}
 80022a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while(Sim80x.Status.Busy == 1)
 80022aa:	4e4e      	ldr	r6, [pc, #312]	@ (80023e4 <Sim80x_SendAtCommand+0x140>)
{
 80022ac:	b083      	sub	sp, #12
  while(Sim80x.Status.Busy == 1)
 80022ae:	f896 3330 	ldrb.w	r3, [r6, #816]	@ 0x330
{
 80022b2:	af00      	add	r7, sp, #0
  while(Sim80x.Status.Busy == 1)
 80022b4:	079a      	lsls	r2, r3, #30
{
 80022b6:	f897 4030 	ldrb.w	r4, [r7, #48]	@ 0x30
 80022ba:	4682      	mov	sl, r0
 80022bc:	460d      	mov	r5, r1
  while(Sim80x.Status.Busy == 1)
 80022be:	d506      	bpl.n	80022ce <Sim80x_SendAtCommand+0x2a>
  {
    osDelay(100);
 80022c0:	2064      	movs	r0, #100	@ 0x64
 80022c2:	f00b fa59 	bl	800d778 <osDelay>
  while(Sim80x.Status.Busy == 1)
 80022c6:	f896 3330 	ldrb.w	r3, [r6, #816]	@ 0x330
 80022ca:	079b      	lsls	r3, r3, #30
 80022cc:	d4f8      	bmi.n	80022c0 <Sim80x_SendAtCommand+0x1c>
  }
  Sim80x.AtCommand.LowPowerTime = HAL_GetTick() + MaxWaiting_ms + 50;
 80022ce:	f007 fb65 	bl	800999c <HAL_GetTick>
 80022d2:	f105 0332 	add.w	r3, r5, #50	@ 0x32
 80022d6:	4418      	add	r0, r3
 80022d8:	f8c6 0640 	str.w	r0, [r6, #1600]	@ 0x640
  if(GSM_DTR_READ) {
 80022dc:	2120      	movs	r1, #32
 80022de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e2:	f008 fd31 	bl	800ad48 <HAL_GPIO_ReadPin>
 80022e6:	2800      	cmp	r0, #0
 80022e8:	d16d      	bne.n	80023c6 <Sim80x_SendAtCommand+0x122>
	  GSM_DTR_LOW;
	  osDelay(100);
	  Sim80x.AtCommand.LowPowerTime = HAL_GetTick() + 100;
  }
  Sim80x.Status.Busy = 1;
 80022ea:	f896 3330 	ldrb.w	r3, [r6, #816]	@ 0x330
  Sim80x.AtCommand.FindAnswer = 0;
 80022ee:	f04f 0800 	mov.w	r8, #0
  Sim80x.Status.Busy = 1;
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	f886 3330 	strb.w	r3, [r6, #816]	@ 0x330
  Sim80x.AtCommand.FindAnswer = 0;
 80022fa:	f886 8648 	strb.w	r8, [r6, #1608]	@ 0x648
  //Sim80x.AtCommand.ReceiveAnswerExeTime=0;
  Sim80x.AtCommand.SendCommandStartTime = HAL_GetTick();
 80022fe:	f007 fb4d 	bl	800999c <HAL_GetTick>
  Sim80x.AtCommand.ReceiveAnswerMaxWaiting = MaxWaiting_ms;
  memset(Sim80x.AtCommand.ReceiveAnswer,0,sizeof(Sim80x.AtCommand.ReceiveAnswer));
  va_list tag;
	va_start (tag,HowMuchAnswers);
	char *arg[HowMuchAnswers];
 8002302:	ea4f 0984 	mov.w	r9, r4, lsl #2
  Sim80x.AtCommand.SendCommandStartTime = HAL_GetTick();
 8002306:	f8c6 063c 	str.w	r0, [r6, #1596]	@ 0x63c
  memset(Sim80x.AtCommand.ReceiveAnswer,0,sizeof(Sim80x.AtCommand.ReceiveAnswer));
 800230a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800230e:	4836      	ldr	r0, [pc, #216]	@ (80023e8 <Sim80x_SendAtCommand+0x144>)
  Sim80x.AtCommand.ReceiveAnswerMaxWaiting = MaxWaiting_ms;
 8002310:	f8c6 5644 	str.w	r5, [r6, #1604]	@ 0x644
  memset(Sim80x.AtCommand.ReceiveAnswer,0,sizeof(Sim80x.AtCommand.ReceiveAnswer));
 8002314:	4641      	mov	r1, r8
 8002316:	f00e fbbd 	bl	8010a94 <memset>
	char *arg[HowMuchAnswers];
 800231a:	f109 0307 	add.w	r3, r9, #7
 800231e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
	va_start (tag,HowMuchAnswers);
 8002322:	f107 0234 	add.w	r2, r7, #52	@ 0x34
	char *arg[HowMuchAnswers];
 8002326:	ebad 0d03 	sub.w	sp, sp, r3
	va_start (tag,HowMuchAnswers);
 800232a:	607a      	str	r2, [r7, #4]
	char *arg[HowMuchAnswers];
 800232c:	46eb      	mov	fp, sp
	for(uint8_t i=0; i<HowMuchAnswers ; i++)
 800232e:	b18c      	cbz	r4, 8002354 <Sim80x_SendAtCommand+0xb0>
 8002330:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 80023e8 <Sim80x_SendAtCommand+0x144>
	{
		arg[i] = va_arg (tag, char *);
 8002334:	4614      	mov	r4, r2
 8002336:	f1ab 0b04 	sub.w	fp, fp, #4
 800233a:	4491      	add	r9, r2
 800233c:	6821      	ldr	r1, [r4, #0]
 800233e:	f84b 1f04 	str.w	r1, [fp, #4]!
 8002342:	3404      	adds	r4, #4
		strncpy(Sim80x.AtCommand.ReceiveAnswer[i],arg[i],sizeof(Sim80x.AtCommand.ReceiveAnswer[0]));
 8002344:	4640      	mov	r0, r8
 8002346:	2240      	movs	r2, #64	@ 0x40
		arg[i] = va_arg (tag, char *);
 8002348:	607c      	str	r4, [r7, #4]
	for(uint8_t i=0; i<HowMuchAnswers ; i++)
 800234a:	4490      	add	r8, r2
		strncpy(Sim80x.AtCommand.ReceiveAnswer[i],arg[i],sizeof(Sim80x.AtCommand.ReceiveAnswer[0]));
 800234c:	f00e fbc9 	bl	8010ae2 <strncpy>
	for(uint8_t i=0; i<HowMuchAnswers ; i++)
 8002350:	454c      	cmp	r4, r9
 8002352:	d1f3      	bne.n	800233c <Sim80x_SendAtCommand+0x98>
	}
  va_end (tag);
  strncpy(Sim80x.AtCommand.SendCommand,AtCommand, 120);
 8002354:	4825      	ldr	r0, [pc, #148]	@ (80023ec <Sim80x_SendAtCommand+0x148>)
 8002356:	2278      	movs	r2, #120	@ 0x78
 8002358:	4651      	mov	r1, sl
 800235a:	f00e fbc2 	bl	8010ae2 <strncpy>
	if(*str == 0) return;
 800235e:	f896 333c 	ldrb.w	r3, [r6, #828]	@ 0x33c
 8002362:	b1a3      	cbz	r3, 800238e <Sim80x_SendAtCommand+0xea>
        HAL_UART_Transmit(&_SIM80X_USART,(uint8_t*)str,strlen(str),100);
 8002364:	4821      	ldr	r0, [pc, #132]	@ (80023ec <Sim80x_SendAtCommand+0x148>)
 8002366:	f7fd ffc3 	bl	80002f0 <strlen>
 800236a:	4602      	mov	r2, r0
 800236c:	491f      	ldr	r1, [pc, #124]	@ (80023ec <Sim80x_SendAtCommand+0x148>)
 800236e:	4820      	ldr	r0, [pc, #128]	@ (80023f0 <Sim80x_SendAtCommand+0x14c>)
 8002370:	2364      	movs	r3, #100	@ 0x64
 8002372:	b292      	uxth	r2, r2
 8002374:	f00b f874 	bl	800d460 <HAL_UART_Transmit>
  osDelay(10);
 8002378:	200a      	movs	r0, #10
 800237a:	f00b f9fd 	bl	800d778 <osDelay>
 800237e:	e006      	b.n	800238e <Sim80x_SendAtCommand+0xea>
  Sim80x_SendString(Sim80x.AtCommand.SendCommand);
  if(_SIM80X_DEBUG == 2) printf("SIM < %s", AtCommand);
  while( MaxWaiting_ms > 0)
  {
    osDelay(10);
 8002380:	200a      	movs	r0, #10
 8002382:	f00b f9f9 	bl	800d778 <osDelay>
    if(Sim80x.AtCommand.FindAnswer > 0)
 8002386:	f896 0648 	ldrb.w	r0, [r6, #1608]	@ 0x648
      return Sim80x.AtCommand.FindAnswer;    
    MaxWaiting_ms-=10;
 800238a:	3d0a      	subs	r5, #10
    if(Sim80x.AtCommand.FindAnswer > 0)
 800238c:	b9a8      	cbnz	r0, 80023ba <Sim80x_SendAtCommand+0x116>
  while( MaxWaiting_ms > 0)
 800238e:	2d00      	cmp	r5, #0
 8002390:	dcf6      	bgt.n	8002380 <Sim80x_SendAtCommand+0xdc>
  }
  memset(Sim80x.AtCommand.ReceiveAnswer,0,sizeof(Sim80x.AtCommand.ReceiveAnswer));
 8002392:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8002396:	2100      	movs	r1, #0
 8002398:	4813      	ldr	r0, [pc, #76]	@ (80023e8 <Sim80x_SendAtCommand+0x144>)
 800239a:	f00e fb7b 	bl	8010a94 <memset>
  Sim80x.Status.Busy=0;
 800239e:	f896 3330 	ldrb.w	r3, [r6, #816]	@ 0x330
 80023a2:	f36f 0341 	bfc	r3, #1, #1
 80023a6:	f886 3330 	strb.w	r3, [r6, #816]	@ 0x330
  Sim80x.AtCommand.LowPowerTime = HAL_GetTick() + 50;
 80023aa:	f007 faf7 	bl	800999c <HAL_GetTick>
 80023ae:	f100 0332 	add.w	r3, r0, #50	@ 0x32
  return Sim80x.AtCommand.FindAnswer;
 80023b2:	f896 0648 	ldrb.w	r0, [r6, #1608]	@ 0x648
  Sim80x.AtCommand.LowPowerTime = HAL_GetTick() + 50;
 80023b6:	f8c6 3640 	str.w	r3, [r6, #1600]	@ 0x640
}
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c2:	b002      	add	sp, #8
 80023c4:	4770      	bx	lr
	  GSM_DTR_LOW;
 80023c6:	2200      	movs	r2, #0
 80023c8:	2120      	movs	r1, #32
 80023ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ce:	f008 fcc1 	bl	800ad54 <HAL_GPIO_WritePin>
	  osDelay(100);
 80023d2:	2064      	movs	r0, #100	@ 0x64
 80023d4:	f00b f9d0 	bl	800d778 <osDelay>
	  Sim80x.AtCommand.LowPowerTime = HAL_GetTick() + 100;
 80023d8:	f007 fae0 	bl	800999c <HAL_GetTick>
 80023dc:	3064      	adds	r0, #100	@ 0x64
 80023de:	f8c6 0640 	str.w	r0, [r6, #1600]	@ 0x640
 80023e2:	e782      	b.n	80022ea <Sim80x_SendAtCommand+0x46>
 80023e4:	20000230 	.word	0x20000230
 80023e8:	200005ec 	.word	0x200005ec
 80023ec:	2000056c 	.word	0x2000056c
 80023f0:	20001650 	.word	0x20001650

080023f4 <StartSim80xTask>:
    osDelay(Sim80x.Status.Power ? 3 : 50);
  }    
}
//######################################################################################################################
void StartSim80xTask(void const * argument)
{ 
 80023f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t TimeForSlowRun=0;
  #if( _SIM80X_USE_GPRS==1)
  uint32_t TimeForSlowRunGPRS=0;
  #endif
  uint8_t UnreadMsgCounter=1;
  printf("SIM TaskStart\r\n");
 80023f8:	4864      	ldr	r0, [pc, #400]	@ (800258c <StartSim80xTask+0x198>)
 80023fa:	4c65      	ldr	r4, [pc, #404]	@ (8002590 <StartSim80xTask+0x19c>)

//      Gsm_UserNewCall(Sim80x.Gsm.CallerNumber);
    }    
    //###########################################
    if(HAL_GetTick() - TimeForSlowRun > (Sim80x.Status.RegisterdToNetwork ? 45000:10000) && Sim80x.GPRS.Connection != GPRSConnection_ConnectOK) { // nie przy aktywnym GPRS
      Sim80x_SendAtCommand("AT+CSQ\r\n",200,1,"\r\n+CSQ:");
 80023fc:	f8df b1a8 	ldr.w	fp, [pc, #424]	@ 80025a8 <StartSim80xTask+0x1b4>
  printf("SIM TaskStart\r\n");
 8002400:	f00e f9e8 	bl	80107d4 <puts>
  uint32_t TimeForSlowRunGPRS=0;
 8002404:	f04f 0800 	mov.w	r8, #0
  uint8_t UnreadMsgCounter=1;
 8002408:	2701      	movs	r7, #1
  uint32_t TimeForSlowRun=0;
 800240a:	46c1      	mov	r9, r8
 800240c:	f204 75e5 	addw	r5, r4, #2021	@ 0x7e5
    if(Sim80x.Status.Power == 0 && Sim80x.GPRS.ReceiveDataLen == 0) {
 8002410:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8002414:	0759      	lsls	r1, r3, #29
 8002416:	d409      	bmi.n	800242c <StartSim80xTask+0x38>
 8002418:	f8b4 382e 	ldrh.w	r3, [r4, #2094]	@ 0x82e
 800241c:	b933      	cbnz	r3, 800242c <StartSim80xTask+0x38>
	  osDelay(100);
 800241e:	2064      	movs	r0, #100	@ 0x64
 8002420:	f00b f9aa 	bl	800d778 <osDelay>
    if(Sim80x.Status.Power == 0 && Sim80x.GPRS.ReceiveDataLen == 0) {
 8002424:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8002428:	0759      	lsls	r1, r3, #29
 800242a:	d5f5      	bpl.n	8002418 <StartSim80xTask+0x24>
    if(HAL_GetTick()-TimeForSlowRunGPRS > 5000) {
 800242c:	f007 fab6 	bl	800999c <HAL_GetTick>
 8002430:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002434:	eba0 0008 	sub.w	r0, r0, r8
 8002438:	4298      	cmp	r0, r3
 800243a:	d87c      	bhi.n	8002536 <StartSim80xTask+0x142>
    if(Sim80x.GPRS.ReceiveDataLen > 0) {                                        // POPRAWKA NA GUBIONE DANE Z IPD
 800243c:	f8b4 682e 	ldrh.w	r6, [r4, #2094]	@ 0x82e
 8002440:	2e00      	cmp	r6, #0
 8002442:	d165      	bne.n	8002510 <StartSim80xTask+0x11c>
 8002444:	4e53      	ldr	r6, [pc, #332]	@ (8002594 <StartSim80xTask+0x1a0>)
        Sim80x.Gsm.HaveNewMsg[msgnum] = 0;
 8002446:	f04f 0a00 	mov.w	sl, #0
 800244a:	e001      	b.n	8002450 <StartSim80xTask+0x5c>
    for(uint8_t msgnum=0 ;msgnum<sizeof(Sim80x.Gsm.HaveNewMsg) ; msgnum++)
 800244c:	42ae      	cmp	r6, r5
 800244e:	d00d      	beq.n	800246c <StartSim80xTask+0x78>
      if(Sim80x.Gsm.HaveNewMsg[msgnum] > 0) {
 8002450:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8002454:	2800      	cmp	r0, #0
 8002456:	d0f9      	beq.n	800244c <StartSim80xTask+0x58>
        if(Gsm_MsgRead(Sim80x.Gsm.HaveNewMsg[msgnum])==true) {
 8002458:	f7ff fe2a 	bl	80020b0 <Gsm_MsgRead>
 800245c:	2800      	cmp	r0, #0
 800245e:	d13f      	bne.n	80024e0 <StartSim80xTask+0xec>
        Gsm_MsgGetMemoryStatus();
 8002460:	f7ff fdae 	bl	8001fc0 <Gsm_MsgGetMemoryStatus>
    for(uint8_t msgnum=0 ;msgnum<sizeof(Sim80x.Gsm.HaveNewMsg) ; msgnum++)
 8002464:	42ae      	cmp	r6, r5
        Sim80x.Gsm.HaveNewMsg[msgnum] = 0;
 8002466:	f886 a000 	strb.w	sl, [r6]
    for(uint8_t msgnum=0 ;msgnum<sizeof(Sim80x.Gsm.HaveNewMsg) ; msgnum++)
 800246a:	d1f1      	bne.n	8002450 <StartSim80xTask+0x5c>
    if(Sim80x.Gsm.MsgUsed > 0) {
 800246c:	f894 37db 	ldrb.w	r3, [r4, #2011]	@ 0x7db
 8002470:	2b00      	cmp	r3, #0
 8002472:	d164      	bne.n	800253e <StartSim80xTask+0x14a>
    if(Sim80x.Gsm.HaveNewCall == 1) {
 8002474:	f894 364c 	ldrb.w	r3, [r4, #1612]	@ 0x64c
 8002478:	07da      	lsls	r2, r3, #31
 800247a:	d43b      	bmi.n	80024f4 <StartSim80xTask+0x100>
    if(HAL_GetTick() - TimeForSlowRun > (Sim80x.Status.RegisterdToNetwork ? 45000:10000) && Sim80x.GPRS.Connection != GPRSConnection_ConnectOK) { // nie przy aktywnym GPRS
 800247c:	f007 fa8e 	bl	800999c <HAL_GetTick>
 8002480:	f894 1330 	ldrb.w	r1, [r4, #816]	@ 0x330
 8002484:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8002488:	f011 0f01 	tst.w	r1, #1
 800248c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002490:	eba0 0009 	sub.w	r0, r0, r9
 8002494:	bf18      	it	ne
 8002496:	4613      	movne	r3, r2
 8002498:	4298      	cmp	r0, r3
 800249a:	d916      	bls.n	80024ca <StartSim80xTask+0xd6>
 800249c:	f894 382b 	ldrb.w	r3, [r4, #2091]	@ 0x82b
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d012      	beq.n	80024ca <StartSim80xTask+0xd6>
      Sim80x_SendAtCommand("AT+CSQ\r\n",200,1,"\r\n+CSQ:");
 80024a4:	2201      	movs	r2, #1
 80024a6:	21c8      	movs	r1, #200	@ 0xc8
 80024a8:	465b      	mov	r3, fp
 80024aa:	483b      	ldr	r0, [pc, #236]	@ (8002598 <StartSim80xTask+0x1a4>)
 80024ac:	f7ff fefa 	bl	80022a4 <Sim80x_SendAtCommand>
      Sim80x_SendAtCommand("AT+CREG?\r\n",200,1,"\r\n+CREG:");
 80024b0:	4b3a      	ldr	r3, [pc, #232]	@ (800259c <StartSim80xTask+0x1a8>)
 80024b2:	483b      	ldr	r0, [pc, #236]	@ (80025a0 <StartSim80xTask+0x1ac>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	21c8      	movs	r1, #200	@ 0xc8
 80024b8:	f7ff fef4 	bl	80022a4 <Sim80x_SendAtCommand>
      Gsm_MsgGetMemoryStatus();
 80024bc:	f7ff fd80 	bl	8001fc0 <Gsm_MsgGetMemoryStatus>
      SysTimeSync();
 80024c0:	f006 f9a2 	bl	8008808 <SysTimeSync>
      TimeForSlowRun = HAL_GetTick();
 80024c4:	f007 fa6a 	bl	800999c <HAL_GetTick>
 80024c8:	4681      	mov	r9, r0
    }

    if(GSM_DTR_READ == 0 && HAL_GetTick() > Sim80x.AtCommand.LowPowerTime && Sim80x.Status.LowPowerMode) {
 80024ca:	2120      	movs	r1, #32
 80024cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024d0:	f008 fc3a 	bl	800ad48 <HAL_GPIO_ReadPin>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	d03c      	beq.n	8002552 <StartSim80xTask+0x15e>
      GSM_DTR_HI;
    }
    //###########################################
//    Gsm_User(HAL_GetTick());
    //###########################################
    osDelay(5);
 80024d8:	2005      	movs	r0, #5
 80024da:	f00b f94d 	bl	800d778 <osDelay>
 80024de:	e797      	b.n	8002410 <StartSim80xTask+0x1c>
          osDelay(100);
 80024e0:	2064      	movs	r0, #100	@ 0x64
 80024e2:	f00b f949 	bl	800d778 <osDelay>
          Gsm_MsgDelete(Sim80x.Gsm.HaveNewMsg[msgnum]);
 80024e6:	7830      	ldrb	r0, [r6, #0]
 80024e8:	f7ff fe22 	bl	8002130 <Gsm_MsgDelete>
          osDelay(100);
 80024ec:	2064      	movs	r0, #100	@ 0x64
 80024ee:	f00b f943 	bl	800d778 <osDelay>
 80024f2:	e7b5      	b.n	8002460 <StartSim80xTask+0x6c>
      Sim80x.Gsm.GsmVoiceStatus = GsmVoiceStatus_Ringing;
 80024f4:	2208      	movs	r2, #8
      Sim80x.Gsm.HaveNewCall = 0;
 80024f6:	f36f 0300 	bfc	r3, #0, #1
      osDelay(500);
 80024fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
      Sim80x.Gsm.GsmVoiceStatus = GsmVoiceStatus_Ringing;
 80024fe:	f884 265a 	strb.w	r2, [r4, #1626]	@ 0x65a
      Sim80x.Gsm.HaveNewCall = 0;
 8002502:	f884 364c 	strb.w	r3, [r4, #1612]	@ 0x64c
      osDelay(500);
 8002506:	f00b f937 	bl	800d778 <osDelay>
	  Gsm_CallDisconnect();		// rozlacz po 3 sekundach
 800250a:	f7ff fce3 	bl	8001ed4 <Gsm_CallDisconnect>
 800250e:	e7b5      	b.n	800247c <StartSim80xTask+0x88>
      char *mptr = malloc(Sim80x.GPRS.ReceiveDataLen);                          // tymczasowy bufor
 8002510:	4630      	mov	r0, r6
 8002512:	f00c fa0d 	bl	800e930 <malloc>
      memcpy(mptr, Sim80x.GPRS.ReceiveDataBuf, Sim80x.GPRS.ReceiveDataLen);     // skopiuj dane IPD do tymczasowego
 8002516:	4632      	mov	r2, r6
      char *mptr = malloc(Sim80x.GPRS.ReceiveDataLen);                          // tymczasowy bufor
 8002518:	4682      	mov	sl, r0
      memcpy(mptr, Sim80x.GPRS.ReceiveDataBuf, Sim80x.GPRS.ReceiveDataLen);     // skopiuj dane IPD do tymczasowego
 800251a:	4922      	ldr	r1, [pc, #136]	@ (80025a4 <StartSim80xTask+0x1b0>)
 800251c:	f00e fbec 	bl	8010cf8 <memcpy>
      Sim80x.GPRS.ReceiveDataLen = 0;                                           // zaznacz ze odebrano dane
 8002520:	2300      	movs	r3, #0
      GPRS_UserNewData(mptr, mlen);                                             // interpretacja w trakcie kt�rej mog�
 8002522:	4650      	mov	r0, sl
 8002524:	4631      	mov	r1, r6
      Sim80x.GPRS.ReceiveDataLen = 0;                                           // zaznacz ze odebrano dane
 8002526:	f8a4 382e 	strh.w	r3, [r4, #2094]	@ 0x82e
      GPRS_UserNewData(mptr, mlen);                                             // interpretacja w trakcie kt�rej mog�
 800252a:	f005 fec1 	bl	80082b0 <GPRS_UserNewData>
      free(mptr);                                                               // przyjsc nowe dane i nie zostan� utracone
 800252e:	4650      	mov	r0, sl
 8002530:	f00c fa06 	bl	800e940 <free>
    for(uint8_t msgnum=0 ;msgnum<sizeof(Sim80x.Gsm.HaveNewMsg) ; msgnum++)
 8002534:	e786      	b.n	8002444 <StartSim80xTask+0x50>
      TimeForSlowRunGPRS=HAL_GetTick();
 8002536:	f007 fa31 	bl	800999c <HAL_GetTick>
 800253a:	4680      	mov	r8, r0
 800253c:	e77e      	b.n	800243c <StartSim80xTask+0x48>
      if(Gsm_MsgRead(UnreadMsgCounter)==true) {
 800253e:	4638      	mov	r0, r7
 8002540:	f7ff fdb6 	bl	80020b0 <Gsm_MsgRead>
 8002544:	b9b0      	cbnz	r0, 8002574 <StartSim80xTask+0x180>
      UnreadMsgCounter++;
 8002546:	3701      	adds	r7, #1
 8002548:	b2ff      	uxtb	r7, r7
        UnreadMsgCounter=0;      
 800254a:	2f96      	cmp	r7, #150	@ 0x96
 800254c:	bf08      	it	eq
 800254e:	2700      	moveq	r7, #0
 8002550:	e790      	b.n	8002474 <StartSim80xTask+0x80>
    if(GSM_DTR_READ == 0 && HAL_GetTick() > Sim80x.AtCommand.LowPowerTime && Sim80x.Status.LowPowerMode) {
 8002552:	f007 fa23 	bl	800999c <HAL_GetTick>
 8002556:	f8d4 3640 	ldr.w	r3, [r4, #1600]	@ 0x640
 800255a:	4298      	cmp	r0, r3
 800255c:	d9bc      	bls.n	80024d8 <StartSim80xTask+0xe4>
 800255e:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8002562:	069b      	lsls	r3, r3, #26
 8002564:	d5b8      	bpl.n	80024d8 <StartSim80xTask+0xe4>
      GSM_DTR_HI;
 8002566:	2201      	movs	r2, #1
 8002568:	2120      	movs	r1, #32
 800256a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800256e:	f008 fbf1 	bl	800ad54 <HAL_GPIO_WritePin>
 8002572:	e7b1      	b.n	80024d8 <StartSim80xTask+0xe4>
        osDelay(100);
 8002574:	2064      	movs	r0, #100	@ 0x64
 8002576:	f00b f8ff 	bl	800d778 <osDelay>
        Gsm_MsgDelete(UnreadMsgCounter);
 800257a:	4638      	mov	r0, r7
 800257c:	f7ff fdd8 	bl	8002130 <Gsm_MsgDelete>
        osDelay(100);
 8002580:	2064      	movs	r0, #100	@ 0x64
 8002582:	f00b f8f9 	bl	800d778 <osDelay>
        Gsm_MsgGetMemoryStatus();
 8002586:	f7ff fd1b 	bl	8001fc0 <Gsm_MsgGetMemoryStatus>
 800258a:	e7dc      	b.n	8002546 <StartSim80xTask+0x152>
 800258c:	080145f4 	.word	0x080145f4
 8002590:	20000230 	.word	0x20000230
 8002594:	20000a0b 	.word	0x20000a0b
 8002598:	0801460c 	.word	0x0801460c
 800259c:	08014618 	.word	0x08014618
 80025a0:	08014624 	.word	0x08014624
 80025a4:	20000a60 	.word	0x20000a60
 80025a8:	08014604 	.word	0x08014604

080025ac <Sim80x_InitValue>:
{
 80025ac:	b530      	push	{r4, r5, lr}
  Sim80x_SendAtCommand("ATE1\r\n",200,1,"ATE1\r\r\nOK\r\n");
 80025ae:	4b50      	ldr	r3, [pc, #320]	@ (80026f0 <Sim80x_InitValue+0x144>)
 80025b0:	4850      	ldr	r0, [pc, #320]	@ (80026f4 <Sim80x_InitValue+0x148>)
{
 80025b2:	b083      	sub	sp, #12
  Sim80x_SendAtCommand("ATE1\r\n",200,1,"ATE1\r\r\nOK\r\n");
 80025b4:	2201      	movs	r2, #1
 80025b6:	21c8      	movs	r1, #200	@ 0xc8
 80025b8:	f7ff fe74 	bl	80022a4 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+COLP=1\r\n",200,1,"AT+COLP=1\r\r\nOK\r\n");
 80025bc:	4b4e      	ldr	r3, [pc, #312]	@ (80026f8 <Sim80x_InitValue+0x14c>)
 80025be:	484f      	ldr	r0, [pc, #316]	@ (80026fc <Sim80x_InitValue+0x150>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	21c8      	movs	r1, #200	@ 0xc8
 80025c4:	f7ff fe6e 	bl	80022a4 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+CLIP=1\r\n",200,1,"AT+CLIP=1\r\r\nOK\r\n");
 80025c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002700 <Sim80x_InitValue+0x154>)
 80025ca:	484e      	ldr	r0, [pc, #312]	@ (8002704 <Sim80x_InitValue+0x158>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	21c8      	movs	r1, #200	@ 0xc8
 80025d0:	f7ff fe68 	bl	80022a4 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+FSHEX=0\r\n",200,1,"AT+FSHEX=0\r\r\nOK\r\n");
 80025d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002708 <Sim80x_InitValue+0x15c>)
 80025d6:	484d      	ldr	r0, [pc, #308]	@ (800270c <Sim80x_InitValue+0x160>)
 80025d8:	2201      	movs	r2, #1
 80025da:	21c8      	movs	r1, #200	@ 0xc8
 80025dc:	f7ff fe62 	bl	80022a4 <Sim80x_SendAtCommand>
  if(Sim80x_SendAtCommand("AT+CLTS?\r\n",200,2,"\r\n+CLTS: 0\r\n","\r\n+CLTS: 1\r\n") == 1) {
 80025e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002710 <Sim80x_InitValue+0x164>)
 80025e2:	9200      	str	r2, [sp, #0]
 80025e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002714 <Sim80x_InitValue+0x168>)
 80025e6:	484c      	ldr	r0, [pc, #304]	@ (8002718 <Sim80x_InitValue+0x16c>)
 80025e8:	2202      	movs	r2, #2
 80025ea:	21c8      	movs	r1, #200	@ 0xc8
 80025ec:	f7ff fe5a 	bl	80022a4 <Sim80x_SendAtCommand>
 80025f0:	2801      	cmp	r0, #1
 80025f2:	d04e      	beq.n	8002692 <Sim80x_InitValue+0xe6>
  Sim80x_SendAtCommand("AT+CREG=1\r\n",200,1,"AT+CREG=1\r\r\nOK\r\n");
 80025f4:	4b49      	ldr	r3, [pc, #292]	@ (800271c <Sim80x_InitValue+0x170>)
 80025f6:	484a      	ldr	r0, [pc, #296]	@ (8002720 <Sim80x_InitValue+0x174>)
  if(Sim80x.Gsm.MsgFormat != GsmMsgFormat_Text)
 80025f8:	4c4a      	ldr	r4, [pc, #296]	@ (8002724 <Sim80x_InitValue+0x178>)
  Sim80x_SendAtCommand("AT+CREG=1\r\n",200,1,"AT+CREG=1\r\r\nOK\r\n");
 80025fa:	2201      	movs	r2, #1
 80025fc:	21c8      	movs	r1, #200	@ 0xc8
 80025fe:	f7ff fe51 	bl	80022a4 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+CGNSURC=0\r\n",200,1,"\r\nOK\r\n");
 8002602:	4b49      	ldr	r3, [pc, #292]	@ (8002728 <Sim80x_InitValue+0x17c>)
 8002604:	4849      	ldr	r0, [pc, #292]	@ (800272c <Sim80x_InitValue+0x180>)
 8002606:	2201      	movs	r2, #1
 8002608:	21c8      	movs	r1, #200	@ 0xc8
 800260a:	f7ff fe4b 	bl	80022a4 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+CGNSPWR=1\r\n",1000,1,"\r\nOK\r\n");
 800260e:	4b46      	ldr	r3, [pc, #280]	@ (8002728 <Sim80x_InitValue+0x17c>)
 8002610:	4847      	ldr	r0, [pc, #284]	@ (8002730 <Sim80x_InitValue+0x184>)
 8002612:	2201      	movs	r2, #1
 8002614:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002618:	f7ff fe44 	bl	80022a4 <Sim80x_SendAtCommand>
  Gsm_MsgSetMemoryLocation(GsmMsgMemory_OnModule);
 800261c:	2002      	movs	r0, #2
 800261e:	f7ff fcf1 	bl	8002004 <Gsm_MsgSetMemoryLocation>
  Gsm_MsgSetFormat(GsmMsgFormat_Text);
 8002622:	2002      	movs	r0, #2
 8002624:	f7ff fc96 	bl	8001f54 <Gsm_MsgSetFormat>
  Gsm_MsgSetTextModeParameter(17,167,0,0);
 8002628:	2300      	movs	r3, #0
 800262a:	461a      	mov	r2, r3
 800262c:	21a7      	movs	r1, #167	@ 0xa7
 800262e:	2011      	movs	r0, #17
 8002630:	f7ff fdd2 	bl	80021d8 <Gsm_MsgSetTextModeParameter>
  Gsm_MsgGetCharacterFormat();
 8002634:	f7ff fd10 	bl	8002058 <Gsm_MsgGetCharacterFormat>
  Gsm_MsgGetFormat();
 8002638:	f7ff fc6a 	bl	8001f10 <Gsm_MsgGetFormat>
  if(Sim80x.Gsm.MsgFormat != GsmMsgFormat_Text)
 800263c:	f894 37d9 	ldrb.w	r3, [r4, #2009]	@ 0x7d9
 8002640:	2b02      	cmp	r3, #2
 8002642:	d122      	bne.n	800268a <Sim80x_InitValue+0xde>
  Gsm_MsgGetServiceNumber();
 8002644:	f7ff fd9c 	bl	8002180 <Gsm_MsgGetServiceNumber>
  Gsm_MsgGetTextModeParameter();
 8002648:	f7ff fdb4 	bl	80021b4 <Gsm_MsgGetTextModeParameter>
  Sim80x.Status.LowPowerMode = 1;
 800264c:	f894 1330 	ldrb.w	r1, [r4, #816]	@ 0x330
  Sim80x_SendAtCommand("AT+CSCLK=1\r\n",500,2,"\r\nOK\r\n","\r\nERROR\r\n");
 8002650:	4838      	ldr	r0, [pc, #224]	@ (8002734 <Sim80x_InitValue+0x188>)
 8002652:	9000      	str	r0, [sp, #0]
  Sim80x.Status.LowPowerMode = 1;
 8002654:	f041 0120 	orr.w	r1, r1, #32
 8002658:	f884 1330 	strb.w	r1, [r4, #816]	@ 0x330
  Sim80x_SendAtCommand("AT+CSCLK=1\r\n",500,2,"\r\nOK\r\n","\r\nERROR\r\n");
 800265c:	4b32      	ldr	r3, [pc, #200]	@ (8002728 <Sim80x_InitValue+0x17c>)
 800265e:	4836      	ldr	r0, [pc, #216]	@ (8002738 <Sim80x_InitValue+0x18c>)
 8002660:	2202      	movs	r2, #2
 8002662:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002666:	f7ff fe1d 	bl	80022a4 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+CREG?\r\n",200,1,"\r\n+CREG:");
 800266a:	4b34      	ldr	r3, [pc, #208]	@ (800273c <Sim80x_InitValue+0x190>)
 800266c:	4834      	ldr	r0, [pc, #208]	@ (8002740 <Sim80x_InitValue+0x194>)
 800266e:	2201      	movs	r2, #1
 8002670:	21c8      	movs	r1, #200	@ 0xc8
 8002672:	f7ff fe17 	bl	80022a4 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT+CGNSPWR=0\r\n",500,1,"\r\nOK\r\n");
 8002676:	4b2c      	ldr	r3, [pc, #176]	@ (8002728 <Sim80x_InitValue+0x17c>)
 8002678:	4832      	ldr	r0, [pc, #200]	@ (8002744 <Sim80x_InitValue+0x198>)
 800267a:	2201      	movs	r2, #1
 800267c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002680:	f7ff fe10 	bl	80022a4 <Sim80x_SendAtCommand>
  return true;
 8002684:	2001      	movs	r0, #1
}
 8002686:	b003      	add	sp, #12
 8002688:	bd30      	pop	{r4, r5, pc}
    Gsm_MsgSetFormat(GsmMsgFormat_Text);
 800268a:	2002      	movs	r0, #2
 800268c:	f7ff fc62 	bl	8001f54 <Gsm_MsgSetFormat>
 8002690:	e7d8      	b.n	8002644 <Sim80x_InitValue+0x98>
	  Sim80x_SendAtCommand("AT+CLTS=1\r\n",200,1,"AT+CLTS=1\r\r\nOK\r\n");
 8002692:	4604      	mov	r4, r0
 8002694:	4602      	mov	r2, r0
 8002696:	4b2c      	ldr	r3, [pc, #176]	@ (8002748 <Sim80x_InitValue+0x19c>)
  Sim80x.Status.LowPowerMode = 0;
 8002698:	4d22      	ldr	r5, [pc, #136]	@ (8002724 <Sim80x_InitValue+0x178>)
	  Sim80x_SendAtCommand("AT+CLTS=1\r\n",200,1,"AT+CLTS=1\r\r\nOK\r\n");
 800269a:	482c      	ldr	r0, [pc, #176]	@ (800274c <Sim80x_InitValue+0x1a0>)
 800269c:	21c8      	movs	r1, #200	@ 0xc8
 800269e:	f7ff fe01 	bl	80022a4 <Sim80x_SendAtCommand>
  Sim80x_SendAtCommand("AT&W\r\n",1000,1,"AT&W\r\r\nOK\r\n");
 80026a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002750 <Sim80x_InitValue+0x1a4>)
 80026a4:	482b      	ldr	r0, [pc, #172]	@ (8002754 <Sim80x_InitValue+0x1a8>)
 80026a6:	4622      	mov	r2, r4
 80026a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80026ac:	f7ff fdfa 	bl	80022a4 <Sim80x_SendAtCommand>
  Sim80x.Status.LowPowerMode = 0;
 80026b0:	f895 c330 	ldrb.w	ip, [r5, #816]	@ 0x330
    if(Sim80x_SendAtCommand("AT\r\n",200,1,"AT\r\r\nOK\r\n") == 1) {
 80026b4:	4b28      	ldr	r3, [pc, #160]	@ (8002758 <Sim80x_InitValue+0x1ac>)
 80026b6:	4829      	ldr	r0, [pc, #164]	@ (800275c <Sim80x_InitValue+0x1b0>)
  Sim80x.Status.LowPowerMode = 0;
 80026b8:	f36f 1c45 	bfc	ip, #5, #1
    if(Sim80x_SendAtCommand("AT\r\n",200,1,"AT\r\r\nOK\r\n") == 1) {
 80026bc:	4622      	mov	r2, r4
 80026be:	21c8      	movs	r1, #200	@ 0xc8
  Sim80x.Status.LowPowerMode = 0;
 80026c0:	f885 c330 	strb.w	ip, [r5, #816]	@ 0x330
    if(Sim80x_SendAtCommand("AT\r\n",200,1,"AT\r\r\nOK\r\n") == 1) {
 80026c4:	f7ff fdee 	bl	80022a4 <Sim80x_SendAtCommand>
 80026c8:	2801      	cmp	r0, #1
 80026ca:	d002      	beq.n	80026d2 <Sim80x_InitValue+0x126>
	  return false;
 80026cc:	2000      	movs	r0, #0
}
 80026ce:	b003      	add	sp, #12
 80026d0:	bd30      	pop	{r4, r5, pc}
      Sim80x.Status.Power=0;
 80026d2:	f895 4330 	ldrb.w	r4, [r5, #816]	@ 0x330
      Sim80x_SendAtCommand("AT+CPOWD=1\r\n",2000,1,"\r\nOK\r\n");
 80026d6:	4b14      	ldr	r3, [pc, #80]	@ (8002728 <Sim80x_InitValue+0x17c>)
      Sim80x.Status.Power=0;
 80026d8:	f36f 0482 	bfc	r4, #2, #1
      Sim80x_SendAtCommand("AT+CPOWD=1\r\n",2000,1,"\r\nOK\r\n");
 80026dc:	4602      	mov	r2, r0
 80026de:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80026e2:	481f      	ldr	r0, [pc, #124]	@ (8002760 <Sim80x_InitValue+0x1b4>)
      Sim80x.Status.Power=0;
 80026e4:	f885 4330 	strb.w	r4, [r5, #816]	@ 0x330
      Sim80x_SendAtCommand("AT+CPOWD=1\r\n",2000,1,"\r\nOK\r\n");
 80026e8:	f7ff fddc 	bl	80022a4 <Sim80x_SendAtCommand>
 80026ec:	e7ee      	b.n	80026cc <Sim80x_InitValue+0x120>
 80026ee:	bf00      	nop
 80026f0:	08014630 	.word	0x08014630
 80026f4:	0801463c 	.word	0x0801463c
 80026f8:	08014644 	.word	0x08014644
 80026fc:	08014658 	.word	0x08014658
 8002700:	08014664 	.word	0x08014664
 8002704:	08014678 	.word	0x08014678
 8002708:	08014684 	.word	0x08014684
 800270c:	08014698 	.word	0x08014698
 8002710:	080146c4 	.word	0x080146c4
 8002714:	080146a8 	.word	0x080146a8
 8002718:	080146b8 	.word	0x080146b8
 800271c:	0801472c 	.word	0x0801472c
 8002720:	08014740 	.word	0x08014740
 8002724:	20000230 	.word	0x20000230
 8002728:	08014908 	.word	0x08014908
 800272c:	0801474c 	.word	0x0801474c
 8002730:	080142bc 	.word	0x080142bc
 8002734:	0801410c 	.word	0x0801410c
 8002738:	0801475c 	.word	0x0801475c
 800273c:	08014618 	.word	0x08014618
 8002740:	08014624 	.word	0x08014624
 8002744:	0801430c 	.word	0x0801430c
 8002748:	080146d4 	.word	0x080146d4
 800274c:	080146e8 	.word	0x080146e8
 8002750:	080146f4 	.word	0x080146f4
 8002754:	08014700 	.word	0x08014700
 8002758:	08014708 	.word	0x08014708
 800275c:	08014714 	.word	0x08014714
 8002760:	0801471c 	.word	0x0801471c

08002764 <Sim80x_SetPower>:
{ 
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Sim80x.Status.LowPowerMode = 0;
 8002766:	4d37      	ldr	r5, [pc, #220]	@ (8002844 <Sim80x_SetPower+0xe0>)
 8002768:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
 800276c:	f36f 1345 	bfc	r3, #5, #1
 8002770:	f885 3330 	strb.w	r3, [r5, #816]	@ 0x330
  if(TurnOn==true) {
 8002774:	2800      	cmp	r0, #0
 8002776:	d03e      	beq.n	80027f6 <Sim80x_SetPower+0x92>
    Sim80x.Status.Busy = 0;
 8002778:	b2d8      	uxtb	r0, r3
 800277a:	f020 0006 	bic.w	r0, r0, #6
 800277e:	f040 0004 	orr.w	r0, r0, #4
 8002782:	f885 0330 	strb.w	r0, [r5, #816]	@ 0x330
    if(Sim80x_SendAtCommand("AT\r\n",200,1,"AT\r\r\nOK\r\n") == 1) {
 8002786:	4b30      	ldr	r3, [pc, #192]	@ (8002848 <Sim80x_SetPower+0xe4>)
 8002788:	4830      	ldr	r0, [pc, #192]	@ (800284c <Sim80x_SetPower+0xe8>)
 800278a:	2201      	movs	r2, #1
 800278c:	21c8      	movs	r1, #200	@ 0xc8
 800278e:	f7ff fd89 	bl	80022a4 <Sim80x_SendAtCommand>
 8002792:	2801      	cmp	r0, #1
 8002794:	d047      	beq.n	8002826 <Sim80x_SetPower+0xc2>
      HAL_GPIO_WritePin(_SIM80X_POWER_KEY_GPIO,_SIM80X_POWER_KEY_PIN,GPIO_PIN_SET);		// obrotka
 8002796:	2201      	movs	r2, #1
 8002798:	4611      	mov	r1, r2
 800279a:	482d      	ldr	r0, [pc, #180]	@ (8002850 <Sim80x_SetPower+0xec>)
      while(Sim80x_SendAtCommand("AT\r\n",200,1,"AT\r\r\nOK\r\n") != 1) {if(--retry == 0) break;}
 800279c:	4f2a      	ldr	r7, [pc, #168]	@ (8002848 <Sim80x_SetPower+0xe4>)
 800279e:	4e2b      	ldr	r6, [pc, #172]	@ (800284c <Sim80x_SetPower+0xe8>)
      HAL_GPIO_WritePin(_SIM80X_POWER_KEY_GPIO,_SIM80X_POWER_KEY_PIN,GPIO_PIN_SET);		// obrotka
 80027a0:	f008 fad8 	bl	800ad54 <HAL_GPIO_WritePin>
      osDelay(1200);
 80027a4:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80027a8:	f00a ffe6 	bl	800d778 <osDelay>
      HAL_GPIO_WritePin(_SIM80X_POWER_KEY_GPIO,_SIM80X_POWER_KEY_PIN,GPIO_PIN_RESET);	// obrotka
 80027ac:	4828      	ldr	r0, [pc, #160]	@ (8002850 <Sim80x_SetPower+0xec>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	2101      	movs	r1, #1
 80027b2:	f008 facf 	bl	800ad54 <HAL_GPIO_WritePin>
      osDelay(2500);
 80027b6:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80027ba:	f00a ffdd 	bl	800d778 <osDelay>
      Sim80x.Status.Power=1;
 80027be:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
 80027c2:	f043 0304 	orr.w	r3, r3, #4
 80027c6:	f885 3330 	strb.w	r3, [r5, #816]	@ 0x330
      uint8_t retry = 10;
 80027ca:	240a      	movs	r4, #10
      while(Sim80x_SendAtCommand("AT\r\n",200,1,"AT\r\r\nOK\r\n") != 1) {if(--retry == 0) break;}
 80027cc:	463b      	mov	r3, r7
 80027ce:	2201      	movs	r2, #1
 80027d0:	21c8      	movs	r1, #200	@ 0xc8
 80027d2:	4630      	mov	r0, r6
 80027d4:	f7ff fd66 	bl	80022a4 <Sim80x_SendAtCommand>
 80027d8:	2801      	cmp	r0, #1
 80027da:	f104 33ff 	add.w	r3, r4, #4294967295
 80027de:	d02e      	beq.n	800283e <Sim80x_SetPower+0xda>
 80027e0:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 80027e4:	d1f2      	bne.n	80027cc <Sim80x_SetPower+0x68>
        Sim80x.Status.Power=0;
 80027e6:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
 80027ea:	f364 0382 	bfi	r3, r4, #2, #1
 80027ee:	f885 3330 	strb.w	r3, [r5, #816]	@ 0x330
  return true;
 80027f2:	2001      	movs	r0, #1
}
 80027f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Sim80x_SendAtCommand("AT\r\n",200,1,"AT\r\r\nOK\r\n") == 1) {
 80027f6:	4b14      	ldr	r3, [pc, #80]	@ (8002848 <Sim80x_SetPower+0xe4>)
 80027f8:	4604      	mov	r4, r0
 80027fa:	2201      	movs	r2, #1
 80027fc:	4813      	ldr	r0, [pc, #76]	@ (800284c <Sim80x_SetPower+0xe8>)
 80027fe:	21c8      	movs	r1, #200	@ 0xc8
 8002800:	f7ff fd50 	bl	80022a4 <Sim80x_SendAtCommand>
 8002804:	2801      	cmp	r0, #1
 8002806:	d1f4      	bne.n	80027f2 <Sim80x_SetPower+0x8e>
      Sim80x.Status.Power=0;
 8002808:	f895 1330 	ldrb.w	r1, [r5, #816]	@ 0x330
      Sim80x_SendAtCommand("AT+CPOWD=1\r\n",2000,1,"\r\nOK\r\n");
 800280c:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <Sim80x_SetPower+0xf0>)
      Sim80x.Status.Power=0;
 800280e:	f364 0182 	bfi	r1, r4, #2, #1
      Sim80x_SendAtCommand("AT+CPOWD=1\r\n",2000,1,"\r\nOK\r\n");
 8002812:	4602      	mov	r2, r0
      Sim80x.Status.Power=0;
 8002814:	f885 1330 	strb.w	r1, [r5, #816]	@ 0x330
      Sim80x_SendAtCommand("AT+CPOWD=1\r\n",2000,1,"\r\nOK\r\n");
 8002818:	480f      	ldr	r0, [pc, #60]	@ (8002858 <Sim80x_SetPower+0xf4>)
 800281a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800281e:	f7ff fd41 	bl	80022a4 <Sim80x_SendAtCommand>
  return true;
 8002822:	2001      	movs	r0, #1
 8002824:	e7e6      	b.n	80027f4 <Sim80x_SetPower+0x90>
      osDelay(100);
 8002826:	2064      	movs	r0, #100	@ 0x64
        osDelay(200);
 8002828:	f00a ffa6 	bl	800d778 <osDelay>
        bool stat = Sim80x_InitValue();
 800282c:	f7ff febe 	bl	80025ac <Sim80x_InitValue>
        Sim80x.Status.Power=1;
 8002830:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
 8002834:	f043 0304 	orr.w	r3, r3, #4
 8002838:	f885 3330 	strb.w	r3, [r5, #816]	@ 0x330
}
 800283c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        osDelay(200);
 800283e:	20c8      	movs	r0, #200	@ 0xc8
 8002840:	e7f2      	b.n	8002828 <Sim80x_SetPower+0xc4>
 8002842:	bf00      	nop
 8002844:	20000230 	.word	0x20000230
 8002848:	08014708 	.word	0x08014708
 800284c:	08014714 	.word	0x08014714
 8002850:	48000400 	.word	0x48000400
 8002854:	08014908 	.word	0x08014908
 8002858:	0801471c 	.word	0x0801471c

0800285c <Sim80x_GetTime>:
  if(!Sim80x.Status.Power) return false;
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <Sim80x_GetTime+0x34>)
 800285e:	f893 0330 	ldrb.w	r0, [r3, #816]	@ 0x330
 8002862:	f010 0004 	ands.w	r0, r0, #4
 8002866:	d100      	bne.n	800286a <Sim80x_GetTime+0xe>
}
 8002868:	4770      	bx	lr
{
 800286a:	b500      	push	{lr}
 800286c:	b083      	sub	sp, #12
  answer=Sim80x_SendAtCommand("AT+CCLK?\r\n",1000,2,"\r\nOK\r\n","\r\n+CME ERROR:");
 800286e:	4a09      	ldr	r2, [pc, #36]	@ (8002894 <Sim80x_GetTime+0x38>)
 8002870:	9200      	str	r2, [sp, #0]
 8002872:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <Sim80x_GetTime+0x3c>)
 8002874:	4809      	ldr	r0, [pc, #36]	@ (800289c <Sim80x_GetTime+0x40>)
 8002876:	2202      	movs	r2, #2
 8002878:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800287c:	f7ff fd12 	bl	80022a4 <Sim80x_SendAtCommand>
  if(answer==1) {
 8002880:	f1a0 0001 	sub.w	r0, r0, #1
 8002884:	fab0 f080 	clz	r0, r0
 8002888:	0940      	lsrs	r0, r0, #5
}
 800288a:	b003      	add	sp, #12
 800288c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002890:	20000230 	.word	0x20000230
 8002894:	08014778 	.word	0x08014778
 8002898:	08014908 	.word	0x08014908
 800289c:	0801476c 	.word	0x0801476c

080028a0 <Sim80x_SetTime>:
{
 80028a0:	b500      	push	{lr}
  if(Sim80x.Gsm.Time.Zone < 0) ts = '-';
 80028a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002910 <Sim80x_SetTime+0x70>)
 80028a4:	f992 1656 	ldrsb.w	r1, [r2, #1622]	@ 0x656
		  Sim80x.Gsm.Time.Year-2000, Sim80x.Gsm.Time.Month, Sim80x.Gsm.Time.Day,
 80028a8:	f8b2 364e 	ldrh.w	r3, [r2, #1614]	@ 0x64e
  if(Sim80x.Gsm.Time.Zone < 0) ts = '-';
 80028ac:	2900      	cmp	r1, #0
 80028ae:	bfac      	ite	ge
 80028b0:	202b      	movge	r0, #43	@ 0x2b
 80028b2:	202d      	movlt	r0, #45	@ 0x2d
		  Sim80x.Gsm.Time.Hour, Sim80x.Gsm.Time.Min, Sim80x.Gsm.Time.Sec, ts, abs(Sim80x.Gsm.Time.Zone));
 80028b4:	2900      	cmp	r1, #0
{
 80028b6:	b093      	sub	sp, #76	@ 0x4c
		  Sim80x.Gsm.Time.Hour, Sim80x.Gsm.Time.Min, Sim80x.Gsm.Time.Sec, ts, abs(Sim80x.Gsm.Time.Zone));
 80028b8:	bfb8      	it	lt
 80028ba:	4249      	neglt	r1, r1
  snprintf(str,sizeof(str),"AT+CCLK=\"%02u/%02u/%02u,%02u:%02u:%02u%c%02u\"\r\n",
 80028bc:	b2c9      	uxtb	r1, r1
 80028be:	9106      	str	r1, [sp, #24]
 80028c0:	f892 1655 	ldrb.w	r1, [r2, #1621]	@ 0x655
 80028c4:	e9cd 1004 	strd	r1, r0, [sp, #16]
 80028c8:	f892 0654 	ldrb.w	r0, [r2, #1620]	@ 0x654
 80028cc:	f892 1653 	ldrb.w	r1, [r2, #1619]	@ 0x653
 80028d0:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80028d4:	f892 0652 	ldrb.w	r0, [r2, #1618]	@ 0x652
 80028d8:	f892 1650 	ldrb.w	r1, [r2, #1616]	@ 0x650
 80028dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <Sim80x_SetTime+0x74>)
 80028de:	e9cd 1000 	strd	r1, r0, [sp]
 80028e2:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80028e6:	2128      	movs	r1, #40	@ 0x28
 80028e8:	a808      	add	r0, sp, #32
 80028ea:	f00d ff7b 	bl	80107e4 <sniprintf>
  answer=Sim80x_SendAtCommand(str,2000,2,"\r\nOK\r\n","\r\nERROR\r\n");
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <Sim80x_SetTime+0x78>)
 80028f0:	9200      	str	r2, [sp, #0]
 80028f2:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <Sim80x_SetTime+0x7c>)
 80028f4:	2202      	movs	r2, #2
 80028f6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80028fa:	a808      	add	r0, sp, #32
 80028fc:	f7ff fcd2 	bl	80022a4 <Sim80x_SendAtCommand>
}
 8002900:	f1a0 0001 	sub.w	r0, r0, #1
 8002904:	fab0 f080 	clz	r0, r0
 8002908:	0940      	lsrs	r0, r0, #5
 800290a:	b013      	add	sp, #76	@ 0x4c
 800290c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002910:	20000230 	.word	0x20000230
 8002914:	08014788 	.word	0x08014788
 8002918:	0801410c 	.word	0x0801410c
 800291c:	08014908 	.word	0x08014908

08002920 <Sim80x_Init>:
{
 8002920:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(&Sim80x,0,sizeof(Sim80x));
 8002922:	4c23      	ldr	r4, [pc, #140]	@ (80029b0 <Sim80x_Init+0x90>)
{
 8002924:	b08d      	sub	sp, #52	@ 0x34
  memset(&Sim80x,0,sizeof(Sim80x));
 8002926:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
{
 800292a:	4606      	mov	r6, r0
  memset(&Sim80x,0,sizeof(Sim80x));
 800292c:	2100      	movs	r1, #0
 800292e:	4620      	mov	r0, r4
 8002930:	f00e f8b0 	bl	8010a94 <memset>
  osThreadDef(Sim80xTask, StartSim80xTask, Priority, 0, 512);
 8002934:	2500      	movs	r5, #0
 8002936:	4b1f      	ldr	r3, [pc, #124]	@ (80029b4 <Sim80x_Init+0x94>)
 8002938:	9300      	str	r3, [sp, #0]
  Sim80xTaskHandle = osThreadCreate(osThread(Sim80xTask), NULL);
 800293a:	4629      	mov	r1, r5
  osThreadDef(Sim80xTask, StartSim80xTask, Priority, 0, 512);
 800293c:	4b1e      	ldr	r3, [pc, #120]	@ (80029b8 <Sim80x_Init+0x98>)
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	f44f 7700 	mov.w	r7, #512	@ 0x200
  Sim80xTaskHandle = osThreadCreate(osThread(Sim80xTask), NULL);
 8002944:	4668      	mov	r0, sp
  osThreadDef(Sim80xTask, StartSim80xTask, Priority, 0, 512);
 8002946:	e9cd 5703 	strd	r5, r7, [sp, #12]
 800294a:	f8ad 6008 	strh.w	r6, [sp, #8]
  Sim80xTaskHandle = osThreadCreate(osThread(Sim80xTask), NULL);
 800294e:	f00a fef7 	bl	800d740 <osThreadCreate>
 8002952:	4b1a      	ldr	r3, [pc, #104]	@ (80029bc <Sim80x_Init+0x9c>)
 8002954:	6018      	str	r0, [r3, #0]
  osDelay(10);
 8002956:	200a      	movs	r0, #10
 8002958:	f00a ff0e 	bl	800d778 <osDelay>
  osThreadDef(Sim80xBuffTask, StartSim80xBuffTask, Priority, 0, 512);
 800295c:	4b18      	ldr	r3, [pc, #96]	@ (80029c0 <Sim80x_Init+0xa0>)
 800295e:	9306      	str	r3, [sp, #24]
  Sim80xBuffTaskHandle = osThreadCreate(osThread(Sim80xBuffTask), NULL);
 8002960:	4629      	mov	r1, r5
  osThreadDef(Sim80xBuffTask, StartSim80xBuffTask, Priority, 0, 512);
 8002962:	4b18      	ldr	r3, [pc, #96]	@ (80029c4 <Sim80x_Init+0xa4>)
 8002964:	9307      	str	r3, [sp, #28]
  Sim80xBuffTaskHandle = osThreadCreate(osThread(Sim80xBuffTask), NULL);
 8002966:	a806      	add	r0, sp, #24
  osThreadDef(Sim80xBuffTask, StartSim80xBuffTask, Priority, 0, 512);
 8002968:	9509      	str	r5, [sp, #36]	@ 0x24
 800296a:	f8ad 6020 	strh.w	r6, [sp, #32]
 800296e:	970a      	str	r7, [sp, #40]	@ 0x28
  Sim80xBuffTaskHandle = osThreadCreate(osThread(Sim80xBuffTask), NULL);
 8002970:	f00a fee6 	bl	800d740 <osThreadCreate>
 8002974:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <Sim80x_Init+0xa8>)
 8002976:	4602      	mov	r2, r0
  Sim80x.Gsm.Time.Month = 1;
 8002978:	2501      	movs	r5, #1
  osDelay(10);
 800297a:	200a      	movs	r0, #10
  Sim80xBuffTaskHandle = osThreadCreate(osThread(Sim80xBuffTask), NULL);
 800297c:	601a      	str	r2, [r3, #0]
  osDelay(10);
 800297e:	f00a fefb 	bl	800d778 <osDelay>
  Sim80x.Gsm.Time.Year  = 2024;
 8002982:	f44f 63fd 	mov.w	r3, #2024	@ 0x7e8
  if(!Sim80x_SetPower(true)) Sim80x_SetPower(true); 	//ponowne odpalenie po restarcie
 8002986:	4628      	mov	r0, r5
  Sim80x.Gsm.Time.Year  = 2024;
 8002988:	f8a4 364e 	strh.w	r3, [r4, #1614]	@ 0x64e
  Sim80x.Gsm.Time.Month = 1;
 800298c:	f884 5650 	strb.w	r5, [r4, #1616]	@ 0x650
  Sim80x.Gsm.Time.Day	= 1;
 8002990:	f884 5652 	strb.w	r5, [r4, #1618]	@ 0x652
  if(!Sim80x_SetPower(true)) Sim80x_SetPower(true); 	//ponowne odpalenie po restarcie
 8002994:	f7ff fee6 	bl	8002764 <Sim80x_SetPower>
 8002998:	b118      	cbz	r0, 80029a2 <Sim80x_Init+0x82>
  GPRS_DeactivatePDPContext();						// GPRS disconnect
 800299a:	f7ff f803 	bl	80019a4 <GPRS_DeactivatePDPContext>
}
 800299e:	b00d      	add	sp, #52	@ 0x34
 80029a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(!Sim80x_SetPower(true)) Sim80x_SetPower(true); 	//ponowne odpalenie po restarcie
 80029a2:	4628      	mov	r0, r5
 80029a4:	f7ff fede 	bl	8002764 <Sim80x_SetPower>
  GPRS_DeactivatePDPContext();						// GPRS disconnect
 80029a8:	f7fe fffc 	bl	80019a4 <GPRS_DeactivatePDPContext>
}
 80029ac:	b00d      	add	sp, #52	@ 0x34
 80029ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029b0:	20000230 	.word	0x20000230
 80029b4:	080147b8 	.word	0x080147b8
 80029b8:	080023f5 	.word	0x080023f5
 80029bc:	2000022c 	.word	0x2000022c
 80029c0:	080147c4 	.word	0x080147c4
 80029c4:	08003291 	.word	0x08003291
 80029c8:	20000228 	.word	0x20000228

080029cc <Sim80x_BufferProcess>:
{
 80029cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ce:	ed2d 8b02 	vpush	{d8}
  str1 = strstr(strStart,"\r\n+CREG:");
 80029d2:	4ec0      	ldr	r6, [pc, #768]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 80029d4:	49c0      	ldr	r1, [pc, #768]	@ (8002cd8 <Sim80x_BufferProcess+0x30c>)
{
 80029d6:	b089      	sub	sp, #36	@ 0x24
  str1 = strstr(strStart,"\r\n+CREG:");
 80029d8:	4630      	mov	r0, r6
 80029da:	f00e f895 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 80029de:	2800      	cmp	r0, #0
 80029e0:	f000 82e3 	beq.w	8002faa <Sim80x_BufferProcess+0x5de>
    str1 = strchr(str1,',');
 80029e4:	212c      	movs	r1, #44	@ 0x2c
 80029e6:	f00e f85d 	bl	8010aa4 <strchr>
    if(atoi(str1)==1)
 80029ea:	3001      	adds	r0, #1
 80029ec:	f00b ff9b 	bl	800e926 <atoi>
      Sim80x.Status.RegisterdToNetwork=1;
 80029f0:	f896 332d 	ldrb.w	r3, [r6, #813]	@ 0x32d
    if(atoi(str1)==1)
 80029f4:	2801      	cmp	r0, #1
      Sim80x.Status.RegisterdToNetwork=1;
 80029f6:	f1a6 0403 	sub.w	r4, r6, #3
 80029fa:	bf0c      	ite	eq
 80029fc:	f043 0301 	orreq.w	r3, r3, #1
      Sim80x.Status.RegisterdToNetwork=0;
 8002a00:	f36f 0300 	bfcne	r3, #0, #1
 8002a04:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
  str1 = strstr(strStart,"\r\nCall Ready\r\n");
 8002a08:	49b4      	ldr	r1, [pc, #720]	@ (8002cdc <Sim80x_BufferProcess+0x310>)
 8002a0a:	48b2      	ldr	r0, [pc, #712]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002a0c:	f00e f87c 	bl	8010b08 <strstr>
  if(str1!=NULL)
 8002a10:	b128      	cbz	r0, 8002a1e <Sim80x_BufferProcess+0x52>
    Sim80x.Status.CallReady=1;  
 8002a12:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8002a16:	f043 0310 	orr.w	r3, r3, #16
 8002a1a:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
  str1 = strstr(strStart,"\r\nSMS Ready\r\n");
 8002a1e:	49b0      	ldr	r1, [pc, #704]	@ (8002ce0 <Sim80x_BufferProcess+0x314>)
 8002a20:	48ac      	ldr	r0, [pc, #688]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002a22:	f00e f871 	bl	8010b08 <strstr>
  if(str1!=NULL)
 8002a26:	b128      	cbz	r0, 8002a34 <Sim80x_BufferProcess+0x68>
    Sim80x.Status.SmsReady=1;  
 8002a28:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8002a2c:	f043 0308 	orr.w	r3, r3, #8
 8002a30:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
  str1 = strstr(strStart,"\r\n+COLP:");
 8002a34:	49ab      	ldr	r1, [pc, #684]	@ (8002ce4 <Sim80x_BufferProcess+0x318>)
 8002a36:	48a7      	ldr	r0, [pc, #668]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002a38:	f00e f866 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002a3c:	b110      	cbz	r0, 8002a44 <Sim80x_BufferProcess+0x78>
    Sim80x.Gsm.GsmVoiceStatus = GsmVoiceStatus_MyCallAnswerd;
 8002a3e:	2307      	movs	r3, #7
 8002a40:	f884 365a 	strb.w	r3, [r4, #1626]	@ 0x65a
  str1 = strstr(strStart,"\r\n+CLIP:");
 8002a44:	49a8      	ldr	r1, [pc, #672]	@ (8002ce8 <Sim80x_BufferProcess+0x31c>)
 8002a46:	48a3      	ldr	r0, [pc, #652]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002a48:	f00e f85e 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002a4c:	b190      	cbz	r0, 8002a74 <Sim80x_BufferProcess+0xa8>
    str1 = strchr(str1,'"');
 8002a4e:	2122      	movs	r1, #34	@ 0x22
 8002a50:	f00e f828 	bl	8010aa4 <strchr>
    str1++;
 8002a54:	1c45      	adds	r5, r0, #1
    str2 = strchr(str1,'"');
 8002a56:	2122      	movs	r1, #34	@ 0x22
 8002a58:	4628      	mov	r0, r5
 8002a5a:	f00e f823 	bl	8010aa4 <strchr>
    strncpy(Sim80x.Gsm.CallerNumber,str1,str2-str1);
 8002a5e:	4629      	mov	r1, r5
 8002a60:	1b42      	subs	r2, r0, r5
 8002a62:	48a2      	ldr	r0, [pc, #648]	@ (8002cec <Sim80x_BufferProcess+0x320>)
 8002a64:	f00e f83d 	bl	8010ae2 <strncpy>
    Sim80x.Gsm.HaveNewCall=1;  
 8002a68:	f894 364c 	ldrb.w	r3, [r4, #1612]	@ 0x64c
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	f884 364c 	strb.w	r3, [r4, #1612]	@ 0x64c
  str1 = strstr(strStart,"\r\n+CSQ:");
 8002a74:	499e      	ldr	r1, [pc, #632]	@ (8002cf0 <Sim80x_BufferProcess+0x324>)
 8002a76:	4897      	ldr	r0, [pc, #604]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002a78:	f00e f846 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002a7c:	b138      	cbz	r0, 8002a8e <Sim80x_BufferProcess+0xc2>
    str1 = strchr(str1,':');
 8002a7e:	213a      	movs	r1, #58	@ 0x3a
 8002a80:	f00e f810 	bl	8010aa4 <strchr>
    Sim80x.Status.Signal = atoi(str1);      
 8002a84:	3001      	adds	r0, #1
 8002a86:	f00b ff4e 	bl	800e926 <atoi>
 8002a8a:	f884 0338 	strb.w	r0, [r4, #824]	@ 0x338
  str1 = strstr(strStart,"\r\n+CBC:");
 8002a8e:	4999      	ldr	r1, [pc, #612]	@ (8002cf4 <Sim80x_BufferProcess+0x328>)
 8002a90:	4890      	ldr	r0, [pc, #576]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002a92:	f00e f839 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002a96:	b310      	cbz	r0, 8002ade <Sim80x_BufferProcess+0x112>
    str1 = strchr(str1,':');
 8002a98:	213a      	movs	r1, #58	@ 0x3a
 8002a9a:	f00e f803 	bl	8010aa4 <strchr>
    str1++;
 8002a9e:	1c45      	adds	r5, r0, #1
    tmp_int32_t = atoi(str1);
 8002aa0:	4628      	mov	r0, r5
 8002aa2:	f00b ff40 	bl	800e926 <atoi>
    str1 = strchr(str1,',');
 8002aa6:	212c      	movs	r1, #44	@ 0x2c
 8002aa8:	4628      	mov	r0, r5
 8002aaa:	f00d fffb 	bl	8010aa4 <strchr>
    str1++;
 8002aae:	1c45      	adds	r5, r0, #1
    Sim80x.Status.BatteryPercent = atoi(str1);
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	f00b ff38 	bl	800e926 <atoi>
    str1 = strchr(str1,',');
 8002ab6:	212c      	movs	r1, #44	@ 0x2c
    Sim80x.Status.BatteryPercent = atoi(str1);
 8002ab8:	4603      	mov	r3, r0
    str1 = strchr(str1,',');
 8002aba:	4628      	mov	r0, r5
    Sim80x.Status.BatteryPercent = atoi(str1);
 8002abc:	f884 3331 	strb.w	r3, [r4, #817]	@ 0x331
    str1 = strchr(str1,',');
 8002ac0:	f00d fff0 	bl	8010aa4 <strchr>
    Sim80x.Status.BatteryVoltage = atof(str1)/1000;      
 8002ac4:	3001      	adds	r0, #1
 8002ac6:	f00b ff2b 	bl	800e920 <atof>
 8002aca:	4b8b      	ldr	r3, [pc, #556]	@ (8002cf8 <Sim80x_BufferProcess+0x32c>)
 8002acc:	ec51 0b10 	vmov	r0, r1, d0
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f7fd fefb 	bl	80008cc <__aeabi_ddiv>
 8002ad6:	f7fe f8c7 	bl	8000c68 <__aeabi_d2f>
 8002ada:	f8c4 0334 	str.w	r0, [r4, #820]	@ 0x334
  str1 = strstr(strStart,"\r\nBUSY\r\n");
 8002ade:	4987      	ldr	r1, [pc, #540]	@ (8002cfc <Sim80x_BufferProcess+0x330>)
 8002ae0:	487c      	ldr	r0, [pc, #496]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002ae2:	f00e f811 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002ae6:	b110      	cbz	r0, 8002aee <Sim80x_BufferProcess+0x122>
    Sim80x.Gsm.GsmVoiceStatus=GsmVoiceStatus_ReturnBusy;
 8002ae8:	2305      	movs	r3, #5
 8002aea:	f884 365a 	strb.w	r3, [r4, #1626]	@ 0x65a
  str1 = strstr(strStart,"\r\nNO DIALTONE\r\n");
 8002aee:	4984      	ldr	r1, [pc, #528]	@ (8002d00 <Sim80x_BufferProcess+0x334>)
 8002af0:	4878      	ldr	r0, [pc, #480]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002af2:	f00e f809 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002af6:	b110      	cbz	r0, 8002afe <Sim80x_BufferProcess+0x132>
    Sim80x.Gsm.GsmVoiceStatus=GsmVoiceStatus_ReturnNoDialTone;
 8002af8:	2302      	movs	r3, #2
 8002afa:	f884 365a 	strb.w	r3, [r4, #1626]	@ 0x65a
  str1 = strstr(strStart,"\r\nNO CARRIER\r\n");
 8002afe:	4981      	ldr	r1, [pc, #516]	@ (8002d04 <Sim80x_BufferProcess+0x338>)
 8002b00:	4874      	ldr	r0, [pc, #464]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002b02:	f00e f801 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002b06:	b110      	cbz	r0, 8002b0e <Sim80x_BufferProcess+0x142>
    Sim80x.Gsm.GsmVoiceStatus=GsmVoiceStatus_ReturnNoCarrier;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	f884 365a 	strb.w	r3, [r4, #1626]	@ 0x65a
  str1 = strstr(strStart,"\r\nNO ANSWER\r\n");
 8002b0e:	497e      	ldr	r1, [pc, #504]	@ (8002d08 <Sim80x_BufferProcess+0x33c>)
 8002b10:	4870      	ldr	r0, [pc, #448]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002b12:	f00d fff9 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002b16:	b110      	cbz	r0, 8002b1e <Sim80x_BufferProcess+0x152>
    Sim80x.Gsm.GsmVoiceStatus=GsmVoiceStatus_ReturnNoAnswer;
 8002b18:	2304      	movs	r3, #4
 8002b1a:	f884 365a 	strb.w	r3, [r4, #1626]	@ 0x65a
  str1 = strstr(strStart,"NORMAL POWER DOWN");
 8002b1e:	497b      	ldr	r1, [pc, #492]	@ (8002d0c <Sim80x_BufferProcess+0x340>)
 8002b20:	486c      	ldr	r0, [pc, #432]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002b22:	f00d fff1 	bl	8010b08 <strstr>
  if(str1!=NULL && Sim80x.Status.Power) {
 8002b26:	b120      	cbz	r0, 8002b32 <Sim80x_BufferProcess+0x166>
 8002b28:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8002b2c:	075b      	lsls	r3, r3, #29
 8002b2e:	f100 8227 	bmi.w	8002f80 <Sim80x_BufferProcess+0x5b4>
  str1 = strstr(strStart,"\r\n+CMGS:");
 8002b32:	4977      	ldr	r1, [pc, #476]	@ (8002d10 <Sim80x_BufferProcess+0x344>)
 8002b34:	4867      	ldr	r0, [pc, #412]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002b36:	f00d ffe7 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002b3a:	b128      	cbz	r0, 8002b48 <Sim80x_BufferProcess+0x17c>
    Sim80x.Gsm.MsgSent=1;
 8002b3c:	f894 364c 	ldrb.w	r3, [r4, #1612]	@ 0x64c
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	f884 364c 	strb.w	r3, [r4, #1612]	@ 0x64c
  str1 = strstr(strStart,"\r\n+CPMS:");
 8002b48:	4972      	ldr	r1, [pc, #456]	@ (8002d14 <Sim80x_BufferProcess+0x348>)
 8002b4a:	4862      	ldr	r0, [pc, #392]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002b4c:	f00d ffdc 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002b50:	b1b8      	cbz	r0, 8002b82 <Sim80x_BufferProcess+0x1b6>
    str1 = strchr(str1,':');
 8002b52:	213a      	movs	r1, #58	@ 0x3a
 8002b54:	f00d ffa6 	bl	8010aa4 <strchr>
    if(*str1 == '"') {
 8002b58:	7883      	ldrb	r3, [r0, #2]
 8002b5a:	2b22      	cmp	r3, #34	@ 0x22
    str1++;
 8002b5c:	f100 0502 	add.w	r5, r0, #2
    if(*str1 == '"') {
 8002b60:	f000 8208 	beq.w	8002f74 <Sim80x_BufferProcess+0x5a8>
    Sim80x.Gsm.MsgUsed = atoi(str1);
 8002b64:	4628      	mov	r0, r5
 8002b66:	f00b fede 	bl	800e926 <atoi>
    str1 = strchr(str1,',');
 8002b6a:	212c      	movs	r1, #44	@ 0x2c
    Sim80x.Gsm.MsgUsed = atoi(str1);
 8002b6c:	4603      	mov	r3, r0
    str1 = strchr(str1,',');
 8002b6e:	4628      	mov	r0, r5
    Sim80x.Gsm.MsgUsed = atoi(str1);
 8002b70:	f884 37db 	strb.w	r3, [r4, #2011]	@ 0x7db
    str1 = strchr(str1,',');
 8002b74:	f00d ff96 	bl	8010aa4 <strchr>
    Sim80x.Gsm.MsgCapacity = atoi(str1);
 8002b78:	3001      	adds	r0, #1
 8002b7a:	f00b fed4 	bl	800e926 <atoi>
 8002b7e:	f884 07da 	strb.w	r0, [r4, #2010]	@ 0x7da
  str1 = strstr(strStart,"\r\n+CMGR:");
 8002b82:	4965      	ldr	r1, [pc, #404]	@ (8002d18 <Sim80x_BufferProcess+0x34c>)
 8002b84:	4853      	ldr	r0, [pc, #332]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002b86:	f00d ffbf 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002b8a:	4605      	mov	r5, r0
 8002b8c:	b138      	cbz	r0, 8002b9e <Sim80x_BufferProcess+0x1d2>
    if(Sim80x.Gsm.MsgFormat == GsmMsgFormat_Text) {
 8002b8e:	f894 37d9 	ldrb.w	r3, [r4, #2009]	@ 0x7d9
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	f000 8347 	beq.w	8003226 <Sim80x_BufferProcess+0x85a>
    }else if(Sim80x.Gsm.MsgFormat == GsmMsgFormat_PDU) {
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	f000 8322 	beq.w	80031e2 <Sim80x_BufferProcess+0x816>
  str1 = strstr(strStart,"\r\n+CNUM:");
 8002b9e:	495f      	ldr	r1, [pc, #380]	@ (8002d1c <Sim80x_BufferProcess+0x350>)
 8002ba0:	484c      	ldr	r0, [pc, #304]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002ba2:	f00d ffb1 	bl	8010b08 <strstr>
   if(str1!=NULL) {
 8002ba6:	b160      	cbz	r0, 8002bc2 <Sim80x_BufferProcess+0x1f6>
     str1 = strchr(str1,',');
 8002ba8:	212c      	movs	r1, #44	@ 0x2c
 8002baa:	f00d ff7b 	bl	8010aa4 <strchr>
     str1++;
 8002bae:	1c85      	adds	r5, r0, #2
     str2 = strchr(str1,'"');
 8002bb0:	2122      	movs	r1, #34	@ 0x22
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	f00d ff76 	bl	8010aa4 <strchr>
     strncpy(Sim80x.Gsm.MyNumber,str1,str2-str1);
 8002bb8:	4629      	mov	r1, r5
 8002bba:	1b42      	subs	r2, r0, r5
 8002bbc:	4858      	ldr	r0, [pc, #352]	@ (8002d20 <Sim80x_BufferProcess+0x354>)
 8002bbe:	f00d ff90 	bl	8010ae2 <strncpy>
  str1 = strstr(strStart,"\r\n+CCLK:");
 8002bc2:	4958      	ldr	r1, [pc, #352]	@ (8002d24 <Sim80x_BufferProcess+0x358>)
 8002bc4:	4843      	ldr	r0, [pc, #268]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002bc6:	f00d ff9f 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d054      	beq.n	8002c78 <Sim80x_BufferProcess+0x2ac>
    str1 = strchr(str1,'"');
 8002bce:	2122      	movs	r1, #34	@ 0x22
 8002bd0:	f00d ff68 	bl	8010aa4 <strchr>
	strncpy(tmp_str, str1+0, 2);
 8002bd4:	2202      	movs	r2, #2
    str1 = strchr(str1,'"');
 8002bd6:	4605      	mov	r5, r0
	strncpy(tmp_str, str1+0, 2);
 8002bd8:	1c41      	adds	r1, r0, #1
 8002bda:	a803      	add	r0, sp, #12
 8002bdc:	f00d ff81 	bl	8010ae2 <strncpy>
	tmp_str[2]=0;
 8002be0:	2700      	movs	r7, #0
	Sim80x.Gsm.Time.Year = atoi(tmp_str)+2000;	// year
 8002be2:	a803      	add	r0, sp, #12
	tmp_str[2]=0;
 8002be4:	f88d 700e 	strb.w	r7, [sp, #14]
	Sim80x.Gsm.Time.Year = atoi(tmp_str)+2000;	// year
 8002be8:	f00b fe9d 	bl	800e926 <atoi>
 8002bec:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
	strncpy(tmp_str, str1+3, 2);
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	1d29      	adds	r1, r5, #4
	Sim80x.Gsm.Time.Year = atoi(tmp_str)+2000;	// year
 8002bf4:	f8a4 064e 	strh.w	r0, [r4, #1614]	@ 0x64e
	strncpy(tmp_str, str1+3, 2);
 8002bf8:	a803      	add	r0, sp, #12
 8002bfa:	f00d ff72 	bl	8010ae2 <strncpy>
	Sim80x.Gsm.Time.Month = atoi(tmp_str);	// month
 8002bfe:	a803      	add	r0, sp, #12
 8002c00:	f00b fe91 	bl	800e926 <atoi>
	strncpy(tmp_str, str1+6, 2);
 8002c04:	2202      	movs	r2, #2
 8002c06:	1de9      	adds	r1, r5, #7
	Sim80x.Gsm.Time.Month = atoi(tmp_str);	// month
 8002c08:	f884 0650 	strb.w	r0, [r4, #1616]	@ 0x650
	strncpy(tmp_str, str1+6, 2);
 8002c0c:	a803      	add	r0, sp, #12
 8002c0e:	f00d ff68 	bl	8010ae2 <strncpy>
	Sim80x.Gsm.Time.Day = atoi(tmp_str);	// day
 8002c12:	a803      	add	r0, sp, #12
 8002c14:	f00b fe87 	bl	800e926 <atoi>
	strncpy(tmp_str, str1+9, 2);
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f105 010a 	add.w	r1, r5, #10
	Sim80x.Gsm.Time.Day = atoi(tmp_str);	// day
 8002c1e:	f884 0652 	strb.w	r0, [r4, #1618]	@ 0x652
	strncpy(tmp_str, str1+9, 2);
 8002c22:	a803      	add	r0, sp, #12
 8002c24:	f00d ff5d 	bl	8010ae2 <strncpy>
	Sim80x.Gsm.Time.Hour = atoi(tmp_str);	// hour
 8002c28:	a803      	add	r0, sp, #12
 8002c2a:	f00b fe7c 	bl	800e926 <atoi>
	strncpy(tmp_str, str1+12, 2);
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f105 010d 	add.w	r1, r5, #13
	Sim80x.Gsm.Time.Hour = atoi(tmp_str);	// hour
 8002c34:	f884 0653 	strb.w	r0, [r4, #1619]	@ 0x653
	strncpy(tmp_str, str1+12, 2);
 8002c38:	a803      	add	r0, sp, #12
 8002c3a:	f00d ff52 	bl	8010ae2 <strncpy>
	Sim80x.Gsm.Time.Min = atoi(tmp_str);	// min
 8002c3e:	a803      	add	r0, sp, #12
 8002c40:	f00b fe71 	bl	800e926 <atoi>
	strncpy(tmp_str, str1+15, 2);
 8002c44:	2202      	movs	r2, #2
 8002c46:	f105 0110 	add.w	r1, r5, #16
	Sim80x.Gsm.Time.Min = atoi(tmp_str);	// min
 8002c4a:	f884 0654 	strb.w	r0, [r4, #1620]	@ 0x654
	strncpy(tmp_str, str1+15, 2);
 8002c4e:	a803      	add	r0, sp, #12
 8002c50:	f00d ff47 	bl	8010ae2 <strncpy>
	Sim80x.Gsm.Time.Sec = atoi(tmp_str);	// sec
 8002c54:	a803      	add	r0, sp, #12
 8002c56:	f00b fe66 	bl	800e926 <atoi>
	strncpy(tmp_str, str1+17, 3);
 8002c5a:	f105 0112 	add.w	r1, r5, #18
	Sim80x.Gsm.Time.Sec = atoi(tmp_str);	// sec
 8002c5e:	f884 0655 	strb.w	r0, [r4, #1621]	@ 0x655
	strncpy(tmp_str, str1+17, 3);
 8002c62:	2203      	movs	r2, #3
 8002c64:	a803      	add	r0, sp, #12
 8002c66:	f00d ff3c 	bl	8010ae2 <strncpy>
	Sim80x.Gsm.Time.Zone = atoi(tmp_str); 	// timezone
 8002c6a:	a803      	add	r0, sp, #12
 8002c6c:	f00b fe5b 	bl	800e926 <atoi>
	Sim80x.Gsm.Time.Millis = 0;
 8002c70:	f8a4 7658 	strh.w	r7, [r4, #1624]	@ 0x658
	Sim80x.Gsm.Time.Zone = atoi(tmp_str); 	// timezone
 8002c74:	f884 0656 	strb.w	r0, [r4, #1622]	@ 0x656
  str1 = strstr(strStart,"\r\n+CMTI:");
 8002c78:	492b      	ldr	r1, [pc, #172]	@ (8002d28 <Sim80x_BufferProcess+0x35c>)
 8002c7a:	4816      	ldr	r0, [pc, #88]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002c7c:	f00d ff44 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002c80:	b148      	cbz	r0, 8002c96 <Sim80x_BufferProcess+0x2ca>
 8002c82:	4b2a      	ldr	r3, [pc, #168]	@ (8002d2c <Sim80x_BufferProcess+0x360>)
 8002c84:	2500      	movs	r5, #0
      if(Sim80x.Gsm.HaveNewMsg[i]==0) {
 8002c86:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002c8a:	2a00      	cmp	r2, #0
 8002c8c:	f000 829d 	beq.w	80031ca <Sim80x_BufferProcess+0x7fe>
    for(uint8_t i=0 ;i<sizeof(Sim80x.Gsm.HaveNewMsg) ; i++)
 8002c90:	3501      	adds	r5, #1
 8002c92:	2d0a      	cmp	r5, #10
 8002c94:	d1f7      	bne.n	8002c86 <Sim80x_BufferProcess+0x2ba>
  str1 = strstr(strStart,"\r\n+CSCA:");
 8002c96:	4926      	ldr	r1, [pc, #152]	@ (8002d30 <Sim80x_BufferProcess+0x364>)
 8002c98:	480e      	ldr	r0, [pc, #56]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002c9a:	f00d ff35 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002c9e:	b1a0      	cbz	r0, 8002cca <Sim80x_BufferProcess+0x2fe>
    memset(Sim80x.Gsm.MsgServiceNumber,0,sizeof(Sim80x.Gsm.MsgServiceNumber));
 8002ca0:	4d24      	ldr	r5, [pc, #144]	@ (8002d34 <Sim80x_BufferProcess+0x368>)
 8002ca2:	2300      	movs	r3, #0
    str1 = strchr(str1,'"');
 8002ca4:	2122      	movs	r1, #34	@ 0x22
    memset(Sim80x.Gsm.MsgServiceNumber,0,sizeof(Sim80x.Gsm.MsgServiceNumber));
 8002ca6:	f8c6 368f 	str.w	r3, [r6, #1679]	@ 0x68f
 8002caa:	606b      	str	r3, [r5, #4]
 8002cac:	60ab      	str	r3, [r5, #8]
 8002cae:	60eb      	str	r3, [r5, #12]
 8002cb0:	742b      	strb	r3, [r5, #16]
    str1 = strchr(str1,'"');
 8002cb2:	f00d fef7 	bl	8010aa4 <strchr>
    str1++;
 8002cb6:	1c46      	adds	r6, r0, #1
    str2 = strchr(str1,'"');
 8002cb8:	2122      	movs	r1, #34	@ 0x22
 8002cba:	4630      	mov	r0, r6
 8002cbc:	f00d fef2 	bl	8010aa4 <strchr>
    strncpy(Sim80x.Gsm.MsgServiceNumber,str1,str2-str1);
 8002cc0:	4631      	mov	r1, r6
 8002cc2:	1b82      	subs	r2, r0, r6
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	f00d ff0c 	bl	8010ae2 <strncpy>
  str1 = strstr(strStart,"\r\n+CSMP:");
 8002cca:	491b      	ldr	r1, [pc, #108]	@ (8002d38 <Sim80x_BufferProcess+0x36c>)
 8002ccc:	4801      	ldr	r0, [pc, #4]	@ (8002cd4 <Sim80x_BufferProcess+0x308>)
 8002cce:	f00d ff1b 	bl	8010b08 <strstr>
 8002cd2:	e033      	b.n	8002d3c <Sim80x_BufferProcess+0x370>
 8002cd4:	20000233 	.word	0x20000233
 8002cd8:	08014618 	.word	0x08014618
 8002cdc:	080147d4 	.word	0x080147d4
 8002ce0:	080147e4 	.word	0x080147e4
 8002ce4:	080147f4 	.word	0x080147f4
 8002ce8:	08014800 	.word	0x08014800
 8002cec:	2000088b 	.word	0x2000088b
 8002cf0:	08014604 	.word	0x08014604
 8002cf4:	0801480c 	.word	0x0801480c
 8002cf8:	408f4000 	.word	0x408f4000
 8002cfc:	08014814 	.word	0x08014814
 8002d00:	08014820 	.word	0x08014820
 8002d04:	08014830 	.word	0x08014830
 8002d08:	08014840 	.word	0x08014840
 8002d0c:	08014850 	.word	0x08014850
 8002d10:	08014864 	.word	0x08014864
 8002d14:	08014474 	.word	0x08014474
 8002d18:	08014870 	.word	0x08014870
 8002d1c:	080148bc 	.word	0x080148bc
 8002d20:	200008ad 	.word	0x200008ad
 8002d24:	080148c8 	.word	0x080148c8
 8002d28:	080148d4 	.word	0x080148d4
 8002d2c:	20000a0b 	.word	0x20000a0b
 8002d30:	0801459c 	.word	0x0801459c
 8002d34:	200008c2 	.word	0x200008c2
 8002d38:	080148e0 	.word	0x080148e0
  if(str1!=NULL) {
 8002d3c:	b140      	cbz	r0, 8002d50 <Sim80x_BufferProcess+0x384>
    tmp_int32_t = sscanf(str1,"\r\n+CSMP: %hhd,%hhd,%hhd,%hhd\r\nOK\r\n",&Sim80x.Gsm.MsgTextModeParameterFo,&Sim80x.Gsm.MsgTextModeParameterVp,&Sim80x.Gsm.MsgTextModeParameterPid,&Sim80x.Gsm.MsgTextModeParameterDcs);
 8002d3e:	4a9c      	ldr	r2, [pc, #624]	@ (8002fb0 <Sim80x_BufferProcess+0x5e4>)
 8002d40:	9201      	str	r2, [sp, #4]
 8002d42:	1e53      	subs	r3, r2, #1
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	499b      	ldr	r1, [pc, #620]	@ (8002fb4 <Sim80x_BufferProcess+0x5e8>)
 8002d48:	1e93      	subs	r3, r2, #2
 8002d4a:	3a03      	subs	r2, #3
 8002d4c:	f00d fd9e 	bl	801088c <siscanf>
  str1 = strstr(strStart,"\r\n+CUSD:");
 8002d50:	4999      	ldr	r1, [pc, #612]	@ (8002fb8 <Sim80x_BufferProcess+0x5ec>)
 8002d52:	489a      	ldr	r0, [pc, #616]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002d54:	f00d fed8 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002d58:	b148      	cbz	r0, 8002d6e <Sim80x_BufferProcess+0x3a2>
    sscanf(str1,"\r\n+CUSD: 0, \"%[^\r]s",Sim80x.Gsm.Msg);    
 8002d5a:	4a99      	ldr	r2, [pc, #612]	@ (8002fc0 <Sim80x_BufferProcess+0x5f4>)
 8002d5c:	4999      	ldr	r1, [pc, #612]	@ (8002fc4 <Sim80x_BufferProcess+0x5f8>)
 8002d5e:	f00d fd95 	bl	801088c <siscanf>
    tmp_int32_t = strlen(Sim80x.Gsm.Msg);
 8002d62:	4897      	ldr	r0, [pc, #604]	@ (8002fc0 <Sim80x_BufferProcess+0x5f4>)
 8002d64:	f7fd fac4 	bl	80002f0 <strlen>
    if(tmp_int32_t > 5) {
 8002d68:	2805      	cmp	r0, #5
 8002d6a:	f200 80fe 	bhi.w	8002f6a <Sim80x_BufferProcess+0x59e>
  str1 = strstr(strStart,"AT+GSN\r");
 8002d6e:	4996      	ldr	r1, [pc, #600]	@ (8002fc8 <Sim80x_BufferProcess+0x5fc>)
 8002d70:	4892      	ldr	r0, [pc, #584]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002d72:	f00d fec9 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002d76:	b118      	cbz	r0, 8002d80 <Sim80x_BufferProcess+0x3b4>
    sscanf(str1,"\nAT+GSN\r\r\n%[^\r]",Sim80x.IMEI);    
 8002d78:	4a94      	ldr	r2, [pc, #592]	@ (8002fcc <Sim80x_BufferProcess+0x600>)
 8002d7a:	4995      	ldr	r1, [pc, #596]	@ (8002fd0 <Sim80x_BufferProcess+0x604>)
 8002d7c:	f00d fd86 	bl	801088c <siscanf>
  str1 = strstr(strStart,"AT+CIMI\r");
 8002d80:	4994      	ldr	r1, [pc, #592]	@ (8002fd4 <Sim80x_BufferProcess+0x608>)
 8002d82:	488e      	ldr	r0, [pc, #568]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002d84:	f00d fec0 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002d88:	b118      	cbz	r0, 8002d92 <Sim80x_BufferProcess+0x3c6>
    sscanf(str1,"\nAT+CIMI\r\r\n%[^\r]",Sim80x.CIMI);
 8002d8a:	4a93      	ldr	r2, [pc, #588]	@ (8002fd8 <Sim80x_BufferProcess+0x60c>)
 8002d8c:	4993      	ldr	r1, [pc, #588]	@ (8002fdc <Sim80x_BufferProcess+0x610>)
 8002d8e:	f00d fd7d 	bl	801088c <siscanf>
  str1 = strstr(strStart,"\r\n+CSTT:");
 8002d92:	4993      	ldr	r1, [pc, #588]	@ (8002fe0 <Sim80x_BufferProcess+0x614>)
 8002d94:	4889      	ldr	r0, [pc, #548]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002d96:	f00d feb7 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002d9a:	b138      	cbz	r0, 8002dac <Sim80x_BufferProcess+0x3e0>
    sscanf(str1,"\r\n+CSTT: \"%[^\"]\",\"%[^\"]\",\"%[^\"]\"\r\n",Sim80x.GPRS.APN,Sim80x.GPRS.APN_UserName,Sim80x.GPRS.APN_Password);    
 8002d9c:	4a91      	ldr	r2, [pc, #580]	@ (8002fe4 <Sim80x_BufferProcess+0x618>)
 8002d9e:	9200      	str	r2, [sp, #0]
 8002da0:	f1a2 0311 	sub.w	r3, r2, #17
 8002da4:	4990      	ldr	r1, [pc, #576]	@ (8002fe8 <Sim80x_BufferProcess+0x61c>)
 8002da6:	3a22      	subs	r2, #34	@ 0x22
 8002da8:	f00d fd70 	bl	801088c <siscanf>
  str1 = strstr(strStart,"AT+CIFSR\r\r\n");
 8002dac:	498f      	ldr	r1, [pc, #572]	@ (8002fec <Sim80x_BufferProcess+0x620>)
 8002dae:	4883      	ldr	r0, [pc, #524]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002db0:	f00d feaa 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002db4:	b118      	cbz	r0, 8002dbe <Sim80x_BufferProcess+0x3f2>
    sscanf(str1,"AT+CIFSR\r\r\n%[^\r]",Sim80x.GPRS.LocalIP);
 8002db6:	4a8e      	ldr	r2, [pc, #568]	@ (8002ff0 <Sim80x_BufferProcess+0x624>)
 8002db8:	498e      	ldr	r1, [pc, #568]	@ (8002ff4 <Sim80x_BufferProcess+0x628>)
 8002dba:	f00d fd67 	bl	801088c <siscanf>
  str1 = strstr(strStart,"\r\n+CIPMUX:");
 8002dbe:	498e      	ldr	r1, [pc, #568]	@ (8002ff8 <Sim80x_BufferProcess+0x62c>)
 8002dc0:	487e      	ldr	r0, [pc, #504]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002dc2:	f00d fea1 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002dc6:	b170      	cbz	r0, 8002de6 <Sim80x_BufferProcess+0x41a>
    str1 =strchr(str1,':');
 8002dc8:	213a      	movs	r1, #58	@ 0x3a
 8002dca:	f00d fe6b 	bl	8010aa4 <strchr>
    if(atoi(str1)==0)
 8002dce:	3001      	adds	r0, #1
 8002dd0:	f00b fda9 	bl	800e926 <atoi>
      Sim80x.GPRS.MultiConnection=0;
 8002dd4:	f894 37e6 	ldrb.w	r3, [r4, #2022]	@ 0x7e6
    if(atoi(str1)==0)
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	f040 80c1 	bne.w	8002f60 <Sim80x_BufferProcess+0x594>
      Sim80x.GPRS.MultiConnection=0;
 8002dde:	f360 0300 	bfi	r3, r0, #0, #1
 8002de2:	f884 37e6 	strb.w	r3, [r4, #2022]	@ 0x7e6
  str1 = strstr(strStart,"\r\nCONNECT OK\r\n");
 8002de6:	4985      	ldr	r1, [pc, #532]	@ (8002ffc <Sim80x_BufferProcess+0x630>)
 8002de8:	4874      	ldr	r0, [pc, #464]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002dea:	f00d fe8d 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002dee:	b110      	cbz	r0, 8002df6 <Sim80x_BufferProcess+0x42a>
    Sim80x.GPRS.Connection = GPRSConnection_ConnectOK;
 8002df0:	2303      	movs	r3, #3
 8002df2:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nCLOSE OK\r\n");
 8002df6:	4982      	ldr	r1, [pc, #520]	@ (8003000 <Sim80x_BufferProcess+0x634>)
 8002df8:	4870      	ldr	r0, [pc, #448]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002dfa:	f00d fe85 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002dfe:	b110      	cbz	r0, 8002e06 <Sim80x_BufferProcess+0x43a>
	Sim80x.GPRS.Connection = GPRSConnection_GPRSup;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nCLOSED\r\n");
 8002e06:	497f      	ldr	r1, [pc, #508]	@ (8003004 <Sim80x_BufferProcess+0x638>)
 8002e08:	486c      	ldr	r0, [pc, #432]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002e0a:	f00d fe7d 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002e0e:	b110      	cbz	r0, 8002e16 <Sim80x_BufferProcess+0x44a>
	Sim80x.GPRS.Connection = GPRSConnection_GPRSup;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nCONNECT FAIL\r\n");
 8002e16:	497c      	ldr	r1, [pc, #496]	@ (8003008 <Sim80x_BufferProcess+0x63c>)
 8002e18:	4868      	ldr	r0, [pc, #416]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002e1a:	f00d fe75 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002e1e:	b110      	cbz	r0, 8002e26 <Sim80x_BufferProcess+0x45a>
    Sim80x.GPRS.Connection = GPRSConnection_ConnectFail;
 8002e20:	2304      	movs	r3, #4
 8002e22:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nALREADY CONNECT\r\n");
 8002e26:	4979      	ldr	r1, [pc, #484]	@ (800300c <Sim80x_BufferProcess+0x640>)
 8002e28:	4864      	ldr	r0, [pc, #400]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002e2a:	f00d fe6d 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002e2e:	b110      	cbz	r0, 8002e36 <Sim80x_BufferProcess+0x46a>
    Sim80x.GPRS.Connection = GPRSConnection_AlreadyConnect;
 8002e30:	2302      	movs	r3, #2
 8002e32:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nSTATE: IP GPRSACT\r\n");
 8002e36:	4976      	ldr	r1, [pc, #472]	@ (8003010 <Sim80x_BufferProcess+0x644>)
 8002e38:	4860      	ldr	r0, [pc, #384]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002e3a:	f00d fe65 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002e3e:	b110      	cbz	r0, 8002e46 <Sim80x_BufferProcess+0x47a>
    Sim80x.GPRS.Connection = GPRSConnection_AlreadyConnect;
 8002e40:	2302      	movs	r3, #2
 8002e42:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nSHUT OK\r\n");
 8002e46:	4973      	ldr	r1, [pc, #460]	@ (8003014 <Sim80x_BufferProcess+0x648>)
 8002e48:	485c      	ldr	r0, [pc, #368]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002e4a:	f00d fe5d 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002e4e:	b110      	cbz	r0, 8002e56 <Sim80x_BufferProcess+0x48a>
    Sim80x.GPRS.Connection = GPRSConnection_Idle;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nSTATE: IP INITIAL\r\n");
 8002e56:	4970      	ldr	r1, [pc, #448]	@ (8003018 <Sim80x_BufferProcess+0x64c>)
 8002e58:	4858      	ldr	r0, [pc, #352]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002e5a:	f00d fe55 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002e5e:	b110      	cbz	r0, 8002e66 <Sim80x_BufferProcess+0x49a>
    Sim80x.GPRS.Connection = GPRSConnection_Idle;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f884 382b 	strb.w	r3, [r4, #2091]	@ 0x82b
  str1 = strstr(strStart,"\r\nSEND OK\r\n");
 8002e66:	496d      	ldr	r1, [pc, #436]	@ (800301c <Sim80x_BufferProcess+0x650>)
 8002e68:	4854      	ldr	r0, [pc, #336]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002e6a:	f00d fe4d 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002e6e:	b110      	cbz	r0, 8002e76 <Sim80x_BufferProcess+0x4aa>
    Sim80x.GPRS.SendStatus = GPRSSendData_SendOK;
 8002e70:	2302      	movs	r3, #2
 8002e72:	f884 382c 	strb.w	r3, [r4, #2092]	@ 0x82c
  str1 = strstr(strStart,"\r\nSEND FAIL\r\n");
 8002e76:	496a      	ldr	r1, [pc, #424]	@ (8003020 <Sim80x_BufferProcess+0x654>)
 8002e78:	4850      	ldr	r0, [pc, #320]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002e7a:	f00d fe45 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002e7e:	b110      	cbz	r0, 8002e86 <Sim80x_BufferProcess+0x4ba>
    Sim80x.GPRS.SendStatus = GPRSSendData_SendFail;
 8002e80:	2303      	movs	r3, #3
 8002e82:	f884 382c 	strb.w	r3, [r4, #2092]	@ 0x82c
  str1 = strstr(strStart,"\r\n+IPD");
 8002e86:	4967      	ldr	r1, [pc, #412]	@ (8003024 <Sim80x_BufferProcess+0x658>)
 8002e88:	484c      	ldr	r0, [pc, #304]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002e8a:	f00d fe3d 	bl	8010b08 <strstr>
  if(str1!=NULL) {
 8002e8e:	b1e0      	cbz	r0, 8002eca <Sim80x_BufferProcess+0x4fe>
    str1 = strchr(str1,',');
 8002e90:	212c      	movs	r1, #44	@ 0x2c
 8002e92:	f00d fe07 	bl	8010aa4 <strchr>
    str1++;
 8002e96:	1c46      	adds	r6, r0, #1
    tmp_int32_t = atoi(str1);
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f00b fd44 	bl	800e926 <atoi>
    if(tmp_int32_t > sizeof(Sim80x.GPRS.ReceiveDataBuf))
 8002e9e:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
    Sim80x.GPRS.ReceiveDataLen = tmp_int32_t;
 8002ea2:	bf94      	ite	ls
 8002ea4:	b287      	uxthls	r7, r0
 8002ea6:	f44f 7740 	movhi.w	r7, #768	@ 0x300
    tmp_int32_t = atoi(str1);
 8002eaa:	4605      	mov	r5, r0
    str1 = strchr(str1,':');
 8002eac:	f04f 013a 	mov.w	r1, #58	@ 0x3a
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	bf88      	it	hi
 8002eb4:	463d      	movhi	r5, r7
 8002eb6:	f00d fdf5 	bl	8010aa4 <strchr>
 8002eba:	4601      	mov	r1, r0
    memcpy(Sim80x.GPRS.ReceiveDataBuf,str1,tmp_int32_t);
 8002ebc:	462a      	mov	r2, r5
 8002ebe:	485a      	ldr	r0, [pc, #360]	@ (8003028 <Sim80x_BufferProcess+0x65c>)
 8002ec0:	3101      	adds	r1, #1
 8002ec2:	f00d ff19 	bl	8010cf8 <memcpy>
    Sim80x.GPRS.ReceiveDataLen = tmp_int32_t;
 8002ec6:	f8a4 782e 	strh.w	r7, [r4, #2094]	@ 0x82e
  str1 = strstr(strStart,"\r\n+CGNSINF:");
 8002eca:	4958      	ldr	r1, [pc, #352]	@ (800302c <Sim80x_BufferProcess+0x660>)
 8002ecc:	483b      	ldr	r0, [pc, #236]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002ece:	f00d fe1b 	bl	8010b08 <strstr>
  if(str1 == NULL)
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	d062      	beq.n	8002f9c <Sim80x_BufferProcess+0x5d0>
    str1 = strchr(str1,':');
 8002ed6:	213a      	movs	r1, #58	@ 0x3a
 8002ed8:	f00d fde4 	bl	8010aa4 <strchr>
    str1++;
 8002edc:	1c45      	adds	r5, r0, #1
    Sim80x.GPS.RunStatus = atoi(str1);
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f00b fd21 	bl	800e926 <atoi>
 8002ee4:	b2c0      	uxtb	r0, r0
 8002ee6:	f884 0b31 	strb.w	r0, [r4, #2865]	@ 0xb31
    if(Sim80x.GPS.RunStatus) {
 8002eea:	2800      	cmp	r0, #0
 8002eec:	f040 80aa 	bne.w	8003044 <Sim80x_BufferProcess+0x678>
	Sim80x.GPS.NewData = 1;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f884 3b30 	strb.w	r3, [r4, #2864]	@ 0xb30
  str1 = strstr(strStart,"\r\nAXN_");
 8002ef6:	494e      	ldr	r1, [pc, #312]	@ (8003030 <Sim80x_BufferProcess+0x664>)
 8002ef8:	4830      	ldr	r0, [pc, #192]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002efa:	f00d fe05 	bl	8010b08 <strstr>
  if(str1 != NULL) {
 8002efe:	b110      	cbz	r0, 8002f06 <Sim80x_BufferProcess+0x53a>
      Sim80x.GPS.RunStatus = 2;
 8002f00:	2302      	movs	r3, #2
 8002f02:	f884 3b31 	strb.w	r3, [r4, #2865]	@ 0xb31
    if((parameter==10) || (Sim80x.AtCommand.ReceiveAnswer[parameter][0]==0)) {
 8002f06:	4e4b      	ldr	r6, [pc, #300]	@ (8003034 <Sim80x_BufferProcess+0x668>)
  for( uint8_t parameter=0; parameter<11; parameter++)
 8002f08:	2500      	movs	r5, #0
    str1 = strstr(strStart,Sim80x.AtCommand.ReceiveAnswer[parameter]);
 8002f0a:	1cf7      	adds	r7, r6, #3
    if((parameter==10) || (Sim80x.AtCommand.ReceiveAnswer[parameter][0]==0)) {
 8002f0c:	f896 33bc 	ldrb.w	r3, [r6, #956]	@ 0x3bc
    str1 = strstr(strStart,Sim80x.AtCommand.ReceiveAnswer[parameter]);
 8002f10:	f506 716f 	add.w	r1, r6, #956	@ 0x3bc
 8002f14:	4638      	mov	r0, r7
    if((parameter==10) || (Sim80x.AtCommand.ReceiveAnswer[parameter][0]==0)) {
 8002f16:	3640      	adds	r6, #64	@ 0x40
 8002f18:	b14b      	cbz	r3, 8002f2e <Sim80x_BufferProcess+0x562>
    str1 = strstr(strStart,Sim80x.AtCommand.ReceiveAnswer[parameter]);
 8002f1a:	f00d fdf5 	bl	8010b08 <strstr>
      Sim80x.AtCommand.FindAnswer = parameter+1;
 8002f1e:	3501      	adds	r5, #1
 8002f20:	b2ed      	uxtb	r5, r5
    if(str1!=NULL) {
 8002f22:	2800      	cmp	r0, #0
 8002f24:	f040 815b 	bne.w	80031de <Sim80x_BufferProcess+0x812>
    if((parameter==10) || (Sim80x.AtCommand.ReceiveAnswer[parameter][0]==0)) {
 8002f28:	2d0a      	cmp	r5, #10
 8002f2a:	d1ef      	bne.n	8002f0c <Sim80x_BufferProcess+0x540>
 8002f2c:	4603      	mov	r3, r0
  Sim80x.UsartRxIndex=0;
 8002f2e:	2500      	movs	r5, #0
  memset(Sim80x.UsartRxBuffer,0,_SIM80X_BUFFER_SIZE);    
 8002f30:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002f34:	4629      	mov	r1, r5
 8002f36:	4821      	ldr	r0, [pc, #132]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
      Sim80x.AtCommand.FindAnswer=0;
 8002f38:	f884 3648 	strb.w	r3, [r4, #1608]	@ 0x648
  Sim80x.UsartRxIndex=0;
 8002f3c:	8025      	strh	r5, [r4, #0]
  memset(Sim80x.UsartRxBuffer,0,_SIM80X_BUFFER_SIZE);    
 8002f3e:	f00d fda9 	bl	8010a94 <memset>
  Sim80x.Status.Busy=0;
 8002f42:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 8002f46:	f365 0341 	bfi	r3, r5, #1, #1
 8002f4a:	f884 3330 	strb.w	r3, [r4, #816]	@ 0x330
  Sim80x.AtCommand.LowPowerTime = HAL_GetTick() + 50;
 8002f4e:	f006 fd25 	bl	800999c <HAL_GetTick>
 8002f52:	3032      	adds	r0, #50	@ 0x32
 8002f54:	f8c4 0640 	str.w	r0, [r4, #1600]	@ 0x640
}
 8002f58:	b009      	add	sp, #36	@ 0x24
 8002f5a:	ecbd 8b02 	vpop	{d8}
 8002f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Sim80x.GPRS.MultiConnection=1;
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	f884 37e6 	strb.w	r3, [r4, #2022]	@ 0x7e6
 8002f68:	e73d      	b.n	8002de6 <Sim80x_BufferProcess+0x41a>
      Sim80x.Gsm.Msg[tmp_int32_t-5] = 0;
 8002f6a:	4420      	add	r0, r4
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f880 36d2 	strb.w	r3, [r0, #1746]	@ 0x6d2
 8002f72:	e6fc      	b.n	8002d6e <Sim80x_BufferProcess+0x3a2>
      str1 = strchr(str1,',');
 8002f74:	4628      	mov	r0, r5
 8002f76:	212c      	movs	r1, #44	@ 0x2c
 8002f78:	f00d fd94 	bl	8010aa4 <strchr>
      str1++;
 8002f7c:	1c45      	adds	r5, r0, #1
 8002f7e:	e5f1      	b.n	8002b64 <Sim80x_BufferProcess+0x198>
	  memset(&Sim80x,0,sizeof(Sim80x));
 8002f80:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 8002f84:	2100      	movs	r1, #0
 8002f86:	482b      	ldr	r0, [pc, #172]	@ (8003034 <Sim80x_BufferProcess+0x668>)
 8002f88:	f00d fd84 	bl	8010a94 <memset>
	  osDelay(2000);
 8002f8c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002f90:	f00a fbf2 	bl	800d778 <osDelay>
	  Sim80x_SetPower(true);
 8002f94:	2001      	movs	r0, #1
 8002f96:	f7ff fbe5 	bl	8002764 <Sim80x_SetPower>
 8002f9a:	e5ca      	b.n	8002b32 <Sim80x_BufferProcess+0x166>
	  str1 = strstr(strStart,"\r\n+UGNSINF:");
 8002f9c:	4926      	ldr	r1, [pc, #152]	@ (8003038 <Sim80x_BufferProcess+0x66c>)
 8002f9e:	4807      	ldr	r0, [pc, #28]	@ (8002fbc <Sim80x_BufferProcess+0x5f0>)
 8002fa0:	f00d fdb2 	bl	8010b08 <strstr>
  if(str1 != NULL) {
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	d196      	bne.n	8002ed6 <Sim80x_BufferProcess+0x50a>
 8002fa8:	e7a5      	b.n	8002ef6 <Sim80x_BufferProcess+0x52a>
 8002faa:	1ef4      	subs	r4, r6, #3
 8002fac:	e52c      	b.n	8002a08 <Sim80x_BufferProcess+0x3c>
 8002fae:	bf00      	nop
 8002fb0:	200008c1 	.word	0x200008c1
 8002fb4:	080148ec 	.word	0x080148ec
 8002fb8:	08014910 	.word	0x08014910
 8002fbc:	20000233 	.word	0x20000233
 8002fc0:	20000907 	.word	0x20000907
 8002fc4:	0801491c 	.word	0x0801491c
 8002fc8:	08014930 	.word	0x08014930
 8002fcc:	20000540 	.word	0x20000540
 8002fd0:	08014938 	.word	0x08014938
 8002fd4:	08014948 	.word	0x08014948
 8002fd8:	20000550 	.word	0x20000550
 8002fdc:	08014954 	.word	0x08014954
 8002fe0:	08014968 	.word	0x08014968
 8002fe4:	20000a39 	.word	0x20000a39
 8002fe8:	08014974 	.word	0x08014974
 8002fec:	08014998 	.word	0x08014998
 8002ff0:	20000a4a 	.word	0x20000a4a
 8002ff4:	080149a4 	.word	0x080149a4
 8002ff8:	080149b8 	.word	0x080149b8
 8002ffc:	080149c4 	.word	0x080149c4
 8003000:	080149d4 	.word	0x080149d4
 8003004:	080149e4 	.word	0x080149e4
 8003008:	080149f0 	.word	0x080149f0
 800300c:	08014a04 	.word	0x08014a04
 8003010:	08014a18 	.word	0x08014a18
 8003014:	08014134 	.word	0x08014134
 8003018:	08014a30 	.word	0x08014a30
 800301c:	080141e8 	.word	0x080141e8
 8003020:	08014a48 	.word	0x08014a48
 8003024:	08014a58 	.word	0x08014a58
 8003028:	20000a60 	.word	0x20000a60
 800302c:	08014a60 	.word	0x08014a60
 8003030:	08014a78 	.word	0x08014a78
 8003034:	20000230 	.word	0x20000230
 8003038:	08014a6c 	.word	0x08014a6c
 800303c:	4b189680 	.word	0x4b189680
 8003040:	42c80000 	.word	0x42c80000
		str1 = strchr(str1,',');
 8003044:	212c      	movs	r1, #44	@ 0x2c
 8003046:	4628      	mov	r0, r5
 8003048:	f00d fd2c 	bl	8010aa4 <strchr>
		str1 = strchr(str1,',');
 800304c:	212c      	movs	r1, #44	@ 0x2c
 800304e:	3001      	adds	r0, #1
 8003050:	f00d fd28 	bl	8010aa4 <strchr>
		str1++;
 8003054:	1c47      	adds	r7, r0, #1
		str1 = strchr(str1,',');
 8003056:	4605      	mov	r5, r0
		strncpy(tmp_str, str1+0, 4);
 8003058:	2204      	movs	r2, #4
 800305a:	4639      	mov	r1, r7
 800305c:	a803      	add	r0, sp, #12
 800305e:	f00d fd40 	bl	8010ae2 <strncpy>
		tmp_str[4]=0;
 8003062:	2600      	movs	r6, #0
		Sim80x.GPS.Time.Year = atoi(tmp_str);	// year
 8003064:	a803      	add	r0, sp, #12
		tmp_str[4]=0;
 8003066:	f88d 6010 	strb.w	r6, [sp, #16]
		Sim80x.GPS.Time.Year = atoi(tmp_str);	// year
 800306a:	f00b fc5c 	bl	800e926 <atoi>
		strncpy(tmp_str, str1+4, 2);
 800306e:	1d69      	adds	r1, r5, #5
 8003070:	2202      	movs	r2, #2
		Sim80x.GPS.Time.Year = atoi(tmp_str);	// year
 8003072:	f8a4 0b34 	strh.w	r0, [r4, #2868]	@ 0xb34
		strncpy(tmp_str, str1+4, 2);
 8003076:	a803      	add	r0, sp, #12
 8003078:	f00d fd33 	bl	8010ae2 <strncpy>
		Sim80x.GPS.Time.Month = atoi(tmp_str);	// month
 800307c:	a803      	add	r0, sp, #12
		tmp_str[2]=0;
 800307e:	f8ad 600e 	strh.w	r6, [sp, #14]
		Sim80x.GPS.Time.Month = atoi(tmp_str);	// month
 8003082:	f00b fc50 	bl	800e926 <atoi>
		strncpy(tmp_str, str1+6, 2);
 8003086:	1de9      	adds	r1, r5, #7
 8003088:	2202      	movs	r2, #2
		Sim80x.GPS.Time.Month = atoi(tmp_str);	// month
 800308a:	f884 0b36 	strb.w	r0, [r4, #2870]	@ 0xb36
		strncpy(tmp_str, str1+6, 2);
 800308e:	a803      	add	r0, sp, #12
 8003090:	f00d fd27 	bl	8010ae2 <strncpy>
		Sim80x.GPS.Time.Day = atoi(tmp_str);	// day
 8003094:	a803      	add	r0, sp, #12
 8003096:	f00b fc46 	bl	800e926 <atoi>
		strncpy(tmp_str, str1+8, 2);
 800309a:	f105 0109 	add.w	r1, r5, #9
 800309e:	2202      	movs	r2, #2
		Sim80x.GPS.Time.Day = atoi(tmp_str);	// day
 80030a0:	f884 0b38 	strb.w	r0, [r4, #2872]	@ 0xb38
		strncpy(tmp_str, str1+8, 2);
 80030a4:	a803      	add	r0, sp, #12
 80030a6:	f00d fd1c 	bl	8010ae2 <strncpy>
		Sim80x.GPS.Time.Hour = atoi(tmp_str);	// hour
 80030aa:	a803      	add	r0, sp, #12
 80030ac:	f00b fc3b 	bl	800e926 <atoi>
		strncpy(tmp_str, str1+10, 2);
 80030b0:	f105 010b 	add.w	r1, r5, #11
 80030b4:	2202      	movs	r2, #2
		Sim80x.GPS.Time.Hour = atoi(tmp_str);	// hour
 80030b6:	f884 0b39 	strb.w	r0, [r4, #2873]	@ 0xb39
		strncpy(tmp_str, str1+10, 2);
 80030ba:	a803      	add	r0, sp, #12
 80030bc:	f00d fd11 	bl	8010ae2 <strncpy>
		Sim80x.GPS.Time.Min = atoi(tmp_str);	// min
 80030c0:	a803      	add	r0, sp, #12
 80030c2:	f00b fc30 	bl	800e926 <atoi>
		strncpy(tmp_str, str1+12, 2);
 80030c6:	f105 010d 	add.w	r1, r5, #13
 80030ca:	2202      	movs	r2, #2
		Sim80x.GPS.Time.Min = atoi(tmp_str);	// min
 80030cc:	f884 0b3a 	strb.w	r0, [r4, #2874]	@ 0xb3a
		strncpy(tmp_str, str1+12, 2);
 80030d0:	a803      	add	r0, sp, #12
 80030d2:	f00d fd06 	bl	8010ae2 <strncpy>
		Sim80x.GPS.Time.Sec = atoi(tmp_str);	// sec
 80030d6:	a803      	add	r0, sp, #12
 80030d8:	f00b fc25 	bl	800e926 <atoi>
		strncpy(tmp_str, str1+15, 3);
 80030dc:	2203      	movs	r2, #3
 80030de:	f105 0110 	add.w	r1, r5, #16
		Sim80x.GPS.Time.Sec = atoi(tmp_str);	// sec
 80030e2:	f884 0b3b 	strb.w	r0, [r4, #2875]	@ 0xb3b
		strncpy(tmp_str, str1+15, 3);
 80030e6:	a803      	add	r0, sp, #12
 80030e8:	f00d fcfb 	bl	8010ae2 <strncpy>
		Sim80x.GPS.Time.Millis = atoi(tmp_str); // millis
 80030ec:	a803      	add	r0, sp, #12
 80030ee:	f00b fc1a 	bl	800e926 <atoi>
		str1 = strchr(str1,',');
 80030f2:	212c      	movs	r1, #44	@ 0x2c
		Sim80x.GPS.Time.Millis = atoi(tmp_str); // millis
 80030f4:	4603      	mov	r3, r0
		str1 = strchr(str1,',');
 80030f6:	4638      	mov	r0, r7
		Sim80x.GPS.Time.Millis = atoi(tmp_str); // millis
 80030f8:	f8a4 3b3e 	strh.w	r3, [r4, #2878]	@ 0xb3e
		Sim80x.GPS.Time.Zone = 0;
 80030fc:	f884 6b3c 	strb.w	r6, [r4, #2876]	@ 0xb3c
		str1 = strchr(str1,',');
 8003100:	f00d fcd0 	bl	8010aa4 <strchr>
		str1++;
 8003104:	1c45      	adds	r5, r0, #1
		tmp = atof(str1);	// lat
 8003106:	4628      	mov	r0, r5
 8003108:	f00b fc0a 	bl	800e920 <atof>
 800310c:	ec51 0b10 	vmov	r0, r1, d0
 8003110:	f7fd fdaa 	bl	8000c68 <__aeabi_d2f>
		Sim80x.GPS.Lat = tmp * 10000000;
 8003114:	ed1f 8a37 	vldr	s16, [pc, #-220]	@ 800303c <Sim80x_BufferProcess+0x670>
		tmp = atof(str1);	// lat
 8003118:	ee07 0a90 	vmov	s15, r0
		Sim80x.GPS.Lat = tmp * 10000000;
 800311c:	ee67 7a88 	vmul.f32	s15, s15, s16
		str1 = strchr(str1,',');
 8003120:	212c      	movs	r1, #44	@ 0x2c
		Sim80x.GPS.Lat = tmp * 10000000;
 8003122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		str1 = strchr(str1,',');
 8003126:	4628      	mov	r0, r5
		Sim80x.GPS.Lat = tmp * 10000000;
 8003128:	ee17 3a90 	vmov	r3, s15
 800312c:	f8c4 3b40 	str.w	r3, [r4, #2880]	@ 0xb40
		str1 = strchr(str1,',');
 8003130:	f00d fcb8 	bl	8010aa4 <strchr>
		str1++;
 8003134:	1c45      	adds	r5, r0, #1
		tmp = atof(str1);	// lon
 8003136:	4628      	mov	r0, r5
 8003138:	f00b fbf2 	bl	800e920 <atof>
 800313c:	ec51 0b10 	vmov	r0, r1, d0
 8003140:	f7fd fd92 	bl	8000c68 <__aeabi_d2f>
 8003144:	ee07 0a90 	vmov	s15, r0
		Sim80x.GPS.Lon = tmp * 10000000;
 8003148:	ee67 7a88 	vmul.f32	s15, s15, s16
		str1 = strchr(str1,',');
 800314c:	212c      	movs	r1, #44	@ 0x2c
		Sim80x.GPS.Lon = tmp * 10000000;
 800314e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		str1 = strchr(str1,',');
 8003152:	4628      	mov	r0, r5
		Sim80x.GPS.Lon = tmp * 10000000;
 8003154:	ee17 3a90 	vmov	r3, s15
 8003158:	f8c4 3b44 	str.w	r3, [r4, #2884]	@ 0xb44
		str1 = strchr(str1,',');
 800315c:	f00d fca2 	bl	8010aa4 <strchr>
		str1++;
 8003160:	1c45      	adds	r5, r0, #1
		tmp = atof(str1);	// alt
 8003162:	4628      	mov	r0, r5
 8003164:	f00b fbdc 	bl	800e920 <atof>
 8003168:	ec51 0b10 	vmov	r0, r1, d0
 800316c:	f7fd fd7c 	bl	8000c68 <__aeabi_d2f>
		Sim80x.GPS.Alt = tmp * 100;
 8003170:	ed1f 7a4d 	vldr	s14, [pc, #-308]	@ 8003040 <Sim80x_BufferProcess+0x674>
		tmp = atof(str1);	// alt
 8003174:	ee07 0a90 	vmov	s15, r0
		Sim80x.GPS.Alt = tmp * 100;
 8003178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800317c:	2603      	movs	r6, #3
 800317e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003182:	ee17 3a90 	vmov	r3, s15
 8003186:	f8c4 3b48 	str.w	r3, [r4, #2888]	@ 0xb48
			str1 = strchr(str1,',');
 800318a:	4628      	mov	r0, r5
 800318c:	212c      	movs	r1, #44	@ 0x2c
 800318e:	f00d fc89 	bl	8010aa4 <strchr>
		for(uint8_t i=0; i<3; i++)
 8003192:	1e73      	subs	r3, r6, #1
 8003194:	f013 06ff 	ands.w	r6, r3, #255	@ 0xff
			str1++;
 8003198:	f100 0501 	add.w	r5, r0, #1
		for(uint8_t i=0; i<3; i++)
 800319c:	d1f5      	bne.n	800318a <Sim80x_BufferProcess+0x7be>
		Sim80x.GPS.Fix = atoi(str1);
 800319e:	4628      	mov	r0, r5
 80031a0:	f00b fbc1 	bl	800e926 <atoi>
 80031a4:	2607      	movs	r6, #7
 80031a6:	f884 0b32 	strb.w	r0, [r4, #2866]	@ 0xb32
			str1 = strchr(str1,',');
 80031aa:	4628      	mov	r0, r5
 80031ac:	212c      	movs	r1, #44	@ 0x2c
 80031ae:	f00d fc79 	bl	8010aa4 <strchr>
		for(uint8_t i=0; i<7; i++)
 80031b2:	1e73      	subs	r3, r6, #1
 80031b4:	f013 06ff 	ands.w	r6, r3, #255	@ 0xff
			str1++;
 80031b8:	f100 0501 	add.w	r5, r0, #1
		for(uint8_t i=0; i<7; i++)
 80031bc:	d1f5      	bne.n	80031aa <Sim80x_BufferProcess+0x7de>
		Sim80x.GPS.SatInUse = atoi(str1);
 80031be:	4628      	mov	r0, r5
 80031c0:	f00b fbb1 	bl	800e926 <atoi>
 80031c4:	f884 0b4c 	strb.w	r0, [r4, #2892]	@ 0xb4c
 80031c8:	e692      	b.n	8002ef0 <Sim80x_BufferProcess+0x524>
    str1 = strchr(str1,',');
 80031ca:	212c      	movs	r1, #44	@ 0x2c
 80031cc:	f00d fc6a 	bl	8010aa4 <strchr>
        Sim80x.Gsm.HaveNewMsg[i] = atoi(str1);    
 80031d0:	3001      	adds	r0, #1
 80031d2:	f00b fba8 	bl	800e926 <atoi>
 80031d6:	4425      	add	r5, r4
 80031d8:	f885 07dc 	strb.w	r0, [r5, #2012]	@ 0x7dc
        break;
 80031dc:	e55b      	b.n	8002c96 <Sim80x_BufferProcess+0x2ca>
 80031de:	462b      	mov	r3, r5
 80031e0:	e6a5      	b.n	8002f2e <Sim80x_BufferProcess+0x562>
        memset(Sim80x.Gsm.Msg,0,sizeof(Sim80x.Gsm.Msg));
 80031e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031e6:	4827      	ldr	r0, [pc, #156]	@ (8003284 <Sim80x_BufferProcess+0x8b8>)
 80031e8:	2100      	movs	r1, #0
 80031ea:	f00d fc53 	bl	8010a94 <memset>
        memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 80031ee:	4a26      	ldr	r2, [pc, #152]	@ (8003288 <Sim80x_BufferProcess+0x8bc>)
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c4 36c5 	str.w	r3, [r4, #1733]	@ 0x6c5
        memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
 80031f6:	f8c4 36b4 	str.w	r3, [r4, #1716]	@ 0x6b4
        memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 80031fa:	6053      	str	r3, [r2, #4]
 80031fc:	7213      	strb	r3, [r2, #8]
        memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
 80031fe:	f842 3c05 	str.w	r3, [r2, #-5]
 8003202:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003206:	f842 3c0d 	str.w	r3, [r2, #-13]
        memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));
 800320a:	f8c4 36ce 	str.w	r3, [r4, #1742]	@ 0x6ce
        memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
 800320e:	f842 3c09 	str.w	r3, [r2, #-9]
        memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));
 8003212:	7453      	strb	r3, [r2, #17]
 8003214:	f8c2 300d 	str.w	r3, [r2, #13]
        Sim80x.Gsm.MsgReadIsOK=1;
 8003218:	f894 364c 	ldrb.w	r3, [r4, #1612]	@ 0x64c
 800321c:	f043 0302 	orr.w	r3, r3, #2
 8003220:	f884 364c 	strb.w	r3, [r4, #1612]	@ 0x64c
 8003224:	e4bb      	b.n	8002b9e <Sim80x_BufferProcess+0x1d2>
      memset(Sim80x.Gsm.Msg,0,sizeof(Sim80x.Gsm.Msg));
 8003226:	4f17      	ldr	r7, [pc, #92]	@ (8003284 <Sim80x_BufferProcess+0x8b8>)
 8003228:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800322c:	2100      	movs	r1, #0
 800322e:	4638      	mov	r0, r7
 8003230:	f00d fc30 	bl	8010a94 <memset>
      memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
 8003234:	f1a7 0223 	sub.w	r2, r7, #35	@ 0x23
      memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 8003238:	f1a7 0312 	sub.w	r3, r7, #18
      tmp_int32_t = sscanf(str1,"\r\n+CMGR: %*[^,],\"%[^\"]\",%*[^,],\"%[^,],%[^+-]%*d\"\r\n%[^\r]s\r\nOK\r\n",Sim80x.Gsm.MsgNumber,Sim80x.Gsm.MsgDate,Sim80x.Gsm.MsgTime,Sim80x.Gsm.Msg);      
 800323c:	4628      	mov	r0, r5
      memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));
 800323e:	f1a7 0109 	sub.w	r1, r7, #9
      memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 8003242:	2500      	movs	r5, #0
      tmp_int32_t = sscanf(str1,"\r\n+CMGR: %*[^,],\"%[^\"]\",%*[^,],\"%[^,],%[^+-]%*d\"\r\n%[^\r]s\r\nOK\r\n",Sim80x.Gsm.MsgNumber,Sim80x.Gsm.MsgDate,Sim80x.Gsm.MsgTime,Sim80x.Gsm.Msg);      
 8003244:	9100      	str	r1, [sp, #0]
 8003246:	9701      	str	r7, [sp, #4]
 8003248:	4910      	ldr	r1, [pc, #64]	@ (800328c <Sim80x_BufferProcess+0x8c0>)
      memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 800324a:	f8c6 56c2 	str.w	r5, [r6, #1730]	@ 0x6c2
      memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));
 800324e:	f847 5c05 	str.w	r5, [r7, #-5]
      memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 8003252:	f847 5c0e 	str.w	r5, [r7, #-14]
      memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
 8003256:	f8c6 56b1 	str.w	r5, [r6, #1713]	@ 0x6b1
      memset(Sim80x.Gsm.MsgDate,0,sizeof(Sim80x.Gsm.MsgDate));
 800325a:	721d      	strb	r5, [r3, #8]
      memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));
 800325c:	f807 5c01 	strb.w	r5, [r7, #-1]
      memset(Sim80x.Gsm.MsgNumber,0,sizeof(Sim80x.Gsm.MsgNumber));
 8003260:	60d5      	str	r5, [r2, #12]
 8003262:	7415      	strb	r5, [r2, #16]
 8003264:	e9c2 5501 	strd	r5, r5, [r2, #4]
      memset(Sim80x.Gsm.MsgTime,0,sizeof(Sim80x.Gsm.MsgTime));
 8003268:	f8c6 56cb 	str.w	r5, [r6, #1739]	@ 0x6cb
      tmp_int32_t = sscanf(str1,"\r\n+CMGR: %*[^,],\"%[^\"]\",%*[^,],\"%[^,],%[^+-]%*d\"\r\n%[^\r]s\r\nOK\r\n",Sim80x.Gsm.MsgNumber,Sim80x.Gsm.MsgDate,Sim80x.Gsm.MsgTime,Sim80x.Gsm.Msg);      
 800326c:	f00d fb0e 	bl	801088c <siscanf>
      if(tmp_int32_t == 4)
 8003270:	2804      	cmp	r0, #4
        Sim80x.Gsm.MsgReadIsOK=1;
 8003272:	f894 364c 	ldrb.w	r3, [r4, #1612]	@ 0x64c
      if(tmp_int32_t == 4)
 8003276:	d0d1      	beq.n	800321c <Sim80x_BufferProcess+0x850>
        Sim80x.Gsm.MsgReadIsOK=0;
 8003278:	f365 0341 	bfi	r3, r5, #1, #1
 800327c:	f884 364c 	strb.w	r3, [r4, #1612]	@ 0x64c
 8003280:	e48d      	b.n	8002b9e <Sim80x_BufferProcess+0x1d2>
 8003282:	bf00      	nop
 8003284:	20000907 	.word	0x20000907
 8003288:	200008f5 	.word	0x200008f5
 800328c:	0801487c 	.word	0x0801487c

08003290 <StartSim80xBuffTask>:
{ 
 8003290:	b508      	push	{r3, lr}
  printf("SIM BuffTaskStart\r\n");
 8003292:	480f      	ldr	r0, [pc, #60]	@ (80032d0 <StartSim80xBuffTask+0x40>)
 8003294:	4c0f      	ldr	r4, [pc, #60]	@ (80032d4 <StartSim80xBuffTask+0x44>)
 8003296:	f00d fa9d 	bl	80107d4 <puts>
 800329a:	e008      	b.n	80032ae <StartSim80xBuffTask+0x1e>
    osDelay(Sim80x.Status.Power ? 3 : 50);
 800329c:	f894 3330 	ldrb.w	r3, [r4, #816]	@ 0x330
 80032a0:	f013 0f04 	tst.w	r3, #4
 80032a4:	bf0c      	ite	eq
 80032a6:	2032      	moveq	r0, #50	@ 0x32
 80032a8:	2003      	movne	r0, #3
 80032aa:	f00a fa65 	bl	800d778 <osDelay>
    if( ((Sim80x.UsartRxIndex>4) && (HAL_GetTick()-Sim80x.UsartRxLastTime > 20)) ) {
 80032ae:	8823      	ldrh	r3, [r4, #0]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d9f3      	bls.n	800329c <StartSim80xBuffTask+0xc>
 80032b4:	f006 fb72 	bl	800999c <HAL_GetTick>
 80032b8:	e9d4 23c2 	ldrd	r2, r3, [r4, #776]	@ 0x308
 80032bc:	1a80      	subs	r0, r0, r2
 80032be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80032c2:	2815      	cmp	r0, #21
 80032c4:	f173 0300 	sbcs.w	r3, r3, #0
 80032c8:	d3e8      	bcc.n	800329c <StartSim80xBuffTask+0xc>
      Sim80x_BufferProcess();      
 80032ca:	f7ff fb7f 	bl	80029cc <Sim80x_BufferProcess>
 80032ce:	e7e5      	b.n	800329c <StartSim80xBuffTask+0xc>
 80032d0:	08014a80 	.word	0x08014a80
 80032d4:	20000230 	.word	0x20000230

080032d8 <ADC_DMA_Start>:
	  printf("ADC 1: %d , ADC 2: %d ADC 3: %d ADC 4: %d ADC 5: %d \r\n", adc_data[0], adc_data[1], adc_data[2], adc_data[3], adc_data[4]);
}


void ADC_DMA_Start()
{
 80032d8:	b510      	push	{r4, lr}
	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);                    // ADC calibration
 80032da:	4c07      	ldr	r4, [pc, #28]	@ (80032f8 <ADC_DMA_Start+0x20>)
 80032dc:	217f      	movs	r1, #127	@ 0x7f
 80032de:	4620      	mov	r0, r4
 80032e0:	f006 ffd2 	bl	800a288 <HAL_ADCEx_Calibration_Start>
	  HAL_Delay(10);
 80032e4:	200a      	movs	r0, #10
 80032e6:	f006 fb5f 	bl	80099a8 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_data, 5);   // start ADC DMA (1 channel, 5 reads per channel)
 80032ea:	4620      	mov	r0, r4
 80032ec:	4903      	ldr	r1, [pc, #12]	@ (80032fc <ADC_DMA_Start+0x24>)
}
 80032ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_data, 5);   // start ADC DMA (1 channel, 5 reads per channel)
 80032f2:	2205      	movs	r2, #5
 80032f4:	f006 bf3a 	b.w	800a16c <HAL_ADC_Start_DMA>
 80032f8:	200018c0 	.word	0x200018c0
 80032fc:	20000d80 	.word	0x20000d80

08003300 <GET_MCU_Temp>:
	    uint16_t cal_temp = *((uint16_t*) ((uint32_t)0x1FFF75A8));
   	    uint16_t cal_value = *((uint16_t*) ((uint32_t)0x1FFF75CA));

	  	for(uint8_t i=0; i<5;i+=1)
	  	{
	  		tmp+=adc_data[i];
 8003300:	4a23      	ldr	r2, [pc, #140]	@ (8003390 <GET_MCU_Temp+0x90>)
	  	}
	  	tmp*=0.2f;
 8003302:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003394 <GET_MCU_Temp+0x94>
	  		tmp+=adc_data[i];
 8003306:	8811      	ldrh	r1, [r2, #0]
 8003308:	8853      	ldrh	r3, [r2, #2]
 800330a:	8890      	ldrh	r0, [r2, #4]
 800330c:	440b      	add	r3, r1
 800330e:	88d1      	ldrh	r1, [r2, #6]
 8003310:	8912      	ldrh	r2, [r2, #8]
 8003312:	4403      	add	r3, r0
 8003314:	440b      	add	r3, r1
 8003316:	4413      	add	r3, r2
	  	tmp*=0.2f;
 8003318:	b29b      	uxth	r3, r3
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8003322:	b570      	push	{r4, r5, r6, lr}
	  	tmp*=0.2f;
 8003324:	ee67 7a87 	vmul.f32	s15, s15, s14
	    uint16_t cal_temp = *((uint16_t*) ((uint32_t)0x1FFF75A8));
 8003328:	4e1b      	ldr	r6, [pc, #108]	@ (8003398 <GET_MCU_Temp+0x98>)
	  	tmp*=0.2f;
 800332a:	eefc 7ae7 	vcvt.u32.f32	s15, s15

	  	temperature = ((cal_temp - (float)tmp) * 4.3) / cal_value + 25.0;
 800332e:	f8b6 30a8 	ldrh.w	r3, [r6, #168]	@ 0xa8
 8003332:	ee07 3a10 	vmov	s14, r3
 8003336:	ee17 3a90 	vmov	r3, s15
 800333a:	b29b      	uxth	r3, r3
 800333c:	ee07 3a90 	vmov	s15, r3
 8003340:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800334c:	ee17 0a90 	vmov	r0, s15
 8003350:	f7fd f93a 	bl	80005c8 <__aeabi_f2d>
 8003354:	a30c      	add	r3, pc, #48	@ (adr r3, 8003388 <GET_MCU_Temp+0x88>)
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	f7fd f98d 	bl	8000678 <__aeabi_dmul>
 800335e:	4604      	mov	r4, r0
 8003360:	f8b6 00ca 	ldrh.w	r0, [r6, #202]	@ 0xca
 8003364:	460d      	mov	r5, r1
 8003366:	f7fd f91d 	bl	80005a4 <__aeabi_i2d>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4620      	mov	r0, r4
 8003370:	4629      	mov	r1, r5
 8003372:	f7fd faab 	bl	80008cc <__aeabi_ddiv>
 8003376:	4b09      	ldr	r3, [pc, #36]	@ (800339c <GET_MCU_Temp+0x9c>)
 8003378:	2200      	movs	r2, #0
 800337a:	f7fc ffc7 	bl	800030c <__adddf3>
 800337e:	f7fd fc73 	bl	8000c68 <__aeabi_d2f>
	  	return temperature;
}
 8003382:	ee00 0a10 	vmov	s0, r0
 8003386:	bd70      	pop	{r4, r5, r6, pc}
 8003388:	33333333 	.word	0x33333333
 800338c:	40113333 	.word	0x40113333
 8003390:	20000d80 	.word	0x20000d80
 8003394:	3e4ccccd 	.word	0x3e4ccccd
 8003398:	1fff7500 	.word	0x1fff7500
 800339c:	40390000 	.word	0x40390000

080033a0 <read_register16.isra.0>:
	params->oversampling_temperature = BMP280_STANDARD;
	params->oversampling_humidity = BMP280_STANDARD;
	params->standby = BMP280_STANDBY_250;
}

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80033a0:	b510      	push	{r4, lr}
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80033a2:	ea4f 0c40 	mov.w	ip, r0, lsl #1
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80033a6:	b086      	sub	sp, #24
 80033a8:	4608      	mov	r0, r1

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80033aa:	fa1f f18c 	uxth.w	r1, ip
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80033ae:	469c      	mov	ip, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80033b0:	2302      	movs	r3, #2
 80033b2:	f241 3488 	movw	r4, #5000	@ 0x1388
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	ab05      	add	r3, sp, #20
 80033ba:	9402      	str	r4, [sp, #8]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	2301      	movs	r3, #1
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80033c0:	4664      	mov	r4, ip
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80033c2:	f008 f925 	bl	800b610 <HAL_I2C_Mem_Read>
 80033c6:	b928      	cbnz	r0, 80033d4 <read_register16.isra.0+0x34>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80033c8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80033cc:	8023      	strh	r3, [r4, #0]
		return true;
 80033ce:	2001      	movs	r0, #1
	} else
		return false;

}
 80033d0:	b006      	add	sp, #24
 80033d2:	bd10      	pop	{r4, pc}
		return false;
 80033d4:	2000      	movs	r0, #0
}
 80033d6:	b006      	add	sp, #24
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	bf00      	nop

080033dc <bmp280_init>:
		return false;
	else
		return true;
}

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80033dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80033e0:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 80033e2:	f1a3 0276 	sub.w	r2, r3, #118	@ 0x76
 80033e6:	2a01      	cmp	r2, #1
bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80033e8:	b087      	sub	sp, #28
	if (dev->addr != BMP280_I2C_ADDRESS_0
 80033ea:	d904      	bls.n	80033f6 <bmp280_init+0x1a>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {

		return false;
 80033ec:	2700      	movs	r7, #0
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
		return false;
	}

	return true;
}
 80033ee:	4638      	mov	r0, r7
 80033f0:	b007      	add	sp, #28
 80033f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80033f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fa:	9202      	str	r2, [sp, #8]
 80033fc:	460d      	mov	r5, r1
	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80033fe:	f100 0232 	add.w	r2, r0, #50	@ 0x32
	tx_buff = (dev->addr << 1);
 8003402:	0059      	lsls	r1, r3, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003404:	2301      	movs	r3, #1
 8003406:	e9cd 2300 	strd	r2, r3, [sp]
 800340a:	4604      	mov	r4, r0
 800340c:	b289      	uxth	r1, r1
 800340e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003410:	22d0      	movs	r2, #208	@ 0xd0
 8003412:	f008 f8fd 	bl	800b610 <HAL_I2C_Mem_Read>
 8003416:	2800      	cmp	r0, #0
 8003418:	d1e8      	bne.n	80033ec <bmp280_init+0x10>
	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800341a:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 800341e:	2b58      	cmp	r3, #88	@ 0x58
 8003420:	d001      	beq.n	8003426 <bmp280_init+0x4a>
 8003422:	2b60      	cmp	r3, #96	@ 0x60
 8003424:	d1e2      	bne.n	80033ec <bmp280_init+0x10>
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8003426:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8003428:	2701      	movs	r7, #1
 800342a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800342e:	ae05      	add	r6, sp, #20
 8003430:	23b6      	movs	r3, #182	@ 0xb6
 8003432:	9202      	str	r2, [sp, #8]
	tx_buff = (dev->addr << 1);
 8003434:	40b9      	lsls	r1, r7
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8003436:	9701      	str	r7, [sp, #4]
 8003438:	9600      	str	r6, [sp, #0]
 800343a:	f88d 3014 	strb.w	r3, [sp, #20]
 800343e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003440:	b289      	uxth	r1, r1
 8003442:	463b      	mov	r3, r7
 8003444:	22e0      	movs	r2, #224	@ 0xe0
 8003446:	f007 ffbd 	bl	800b3c4 <HAL_I2C_Mem_Write>
 800344a:	2800      	cmp	r0, #0
 800344c:	d1ce      	bne.n	80033ec <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800344e:	f241 3888 	movw	r8, #5000	@ 0x1388
	tx_buff = (dev->addr << 1);
 8003452:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003454:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003456:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8003458:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800345a:	2301      	movs	r3, #1
 800345c:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8003460:	b289      	uxth	r1, r1
 8003462:	22f3      	movs	r2, #243	@ 0xf3
 8003464:	f008 f8d4 	bl	800b610 <HAL_I2C_Mem_Read>
				&& (status & 1) == 0)
 8003468:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	4303      	orrs	r3, r0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ec      	bne.n	8003452 <bmp280_init+0x76>
	tx_buff = (dev->addr << 1);
 8003478:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800347a:	f8cd 8008 	str.w	r8, [sp, #8]
 800347e:	2702      	movs	r7, #2
	tx_buff = (dev->addr << 1);
 8003480:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003482:	9600      	str	r6, [sp, #0]
 8003484:	9701      	str	r7, [sp, #4]
 8003486:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003488:	b289      	uxth	r1, r1
 800348a:	2301      	movs	r3, #1
 800348c:	2288      	movs	r2, #136	@ 0x88
 800348e:	f008 f8bf 	bl	800b610 <HAL_I2C_Mem_Read>
 8003492:	2800      	cmp	r0, #0
 8003494:	d1aa      	bne.n	80033ec <bmp280_init+0x10>
 8003496:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800349a:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 800349c:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800349e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80034a2:	8023      	strh	r3, [r4, #0]
	tx_buff = (dev->addr << 1);
 80034a4:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80034a6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80034a8:	b289      	uxth	r1, r1
 80034aa:	2301      	movs	r3, #1
 80034ac:	228a      	movs	r2, #138	@ 0x8a
 80034ae:	f008 f8af 	bl	800b610 <HAL_I2C_Mem_Read>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d19a      	bne.n	80033ec <bmp280_init+0x10>
 80034b6:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80034ba:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 80034bc:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80034be:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80034c2:	8063      	strh	r3, [r4, #2]
	tx_buff = (dev->addr << 1);
 80034c4:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80034c6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80034c8:	b289      	uxth	r1, r1
 80034ca:	2301      	movs	r3, #1
 80034cc:	228c      	movs	r2, #140	@ 0x8c
 80034ce:	f008 f89f 	bl	800b610 <HAL_I2C_Mem_Read>
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d18a      	bne.n	80033ec <bmp280_init+0x10>
 80034d6:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80034da:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 80034dc:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80034de:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80034e2:	80a3      	strh	r3, [r4, #4]
	tx_buff = (dev->addr << 1);
 80034e4:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80034e6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80034e8:	b289      	uxth	r1, r1
 80034ea:	2301      	movs	r3, #1
 80034ec:	228e      	movs	r2, #142	@ 0x8e
 80034ee:	f008 f88f 	bl	800b610 <HAL_I2C_Mem_Read>
 80034f2:	2800      	cmp	r0, #0
 80034f4:	f47f af7a 	bne.w	80033ec <bmp280_init+0x10>
 80034f8:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80034fc:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 80034fe:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8003500:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003504:	80e3      	strh	r3, [r4, #6]
	tx_buff = (dev->addr << 1);
 8003506:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003508:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800350a:	b289      	uxth	r1, r1
 800350c:	2301      	movs	r3, #1
 800350e:	2290      	movs	r2, #144	@ 0x90
 8003510:	f008 f87e 	bl	800b610 <HAL_I2C_Mem_Read>
 8003514:	2800      	cmp	r0, #0
 8003516:	f47f af69 	bne.w	80033ec <bmp280_init+0x10>
 800351a:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800351e:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8003520:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8003522:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003526:	8123      	strh	r3, [r4, #8]
	tx_buff = (dev->addr << 1);
 8003528:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800352a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800352c:	b289      	uxth	r1, r1
 800352e:	2301      	movs	r3, #1
 8003530:	2292      	movs	r2, #146	@ 0x92
 8003532:	f008 f86d 	bl	800b610 <HAL_I2C_Mem_Read>
 8003536:	2800      	cmp	r0, #0
 8003538:	f47f af58 	bne.w	80033ec <bmp280_init+0x10>
 800353c:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8003540:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8003542:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8003544:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8003548:	8160      	strh	r0, [r4, #10]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800354a:	2301      	movs	r3, #1
	tx_buff = (dev->addr << 1);
 800354c:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800354e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003550:	2294      	movs	r2, #148	@ 0x94
 8003552:	b289      	uxth	r1, r1
 8003554:	f008 f85c 	bl	800b610 <HAL_I2C_Mem_Read>
 8003558:	2800      	cmp	r0, #0
 800355a:	f47f af47 	bne.w	80033ec <bmp280_init+0x10>
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800355e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003562:	81a3      	strh	r3, [r4, #12]
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8003564:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003566:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8003568:	f104 030e 	add.w	r3, r4, #14
 800356c:	2296      	movs	r2, #150	@ 0x96
 800356e:	f7ff ff17 	bl	80033a0 <read_register16.isra.0>
 8003572:	2800      	cmp	r0, #0
 8003574:	f43f af3a 	beq.w	80033ec <bmp280_init+0x10>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8003578:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800357a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 800357c:	f104 0310 	add.w	r3, r4, #16
 8003580:	2298      	movs	r2, #152	@ 0x98
 8003582:	f7ff ff0d 	bl	80033a0 <read_register16.isra.0>
 8003586:	2800      	cmp	r0, #0
 8003588:	f43f af30 	beq.w	80033ec <bmp280_init+0x10>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800358c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800358e:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8003590:	f104 0312 	add.w	r3, r4, #18
 8003594:	229a      	movs	r2, #154	@ 0x9a
 8003596:	f7ff ff03 	bl	80033a0 <read_register16.isra.0>
 800359a:	2800      	cmp	r0, #0
 800359c:	f43f af26 	beq.w	80033ec <bmp280_init+0x10>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80035a0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80035a2:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 80035a4:	f104 0314 	add.w	r3, r4, #20
 80035a8:	229c      	movs	r2, #156	@ 0x9c
 80035aa:	f7ff fef9 	bl	80033a0 <read_register16.isra.0>
 80035ae:	2800      	cmp	r0, #0
 80035b0:	f43f af1c 	beq.w	80033ec <bmp280_init+0x10>
			&& read_register16(dev, 0x9e,
 80035b4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80035b6:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 80035b8:	f104 0316 	add.w	r3, r4, #22
 80035bc:	229e      	movs	r2, #158	@ 0x9e
 80035be:	f7ff feef 	bl	80033a0 <read_register16.isra.0>
 80035c2:	4607      	mov	r7, r0
 80035c4:	2800      	cmp	r0, #0
 80035c6:	f43f af11 	beq.w	80033ec <bmp280_init+0x10>
	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80035ca:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
 80035ce:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 80035d0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80035d2:	2a60      	cmp	r2, #96	@ 0x60
 80035d4:	d03d      	beq.n	8003652 <bmp280_init+0x276>
	tx_buff = (dev->addr << 1);
 80035d6:	005b      	lsls	r3, r3, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80035d8:	9600      	str	r6, [sp, #0]
 80035da:	b299      	uxth	r1, r3
	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80035dc:	786b      	ldrb	r3, [r5, #1]
 80035de:	796a      	ldrb	r2, [r5, #5]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80035e6:	f88d 3014 	strb.w	r3, [sp, #20]
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80035ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80035ee:	2301      	movs	r3, #1
 80035f0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80035f4:	22f5      	movs	r2, #245	@ 0xf5
 80035f6:	f007 fee5 	bl	800b3c4 <HAL_I2C_Mem_Write>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	f47f aef6 	bne.w	80033ec <bmp280_init+0x10>
	if (params->mode == BMP280_MODE_FORCED) {
 8003600:	f895 8000 	ldrb.w	r8, [r5]
			| (params->oversampling_pressure << 2) | (params->mode);
 8003604:	78ab      	ldrb	r3, [r5, #2]
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8003606:	78ea      	ldrb	r2, [r5, #3]
	if (params->mode == BMP280_MODE_FORCED) {
 8003608:	f1b8 0f01 	cmp.w	r8, #1
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800360c:	bf08      	it	eq
 800360e:	7028      	strbeq	r0, [r5, #0]
			| (params->oversampling_pressure << 2) | (params->mode);
 8003610:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003614:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	if (dev->id == BME280_CHIP_ID) {
 8003618:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800361c:	bf08      	it	eq
 800361e:	4680      	moveq	r8, r0
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8003620:	ea48 0803 	orr.w	r8, r8, r3
	if (dev->id == BME280_CHIP_ID) {
 8003624:	2a60      	cmp	r2, #96	@ 0x60
 8003626:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8003628:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800362a:	fa5f f888 	uxtb.w	r8, r8
	if (dev->id == BME280_CHIP_ID) {
 800362e:	d07a      	beq.n	8003726 <bmp280_init+0x34a>
	tx_buff = (dev->addr << 1);
 8003630:	005b      	lsls	r3, r3, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8003632:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003636:	b299      	uxth	r1, r3
 8003638:	2301      	movs	r3, #1
 800363a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800363e:	9600      	str	r6, [sp, #0]
 8003640:	22f4      	movs	r2, #244	@ 0xf4
 8003642:	f88d 8014 	strb.w	r8, [sp, #20]
 8003646:	f007 febd 	bl	800b3c4 <HAL_I2C_Mem_Write>
 800364a:	2800      	cmp	r0, #0
 800364c:	f47f aece 	bne.w	80033ec <bmp280_init+0x10>
 8003650:	e6cd      	b.n	80033ee <bmp280_init+0x12>
	tx_buff = (dev->addr << 1);
 8003652:	005b      	lsls	r3, r3, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003654:	f04f 0801 	mov.w	r8, #1
 8003658:	b299      	uxth	r1, r3
 800365a:	f241 3988 	movw	r9, #5000	@ 0x1388
	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800365e:	f104 0318 	add.w	r3, r4, #24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8003668:	4643      	mov	r3, r8
 800366a:	22a1      	movs	r2, #161	@ 0xa1
 800366c:	f007 ffd0 	bl	800b610 <HAL_I2C_Mem_Read>
 8003670:	2800      	cmp	r0, #0
 8003672:	f47f aebb 	bne.w	80033ec <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003676:	f8cd 9008 	str.w	r9, [sp, #8]
 800367a:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 800367c:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800367e:	2302      	movs	r3, #2
 8003680:	9301      	str	r3, [sp, #4]
	tx_buff = (dev->addr << 1);
 8003682:	fa01 f108 	lsl.w	r1, r1, r8
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003686:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003688:	b289      	uxth	r1, r1
 800368a:	4643      	mov	r3, r8
 800368c:	22e1      	movs	r2, #225	@ 0xe1
 800368e:	f007 ffbf 	bl	800b610 <HAL_I2C_Mem_Read>
 8003692:	2800      	cmp	r0, #0
 8003694:	f47f aeaa 	bne.w	80033ec <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003698:	e9cd 8901 	strd	r8, r9, [sp, #4]
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800369c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	tx_buff = (dev->addr << 1);
 80036a0:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80036a2:	8363      	strh	r3, [r4, #26]
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80036a4:	f104 031c 	add.w	r3, r4, #28
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80036a8:	9300      	str	r3, [sp, #0]
	tx_buff = (dev->addr << 1);
 80036aa:	fa01 f108 	lsl.w	r1, r1, r8
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80036ae:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80036b0:	b289      	uxth	r1, r1
 80036b2:	4643      	mov	r3, r8
 80036b4:	22e3      	movs	r2, #227	@ 0xe3
 80036b6:	f007 ffab 	bl	800b610 <HAL_I2C_Mem_Read>
 80036ba:	2800      	cmp	r0, #0
 80036bc:	f47f ae96 	bne.w	80033ec <bmp280_init+0x10>
			&& read_register16(dev, 0xe4, &h4)
 80036c0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80036c2:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 80036c4:	f10d 0312 	add.w	r3, sp, #18
 80036c8:	22e4      	movs	r2, #228	@ 0xe4
 80036ca:	f7ff fe69 	bl	80033a0 <read_register16.isra.0>
 80036ce:	2800      	cmp	r0, #0
 80036d0:	f43f ae8c 	beq.w	80033ec <bmp280_init+0x10>
			&& read_register16(dev, 0xe5, &h5)
 80036d4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80036d6:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 80036d8:	4633      	mov	r3, r6
 80036da:	22e5      	movs	r2, #229	@ 0xe5
 80036dc:	f7ff fe60 	bl	80033a0 <read_register16.isra.0>
 80036e0:	2800      	cmp	r0, #0
 80036e2:	f43f ae83 	beq.w	80033ec <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80036e6:	e9cd 8901 	strd	r8, r9, [sp, #4]
	tx_buff = (dev->addr << 1);
 80036ea:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80036ec:	f104 0222 	add.w	r2, r4, #34	@ 0x22
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80036f0:	4643      	mov	r3, r8
 80036f2:	9200      	str	r2, [sp, #0]
	tx_buff = (dev->addr << 1);
 80036f4:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80036f6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80036f8:	b289      	uxth	r1, r1
 80036fa:	22e7      	movs	r2, #231	@ 0xe7
 80036fc:	f007 ff88 	bl	800b610 <HAL_I2C_Mem_Read>
 8003700:	2800      	cmp	r0, #0
 8003702:	f47f ae73 	bne.w	80033ec <bmp280_init+0x10>
		dev->dig_H5 = h5 >> 4;
 8003706:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800370a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800370e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
		dev->dig_H5 = h5 >> 4;
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	8423      	strh	r3, [r4, #32]
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8003714:	0113      	lsls	r3, r2, #4
 8003716:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 800371a:	f3c2 2203 	ubfx	r2, r2, #8, #4
 800371e:	4313      	orrs	r3, r2
 8003720:	83e3      	strh	r3, [r4, #30]
		return true;
 8003722:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8003724:	e757      	b.n	80035d6 <bmp280_init+0x1fa>
	tx_buff = (dev->addr << 1);
 8003726:	005b      	lsls	r3, r3, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8003728:	b299      	uxth	r1, r3
 800372a:	792b      	ldrb	r3, [r5, #4]
 800372c:	f88d 3014 	strb.w	r3, [sp, #20]
 8003730:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003734:	2301      	movs	r3, #1
 8003736:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800373a:	9600      	str	r6, [sp, #0]
 800373c:	22f2      	movs	r2, #242	@ 0xf2
 800373e:	f007 fe41 	bl	800b3c4 <HAL_I2C_Mem_Write>
 8003742:	2800      	cmp	r0, #0
 8003744:	f47f ae52 	bne.w	80033ec <bmp280_init+0x10>
 8003748:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800374a:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 800374c:	e770      	b.n	8003630 <bmp280_init+0x254>
 800374e:	bf00      	nop

08003750 <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 8003750:	b530      	push	{r4, r5, lr}
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003752:	f241 3288 	movw	r2, #5000	@ 0x1388
bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 8003756:	b087      	sub	sp, #28
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003758:	2501      	movs	r5, #1
	tx_buff = (dev->addr << 1);
 800375a:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800375c:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8003760:	f10d 0316 	add.w	r3, sp, #22
 8003764:	9300      	str	r3, [sp, #0]
	tx_buff = (dev->addr << 1);
 8003766:	40a9      	lsls	r1, r5
bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 8003768:	4604      	mov	r4, r0
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800376a:	b289      	uxth	r1, r1
 800376c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800376e:	462b      	mov	r3, r5
 8003770:	22f4      	movs	r2, #244	@ 0xf4
 8003772:	f007 ff4d 	bl	800b610 <HAL_I2C_Mem_Read>
 8003776:	b110      	cbz	r0, 800377e <bmp280_force_measurement+0x2e>
	uint8_t ctrl;
	if (read_data(dev, BMP280_REG_CTRL, &ctrl, 1))
		return false;
 8003778:	2000      	movs	r0, #0
	ctrl |= BMP280_MODE_FORCED;
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
		return false;
	}
	return true;
}
 800377a:	b007      	add	sp, #28
 800377c:	bd30      	pop	{r4, r5, pc}
	ctrl &= ~0b11;  // clear two lower bits
 800377e:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8003782:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8003784:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003786:	f242 7310 	movw	r3, #10000	@ 0x2710
	ctrl &= ~0b11;  // clear two lower bits
 800378a:	f022 0203 	bic.w	r2, r2, #3
	ctrl |= BMP280_MODE_FORCED;
 800378e:	432a      	orrs	r2, r5
	tx_buff = (dev->addr << 1);
 8003790:	40a9      	lsls	r1, r5
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8003792:	9302      	str	r3, [sp, #8]
 8003794:	f10d 0317 	add.w	r3, sp, #23
 8003798:	e9cd 3500 	strd	r3, r5, [sp]
	ctrl |= BMP280_MODE_FORCED;
 800379c:	f88d 2016 	strb.w	r2, [sp, #22]
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80037a0:	f88d 2017 	strb.w	r2, [sp, #23]
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80037a4:	b289      	uxth	r1, r1
 80037a6:	462b      	mov	r3, r5
 80037a8:	22f4      	movs	r2, #244	@ 0xf4
 80037aa:	f007 fe0b 	bl	800b3c4 <HAL_I2C_Mem_Write>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d1e2      	bne.n	8003778 <bmp280_force_measurement+0x28>
	return true;
 80037b2:	4628      	mov	r0, r5
}
 80037b4:	b007      	add	sp, #28
 80037b6:	bd30      	pop	{r4, r5, pc}

080037b8 <bmp280_is_measuring>:

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 80037b8:	b510      	push	{r4, lr}
	tx_buff = (dev->addr << 1);
 80037ba:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80037bc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 80037be:	b086      	sub	sp, #24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80037c0:	2301      	movs	r3, #1
 80037c2:	f10d 0217 	add.w	r2, sp, #23
 80037c6:	f241 3488 	movw	r4, #5000	@ 0x1388
	tx_buff = (dev->addr << 1);
 80037ca:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80037cc:	9200      	str	r2, [sp, #0]
 80037ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80037d2:	b289      	uxth	r1, r1
 80037d4:	22f3      	movs	r2, #243	@ 0xf3
 80037d6:	f007 ff1b 	bl	800b610 <HAL_I2C_Mem_Read>
 80037da:	b110      	cbz	r0, 80037e2 <bmp280_is_measuring+0x2a>
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
		return false;
 80037dc:	2000      	movs	r0, #0
	if (status & (1 << 3)) {
		return true;
	}
	return false;
}
 80037de:	b006      	add	sp, #24
 80037e0:	bd10      	pop	{r4, pc}
	if (status & (1 << 3)) {
 80037e2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80037e6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
}
 80037ea:	b006      	add	sp, #24
 80037ec:	bd10      	pop	{r4, pc}
 80037ee:	bf00      	nop

080037f0 <bmp280_read_fixed>:
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
	return v_x1_u32r >> 12;
}

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80037f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f4:	4604      	mov	r4, r0
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80037f6:	f890 0032 	ldrb.w	r0, [r0, #50]	@ 0x32
		uint32_t *humidity) {
 80037fa:	b08f      	sub	sp, #60	@ 0x3c
	if (dev->id != BME280_CHIP_ID) {
 80037fc:	2860      	cmp	r0, #96	@ 0x60
		uint32_t *humidity) {
 80037fe:	4688      	mov	r8, r1
 8003800:	9205      	str	r2, [sp, #20]
 8003802:	461e      	mov	r6, r3
	if (dev->id != BME280_CHIP_ID) {
 8003804:	f000 8153 	beq.w	8003aae <bmp280_read_fixed+0x2be>
		if (humidity)
 8003808:	b10b      	cbz	r3, 800380e <bmp280_read_fixed+0x1e>
			*humidity = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	6033      	str	r3, [r6, #0]
 800380e:	2306      	movs	r3, #6
 8003810:	2600      	movs	r6, #0
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	ab0c      	add	r3, sp, #48	@ 0x30
 8003816:	9300      	str	r3, [sp, #0]
	tx_buff = (dev->addr << 1);
 8003818:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800381a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381e:	2301      	movs	r3, #1
 8003820:	9202      	str	r2, [sp, #8]
	tx_buff = (dev->addr << 1);
 8003822:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8003824:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003826:	b289      	uxth	r1, r1
 8003828:	22f7      	movs	r2, #247	@ 0xf7
 800382a:	f007 fef1 	bl	800b610 <HAL_I2C_Mem_Read>
 800382e:	2800      	cmp	r0, #0
 8003830:	f040 8139 	bne.w	8003aa6 <bmp280_read_fixed+0x2b6>
	if (read_data(dev, 0xf7, data, size)) {
		return false;
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8003834:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 8003838:	f89d 2033 	ldrb.w	r2, [sp, #51]	@ 0x33
 800383c:	f89d 1035 	ldrb.w	r1, [sp, #53]	@ 0x35
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8003840:	f9b4 c00a 	ldrsh.w	ip, [r4, #10]
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8003844:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8003848:	9706      	str	r7, [sp, #24]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8003850:	8822      	ldrh	r2, [r4, #0]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8003852:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8003856:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800385a:	fb03 f503 	mul.w	r5, r3, r3
			* (int32_t) dev->dig_T3) >> 14;
 800385e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8003862:	132d      	asrs	r5, r5, #12
			* (int32_t) dev->dig_T3) >> 14;
 8003864:	fb03 f505 	mul.w	r5, r3, r5
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8003868:	0052      	lsls	r2, r2, #1
			* (int32_t) dev->dig_T2) >> 11;
 800386a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800386e:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
			* (int32_t) dev->dig_T2) >> 11;
 8003872:	fb03 f202 	mul.w	r2, r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8003876:	13ad      	asrs	r5, r5, #14
	*fine_temp = var1 + var2;
 8003878:	eb05 25e2 	add.w	r5, r5, r2, asr #11
	return (*fine_temp * 5 + 128) >> 8;
 800387c:	eb05 0985 	add.w	r9, r5, r5, lsl #2
 8003880:	f109 0980 	add.w	r9, r9, #128	@ 0x80
 8003884:	ea4f 2929 	mov.w	r9, r9, asr #8
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8003888:	88e1      	ldrh	r1, [r4, #6]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800388a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800388e:	f8c8 9000 	str.w	r9, [r8]
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8003892:	f89d 8031 	ldrb.w	r8, [sp, #49]	@ 0x31
 8003896:	f8cd 801c 	str.w	r8, [sp, #28]
 800389a:	f89d 8032 	ldrb.w	r8, [sp, #50]	@ 0x32
 800389e:	f8cd 8020 	str.w	r8, [sp, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80038a2:	f9b4 8010 	ldrsh.w	r8, [r4, #16]
 80038a6:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80038aa:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
 80038ae:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80038b2:	f5a5 3efa 	sub.w	lr, r5, #128000	@ 0x1f400
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80038b6:	f9b4 800c 	ldrsh.w	r8, [r4, #12]
 80038ba:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80038be:	fb8e 890e 	smull	r8, r9, lr, lr
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80038c2:	ea4f 7bec 	mov.w	fp, ip, asr #31
 80038c6:	fb0c fa09 	mul.w	sl, ip, r9
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80038ca:	fb82 230e 	smull	r2, r3, r2, lr
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80038ce:	fb08 aa0b 	mla	sl, r8, fp, sl
 80038d2:	fbac cb08 	umull	ip, fp, ip, r8
 80038d6:	44d3      	add	fp, sl
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80038d8:	031b      	lsls	r3, r3, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80038da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80038de:	ea43 5312 	orr.w	r3, r3, r2, lsr #20
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80038e2:	ea4c 6c0b 	orr.w	ip, ip, fp, lsl #24
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80038e6:	0312      	lsls	r2, r2, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80038e8:	eb1c 0c02 	adds.w	ip, ip, r2
 80038ec:	eb43 232b 	adc.w	r3, r3, fp, asr #8
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80038f0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80038f4:	fbac c201 	umull	ip, r2, ip, r1
 80038f8:	fb01 2103 	mla	r1, r1, r3, r2
 80038fc:	17cb      	asrs	r3, r1, #31
 80038fe:	104a      	asrs	r2, r1, #1
	if (var1 == 0) {
 8003900:	ea53 0161 	orrs.w	r1, r3, r1, asr #1
 8003904:	f000 808a 	beq.w	8003a1c <bmp280_read_fixed+0x22c>
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8003908:	9908      	ldr	r1, [sp, #32]
 800390a:	9f07      	ldr	r7, [sp, #28]
 800390c:	0909      	lsrs	r1, r1, #4
 800390e:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 8003912:	9f06      	ldr	r7, [sp, #24]
 8003914:	ea41 3107 	orr.w	r1, r1, r7, lsl #12
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8003918:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800391a:	fb87 ec0e 	smull	lr, ip, r7, lr
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800391e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8003920:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003924:	fb07 f909 	mul.w	r9, r7, r9
 8003928:	ea4f 7ae7 	mov.w	sl, r7, asr #31
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800392c:	ea4c 3cde 	orr.w	ip, ip, lr, lsr #15
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003930:	fb08 9a0a 	mla	sl, r8, sl, r9
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8003934:	ea4f 4e4e 	mov.w	lr, lr, lsl #17
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003938:	fba7 9808 	umull	r9, r8, r7, r8
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800393c:	eb1e 0e09 	adds.w	lr, lr, r9
	p = 1048576 - adc_press;
 8003940:	f5c1 1180 	rsb	r1, r1, #1048576	@ 0x100000
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003944:	44c2      	add	sl, r8
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8003946:	eb4a 0a0c 	adc.w	sl, sl, ip
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800394a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800394c:	eb10 000e 	adds.w	r0, r0, lr
	p = (((p << 31) - var2) * 3125) / var1;
 8003950:	f001 4e00 	and.w	lr, r1, #2147483648	@ 0x80000000
 8003954:	ea4e 0e51 	orr.w	lr, lr, r1, lsr #1
 8003958:	07c9      	lsls	r1, r1, #31
 800395a:	ebb1 0800 	subs.w	r8, r1, r0
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800395e:	eb0a 0ac7 	add.w	sl, sl, r7, lsl #3
	p = (((p << 31) - var2) * 3125) / var1;
 8003962:	eb6e 0e0a 	sbc.w	lr, lr, sl
 8003966:	eb18 0c08 	adds.w	ip, r8, r8
 800396a:	eb4e 010e 	adc.w	r1, lr, lr
 800396e:	eb1c 0c08 	adds.w	ip, ip, r8
 8003972:	eb4e 0101 	adc.w	r1, lr, r1
 8003976:	0188      	lsls	r0, r1, #6
 8003978:	ea4f 198c 	mov.w	r9, ip, lsl #6
 800397c:	ea40 609c 	orr.w	r0, r0, ip, lsr #26
 8003980:	eb1c 0c09 	adds.w	ip, ip, r9
 8003984:	eb41 0100 	adc.w	r1, r1, r0
 8003988:	0089      	lsls	r1, r1, #2
 800398a:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 800398e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003992:	eb1c 0c08 	adds.w	ip, ip, r8
 8003996:	eb4e 0101 	adc.w	r1, lr, r1
 800399a:	ea4f 008c 	mov.w	r0, ip, lsl #2
 800399e:	0089      	lsls	r1, r1, #2
 80039a0:	eb10 0008 	adds.w	r0, r0, r8
 80039a4:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 80039a8:	eb4e 0101 	adc.w	r1, lr, r1
 80039ac:	f7fd faba 	bl	8000f24 <__aeabi_ldivmod>
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80039b0:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
	p = (((p << 31) - var2) * 3125) / var1;
 80039b4:	4684      	mov	ip, r0
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80039b6:	ea4f 3e5c 	mov.w	lr, ip, lsr #13
 80039ba:	1348      	asrs	r0, r1, #13
 80039bc:	ea4e 4ec1 	orr.w	lr, lr, r1, lsl #19
 80039c0:	17d3      	asrs	r3, r2, #31
 80039c2:	fb02 f800 	mul.w	r8, r2, r0
 80039c6:	fb0e 8903 	mla	r9, lr, r3, r8
 80039ca:	fba2 280e 	umull	r2, r8, r2, lr
 80039ce:	fb02 f000 	mul.w	r0, r2, r0
 80039d2:	44c8      	add	r8, r9
 80039d4:	fb0e 0008 	mla	r0, lr, r8, r0
 80039d8:	fba2 2e0e 	umull	r2, lr, r2, lr
 80039dc:	4486      	add	lr, r0
 80039de:	0e52      	lsrs	r2, r2, #25
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80039e0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80039e4:	ea42 12ce 	orr.w	r2, r2, lr, lsl #7
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80039e8:	eb12 000c 	adds.w	r0, r2, ip
 80039ec:	eb41 626e 	adc.w	r2, r1, lr, asr #25
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80039f0:	fb03 f101 	mul.w	r1, r3, r1
 80039f4:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 80039f8:	fb0e 110c 	mla	r1, lr, ip, r1
 80039fc:	fba3 3c0c 	umull	r3, ip, r3, ip
 8003a00:	4461      	add	r1, ip
 8003a02:	0cdb      	lsrs	r3, r3, #19
 8003a04:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8003a08:	18c0      	adds	r0, r0, r3
 8003a0a:	eb42 42e1 	adc.w	r2, r2, r1, asr #19
 8003a0e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8003a12:	0a00      	lsrs	r0, r0, #8
 8003a14:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
	return p;
 8003a18:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8003a1c:	9b05      	ldr	r3, [sp, #20]
 8003a1e:	6018      	str	r0, [r3, #0]

	if (humidity) {
 8003a20:	2e00      	cmp	r6, #0
 8003a22:	d03c      	beq.n	8003a9e <bmp280_read_fixed+0x2ae>
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8003a24:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8003a28:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8003a2c:	f994 1022 	ldrsb.w	r1, [r4, #34]	@ 0x22
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8003a30:	ba5b      	rev16	r3, r3
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	0512      	lsls	r2, r2, #20
 8003a36:	ebc2 3283 	rsb	r2, r2, r3, lsl #14
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8003a3a:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
	v_x1_u32r = fine_temp - (int32_t) 76800;
 8003a3e:	f5a5 3596 	sub.w	r5, r5, #76800	@ 0x12c00
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8003a42:	fb05 2213 	mls	r2, r5, r3, r2
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8003a46:	7f23      	ldrb	r3, [r4, #28]
 8003a48:	fb05 f303 	mul.w	r3, r5, r3
 8003a4c:	12db      	asrs	r3, r3, #11
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8003a4e:	fb05 f101 	mul.w	r1, r5, r1
 8003a52:	1289      	asrs	r1, r1, #10
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8003a54:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8003a5c:	129b      	asrs	r3, r3, #10
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8003a5e:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8003a62:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8003a6a:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8003a6e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8003a72:	13d2      	asrs	r2, r2, #15
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8003a74:	139b      	asrs	r3, r3, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8003a7a:	13da      	asrs	r2, r3, #15
					* (int32_t) dev->dig_H1) >> 4);
 8003a7c:	7e21      	ldrb	r1, [r4, #24]
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8003a7e:	fb02 f202 	mul.w	r2, r2, r2
 8003a82:	11d2      	asrs	r2, r2, #7
					* (int32_t) dev->dig_H1) >> 4);
 8003a84:	fb01 f202 	mul.w	r2, r1, r2
	v_x1_u32r = v_x1_u32r
 8003a88:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8003a8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8003a90:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8003a94:	bfa8      	it	ge
 8003a96:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
	return v_x1_u32r >> 12;
 8003a9a:	131b      	asrs	r3, r3, #12
		int32_t adc_humidity = data[6] << 8 | data[7];
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8003a9c:	6033      	str	r3, [r6, #0]
	}

	return true;
 8003a9e:	2001      	movs	r0, #1
}
 8003aa0:	b00f      	add	sp, #60	@ 0x3c
 8003aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
 8003aa6:	2000      	movs	r0, #0
}
 8003aa8:	b00f      	add	sp, #60	@ 0x3c
 8003aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t size = humidity ? 8 : 6;
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f43f aead 	beq.w	800380e <bmp280_read_fixed+0x1e>
 8003ab4:	2308      	movs	r3, #8
 8003ab6:	e6ac      	b.n	8003812 <bmp280_read_fixed+0x22>

08003ab8 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	460d      	mov	r5, r1
 8003abc:	b084      	sub	sp, #16
 8003abe:	4616      	mov	r6, r2
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8003ac0:	b313      	cbz	r3, 8003b08 <bmp280_read_float+0x50>
 8003ac2:	461c      	mov	r4, r3
 8003ac4:	aa02      	add	r2, sp, #8
 8003ac6:	ab03      	add	r3, sp, #12
 8003ac8:	a901      	add	r1, sp, #4
 8003aca:	f7ff fe91 	bl	80037f0 <bmp280_read_fixed>
 8003ace:	b910      	cbnz	r0, 8003ad6 <bmp280_read_float+0x1e>
		if (humidity)
			*humidity = (float) fixed_humidity / 1024;
		return true;
	}

	return false;
 8003ad0:	2000      	movs	r0, #0
}
 8003ad2:	b004      	add	sp, #16
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
		*temperature = (float) fixed_temperature / 100;
 8003ad6:	eddd 7a01 	vldr	s15, [sp, #4]
 8003ada:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003b38 <bmp280_read_float+0x80>
 8003ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ae2:	eec7 6a87 	vdiv.f32	s13, s15, s14
		*pressure = (float) fixed_pressure / 256;
 8003ae6:	ed9d 7a02 	vldr	s14, [sp, #8]
			*humidity = (float) fixed_humidity / 1024;
 8003aea:	eddd 7a03 	vldr	s15, [sp, #12]
		*temperature = (float) fixed_temperature / 100;
 8003aee:	edc5 6a00 	vstr	s13, [r5]
		*pressure = (float) fixed_pressure / 256;
 8003af2:	eebb 7acc 	vcvt.f32.u32	s14, s14, #8
			*humidity = (float) fixed_humidity / 1024;
 8003af6:	eefb 7acb 	vcvt.f32.u32	s15, s15, #10
		*pressure = (float) fixed_pressure / 256;
 8003afa:	ed86 7a00 	vstr	s14, [r6]
			*humidity = (float) fixed_humidity / 1024;
 8003afe:	edc4 7a00 	vstr	s15, [r4]
		return true;
 8003b02:	2001      	movs	r0, #1
}
 8003b04:	b004      	add	sp, #16
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8003b08:	aa02      	add	r2, sp, #8
 8003b0a:	a901      	add	r1, sp, #4
 8003b0c:	f7ff fe70 	bl	80037f0 <bmp280_read_fixed>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d0dd      	beq.n	8003ad0 <bmp280_read_float+0x18>
		*temperature = (float) fixed_temperature / 100;
 8003b14:	eddd 7a01 	vldr	s15, [sp, #4]
 8003b18:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8003b38 <bmp280_read_float+0x80>
 8003b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		*pressure = (float) fixed_pressure / 256;
 8003b24:	eddd 7a02 	vldr	s15, [sp, #8]
		*temperature = (float) fixed_temperature / 100;
 8003b28:	ed85 7a00 	vstr	s14, [r5]
		*pressure = (float) fixed_pressure / 256;
 8003b2c:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
 8003b30:	edc6 7a00 	vstr	s15, [r6]
		if (humidity)
 8003b34:	e7e5      	b.n	8003b02 <bmp280_read_float+0x4a>
 8003b36:	bf00      	nop
 8003b38:	42c80000 	.word	0x42c80000

08003b3c <BQ25798_check>:
#define BQ25798_ADDR 0x6B << 1


// Checking
uint8_t BQ25798_check()
{
 8003b3c:	b570      	push	{r4, r5, r6, lr}
	HAL_StatusTypeDef status;
	uint8_t res;
	printf("Checking BQ25798 ... ");
 8003b3e:	4815      	ldr	r0, [pc, #84]	@ (8003b94 <BQ25798_check+0x58>)
	for (int i = 0; i < 5; i++) {
		status = HAL_I2C_IsDeviceReady(&hi2c1, BQ25798_ADDR, 3, 1500);
 8003b40:	4e15      	ldr	r6, [pc, #84]	@ (8003b98 <BQ25798_check+0x5c>)
	printf("Checking BQ25798 ... ");
 8003b42:	f00c fddf 	bl	8010704 <iprintf>
 8003b46:	2505      	movs	r5, #5
		status = HAL_I2C_IsDeviceReady(&hi2c1, BQ25798_ADDR, 3, 1500);
 8003b48:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	21d6      	movs	r1, #214	@ 0xd6
 8003b50:	4630      	mov	r0, r6
 8003b52:	f007 fe7b 	bl	800b84c <HAL_I2C_IsDeviceReady>
 8003b56:	4604      	mov	r4, r0
		osDelay(50);
 8003b58:	2032      	movs	r0, #50	@ 0x32
 8003b5a:	f009 fe0d 	bl	800d778 <osDelay>
	    	BQ25798_set_ADC();
	    	res = OK;
	        break;
	    } else {
	    	res = FAULT;
	    	osDelay(500);
 8003b5e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
	    if (status == HAL_OK) {
 8003b62:	b144      	cbz	r4, 8003b76 <BQ25798_check+0x3a>
	    	osDelay(500);
 8003b64:	f009 fe08 	bl	800d778 <osDelay>
	for (int i = 0; i < 5; i++) {
 8003b68:	3d01      	subs	r5, #1
 8003b6a:	d1ed      	bne.n	8003b48 <BQ25798_check+0xc>
	    }
	}
	if(res == FAULT) printf("not ready\r\n");
 8003b6c:	480b      	ldr	r0, [pc, #44]	@ (8003b9c <BQ25798_check+0x60>)
 8003b6e:	f00c fe31 	bl	80107d4 <puts>
 8003b72:	4628      	mov	r0, r5
	return res;
}
 8003b74:	bd70      	pop	{r4, r5, r6, pc}
	    	printf("OK !\r\n");
 8003b76:	480a      	ldr	r0, [pc, #40]	@ (8003ba0 <BQ25798_check+0x64>)
 8003b78:	f00c fe2c 	bl	80107d4 <puts>

void BQ25798_set_ADC()
{
	uint8_t reg;
	reg = 0b10000000;
	i2c_write8(&hi2c1, REG2E_ADC_Control, reg, BQ25798_ADDR);
 8003b7c:	23d6      	movs	r3, #214	@ 0xd6
 8003b7e:	2280      	movs	r2, #128	@ 0x80
 8003b80:	212e      	movs	r1, #46	@ 0x2e
 8003b82:	4805      	ldr	r0, [pc, #20]	@ (8003b98 <BQ25798_check+0x5c>)
 8003b84:	f005 f9f8 	bl	8008f78 <i2c_write8>
	osDelay(1);
 8003b88:	2001      	movs	r0, #1
 8003b8a:	f009 fdf5 	bl	800d778 <osDelay>
	    	res = OK;
 8003b8e:	2001      	movs	r0, #1
}
 8003b90:	bd70      	pop	{r4, r5, r6, pc}
 8003b92:	bf00      	nop
 8003b94:	08014a94 	.word	0x08014a94
 8003b98:	20001800 	.word	0x20001800
 8003b9c:	08014aac 	.word	0x08014aac
 8003ba0:	080160c0 	.word	0x080160c0

08003ba4 <BQ25798_Vbat_read>:
}

uint16_t BQ25798_Vbat_read()
{
 8003ba4:	b500      	push	{lr}
 8003ba6:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG3B_VBAT_ADC, &value, BQ25798_ADDR);
 8003ba8:	23d6      	movs	r3, #214	@ 0xd6
 8003baa:	f10d 0206 	add.w	r2, sp, #6
 8003bae:	213b      	movs	r1, #59	@ 0x3b
 8003bb0:	4804      	ldr	r0, [pc, #16]	@ (8003bc4 <BQ25798_Vbat_read+0x20>)
 8003bb2:	f005 f9cb 	bl	8008f4c <i2c_read16>
    return byteswap16(value);
 8003bb6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003bba:	f005 fa5b 	bl	8009074 <byteswap16>
}
 8003bbe:	b003      	add	sp, #12
 8003bc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bc4:	20001800 	.word	0x20001800

08003bc8 <BQ25798_Vsys_read>:

uint16_t BQ25798_Vsys_read()
{
 8003bc8:	b500      	push	{lr}
 8003bca:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG3D_VSYS_ADC, &value, BQ25798_ADDR);
 8003bcc:	23d6      	movs	r3, #214	@ 0xd6
 8003bce:	f10d 0206 	add.w	r2, sp, #6
 8003bd2:	213d      	movs	r1, #61	@ 0x3d
 8003bd4:	4804      	ldr	r0, [pc, #16]	@ (8003be8 <BQ25798_Vsys_read+0x20>)
 8003bd6:	f005 f9b9 	bl	8008f4c <i2c_read16>
    return byteswap16(value);
 8003bda:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003bde:	f005 fa49 	bl	8009074 <byteswap16>
}
 8003be2:	b003      	add	sp, #12
 8003be4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003be8:	20001800 	.word	0x20001800

08003bec <BQ25798_Vac1_read>:
    i2c_read16(&hi2c1, REG35_VBUS_ADC, &value, BQ25798_ADDR);
    return byteswap16(value);
}

uint16_t BQ25798_Vac1_read()
{
 8003bec:	b500      	push	{lr}
 8003bee:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG37_VAC1_ADC, &value, BQ25798_ADDR);
 8003bf0:	23d6      	movs	r3, #214	@ 0xd6
 8003bf2:	f10d 0206 	add.w	r2, sp, #6
 8003bf6:	2137      	movs	r1, #55	@ 0x37
 8003bf8:	4804      	ldr	r0, [pc, #16]	@ (8003c0c <BQ25798_Vac1_read+0x20>)
 8003bfa:	f005 f9a7 	bl	8008f4c <i2c_read16>
    return byteswap16(value);
 8003bfe:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003c02:	f005 fa37 	bl	8009074 <byteswap16>
}
 8003c06:	b003      	add	sp, #12
 8003c08:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c0c:	20001800 	.word	0x20001800

08003c10 <BQ25798_Vac2_read>:

uint16_t BQ25798_Vac2_read()
{
 8003c10:	b500      	push	{lr}
 8003c12:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG39_VAC2_ADC, &value, BQ25798_ADDR);
 8003c14:	23d6      	movs	r3, #214	@ 0xd6
 8003c16:	f10d 0206 	add.w	r2, sp, #6
 8003c1a:	2139      	movs	r1, #57	@ 0x39
 8003c1c:	4804      	ldr	r0, [pc, #16]	@ (8003c30 <BQ25798_Vac2_read+0x20>)
 8003c1e:	f005 f995 	bl	8008f4c <i2c_read16>
    return byteswap16(value);
 8003c22:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003c26:	f005 fa25 	bl	8009074 <byteswap16>
}
 8003c2a:	b003      	add	sp, #12
 8003c2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c30:	20001800 	.word	0x20001800

08003c34 <BQ25798_Ibus_read>:

uint16_t BQ25798_Ibus_read()
{
 8003c34:	b500      	push	{lr}
 8003c36:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG31_IBUS_ADC, &value, BQ25798_ADDR);
 8003c38:	23d6      	movs	r3, #214	@ 0xd6
 8003c3a:	f10d 0206 	add.w	r2, sp, #6
 8003c3e:	2131      	movs	r1, #49	@ 0x31
 8003c40:	4804      	ldr	r0, [pc, #16]	@ (8003c54 <BQ25798_Ibus_read+0x20>)
 8003c42:	f005 f983 	bl	8008f4c <i2c_read16>
    return byteswap16(value);
 8003c46:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003c4a:	f005 fa13 	bl	8009074 <byteswap16>
}
 8003c4e:	b003      	add	sp, #12
 8003c50:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c54:	20001800 	.word	0x20001800

08003c58 <BQ25798_Ibat_read>:

uint16_t BQ25798_Ibat_read()
{
 8003c58:	b500      	push	{lr}
 8003c5a:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG33_IBAT_ADC, &value, BQ25798_ADDR);
 8003c5c:	23d6      	movs	r3, #214	@ 0xd6
 8003c5e:	f10d 0206 	add.w	r2, sp, #6
 8003c62:	2133      	movs	r1, #51	@ 0x33
 8003c64:	4804      	ldr	r0, [pc, #16]	@ (8003c78 <BQ25798_Ibat_read+0x20>)
 8003c66:	f005 f971 	bl	8008f4c <i2c_read16>
    return byteswap16(value);
 8003c6a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003c6e:	f005 fa01 	bl	8009074 <byteswap16>
}
 8003c72:	b003      	add	sp, #12
 8003c74:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c78:	20001800 	.word	0x20001800

08003c7c <BQ25798_Sys_Min_Voltage_read>:

uint16_t BQ25798_Sys_Min_Voltage_read()
{
 8003c7c:	b500      	push	{lr}
 8003c7e:	b087      	sub	sp, #28
	uint8_t value;
	uint8_t mask = 0x3F;
	uint16_t voltage;
    HAL_I2C_Mem_Read(&hi2c1, BQ25798_ADDR, REG00_Minimal_System_Voltage, I2C_MEMADD_SIZE_8BIT, &value, 1, 500);
 8003c80:	2301      	movs	r3, #1
 8003c82:	f10d 0217 	add.w	r2, sp, #23
 8003c86:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003c8a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8003c8e:	9200      	str	r2, [sp, #0]
 8003c90:	21d6      	movs	r1, #214	@ 0xd6
 8003c92:	2200      	movs	r2, #0
 8003c94:	4808      	ldr	r0, [pc, #32]	@ (8003cb8 <BQ25798_Sys_Min_Voltage_read+0x3c>)
 8003c96:	f007 fcbb 	bl	800b610 <HAL_I2C_Mem_Read>
    voltage= value & mask;
 8003c9a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003c9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
    voltage *= 250;
 8003ca2:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8003ca6:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8003caa:	0040      	lsls	r0, r0, #1
    voltage += 2500;
 8003cac:	f600 10c4 	addw	r0, r0, #2500	@ 0x9c4
    return voltage;
 8003cb0:	b280      	uxth	r0, r0
}
 8003cb2:	b007      	add	sp, #28
 8003cb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cb8:	20001800 	.word	0x20001800

08003cbc <BQ25798_Chr_Volt_Limit_read>:

uint16_t BQ25798_Chr_Volt_Limit_read()
{
 8003cbc:	b500      	push	{lr}
 8003cbe:	b083      	sub	sp, #12
	uint16_t value;
	i2c_read16(&hi2c1, REG01_Charge_Voltage_Limit, &value, BQ25798_ADDR);
 8003cc0:	23d6      	movs	r3, #214	@ 0xd6
 8003cc2:	f10d 0206 	add.w	r2, sp, #6
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4806      	ldr	r0, [pc, #24]	@ (8003ce4 <BQ25798_Chr_Volt_Limit_read+0x28>)
 8003cca:	f005 f93f 	bl	8008f4c <i2c_read16>
    uint16_t swapvalue = byteswap16(value);
 8003cce:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003cd2:	f005 f9cf 	bl	8009074 <byteswap16>
    return swapvalue * 10;
 8003cd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003cda:	0040      	lsls	r0, r0, #1
 8003cdc:	b280      	uxth	r0, r0
}
 8003cde:	b003      	add	sp, #12
 8003ce0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ce4:	20001800 	.word	0x20001800

08003ce8 <BQ25798_Chr_Curr_Limit_read>:

uint16_t BQ25798_Chr_Curr_Limit_read()
{
 8003ce8:	b500      	push	{lr}
 8003cea:	b083      	sub	sp, #12
	uint16_t value;
	i2c_read16(&hi2c1, REG03_Charge_Current_Limit, &value, BQ25798_ADDR);
 8003cec:	23d6      	movs	r3, #214	@ 0xd6
 8003cee:	f10d 0206 	add.w	r2, sp, #6
 8003cf2:	2103      	movs	r1, #3
 8003cf4:	4806      	ldr	r0, [pc, #24]	@ (8003d10 <BQ25798_Chr_Curr_Limit_read+0x28>)
 8003cf6:	f005 f929 	bl	8008f4c <i2c_read16>
    uint16_t swapvalue = byteswap16(value);
 8003cfa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003cfe:	f005 f9b9 	bl	8009074 <byteswap16>
    return swapvalue * 10;
 8003d02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003d06:	0040      	lsls	r0, r0, #1
 8003d08:	b280      	uxth	r0, r0
}
 8003d0a:	b003      	add	sp, #12
 8003d0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d10:	20001800 	.word	0x20001800

08003d14 <BQ25798_Sys_Min_Voltage_write>:

uint8_t BQ25798_Sys_Min_Voltage_write(uint8_t bits) // 6 bits multiplier (2500mV + 6bits * 250mV) e.g 3000mV = 2500 + 3*250 = 3,25V / bits=3
{
 8003d14:	4602      	mov	r2, r0
	uint8_t res;
    res = i2c_write8(&hi2c1, REG00_Minimal_System_Voltage, (bits & 0x3F), BQ25798_ADDR);
 8003d16:	23d6      	movs	r3, #214	@ 0xd6
 8003d18:	4802      	ldr	r0, [pc, #8]	@ (8003d24 <BQ25798_Sys_Min_Voltage_write+0x10>)
 8003d1a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003d1e:	2100      	movs	r1, #0
 8003d20:	f005 b92a 	b.w	8008f78 <i2c_write8>
 8003d24:	20001800 	.word	0x20001800

08003d28 <BQ25798_Chr_Volt_Limit_write>:
}

uint8_t BQ25798_Chr_Volt_Limit_write(uint16_t val)
{
	uint8_t res;
	val /= 10;
 8003d28:	4b07      	ldr	r3, [pc, #28]	@ (8003d48 <BQ25798_Chr_Volt_Limit_write+0x20>)
{
 8003d2a:	b510      	push	{r4, lr}
	val /= 10;
 8003d2c:	fba3 3000 	umull	r3, r0, r3, r0
	res = i2c_write16(&hi2c1, REG01_Charge_Voltage_Limit, byteswap16(val), BQ25798_ADDR);
 8003d30:	08c0      	lsrs	r0, r0, #3
 8003d32:	f005 f99f 	bl	8009074 <byteswap16>
    return res;
}
 8003d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	res = i2c_write16(&hi2c1, REG01_Charge_Voltage_Limit, byteswap16(val), BQ25798_ADDR);
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	23d6      	movs	r3, #214	@ 0xd6
 8003d3e:	4803      	ldr	r0, [pc, #12]	@ (8003d4c <BQ25798_Chr_Volt_Limit_write+0x24>)
 8003d40:	2101      	movs	r1, #1
 8003d42:	f005 b92d 	b.w	8008fa0 <i2c_write16>
 8003d46:	bf00      	nop
 8003d48:	cccccccd 	.word	0xcccccccd
 8003d4c:	20001800 	.word	0x20001800

08003d50 <BQ25798_Chr_Curr_Limit_write>:

uint8_t BQ25798_Chr_Curr_Limit_write(uint16_t val)
{
	uint8_t res;
	val /= 10;
 8003d50:	4b07      	ldr	r3, [pc, #28]	@ (8003d70 <BQ25798_Chr_Curr_Limit_write+0x20>)
{
 8003d52:	b510      	push	{r4, lr}
	val /= 10;
 8003d54:	fba3 3000 	umull	r3, r0, r3, r0
	res = i2c_write16(&hi2c1, REG03_Charge_Current_Limit, byteswap16(val), BQ25798_ADDR);
 8003d58:	08c0      	lsrs	r0, r0, #3
 8003d5a:	f005 f98b 	bl	8009074 <byteswap16>
    return res;
}
 8003d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	res = i2c_write16(&hi2c1, REG03_Charge_Current_Limit, byteswap16(val), BQ25798_ADDR);
 8003d62:	4602      	mov	r2, r0
 8003d64:	23d6      	movs	r3, #214	@ 0xd6
 8003d66:	4803      	ldr	r0, [pc, #12]	@ (8003d74 <BQ25798_Chr_Curr_Limit_write+0x24>)
 8003d68:	2103      	movs	r1, #3
 8003d6a:	f005 b919 	b.w	8008fa0 <i2c_write16>
 8003d6e:	bf00      	nop
 8003d70:	cccccccd 	.word	0xcccccccd
 8003d74:	20001800 	.word	0x20001800

08003d78 <BQ25798_Chr_Input_Voltage_Limit_write>:

uint8_t BQ25798_Chr_Input_Voltage_Limit_write(uint8_t val)
{
 8003d78:	4602      	mov	r2, r0
	uint8_t res;
	res = i2c_write8(&hi2c1, REG05_Input_Voltage_Limit, val, BQ25798_ADDR);
 8003d7a:	23d6      	movs	r3, #214	@ 0xd6
 8003d7c:	4801      	ldr	r0, [pc, #4]	@ (8003d84 <BQ25798_Chr_Input_Voltage_Limit_write+0xc>)
 8003d7e:	2105      	movs	r1, #5
 8003d80:	f005 b8fa 	b.w	8008f78 <i2c_write8>
 8003d84:	20001800 	.word	0x20001800

08003d88 <BQ25798_Chr_Input_Curr_Limit_write>:
    return res;
}

uint8_t BQ25798_Chr_Input_Curr_Limit_write(uint16_t val)
{
 8003d88:	b510      	push	{r4, lr}
	uint8_t res;
	res = i2c_write16(&hi2c1, REG06_Input_Current_Limit, byteswap16(val), BQ25798_ADDR);
 8003d8a:	f005 f973 	bl	8009074 <byteswap16>
    return res;
}
 8003d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	res = i2c_write16(&hi2c1, REG06_Input_Current_Limit, byteswap16(val), BQ25798_ADDR);
 8003d92:	4602      	mov	r2, r0
 8003d94:	23d6      	movs	r3, #214	@ 0xd6
 8003d96:	4802      	ldr	r0, [pc, #8]	@ (8003da0 <BQ25798_Chr_Input_Curr_Limit_write+0x18>)
 8003d98:	2106      	movs	r1, #6
 8003d9a:	f005 b901 	b.w	8008fa0 <i2c_write16>
 8003d9e:	bf00      	nop
 8003da0:	20001800 	.word	0x20001800

08003da4 <BQ25798_Chrg_CTRL1_write>:

uint8_t BQ25798_Chrg_CTRL1_write(uint8_t hex_val)
{
 8003da4:	4602      	mov	r2, r0
	uint8_t res;
    res = i2c_write8(&hi2c1, REG10_Charger_Control_1, hex_val, BQ25798_ADDR);
 8003da6:	23d6      	movs	r3, #214	@ 0xd6
 8003da8:	4801      	ldr	r0, [pc, #4]	@ (8003db0 <BQ25798_Chrg_CTRL1_write+0xc>)
 8003daa:	2110      	movs	r1, #16
 8003dac:	f005 b8e4 	b.w	8008f78 <i2c_write8>
 8003db0:	20001800 	.word	0x20001800

08003db4 <BQ25798_Chrg_NTC_CTRL1_write>:
    return res;
}

uint8_t BQ25798_Chrg_NTC_CTRL1_write(uint8_t hex_val)
{
 8003db4:	4602      	mov	r2, r0
	uint8_t res;
    res = i2c_write8(&hi2c1, REG18_NTC_Control_1, hex_val, BQ25798_ADDR);
 8003db6:	23d6      	movs	r3, #214	@ 0xd6
 8003db8:	4801      	ldr	r0, [pc, #4]	@ (8003dc0 <BQ25798_Chrg_NTC_CTRL1_write+0xc>)
 8003dba:	2118      	movs	r1, #24
 8003dbc:	f005 b8dc 	b.w	8008f78 <i2c_write8>
 8003dc0:	20001800 	.word	0x20001800

08003dc4 <BQ25798_WD_RST>:
    return res;
}

uint8_t BQ25798_WD_RST()
{
 8003dc4:	b510      	push	{r4, lr}
	uint8_t res, value;
	i2c_read8(&hi2c1, REG10_Charger_Control_1, &value, BQ25798_ADDR);
 8003dc6:	4c0c      	ldr	r4, [pc, #48]	@ (8003df8 <BQ25798_WD_RST+0x34>)
{
 8003dc8:	b082      	sub	sp, #8
	i2c_read8(&hi2c1, REG10_Charger_Control_1, &value, BQ25798_ADDR);
 8003dca:	23d6      	movs	r3, #214	@ 0xd6
 8003dcc:	f10d 0207 	add.w	r2, sp, #7
 8003dd0:	2110      	movs	r1, #16
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	f005 f8a6 	bl	8008f24 <i2c_read8>
//	printf("Reset REG (read): %x\r\n", value);
	setBit(&value,3,1);
 8003dd8:	f10d 0007 	add.w	r0, sp, #7
 8003ddc:	2201      	movs	r2, #1
 8003dde:	2103      	movs	r1, #3
 8003de0:	f005 f8f4 	bl	8008fcc <setBit>
//	printf("Reset REG (reset): %x\r\n", value);
    res = i2c_write8(&hi2c1, REG10_Charger_Control_1, value, BQ25798_ADDR);
 8003de4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003de8:	23d6      	movs	r3, #214	@ 0xd6
 8003dea:	2110      	movs	r1, #16
 8003dec:	4620      	mov	r0, r4
 8003dee:	f005 f8c3 	bl	8008f78 <i2c_write8>
    return res;
}
 8003df2:	b002      	add	sp, #8
 8003df4:	bd10      	pop	{r4, pc}
 8003df6:	bf00      	nop
 8003df8:	20001800 	.word	0x20001800

08003dfc <BQ25798_MPPT_CTRL>:

uint8_t BQ25798_MPPT_CTRL(uint8_t set)
{
 8003dfc:	b530      	push	{r4, r5, lr}
	uint8_t res, value;
	i2c_read8(&hi2c1, REG15_MPPT_Control, &value, BQ25798_ADDR);
 8003dfe:	4d0c      	ldr	r5, [pc, #48]	@ (8003e30 <BQ25798_MPPT_CTRL+0x34>)
{
 8003e00:	b083      	sub	sp, #12
	i2c_read8(&hi2c1, REG15_MPPT_Control, &value, BQ25798_ADDR);
 8003e02:	23d6      	movs	r3, #214	@ 0xd6
{
 8003e04:	4604      	mov	r4, r0
	i2c_read8(&hi2c1, REG15_MPPT_Control, &value, BQ25798_ADDR);
 8003e06:	f10d 0207 	add.w	r2, sp, #7
 8003e0a:	2115      	movs	r1, #21
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f005 f889 	bl	8008f24 <i2c_read8>
//	printf("Reset REG (read): %x\r\n", value);
	setBit(&value,0,set);
 8003e12:	4622      	mov	r2, r4
 8003e14:	f10d 0007 	add.w	r0, sp, #7
 8003e18:	2100      	movs	r1, #0
 8003e1a:	f005 f8d7 	bl	8008fcc <setBit>
//	printf("Reset REG (reset): %x\r\n", value);
    res = i2c_write8(&hi2c1, REG15_MPPT_Control, value, BQ25798_ADDR);
 8003e1e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003e22:	23d6      	movs	r3, #214	@ 0xd6
 8003e24:	2115      	movs	r1, #21
 8003e26:	4628      	mov	r0, r5
 8003e28:	f005 f8a6 	bl	8008f78 <i2c_write8>
    return res;
}
 8003e2c:	b003      	add	sp, #12
 8003e2e:	bd30      	pop	{r4, r5, pc}
 8003e30:	20001800 	.word	0x20001800

08003e34 <HAL_UART_TxCpltCallback.part.0>:
//uint16_t sim_rxtail;

static char clibuf[64];
static int cliptr;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8003e34:	b538      	push	{r3, r4, r5, lr}
{
	if(huart == &huart1 && debug_txhead != debug_txtail) {
 8003e36:	4d0d      	ldr	r5, [pc, #52]	@ (8003e6c <HAL_UART_TxCpltCallback.part.0+0x38>)
 8003e38:	4c0d      	ldr	r4, [pc, #52]	@ (8003e70 <HAL_UART_TxCpltCallback.part.0+0x3c>)
 8003e3a:	882b      	ldrh	r3, [r5, #0]
 8003e3c:	8822      	ldrh	r2, [r4, #0]
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d009      	beq.n	8003e56 <HAL_UART_TxCpltCallback.part.0+0x22>
		if(debug_txhead > debug_txtail) {
			HAL_UART_Transmit_IT(&huart1, debug_tx_buf+debug_txtail, debug_txhead-debug_txtail);
 8003e42:	490c      	ldr	r1, [pc, #48]	@ (8003e74 <HAL_UART_TxCpltCallback.part.0+0x40>)
 8003e44:	4411      	add	r1, r2
		if(debug_txhead > debug_txtail) {
 8003e46:	d907      	bls.n	8003e58 <HAL_UART_TxCpltCallback.part.0+0x24>
			HAL_UART_Transmit_IT(&huart1, debug_tx_buf+debug_txtail, debug_txhead-debug_txtail);
 8003e48:	1a9a      	subs	r2, r3, r2
 8003e4a:	480b      	ldr	r0, [pc, #44]	@ (8003e78 <HAL_UART_TxCpltCallback.part.0+0x44>)
 8003e4c:	b292      	uxth	r2, r2
 8003e4e:	f008 fed3 	bl	800cbf8 <HAL_UART_Transmit_IT>
			debug_txtail = debug_txhead;
 8003e52:	882b      	ldrh	r3, [r5, #0]
 8003e54:	8023      	strh	r3, [r4, #0]
		} else {
			HAL_UART_Transmit_IT(&huart1, debug_tx_buf+debug_txtail, DEBUG_TX_SIZE-debug_txtail);
			debug_txtail = 0;
		}
	}
}
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
			HAL_UART_Transmit_IT(&huart1, debug_tx_buf+debug_txtail, DEBUG_TX_SIZE-debug_txtail);
 8003e58:	f5c2 6200 	rsb	r2, r2, #2048	@ 0x800
 8003e5c:	4806      	ldr	r0, [pc, #24]	@ (8003e78 <HAL_UART_TxCpltCallback.part.0+0x44>)
 8003e5e:	b292      	uxth	r2, r2
 8003e60:	f008 feca 	bl	800cbf8 <HAL_UART_Transmit_IT>
			debug_txtail = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	8023      	strh	r3, [r4, #0]
}
 8003e68:	bd38      	pop	{r3, r4, r5, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000dd2 	.word	0x20000dd2
 8003e70:	20000dd0 	.word	0x20000dd0
 8003e74:	20000dd4 	.word	0x20000dd4
 8003e78:	200016d4 	.word	0x200016d4

08003e7c <HAL_UART_TxCpltCallback>:
	if(huart == &huart1 && debug_txhead != debug_txtail) {
 8003e7c:	4b02      	ldr	r3, [pc, #8]	@ (8003e88 <HAL_UART_TxCpltCallback+0xc>)
 8003e7e:	4283      	cmp	r3, r0
 8003e80:	d000      	beq.n	8003e84 <HAL_UART_TxCpltCallback+0x8>
}
 8003e82:	4770      	bx	lr
 8003e84:	f7ff bfd6 	b.w	8003e34 <HAL_UART_TxCpltCallback.part.0>
 8003e88:	200016d4 	.word	0x200016d4

08003e8c <_write>:

// buffered uart printf
int _write(int file, char *ptr, int len)
{
 8003e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
//    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, len+5);  // uart1 - debug
	uint8_t need_start = (debug_txhead == debug_txtail) ? 1:0;
 8003e8e:	4b12      	ldr	r3, [pc, #72]	@ (8003ed8 <_write+0x4c>)
 8003e90:	4c12      	ldr	r4, [pc, #72]	@ (8003edc <_write+0x50>)
 8003e92:	881f      	ldrh	r7, [r3, #0]
 8003e94:	8826      	ldrh	r6, [r4, #0]
	for(int i=0; i<len; ++i) {debug_tx_buf[debug_txhead] = ptr[i]; debug_txhead = (debug_txhead + 1) % DEBUG_TX_SIZE;}
 8003e96:	1e10      	subs	r0, r2, #0
{
 8003e98:	b083      	sub	sp, #12
	for(int i=0; i<len; ++i) {debug_tx_buf[debug_txhead] = ptr[i]; debug_txhead = (debug_txhead + 1) % DEBUG_TX_SIZE;}
 8003e9a:	dd0e      	ble.n	8003eba <_write+0x2e>
 8003e9c:	3901      	subs	r1, #1
 8003e9e:	4d10      	ldr	r5, [pc, #64]	@ (8003ee0 <_write+0x54>)
 8003ea0:	180a      	adds	r2, r1, r0
 8003ea2:	4633      	mov	r3, r6
 8003ea4:	f811 ef01 	ldrb.w	lr, [r1, #1]!
 8003ea8:	f805 e003 	strb.w	lr, [r5, r3]
 8003eac:	f103 0c01 	add.w	ip, r3, #1
 8003eb0:	f3cc 030a 	ubfx	r3, ip, #0, #11
 8003eb4:	428a      	cmp	r2, r1
 8003eb6:	8023      	strh	r3, [r4, #0]
 8003eb8:	d1f4      	bne.n	8003ea4 <_write+0x18>
	if(need_start && huart1.gState != HAL_UART_STATE_BUSY_TX) HAL_UART_TxCpltCallback(&huart1);
 8003eba:	42be      	cmp	r6, r7
 8003ebc:	d001      	beq.n	8003ec2 <_write+0x36>
    return len;
}
 8003ebe:	b003      	add	sp, #12
 8003ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(need_start && huart1.gState != HAL_UART_STATE_BUSY_TX) HAL_UART_TxCpltCallback(&huart1);
 8003ec2:	4b08      	ldr	r3, [pc, #32]	@ (8003ee4 <_write+0x58>)
 8003ec4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ec6:	2b21      	cmp	r3, #33	@ 0x21
 8003ec8:	d0f9      	beq.n	8003ebe <_write+0x32>
 8003eca:	9001      	str	r0, [sp, #4]
	if(huart == &huart1 && debug_txhead != debug_txtail) {
 8003ecc:	f7ff ffb2 	bl	8003e34 <HAL_UART_TxCpltCallback.part.0>
 8003ed0:	9801      	ldr	r0, [sp, #4]
}
 8003ed2:	b003      	add	sp, #12
 8003ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000dd0 	.word	0x20000dd0
 8003edc:	20000dd2 	.word	0x20000dd2
 8003ee0:	20000dd4 	.word	0x20000dd4
 8003ee4:	200016d4 	.word	0x200016d4

08003ee8 <HAL_UART_RxCpltCallback>:
//    HAL_UART_Transmit(&huart1, &ch, 1, 2);  // debug uart
	_write(0, (char*)&ch, 1);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee8:	b538      	push	{r3, r4, r5, lr}
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 8003eea:	4b0d      	ldr	r3, [pc, #52]	@ (8003f20 <HAL_UART_RxCpltCallback+0x38>)
 8003eec:	4298      	cmp	r0, r3
{
 8003eee:	4604      	mov	r4, r0
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 8003ef0:	d003      	beq.n	8003efa <HAL_UART_RxCpltCallback+0x12>
	if(huart == &huart2) {
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <HAL_UART_RxCpltCallback+0x3c>)
 8003ef4:	429c      	cmp	r4, r3
 8003ef6:	d007      	beq.n	8003f08 <HAL_UART_RxCpltCallback+0x20>
		Sim80x_RxCallBack(simch);
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
	}
}
 8003ef8:	bd38      	pop	{r3, r4, r5, pc}
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 8003efa:	490b      	ldr	r1, [pc, #44]	@ (8003f28 <HAL_UART_RxCpltCallback+0x40>)
 8003efc:	2240      	movs	r2, #64	@ 0x40
 8003efe:	f009 fbef 	bl	800d6e0 <HAL_UART_Receive_IT>
	if(huart == &huart2) {
 8003f02:	4b08      	ldr	r3, [pc, #32]	@ (8003f24 <HAL_UART_RxCpltCallback+0x3c>)
 8003f04:	429c      	cmp	r4, r3
 8003f06:	d1f7      	bne.n	8003ef8 <HAL_UART_RxCpltCallback+0x10>
		Sim80x_RxCallBack(simch);
 8003f08:	4d08      	ldr	r5, [pc, #32]	@ (8003f2c <HAL_UART_RxCpltCallback+0x44>)
 8003f0a:	7828      	ldrb	r0, [r5, #0]
 8003f0c:	f7fe f9b4 	bl	8002278 <Sim80x_RxCallBack>
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
 8003f10:	4629      	mov	r1, r5
 8003f12:	4620      	mov	r0, r4
 8003f14:	2201      	movs	r2, #1
}
 8003f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
 8003f1a:	f009 bbe1 	b.w	800d6e0 <HAL_UART_Receive_IT>
 8003f1e:	bf00      	nop
 8003f20:	200016d4 	.word	0x200016d4
 8003f24:	20001650 	.word	0x20001650
 8003f28:	200015d8 	.word	0x200015d8
 8003f2c:	200015d4 	.word	0x200015d4

08003f30 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f30:	b538      	push	{r3, r4, r5, lr}
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 8003f32:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <HAL_UART_ErrorCallback+0x38>)
 8003f34:	4298      	cmp	r0, r3
{
 8003f36:	4604      	mov	r4, r0
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 8003f38:	d003      	beq.n	8003f42 <HAL_UART_ErrorCallback+0x12>
	if(huart == &huart2) {
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <HAL_UART_ErrorCallback+0x3c>)
 8003f3c:	429c      	cmp	r4, r3
 8003f3e:	d007      	beq.n	8003f50 <HAL_UART_ErrorCallback+0x20>
    HAL_UART_RxCpltCallback(huart);
}
 8003f40:	bd38      	pop	{r3, r4, r5, pc}
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 8003f42:	490b      	ldr	r1, [pc, #44]	@ (8003f70 <HAL_UART_ErrorCallback+0x40>)
 8003f44:	2240      	movs	r2, #64	@ 0x40
 8003f46:	f009 fbcb 	bl	800d6e0 <HAL_UART_Receive_IT>
	if(huart == &huart2) {
 8003f4a:	4b08      	ldr	r3, [pc, #32]	@ (8003f6c <HAL_UART_ErrorCallback+0x3c>)
 8003f4c:	429c      	cmp	r4, r3
 8003f4e:	d1f7      	bne.n	8003f40 <HAL_UART_ErrorCallback+0x10>
		Sim80x_RxCallBack(simch);
 8003f50:	4d08      	ldr	r5, [pc, #32]	@ (8003f74 <HAL_UART_ErrorCallback+0x44>)
 8003f52:	7828      	ldrb	r0, [r5, #0]
 8003f54:	f7fe f990 	bl	8002278 <Sim80x_RxCallBack>
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
 8003f58:	4629      	mov	r1, r5
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	2201      	movs	r2, #1
}
 8003f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
 8003f62:	f009 bbbd 	b.w	800d6e0 <HAL_UART_Receive_IT>
 8003f66:	bf00      	nop
 8003f68:	200016d4 	.word	0x200016d4
 8003f6c:	20001650 	.word	0x20001650
 8003f70:	200015d8 	.word	0x200015d8
 8003f74:	200015d4 	.word	0x200015d4

08003f78 <find>:
}

// string functions

char * find(const char *arg2)							// find token in cmdline
{
 8003f78:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i,j,k;
	for(i=0; clibuf[i]; i++)
 8003f7a:	4e12      	ldr	r6, [pc, #72]	@ (8003fc4 <find+0x4c>)
 8003f7c:	7833      	ldrb	r3, [r6, #0]
 8003f7e:	b1db      	cbz	r3, 8003fb8 <find+0x40>
 8003f80:	4c11      	ldr	r4, [pc, #68]	@ (8003fc8 <find+0x50>)
 8003f82:	4637      	mov	r7, r6
 8003f84:	4245      	negs	r5, r0
{
 8003f86:	4684      	mov	ip, r0
 8003f88:	46be      	mov	lr, r7
 8003f8a:	e005      	b.n	8003f98 <find+0x20>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
			if(!arg2[k+1]) return (clibuf+(j+1));
 8003f8c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8003f90:	b1a3      	cbz	r3, 8003fbc <find+0x44>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 8003f92:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8003f96:	468c      	mov	ip, r1
 8003f98:	5ce2      	ldrb	r2, [r4, r3]
 8003f9a:	4661      	mov	r1, ip
 8003f9c:	f002 0203 	and.w	r2, r2, #3
 8003fa0:	2a01      	cmp	r2, #1
 8003fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fa6:	bf08      	it	eq
 8003fa8:	3320      	addeq	r3, #32
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d0ee      	beq.n	8003f8c <find+0x14>
	for(i=0; clibuf[i]; i++)
 8003fae:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8003fb2:	3501      	adds	r5, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e6      	bne.n	8003f86 <find+0xe>
	return NULL;
 8003fb8:	4618      	mov	r0, r3
}
 8003fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(!arg2[k+1]) return (clibuf+(j+1));
 8003fbc:	4465      	add	r5, ip
 8003fbe:	3501      	adds	r5, #1
 8003fc0:	1970      	adds	r0, r6, r5
}
 8003fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc4:	20000d90 	.word	0x20000d90
 8003fc8:	08016859 	.word	0x08016859

08003fcc <getval>:

char * getval(char *p, int32_t *val, int32_t min, int32_t max)		// get s32 value from cmdline
{
 8003fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t tmp = 0;
	if(*p == ' ') p++;
 8003fce:	7807      	ldrb	r7, [r0, #0]
 8003fd0:	2f20      	cmp	r7, #32
	uint8_t sign = (*p == '-') ? 1:0;
 8003fd2:	bf08      	it	eq
 8003fd4:	7847      	ldrbeq	r7, [r0, #1]
{
 8003fd6:	4606      	mov	r6, r0
	if(*p == ' ') p++;
 8003fd8:	bf08      	it	eq
 8003fda:	3601      	addeq	r6, #1
	while(*p)
 8003fdc:	b1f7      	cbz	r7, 800401c <getval+0x50>
 8003fde:	463d      	mov	r5, r7
	int32_t tmp = 0;
 8003fe0:	2400      	movs	r4, #0
 8003fe2:	e004      	b.n	8003fee <getval+0x22>
	while(*p)
 8003fe4:	f816 5f01 	ldrb.w	r5, [r6, #1]!
	{
		if(*p >= '0' && *p <= '9') {tmp *= 10; tmp += *p - '0'; p++;}
 8003fe8:	eb0c 0440 	add.w	r4, ip, r0, lsl #1
	while(*p)
 8003fec:	b13d      	cbz	r5, 8003ffe <getval+0x32>
		if(*p >= '0' && *p <= '9') {tmp *= 10; tmp += *p - '0'; p++;}
 8003fee:	f1a5 0c30 	sub.w	ip, r5, #48	@ 0x30
 8003ff2:	fa5f f08c 	uxtb.w	r0, ip
 8003ff6:	2809      	cmp	r0, #9
 8003ff8:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8003ffc:	d9f2      	bls.n	8003fe4 <getval+0x18>
		else break;
	}
	if(sign) tmp = -tmp;
 8003ffe:	2f2d      	cmp	r7, #45	@ 0x2d
 8004000:	d100      	bne.n	8004004 <getval+0x38>
 8004002:	4264      	negs	r4, r4
	if(tmp >= min && tmp <= max) *val = tmp; else printf("Bad value\r\n");
 8004004:	4294      	cmp	r4, r2
 8004006:	db01      	blt.n	800400c <getval+0x40>
 8004008:	429c      	cmp	r4, r3
 800400a:	dd04      	ble.n	8004016 <getval+0x4a>
 800400c:	4804      	ldr	r0, [pc, #16]	@ (8004020 <getval+0x54>)
 800400e:	f00c fbe1 	bl	80107d4 <puts>
	return p;
}
 8004012:	4630      	mov	r0, r6
 8004014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(tmp >= min && tmp <= max) *val = tmp; else printf("Bad value\r\n");
 8004016:	600c      	str	r4, [r1, #0]
}
 8004018:	4630      	mov	r0, r6
 800401a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t tmp = 0;
 800401c:	463c      	mov	r4, r7
 800401e:	e7f1      	b.n	8004004 <getval+0x38>
 8004020:	08014ab8 	.word	0x08014ab8

08004024 <getString>:

void getString(char *p, char *dst, int16_t minlen, int16_t maxlen, const char *nam)		// get string from cmdline
{
 8004024:	b570      	push	{r4, r5, r6, lr}
	if(*p == ' ') p++;
 8004026:	7804      	ldrb	r4, [r0, #0]
{
 8004028:	9e04      	ldr	r6, [sp, #16]
	if(*p == ' ') p++;
 800402a:	2c20      	cmp	r4, #32
 800402c:	bf08      	it	eq
 800402e:	3001      	addeq	r0, #1
	for(int i=0; i<maxlen; i++) if((p[i]==13 || p[i]==10) && i<minlen) {printf("Too short\r\n"); return;}	// test dlugosci
 8004030:	2b00      	cmp	r3, #0
 8004032:	dd26      	ble.n	8004082 <getString+0x5e>
 8004034:	18c5      	adds	r5, r0, r3
 8004036:	4684      	mov	ip, r0
 8004038:	e003      	b.n	8004042 <getString+0x1e>
 800403a:	2c0a      	cmp	r4, #10
 800403c:	d009      	beq.n	8004052 <getString+0x2e>
 800403e:	45ac      	cmp	ip, r5
 8004040:	d00e      	beq.n	8004060 <getString+0x3c>
 8004042:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004046:	ebac 0e00 	sub.w	lr, ip, r0
 800404a:	2c0d      	cmp	r4, #13
 800404c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004050:	d1f3      	bne.n	800403a <getString+0x16>
 8004052:	4572      	cmp	r2, lr
 8004054:	ddf3      	ble.n	800403e <getString+0x1a>
	{
		dst[i] = p[i];
		if(p[i] == 13 || p[i] == 10) {dst[i] = 0; break;}
	}
	printf("%s: %s\r\n", nam, dst);
}
 8004056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	for(int i=0; i<maxlen; i++) if((p[i]==13 || p[i]==10) && i<minlen) {printf("Too short\r\n"); return;}	// test dlugosci
 800405a:	480d      	ldr	r0, [pc, #52]	@ (8004090 <getString+0x6c>)
 800405c:	f00c bbba 	b.w	80107d4 <puts>
	for(int i=0; i<maxlen; i++)
 8004060:	3801      	subs	r0, #1
 8004062:	460c      	mov	r4, r1
 8004064:	18cd      	adds	r5, r1, r3
 8004066:	e003      	b.n	8004070 <getString+0x4c>
		if(p[i] == 13 || p[i] == 10) {dst[i] = 0; break;}
 8004068:	2b0a      	cmp	r3, #10
 800406a:	d008      	beq.n	800407e <getString+0x5a>
	for(int i=0; i<maxlen; i++)
 800406c:	42ac      	cmp	r4, r5
 800406e:	d008      	beq.n	8004082 <getString+0x5e>
		dst[i] = p[i];
 8004070:	f810 3f01 	ldrb.w	r3, [r0, #1]!
		if(p[i] == 13 || p[i] == 10) {dst[i] = 0; break;}
 8004074:	2b0d      	cmp	r3, #13
		dst[i] = p[i];
 8004076:	4622      	mov	r2, r4
 8004078:	f804 3b01 	strb.w	r3, [r4], #1
		if(p[i] == 13 || p[i] == 10) {dst[i] = 0; break;}
 800407c:	d1f4      	bne.n	8004068 <getString+0x44>
 800407e:	2300      	movs	r3, #0
 8004080:	7013      	strb	r3, [r2, #0]
	printf("%s: %s\r\n", nam, dst);
 8004082:	460a      	mov	r2, r1
 8004084:	4803      	ldr	r0, [pc, #12]	@ (8004094 <getString+0x70>)
 8004086:	4631      	mov	r1, r6
}
 8004088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("%s: %s\r\n", nam, dst);
 800408c:	f00c bb3a 	b.w	8010704 <iprintf>
 8004090:	08014ac4 	.word	0x08014ac4
 8004094:	08014ad0 	.word	0x08014ad0

08004098 <getFloat>:

char * getFloat (char *p, float *val, float min, float max)
{
 8004098:	b530      	push	{r4, r5, lr}
 800409a:	ed2d 8b02 	vpush	{d8}
	 char* pend;
	float tmp = 0;
		while(*p == ' ') p++;
 800409e:	7803      	ldrb	r3, [r0, #0]
 80040a0:	2b20      	cmp	r3, #32
{
 80040a2:	b083      	sub	sp, #12
 80040a4:	4604      	mov	r4, r0
 80040a6:	eeb0 8a40 	vmov.f32	s16, s0
 80040aa:	eef0 8a60 	vmov.f32	s17, s1
 80040ae:	460d      	mov	r5, r1
		while(*p == ' ') p++;
 80040b0:	d103      	bne.n	80040ba <getFloat+0x22>
 80040b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	d0fb      	beq.n	80040b2 <getFloat+0x1a>
		tmp = strtof(p, &pend);
 80040ba:	a901      	add	r1, sp, #4
 80040bc:	4620      	mov	r0, r4
 80040be:	f00b fb09 	bl	800f6d4 <strtof>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 80040c2:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80040c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ca:	db04      	blt.n	80040d6 <getFloat+0x3e>
 80040cc:	eeb4 0ae8 	vcmpe.f32	s0, s17
 80040d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d4:	d907      	bls.n	80040e6 <getFloat+0x4e>
 80040d6:	4807      	ldr	r0, [pc, #28]	@ (80040f4 <getFloat+0x5c>)
 80040d8:	f00c fb7c 	bl	80107d4 <puts>
		return p;
}
 80040dc:	4620      	mov	r0, r4
 80040de:	b003      	add	sp, #12
 80040e0:	ecbd 8b02 	vpop	{d8}
 80040e4:	bd30      	pop	{r4, r5, pc}
 80040e6:	4620      	mov	r0, r4
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 80040e8:	ed85 0a00 	vstr	s0, [r5]
}
 80040ec:	b003      	add	sp, #12
 80040ee:	ecbd 8b02 	vpop	{d8}
 80040f2:	bd30      	pop	{r4, r5, pc}
 80040f4:	08014ab8 	.word	0x08014ab8

080040f8 <print_status>:
	}
}


void print_status()
{
 80040f8:	b500      	push	{lr}
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 80040fa:	ed9f 7b35 	vldr	d7, [pc, #212]	@ 80041d0 <print_status+0xd8>
{
 80040fe:	b083      	sub	sp, #12
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 8004100:	4b35      	ldr	r3, [pc, #212]	@ (80041d8 <print_status+0xe0>)
 8004102:	4836      	ldr	r0, [pc, #216]	@ (80041dc <print_status+0xe4>)
 8004104:	ed8d 7b00 	vstr	d7, [sp]
 8004108:	2200      	movs	r2, #0
 800410a:	f00c fafb 	bl	8010704 <iprintf>
	printf("Charger state : ");
 800410e:	4834      	ldr	r0, [pc, #208]	@ (80041e0 <print_status+0xe8>)
 8004110:	f00c faf8 	bl	8010704 <iprintf>
	switch (charger_state)
 8004114:	4b33      	ldr	r3, [pc, #204]	@ (80041e4 <print_status+0xec>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d806      	bhi.n	800412a <print_status+0x32>
 800411c:	e8df f003 	tbb	[pc, r3]
 8004120:	4c025054 	.word	0x4c025054
		break;
	case 1:
		printf("OK\r\n");
		break;
	case 2:
		printf("No charging ...\r\n");
 8004124:	4830      	ldr	r0, [pc, #192]	@ (80041e8 <print_status+0xf0>)
 8004126:	f00c fb55 	bl	80107d4 <puts>
		break;
	case 3:
		printf("Charging ...\r\n");
		break;
	}
	printf("MCU Temp: %3.1f [degC]\r\n", GET_MCU_Temp());
 800412a:	f7ff f8e9 	bl	8003300 <GET_MCU_Temp>
 800412e:	ee10 0a10 	vmov	r0, s0
 8004132:	f7fc fa49 	bl	80005c8 <__aeabi_f2d>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	482c      	ldr	r0, [pc, #176]	@ (80041ec <print_status+0xf4>)
 800413c:	f00c fae2 	bl	8010704 <iprintf>
	printf("VBAT: %u [mV]  ", BQ25798_Vbat_read());
 8004140:	f7ff fd30 	bl	8003ba4 <BQ25798_Vbat_read>
 8004144:	4601      	mov	r1, r0
 8004146:	482a      	ldr	r0, [pc, #168]	@ (80041f0 <print_status+0xf8>)
 8004148:	f00c fadc 	bl	8010704 <iprintf>
	printf("Vac1: %u [mV]  ", BQ25798_Vac1_read());
 800414c:	f7ff fd4e 	bl	8003bec <BQ25798_Vac1_read>
 8004150:	4601      	mov	r1, r0
 8004152:	4828      	ldr	r0, [pc, #160]	@ (80041f4 <print_status+0xfc>)
 8004154:	f00c fad6 	bl	8010704 <iprintf>
	printf("Vac2: %u [mV]  ", BQ25798_Vac2_read());
 8004158:	f7ff fd5a 	bl	8003c10 <BQ25798_Vac2_read>
 800415c:	4601      	mov	r1, r0
 800415e:	4826      	ldr	r0, [pc, #152]	@ (80041f8 <print_status+0x100>)
 8004160:	f00c fad0 	bl	8010704 <iprintf>
	printf("VSYS: %u [mV]  \r\n", BQ25798_Vsys_read());
 8004164:	f7ff fd30 	bl	8003bc8 <BQ25798_Vsys_read>
 8004168:	4601      	mov	r1, r0
 800416a:	4824      	ldr	r0, [pc, #144]	@ (80041fc <print_status+0x104>)
 800416c:	f00c faca 	bl	8010704 <iprintf>
	printf("Ibus: %u [mA]  ", BQ25798_Ibus_read());
 8004170:	f7ff fd60 	bl	8003c34 <BQ25798_Ibus_read>
 8004174:	4601      	mov	r1, r0
 8004176:	4822      	ldr	r0, [pc, #136]	@ (8004200 <print_status+0x108>)
 8004178:	f00c fac4 	bl	8010704 <iprintf>
	printf("Ibat: %u [mA]  \r\n", BQ25798_Ibat_read());
 800417c:	f7ff fd6c 	bl	8003c58 <BQ25798_Ibat_read>
 8004180:	4601      	mov	r1, r0
 8004182:	4820      	ldr	r0, [pc, #128]	@ (8004204 <print_status+0x10c>)
 8004184:	f00c fabe 	bl	8010704 <iprintf>
	printf("Minimal SYS Voltage: %u [mV]  \r\n", BQ25798_Sys_Min_Voltage_read());
 8004188:	f7ff fd78 	bl	8003c7c <BQ25798_Sys_Min_Voltage_read>
 800418c:	4601      	mov	r1, r0
 800418e:	481e      	ldr	r0, [pc, #120]	@ (8004208 <print_status+0x110>)
 8004190:	f00c fab8 	bl	8010704 <iprintf>
	printf("Charge Voltage Limit: %u [mV]  \r\n",BQ25798_Chr_Volt_Limit_read());
 8004194:	f7ff fd92 	bl	8003cbc <BQ25798_Chr_Volt_Limit_read>
 8004198:	4601      	mov	r1, r0
 800419a:	481c      	ldr	r0, [pc, #112]	@ (800420c <print_status+0x114>)
 800419c:	f00c fab2 	bl	8010704 <iprintf>
	printf("Charge Current Limit: %u [mA]  \r\n",BQ25798_Chr_Curr_Limit_read());
 80041a0:	f7ff fda2 	bl	8003ce8 <BQ25798_Chr_Curr_Limit_read>
 80041a4:	4601      	mov	r1, r0
 80041a6:	481a      	ldr	r0, [pc, #104]	@ (8004210 <print_status+0x118>)
 80041a8:	f00c faac 	bl	8010704 <iprintf>
//	BQ25798_Chrg_STAT0_read();
//	BQ25798_Chrg_STAT1_read();
//	BQ25798_Chrg_STAT2_read();
//	BQ25798_Chrg_STAT3_read();
//	BQ25798_Chrg_STAT4_read();
	printf("-----------------\r\n");
 80041ac:	4819      	ldr	r0, [pc, #100]	@ (8004214 <print_status+0x11c>)

}
 80041ae:	b003      	add	sp, #12
 80041b0:	f85d eb04 	ldr.w	lr, [sp], #4
	printf("-----------------\r\n");
 80041b4:	f00c bb0e 	b.w	80107d4 <puts>
		printf("Charging ...\r\n");
 80041b8:	4817      	ldr	r0, [pc, #92]	@ (8004218 <print_status+0x120>)
 80041ba:	f00c fb0b 	bl	80107d4 <puts>
		break;
 80041be:	e7b4      	b.n	800412a <print_status+0x32>
		printf("OK\r\n");
 80041c0:	4816      	ldr	r0, [pc, #88]	@ (800421c <print_status+0x124>)
 80041c2:	f00c fb07 	bl	80107d4 <puts>
		break;
 80041c6:	e7b0      	b.n	800412a <print_status+0x32>
		printf("FAULT\r\n");
 80041c8:	4815      	ldr	r0, [pc, #84]	@ (8004220 <print_status+0x128>)
 80041ca:	f00c fb03 	bl	80107d4 <puts>
		break;
 80041ce:	e7ac      	b.n	800412a <print_status+0x32>
 80041d0:	60000000 	.word	0x60000000
 80041d4:	3fe66666 	.word	0x3fe66666
 80041d8:	3ff00000 	.word	0x3ff00000
 80041dc:	08014adc 	.word	0x08014adc
 80041e0:	08014b00 	.word	0x08014b00
 80041e4:	20001b6f 	.word	0x20001b6f
 80041e8:	08014b1c 	.word	0x08014b1c
 80041ec:	08014b40 	.word	0x08014b40
 80041f0:	08014b5c 	.word	0x08014b5c
 80041f4:	08014b6c 	.word	0x08014b6c
 80041f8:	08014b7c 	.word	0x08014b7c
 80041fc:	08014b8c 	.word	0x08014b8c
 8004200:	08014ba0 	.word	0x08014ba0
 8004204:	08014bb0 	.word	0x08014bb0
 8004208:	08014bc4 	.word	0x08014bc4
 800420c:	08014be8 	.word	0x08014be8
 8004210:	08014c0c 	.word	0x08014c0c
 8004214:	08016044 	.word	0x08016044
 8004218:	08014b30 	.word	0x08014b30
 800421c:	080166a4 	.word	0x080166a4
 8004220:	08014b14 	.word	0x08014b14
 8004224:	00000000 	.word	0x00000000

08004228 <print_help>:

void print_help()
{
 8004228:	b510      	push	{r4, lr}
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 800422a:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8004318 <print_help+0xf0>
{
 800422e:	b082      	sub	sp, #8
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 8004230:	ed8d 7b00 	vstr	d7, [sp]
 8004234:	4b3a      	ldr	r3, [pc, #232]	@ (8004320 <print_help+0xf8>)
 8004236:	483b      	ldr	r0, [pc, #236]	@ (8004324 <print_help+0xfc>)
	printf("set [sensor] disable - sensor=[tmp117;bme280;shtc3;ms8607;dps368] - disable sensor\r\n");
	printf("set [sensor] [type] en - type=[temperature;press;hum] - enable sensor type\r\n");
	printf("set [sensor] [type] dis - type=[temperature;press;hum] - disable sensor type\r\n");
	printf("set [sensor] [type] offset X.X - set offset [X.X float]\r\n");
	printf("set [sensor] conf Y - set sensor config [Y - 0..15]\r\n");
	printf("-----------------\r\n");
 8004238:	4c3b      	ldr	r4, [pc, #236]	@ (8004328 <print_help+0x100>)
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 800423a:	2200      	movs	r2, #0
 800423c:	f00c fa62 	bl	8010704 <iprintf>
	printf("SET COMMANDS:\r\n");
 8004240:	483a      	ldr	r0, [pc, #232]	@ (800432c <print_help+0x104>)
 8004242:	f00c fac7 	bl	80107d4 <puts>
	printf("set interval X - X=15..1440[min] - measurement interval\r\n");
 8004246:	483a      	ldr	r0, [pc, #232]	@ (8004330 <print_help+0x108>)
 8004248:	f00c fac4 	bl	80107d4 <puts>
	printf("set disptype X - 0 - NONE(silent), 1 - TXT, 2 - CSV - measurement format\r\n");
 800424c:	4839      	ldr	r0, [pc, #228]	@ (8004334 <print_help+0x10c>)
 800424e:	f00c fac1 	bl	80107d4 <puts>
	printf("set [sensor] enable - sensor=[tmp117;bme280;shtc3;ms8607;dps368] - enable sensor\r\n");
 8004252:	4839      	ldr	r0, [pc, #228]	@ (8004338 <print_help+0x110>)
 8004254:	f00c fabe 	bl	80107d4 <puts>
	printf("set [sensor] disable - sensor=[tmp117;bme280;shtc3;ms8607;dps368] - disable sensor\r\n");
 8004258:	4838      	ldr	r0, [pc, #224]	@ (800433c <print_help+0x114>)
 800425a:	f00c fabb 	bl	80107d4 <puts>
	printf("set [sensor] [type] en - type=[temperature;press;hum] - enable sensor type\r\n");
 800425e:	4838      	ldr	r0, [pc, #224]	@ (8004340 <print_help+0x118>)
 8004260:	f00c fab8 	bl	80107d4 <puts>
	printf("set [sensor] [type] dis - type=[temperature;press;hum] - disable sensor type\r\n");
 8004264:	4837      	ldr	r0, [pc, #220]	@ (8004344 <print_help+0x11c>)
 8004266:	f00c fab5 	bl	80107d4 <puts>
	printf("set [sensor] [type] offset X.X - set offset [X.X float]\r\n");
 800426a:	4837      	ldr	r0, [pc, #220]	@ (8004348 <print_help+0x120>)
 800426c:	f00c fab2 	bl	80107d4 <puts>
	printf("set [sensor] conf Y - set sensor config [Y - 0..15]\r\n");
 8004270:	4836      	ldr	r0, [pc, #216]	@ (800434c <print_help+0x124>)
 8004272:	f00c faaf 	bl	80107d4 <puts>
	printf("-----------------\r\n");
 8004276:	4620      	mov	r0, r4
 8004278:	f00c faac 	bl	80107d4 <puts>

	printf("CONFIG COMMANDS:\r\n");
 800427c:	4834      	ldr	r0, [pc, #208]	@ (8004350 <print_help+0x128>)
 800427e:	f00c faa9 	bl	80107d4 <puts>
	printf("printconfig - Print config values\r\n");
 8004282:	4834      	ldr	r0, [pc, #208]	@ (8004354 <print_help+0x12c>)
 8004284:	f00c faa6 	bl	80107d4 <puts>
	printf("clearconfig - load default config values\r\n");
 8004288:	4833      	ldr	r0, [pc, #204]	@ (8004358 <print_help+0x130>)
 800428a:	f00c faa3 	bl	80107d4 <puts>
	printf("loadconfig - load config values\r\n");
 800428e:	4833      	ldr	r0, [pc, #204]	@ (800435c <print_help+0x134>)
 8004290:	f00c faa0 	bl	80107d4 <puts>
	printf("saveconfig - save config values\r\n");
 8004294:	4832      	ldr	r0, [pc, #200]	@ (8004360 <print_help+0x138>)
 8004296:	f00c fa9d 	bl	80107d4 <puts>
	printf("-----------------\r\n");
 800429a:	4620      	mov	r0, r4
 800429c:	f00c fa9a 	bl	80107d4 <puts>

	printf("MEAS COMMANDS:\r\n");
 80042a0:	4830      	ldr	r0, [pc, #192]	@ (8004364 <print_help+0x13c>)
 80042a2:	f00c fa97 	bl	80107d4 <puts>
	printf("meas start cont [disp] - Start continuos measurement disp=[txt;csv]\r\n");
 80042a6:	4830      	ldr	r0, [pc, #192]	@ (8004368 <print_help+0x140>)
 80042a8:	f00c fa94 	bl	80107d4 <puts>
	printf("meas start [disp] X - Start X measures disp=[txt;csv], X=1..500 \r\n");
 80042ac:	482f      	ldr	r0, [pc, #188]	@ (800436c <print_help+0x144>)
 80042ae:	f00c fa91 	bl	80107d4 <puts>
	printf("-----------------\r\n");
 80042b2:	4620      	mov	r0, r4
 80042b4:	f00c fa8e 	bl	80107d4 <puts>

	printf("TEST COMMANDS:\r\n");
 80042b8:	482d      	ldr	r0, [pc, #180]	@ (8004370 <print_help+0x148>)
 80042ba:	f00c fa8b 	bl	80107d4 <puts>
	printf("sim on\r\n");
 80042be:	482d      	ldr	r0, [pc, #180]	@ (8004374 <print_help+0x14c>)
 80042c0:	f00c fa88 	bl	80107d4 <puts>
	printf("sim off\r\n");
 80042c4:	482c      	ldr	r0, [pc, #176]	@ (8004378 <print_help+0x150>)
 80042c6:	f00c fa85 	bl	80107d4 <puts>
	printf("gps get - start GPS thread and read data from GPS\r\n");
 80042ca:	482c      	ldr	r0, [pc, #176]	@ (800437c <print_help+0x154>)
 80042cc:	f00c fa82 	bl	80107d4 <puts>
	printf("gps position - display GPS data\r\n");
 80042d0:	482b      	ldr	r0, [pc, #172]	@ (8004380 <print_help+0x158>)
 80042d2:	f00c fa7f 	bl	80107d4 <puts>
	printf("gsm time - get time from GSM module\r\n");
 80042d6:	482b      	ldr	r0, [pc, #172]	@ (8004384 <print_help+0x15c>)
 80042d8:	f00c fa7c 	bl	80107d4 <puts>

	printf("gprs start - connect to GPRS\r\n");
 80042dc:	482a      	ldr	r0, [pc, #168]	@ (8004388 <print_help+0x160>)
 80042de:	f00c fa79 	bl	80107d4 <puts>
	printf("gprs stop - GPRS off\r\n");
 80042e2:	482a      	ldr	r0, [pc, #168]	@ (800438c <print_help+0x164>)
 80042e4:	f00c fa76 	bl	80107d4 <puts>
	printf("gprs server - connect to hardcoded server IP and port\r\n");
 80042e8:	4829      	ldr	r0, [pc, #164]	@ (8004390 <print_help+0x168>)
 80042ea:	f00c fa73 	bl	80107d4 <puts>
	printf("gprs close - disconnect from server\r\n");
 80042ee:	4829      	ldr	r0, [pc, #164]	@ (8004394 <print_help+0x16c>)
 80042f0:	f00c fa70 	bl	80107d4 <puts>
	printf("gprs send - send hardcoded test string to connected server\r\n");
 80042f4:	4828      	ldr	r0, [pc, #160]	@ (8004398 <print_help+0x170>)
 80042f6:	f00c fa6d 	bl	80107d4 <puts>
	printf("gprs test - full test gprs: connect to gprs, connect to server, send data, disconect, gprs down\r\n");
 80042fa:	4828      	ldr	r0, [pc, #160]	@ (800439c <print_help+0x174>)
 80042fc:	f00c fa6a 	bl	80107d4 <puts>


	printf("-----------------\r\n");
 8004300:	4620      	mov	r0, r4
 8004302:	f00c fa67 	bl	80107d4 <puts>
	printf("? or help - help\r\n");
 8004306:	4826      	ldr	r0, [pc, #152]	@ (80043a0 <print_help+0x178>)
 8004308:	f00c fa64 	bl	80107d4 <puts>
	printf("-----------------\r\n");
 800430c:	4620      	mov	r0, r4

}
 800430e:	b002      	add	sp, #8
 8004310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("-----------------\r\n");
 8004314:	f00c ba5e 	b.w	80107d4 <puts>
 8004318:	60000000 	.word	0x60000000
 800431c:	3fe66666 	.word	0x3fe66666
 8004320:	3ff00000 	.word	0x3ff00000
 8004324:	08014adc 	.word	0x08014adc
 8004328:	08016044 	.word	0x08016044
 800432c:	08014c30 	.word	0x08014c30
 8004330:	08014c40 	.word	0x08014c40
 8004334:	08014c7c 	.word	0x08014c7c
 8004338:	08014cc8 	.word	0x08014cc8
 800433c:	08014d1c 	.word	0x08014d1c
 8004340:	08014d70 	.word	0x08014d70
 8004344:	08014dbc 	.word	0x08014dbc
 8004348:	08014e0c 	.word	0x08014e0c
 800434c:	08014e48 	.word	0x08014e48
 8004350:	08014e80 	.word	0x08014e80
 8004354:	08014e94 	.word	0x08014e94
 8004358:	08014eb8 	.word	0x08014eb8
 800435c:	08014ee4 	.word	0x08014ee4
 8004360:	08014f08 	.word	0x08014f08
 8004364:	08014f2c 	.word	0x08014f2c
 8004368:	08014f3c 	.word	0x08014f3c
 800436c:	08014f84 	.word	0x08014f84
 8004370:	08014fc8 	.word	0x08014fc8
 8004374:	08014fd8 	.word	0x08014fd8
 8004378:	08014fe0 	.word	0x08014fe0
 800437c:	08014fec 	.word	0x08014fec
 8004380:	08015020 	.word	0x08015020
 8004384:	08015044 	.word	0x08015044
 8004388:	0801506c 	.word	0x0801506c
 800438c:	0801508c 	.word	0x0801508c
 8004390:	080150a4 	.word	0x080150a4
 8004394:	080150dc 	.word	0x080150dc
 8004398:	08015104 	.word	0x08015104
 800439c:	08015140 	.word	0x08015140
 80043a0:	080151a4 	.word	0x080151a4

080043a4 <CLI_proc>:
{
 80043a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 80043a8:	4cac      	ldr	r4, [pc, #688]	@ (800465c <CLI_proc+0x2b8>)
{
 80043aa:	ed2d 8b02 	vpush	{d8}
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	2b3f      	cmp	r3, #63	@ 0x3f
{
 80043b2:	b090      	sub	sp, #64	@ 0x40
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 80043b4:	d803      	bhi.n	80043be <CLI_proc+0x1a>
 80043b6:	49aa      	ldr	r1, [pc, #680]	@ (8004660 <CLI_proc+0x2bc>)
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	54c8      	strb	r0, [r1, r3]
 80043bc:	6022      	str	r2, [r4, #0]
	if(ch == 10)	// LF
 80043be:	280a      	cmp	r0, #10
 80043c0:	d004      	beq.n	80043cc <CLI_proc+0x28>
}
 80043c2:	b010      	add	sp, #64	@ 0x40
 80043c4:	ecbd 8b02 	vpop	{d8}
 80043c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    if(clibuf[cliptr-1] == 13) cliptr--;
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	4da4      	ldr	r5, [pc, #656]	@ (8004660 <CLI_proc+0x2bc>)
 80043d0:	1e58      	subs	r0, r3, #1
		memset(clibuf+cliptr, 0, sizeof(clibuf)-cliptr);
 80043d2:	2100      	movs	r1, #0
	    if(clibuf[cliptr-1] == 13) cliptr--;
 80043d4:	5c2a      	ldrb	r2, [r5, r0]
 80043d6:	2a0d      	cmp	r2, #13
 80043d8:	bf18      	it	ne
 80043da:	4618      	movne	r0, r3
		memset(clibuf+cliptr, 0, sizeof(clibuf)-cliptr);
 80043dc:	f1c0 0240 	rsb	r2, r0, #64	@ 0x40
 80043e0:	4428      	add	r0, r5
 80043e2:	f00c fb57 	bl	8010a94 <memset>
		cliptr = 0;
 80043e6:	2300      	movs	r3, #0
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{print_help(); return;}
 80043e8:	489e      	ldr	r0, [pc, #632]	@ (8004664 <CLI_proc+0x2c0>)
		cliptr = 0;
 80043ea:	6023      	str	r3, [r4, #0]
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{print_help(); return;}
 80043ec:	f7ff fdc4 	bl	8003f78 <find>
 80043f0:	1c6b      	adds	r3, r5, #1
 80043f2:	4283      	cmp	r3, r0
 80043f4:	f000 80da 	beq.w	80045ac <CLI_proc+0x208>
 80043f8:	489b      	ldr	r0, [pc, #620]	@ (8004668 <CLI_proc+0x2c4>)
 80043fa:	f7ff fdbd 	bl	8003f78 <find>
 80043fe:	1d2e      	adds	r6, r5, #4
 8004400:	4286      	cmp	r6, r0
 8004402:	f000 80d3 	beq.w	80045ac <CLI_proc+0x208>
		if(find("status")==clibuf+6) {print_status(); return;}
 8004406:	4899      	ldr	r0, [pc, #612]	@ (800466c <CLI_proc+0x2c8>)
 8004408:	f7ff fdb6 	bl	8003f78 <find>
 800440c:	f105 0806 	add.w	r8, r5, #6
 8004410:	4580      	cmp	r8, r0
 8004412:	f000 80e3 	beq.w	80045dc <CLI_proc+0x238>
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 8004416:	4896      	ldr	r0, [pc, #600]	@ (8004670 <CLI_proc+0x2cc>)
 8004418:	f7ff fdae 	bl	8003f78 <find>
 800441c:	f105 0907 	add.w	r9, r5, #7
 8004420:	4581      	cmp	r9, r0
 8004422:	f000 80e2 	beq.w	80045ea <CLI_proc+0x246>
		if(find("clearconfig")==clibuf+11) {printf("config reset to defaults\r\n"); Load_defaults(); return;}
 8004426:	4893      	ldr	r0, [pc, #588]	@ (8004674 <CLI_proc+0x2d0>)
 8004428:	f7ff fda6 	bl	8003f78 <find>
 800442c:	f105 040b 	add.w	r4, r5, #11
 8004430:	4284      	cmp	r4, r0
 8004432:	f000 80c2 	beq.w	80045ba <CLI_proc+0x216>
		if(find("printconfig")==clibuf+11) {EEPROM_Print_config(); return;}
 8004436:	4890      	ldr	r0, [pc, #576]	@ (8004678 <CLI_proc+0x2d4>)
 8004438:	f7ff fd9e 	bl	8003f78 <find>
 800443c:	4284      	cmp	r4, r0
 800443e:	f000 80e6 	beq.w	800460e <CLI_proc+0x26a>
		if(find("loadconfig")==clibuf+10) {printf("LOADING CONFIG. Status: %i (0==OK)\r\n",Load_config()); return;}
 8004442:	488e      	ldr	r0, [pc, #568]	@ (800467c <CLI_proc+0x2d8>)
 8004444:	f7ff fd98 	bl	8003f78 <find>
 8004448:	f105 070a 	add.w	r7, r5, #10
 800444c:	4287      	cmp	r7, r0
 800444e:	f000 80e5 	beq.w	800461c <CLI_proc+0x278>
		if(find("saveconfig")==clibuf+10) {printf("SAVING CONFIG. Status: %i (0==NO CHANGES; 1==SAVE OK, 2==ERR)\r\n",Save_config()); return;}
 8004452:	488b      	ldr	r0, [pc, #556]	@ (8004680 <CLI_proc+0x2dc>)
 8004454:	f7ff fd90 	bl	8003f78 <find>
 8004458:	4287      	cmp	r7, r0
 800445a:	f000 80ea 	beq.w	8004632 <CLI_proc+0x28e>
		if(find("setbattalarm")==clibuf+12){getval(clibuf+13, &temp, 0, 15000); config.batt_alarm=temp; printf("Batt alarm:%i",config.batt_alarm); return;};
 800445e:	4889      	ldr	r0, [pc, #548]	@ (8004684 <CLI_proc+0x2e0>)
 8004460:	f7ff fd8a 	bl	8003f78 <find>
 8004464:	f105 0a0c 	add.w	sl, r5, #12
 8004468:	4582      	cmp	sl, r0
 800446a:	f000 80e7 	beq.w	800463c <CLI_proc+0x298>
		if(find("setbatscale")==clibuf+11){getFloat(clibuf+12, &tempfloat, -10.0, 10.0); config.bat_scale=tempfloat; printf("Batt scale:%f \r\n",config.bat_scale); return;};
 800446e:	4886      	ldr	r0, [pc, #536]	@ (8004688 <CLI_proc+0x2e4>)
 8004470:	f7ff fd82 	bl	8003f78 <find>
 8004474:	4284      	cmp	r4, r0
 8004476:	f000 8147 	beq.w	8004708 <CLI_proc+0x364>
		if(find("sim on")==clibuf+6) {Sim80x_SetPower(1); return;}
 800447a:	4884      	ldr	r0, [pc, #528]	@ (800468c <CLI_proc+0x2e8>)
 800447c:	f7ff fd7c 	bl	8003f78 <find>
 8004480:	4580      	cmp	r8, r0
 8004482:	bf08      	it	eq
 8004484:	2001      	moveq	r0, #1
 8004486:	f000 80bb 	beq.w	8004600 <CLI_proc+0x25c>
		if(find("sim off")==clibuf+7) {Sim80x_SetPower(0); return;}
 800448a:	4881      	ldr	r0, [pc, #516]	@ (8004690 <CLI_proc+0x2ec>)
 800448c:	f7ff fd74 	bl	8003f78 <find>
 8004490:	4581      	cmp	r9, r0
 8004492:	f000 80b4 	beq.w	80045fe <CLI_proc+0x25a>
		if(find("gprs start")==clibuf+10) {
 8004496:	487f      	ldr	r0, [pc, #508]	@ (8004694 <CLI_proc+0x2f0>)
 8004498:	f7ff fd6e 	bl	8003f78 <find>
 800449c:	4287      	cmp	r7, r0
 800449e:	f000 8262 	beq.w	8004966 <CLI_proc+0x5c2>
		if(find("gprs stop")==clibuf+9) {GPRS_DeactivatePDPContext(); return;}
 80044a2:	487d      	ldr	r0, [pc, #500]	@ (8004698 <CLI_proc+0x2f4>)
 80044a4:	4d7d      	ldr	r5, [pc, #500]	@ (800469c <CLI_proc+0x2f8>)
 80044a6:	f7ff fd67 	bl	8003f78 <find>
 80044aa:	4285      	cmp	r5, r0
 80044ac:	f000 8276 	beq.w	800499c <CLI_proc+0x5f8>
		if(find("gprs server ")==clibuf+12) {
 80044b0:	487b      	ldr	r0, [pc, #492]	@ (80046a0 <CLI_proc+0x2fc>)
 80044b2:	f7ff fd61 	bl	8003f78 <find>
 80044b6:	4582      	cmp	sl, r0
 80044b8:	f000 8277 	beq.w	80049aa <CLI_proc+0x606>
		if(find("gprs close")==clibuf+10) {GPRS_DisconnectFromServer(); return;}
 80044bc:	4879      	ldr	r0, [pc, #484]	@ (80046a4 <CLI_proc+0x300>)
 80044be:	f7ff fd5b 	bl	8003f78 <find>
 80044c2:	4287      	cmp	r7, r0
 80044c4:	f000 82f5 	beq.w	8004ab2 <CLI_proc+0x70e>
		if(find("gprs send")==clibuf+9) {
 80044c8:	4877      	ldr	r0, [pc, #476]	@ (80046a8 <CLI_proc+0x304>)
 80044ca:	f7ff fd55 	bl	8003f78 <find>
 80044ce:	4285      	cmp	r5, r0
 80044d0:	f000 830d 	beq.w	8004aee <CLI_proc+0x74a>
		if(find("gprs test")==clibuf+9) {StartSendGPRS(); return;}
 80044d4:	4875      	ldr	r0, [pc, #468]	@ (80046ac <CLI_proc+0x308>)
 80044d6:	f7ff fd4f 	bl	8003f78 <find>
 80044da:	4285      	cmp	r5, r0
 80044dc:	d077      	beq.n	80045ce <CLI_proc+0x22a>
		if(find("gps get")==clibuf+7) {StartReadGps(); return;}
 80044de:	4874      	ldr	r0, [pc, #464]	@ (80046b0 <CLI_proc+0x30c>)
 80044e0:	f7ff fd4a 	bl	8003f78 <find>
 80044e4:	4581      	cmp	r9, r0
 80044e6:	f000 830e 	beq.w	8004b06 <CLI_proc+0x762>
		if(find("gps position")==clibuf+12) {
 80044ea:	4872      	ldr	r0, [pc, #456]	@ (80046b4 <CLI_proc+0x310>)
 80044ec:	f7ff fd44 	bl	8003f78 <find>
 80044f0:	4582      	cmp	sl, r0
 80044f2:	f000 830f 	beq.w	8004b14 <CLI_proc+0x770>
		if(find("gsm time")==clibuf+8) {
 80044f6:	4870      	ldr	r0, [pc, #448]	@ (80046b8 <CLI_proc+0x314>)
 80044f8:	f7ff fd3e 	bl	8003f78 <find>
 80044fc:	4b6f      	ldr	r3, [pc, #444]	@ (80046bc <CLI_proc+0x318>)
 80044fe:	4283      	cmp	r3, r0
 8004500:	f000 832c 	beq.w	8004b5c <CLI_proc+0x7b8>
		p = find("set ");
 8004504:	486e      	ldr	r0, [pc, #440]	@ (80046c0 <CLI_proc+0x31c>)
 8004506:	f7ff fd37 	bl	8003f78 <find>
		if(p == clibuf+4) {
 800450a:	4286      	cmp	r6, r0
 800450c:	f000 812c 	beq.w	8004768 <CLI_proc+0x3c4>
		p = find("meas ");
 8004510:	486c      	ldr	r0, [pc, #432]	@ (80046c4 <CLI_proc+0x320>)
 8004512:	f7ff fd31 	bl	8003f78 <find>
		if(p == clibuf+5)
 8004516:	4b6c      	ldr	r3, [pc, #432]	@ (80046c8 <CLI_proc+0x324>)
 8004518:	4298      	cmp	r0, r3
		p = find("meas ");
 800451a:	4605      	mov	r5, r0
		if(p == clibuf+5)
 800451c:	f47f af51 	bne.w	80043c2 <CLI_proc+0x1e>
			if((p = find("start ")))
 8004520:	486a      	ldr	r0, [pc, #424]	@ (80046cc <CLI_proc+0x328>)
 8004522:	f7ff fd29 	bl	8003f78 <find>
 8004526:	2800      	cmp	r0, #0
 8004528:	f43f af4b 	beq.w	80043c2 <CLI_proc+0x1e>
				if(p == clibuf+11)
 800452c:	42a0      	cmp	r0, r4
 800452e:	f47f af48 	bne.w	80043c2 <CLI_proc+0x1e>
					if((strstr(clibuf+11, "txt ")))
 8004532:	4967      	ldr	r1, [pc, #412]	@ (80046d0 <CLI_proc+0x32c>)
 8004534:	f00c fae8 	bl	8010b08 <strstr>
 8004538:	4606      	mov	r6, r0
 800453a:	2800      	cmp	r0, #0
 800453c:	f040 837b 	bne.w	8004c36 <CLI_proc+0x892>
					if((strstr(clibuf+11, "csv ")))
 8004540:	4964      	ldr	r1, [pc, #400]	@ (80046d4 <CLI_proc+0x330>)
 8004542:	4620      	mov	r0, r4
 8004544:	f00c fae0 	bl	8010b08 <strstr>
 8004548:	2800      	cmp	r0, #0
 800454a:	f040 8392 	bne.w	8004c72 <CLI_proc+0x8ce>
						if((strstr(clibuf+11, "cont ")))
 800454e:	4962      	ldr	r1, [pc, #392]	@ (80046d8 <CLI_proc+0x334>)
 8004550:	4620      	mov	r0, r4
 8004552:	f00c fad9 	bl	8010b08 <strstr>
 8004556:	2800      	cmp	r0, #0
 8004558:	f43f af33 	beq.w	80043c2 <CLI_proc+0x1e>
							if((strstr(clibuf+16, "txt")))
 800455c:	350b      	adds	r5, #11
 800455e:	495f      	ldr	r1, [pc, #380]	@ (80046dc <CLI_proc+0x338>)
 8004560:	4628      	mov	r0, r5
 8004562:	f00c fad1 	bl	8010b08 <strstr>
 8004566:	4606      	mov	r6, r0
 8004568:	2800      	cmp	r0, #0
 800456a:	f040 83c0 	bne.w	8004cee <CLI_proc+0x94a>
							if((strstr(clibuf+16, "csv")))
 800456e:	495c      	ldr	r1, [pc, #368]	@ (80046e0 <CLI_proc+0x33c>)
 8004570:	4628      	mov	r0, r5
 8004572:	f00c fac9 	bl	8010b08 <strstr>
 8004576:	2800      	cmp	r0, #0
 8004578:	f43f af23 	beq.w	80043c2 <CLI_proc+0x1e>
								config.disp_type = 2;
 800457c:	4c59      	ldr	r4, [pc, #356]	@ (80046e4 <CLI_proc+0x340>)
								meas_cont_mode = 1;
 800457e:	4a5a      	ldr	r2, [pc, #360]	@ (80046e8 <CLI_proc+0x344>)
								config.disp_type = 2;
 8004580:	79e3      	ldrb	r3, [r4, #7]
								printf("Start continuous measurement, TXT format\r\n");
 8004582:	485a      	ldr	r0, [pc, #360]	@ (80046ec <CLI_proc+0x348>)
								config.disp_type = 2;
 8004584:	2102      	movs	r1, #2
 8004586:	f361 0343 	bfi	r3, r1, #1, #3
								meas_cont_mode = 1;
 800458a:	2101      	movs	r1, #1
 800458c:	7011      	strb	r1, [r2, #0]
								config.disp_type = 2;
 800458e:	71e3      	strb	r3, [r4, #7]
								printf("Start continuous measurement, TXT format\r\n");
 8004590:	f00c f920 	bl	80107d4 <puts>
								csvcnt = 0;
 8004594:	4b56      	ldr	r3, [pc, #344]	@ (80046f0 <CLI_proc+0x34c>)
 8004596:	801e      	strh	r6, [r3, #0]
								printCSVheader();
 8004598:	f003 f852 	bl	8007640 <printCSVheader>
								ReinitTimer(config.tim_interval);
 800459c:	8920      	ldrh	r0, [r4, #8]
}
 800459e:	b010      	add	sp, #64	@ 0x40
 80045a0:	ecbd 8b02 	vpop	{d8}
 80045a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
								ReinitTimer(config.tim_interval);
 80045a8:	f002 bfa8 	b.w	80074fc <ReinitTimer>
}
 80045ac:	b010      	add	sp, #64	@ 0x40
 80045ae:	ecbd 8b02 	vpop	{d8}
 80045b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{print_help(); return;}
 80045b6:	f7ff be37 	b.w	8004228 <print_help>
		if(find("clearconfig")==clibuf+11) {printf("config reset to defaults\r\n"); Load_defaults(); return;}
 80045ba:	484e      	ldr	r0, [pc, #312]	@ (80046f4 <CLI_proc+0x350>)
 80045bc:	f00c f90a 	bl	80107d4 <puts>
}
 80045c0:	b010      	add	sp, #64	@ 0x40
 80045c2:	ecbd 8b02 	vpop	{d8}
 80045c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("clearconfig")==clibuf+11) {printf("config reset to defaults\r\n"); Load_defaults(); return;}
 80045ca:	f7fc bf43 	b.w	8001454 <Load_defaults>
}
 80045ce:	b010      	add	sp, #64	@ 0x40
 80045d0:	ecbd 8b02 	vpop	{d8}
 80045d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("gprs test")==clibuf+9) {StartSendGPRS(); return;}
 80045d8:	f003 be26 	b.w	8008228 <StartSendGPRS>
}
 80045dc:	b010      	add	sp, #64	@ 0x40
 80045de:	ecbd 8b02 	vpop	{d8}
 80045e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("status")==clibuf+6) {print_status(); return;}
 80045e6:	f7ff bd87 	b.w	80040f8 <print_status>
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 80045ea:	4843      	ldr	r0, [pc, #268]	@ (80046f8 <CLI_proc+0x354>)
 80045ec:	22a0      	movs	r2, #160	@ 0xa0
 80045ee:	2138      	movs	r1, #56	@ 0x38
}
 80045f0:	b010      	add	sp, #64	@ 0x40
 80045f2:	ecbd 8b02 	vpop	{d8}
 80045f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 80045fa:	f004 bd05 	b.w	8009008 <i2c_scan>
		if(find("sim off")==clibuf+7) {Sim80x_SetPower(0); return;}
 80045fe:	2000      	movs	r0, #0
}
 8004600:	b010      	add	sp, #64	@ 0x40
 8004602:	ecbd 8b02 	vpop	{d8}
 8004606:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("sim off")==clibuf+7) {Sim80x_SetPower(0); return;}
 800460a:	f7fe b8ab 	b.w	8002764 <Sim80x_SetPower>
}
 800460e:	b010      	add	sp, #64	@ 0x40
 8004610:	ecbd 8b02 	vpop	{d8}
 8004614:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("printconfig")==clibuf+11) {EEPROM_Print_config(); return;}
 8004618:	f7fc bfc4 	b.w	80015a4 <EEPROM_Print_config>
		if(find("loadconfig")==clibuf+10) {printf("LOADING CONFIG. Status: %i (0==OK)\r\n",Load_config()); return;}
 800461c:	f7fc ff48 	bl	80014b0 <Load_config>
 8004620:	4601      	mov	r1, r0
 8004622:	4836      	ldr	r0, [pc, #216]	@ (80046fc <CLI_proc+0x358>)
}
 8004624:	b010      	add	sp, #64	@ 0x40
 8004626:	ecbd 8b02 	vpop	{d8}
 800462a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("saveconfig")==clibuf+10) {printf("SAVING CONFIG. Status: %i (0==NO CHANGES; 1==SAVE OK, 2==ERR)\r\n",Save_config()); return;}
 800462e:	f00c b869 	b.w	8010704 <iprintf>
 8004632:	f7fc fee7 	bl	8001404 <Save_config>
 8004636:	4601      	mov	r1, r0
 8004638:	4831      	ldr	r0, [pc, #196]	@ (8004700 <CLI_proc+0x35c>)
 800463a:	e7f3      	b.n	8004624 <CLI_proc+0x280>
		if(find("setbattalarm")==clibuf+12){getval(clibuf+13, &temp, 0, 15000); config.batt_alarm=temp; printf("Batt alarm:%i",config.batt_alarm); return;};
 800463c:	a904      	add	r1, sp, #16
 800463e:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8004642:	2200      	movs	r2, #0
 8004644:	f10a 0001 	add.w	r0, sl, #1
 8004648:	f7ff fcc0 	bl	8003fcc <getval>
 800464c:	9b04      	ldr	r3, [sp, #16]
 800464e:	4a25      	ldr	r2, [pc, #148]	@ (80046e4 <CLI_proc+0x340>)
 8004650:	482c      	ldr	r0, [pc, #176]	@ (8004704 <CLI_proc+0x360>)
 8004652:	f8a2 3005 	strh.w	r3, [r2, #5]
 8004656:	b299      	uxth	r1, r3
 8004658:	e7e4      	b.n	8004624 <CLI_proc+0x280>
 800465a:	bf00      	nop
 800465c:	20000d8c 	.word	0x20000d8c
 8004660:	20000d90 	.word	0x20000d90
 8004664:	080151c4 	.word	0x080151c4
 8004668:	080151c8 	.word	0x080151c8
 800466c:	080151d0 	.word	0x080151d0
 8004670:	080151d8 	.word	0x080151d8
 8004674:	080151e0 	.word	0x080151e0
 8004678:	08015208 	.word	0x08015208
 800467c:	08015214 	.word	0x08015214
 8004680:	08015248 	.word	0x08015248
 8004684:	08015294 	.word	0x08015294
 8004688:	080152b4 	.word	0x080152b4
 800468c:	080152d4 	.word	0x080152d4
 8004690:	080152dc 	.word	0x080152dc
 8004694:	080152e4 	.word	0x080152e4
 8004698:	08015328 	.word	0x08015328
 800469c:	20000d99 	.word	0x20000d99
 80046a0:	08015334 	.word	0x08015334
 80046a4:	08015344 	.word	0x08015344
 80046a8:	08015350 	.word	0x08015350
 80046ac:	08015378 	.word	0x08015378
 80046b0:	08015384 	.word	0x08015384
 80046b4:	0801538c 	.word	0x0801538c
 80046b8:	080153c4 	.word	0x080153c4
 80046bc:	20000d98 	.word	0x20000d98
 80046c0:	08015404 	.word	0x08015404
 80046c4:	08015bf4 	.word	0x08015bf4
 80046c8:	20000d95 	.word	0x20000d95
 80046cc:	08015bfc 	.word	0x08015bfc
 80046d0:	08015c04 	.word	0x08015c04
 80046d4:	08015c2c 	.word	0x08015c2c
 80046d8:	08015c54 	.word	0x08015c54
 80046dc:	08015c5c 	.word	0x08015c5c
 80046e0:	08015c8c 	.word	0x08015c8c
 80046e4:	200019c0 	.word	0x200019c0
 80046e8:	200019b6 	.word	0x200019b6
 80046ec:	08015c60 	.word	0x08015c60
 80046f0:	20001618 	.word	0x20001618
 80046f4:	080151ec 	.word	0x080151ec
 80046f8:	200017ac 	.word	0x200017ac
 80046fc:	08015220 	.word	0x08015220
 8004700:	08015254 	.word	0x08015254
 8004704:	080152a4 	.word	0x080152a4
		while(*p == ' ') p++;
 8004708:	7b2b      	ldrb	r3, [r5, #12]
 800470a:	48ad      	ldr	r0, [pc, #692]	@ (80049c0 <CLI_proc+0x61c>)
 800470c:	2b20      	cmp	r3, #32
 800470e:	d103      	bne.n	8004718 <CLI_proc+0x374>
 8004710:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004714:	2b20      	cmp	r3, #32
 8004716:	d0fb      	beq.n	8004710 <CLI_proc+0x36c>
		tmp = strtof(p, &pend);
 8004718:	a904      	add	r1, sp, #16
 800471a:	f00a ffdb 	bl	800f6d4 <strtof>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 800471e:	eefa 7a04 	vmov.f32	s15, #164	@ 0xc1200000 -10.0
 8004722:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		tmp = strtof(p, &pend);
 800472a:	eeb0 8a40 	vmov.f32	s16, s0
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 800472e:	f2c0 812d 	blt.w	800498c <CLI_proc+0x5e8>
 8004732:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8004736:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800473a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473e:	f200 8125 	bhi.w	800498c <CLI_proc+0x5e8>
		if(find("setbatscale")==clibuf+11){getFloat(clibuf+12, &tempfloat, -10.0, 10.0); config.bat_scale=tempfloat; printf("Batt scale:%f \r\n",config.bat_scale); return;};
 8004742:	ee10 0a10 	vmov	r0, s0
 8004746:	f7fb ff3f 	bl	80005c8 <__aeabi_f2d>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4c9d      	ldr	r4, [pc, #628]	@ (80049c4 <CLI_proc+0x620>)
 8004750:	489d      	ldr	r0, [pc, #628]	@ (80049c8 <CLI_proc+0x624>)
 8004752:	ee18 1a10 	vmov	r1, s16
 8004756:	f8c4 1001 	str.w	r1, [r4, #1]
}
 800475a:	b010      	add	sp, #64	@ 0x40
 800475c:	ecbd 8b02 	vpop	{d8}
 8004760:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("setbatscale")==clibuf+11){getFloat(clibuf+12, &tempfloat, -10.0, 10.0); config.bat_scale=tempfloat; printf("Batt scale:%f \r\n",config.bat_scale); return;};
 8004764:	f00b bfce 	b.w	8010704 <iprintf>
			if((p = find("interval ")))	{
 8004768:	4898      	ldr	r0, [pc, #608]	@ (80049cc <CLI_proc+0x628>)
 800476a:	f7ff fc05 	bl	8003f78 <find>
 800476e:	2800      	cmp	r0, #0
 8004770:	f040 81db 	bne.w	8004b2a <CLI_proc+0x786>
			if((p = find("measures ")))	{
 8004774:	4896      	ldr	r0, [pc, #600]	@ (80049d0 <CLI_proc+0x62c>)
 8004776:	f7ff fbff 	bl	8003f78 <find>
 800477a:	4605      	mov	r5, r0
 800477c:	2800      	cmp	r0, #0
 800477e:	f040 8206 	bne.w	8004b8e <CLI_proc+0x7ea>
			if((p = find("disptype ")))	{
 8004782:	4894      	ldr	r0, [pc, #592]	@ (80049d4 <CLI_proc+0x630>)
 8004784:	f7ff fbf8 	bl	8003f78 <find>
 8004788:	4606      	mov	r6, r0
 800478a:	2800      	cmp	r0, #0
 800478c:	f040 8211 	bne.w	8004bb2 <CLI_proc+0x80e>
			if((p = find("send format "))) {
 8004790:	4891      	ldr	r0, [pc, #580]	@ (80049d8 <CLI_proc+0x634>)
 8004792:	f7ff fbf1 	bl	8003f78 <find>
 8004796:	2800      	cmp	r0, #0
 8004798:	f040 8227 	bne.w	8004bea <CLI_proc+0x846>
			if((p = find("server ip "))) {
 800479c:	488f      	ldr	r0, [pc, #572]	@ (80049dc <CLI_proc+0x638>)
 800479e:	f7ff fbeb 	bl	8003f78 <find>
 80047a2:	4605      	mov	r5, r0
 80047a4:	2800      	cmp	r0, #0
 80047a6:	f040 8282 	bne.w	8004cae <CLI_proc+0x90a>
			if((p = find("server port ")))	{
 80047aa:	488d      	ldr	r0, [pc, #564]	@ (80049e0 <CLI_proc+0x63c>)
 80047ac:	f7ff fbe4 	bl	8003f78 <find>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	f040 8285 	bne.w	8004cc0 <CLI_proc+0x91c>
			if((p = find("mqtt ip "))) {
 80047b6:	488b      	ldr	r0, [pc, #556]	@ (80049e4 <CLI_proc+0x640>)
 80047b8:	f7ff fbde 	bl	8003f78 <find>
 80047bc:	2800      	cmp	r0, #0
 80047be:	f040 82bf 	bne.w	8004d40 <CLI_proc+0x99c>
			if((p = find("mqtt port ")))	{
 80047c2:	4889      	ldr	r0, [pc, #548]	@ (80049e8 <CLI_proc+0x644>)
 80047c4:	f7ff fbd8 	bl	8003f78 <find>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	f040 82a6 	bne.w	8004d1a <CLI_proc+0x976>
			if((p = find("mqtt user "))) {
 80047ce:	4887      	ldr	r0, [pc, #540]	@ (80049ec <CLI_proc+0x648>)
 80047d0:	f7ff fbd2 	bl	8003f78 <find>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	f040 8307 	bne.w	8004de8 <CLI_proc+0xa44>
			if((p = find("mqtt pass "))) {
 80047da:	4885      	ldr	r0, [pc, #532]	@ (80049f0 <CLI_proc+0x64c>)
 80047dc:	f7ff fbcc 	bl	8003f78 <find>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	f040 82b6 	bne.w	8004d52 <CLI_proc+0x9ae>
			if((p = find("tmp117 ")))
 80047e6:	4883      	ldr	r0, [pc, #524]	@ (80049f4 <CLI_proc+0x650>)
 80047e8:	f7ff fbc6 	bl	8003f78 <find>
 80047ec:	b110      	cbz	r0, 80047f4 <CLI_proc+0x450>
				if(p == clibuf+11)
 80047ee:	42a0      	cmp	r0, r4
 80047f0:	f000 8307 	beq.w	8004e02 <CLI_proc+0xa5e>
			if((p = find("shtc3 ")))
 80047f4:	4880      	ldr	r0, [pc, #512]	@ (80049f8 <CLI_proc+0x654>)
 80047f6:	f7ff fbbf 	bl	8003f78 <find>
 80047fa:	b110      	cbz	r0, 8004802 <CLI_proc+0x45e>
				if(p == clibuf+10)
 80047fc:	42b8      	cmp	r0, r7
 80047fe:	f000 85ac 	beq.w	800535a <CLI_proc+0xfb6>
			if((p = find("ms8607 ")))
 8004802:	487e      	ldr	r0, [pc, #504]	@ (80049fc <CLI_proc+0x658>)
 8004804:	f7ff fbb8 	bl	8003f78 <find>
 8004808:	2800      	cmp	r0, #0
 800480a:	f000 83c7 	beq.w	8004f9c <CLI_proc+0xbf8>
				if(p == clibuf+11)
 800480e:	42a0      	cmp	r0, r4
 8004810:	f47f add7 	bne.w	80043c2 <CLI_proc+0x1e>
					if((p = find("enable")))
 8004814:	487a      	ldr	r0, [pc, #488]	@ (8004a00 <CLI_proc+0x65c>)
 8004816:	f7ff fbaf 	bl	8003f78 <find>
 800481a:	b170      	cbz	r0, 800483a <CLI_proc+0x496>
						MS8607.sensor_use = 1;
 800481c:	4979      	ldr	r1, [pc, #484]	@ (8004a04 <CLI_proc+0x660>)
						config.MS8607_use = 1;
 800481e:	4c69      	ldr	r4, [pc, #420]	@ (80049c4 <CLI_proc+0x620>)
						MS8607.sensor_use = 1;
 8004820:	780b      	ldrb	r3, [r1, #0]
						config.MS8607_use = 1;
 8004822:	7e22      	ldrb	r2, [r4, #24]
						printf("MS8607 sensor enabled\r\n");
 8004824:	4878      	ldr	r0, [pc, #480]	@ (8004a08 <CLI_proc+0x664>)
						config.MS8607_use = 1;
 8004826:	f042 0201 	orr.w	r2, r2, #1
						MS8607.sensor_use = 1;
 800482a:	f043 0302 	orr.w	r3, r3, #2
						config.MS8607_use = 1;
 800482e:	7622      	strb	r2, [r4, #24]
						MS8607.sensor_use = 1;
 8004830:	700b      	strb	r3, [r1, #0]
						printf("MS8607 sensor enabled\r\n");
 8004832:	f00b ffcf 	bl	80107d4 <puts>
						Save_config();
 8004836:	f7fc fde5 	bl	8001404 <Save_config>
					if((p = find("disable")))
 800483a:	4874      	ldr	r0, [pc, #464]	@ (8004a0c <CLI_proc+0x668>)
 800483c:	f7ff fb9c 	bl	8003f78 <find>
 8004840:	b170      	cbz	r0, 8004860 <CLI_proc+0x4bc>
						config.MS8607_use = 0;
 8004842:	4960      	ldr	r1, [pc, #384]	@ (80049c4 <CLI_proc+0x620>)
						MS8607.sensor_use = 0;
 8004844:	4b6f      	ldr	r3, [pc, #444]	@ (8004a04 <CLI_proc+0x660>)
						config.MS8607_use = 0;
 8004846:	7e0c      	ldrb	r4, [r1, #24]
						MS8607.sensor_use = 0;
 8004848:	781a      	ldrb	r2, [r3, #0]
						printf("MS8607 sensor disabled\r\n");
 800484a:	4871      	ldr	r0, [pc, #452]	@ (8004a10 <CLI_proc+0x66c>)
						MS8607.sensor_use = 0;
 800484c:	f36f 0241 	bfc	r2, #1, #1
						config.MS8607_use = 0;
 8004850:	f36f 0400 	bfc	r4, #0, #1
 8004854:	760c      	strb	r4, [r1, #24]
						MS8607.sensor_use = 0;
 8004856:	701a      	strb	r2, [r3, #0]
						printf("MS8607 sensor disabled\r\n");
 8004858:	f00b ffbc 	bl	80107d4 <puts>
						Save_config();
 800485c:	f7fc fdd2 	bl	8001404 <Save_config>
					if((p = find("conf ")))
 8004860:	486c      	ldr	r0, [pc, #432]	@ (8004a14 <CLI_proc+0x670>)
 8004862:	f7ff fb89 	bl	8003f78 <find>
 8004866:	b1f0      	cbz	r0, 80048a6 <CLI_proc+0x502>
			            getval(clibuf+16, &tmp, 0, 5);
 8004868:	2305      	movs	r3, #5
 800486a:	2200      	movs	r2, #0
 800486c:	a904      	add	r1, sp, #16
						int32_t tmp = -1;
 800486e:	f04f 34ff 	mov.w	r4, #4294967295
			            getval(clibuf+16, &tmp, 0, 5);
 8004872:	4869      	ldr	r0, [pc, #420]	@ (8004a18 <CLI_proc+0x674>)
						int32_t tmp = -1;
 8004874:	9404      	str	r4, [sp, #16]
			            getval(clibuf+16, &tmp, 0, 5);
 8004876:	f7ff fba9 	bl	8003fcc <getval>
			            config.MS8607_conf = tmp;
 800487a:	4952      	ldr	r1, [pc, #328]	@ (80049c4 <CLI_proc+0x620>)
			            MS8607.sensor_conf = tmp;
 800487c:	4b61      	ldr	r3, [pc, #388]	@ (8004a04 <CLI_proc+0x660>)
			            config.MS8607_conf = tmp;
 800487e:	9c04      	ldr	r4, [sp, #16]
 8004880:	7e08      	ldrb	r0, [r1, #24]
			            MS8607.sensor_conf = tmp;
 8004882:	781a      	ldrb	r2, [r3, #0]
			            config.MS8607_conf = tmp;
 8004884:	f004 050f 	and.w	r5, r4, #15
 8004888:	f365 0044 	bfi	r0, r5, #1, #4
			            MS8607.sensor_conf = tmp;
 800488c:	f365 0285 	bfi	r2, r5, #2, #4
			            config.MS8607_conf = tmp;
 8004890:	7608      	strb	r0, [r1, #24]
			            MS8607_osr(tmp);
 8004892:	b2e0      	uxtb	r0, r4
			            MS8607.sensor_conf = tmp;
 8004894:	701a      	strb	r2, [r3, #0]
			            MS8607_osr(tmp);
 8004896:	f002 f827 	bl	80068e8 <MS8607_osr>
			            printf("MS8607 config %li\r\n",tmp);
 800489a:	4621      	mov	r1, r4
 800489c:	485f      	ldr	r0, [pc, #380]	@ (8004a1c <CLI_proc+0x678>)
 800489e:	f00b ff31 	bl	8010704 <iprintf>
						Save_config();
 80048a2:	f7fc fdaf 	bl	8001404 <Save_config>
					if((p = find("temperature ")))
 80048a6:	485e      	ldr	r0, [pc, #376]	@ (8004a20 <CLI_proc+0x67c>)
 80048a8:	f7ff fb66 	bl	8003f78 <find>
 80048ac:	4604      	mov	r4, r0
 80048ae:	b118      	cbz	r0, 80048b8 <CLI_proc+0x514>
						if(p == clibuf+23)
 80048b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004a24 <CLI_proc+0x680>)
 80048b2:	4298      	cmp	r0, r3
 80048b4:	f000 8480 	beq.w	80051b8 <CLI_proc+0xe14>
					if((p = find("press ")))
 80048b8:	485b      	ldr	r0, [pc, #364]	@ (8004a28 <CLI_proc+0x684>)
 80048ba:	f7ff fb5d 	bl	8003f78 <find>
 80048be:	4604      	mov	r4, r0
 80048c0:	b118      	cbz	r0, 80048ca <CLI_proc+0x526>
						if(p == clibuf+17)
 80048c2:	4b5a      	ldr	r3, [pc, #360]	@ (8004a2c <CLI_proc+0x688>)
 80048c4:	4298      	cmp	r0, r3
 80048c6:	f000 8501 	beq.w	80052cc <CLI_proc+0xf28>
					if((p = find("hum ")))
 80048ca:	4859      	ldr	r0, [pc, #356]	@ (8004a30 <CLI_proc+0x68c>)
 80048cc:	f7ff fb54 	bl	8003f78 <find>
 80048d0:	4604      	mov	r4, r0
 80048d2:	2800      	cmp	r0, #0
 80048d4:	f43f ad75 	beq.w	80043c2 <CLI_proc+0x1e>
						if(p == clibuf+15)
 80048d8:	4b56      	ldr	r3, [pc, #344]	@ (8004a34 <CLI_proc+0x690>)
 80048da:	4298      	cmp	r0, r3
 80048dc:	f47f ad71 	bne.w	80043c2 <CLI_proc+0x1e>
							if((strstr(clibuf+15, "offset ")))
 80048e0:	4955      	ldr	r1, [pc, #340]	@ (8004a38 <CLI_proc+0x694>)
 80048e2:	f00c f911 	bl	8010b08 <strstr>
 80048e6:	b1b8      	cbz	r0, 8004918 <CLI_proc+0x574>
						        getFloat(clibuf+22, &tmp, MIN_OFFSET, MAX_OFFSET);
 80048e8:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80048ec:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 80048f0:	a904      	add	r1, sp, #16
 80048f2:	1de0      	adds	r0, r4, #7
 80048f4:	f7ff fbd0 	bl	8004098 <getFloat>
						        MS8607.hum.offset = tmp;
 80048f8:	4b42      	ldr	r3, [pc, #264]	@ (8004a04 <CLI_proc+0x660>)
						        config.MS8607_h_offset = tmp;
 80048fa:	4932      	ldr	r1, [pc, #200]	@ (80049c4 <CLI_proc+0x620>)
 80048fc:	9804      	ldr	r0, [sp, #16]
						        MS8607.hum.offset = tmp;
 80048fe:	f8c3 000f 	str.w	r0, [r3, #15]
						        config.MS8607_h_offset = tmp;
 8004902:	f8c1 001d 	str.w	r0, [r1, #29]
						        printf("MS8607 humidity offset %.6f\r\n",tmp);
 8004906:	f7fb fe5f 	bl	80005c8 <__aeabi_f2d>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	484b      	ldr	r0, [pc, #300]	@ (8004a3c <CLI_proc+0x698>)
 8004910:	f00b fef8 	bl	8010704 <iprintf>
						        Save_config();
 8004914:	f7fc fd76 	bl	8001404 <Save_config>
							if((strstr(clibuf+15, "en")))
 8004918:	4949      	ldr	r1, [pc, #292]	@ (8004a40 <CLI_proc+0x69c>)
 800491a:	4846      	ldr	r0, [pc, #280]	@ (8004a34 <CLI_proc+0x690>)
 800491c:	f00c f8f4 	bl	8010b08 <strstr>
 8004920:	b170      	cbz	r0, 8004940 <CLI_proc+0x59c>
								MS8607.hum.use_meas = 1;
 8004922:	4938      	ldr	r1, [pc, #224]	@ (8004a04 <CLI_proc+0x660>)
								config.MS8607_h_use = 1;
 8004924:	4c27      	ldr	r4, [pc, #156]	@ (80049c4 <CLI_proc+0x620>)
								MS8607.hum.use_meas = 1;
 8004926:	7a8b      	ldrb	r3, [r1, #10]
								config.MS8607_h_use = 1;
 8004928:	7e22      	ldrb	r2, [r4, #24]
								printf("MS8607 humidity measure enabled\r\n");
 800492a:	4846      	ldr	r0, [pc, #280]	@ (8004a44 <CLI_proc+0x6a0>)
								config.MS8607_h_use = 1;
 800492c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
								MS8607.hum.use_meas = 1;
 8004930:	f043 0301 	orr.w	r3, r3, #1
								config.MS8607_h_use = 1;
 8004934:	7622      	strb	r2, [r4, #24]
								MS8607.hum.use_meas = 1;
 8004936:	728b      	strb	r3, [r1, #10]
								printf("MS8607 humidity measure enabled\r\n");
 8004938:	f00b ff4c 	bl	80107d4 <puts>
								Save_config();
 800493c:	f7fc fd62 	bl	8001404 <Save_config>
							if((strstr(clibuf+15, "dis")))
 8004940:	4941      	ldr	r1, [pc, #260]	@ (8004a48 <CLI_proc+0x6a4>)
 8004942:	483c      	ldr	r0, [pc, #240]	@ (8004a34 <CLI_proc+0x690>)
 8004944:	f00c f8e0 	bl	8010b08 <strstr>
 8004948:	2800      	cmp	r0, #0
 800494a:	f43f ad3a 	beq.w	80043c2 <CLI_proc+0x1e>
								config.MS8607_h_use = 0;
 800494e:	491d      	ldr	r1, [pc, #116]	@ (80049c4 <CLI_proc+0x620>)
								MS8607.hum.use_meas = 0;
 8004950:	4b2c      	ldr	r3, [pc, #176]	@ (8004a04 <CLI_proc+0x660>)
								config.MS8607_h_use = 0;
 8004952:	7e0c      	ldrb	r4, [r1, #24]
								MS8607.hum.use_meas = 0;
 8004954:	7a9a      	ldrb	r2, [r3, #10]
								printf("MS8607 humidity measure disable\r\n");
 8004956:	483d      	ldr	r0, [pc, #244]	@ (8004a4c <CLI_proc+0x6a8>)
								config.MS8607_h_use = 0;
 8004958:	f36f 1486 	bfc	r4, #6, #1
								MS8607.hum.use_meas = 0;
 800495c:	f36f 0200 	bfc	r2, #0, #1
								config.MS8607_h_use = 0;
 8004960:	760c      	strb	r4, [r1, #24]
								DPS368.press.use_meas = 0;
 8004962:	729a      	strb	r2, [r3, #10]
 8004964:	e2e4      	b.n	8004f30 <CLI_proc+0xb8c>
			printf("Status: %s\r\n", GPRS_ConnectToNetwork("INTERNET", "", "", false) ? "OK":"ERROR");
 8004966:	4a3a      	ldr	r2, [pc, #232]	@ (8004a50 <CLI_proc+0x6ac>)
 8004968:	483a      	ldr	r0, [pc, #232]	@ (8004a54 <CLI_proc+0x6b0>)
 800496a:	4611      	mov	r1, r2
 800496c:	2300      	movs	r3, #0
 800496e:	f7fd f85f 	bl	8001a30 <GPRS_ConnectToNetwork>
 8004972:	4a39      	ldr	r2, [pc, #228]	@ (8004a58 <CLI_proc+0x6b4>)
 8004974:	4b39      	ldr	r3, [pc, #228]	@ (8004a5c <CLI_proc+0x6b8>)
 8004976:	4601      	mov	r1, r0
 8004978:	2900      	cmp	r1, #0
 800497a:	bf0c      	ite	eq
 800497c:	4611      	moveq	r1, r2
 800497e:	4619      	movne	r1, r3
 8004980:	4837      	ldr	r0, [pc, #220]	@ (8004a60 <CLI_proc+0x6bc>)
 8004982:	f00b febf 	bl	8010704 <iprintf>
			printf("Connected to GPRS, IP: %s\r\n", Sim80x.GPRS.LocalIP);
 8004986:	4937      	ldr	r1, [pc, #220]	@ (8004a64 <CLI_proc+0x6c0>)
 8004988:	4837      	ldr	r0, [pc, #220]	@ (8004a68 <CLI_proc+0x6c4>)
 800498a:	e64b      	b.n	8004624 <CLI_proc+0x280>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 800498c:	4837      	ldr	r0, [pc, #220]	@ (8004a6c <CLI_proc+0x6c8>)
	float tempfloat = 0.0;
 800498e:	ed9f 8a38 	vldr	s16, [pc, #224]	@ 8004a70 <CLI_proc+0x6cc>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8004992:	f00b ff1f 	bl	80107d4 <puts>
 8004996:	2200      	movs	r2, #0
 8004998:	2300      	movs	r3, #0
 800499a:	e6d8      	b.n	800474e <CLI_proc+0x3aa>
}
 800499c:	b010      	add	sp, #64	@ 0x40
 800499e:	ecbd 8b02 	vpop	{d8}
 80049a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("gprs stop")==clibuf+9) {GPRS_DeactivatePDPContext(); return;}
 80049a6:	f7fc bffd 	b.w	80019a4 <GPRS_DeactivatePDPContext>
	if(*p == ' ') p++;
 80049aa:	2400      	movs	r4, #0
	for(int i=0; i<maxlen; i++) if((p[i]==13 || p[i]==10) && i<minlen) {printf("Too short\r\n"); return;}	// test dlugosci
 80049ac:	4623      	mov	r3, r4
	if(*p == ' ') p++;
 80049ae:	7822      	ldrb	r2, [r4, #0]
 80049b0:	2a20      	cmp	r2, #32
 80049b2:	bf0c      	ite	eq
 80049b4:	2401      	moveq	r4, #1
 80049b6:	461c      	movne	r4, r3
	for(int i=0; i<maxlen; i++) if((p[i]==13 || p[i]==10) && i<minlen) {printf("Too short\r\n"); return;}	// test dlugosci
 80049b8:	1e60      	subs	r0, r4, #1
			printf("Status: %s\r\n", GPRS_ConnectToNetwork("INTERNET", "", "", false) ? "OK":"ERROR");
 80049ba:	4601      	mov	r1, r0
 80049bc:	e05f      	b.n	8004a7e <CLI_proc+0x6da>
 80049be:	bf00      	nop
 80049c0:	20000d9c 	.word	0x20000d9c
 80049c4:	200019c0 	.word	0x200019c0
 80049c8:	080152c0 	.word	0x080152c0
 80049cc:	0801540c 	.word	0x0801540c
 80049d0:	08015430 	.word	0x08015430
 80049d4:	08015454 	.word	0x08015454
 80049d8:	08015498 	.word	0x08015498
 80049dc:	080154fc 	.word	0x080154fc
 80049e0:	08015514 	.word	0x08015514
 80049e4:	08015538 	.word	0x08015538
 80049e8:	0801554c 	.word	0x0801554c
 80049ec:	08015568 	.word	0x08015568
 80049f0:	08015584 	.word	0x08015584
 80049f4:	080155a0 	.word	0x080155a0
 80049f8:	0801569c 	.word	0x0801569c
 80049fc:	080157c4 	.word	0x080157c4
 8004a00:	080155a8 	.word	0x080155a8
 8004a04:	20001b24 	.word	0x20001b24
 8004a08:	080157cc 	.word	0x080157cc
 8004a0c:	080155c8 	.word	0x080155c8
 8004a10:	080157e4 	.word	0x080157e4
 8004a14:	080155e8 	.word	0x080155e8
 8004a18:	20000da0 	.word	0x20000da0
 8004a1c:	080157fc 	.word	0x080157fc
 8004a20:	08015610 	.word	0x08015610
 8004a24:	20000da7 	.word	0x20000da7
 8004a28:	0801587c 	.word	0x0801587c
 8004a2c:	20000da1 	.word	0x20000da1
 8004a30:	0801575c 	.word	0x0801575c
 8004a34:	20000d9f 	.word	0x20000d9f
 8004a38:	08015620 	.word	0x08015620
 8004a3c:	080158ec 	.word	0x080158ec
 8004a40:	0801564c 	.word	0x0801564c
 8004a44:	0801590c 	.word	0x0801590c
 8004a48:	08015674 	.word	0x08015674
 8004a4c:	08015930 	.word	0x08015930
 8004a50:	08014be4 	.word	0x08014be4
 8004a54:	080152f0 	.word	0x080152f0
 8004a58:	080151bc 	.word	0x080151bc
 8004a5c:	080151b8 	.word	0x080151b8
 8004a60:	080152fc 	.word	0x080152fc
 8004a64:	20000a4a 	.word	0x20000a4a
 8004a68:	0801530c 	.word	0x0801530c
 8004a6c:	08014ab8 	.word	0x08014ab8
 8004a70:	00000000 	.word	0x00000000
	for(int i=0; i<maxlen; i++) if((p[i]==13 || p[i]==10) && i<minlen) {printf("Too short\r\n"); return;}	// test dlugosci
 8004a74:	2a0a      	cmp	r2, #10
 8004a76:	d006      	beq.n	8004a86 <CLI_proc+0x6e2>
 8004a78:	3301      	adds	r3, #1
 8004a7a:	2b30      	cmp	r3, #48	@ 0x30
 8004a7c:	d020      	beq.n	8004ac0 <CLI_proc+0x71c>
 8004a7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004a82:	2a0d      	cmp	r2, #13
 8004a84:	d1f6      	bne.n	8004a74 <CLI_proc+0x6d0>
 8004a86:	2b07      	cmp	r3, #7
 8004a88:	dcf6      	bgt.n	8004a78 <CLI_proc+0x6d4>
 8004a8a:	48b6      	ldr	r0, [pc, #728]	@ (8004d64 <CLI_proc+0x9c0>)
 8004a8c:	f00b fea2 	bl	80107d4 <puts>
 8004a90:	ae04      	add	r6, sp, #16
			printf("Status: %s\r\n", GPRS_ConnectToServer(srv,20390) ? "OK":"ERROR");
 8004a92:	f644 71a6 	movw	r1, #20390	@ 0x4fa6
 8004a96:	4630      	mov	r0, r6
 8004a98:	f7fd f81a 	bl	8001ad0 <GPRS_ConnectToServer>
 8004a9c:	4ab2      	ldr	r2, [pc, #712]	@ (8004d68 <CLI_proc+0x9c4>)
 8004a9e:	4bb3      	ldr	r3, [pc, #716]	@ (8004d6c <CLI_proc+0x9c8>)
 8004aa0:	4601      	mov	r1, r0
 8004aa2:	2900      	cmp	r1, #0
 8004aa4:	bf0c      	ite	eq
 8004aa6:	4611      	moveq	r1, r2
 8004aa8:	4619      	movne	r1, r3
 8004aaa:	48b1      	ldr	r0, [pc, #708]	@ (8004d70 <CLI_proc+0x9cc>)
 8004aac:	f00b fe2a 	bl	8010704 <iprintf>
			return;
 8004ab0:	e487      	b.n	80043c2 <CLI_proc+0x1e>
}
 8004ab2:	b010      	add	sp, #64	@ 0x40
 8004ab4:	ecbd 8b02 	vpop	{d8}
 8004ab8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("gprs close")==clibuf+10) {GPRS_DisconnectFromServer(); return;}
 8004abc:	f7fd b840 	b.w	8001b40 <GPRS_DisconnectFromServer>
 8004ac0:	ae04      	add	r6, sp, #16
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	342f      	adds	r4, #47	@ 0x2f
 8004ac6:	e003      	b.n	8004ad0 <CLI_proc+0x72c>
		if(p[i] == 13 || p[i] == 10) {dst[i] = 0; break;}
 8004ac8:	2b0a      	cmp	r3, #10
 8004aca:	d008      	beq.n	8004ade <CLI_proc+0x73a>
	for(int i=0; i<maxlen; i++)
 8004acc:	4284      	cmp	r4, r0
 8004ace:	d008      	beq.n	8004ae2 <CLI_proc+0x73e>
		dst[i] = p[i];
 8004ad0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
		if(p[i] == 13 || p[i] == 10) {dst[i] = 0; break;}
 8004ad4:	2b0d      	cmp	r3, #13
		dst[i] = p[i];
 8004ad6:	460d      	mov	r5, r1
 8004ad8:	f801 3b01 	strb.w	r3, [r1], #1
		if(p[i] == 13 || p[i] == 10) {dst[i] = 0; break;}
 8004adc:	d1f4      	bne.n	8004ac8 <CLI_proc+0x724>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	702b      	strb	r3, [r5, #0]
	printf("%s: %s\r\n", nam, dst);
 8004ae2:	4632      	mov	r2, r6
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	48a3      	ldr	r0, [pc, #652]	@ (8004d74 <CLI_proc+0x9d0>)
 8004ae8:	f00b fe0c 	bl	8010704 <iprintf>
 8004aec:	e7d1      	b.n	8004a92 <CLI_proc+0x6ee>
			printf("Status: %s\r\n", GPRS_SendString("Test Wysylania przez GPRS\r\n") ? "OK":"ERROR");
 8004aee:	48a2      	ldr	r0, [pc, #648]	@ (8004d78 <CLI_proc+0x9d4>)
 8004af0:	f7fd f840 	bl	8001b74 <GPRS_SendString>
 8004af4:	4a9c      	ldr	r2, [pc, #624]	@ (8004d68 <CLI_proc+0x9c4>)
 8004af6:	4b9d      	ldr	r3, [pc, #628]	@ (8004d6c <CLI_proc+0x9c8>)
 8004af8:	4601      	mov	r1, r0
 8004afa:	2900      	cmp	r1, #0
 8004afc:	bf0c      	ite	eq
 8004afe:	4611      	moveq	r1, r2
 8004b00:	4619      	movne	r1, r3
 8004b02:	489b      	ldr	r0, [pc, #620]	@ (8004d70 <CLI_proc+0x9cc>)
 8004b04:	e58e      	b.n	8004624 <CLI_proc+0x280>
}
 8004b06:	b010      	add	sp, #64	@ 0x40
 8004b08:	ecbd 8b02 	vpop	{d8}
 8004b0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("gps get")==clibuf+7) {StartReadGps(); return;}
 8004b10:	f003 be4c 	b.w	80087ac <StartReadGps>
															 (int)Sim80x.GPS.Alt, Sim80x.GPS.SatInUse);
 8004b14:	4999      	ldr	r1, [pc, #612]	@ (8004d7c <CLI_proc+0x9d8>)
			printf("Lat: %d, Lon: %d, Alt: %d, Sat: %d\r\n", (int)Sim80x.GPS.Lat, (int)Sim80x.GPS.Lon,
 8004b16:	489a      	ldr	r0, [pc, #616]	@ (8004d80 <CLI_proc+0x9dc>)
 8004b18:	f891 4b4c 	ldrb.w	r4, [r1, #2892]	@ 0xb4c
 8004b1c:	f501 6134 	add.w	r1, r1, #2880	@ 0xb40
 8004b20:	c90e      	ldmia	r1, {r1, r2, r3}
 8004b22:	9400      	str	r4, [sp, #0]
 8004b24:	f00b fdee 	bl	8010704 <iprintf>
			return;
 8004b28:	e44b      	b.n	80043c2 <CLI_proc+0x1e>
	            getval(p, &tmp, 15, 1440);
 8004b2a:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
				int32_t tmp = -1;
 8004b2e:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 15, 1440);
 8004b32:	220f      	movs	r2, #15
 8004b34:	a904      	add	r1, sp, #16
				int32_t tmp = -1;
 8004b36:	9404      	str	r4, [sp, #16]
	            getval(p, &tmp, 15, 1440);
 8004b38:	f7ff fa48 	bl	8003fcc <getval>
				if(tmp >= 15) {
 8004b3c:	9b04      	ldr	r3, [sp, #16]
 8004b3e:	2b0e      	cmp	r3, #14
 8004b40:	f77f ac3f 	ble.w	80043c2 <CLI_proc+0x1e>
					config.tim_interval = ((tmp+7)/15) * 15; 	// zaokraglenie do wielokrotnosci 15
 8004b44:	4a8f      	ldr	r2, [pc, #572]	@ (8004d84 <CLI_proc+0x9e0>)
					printf("New meas interval: %u\r\n", config.tim_interval);
 8004b46:	4890      	ldr	r0, [pc, #576]	@ (8004d88 <CLI_proc+0x9e4>)
					config.tim_interval = ((tmp+7)/15) * 15; 	// zaokraglenie do wielokrotnosci 15
 8004b48:	3307      	adds	r3, #7
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	08db      	lsrs	r3, r3, #3
 8004b50:	4a8e      	ldr	r2, [pc, #568]	@ (8004d8c <CLI_proc+0x9e8>)
 8004b52:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
					printf("New meas interval: %u\r\n", config.tim_interval);
 8004b56:	b299      	uxth	r1, r3
					config.tim_interval = ((tmp+7)/15) * 15; 	// zaokraglenie do wielokrotnosci 15
 8004b58:	8113      	strh	r3, [r2, #8]
					printf("New meas interval: %u\r\n", config.tim_interval);
 8004b5a:	e563      	b.n	8004624 <CLI_proc+0x280>
			Sim80x_GetTime();
 8004b5c:	f7fd fe7e 	bl	800285c <Sim80x_GetTime>
					Sim80x.Gsm.Time.Year, Sim80x.Gsm.Time.Month, Sim80x.Gsm.Time.Day,
 8004b60:	4986      	ldr	r1, [pc, #536]	@ (8004d7c <CLI_proc+0x9d8>)
			printf("GSM time: %04d-%02d-%02d  %02d:%02d:%02d, TZ:%d\r\n",
 8004b62:	488b      	ldr	r0, [pc, #556]	@ (8004d90 <CLI_proc+0x9ec>)
 8004b64:	f991 2656 	ldrsb.w	r2, [r1, #1622]	@ 0x656
 8004b68:	f891 3655 	ldrb.w	r3, [r1, #1621]	@ 0x655
 8004b6c:	f891 4654 	ldrb.w	r4, [r1, #1620]	@ 0x654
 8004b70:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8004b74:	f891 2653 	ldrb.w	r2, [r1, #1619]	@ 0x653
 8004b78:	f891 3652 	ldrb.w	r3, [r1, #1618]	@ 0x652
 8004b7c:	e9cd 2400 	strd	r2, r4, [sp]
 8004b80:	f891 2650 	ldrb.w	r2, [r1, #1616]	@ 0x650
 8004b84:	f8b1 164e 	ldrh.w	r1, [r1, #1614]	@ 0x64e
 8004b88:	f00b fdbc 	bl	8010704 <iprintf>
			return;
 8004b8c:	e419      	b.n	80043c2 <CLI_proc+0x1e>
	            getval(p, &tmp, 1, 250);
 8004b8e:	23fa      	movs	r3, #250	@ 0xfa
				int32_t tmp = -1;
 8004b90:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 1, 250);
 8004b94:	2201      	movs	r2, #1
 8004b96:	a904      	add	r1, sp, #16
				int32_t tmp = -1;
 8004b98:	9404      	str	r4, [sp, #16]
	            getval(p, &tmp, 1, 250);
 8004b9a:	f7ff fa17 	bl	8003fcc <getval>
				if(tmp > 0) {
 8004b9e:	9b04      	ldr	r3, [sp, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f77f ac0e 	ble.w	80043c2 <CLI_proc+0x1e>
					config.measures = tmp;
 8004ba6:	4a79      	ldr	r2, [pc, #484]	@ (8004d8c <CLI_proc+0x9e8>)
					printf("New meas count: %u\r\n", config.measures);
 8004ba8:	487a      	ldr	r0, [pc, #488]	@ (8004d94 <CLI_proc+0x9f0>)
					config.measures = tmp;
 8004baa:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
					printf("New meas count: %u\r\n", config.measures);
 8004bae:	b2d9      	uxtb	r1, r3
 8004bb0:	e538      	b.n	8004624 <CLI_proc+0x280>
				int32_t tmp = -1;
 8004bb2:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 0, 2);
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	462a      	mov	r2, r5
 8004bba:	a904      	add	r1, sp, #16
				int32_t tmp = -1;
 8004bbc:	9404      	str	r4, [sp, #16]
	            getval(p, &tmp, 0, 2);
 8004bbe:	f7ff fa05 	bl	8003fcc <getval>
				if(tmp >= 1) {
 8004bc2:	9c04      	ldr	r4, [sp, #16]
 8004bc4:	2c00      	cmp	r4, #0
 8004bc6:	f340 808e 	ble.w	8004ce6 <CLI_proc+0x942>
					if(tmp==1) printf("Display type TXT\r\n");
 8004bca:	2c01      	cmp	r4, #1
 8004bcc:	f000 809b 	beq.w	8004d06 <CLI_proc+0x962>
					else if(tmp==2) { printf("Display type CSV"); printCSVheader();}
 8004bd0:	2c02      	cmp	r4, #2
 8004bd2:	f000 809c 	beq.w	8004d0e <CLI_proc+0x96a>
					csvcnt = 0;
 8004bd6:	4b70      	ldr	r3, [pc, #448]	@ (8004d98 <CLI_proc+0x9f4>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	801a      	strh	r2, [r3, #0]
				config.disp_type = tmp;
 8004bdc:	4b6b      	ldr	r3, [pc, #428]	@ (8004d8c <CLI_proc+0x9e8>)
 8004bde:	79da      	ldrb	r2, [r3, #7]
 8004be0:	f364 0243 	bfi	r2, r4, #1, #3
 8004be4:	71da      	strb	r2, [r3, #7]
				return;
 8004be6:	f7ff bbec 	b.w	80043c2 <CLI_proc+0x1e>
	            getval(p, &tmp, 0, 3);
 8004bea:	2303      	movs	r3, #3
				int32_t tmp = -1;
 8004bec:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 0, 3);
 8004bf0:	4632      	mov	r2, r6
 8004bf2:	a904      	add	r1, sp, #16
				int32_t tmp = -1;
 8004bf4:	9404      	str	r4, [sp, #16]
	            getval(p, &tmp, 0, 3);
 8004bf6:	f7ff f9e9 	bl	8003fcc <getval>
				if(tmp >= 0) {
 8004bfa:	9b04      	ldr	r3, [sp, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f6ff abe0 	blt.w	80043c2 <CLI_proc+0x1e>
					config.sendFormat = tmp;
 8004c02:	4a62      	ldr	r2, [pc, #392]	@ (8004d8c <CLI_proc+0x9e8>)
 8004c04:	f892 103c 	ldrb.w	r1, [r2, #60]	@ 0x3c
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	f363 0101 	bfi	r1, r3, #0, #2
					switch(config.sendFormat) {
 8004c10:	2b02      	cmp	r3, #2
					config.sendFormat = tmp;
 8004c12:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c
					switch(config.sendFormat) {
 8004c16:	f000 80f2 	beq.w	8004dfe <CLI_proc+0xa5a>
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	f000 80ed 	beq.w	8004dfa <CLI_proc+0xa56>
 8004c20:	2b01      	cmp	r3, #1
					case 0: printf("Send OFF\r\n"); break;
 8004c22:	bf14      	ite	ne
 8004c24:	485d      	ldrne	r0, [pc, #372]	@ (8004d9c <CLI_proc+0x9f8>)
					case 1: printf("Send format: Normal\r\n"); break;
 8004c26:	485e      	ldreq	r0, [pc, #376]	@ (8004da0 <CLI_proc+0x9fc>)
}
 8004c28:	b010      	add	sp, #64	@ 0x40
 8004c2a:	ecbd 8b02 	vpop	{d8}
 8004c2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
					case 3: printf("Send format: Normal+MQTT\r\n"); break;
 8004c32:	f00b bdcf 	b.w	80107d4 <puts>
						config.disp_type = 1;
 8004c36:	4c55      	ldr	r4, [pc, #340]	@ (8004d8c <CLI_proc+0x9e8>)
						int32_t tmp = -1;
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
						getval(clibuf+15, &tmp, 1, 500);
 8004c3c:	a904      	add	r1, sp, #16
						int32_t tmp = -1;
 8004c3e:	9004      	str	r0, [sp, #16]
						getval(clibuf+15, &tmp, 1, 500);
 8004c40:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004c44:	2201      	movs	r2, #1
 8004c46:	f105 000a 	add.w	r0, r5, #10
 8004c4a:	f7ff f9bf 	bl	8003fcc <getval>
						config.disp_type = 1;
 8004c4e:	79e2      	ldrb	r2, [r4, #7]
						meas_count = tmp;
 8004c50:	9904      	ldr	r1, [sp, #16]
 8004c52:	4d54      	ldr	r5, [pc, #336]	@ (8004da4 <CLI_proc+0xa00>)
						meas_start = 1;
 8004c54:	4854      	ldr	r0, [pc, #336]	@ (8004da8 <CLI_proc+0xa04>)
						meas_count = tmp;
 8004c56:	8029      	strh	r1, [r5, #0]
						config.disp_type = 1;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f363 0243 	bfi	r2, r3, #1, #3
 8004c5e:	71e2      	strb	r2, [r4, #7]
						meas_cont_mode = 0;
 8004c60:	4a52      	ldr	r2, [pc, #328]	@ (8004dac <CLI_proc+0xa08>)
						meas_start = 1;
 8004c62:	6003      	str	r3, [r0, #0]
						printf("Start %i measures, TXT output\r\n", meas_count);
 8004c64:	b289      	uxth	r1, r1
						meas_cont_mode = 0;
 8004c66:	2300      	movs	r3, #0
						printf("Start %i measures, TXT output\r\n", meas_count);
 8004c68:	4851      	ldr	r0, [pc, #324]	@ (8004db0 <CLI_proc+0xa0c>)
						meas_cont_mode = 0;
 8004c6a:	7013      	strb	r3, [r2, #0]
						printf("Start %i measures, TXT output\r\n", meas_count);
 8004c6c:	f00b fd4a 	bl	8010704 <iprintf>
						ReinitTimer(config.tim_interval);
 8004c70:	e494      	b.n	800459c <CLI_proc+0x1f8>
						int32_t tmp = -1;
 8004c72:	f04f 30ff 	mov.w	r0, #4294967295
						getval(clibuf+15, &tmp, 1, 500);
 8004c76:	a904      	add	r1, sp, #16
						int32_t tmp = -1;
 8004c78:	9004      	str	r0, [sp, #16]
						getval(clibuf+15, &tmp, 1, 500);
 8004c7a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f105 000a 	add.w	r0, r5, #10
 8004c84:	f7ff f9a2 	bl	8003fcc <getval>
						meas_cont_mode = 0;
 8004c88:	4b48      	ldr	r3, [pc, #288]	@ (8004dac <CLI_proc+0xa08>)
						meas_count = tmp;
 8004c8a:	4a46      	ldr	r2, [pc, #280]	@ (8004da4 <CLI_proc+0xa00>)
						config.disp_type = 2;
 8004c8c:	4c3f      	ldr	r4, [pc, #252]	@ (8004d8c <CLI_proc+0x9e8>)
						meas_count = tmp;
 8004c8e:	9904      	ldr	r1, [sp, #16]
						meas_cont_mode = 0;
 8004c90:	701e      	strb	r6, [r3, #0]
						meas_start = 1;
 8004c92:	4b45      	ldr	r3, [pc, #276]	@ (8004da8 <CLI_proc+0xa04>)
						meas_count = tmp;
 8004c94:	8011      	strh	r1, [r2, #0]
						meas_start = 1;
 8004c96:	2201      	movs	r2, #1
 8004c98:	601a      	str	r2, [r3, #0]
						config.disp_type = 2;
 8004c9a:	79e3      	ldrb	r3, [r4, #7]
						printf("Start %i measures, CSV output\r\n", meas_count);
 8004c9c:	4845      	ldr	r0, [pc, #276]	@ (8004db4 <CLI_proc+0xa10>)
						config.disp_type = 2;
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f362 0343 	bfi	r3, r2, #1, #3
						printf("Start %i measures, CSV output\r\n", meas_count);
 8004ca4:	b289      	uxth	r1, r1
						config.disp_type = 2;
 8004ca6:	71e3      	strb	r3, [r4, #7]
						printf("Start %i measures, CSV output\r\n", meas_count);
 8004ca8:	f00b fd2c 	bl	8010704 <iprintf>
						csvcnt = 0;
 8004cac:	e472      	b.n	8004594 <CLI_proc+0x1f0>
				getString(p, config.serverIP, 1, sizeof(config.serverIP), "Server IP");
 8004cae:	4b42      	ldr	r3, [pc, #264]	@ (8004db8 <CLI_proc+0xa14>)
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	4942      	ldr	r1, [pc, #264]	@ (8004dbc <CLI_proc+0xa18>)
 8004cb4:	2330      	movs	r3, #48	@ 0x30
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f7ff f9b4 	bl	8004024 <getString>
	            return;
 8004cbc:	f7ff bb81 	b.w	80043c2 <CLI_proc+0x1e>
	            getval(p, &tmp, 0, 65535);
 8004cc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
				int32_t tmp = -1;
 8004cc4:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 0, 65535);
 8004cc8:	462a      	mov	r2, r5
 8004cca:	a904      	add	r1, sp, #16
				int32_t tmp = -1;
 8004ccc:	9404      	str	r4, [sp, #16]
	            getval(p, &tmp, 0, 65535);
 8004cce:	f7ff f97d 	bl	8003fcc <getval>
				if(tmp >= 0) {
 8004cd2:	9b04      	ldr	r3, [sp, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f6ff ab74 	blt.w	80043c2 <CLI_proc+0x1e>
					config.serverPort = tmp;
 8004cda:	4a2c      	ldr	r2, [pc, #176]	@ (8004d8c <CLI_proc+0x9e8>)
					printf("Server port: %u\r\n", config.serverPort);
 8004cdc:	4838      	ldr	r0, [pc, #224]	@ (8004dc0 <CLI_proc+0xa1c>)
					config.serverPort = tmp;
 8004cde:	f8a2 307d 	strh.w	r3, [r2, #125]	@ 0x7d
					printf("Server port: %u\r\n", config.serverPort);
 8004ce2:	b299      	uxth	r1, r3
 8004ce4:	e49e      	b.n	8004624 <CLI_proc+0x280>
				else {printf("Silent mode\r\n");}
 8004ce6:	4837      	ldr	r0, [pc, #220]	@ (8004dc4 <CLI_proc+0xa20>)
 8004ce8:	f00b fd74 	bl	80107d4 <puts>
 8004cec:	e776      	b.n	8004bdc <CLI_proc+0x838>
								config.disp_type = 1;
 8004cee:	4c27      	ldr	r4, [pc, #156]	@ (8004d8c <CLI_proc+0x9e8>)
								meas_cont_mode = 1;
 8004cf0:	492e      	ldr	r1, [pc, #184]	@ (8004dac <CLI_proc+0xa08>)
								config.disp_type = 1;
 8004cf2:	79e3      	ldrb	r3, [r4, #7]
								printf("Start continuous measurement, TXT format\r\n");
 8004cf4:	4834      	ldr	r0, [pc, #208]	@ (8004dc8 <CLI_proc+0xa24>)
								meas_cont_mode = 1;
 8004cf6:	2201      	movs	r2, #1
								config.disp_type = 1;
 8004cf8:	f362 0343 	bfi	r3, r2, #1, #3
								meas_cont_mode = 1;
 8004cfc:	700a      	strb	r2, [r1, #0]
								config.disp_type = 1;
 8004cfe:	71e3      	strb	r3, [r4, #7]
								printf("Start continuous measurement, TXT format\r\n");
 8004d00:	f00b fd68 	bl	80107d4 <puts>
								ReinitTimer(config.tim_interval);
 8004d04:	e44a      	b.n	800459c <CLI_proc+0x1f8>
					if(tmp==1) printf("Display type TXT\r\n");
 8004d06:	4831      	ldr	r0, [pc, #196]	@ (8004dcc <CLI_proc+0xa28>)
 8004d08:	f00b fd64 	bl	80107d4 <puts>
 8004d0c:	e763      	b.n	8004bd6 <CLI_proc+0x832>
					else if(tmp==2) { printf("Display type CSV"); printCSVheader();}
 8004d0e:	4830      	ldr	r0, [pc, #192]	@ (8004dd0 <CLI_proc+0xa2c>)
 8004d10:	f00b fcf8 	bl	8010704 <iprintf>
 8004d14:	f002 fc94 	bl	8007640 <printCSVheader>
 8004d18:	e75d      	b.n	8004bd6 <CLI_proc+0x832>
	            getval(p, &tmp, 0, 65535);
 8004d1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
				int32_t tmp = -1;
 8004d1e:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 0, 65535);
 8004d22:	2200      	movs	r2, #0
 8004d24:	a904      	add	r1, sp, #16
				int32_t tmp = -1;
 8004d26:	9404      	str	r4, [sp, #16]
	            getval(p, &tmp, 0, 65535);
 8004d28:	f7ff f950 	bl	8003fcc <getval>
				if(tmp >= 0) {
 8004d2c:	9b04      	ldr	r3, [sp, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f6ff ab47 	blt.w	80043c2 <CLI_proc+0x1e>
					config.mqttPort = tmp;
 8004d34:	4a15      	ldr	r2, [pc, #84]	@ (8004d8c <CLI_proc+0x9e8>)
					printf("MQTT port: %u\r\n", config.mqttPort);
 8004d36:	4827      	ldr	r0, [pc, #156]	@ (8004dd4 <CLI_proc+0xa30>)
					config.mqttPort = tmp;
 8004d38:	f8a2 30af 	strh.w	r3, [r2, #175]	@ 0xaf
					printf("MQTT port: %u\r\n", config.mqttPort);
 8004d3c:	b299      	uxth	r1, r3
 8004d3e:	e471      	b.n	8004624 <CLI_proc+0x280>
				getString(p, config.mqttIP, 1, sizeof(config.mqttIP), "MQTT IP");
 8004d40:	4b25      	ldr	r3, [pc, #148]	@ (8004dd8 <CLI_proc+0xa34>)
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	4925      	ldr	r1, [pc, #148]	@ (8004ddc <CLI_proc+0xa38>)
 8004d46:	2330      	movs	r3, #48	@ 0x30
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f7ff f96b 	bl	8004024 <getString>
	            return;
 8004d4e:	f7ff bb38 	b.w	80043c2 <CLI_proc+0x1e>
				getString(p, config.mqttPass, 1, sizeof(config.mqttPass), "MQTT Password");
 8004d52:	4b23      	ldr	r3, [pc, #140]	@ (8004de0 <CLI_proc+0xa3c>)
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	4923      	ldr	r1, [pc, #140]	@ (8004de4 <CLI_proc+0xa40>)
 8004d58:	2310      	movs	r3, #16
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f7ff f962 	bl	8004024 <getString>
	            return;
 8004d60:	f7ff bb2f 	b.w	80043c2 <CLI_proc+0x1e>
 8004d64:	08014ac4 	.word	0x08014ac4
 8004d68:	080151bc 	.word	0x080151bc
 8004d6c:	080151b8 	.word	0x080151b8
 8004d70:	080152fc 	.word	0x080152fc
 8004d74:	08014ad0 	.word	0x08014ad0
 8004d78:	0801535c 	.word	0x0801535c
 8004d7c:	20000230 	.word	0x20000230
 8004d80:	0801539c 	.word	0x0801539c
 8004d84:	88888889 	.word	0x88888889
 8004d88:	08015418 	.word	0x08015418
 8004d8c:	200019c0 	.word	0x200019c0
 8004d90:	080153d0 	.word	0x080153d0
 8004d94:	0801543c 	.word	0x0801543c
 8004d98:	20001618 	.word	0x20001618
 8004d9c:	080154a8 	.word	0x080154a8
 8004da0:	080154b4 	.word	0x080154b4
 8004da4:	200019b8 	.word	0x200019b8
 8004da8:	20001990 	.word	0x20001990
 8004dac:	200019b6 	.word	0x200019b6
 8004db0:	08015c0c 	.word	0x08015c0c
 8004db4:	08015c34 	.word	0x08015c34
 8004db8:	08015508 	.word	0x08015508
 8004dbc:	20001a0d 	.word	0x20001a0d
 8004dc0:	08015524 	.word	0x08015524
 8004dc4:	08015488 	.word	0x08015488
 8004dc8:	08015c60 	.word	0x08015c60
 8004dcc:	08015460 	.word	0x08015460
 8004dd0:	08015474 	.word	0x08015474
 8004dd4:	08015558 	.word	0x08015558
 8004dd8:	08015544 	.word	0x08015544
 8004ddc:	20001a3f 	.word	0x20001a3f
 8004de0:	08015590 	.word	0x08015590
 8004de4:	20001a81 	.word	0x20001a81
				getString(p, config.mqttUser, 1, sizeof(config.mqttUser), "MQTT Username");
 8004de8:	4b56      	ldr	r3, [pc, #344]	@ (8004f44 <CLI_proc+0xba0>)
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	4956      	ldr	r1, [pc, #344]	@ (8004f48 <CLI_proc+0xba4>)
 8004dee:	2310      	movs	r3, #16
 8004df0:	2201      	movs	r2, #1
 8004df2:	f7ff f917 	bl	8004024 <getString>
	            return;
 8004df6:	f7ff bae4 	b.w	80043c2 <CLI_proc+0x1e>
					case 3: printf("Send format: Normal+MQTT\r\n"); break;
 8004dfa:	4854      	ldr	r0, [pc, #336]	@ (8004f4c <CLI_proc+0xba8>)
 8004dfc:	e714      	b.n	8004c28 <CLI_proc+0x884>
					case 2: printf("Send format: MQTT\r\n"); break;
 8004dfe:	4854      	ldr	r0, [pc, #336]	@ (8004f50 <CLI_proc+0xbac>)
 8004e00:	e712      	b.n	8004c28 <CLI_proc+0x884>
					if((p = find("enable")))
 8004e02:	4854      	ldr	r0, [pc, #336]	@ (8004f54 <CLI_proc+0xbb0>)
 8004e04:	f7ff f8b8 	bl	8003f78 <find>
 8004e08:	b170      	cbz	r0, 8004e28 <CLI_proc+0xa84>
						config.TMP117_use = 1;
 8004e0a:	4953      	ldr	r1, [pc, #332]	@ (8004f58 <CLI_proc+0xbb4>)
						TMP117.sensor_use = 1;
 8004e0c:	4a53      	ldr	r2, [pc, #332]	@ (8004f5c <CLI_proc+0xbb8>)
						config.TMP117_use = 1;
 8004e0e:	7a8b      	ldrb	r3, [r1, #10]
						printf("TMP117 sensor enabled\r\n");
 8004e10:	4853      	ldr	r0, [pc, #332]	@ (8004f60 <CLI_proc+0xbbc>)
						config.TMP117_use = 1;
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	728b      	strb	r3, [r1, #10]
						TMP117.sensor_use = 1;
 8004e18:	7813      	ldrb	r3, [r2, #0]
 8004e1a:	f043 0302 	orr.w	r3, r3, #2
 8004e1e:	7013      	strb	r3, [r2, #0]
						printf("TMP117 sensor enabled\r\n");
 8004e20:	f00b fcd8 	bl	80107d4 <puts>
						Save_config();
 8004e24:	f7fc faee 	bl	8001404 <Save_config>
					if((p = find("disable")))
 8004e28:	484e      	ldr	r0, [pc, #312]	@ (8004f64 <CLI_proc+0xbc0>)
 8004e2a:	f7ff f8a5 	bl	8003f78 <find>
 8004e2e:	b170      	cbz	r0, 8004e4e <CLI_proc+0xaaa>
						config.TMP117_use = 0;
 8004e30:	4a49      	ldr	r2, [pc, #292]	@ (8004f58 <CLI_proc+0xbb4>)
						TMP117.sensor_use = 0;
 8004e32:	4b4a      	ldr	r3, [pc, #296]	@ (8004f5c <CLI_proc+0xbb8>)
						config.TMP117_use = 0;
 8004e34:	7a91      	ldrb	r1, [r2, #10]
						printf("TMP117 sensor disabled\r\n");
 8004e36:	484c      	ldr	r0, [pc, #304]	@ (8004f68 <CLI_proc+0xbc4>)
						config.TMP117_use = 0;
 8004e38:	f36f 0100 	bfc	r1, #0, #1
 8004e3c:	7291      	strb	r1, [r2, #10]
						TMP117.sensor_use = 0;
 8004e3e:	781a      	ldrb	r2, [r3, #0]
 8004e40:	f36f 0241 	bfc	r2, #1, #1
 8004e44:	701a      	strb	r2, [r3, #0]
						printf("TMP117 sensor disabled\r\n");
 8004e46:	f00b fcc5 	bl	80107d4 <puts>
						Save_config();
 8004e4a:	f7fc fadb 	bl	8001404 <Save_config>
					if((p = find("conf ")))
 8004e4e:	4847      	ldr	r0, [pc, #284]	@ (8004f6c <CLI_proc+0xbc8>)
 8004e50:	f7ff f892 	bl	8003f78 <find>
 8004e54:	b1f8      	cbz	r0, 8004e96 <CLI_proc+0xaf2>
						int32_t tmp = -1;
 8004e56:	f04f 30ff 	mov.w	r0, #4294967295
						getval(clibuf+16, &tmp, 0, 3);
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	a904      	add	r1, sp, #16
						int32_t tmp = -1;
 8004e60:	9004      	str	r0, [sp, #16]
						getval(clibuf+16, &tmp, 0, 3);
 8004e62:	4843      	ldr	r0, [pc, #268]	@ (8004f70 <CLI_proc+0xbcc>)
 8004e64:	f7ff f8b2 	bl	8003fcc <getval>
						config.TMP117_conf = tmp;
 8004e68:	493b      	ldr	r1, [pc, #236]	@ (8004f58 <CLI_proc+0xbb4>)
						TMP117.sensor_conf = tmp;
 8004e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8004f5c <CLI_proc+0xbb8>)
						config.TMP117_conf = tmp;
 8004e6c:	9d04      	ldr	r5, [sp, #16]
 8004e6e:	7a8e      	ldrb	r6, [r1, #10]
						TMP117.sensor_conf = tmp;
 8004e70:	781a      	ldrb	r2, [r3, #0]
						config.TMP117_conf = tmp;
 8004e72:	f005 000f 	and.w	r0, r5, #15
						TMP117.sensor_conf = tmp;
 8004e76:	f360 0285 	bfi	r2, r0, #2, #4
						config.TMP117_conf = tmp;
 8004e7a:	f360 0644 	bfi	r6, r0, #1, #4
						TMP117.sensor_conf = tmp;
 8004e7e:	701a      	strb	r2, [r3, #0]
						config.TMP117_conf = tmp;
 8004e80:	728e      	strb	r6, [r1, #10]
						tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 8004e82:	f004 f9b3 	bl	80091ec <tmp117_avr_conf>
 8004e86:	4b3b      	ldr	r3, [pc, #236]	@ (8004f74 <CLI_proc+0xbd0>)
						printf("TMP117 temperature config %li\r\n",tmp);
 8004e88:	4629      	mov	r1, r5
						tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 8004e8a:	8018      	strh	r0, [r3, #0]
						printf("TMP117 temperature config %li\r\n",tmp);
 8004e8c:	483a      	ldr	r0, [pc, #232]	@ (8004f78 <CLI_proc+0xbd4>)
 8004e8e:	f00b fc39 	bl	8010704 <iprintf>
						Save_config();
 8004e92:	f7fc fab7 	bl	8001404 <Save_config>
					if((p = find("temperature ")))
 8004e96:	4839      	ldr	r0, [pc, #228]	@ (8004f7c <CLI_proc+0xbd8>)
 8004e98:	f7ff f86e 	bl	8003f78 <find>
 8004e9c:	4605      	mov	r5, r0
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	f43f aca8 	beq.w	80047f4 <CLI_proc+0x450>
						if(p == clibuf+23)
 8004ea4:	4b36      	ldr	r3, [pc, #216]	@ (8004f80 <CLI_proc+0xbdc>)
 8004ea6:	4298      	cmp	r0, r3
 8004ea8:	f47f aca4 	bne.w	80047f4 <CLI_proc+0x450>
							if((strstr(clibuf+23, "offset ")))
 8004eac:	4935      	ldr	r1, [pc, #212]	@ (8004f84 <CLI_proc+0xbe0>)
 8004eae:	f00b fe2b 	bl	8010b08 <strstr>
 8004eb2:	b1b8      	cbz	r0, 8004ee4 <CLI_proc+0xb40>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 8004eb4:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8004eb8:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8004ebc:	a904      	add	r1, sp, #16
 8004ebe:	1de8      	adds	r0, r5, #7
 8004ec0:	f7ff f8ea 	bl	8004098 <getFloat>
					            TMP117.temp.offset = tmp;
 8004ec4:	4b25      	ldr	r3, [pc, #148]	@ (8004f5c <CLI_proc+0xbb8>)
					            config.TMP117_t_offset = tmp;
 8004ec6:	4924      	ldr	r1, [pc, #144]	@ (8004f58 <CLI_proc+0xbb4>)
 8004ec8:	9804      	ldr	r0, [sp, #16]
					            TMP117.temp.offset = tmp;
 8004eca:	f8c3 0006 	str.w	r0, [r3, #6]
					            config.TMP117_t_offset = tmp;
 8004ece:	f8c1 000b 	str.w	r0, [r1, #11]
					            printf("TMP117 temperature offset %.6f\r\n",tmp);
 8004ed2:	f7fb fb79 	bl	80005c8 <__aeabi_f2d>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	482b      	ldr	r0, [pc, #172]	@ (8004f88 <CLI_proc+0xbe4>)
 8004edc:	f00b fc12 	bl	8010704 <iprintf>
								Save_config();
 8004ee0:	f7fc fa90 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "en")))
 8004ee4:	4929      	ldr	r1, [pc, #164]	@ (8004f8c <CLI_proc+0xbe8>)
 8004ee6:	4826      	ldr	r0, [pc, #152]	@ (8004f80 <CLI_proc+0xbdc>)
 8004ee8:	f00b fe0e 	bl	8010b08 <strstr>
 8004eec:	b170      	cbz	r0, 8004f0c <CLI_proc+0xb68>
								TMP117.temp.use_meas = 1;
 8004eee:	491b      	ldr	r1, [pc, #108]	@ (8004f5c <CLI_proc+0xbb8>)
								config.TMP117_t_use = 1;
 8004ef0:	4c19      	ldr	r4, [pc, #100]	@ (8004f58 <CLI_proc+0xbb4>)
								TMP117.temp.use_meas = 1;
 8004ef2:	784b      	ldrb	r3, [r1, #1]
								config.TMP117_t_use = 1;
 8004ef4:	7aa2      	ldrb	r2, [r4, #10]
								printf("TMP117 temperature measure enabled\r\n");
 8004ef6:	4826      	ldr	r0, [pc, #152]	@ (8004f90 <CLI_proc+0xbec>)
								config.TMP117_t_use = 1;
 8004ef8:	f042 0220 	orr.w	r2, r2, #32
								TMP117.temp.use_meas = 1;
 8004efc:	f043 0301 	orr.w	r3, r3, #1
								config.TMP117_t_use = 1;
 8004f00:	72a2      	strb	r2, [r4, #10]
								TMP117.temp.use_meas = 1;
 8004f02:	704b      	strb	r3, [r1, #1]
								printf("TMP117 temperature measure enabled\r\n");
 8004f04:	f00b fc66 	bl	80107d4 <puts>
								Save_config();
 8004f08:	f7fc fa7c 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "dis")))
 8004f0c:	4921      	ldr	r1, [pc, #132]	@ (8004f94 <CLI_proc+0xbf0>)
 8004f0e:	481c      	ldr	r0, [pc, #112]	@ (8004f80 <CLI_proc+0xbdc>)
 8004f10:	f00b fdfa 	bl	8010b08 <strstr>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	f43f aa54 	beq.w	80043c2 <CLI_proc+0x1e>
								config.TMP117_t_use = 0;
 8004f1a:	490f      	ldr	r1, [pc, #60]	@ (8004f58 <CLI_proc+0xbb4>)
								TMP117.temp.use_meas = 0;
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f5c <CLI_proc+0xbb8>)
								config.TMP117_t_use = 0;
 8004f1e:	7a8c      	ldrb	r4, [r1, #10]
								TMP117.temp.use_meas = 0;
 8004f20:	785a      	ldrb	r2, [r3, #1]
								printf("TMP117 temperature measure disable\r\n");
 8004f22:	481d      	ldr	r0, [pc, #116]	@ (8004f98 <CLI_proc+0xbf4>)
								config.TMP117_t_use = 0;
 8004f24:	f36f 1445 	bfc	r4, #5, #1
								TMP117.temp.use_meas = 0;
 8004f28:	f36f 0200 	bfc	r2, #0, #1
								config.TMP117_t_use = 0;
 8004f2c:	728c      	strb	r4, [r1, #10]
								TMP117.temp.use_meas = 0;
 8004f2e:	705a      	strb	r2, [r3, #1]
								printf("DPS368 pressure measure disable\r\n");
 8004f30:	f00b fc50 	bl	80107d4 <puts>
}
 8004f34:	b010      	add	sp, #64	@ 0x40
 8004f36:	ecbd 8b02 	vpop	{d8}
 8004f3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
								Save_config();
 8004f3e:	f7fc ba61 	b.w	8001404 <Save_config>
 8004f42:	bf00      	nop
 8004f44:	08015574 	.word	0x08015574
 8004f48:	20001a71 	.word	0x20001a71
 8004f4c:	080154e0 	.word	0x080154e0
 8004f50:	080154cc 	.word	0x080154cc
 8004f54:	080155a8 	.word	0x080155a8
 8004f58:	200019c0 	.word	0x200019c0
 8004f5c:	20001b60 	.word	0x20001b60
 8004f60:	080155b0 	.word	0x080155b0
 8004f64:	080155c8 	.word	0x080155c8
 8004f68:	080155d0 	.word	0x080155d0
 8004f6c:	080155e8 	.word	0x080155e8
 8004f70:	20000da0 	.word	0x20000da0
 8004f74:	200019b2 	.word	0x200019b2
 8004f78:	080155f0 	.word	0x080155f0
 8004f7c:	08015610 	.word	0x08015610
 8004f80:	20000da7 	.word	0x20000da7
 8004f84:	08015620 	.word	0x08015620
 8004f88:	08015628 	.word	0x08015628
 8004f8c:	0801564c 	.word	0x0801564c
 8004f90:	08015650 	.word	0x08015650
 8004f94:	08015674 	.word	0x08015674
 8004f98:	08015678 	.word	0x08015678
			if((p = find("bme280 ")))
 8004f9c:	48aa      	ldr	r0, [pc, #680]	@ (8005248 <CLI_proc+0xea4>)
 8004f9e:	f7fe ffeb 	bl	8003f78 <find>
 8004fa2:	b110      	cbz	r0, 8004faa <CLI_proc+0xc06>
				if(p == clibuf+11)
 8004fa4:	42a0      	cmp	r0, r4
 8004fa6:	f000 82ab 	beq.w	8005500 <CLI_proc+0x115c>
			if((p = find("dps368 ")))
 8004faa:	48a8      	ldr	r0, [pc, #672]	@ (800524c <CLI_proc+0xea8>)
 8004fac:	f7fe ffe4 	bl	8003f78 <find>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	f43f aaad 	beq.w	8004510 <CLI_proc+0x16c>
				if(p == clibuf+11)
 8004fb6:	42a0      	cmp	r0, r4
 8004fb8:	f47f aaaa 	bne.w	8004510 <CLI_proc+0x16c>
					if((p = find("enable")))
 8004fbc:	48a4      	ldr	r0, [pc, #656]	@ (8005250 <CLI_proc+0xeac>)
 8004fbe:	f7fe ffdb 	bl	8003f78 <find>
 8004fc2:	b180      	cbz	r0, 8004fe6 <CLI_proc+0xc42>
						config.DPS368_use = 1;
 8004fc4:	48a3      	ldr	r0, [pc, #652]	@ (8005254 <CLI_proc+0xeb0>)
						DPS368.sensor_use = 1;
 8004fc6:	49a4      	ldr	r1, [pc, #656]	@ (8005258 <CLI_proc+0xeb4>)
						config.DPS368_use = 1;
 8004fc8:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
						DPS368.sensor_use = 1;
 8004fcc:	780b      	ldrb	r3, [r1, #0]
						config.DPS368_use = 1;
 8004fce:	f042 0201 	orr.w	r2, r2, #1
						DPS368.sensor_use = 1;
 8004fd2:	f043 0302 	orr.w	r3, r3, #2
						config.DPS368_use = 1;
 8004fd6:	f880 2032 	strb.w	r2, [r0, #50]	@ 0x32
						printf("DPS368 sensor enabled\r\n");
 8004fda:	48a0      	ldr	r0, [pc, #640]	@ (800525c <CLI_proc+0xeb8>)
						DPS368.sensor_use = 1;
 8004fdc:	700b      	strb	r3, [r1, #0]
						printf("DPS368 sensor enabled\r\n");
 8004fde:	f00b fbf9 	bl	80107d4 <puts>
						Save_config();
 8004fe2:	f7fc fa0f 	bl	8001404 <Save_config>
					if((p = find("disable")))
 8004fe6:	489e      	ldr	r0, [pc, #632]	@ (8005260 <CLI_proc+0xebc>)
 8004fe8:	f7fe ffc6 	bl	8003f78 <find>
 8004fec:	b180      	cbz	r0, 8005010 <CLI_proc+0xc6c>
						config.DPS368_use = 0;
 8004fee:	4999      	ldr	r1, [pc, #612]	@ (8005254 <CLI_proc+0xeb0>)
						DPS368.sensor_use = 0;
 8004ff0:	4b99      	ldr	r3, [pc, #612]	@ (8005258 <CLI_proc+0xeb4>)
						config.DPS368_use = 0;
 8004ff2:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
						DPS368.sensor_use = 0;
 8004ff6:	781a      	ldrb	r2, [r3, #0]
						config.DPS368_use = 0;
 8004ff8:	f36f 0000 	bfc	r0, #0, #1
						DPS368.sensor_use = 0;
 8004ffc:	f36f 0241 	bfc	r2, #1, #1
						config.DPS368_use = 0;
 8005000:	f881 0032 	strb.w	r0, [r1, #50]	@ 0x32
						printf("DPS368 sensor disabled\r\n");
 8005004:	4897      	ldr	r0, [pc, #604]	@ (8005264 <CLI_proc+0xec0>)
						DPS368.sensor_use = 0;
 8005006:	701a      	strb	r2, [r3, #0]
						printf("DPS368 sensor disabled\r\n");
 8005008:	f00b fbe4 	bl	80107d4 <puts>
						Save_config();
 800500c:	f7fc f9fa 	bl	8001404 <Save_config>
					if((p = find("conf ")))
 8005010:	4895      	ldr	r0, [pc, #596]	@ (8005268 <CLI_proc+0xec4>)
 8005012:	f7fe ffb1 	bl	8003f78 <find>
 8005016:	b350      	cbz	r0, 800506e <CLI_proc+0xcca>
			            getval(clibuf+16, &tmp, 0, 8);
 8005018:	2308      	movs	r3, #8
 800501a:	2200      	movs	r2, #0
 800501c:	a904      	add	r1, sp, #16
						int32_t tmp = -1;
 800501e:	f04f 35ff 	mov.w	r5, #4294967295
			            getval(clibuf+16, &tmp, 0, 8);
 8005022:	4892      	ldr	r0, [pc, #584]	@ (800526c <CLI_proc+0xec8>)
						int32_t tmp = -1;
 8005024:	9504      	str	r5, [sp, #16]
			            getval(clibuf+16, &tmp, 0, 8);
 8005026:	f7fe ffd1 	bl	8003fcc <getval>
			            config.DPS368_conf = tmp;
 800502a:	4a8a      	ldr	r2, [pc, #552]	@ (8005254 <CLI_proc+0xeb0>)
 800502c:	9d04      	ldr	r5, [sp, #16]
 800502e:	f892 1032 	ldrb.w	r1, [r2, #50]	@ 0x32
			            DPS368.sensor_conf = tmp;
 8005032:	4b89      	ldr	r3, [pc, #548]	@ (8005258 <CLI_proc+0xeb4>)
			            config.DPS368_conf = tmp;
 8005034:	f005 000f 	and.w	r0, r5, #15
 8005038:	f360 0144 	bfi	r1, r0, #1, #4
 800503c:	f882 1032 	strb.w	r1, [r2, #50]	@ 0x32
			            DPS368.sensor_conf = tmp;
 8005040:	781a      	ldrb	r2, [r3, #0]
 8005042:	f360 0285 	bfi	r2, r0, #2, #4
 8005046:	701a      	strb	r2, [r3, #0]
			            dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 8005048:	f001 f82a 	bl	80060a0 <dps368_ovr_config>
 800504c:	4a88      	ldr	r2, [pc, #544]	@ (8005270 <CLI_proc+0xecc>)
 800504e:	4603      	mov	r3, r0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	7013      	strb	r3, [r2, #0]
			            dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 8005054:	4a87      	ldr	r2, [pc, #540]	@ (8005274 <CLI_proc+0xed0>)
 8005056:	2000      	movs	r0, #0
 8005058:	7010      	strb	r0, [r2, #0]
			            dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 800505a:	4a87      	ldr	r2, [pc, #540]	@ (8005278 <CLI_proc+0xed4>)
 800505c:	7013      	strb	r3, [r2, #0]
			            DPS368_temp_correct(dps368_ovr_temp);
 800505e:	f000 fea5 	bl	8005dac <DPS368_temp_correct>
			            printf("DPS368 temperature config %li\r\n",tmp);
 8005062:	4629      	mov	r1, r5
 8005064:	4885      	ldr	r0, [pc, #532]	@ (800527c <CLI_proc+0xed8>)
 8005066:	f00b fb4d 	bl	8010704 <iprintf>
						Save_config();
 800506a:	f7fc f9cb 	bl	8001404 <Save_config>
					if((p = find("temperature ")))
 800506e:	4884      	ldr	r0, [pc, #528]	@ (8005280 <CLI_proc+0xedc>)
 8005070:	f7fe ff82 	bl	8003f78 <find>
 8005074:	4605      	mov	r5, r0
 8005076:	b110      	cbz	r0, 800507e <CLI_proc+0xcda>
						if(p == clibuf+23)
 8005078:	4b82      	ldr	r3, [pc, #520]	@ (8005284 <CLI_proc+0xee0>)
 800507a:	4298      	cmp	r0, r3
 800507c:	d051      	beq.n	8005122 <CLI_proc+0xd7e>
					if((p = find("press ")))
 800507e:	4882      	ldr	r0, [pc, #520]	@ (8005288 <CLI_proc+0xee4>)
 8005080:	f7fe ff7a 	bl	8003f78 <find>
 8005084:	4605      	mov	r5, r0
 8005086:	2800      	cmp	r0, #0
 8005088:	f43f aa42 	beq.w	8004510 <CLI_proc+0x16c>
						if(p == clibuf+17)
 800508c:	4b7f      	ldr	r3, [pc, #508]	@ (800528c <CLI_proc+0xee8>)
 800508e:	4298      	cmp	r0, r3
 8005090:	f47f aa3e 	bne.w	8004510 <CLI_proc+0x16c>
							if((strstr(clibuf+17, "offset ")))
 8005094:	497e      	ldr	r1, [pc, #504]	@ (8005290 <CLI_proc+0xeec>)
 8005096:	f00b fd37 	bl	8010b08 <strstr>
 800509a:	b1b8      	cbz	r0, 80050cc <CLI_proc+0xd28>
					            getFloat(clibuf+24, &tmp, -500, 500);
 800509c:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 8005294 <CLI_proc+0xef0>
 80050a0:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 8005298 <CLI_proc+0xef4>
 80050a4:	a904      	add	r1, sp, #16
 80050a6:	1de8      	adds	r0, r5, #7
 80050a8:	f7fe fff6 	bl	8004098 <getFloat>
					            DPS368.press.offset = tmp;
 80050ac:	4b6a      	ldr	r3, [pc, #424]	@ (8005258 <CLI_proc+0xeb4>)
					            config.DPS368_p_offset = tmp;
 80050ae:	4969      	ldr	r1, [pc, #420]	@ (8005254 <CLI_proc+0xeb0>)
 80050b0:	9804      	ldr	r0, [sp, #16]
					            DPS368.press.offset = tmp;
 80050b2:	f8c3 000f 	str.w	r0, [r3, #15]
					            config.DPS368_p_offset = tmp;
 80050b6:	f8c1 0037 	str.w	r0, [r1, #55]	@ 0x37
					            printf("DPS368 pressure offset %.6f\r\n",tmp);
 80050ba:	f7fb fa85 	bl	80005c8 <__aeabi_f2d>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4876      	ldr	r0, [pc, #472]	@ (800529c <CLI_proc+0xef8>)
 80050c4:	f00b fb1e 	bl	8010704 <iprintf>
								Save_config();
 80050c8:	f7fc f99c 	bl	8001404 <Save_config>
							if((strstr(clibuf+17, "en")))
 80050cc:	4974      	ldr	r1, [pc, #464]	@ (80052a0 <CLI_proc+0xefc>)
 80050ce:	486f      	ldr	r0, [pc, #444]	@ (800528c <CLI_proc+0xee8>)
 80050d0:	f00b fd1a 	bl	8010b08 <strstr>
 80050d4:	b180      	cbz	r0, 80050f8 <CLI_proc+0xd54>
								DPS368.press.use_meas = 1;
 80050d6:	4960      	ldr	r1, [pc, #384]	@ (8005258 <CLI_proc+0xeb4>)
								config.DPS368_p_use = 1;
 80050d8:	4c5e      	ldr	r4, [pc, #376]	@ (8005254 <CLI_proc+0xeb0>)
								DPS368.press.use_meas = 1;
 80050da:	7a8b      	ldrb	r3, [r1, #10]
								config.DPS368_p_use = 1;
 80050dc:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
								printf("DPS368 pressure measure enabled\r\n");
 80050e0:	4870      	ldr	r0, [pc, #448]	@ (80052a4 <CLI_proc+0xf00>)
								config.DPS368_p_use = 1;
 80050e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
								DPS368.press.use_meas = 1;
 80050e6:	f043 0301 	orr.w	r3, r3, #1
								config.DPS368_p_use = 1;
 80050ea:	f884 2032 	strb.w	r2, [r4, #50]	@ 0x32
								DPS368.press.use_meas = 1;
 80050ee:	728b      	strb	r3, [r1, #10]
								printf("DPS368 pressure measure enabled\r\n");
 80050f0:	f00b fb70 	bl	80107d4 <puts>
								Save_config();
 80050f4:	f7fc f986 	bl	8001404 <Save_config>
							if((strstr(clibuf+17, "dis")))
 80050f8:	496b      	ldr	r1, [pc, #428]	@ (80052a8 <CLI_proc+0xf04>)
 80050fa:	4864      	ldr	r0, [pc, #400]	@ (800528c <CLI_proc+0xee8>)
 80050fc:	f00b fd04 	bl	8010b08 <strstr>
 8005100:	2800      	cmp	r0, #0
 8005102:	f43f a95e 	beq.w	80043c2 <CLI_proc+0x1e>
								config.DPS368_p_use = 0;
 8005106:	4953      	ldr	r1, [pc, #332]	@ (8005254 <CLI_proc+0xeb0>)
								DPS368.press.use_meas = 0;
 8005108:	4b53      	ldr	r3, [pc, #332]	@ (8005258 <CLI_proc+0xeb4>)
								config.DPS368_p_use = 0;
 800510a:	f891 4032 	ldrb.w	r4, [r1, #50]	@ 0x32
								DPS368.press.use_meas = 0;
 800510e:	7a9a      	ldrb	r2, [r3, #10]
								printf("DPS368 pressure measure disable\r\n");
 8005110:	4866      	ldr	r0, [pc, #408]	@ (80052ac <CLI_proc+0xf08>)
								config.DPS368_p_use = 0;
 8005112:	f36f 1486 	bfc	r4, #6, #1
								DPS368.press.use_meas = 0;
 8005116:	f36f 0200 	bfc	r2, #0, #1
								config.DPS368_p_use = 0;
 800511a:	f881 4032 	strb.w	r4, [r1, #50]	@ 0x32
								DPS368.press.use_meas = 0;
 800511e:	729a      	strb	r2, [r3, #10]
 8005120:	e706      	b.n	8004f30 <CLI_proc+0xb8c>
							if((strstr(clibuf+23, "offset ")))
 8005122:	495b      	ldr	r1, [pc, #364]	@ (8005290 <CLI_proc+0xeec>)
 8005124:	f00b fcf0 	bl	8010b08 <strstr>
 8005128:	b1b8      	cbz	r0, 800515a <CLI_proc+0xdb6>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 800512a:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800512e:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8005132:	a904      	add	r1, sp, #16
 8005134:	1de8      	adds	r0, r5, #7
 8005136:	f7fe ffaf 	bl	8004098 <getFloat>
					            config.DPS368_t_offset = tmp;
 800513a:	4b46      	ldr	r3, [pc, #280]	@ (8005254 <CLI_proc+0xeb0>)
					            DPS368.temp.offset = tmp;
 800513c:	4946      	ldr	r1, [pc, #280]	@ (8005258 <CLI_proc+0xeb4>)
					            config.DPS368_t_offset = tmp;
 800513e:	9804      	ldr	r0, [sp, #16]
 8005140:	f8c3 0033 	str.w	r0, [r3, #51]	@ 0x33
					            DPS368.temp.offset = tmp;
 8005144:	f8c1 0006 	str.w	r0, [r1, #6]
					            printf("DPS368 temperature offset %.6f\r\n",tmp);
 8005148:	f7fb fa3e 	bl	80005c8 <__aeabi_f2d>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4857      	ldr	r0, [pc, #348]	@ (80052b0 <CLI_proc+0xf0c>)
 8005152:	f00b fad7 	bl	8010704 <iprintf>
								Save_config();
 8005156:	f7fc f955 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "en")))
 800515a:	4951      	ldr	r1, [pc, #324]	@ (80052a0 <CLI_proc+0xefc>)
 800515c:	4849      	ldr	r0, [pc, #292]	@ (8005284 <CLI_proc+0xee0>)
 800515e:	f00b fcd3 	bl	8010b08 <strstr>
 8005162:	b180      	cbz	r0, 8005186 <CLI_proc+0xde2>
								config.DPS368_t_use = 1;
 8005164:	483b      	ldr	r0, [pc, #236]	@ (8005254 <CLI_proc+0xeb0>)
								DPS368.temp.use_meas = 1;
 8005166:	493c      	ldr	r1, [pc, #240]	@ (8005258 <CLI_proc+0xeb4>)
								config.DPS368_t_use = 1;
 8005168:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
								DPS368.temp.use_meas = 1;
 800516c:	784b      	ldrb	r3, [r1, #1]
								config.DPS368_t_use = 1;
 800516e:	f042 0220 	orr.w	r2, r2, #32
								DPS368.temp.use_meas = 1;
 8005172:	f043 0301 	orr.w	r3, r3, #1
								config.DPS368_t_use = 1;
 8005176:	f880 2032 	strb.w	r2, [r0, #50]	@ 0x32
								printf("DPS368 temperature measure enabled\r\n");
 800517a:	484e      	ldr	r0, [pc, #312]	@ (80052b4 <CLI_proc+0xf10>)
								DPS368.temp.use_meas = 1;
 800517c:	704b      	strb	r3, [r1, #1]
								printf("DPS368 temperature measure enabled\r\n");
 800517e:	f00b fb29 	bl	80107d4 <puts>
								Save_config();
 8005182:	f7fc f93f 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "dis")))
 8005186:	4948      	ldr	r1, [pc, #288]	@ (80052a8 <CLI_proc+0xf04>)
 8005188:	483e      	ldr	r0, [pc, #248]	@ (8005284 <CLI_proc+0xee0>)
 800518a:	f00b fcbd 	bl	8010b08 <strstr>
 800518e:	2800      	cmp	r0, #0
 8005190:	f43f af75 	beq.w	800507e <CLI_proc+0xcda>
								config.DPS368_t_use = 0;
 8005194:	492f      	ldr	r1, [pc, #188]	@ (8005254 <CLI_proc+0xeb0>)
								DPS368.temp.use_meas = 0;
 8005196:	4b30      	ldr	r3, [pc, #192]	@ (8005258 <CLI_proc+0xeb4>)
								config.DPS368_t_use = 0;
 8005198:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
								DPS368.temp.use_meas = 0;
 800519c:	785a      	ldrb	r2, [r3, #1]
								config.DPS368_t_use = 0;
 800519e:	f36f 1045 	bfc	r0, #5, #1
								DPS368.temp.use_meas = 0;
 80051a2:	f36f 0200 	bfc	r2, #0, #1
								config.DPS368_t_use = 0;
 80051a6:	f881 0032 	strb.w	r0, [r1, #50]	@ 0x32
								printf("DPS368 temperature measure disable\r\n");
 80051aa:	4843      	ldr	r0, [pc, #268]	@ (80052b8 <CLI_proc+0xf14>)
								DPS368.temp.use_meas = 0;
 80051ac:	705a      	strb	r2, [r3, #1]
								printf("DPS368 temperature measure disable\r\n");
 80051ae:	f00b fb11 	bl	80107d4 <puts>
								Save_config();
 80051b2:	f7fc f927 	bl	8001404 <Save_config>
 80051b6:	e762      	b.n	800507e <CLI_proc+0xcda>
							if((strstr(clibuf+23, "offset ")))
 80051b8:	4935      	ldr	r1, [pc, #212]	@ (8005290 <CLI_proc+0xeec>)
 80051ba:	f00b fca5 	bl	8010b08 <strstr>
 80051be:	b1b8      	cbz	r0, 80051f0 <CLI_proc+0xe4c>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 80051c0:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80051c4:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 80051c8:	a904      	add	r1, sp, #16
 80051ca:	1de0      	adds	r0, r4, #7
 80051cc:	f7fe ff64 	bl	8004098 <getFloat>
					            MS8607.temp.offset = tmp;
 80051d0:	4b3a      	ldr	r3, [pc, #232]	@ (80052bc <CLI_proc+0xf18>)
					            config.MS8607_t_offset = tmp;
 80051d2:	4920      	ldr	r1, [pc, #128]	@ (8005254 <CLI_proc+0xeb0>)
 80051d4:	9804      	ldr	r0, [sp, #16]
					            MS8607.temp.offset = tmp;
 80051d6:	f8c3 0006 	str.w	r0, [r3, #6]
					            config.MS8607_t_offset = tmp;
 80051da:	f8c1 0019 	str.w	r0, [r1, #25]
					            printf("MS8607 temperature offset %.6f\r\n",tmp);
 80051de:	f7fb f9f3 	bl	80005c8 <__aeabi_f2d>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4836      	ldr	r0, [pc, #216]	@ (80052c0 <CLI_proc+0xf1c>)
 80051e8:	f00b fa8c 	bl	8010704 <iprintf>
								Save_config();
 80051ec:	f7fc f90a 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "en")))
 80051f0:	492b      	ldr	r1, [pc, #172]	@ (80052a0 <CLI_proc+0xefc>)
 80051f2:	4824      	ldr	r0, [pc, #144]	@ (8005284 <CLI_proc+0xee0>)
 80051f4:	f00b fc88 	bl	8010b08 <strstr>
 80051f8:	b170      	cbz	r0, 8005218 <CLI_proc+0xe74>
								MS8607.temp.use_meas = 1;
 80051fa:	4930      	ldr	r1, [pc, #192]	@ (80052bc <CLI_proc+0xf18>)
								config.MS8607_t_use = 1;
 80051fc:	4c15      	ldr	r4, [pc, #84]	@ (8005254 <CLI_proc+0xeb0>)
								MS8607.temp.use_meas = 1;
 80051fe:	784b      	ldrb	r3, [r1, #1]
								config.MS8607_t_use = 1;
 8005200:	7e22      	ldrb	r2, [r4, #24]
								printf("MS8607 temperature measure enabled\r\n");
 8005202:	4830      	ldr	r0, [pc, #192]	@ (80052c4 <CLI_proc+0xf20>)
								config.MS8607_t_use = 1;
 8005204:	f042 0220 	orr.w	r2, r2, #32
								MS8607.temp.use_meas = 1;
 8005208:	f043 0301 	orr.w	r3, r3, #1
								config.MS8607_t_use = 1;
 800520c:	7622      	strb	r2, [r4, #24]
								MS8607.temp.use_meas = 1;
 800520e:	704b      	strb	r3, [r1, #1]
								printf("MS8607 temperature measure enabled\r\n");
 8005210:	f00b fae0 	bl	80107d4 <puts>
								Save_config();
 8005214:	f7fc f8f6 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "dis")))
 8005218:	4923      	ldr	r1, [pc, #140]	@ (80052a8 <CLI_proc+0xf04>)
 800521a:	481a      	ldr	r0, [pc, #104]	@ (8005284 <CLI_proc+0xee0>)
 800521c:	f00b fc74 	bl	8010b08 <strstr>
 8005220:	2800      	cmp	r0, #0
 8005222:	f43f ab49 	beq.w	80048b8 <CLI_proc+0x514>
								config.MS8607_t_use = 0;
 8005226:	490b      	ldr	r1, [pc, #44]	@ (8005254 <CLI_proc+0xeb0>)
								MS8607.temp.use_meas = 0;
 8005228:	4b24      	ldr	r3, [pc, #144]	@ (80052bc <CLI_proc+0xf18>)
								config.MS8607_t_use = 0;
 800522a:	7e0c      	ldrb	r4, [r1, #24]
								MS8607.temp.use_meas = 0;
 800522c:	785a      	ldrb	r2, [r3, #1]
								printf("MS8607 temperature measure disable\r\n");
 800522e:	4826      	ldr	r0, [pc, #152]	@ (80052c8 <CLI_proc+0xf24>)
								MS8607.temp.use_meas = 0;
 8005230:	f36f 0200 	bfc	r2, #0, #1
								config.MS8607_t_use = 0;
 8005234:	f36f 1445 	bfc	r4, #5, #1
 8005238:	760c      	strb	r4, [r1, #24]
								MS8607.temp.use_meas = 0;
 800523a:	705a      	strb	r2, [r3, #1]
								printf("MS8607 temperature measure disable\r\n");
 800523c:	f00b faca 	bl	80107d4 <puts>
								Save_config();
 8005240:	f7fc f8e0 	bl	8001404 <Save_config>
 8005244:	f7ff bb38 	b.w	80048b8 <CLI_proc+0x514>
 8005248:	08015954 	.word	0x08015954
 800524c:	08015ac8 	.word	0x08015ac8
 8005250:	080155a8 	.word	0x080155a8
 8005254:	200019c0 	.word	0x200019c0
 8005258:	20001ae8 	.word	0x20001ae8
 800525c:	08015ad0 	.word	0x08015ad0
 8005260:	080155c8 	.word	0x080155c8
 8005264:	08015ae8 	.word	0x08015ae8
 8005268:	080155e8 	.word	0x080155e8
 800526c:	20000da0 	.word	0x20000da0
 8005270:	200019ae 	.word	0x200019ae
 8005274:	200019b1 	.word	0x200019b1
 8005278:	200019b0 	.word	0x200019b0
 800527c:	08015b00 	.word	0x08015b00
 8005280:	08015610 	.word	0x08015610
 8005284:	20000da7 	.word	0x20000da7
 8005288:	0801587c 	.word	0x0801587c
 800528c:	20000da1 	.word	0x20000da1
 8005290:	08015620 	.word	0x08015620
 8005294:	43fa0000 	.word	0x43fa0000
 8005298:	c3fa0000 	.word	0xc3fa0000
 800529c:	08015b8c 	.word	0x08015b8c
 80052a0:	0801564c 	.word	0x0801564c
 80052a4:	08015bac 	.word	0x08015bac
 80052a8:	08015674 	.word	0x08015674
 80052ac:	08015bd0 	.word	0x08015bd0
 80052b0:	08015b20 	.word	0x08015b20
 80052b4:	08015b44 	.word	0x08015b44
 80052b8:	08015b68 	.word	0x08015b68
 80052bc:	20001b24 	.word	0x20001b24
 80052c0:	08015810 	.word	0x08015810
 80052c4:	08015834 	.word	0x08015834
 80052c8:	08015858 	.word	0x08015858
							if((strstr(clibuf+17, "offset ")))
 80052cc:	4971      	ldr	r1, [pc, #452]	@ (8005494 <CLI_proc+0x10f0>)
 80052ce:	f00b fc1b 	bl	8010b08 <strstr>
 80052d2:	b1b0      	cbz	r0, 8005302 <CLI_proc+0xf5e>
					            getFloat(clibuf+24, &tmp, -500, 500);
 80052d4:	eddf 0a70 	vldr	s1, [pc, #448]	@ 8005498 <CLI_proc+0x10f4>
 80052d8:	ed9f 0a70 	vldr	s0, [pc, #448]	@ 800549c <CLI_proc+0x10f8>
 80052dc:	a904      	add	r1, sp, #16
 80052de:	1de0      	adds	r0, r4, #7
 80052e0:	f7fe feda 	bl	8004098 <getFloat>
					            MS8607.press.offset = tmp;
 80052e4:	4b6e      	ldr	r3, [pc, #440]	@ (80054a0 <CLI_proc+0x10fc>)
					            config.MS8607_p_offset = tmp;
 80052e6:	496f      	ldr	r1, [pc, #444]	@ (80054a4 <CLI_proc+0x1100>)
 80052e8:	9804      	ldr	r0, [sp, #16]
					            MS8607.press.offset = tmp;
 80052ea:	6198      	str	r0, [r3, #24]
					            config.MS8607_p_offset = tmp;
 80052ec:	f8c1 0021 	str.w	r0, [r1, #33]	@ 0x21
					            printf("MS8607 pressure offset %.6f\r\n",tmp);
 80052f0:	f7fb f96a 	bl	80005c8 <__aeabi_f2d>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	486b      	ldr	r0, [pc, #428]	@ (80054a8 <CLI_proc+0x1104>)
 80052fa:	f00b fa03 	bl	8010704 <iprintf>
								Save_config();
 80052fe:	f7fc f881 	bl	8001404 <Save_config>
							if((strstr(clibuf+17, "en")))
 8005302:	496a      	ldr	r1, [pc, #424]	@ (80054ac <CLI_proc+0x1108>)
 8005304:	486a      	ldr	r0, [pc, #424]	@ (80054b0 <CLI_proc+0x110c>)
 8005306:	f00b fbff 	bl	8010b08 <strstr>
 800530a:	b170      	cbz	r0, 800532a <CLI_proc+0xf86>
								MS8607.press.use_meas = 1;
 800530c:	4964      	ldr	r1, [pc, #400]	@ (80054a0 <CLI_proc+0x10fc>)
								config.MS8607_p_use = 1;
 800530e:	4c65      	ldr	r4, [pc, #404]	@ (80054a4 <CLI_proc+0x1100>)
								MS8607.press.use_meas = 1;
 8005310:	7ccb      	ldrb	r3, [r1, #19]
								config.MS8607_p_use = 1;
 8005312:	7e22      	ldrb	r2, [r4, #24]
								printf("MS8607 pressure measure enabled\r\n");
 8005314:	4867      	ldr	r0, [pc, #412]	@ (80054b4 <CLI_proc+0x1110>)
								config.MS8607_p_use = 1;
 8005316:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
								MS8607.press.use_meas = 1;
 800531a:	f043 0301 	orr.w	r3, r3, #1
								config.MS8607_p_use = 1;
 800531e:	7622      	strb	r2, [r4, #24]
								MS8607.press.use_meas = 1;
 8005320:	74cb      	strb	r3, [r1, #19]
								printf("MS8607 pressure measure enabled\r\n");
 8005322:	f00b fa57 	bl	80107d4 <puts>
								Save_config();
 8005326:	f7fc f86d 	bl	8001404 <Save_config>
							if((strstr(clibuf+17, "dis")))
 800532a:	4963      	ldr	r1, [pc, #396]	@ (80054b8 <CLI_proc+0x1114>)
 800532c:	4860      	ldr	r0, [pc, #384]	@ (80054b0 <CLI_proc+0x110c>)
 800532e:	f00b fbeb 	bl	8010b08 <strstr>
 8005332:	2800      	cmp	r0, #0
 8005334:	f43f aac9 	beq.w	80048ca <CLI_proc+0x526>
								config.MS8607_p_use = 0;
 8005338:	495a      	ldr	r1, [pc, #360]	@ (80054a4 <CLI_proc+0x1100>)
								MS8607.press.use_meas = 0;
 800533a:	4b59      	ldr	r3, [pc, #356]	@ (80054a0 <CLI_proc+0x10fc>)
								config.MS8607_p_use = 0;
 800533c:	7e0c      	ldrb	r4, [r1, #24]
								MS8607.press.use_meas = 0;
 800533e:	7cda      	ldrb	r2, [r3, #19]
								printf("MS8607 pressure measure disable\r\n");
 8005340:	485e      	ldr	r0, [pc, #376]	@ (80054bc <CLI_proc+0x1118>)
								MS8607.press.use_meas = 0;
 8005342:	f36f 0200 	bfc	r2, #0, #1
								config.MS8607_p_use = 0;
 8005346:	f36f 14c7 	bfc	r4, #7, #1
 800534a:	760c      	strb	r4, [r1, #24]
								MS8607.press.use_meas = 0;
 800534c:	74da      	strb	r2, [r3, #19]
								printf("MS8607 pressure measure disable\r\n");
 800534e:	f00b fa41 	bl	80107d4 <puts>
								Save_config();
 8005352:	f7fc f857 	bl	8001404 <Save_config>
 8005356:	f7ff bab8 	b.w	80048ca <CLI_proc+0x526>
					if((p = find("enable")))
 800535a:	4859      	ldr	r0, [pc, #356]	@ (80054c0 <CLI_proc+0x111c>)
 800535c:	f7fe fe0c 	bl	8003f78 <find>
 8005360:	b170      	cbz	r0, 8005380 <CLI_proc+0xfdc>
						config.SHT3_use = 1;
 8005362:	4850      	ldr	r0, [pc, #320]	@ (80054a4 <CLI_proc+0x1100>)
						SHT3.sensor_use = 1;
 8005364:	4957      	ldr	r1, [pc, #348]	@ (80054c4 <CLI_proc+0x1120>)
						config.SHT3_use = 1;
 8005366:	7bc2      	ldrb	r2, [r0, #15]
						SHT3.sensor_use = 1;
 8005368:	780b      	ldrb	r3, [r1, #0]
						config.SHT3_use = 1;
 800536a:	f042 0201 	orr.w	r2, r2, #1
						SHT3.sensor_use = 1;
 800536e:	f043 0302 	orr.w	r3, r3, #2
						config.SHT3_use = 1;
 8005372:	73c2      	strb	r2, [r0, #15]
						printf("SHTC3 sensor enabled\r\n");
 8005374:	4854      	ldr	r0, [pc, #336]	@ (80054c8 <CLI_proc+0x1124>)
						SHT3.sensor_use = 1;
 8005376:	700b      	strb	r3, [r1, #0]
						printf("SHTC3 sensor enabled\r\n");
 8005378:	f00b fa2c 	bl	80107d4 <puts>
						Save_config();
 800537c:	f7fc f842 	bl	8001404 <Save_config>
					if((p = find("disable")))
 8005380:	4852      	ldr	r0, [pc, #328]	@ (80054cc <CLI_proc+0x1128>)
 8005382:	f7fe fdf9 	bl	8003f78 <find>
 8005386:	b170      	cbz	r0, 80053a6 <CLI_proc+0x1002>
						config.SHT3_use = 0;
 8005388:	4946      	ldr	r1, [pc, #280]	@ (80054a4 <CLI_proc+0x1100>)
						SHT3.sensor_use = 0;
 800538a:	4b4e      	ldr	r3, [pc, #312]	@ (80054c4 <CLI_proc+0x1120>)
						config.SHT3_use = 0;
 800538c:	7bc8      	ldrb	r0, [r1, #15]
						SHT3.sensor_use = 0;
 800538e:	781a      	ldrb	r2, [r3, #0]
						config.SHT3_use = 0;
 8005390:	f36f 0000 	bfc	r0, #0, #1
						SHT3.sensor_use = 0;
 8005394:	f36f 0241 	bfc	r2, #1, #1
						config.SHT3_use = 0;
 8005398:	73c8      	strb	r0, [r1, #15]
						printf("SHTC3 sensor disabled\r\n");
 800539a:	484d      	ldr	r0, [pc, #308]	@ (80054d0 <CLI_proc+0x112c>)
						SHT3.sensor_use = 0;
 800539c:	701a      	strb	r2, [r3, #0]
						printf("SHTC3 sensor disabled\r\n");
 800539e:	f00b fa19 	bl	80107d4 <puts>
						Save_config();
 80053a2:	f7fc f82f 	bl	8001404 <Save_config>
					if((p = find("conf ")))
 80053a6:	484b      	ldr	r0, [pc, #300]	@ (80054d4 <CLI_proc+0x1130>)
 80053a8:	f7fe fde6 	bl	8003f78 <find>
 80053ac:	b1e0      	cbz	r0, 80053e8 <CLI_proc+0x1044>
			            getval(clibuf+15, &tmp, 0, 1);
 80053ae:	2301      	movs	r3, #1
 80053b0:	2200      	movs	r2, #0
 80053b2:	a904      	add	r1, sp, #16
						int32_t tmp = -1;
 80053b4:	f04f 35ff 	mov.w	r5, #4294967295
			            getval(clibuf+15, &tmp, 0, 1);
 80053b8:	4847      	ldr	r0, [pc, #284]	@ (80054d8 <CLI_proc+0x1134>)
						int32_t tmp = -1;
 80053ba:	9504      	str	r5, [sp, #16]
			            getval(clibuf+15, &tmp, 0, 1);
 80053bc:	f7fe fe06 	bl	8003fcc <getval>
			            config.SHT3_conf = tmp;
 80053c0:	4a38      	ldr	r2, [pc, #224]	@ (80054a4 <CLI_proc+0x1100>)
 80053c2:	9904      	ldr	r1, [sp, #16]
 80053c4:	7bd5      	ldrb	r5, [r2, #15]
			            SHT3.sensor_conf = tmp;
 80053c6:	4b3f      	ldr	r3, [pc, #252]	@ (80054c4 <CLI_proc+0x1120>)
			            config.SHT3_conf = tmp;
 80053c8:	f001 000f 	and.w	r0, r1, #15
 80053cc:	f360 0544 	bfi	r5, r0, #1, #4
 80053d0:	73d5      	strb	r5, [r2, #15]
			            SHT3.sensor_conf = tmp;
 80053d2:	781a      	ldrb	r2, [r3, #0]
			            sht3_mode=tmp;
 80053d4:	4d41      	ldr	r5, [pc, #260]	@ (80054dc <CLI_proc+0x1138>)
			            SHT3.sensor_conf = tmp;
 80053d6:	f360 0285 	bfi	r2, r0, #2, #4
			            printf("SHT3 temperature config %li\r\n",tmp);
 80053da:	4841      	ldr	r0, [pc, #260]	@ (80054e0 <CLI_proc+0x113c>)
			            SHT3.sensor_conf = tmp;
 80053dc:	701a      	strb	r2, [r3, #0]
			            sht3_mode=tmp;
 80053de:	7029      	strb	r1, [r5, #0]
			            printf("SHT3 temperature config %li\r\n",tmp);
 80053e0:	f00b f990 	bl	8010704 <iprintf>
						Save_config();
 80053e4:	f7fc f80e 	bl	8001404 <Save_config>
					if((p = find("temperature ")))
 80053e8:	483e      	ldr	r0, [pc, #248]	@ (80054e4 <CLI_proc+0x1140>)
 80053ea:	f7fe fdc5 	bl	8003f78 <find>
 80053ee:	4605      	mov	r5, r0
 80053f0:	b118      	cbz	r0, 80053fa <CLI_proc+0x1056>
						if(p == clibuf+22)
 80053f2:	4b3d      	ldr	r3, [pc, #244]	@ (80054e8 <CLI_proc+0x1144>)
 80053f4:	4298      	cmp	r0, r3
 80053f6:	f000 817b 	beq.w	80056f0 <CLI_proc+0x134c>
					if((p = find("hum ")))
 80053fa:	483c      	ldr	r0, [pc, #240]	@ (80054ec <CLI_proc+0x1148>)
 80053fc:	f7fe fdbc 	bl	8003f78 <find>
 8005400:	4605      	mov	r5, r0
 8005402:	2800      	cmp	r0, #0
 8005404:	f43f a9fd 	beq.w	8004802 <CLI_proc+0x45e>
						if(p == clibuf+14)
 8005408:	4b39      	ldr	r3, [pc, #228]	@ (80054f0 <CLI_proc+0x114c>)
 800540a:	4298      	cmp	r0, r3
 800540c:	f47f a9f9 	bne.w	8004802 <CLI_proc+0x45e>
							if((strstr(clibuf+14, "offset ")))
 8005410:	4920      	ldr	r1, [pc, #128]	@ (8005494 <CLI_proc+0x10f0>)
 8005412:	f00b fb79 	bl	8010b08 <strstr>
 8005416:	b1b0      	cbz	r0, 8005446 <CLI_proc+0x10a2>
						        getFloat(clibuf+21, &tmp, MIN_OFFSET, MAX_OFFSET);
 8005418:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800541c:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8005420:	a904      	add	r1, sp, #16
 8005422:	1de8      	adds	r0, r5, #7
 8005424:	f7fe fe38 	bl	8004098 <getFloat>
						        SHT3.hum.offset = tmp;
 8005428:	4b26      	ldr	r3, [pc, #152]	@ (80054c4 <CLI_proc+0x1120>)
						        config.SHT3_h_offset = tmp;
 800542a:	491e      	ldr	r1, [pc, #120]	@ (80054a4 <CLI_proc+0x1100>)
 800542c:	9804      	ldr	r0, [sp, #16]
						        SHT3.hum.offset = tmp;
 800542e:	f8c3 000f 	str.w	r0, [r3, #15]
						        config.SHT3_h_offset = tmp;
 8005432:	6148      	str	r0, [r1, #20]
						        printf("SHTC3 humidity offset %.6f\r\n",tmp);
 8005434:	f7fb f8c8 	bl	80005c8 <__aeabi_f2d>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	482d      	ldr	r0, [pc, #180]	@ (80054f4 <CLI_proc+0x1150>)
 800543e:	f00b f961 	bl	8010704 <iprintf>
						        Save_config();
 8005442:	f7fb ffdf 	bl	8001404 <Save_config>
							if((strstr(clibuf+14, "en")))
 8005446:	4919      	ldr	r1, [pc, #100]	@ (80054ac <CLI_proc+0x1108>)
 8005448:	4829      	ldr	r0, [pc, #164]	@ (80054f0 <CLI_proc+0x114c>)
 800544a:	f00b fb5d 	bl	8010b08 <strstr>
 800544e:	b170      	cbz	r0, 800546e <CLI_proc+0x10ca>
								SHT3.hum.use_meas = 1;
 8005450:	491c      	ldr	r1, [pc, #112]	@ (80054c4 <CLI_proc+0x1120>)
								config.SHT3_h_use = 1;
 8005452:	4c14      	ldr	r4, [pc, #80]	@ (80054a4 <CLI_proc+0x1100>)
								SHT3.hum.use_meas = 1;
 8005454:	7a8b      	ldrb	r3, [r1, #10]
								config.SHT3_h_use = 1;
 8005456:	7be2      	ldrb	r2, [r4, #15]
								printf("SHTC3 humidity measure enabled\r\n");
 8005458:	4827      	ldr	r0, [pc, #156]	@ (80054f8 <CLI_proc+0x1154>)
								config.SHT3_h_use = 1;
 800545a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
								SHT3.hum.use_meas = 1;
 800545e:	f043 0301 	orr.w	r3, r3, #1
								config.SHT3_h_use = 1;
 8005462:	73e2      	strb	r2, [r4, #15]
								SHT3.hum.use_meas = 1;
 8005464:	728b      	strb	r3, [r1, #10]
								printf("SHTC3 humidity measure enabled\r\n");
 8005466:	f00b f9b5 	bl	80107d4 <puts>
								Save_config();
 800546a:	f7fb ffcb 	bl	8001404 <Save_config>
							if((strstr(clibuf+14, "dis")))
 800546e:	4912      	ldr	r1, [pc, #72]	@ (80054b8 <CLI_proc+0x1114>)
 8005470:	481f      	ldr	r0, [pc, #124]	@ (80054f0 <CLI_proc+0x114c>)
 8005472:	f00b fb49 	bl	8010b08 <strstr>
 8005476:	2800      	cmp	r0, #0
 8005478:	f43e afa3 	beq.w	80043c2 <CLI_proc+0x1e>
								config.SHT3_h_use = 0;
 800547c:	4909      	ldr	r1, [pc, #36]	@ (80054a4 <CLI_proc+0x1100>)
								SHT3.hum.use_meas = 0;
 800547e:	4b11      	ldr	r3, [pc, #68]	@ (80054c4 <CLI_proc+0x1120>)
								config.SHT3_h_use = 0;
 8005480:	7bcc      	ldrb	r4, [r1, #15]
								SHT3.hum.use_meas = 0;
 8005482:	7a9a      	ldrb	r2, [r3, #10]
								printf("SHTC3 humidity measure disable\r\n");
 8005484:	481d      	ldr	r0, [pc, #116]	@ (80054fc <CLI_proc+0x1158>)
								config.SHT3_h_use = 0;
 8005486:	f36f 1486 	bfc	r4, #6, #1
								SHT3.hum.use_meas = 0;
 800548a:	f36f 0200 	bfc	r2, #0, #1
								config.SHT3_h_use = 0;
 800548e:	73cc      	strb	r4, [r1, #15]
								DPS368.press.use_meas = 0;
 8005490:	729a      	strb	r2, [r3, #10]
 8005492:	e54d      	b.n	8004f30 <CLI_proc+0xb8c>
 8005494:	08015620 	.word	0x08015620
 8005498:	43fa0000 	.word	0x43fa0000
 800549c:	c3fa0000 	.word	0xc3fa0000
 80054a0:	20001b24 	.word	0x20001b24
 80054a4:	200019c0 	.word	0x200019c0
 80054a8:	08015884 	.word	0x08015884
 80054ac:	0801564c 	.word	0x0801564c
 80054b0:	20000da1 	.word	0x20000da1
 80054b4:	080158a4 	.word	0x080158a4
 80054b8:	08015674 	.word	0x08015674
 80054bc:	080158c8 	.word	0x080158c8
 80054c0:	080155a8 	.word	0x080155a8
 80054c4:	20001b48 	.word	0x20001b48
 80054c8:	080156a4 	.word	0x080156a4
 80054cc:	080155c8 	.word	0x080155c8
 80054d0:	080156bc 	.word	0x080156bc
 80054d4:	080155e8 	.word	0x080155e8
 80054d8:	20000d9f 	.word	0x20000d9f
 80054dc:	200019ac 	.word	0x200019ac
 80054e0:	080156d4 	.word	0x080156d4
 80054e4:	08015610 	.word	0x08015610
 80054e8:	20000da6 	.word	0x20000da6
 80054ec:	0801575c 	.word	0x0801575c
 80054f0:	20000d9e 	.word	0x20000d9e
 80054f4:	08015764 	.word	0x08015764
 80054f8:	08015784 	.word	0x08015784
 80054fc:	080157a4 	.word	0x080157a4
					if((p = find("enable")))
 8005500:	489e      	ldr	r0, [pc, #632]	@ (800577c <CLI_proc+0x13d8>)
 8005502:	f7fe fd39 	bl	8003f78 <find>
 8005506:	b180      	cbz	r0, 800552a <CLI_proc+0x1186>
						config.BME280_use = 1;
 8005508:	489d      	ldr	r0, [pc, #628]	@ (8005780 <CLI_proc+0x13dc>)
						BME280.sensor_use = 1;
 800550a:	499e      	ldr	r1, [pc, #632]	@ (8005784 <CLI_proc+0x13e0>)
						config.BME280_use = 1;
 800550c:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
						BME280.sensor_use = 1;
 8005510:	780b      	ldrb	r3, [r1, #0]
						config.BME280_use = 1;
 8005512:	f042 0201 	orr.w	r2, r2, #1
						BME280.sensor_use = 1;
 8005516:	f043 0302 	orr.w	r3, r3, #2
						config.BME280_use = 1;
 800551a:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
						printf("BME280 sensor enabled\r\n");
 800551e:	489a      	ldr	r0, [pc, #616]	@ (8005788 <CLI_proc+0x13e4>)
						BME280.sensor_use = 1;
 8005520:	700b      	strb	r3, [r1, #0]
						printf("BME280 sensor enabled\r\n");
 8005522:	f00b f957 	bl	80107d4 <puts>
						Save_config();
 8005526:	f7fb ff6d 	bl	8001404 <Save_config>
					if((p = find("disable")))
 800552a:	4898      	ldr	r0, [pc, #608]	@ (800578c <CLI_proc+0x13e8>)
 800552c:	f7fe fd24 	bl	8003f78 <find>
 8005530:	b180      	cbz	r0, 8005554 <CLI_proc+0x11b0>
						config.BME280_use = 0;
 8005532:	4993      	ldr	r1, [pc, #588]	@ (8005780 <CLI_proc+0x13dc>)
						BME280.sensor_use = 0;
 8005534:	4b93      	ldr	r3, [pc, #588]	@ (8005784 <CLI_proc+0x13e0>)
						config.BME280_use = 0;
 8005536:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
						BME280.sensor_use = 0;
 800553a:	781a      	ldrb	r2, [r3, #0]
						config.BME280_use = 0;
 800553c:	f36f 0000 	bfc	r0, #0, #1
						BME280.sensor_use = 0;
 8005540:	f36f 0241 	bfc	r2, #1, #1
						config.BME280_use = 0;
 8005544:	f881 0025 	strb.w	r0, [r1, #37]	@ 0x25
						printf("BME280 sensor disabled\r\n");
 8005548:	4891      	ldr	r0, [pc, #580]	@ (8005790 <CLI_proc+0x13ec>)
						BME280.sensor_use = 0;
 800554a:	701a      	strb	r2, [r3, #0]
						printf("BME280 sensor disabled\r\n");
 800554c:	f00b f942 	bl	80107d4 <puts>
						Save_config();
 8005550:	f7fb ff58 	bl	8001404 <Save_config>
					if((p = find("conf ")))
 8005554:	488f      	ldr	r0, [pc, #572]	@ (8005794 <CLI_proc+0x13f0>)
 8005556:	f7fe fd0f 	bl	8003f78 <find>
 800555a:	b1e0      	cbz	r0, 8005596 <CLI_proc+0x11f2>
			            getval(clibuf+16, &tmp, 0, 10);
 800555c:	230a      	movs	r3, #10
 800555e:	2200      	movs	r2, #0
 8005560:	a904      	add	r1, sp, #16
						int32_t tmp = -1;
 8005562:	f04f 35ff 	mov.w	r5, #4294967295
			            getval(clibuf+16, &tmp, 0, 10);
 8005566:	488c      	ldr	r0, [pc, #560]	@ (8005798 <CLI_proc+0x13f4>)
						int32_t tmp = -1;
 8005568:	9504      	str	r5, [sp, #16]
			            getval(clibuf+16, &tmp, 0, 10);
 800556a:	f7fe fd2f 	bl	8003fcc <getval>
			            config.BME280_conf = tmp;
 800556e:	4a84      	ldr	r2, [pc, #528]	@ (8005780 <CLI_proc+0x13dc>)
 8005570:	9804      	ldr	r0, [sp, #16]
 8005572:	f892 5025 	ldrb.w	r5, [r2, #37]	@ 0x25
			            BME280.sensor_conf = tmp;
 8005576:	4b83      	ldr	r3, [pc, #524]	@ (8005784 <CLI_proc+0x13e0>)
			            config.BME280_conf = tmp;
 8005578:	f000 010f 	and.w	r1, r0, #15
 800557c:	f361 0544 	bfi	r5, r1, #1, #4
 8005580:	f882 5025 	strb.w	r5, [r2, #37]	@ 0x25
			            BME280.sensor_conf = tmp;
 8005584:	781a      	ldrb	r2, [r3, #0]
			            bme280_conf_change(tmp);
 8005586:	b2c0      	uxtb	r0, r0
			            BME280.sensor_conf = tmp;
 8005588:	f361 0285 	bfi	r2, r1, #2, #4
 800558c:	701a      	strb	r2, [r3, #0]
			            bme280_conf_change(tmp);
 800558e:	f004 f8e3 	bl	8009758 <bme280_conf_change>
						Save_config();
 8005592:	f7fb ff37 	bl	8001404 <Save_config>
					if((p = find("temperature ")))
 8005596:	4881      	ldr	r0, [pc, #516]	@ (800579c <CLI_proc+0x13f8>)
 8005598:	f7fe fcee 	bl	8003f78 <find>
 800559c:	4605      	mov	r5, r0
 800559e:	b118      	cbz	r0, 80055a8 <CLI_proc+0x1204>
						if(p == clibuf+23)
 80055a0:	4b7f      	ldr	r3, [pc, #508]	@ (80057a0 <CLI_proc+0x13fc>)
 80055a2:	4298      	cmp	r0, r3
 80055a4:	f000 8126 	beq.w	80057f4 <CLI_proc+0x1450>
					if((p = find("press ")))
 80055a8:	487e      	ldr	r0, [pc, #504]	@ (80057a4 <CLI_proc+0x1400>)
 80055aa:	f7fe fce5 	bl	8003f78 <find>
 80055ae:	4605      	mov	r5, r0
 80055b0:	b110      	cbz	r0, 80055b8 <CLI_proc+0x1214>
						if(p == clibuf+17)
 80055b2:	4b7d      	ldr	r3, [pc, #500]	@ (80057a8 <CLI_proc+0x1404>)
 80055b4:	4298      	cmp	r0, r3
 80055b6:	d051      	beq.n	800565c <CLI_proc+0x12b8>
					if((p = find("hum ")))
 80055b8:	487c      	ldr	r0, [pc, #496]	@ (80057ac <CLI_proc+0x1408>)
 80055ba:	f7fe fcdd 	bl	8003f78 <find>
 80055be:	4605      	mov	r5, r0
 80055c0:	2800      	cmp	r0, #0
 80055c2:	f43f acf2 	beq.w	8004faa <CLI_proc+0xc06>
						if(p == clibuf+15)
 80055c6:	4b7a      	ldr	r3, [pc, #488]	@ (80057b0 <CLI_proc+0x140c>)
 80055c8:	4298      	cmp	r0, r3
 80055ca:	f47f acee 	bne.w	8004faa <CLI_proc+0xc06>
							if((strstr(clibuf+15, "offset ")))
 80055ce:	4979      	ldr	r1, [pc, #484]	@ (80057b4 <CLI_proc+0x1410>)
 80055d0:	f00b fa9a 	bl	8010b08 <strstr>
 80055d4:	b1b8      	cbz	r0, 8005606 <CLI_proc+0x1262>
						        getFloat(clibuf+22, &tmp, MIN_OFFSET, MAX_OFFSET);
 80055d6:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80055da:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 80055de:	a904      	add	r1, sp, #16
 80055e0:	1de8      	adds	r0, r5, #7
 80055e2:	f7fe fd59 	bl	8004098 <getFloat>
						        BME280.hum.offset = tmp;
 80055e6:	4b67      	ldr	r3, [pc, #412]	@ (8005784 <CLI_proc+0x13e0>)
						        config.BME280_h_offset = tmp;
 80055e8:	4965      	ldr	r1, [pc, #404]	@ (8005780 <CLI_proc+0x13dc>)
 80055ea:	9804      	ldr	r0, [sp, #16]
						        BME280.hum.offset = tmp;
 80055ec:	f8c3 000f 	str.w	r0, [r3, #15]
						        config.BME280_h_offset = tmp;
 80055f0:	f8c1 002a 	str.w	r0, [r1, #42]	@ 0x2a
						        printf("BME280 humidity offset %.6f\r\n",tmp);
 80055f4:	f7fa ffe8 	bl	80005c8 <__aeabi_f2d>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	486e      	ldr	r0, [pc, #440]	@ (80057b8 <CLI_proc+0x1414>)
 80055fe:	f00b f881 	bl	8010704 <iprintf>
						        Save_config();
 8005602:	f7fb feff 	bl	8001404 <Save_config>
							if((strstr(clibuf+15, "en")))
 8005606:	496d      	ldr	r1, [pc, #436]	@ (80057bc <CLI_proc+0x1418>)
 8005608:	4869      	ldr	r0, [pc, #420]	@ (80057b0 <CLI_proc+0x140c>)
 800560a:	f00b fa7d 	bl	8010b08 <strstr>
 800560e:	b180      	cbz	r0, 8005632 <CLI_proc+0x128e>
								BME280.hum.use_meas = 1;
 8005610:	495c      	ldr	r1, [pc, #368]	@ (8005784 <CLI_proc+0x13e0>)
								config.BME280_h_use = 1;
 8005612:	4c5b      	ldr	r4, [pc, #364]	@ (8005780 <CLI_proc+0x13dc>)
								BME280.hum.use_meas = 1;
 8005614:	7a8b      	ldrb	r3, [r1, #10]
								config.BME280_h_use = 1;
 8005616:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
								printf("BME280 humidity measure enabled\r\n");
 800561a:	4869      	ldr	r0, [pc, #420]	@ (80057c0 <CLI_proc+0x141c>)
								config.BME280_h_use = 1;
 800561c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
								BME280.hum.use_meas = 1;
 8005620:	f043 0301 	orr.w	r3, r3, #1
								config.BME280_h_use = 1;
 8005624:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
								BME280.hum.use_meas = 1;
 8005628:	728b      	strb	r3, [r1, #10]
								printf("BME280 humidity measure enabled\r\n");
 800562a:	f00b f8d3 	bl	80107d4 <puts>
								Save_config();
 800562e:	f7fb fee9 	bl	8001404 <Save_config>
							if((strstr(clibuf+15, "dis")))
 8005632:	4964      	ldr	r1, [pc, #400]	@ (80057c4 <CLI_proc+0x1420>)
 8005634:	485e      	ldr	r0, [pc, #376]	@ (80057b0 <CLI_proc+0x140c>)
 8005636:	f00b fa67 	bl	8010b08 <strstr>
 800563a:	2800      	cmp	r0, #0
 800563c:	f43e aec1 	beq.w	80043c2 <CLI_proc+0x1e>
								config.BME280_h_use = 0;
 8005640:	494f      	ldr	r1, [pc, #316]	@ (8005780 <CLI_proc+0x13dc>)
								BME280.hum.use_meas = 0;
 8005642:	4b50      	ldr	r3, [pc, #320]	@ (8005784 <CLI_proc+0x13e0>)
								config.BME280_h_use = 0;
 8005644:	f891 4025 	ldrb.w	r4, [r1, #37]	@ 0x25
								BME280.hum.use_meas = 0;
 8005648:	7a9a      	ldrb	r2, [r3, #10]
								printf("BME280 humidity measure disable\r\n");
 800564a:	485f      	ldr	r0, [pc, #380]	@ (80057c8 <CLI_proc+0x1424>)
								config.BME280_h_use = 0;
 800564c:	f36f 1486 	bfc	r4, #6, #1
								BME280.hum.use_meas = 0;
 8005650:	f36f 0200 	bfc	r2, #0, #1
								config.BME280_h_use = 0;
 8005654:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
								DPS368.press.use_meas = 0;
 8005658:	729a      	strb	r2, [r3, #10]
 800565a:	e469      	b.n	8004f30 <CLI_proc+0xb8c>
							if((strstr(clibuf+17, "offset ")))
 800565c:	4955      	ldr	r1, [pc, #340]	@ (80057b4 <CLI_proc+0x1410>)
 800565e:	f00b fa53 	bl	8010b08 <strstr>
 8005662:	b1b0      	cbz	r0, 8005692 <CLI_proc+0x12ee>
					            getFloat(clibuf+24, &tmp, -500, 500);
 8005664:	eddf 0a59 	vldr	s1, [pc, #356]	@ 80057cc <CLI_proc+0x1428>
 8005668:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 80057d0 <CLI_proc+0x142c>
 800566c:	a904      	add	r1, sp, #16
 800566e:	1de8      	adds	r0, r5, #7
 8005670:	f7fe fd12 	bl	8004098 <getFloat>
					            config.BME280_p_offset = tmp;
 8005674:	4b42      	ldr	r3, [pc, #264]	@ (8005780 <CLI_proc+0x13dc>)
					            BME280.press.offset = tmp;
 8005676:	4943      	ldr	r1, [pc, #268]	@ (8005784 <CLI_proc+0x13e0>)
					            config.BME280_p_offset = tmp;
 8005678:	9804      	ldr	r0, [sp, #16]
 800567a:	f8c3 002e 	str.w	r0, [r3, #46]	@ 0x2e
					            BME280.press.offset = tmp;
 800567e:	6188      	str	r0, [r1, #24]
					            printf("BME280 pressure offset %.6f\r\n",tmp);
 8005680:	f7fa ffa2 	bl	80005c8 <__aeabi_f2d>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4852      	ldr	r0, [pc, #328]	@ (80057d4 <CLI_proc+0x1430>)
 800568a:	f00b f83b 	bl	8010704 <iprintf>
								Save_config();
 800568e:	f7fb feb9 	bl	8001404 <Save_config>
							if((strstr(clibuf+17, "en")))
 8005692:	494a      	ldr	r1, [pc, #296]	@ (80057bc <CLI_proc+0x1418>)
 8005694:	4844      	ldr	r0, [pc, #272]	@ (80057a8 <CLI_proc+0x1404>)
 8005696:	f00b fa37 	bl	8010b08 <strstr>
 800569a:	b180      	cbz	r0, 80056be <CLI_proc+0x131a>
								config.BME280_p_use = 1;
 800569c:	4838      	ldr	r0, [pc, #224]	@ (8005780 <CLI_proc+0x13dc>)
								BME280.press.use_meas = 1;
 800569e:	4939      	ldr	r1, [pc, #228]	@ (8005784 <CLI_proc+0x13e0>)
								config.BME280_p_use = 1;
 80056a0:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
								BME280.press.use_meas = 1;
 80056a4:	7ccb      	ldrb	r3, [r1, #19]
								config.BME280_p_use = 1;
 80056a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
								BME280.press.use_meas = 1;
 80056aa:	f043 0301 	orr.w	r3, r3, #1
								config.BME280_p_use = 1;
 80056ae:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
								printf("BME280 pressure measure enabled\r\n");
 80056b2:	4849      	ldr	r0, [pc, #292]	@ (80057d8 <CLI_proc+0x1434>)
								BME280.press.use_meas = 1;
 80056b4:	74cb      	strb	r3, [r1, #19]
								printf("BME280 pressure measure enabled\r\n");
 80056b6:	f00b f88d 	bl	80107d4 <puts>
								Save_config();
 80056ba:	f7fb fea3 	bl	8001404 <Save_config>
							if((strstr(clibuf+17, "dis")))
 80056be:	4941      	ldr	r1, [pc, #260]	@ (80057c4 <CLI_proc+0x1420>)
 80056c0:	4839      	ldr	r0, [pc, #228]	@ (80057a8 <CLI_proc+0x1404>)
 80056c2:	f00b fa21 	bl	8010b08 <strstr>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	f43f af76 	beq.w	80055b8 <CLI_proc+0x1214>
								config.BME280_p_use = 0;
 80056cc:	492c      	ldr	r1, [pc, #176]	@ (8005780 <CLI_proc+0x13dc>)
								BME280.press.use_meas = 0;
 80056ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005784 <CLI_proc+0x13e0>)
								config.BME280_p_use = 0;
 80056d0:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
								BME280.press.use_meas = 0;
 80056d4:	7cda      	ldrb	r2, [r3, #19]
								config.BME280_p_use = 0;
 80056d6:	f36f 10c7 	bfc	r0, #7, #1
								BME280.press.use_meas = 0;
 80056da:	f36f 0200 	bfc	r2, #0, #1
								config.BME280_p_use = 0;
 80056de:	f881 0025 	strb.w	r0, [r1, #37]	@ 0x25
								printf("BME280 pressure measure disable\r\n");
 80056e2:	483e      	ldr	r0, [pc, #248]	@ (80057dc <CLI_proc+0x1438>)
								BME280.press.use_meas = 0;
 80056e4:	74da      	strb	r2, [r3, #19]
								printf("BME280 pressure measure disable\r\n");
 80056e6:	f00b f875 	bl	80107d4 <puts>
								Save_config();
 80056ea:	f7fb fe8b 	bl	8001404 <Save_config>
 80056ee:	e763      	b.n	80055b8 <CLI_proc+0x1214>
							if((strstr(clibuf+22, "offset ")))
 80056f0:	4930      	ldr	r1, [pc, #192]	@ (80057b4 <CLI_proc+0x1410>)
 80056f2:	f00b fa09 	bl	8010b08 <strstr>
 80056f6:	b1b0      	cbz	r0, 8005726 <CLI_proc+0x1382>
					            getFloat(clibuf+29, &tmp, MIN_OFFSET, MAX_OFFSET);
 80056f8:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80056fc:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8005700:	a904      	add	r1, sp, #16
 8005702:	1de8      	adds	r0, r5, #7
 8005704:	f7fe fcc8 	bl	8004098 <getFloat>
					            config.SHT3_t_offset = tmp;
 8005708:	4b1d      	ldr	r3, [pc, #116]	@ (8005780 <CLI_proc+0x13dc>)
					            SHT3.temp.offset = tmp;
 800570a:	4935      	ldr	r1, [pc, #212]	@ (80057e0 <CLI_proc+0x143c>)
					            config.SHT3_t_offset = tmp;
 800570c:	9804      	ldr	r0, [sp, #16]
 800570e:	6118      	str	r0, [r3, #16]
					            SHT3.temp.offset = tmp;
 8005710:	f8c1 0006 	str.w	r0, [r1, #6]
					            printf("SHTC3 temperature offset %.6f\r\n",tmp);
 8005714:	f7fa ff58 	bl	80005c8 <__aeabi_f2d>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4831      	ldr	r0, [pc, #196]	@ (80057e4 <CLI_proc+0x1440>)
 800571e:	f00a fff1 	bl	8010704 <iprintf>
								Save_config();
 8005722:	f7fb fe6f 	bl	8001404 <Save_config>
							if((strstr(clibuf+22, "en")))
 8005726:	4925      	ldr	r1, [pc, #148]	@ (80057bc <CLI_proc+0x1418>)
 8005728:	482f      	ldr	r0, [pc, #188]	@ (80057e8 <CLI_proc+0x1444>)
 800572a:	f00b f9ed 	bl	8010b08 <strstr>
 800572e:	b170      	cbz	r0, 800574e <CLI_proc+0x13aa>
								config.SHT3_t_use = 1;
 8005730:	4813      	ldr	r0, [pc, #76]	@ (8005780 <CLI_proc+0x13dc>)
								SHT3.temp.use_meas = 1;
 8005732:	492b      	ldr	r1, [pc, #172]	@ (80057e0 <CLI_proc+0x143c>)
								config.SHT3_t_use = 1;
 8005734:	7bc2      	ldrb	r2, [r0, #15]
								SHT3.temp.use_meas = 1;
 8005736:	784b      	ldrb	r3, [r1, #1]
								config.SHT3_t_use = 1;
 8005738:	f042 0220 	orr.w	r2, r2, #32
								SHT3.temp.use_meas = 1;
 800573c:	f043 0301 	orr.w	r3, r3, #1
								config.SHT3_t_use = 1;
 8005740:	73c2      	strb	r2, [r0, #15]
								printf("SHTC3 temperature measure enabled\r\n");
 8005742:	482a      	ldr	r0, [pc, #168]	@ (80057ec <CLI_proc+0x1448>)
								SHT3.temp.use_meas = 1;
 8005744:	704b      	strb	r3, [r1, #1]
								printf("SHTC3 temperature measure enabled\r\n");
 8005746:	f00b f845 	bl	80107d4 <puts>
								Save_config();
 800574a:	f7fb fe5b 	bl	8001404 <Save_config>
							if((strstr(clibuf+22, "dis")))
 800574e:	491d      	ldr	r1, [pc, #116]	@ (80057c4 <CLI_proc+0x1420>)
 8005750:	4825      	ldr	r0, [pc, #148]	@ (80057e8 <CLI_proc+0x1444>)
 8005752:	f00b f9d9 	bl	8010b08 <strstr>
 8005756:	2800      	cmp	r0, #0
 8005758:	f43f ae4f 	beq.w	80053fa <CLI_proc+0x1056>
								config.SHT3_t_use = 0;
 800575c:	4908      	ldr	r1, [pc, #32]	@ (8005780 <CLI_proc+0x13dc>)
								SHT3.temp.use_meas = 0;
 800575e:	4b20      	ldr	r3, [pc, #128]	@ (80057e0 <CLI_proc+0x143c>)
								config.SHT3_t_use = 0;
 8005760:	7bc8      	ldrb	r0, [r1, #15]
								SHT3.temp.use_meas = 0;
 8005762:	785a      	ldrb	r2, [r3, #1]
								config.SHT3_t_use = 0;
 8005764:	f36f 1045 	bfc	r0, #5, #1
								SHT3.temp.use_meas = 0;
 8005768:	f36f 0200 	bfc	r2, #0, #1
								config.SHT3_t_use = 0;
 800576c:	73c8      	strb	r0, [r1, #15]
								printf("SHTC3 temperature measure disable\r\n");
 800576e:	4820      	ldr	r0, [pc, #128]	@ (80057f0 <CLI_proc+0x144c>)
								SHT3.temp.use_meas = 0;
 8005770:	705a      	strb	r2, [r3, #1]
								printf("SHTC3 temperature measure disable\r\n");
 8005772:	f00b f82f 	bl	80107d4 <puts>
								Save_config();
 8005776:	f7fb fe45 	bl	8001404 <Save_config>
 800577a:	e63e      	b.n	80053fa <CLI_proc+0x1056>
 800577c:	080155a8 	.word	0x080155a8
 8005780:	200019c0 	.word	0x200019c0
 8005784:	20001b00 	.word	0x20001b00
 8005788:	0801595c 	.word	0x0801595c
 800578c:	080155c8 	.word	0x080155c8
 8005790:	08015974 	.word	0x08015974
 8005794:	080155e8 	.word	0x080155e8
 8005798:	20000da0 	.word	0x20000da0
 800579c:	08015610 	.word	0x08015610
 80057a0:	20000da7 	.word	0x20000da7
 80057a4:	0801587c 	.word	0x0801587c
 80057a8:	20000da1 	.word	0x20000da1
 80057ac:	0801575c 	.word	0x0801575c
 80057b0:	20000d9f 	.word	0x20000d9f
 80057b4:	08015620 	.word	0x08015620
 80057b8:	08015a60 	.word	0x08015a60
 80057bc:	0801564c 	.word	0x0801564c
 80057c0:	08015a80 	.word	0x08015a80
 80057c4:	08015674 	.word	0x08015674
 80057c8:	08015aa4 	.word	0x08015aa4
 80057cc:	43fa0000 	.word	0x43fa0000
 80057d0:	c3fa0000 	.word	0xc3fa0000
 80057d4:	080159f8 	.word	0x080159f8
 80057d8:	08015a18 	.word	0x08015a18
 80057dc:	08015a3c 	.word	0x08015a3c
 80057e0:	20001b48 	.word	0x20001b48
 80057e4:	080156f4 	.word	0x080156f4
 80057e8:	20000da6 	.word	0x20000da6
 80057ec:	08015714 	.word	0x08015714
 80057f0:	08015738 	.word	0x08015738
							if((strstr(clibuf+23, "offset ")))
 80057f4:	4925      	ldr	r1, [pc, #148]	@ (800588c <CLI_proc+0x14e8>)
 80057f6:	f00b f987 	bl	8010b08 <strstr>
 80057fa:	b1b8      	cbz	r0, 800582c <CLI_proc+0x1488>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 80057fc:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8005800:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8005804:	a904      	add	r1, sp, #16
 8005806:	1de8      	adds	r0, r5, #7
 8005808:	f7fe fc46 	bl	8004098 <getFloat>
					            config.BME280_t_offset = tmp;
 800580c:	4b20      	ldr	r3, [pc, #128]	@ (8005890 <CLI_proc+0x14ec>)
					            BME280.temp.offset = tmp;
 800580e:	4921      	ldr	r1, [pc, #132]	@ (8005894 <CLI_proc+0x14f0>)
					            config.BME280_t_offset = tmp;
 8005810:	9804      	ldr	r0, [sp, #16]
 8005812:	f8c3 0026 	str.w	r0, [r3, #38]	@ 0x26
					            BME280.temp.offset = tmp;
 8005816:	f8c1 0006 	str.w	r0, [r1, #6]
					            printf("BME280 temperature offset %.6f\r\n",tmp);
 800581a:	f7fa fed5 	bl	80005c8 <__aeabi_f2d>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	481d      	ldr	r0, [pc, #116]	@ (8005898 <CLI_proc+0x14f4>)
 8005824:	f00a ff6e 	bl	8010704 <iprintf>
								Save_config();
 8005828:	f7fb fdec 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "en")))
 800582c:	491b      	ldr	r1, [pc, #108]	@ (800589c <CLI_proc+0x14f8>)
 800582e:	481c      	ldr	r0, [pc, #112]	@ (80058a0 <CLI_proc+0x14fc>)
 8005830:	f00b f96a 	bl	8010b08 <strstr>
 8005834:	b180      	cbz	r0, 8005858 <CLI_proc+0x14b4>
								config.BME280_t_use = 1;
 8005836:	4816      	ldr	r0, [pc, #88]	@ (8005890 <CLI_proc+0x14ec>)
								BME280.temp.use_meas = 1;
 8005838:	4916      	ldr	r1, [pc, #88]	@ (8005894 <CLI_proc+0x14f0>)
								config.BME280_t_use = 1;
 800583a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
								BME280.temp.use_meas = 1;
 800583e:	784b      	ldrb	r3, [r1, #1]
								config.BME280_t_use = 1;
 8005840:	f042 0220 	orr.w	r2, r2, #32
								BME280.temp.use_meas = 1;
 8005844:	f043 0301 	orr.w	r3, r3, #1
								config.BME280_t_use = 1;
 8005848:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
								printf("BME280 temperature measure enabled\r\n");
 800584c:	4815      	ldr	r0, [pc, #84]	@ (80058a4 <CLI_proc+0x1500>)
								BME280.temp.use_meas = 1;
 800584e:	704b      	strb	r3, [r1, #1]
								printf("BME280 temperature measure enabled\r\n");
 8005850:	f00a ffc0 	bl	80107d4 <puts>
								Save_config();
 8005854:	f7fb fdd6 	bl	8001404 <Save_config>
							if((strstr(clibuf+23, "dis")))
 8005858:	4913      	ldr	r1, [pc, #76]	@ (80058a8 <CLI_proc+0x1504>)
 800585a:	4811      	ldr	r0, [pc, #68]	@ (80058a0 <CLI_proc+0x14fc>)
 800585c:	f00b f954 	bl	8010b08 <strstr>
 8005860:	2800      	cmp	r0, #0
 8005862:	f43f aea1 	beq.w	80055a8 <CLI_proc+0x1204>
								config.BME280_t_use = 0;
 8005866:	490a      	ldr	r1, [pc, #40]	@ (8005890 <CLI_proc+0x14ec>)
								BME280.temp.use_meas = 0;
 8005868:	4b0a      	ldr	r3, [pc, #40]	@ (8005894 <CLI_proc+0x14f0>)
								config.BME280_t_use = 0;
 800586a:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
								BME280.temp.use_meas = 0;
 800586e:	785a      	ldrb	r2, [r3, #1]
								config.BME280_t_use = 0;
 8005870:	f36f 1045 	bfc	r0, #5, #1
								BME280.temp.use_meas = 0;
 8005874:	f36f 0200 	bfc	r2, #0, #1
								config.BME280_t_use = 0;
 8005878:	f881 0025 	strb.w	r0, [r1, #37]	@ 0x25
								printf("BME280 temperature measure disable\r\n");
 800587c:	480b      	ldr	r0, [pc, #44]	@ (80058ac <CLI_proc+0x1508>)
								BME280.temp.use_meas = 0;
 800587e:	705a      	strb	r2, [r3, #1]
								printf("BME280 temperature measure disable\r\n");
 8005880:	f00a ffa8 	bl	80107d4 <puts>
								Save_config();
 8005884:	f7fb fdbe 	bl	8001404 <Save_config>
 8005888:	e68e      	b.n	80055a8 <CLI_proc+0x1204>
 800588a:	bf00      	nop
 800588c:	08015620 	.word	0x08015620
 8005890:	200019c0 	.word	0x200019c0
 8005894:	20001b00 	.word	0x20001b00
 8005898:	0801598c 	.word	0x0801598c
 800589c:	0801564c 	.word	0x0801564c
 80058a0:	20000da7 	.word	0x20000da7
 80058a4:	080159b0 	.word	0x080159b0
 80058a8:	08015674 	.word	0x08015674
 80058ac:	080159d4 	.word	0x080159d4

080058b0 <CLI>:
    return (huart1.RxXferSize-huart1.RxXferCount+DEBUG_BUF_SIZE-debug_rxtail) % DEBUG_BUF_SIZE;
 80058b0:	4a15      	ldr	r2, [pc, #84]	@ (8005908 <CLI+0x58>)
 80058b2:	f8b2 305a 	ldrh.w	r3, [r2, #90]	@ 0x5a
void CLI() {
 80058b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (huart1.RxXferSize-huart1.RxXferCount+DEBUG_BUF_SIZE-debug_rxtail) % DEBUG_BUF_SIZE;
 80058ba:	f8b2 4058 	ldrh.w	r4, [r2, #88]	@ 0x58
 80058be:	4e13      	ldr	r6, [pc, #76]	@ (800590c <CLI+0x5c>)
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	1ae4      	subs	r4, r4, r3
 80058c4:	8832      	ldrh	r2, [r6, #0]
 80058c6:	3440      	adds	r4, #64	@ 0x40
 80058c8:	1aa4      	subs	r4, r4, r2
 80058ca:	4263      	negs	r3, r4
 80058cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058d0:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 80058d4:	bf58      	it	pl
 80058d6:	425c      	negpl	r4, r3
 80058d8:	b2a4      	uxth	r4, r4
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 80058da:	b194      	cbz	r4, 8005902 <CLI+0x52>
 80058dc:	2500      	movs	r5, #0
 80058de:	4f0c      	ldr	r7, [pc, #48]	@ (8005910 <CLI+0x60>)
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 80058e0:	46a8      	mov	r8, r5
 80058e2:	e000      	b.n	80058e6 <CLI+0x36>
    uint8_t tmp = debug_rx_buf[debug_rxtail++];
 80058e4:	8832      	ldrh	r2, [r6, #0]
 80058e6:	5cb8      	ldrb	r0, [r7, r2]
 80058e8:	1c53      	adds	r3, r2, #1
 80058ea:	b29b      	uxth	r3, r3
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 80058ec:	2b3f      	cmp	r3, #63	@ 0x3f
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 80058ee:	f105 0501 	add.w	r5, r5, #1
    uint8_t tmp = debug_rx_buf[debug_rxtail++];
 80058f2:	8033      	strh	r3, [r6, #0]
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 80058f4:	bf88      	it	hi
 80058f6:	f8a6 8000 	strhhi.w	r8, [r6]
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 80058fa:	f7fe fd53 	bl	80043a4 <CLI_proc>
 80058fe:	42a5      	cmp	r5, r4
 8005900:	d1f0      	bne.n	80058e4 <CLI+0x34>
}
 8005902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005906:	bf00      	nop
 8005908:	200016d4 	.word	0x200016d4
 800590c:	200015d6 	.word	0x200015d6
 8005910:	200015d8 	.word	0x200015d8

08005914 <cmox_ll_init>:
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  __HAL_RCC_CRC_RELEASE_RESET();
 8005914:	4b08      	ldr	r3, [pc, #32]	@ (8005938 <cmox_ll_init+0x24>)
 8005916:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005918:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800591c:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_CRC_CLK_ENABLE();
 800591e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005920:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005924:	649a      	str	r2, [r3, #72]	@ 0x48
 8005926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
 8005928:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 800592a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	9b01      	ldr	r3, [sp, #4]
  return CMOX_INIT_SUCCESS;
}
 8005932:	2000      	movs	r0, #0
 8005934:	b002      	add	sp, #8
 8005936:	4770      	bx	lr
 8005938:	40021000 	.word	0x40021000

0800593c <DPS368_check>:

DPS_coeff_t DPS_coef;
volatile int32_t Kt_coef, Kp_coef;

uint8_t DPS368_check()
{
 800593c:	b510      	push	{r4, lr}
 800593e:	b082      	sub	sp, #8
	uint8_t value;
	SET_DPS368();
 8005940:	f003 fb9c 	bl	800907c <SET_DPS368>
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, DPS368_ADDR, 3, 150);
 8005944:	4812      	ldr	r0, [pc, #72]	@ (8005990 <DPS368_check+0x54>)
 8005946:	2396      	movs	r3, #150	@ 0x96
 8005948:	2203      	movs	r2, #3
 800594a:	21ee      	movs	r1, #238	@ 0xee
 800594c:	f005 ff7e 	bl	800b84c <HAL_I2C_IsDeviceReady>
 8005950:	4604      	mov	r4, r0
	osDelay(100);
 8005952:	2064      	movs	r0, #100	@ 0x64
 8005954:	f007 ff10 	bl	800d778 <osDelay>
	if (status == HAL_OK) {
 8005958:	b9b4      	cbnz	r4, 8005988 <DPS368_check+0x4c>
		i2c_read8(&hi2c2, DPS368_REG_ID, &value, DPS368_ADDR);
 800595a:	23ee      	movs	r3, #238	@ 0xee
 800595c:	480c      	ldr	r0, [pc, #48]	@ (8005990 <DPS368_check+0x54>)
 800595e:	f10d 0207 	add.w	r2, sp, #7
 8005962:	210d      	movs	r1, #13
 8005964:	f003 fade 	bl	8008f24 <i2c_read8>
		if(value == DPS368_ID_CHK) {printf("DPS368 OK\r\n"); return 1;} else {printf("NOT DPS368\r\n"); return 0;}
 8005968:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800596c:	2b10      	cmp	r3, #16
 800596e:	d005      	beq.n	800597c <DPS368_check+0x40>
 8005970:	4808      	ldr	r0, [pc, #32]	@ (8005994 <DPS368_check+0x58>)
 8005972:	f00a ff2f 	bl	80107d4 <puts>
 8005976:	2000      	movs	r0, #0
	} else {printf("DPS368 FAILED\r\n"); return 0;}
	return 0;
}
 8005978:	b002      	add	sp, #8
 800597a:	bd10      	pop	{r4, pc}
		if(value == DPS368_ID_CHK) {printf("DPS368 OK\r\n"); return 1;} else {printf("NOT DPS368\r\n"); return 0;}
 800597c:	4806      	ldr	r0, [pc, #24]	@ (8005998 <DPS368_check+0x5c>)
 800597e:	f00a ff29 	bl	80107d4 <puts>
 8005982:	2001      	movs	r0, #1
}
 8005984:	b002      	add	sp, #8
 8005986:	bd10      	pop	{r4, pc}
	} else {printf("DPS368 FAILED\r\n"); return 0;}
 8005988:	4804      	ldr	r0, [pc, #16]	@ (800599c <DPS368_check+0x60>)
 800598a:	f00a ff23 	bl	80107d4 <puts>
 800598e:	e7f2      	b.n	8005976 <DPS368_check+0x3a>
 8005990:	200017ac 	.word	0x200017ac
 8005994:	08015c9c 	.word	0x08015c9c
 8005998:	08015c90 	.word	0x08015c90
 800599c:	08015ca8 	.word	0x08015ca8

080059a0 <DPS368_read_coeff>:
    }
}


void DPS368_read_coeff()
{
 80059a0:	b500      	push	{lr}
 80059a2:	b08b      	sub	sp, #44	@ 0x2c
	uint8_t regs[18];
	SET_DPS368();
 80059a4:	f003 fb6a 	bl	800907c <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x10, I2C_MEMADD_SIZE_8BIT, regs, 18, 250);
 80059a8:	ab05      	add	r3, sp, #20
 80059aa:	21fa      	movs	r1, #250	@ 0xfa
 80059ac:	2212      	movs	r2, #18
 80059ae:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2210      	movs	r2, #16
 80059b6:	2301      	movs	r3, #1
 80059b8:	21ee      	movs	r1, #238	@ 0xee
 80059ba:	4835      	ldr	r0, [pc, #212]	@ (8005a90 <DPS368_read_coeff+0xf0>)
 80059bc:	f005 fe28 	bl	800b610 <HAL_I2C_Mem_Read>
//	for(uint8_t i=0; i<19;i++){
//		printf("Coef %d : %#x\r\n",i,regs[i]);
//	}
	DPS_coef.C0 = ((uint32_t)regs[0] << 4) | (((uint32_t)regs[1] >> 4) & 0x0F);
 80059c0:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80059c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    getTwosComplement(&DPS_coef.C0, 12);
    // c0 is only used as c0*0.5, so c0_half is calculated immediately
    DPS_coef.C0 = DPS_coef.C0 / 2U;

    // now do the same thing for all other coefficients
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 80059c8:	f89d 0016 	ldrb.w	r0, [sp, #22]
	DPS_coef.C0 = ((uint32_t)regs[0] << 4) | (((uint32_t)regs[1] >> 4) & 0x0F);
 80059cc:	0911      	lsrs	r1, r2, #4
 80059ce:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 80059d2:	0212      	lsls	r2, r2, #8
    if (*raw & ((uint32_t)1 << (length - 1)))
 80059d4:	09db      	lsrs	r3, r3, #7
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 80059d6:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 80059da:	4b2e      	ldr	r3, [pc, #184]	@ (8005a94 <DPS368_read_coeff+0xf4>)
        *raw -= (uint32_t)1 << length;
 80059dc:	bf18      	it	ne
 80059de:	f5a1 5180 	subne.w	r1, r1, #4096	@ 0x1000
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 80059e2:	4310      	orrs	r0, r2
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 80059e4:	0849      	lsrs	r1, r1, #1
    if (*raw & ((uint32_t)1 << (length - 1)))
 80059e6:	0ad2      	lsrs	r2, r2, #11
    getTwosComplement(&DPS_coef.C1, 12);
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 80059e8:	f89d 2018 	ldrb.w	r2, [sp, #24]
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 80059ec:	6019      	str	r1, [r3, #0]
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 80059ee:	bf0c      	ite	eq
 80059f0:	6058      	streq	r0, [r3, #4]
        *raw -= (uint32_t)1 << length;
 80059f2:	f5a0 5180 	subne.w	r1, r0, #4096	@ 0x1000
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 80059f6:	f89d 0017 	ldrb.w	r0, [sp, #23]
        *raw -= (uint32_t)1 << length;
 80059fa:	bf18      	it	ne
 80059fc:	6059      	strne	r1, [r3, #4]
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 80059fe:	0112      	lsls	r2, r2, #4
 8005a00:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8005a04:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 8005a08:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005a0c:	0cd2      	lsrs	r2, r2, #19
        *raw -= (uint32_t)1 << length;
 8005a0e:	bf18      	it	ne
 8005a10:	f5a0 1080 	subne.w	r0, r0, #1048576	@ 0x100000
 8005a14:	6098      	str	r0, [r3, #8]
    getTwosComplement(&DPS_coef.C00, 20);
    DPS_coef.C10 = (((uint32_t)regs[5] & 0x0F) << 16) | ((uint32_t)regs[6] << 8) | (uint32_t)regs[7];
 8005a16:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8005a1a:	0409      	lsls	r1, r1, #16
 8005a1c:	ba52      	rev16	r2, r2
 8005a1e:	f401 2170 	and.w	r1, r1, #983040	@ 0xf0000
 8005a22:	b292      	uxth	r2, r2
 8005a24:	430a      	orrs	r2, r1
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005a26:	0cc9      	lsrs	r1, r1, #19
        *raw -= (uint32_t)1 << length;
 8005a28:	bf18      	it	ne
 8005a2a:	f5a2 1280 	subne.w	r2, r2, #1048576	@ 0x100000
 8005a2e:	60da      	str	r2, [r3, #12]
 8005a30:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8005a34:	ba52      	rev16	r2, r2
 8005a36:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005a38:	0412      	lsls	r2, r2, #16
        *raw -= (uint32_t)1 << length;
 8005a3a:	bf48      	it	mi
 8005a3c:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8005a40:	6119      	str	r1, [r3, #16]
 8005a42:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8005a46:	ba52      	rev16	r2, r2
 8005a48:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005a4a:	0410      	lsls	r0, r2, #16
        *raw -= (uint32_t)1 << length;
 8005a4c:	bf48      	it	mi
 8005a4e:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8005a52:	6159      	str	r1, [r3, #20]
 8005a54:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005a58:	ba52      	rev16	r2, r2
 8005a5a:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005a5c:	0412      	lsls	r2, r2, #16
        *raw -= (uint32_t)1 << length;
 8005a5e:	bf48      	it	mi
 8005a60:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8005a64:	6199      	str	r1, [r3, #24]
 8005a66:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8005a6a:	ba52      	rev16	r2, r2
 8005a6c:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005a6e:	0410      	lsls	r0, r2, #16
        *raw -= (uint32_t)1 << length;
 8005a70:	bf48      	it	mi
 8005a72:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8005a76:	61d9      	str	r1, [r3, #28]
 8005a78:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8005a7c:	ba52      	rev16	r2, r2
 8005a7e:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005a80:	0412      	lsls	r2, r2, #16
        *raw -= (uint32_t)1 << length;
 8005a82:	bf48      	it	mi
 8005a84:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8005a88:	6219      	str	r1, [r3, #32]
//    printf("C0: %ld   C1: %ld\r\n",DPS_coef.C0,DPS_coef.C1);
//    printf("C00: %ld   C01: %ld\r\n",DPS_coef.C00,DPS_coef.C01);
//    printf("C10: %ld   C11: %ld\r\n",DPS_coef.C10,DPS_coef.C11);
//    printf("C20: %ld   C21: %ld\r\n",DPS_coef.C20,DPS_coef.C21);
//    printf("C30: %ld\r\n",DPS_coef.C30);
}
 8005a8a:	b00b      	add	sp, #44	@ 0x2c
 8005a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a90:	200017ac 	.word	0x200017ac
 8005a94:	20001624 	.word	0x20001624

08005a98 <DPS368_fifo>:
	printf("CFG REG 0x09 DUMP (hex): %#x\r\n",reg);
	printbinaryMSB(reg);
}

void DPS368_fifo(uint8_t endis)
{
 8005a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t reg;
	SET_DPS368();
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005a9c:	4f13      	ldr	r7, [pc, #76]	@ (8005aec <DPS368_fifo+0x54>)
{
 8005a9e:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005aa0:	2401      	movs	r4, #1
 8005aa2:	f10d 0517 	add.w	r5, sp, #23
 8005aa6:	f04f 08fa 	mov.w	r8, #250	@ 0xfa
{
 8005aaa:	4606      	mov	r6, r0
	SET_DPS368();
 8005aac:	f003 fae6 	bl	800907c <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005ab0:	4623      	mov	r3, r4
 8005ab2:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8005ab6:	9500      	str	r5, [sp, #0]
 8005ab8:	2209      	movs	r2, #9
 8005aba:	21ee      	movs	r1, #238	@ 0xee
 8005abc:	4638      	mov	r0, r7
 8005abe:	f005 fda7 	bl	800b610 <HAL_I2C_Mem_Read>
//	printf("(fifo) CFG REG READ (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	setBit(&reg,1,endis);
 8005ac2:	4632      	mov	r2, r6
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f003 fa80 	bl	8008fcc <setBit>
//	printf("SET FIFO EN\r\n");
//	printf("(fifo) CFG REG WRITE (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005acc:	4623      	mov	r3, r4
 8005ace:	2209      	movs	r2, #9
 8005ad0:	21ee      	movs	r1, #238	@ 0xee
 8005ad2:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8005ad6:	9500      	str	r5, [sp, #0]
 8005ad8:	4638      	mov	r0, r7
 8005ada:	f005 fc73 	bl	800b3c4 <HAL_I2C_Mem_Write>
	osDelay(1);
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f007 fe4a 	bl	800d778 <osDelay>
}
 8005ae4:	b006      	add	sp, #24
 8005ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aea:	bf00      	nop
 8005aec:	200017ac 	.word	0x200017ac

08005af0 <DPS368_conf_int>:

void DPS368_conf_int(uint8_t ints)
{
 8005af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t reg;
	SET_DPS368();
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005af4:	4f13      	ldr	r7, [pc, #76]	@ (8005b44 <DPS368_conf_int+0x54>)
{
 8005af6:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005af8:	2401      	movs	r4, #1
 8005afa:	f10d 0517 	add.w	r5, sp, #23
 8005afe:	f04f 08fa 	mov.w	r8, #250	@ 0xfa
{
 8005b02:	4606      	mov	r6, r0
	SET_DPS368();
 8005b04:	f003 faba 	bl	800907c <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005b08:	4623      	mov	r3, r4
 8005b0a:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8005b0e:	9500      	str	r5, [sp, #0]
 8005b10:	21ee      	movs	r1, #238	@ 0xee
 8005b12:	2209      	movs	r2, #9
 8005b14:	4638      	mov	r0, r7
 8005b16:	f005 fd7b 	bl	800b610 <HAL_I2C_Mem_Read>
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	modifyRegister(&reg, 0xF0, ints);
 8005b1a:	4632      	mov	r2, r6
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	21f0      	movs	r1, #240	@ 0xf0
 8005b20:	f003 fa6a 	bl	8008ff8 <modifyRegister>
//	printf("SET INT \r\n");
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005b24:	4623      	mov	r3, r4
 8005b26:	2209      	movs	r2, #9
 8005b28:	21ee      	movs	r1, #238	@ 0xee
 8005b2a:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8005b2e:	9500      	str	r5, [sp, #0]
 8005b30:	4638      	mov	r0, r7
 8005b32:	f005 fc47 	bl	800b3c4 <HAL_I2C_Mem_Write>
	osDelay(1);
 8005b36:	4620      	mov	r0, r4
 8005b38:	f007 fe1e 	bl	800d778 <osDelay>
}
 8005b3c:	b006      	add	sp, #24
 8005b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b42:	bf00      	nop
 8005b44:	200017ac 	.word	0x200017ac

08005b48 <DPS368_temp_source>:

void DPS368_temp_source()
{
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	b086      	sub	sp, #24
	uint8_t reg, reg_mod;
	SET_DPS368();
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8005b4c:	2401      	movs	r4, #1
 8005b4e:	f10d 0517 	add.w	r5, sp, #23
 8005b52:	26fa      	movs	r6, #250	@ 0xfa
	SET_DPS368();
 8005b54:	f003 fa92 	bl	800907c <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8005b58:	4623      	mov	r3, r4
 8005b5a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005b5e:	2207      	movs	r2, #7
 8005b60:	9500      	str	r5, [sp, #0]
 8005b62:	21ee      	movs	r1, #238	@ 0xee
 8005b64:	4811      	ldr	r0, [pc, #68]	@ (8005bac <DPS368_temp_source+0x64>)
 8005b66:	f005 fd53 	bl	800b610 <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x07 (hex) (NOMOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x28, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005b6a:	f10d 0316 	add.w	r3, sp, #22
 8005b6e:	2228      	movs	r2, #40	@ 0x28
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005b76:	4623      	mov	r3, r4
 8005b78:	21ee      	movs	r1, #238	@ 0xee
 8005b7a:	480c      	ldr	r0, [pc, #48]	@ (8005bac <DPS368_temp_source+0x64>)
 8005b7c:	f005 fd48 	bl	800b610 <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x28 (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	if((reg & 0x80) == 0) {
 8005b80:	f99d 3016 	ldrsb.w	r3, [sp, #22]
 8005b84:	2b00      	cmp	r3, #0
//		printf("Internal Temp\r\n");
		setBit(&reg_mod, 7, 0);
 8005b86:	bfac      	ite	ge
 8005b88:	2200      	movge	r2, #0
	} else {
//		printf("External Temp\r\n");
		setBit(&reg_mod, 7, 1);
 8005b8a:	4622      	movlt	r2, r4
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	2107      	movs	r1, #7
 8005b90:	f003 fa1c 	bl	8008fcc <setBit>
		}
//	printf("CFG TEMP SRC 0x07 (hex) (MOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8005b94:	2301      	movs	r3, #1
 8005b96:	22fa      	movs	r2, #250	@ 0xfa
 8005b98:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b9c:	9500      	str	r5, [sp, #0]
 8005b9e:	2207      	movs	r2, #7
 8005ba0:	21ee      	movs	r1, #238	@ 0xee
 8005ba2:	4802      	ldr	r0, [pc, #8]	@ (8005bac <DPS368_temp_source+0x64>)
 8005ba4:	f005 fc0e 	bl	800b3c4 <HAL_I2C_Mem_Write>

}
 8005ba8:	b006      	add	sp, #24
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	200017ac 	.word	0x200017ac

08005bb0 <DPS368_conf_temp>:


void DPS368_conf_temp(uint8_t ovr, uint8_t rate)
{
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	460d      	mov	r5, r1
	uint8_t reg;
	SET_DPS368();
	reg = ovr + rate;
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005bb8:	f10d 0617 	add.w	r6, sp, #23
	SET_DPS368();
 8005bbc:	f003 fa5e 	bl	800907c <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	22fa      	movs	r2, #250	@ 0xfa
 8005bc4:	e9cd 3201 	strd	r3, r2, [sp, #4]
	reg = ovr + rate;
 8005bc8:	4425      	add	r5, r4
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005bca:	9600      	str	r6, [sp, #0]
 8005bcc:	2207      	movs	r2, #7
 8005bce:	21ee      	movs	r1, #238	@ 0xee
 8005bd0:	4835      	ldr	r0, [pc, #212]	@ (8005ca8 <DPS368_conf_temp+0xf8>)
	reg = ovr + rate;
 8005bd2:	f88d 5017 	strb.w	r5, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005bd6:	f005 fbf5 	bl	800b3c4 <HAL_I2C_Mem_Write>
    switch (ovr)
 8005bda:	2c07      	cmp	r4, #7
 8005bdc:	d858      	bhi.n	8005c90 <DPS368_conf_temp+0xe0>
 8005bde:	e8df f004 	tbb	[pc, r4]
 8005be2:	3925      	.short	0x3925
 8005be4:	4d48433e 	.word	0x4d48433e
 8005be8:	0452      	.short	0x0452
        case DPS_OVERSAMPLE_64:
        	Kt_coef = DPS_OSR_SF_64;
            break;

        case DPS_OVERSAMPLE_128:
        	Kt_coef = DPS_OSR_SF_128;
 8005bea:	4b30      	ldr	r3, [pc, #192]	@ (8005cac <DPS368_conf_temp+0xfc>)
 8005bec:	f44f 12ff 	mov.w	r2, #2088960	@ 0x1fe000
 8005bf0:	601a      	str	r2, [r3, #0]
            break;
    }
//    printf("Kt_coef set: %lu\r\n",Kt_coef);

   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005bf2:	22fa      	movs	r2, #250	@ 0xfa
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005bfa:	482b      	ldr	r0, [pc, #172]	@ (8005ca8 <DPS368_conf_temp+0xf8>)
 8005bfc:	9600      	str	r6, [sp, #0]
 8005bfe:	2209      	movs	r2, #9
 8005c00:	21ee      	movs	r1, #238	@ 0xee
 8005c02:	f005 fd05 	bl	800b610 <HAL_I2C_Mem_Read>
    if(ovr > DPS_OVERSAMPLE_8) setBit(&reg, 3, 1);
 8005c06:	2201      	movs	r2, #1
 8005c08:	2103      	movs	r1, #3
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f003 f9de 	bl	8008fcc <setBit>
    else setBit(&reg, 3, 0);
   	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005c10:	2301      	movs	r3, #1
 8005c12:	21fa      	movs	r1, #250	@ 0xfa
 8005c14:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8005c18:	2209      	movs	r2, #9
 8005c1a:	21ee      	movs	r1, #238	@ 0xee
 8005c1c:	9600      	str	r6, [sp, #0]
 8005c1e:	4822      	ldr	r0, [pc, #136]	@ (8005ca8 <DPS368_conf_temp+0xf8>)
 8005c20:	f005 fbd0 	bl	800b3c4 <HAL_I2C_Mem_Write>

	DPS368_temp_source();
 8005c24:	f7ff ff90 	bl	8005b48 <DPS368_temp_source>

}
 8005c28:	b006      	add	sp, #24
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
            Kt_coef = DPS_OSR_SF_1;
 8005c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8005cac <DPS368_conf_temp+0xfc>)
 8005c2e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005c32:	601a      	str	r2, [r3, #0]
   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005c34:	2301      	movs	r3, #1
 8005c36:	22fa      	movs	r2, #250	@ 0xfa
 8005c38:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c3c:	9600      	str	r6, [sp, #0]
 8005c3e:	2209      	movs	r2, #9
 8005c40:	21ee      	movs	r1, #238	@ 0xee
 8005c42:	4819      	ldr	r0, [pc, #100]	@ (8005ca8 <DPS368_conf_temp+0xf8>)
 8005c44:	f005 fce4 	bl	800b610 <HAL_I2C_Mem_Read>
    else setBit(&reg, 3, 0);
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2103      	movs	r1, #3
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f003 f9bd 	bl	8008fcc <setBit>
 8005c52:	e7dd      	b.n	8005c10 <DPS368_conf_temp+0x60>
        	Kt_coef = DPS_OSR_SF_2;
 8005c54:	4b15      	ldr	r3, [pc, #84]	@ (8005cac <DPS368_conf_temp+0xfc>)
 8005c56:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 8005c5a:	601a      	str	r2, [r3, #0]
            break;
 8005c5c:	e7ea      	b.n	8005c34 <DPS368_conf_temp+0x84>
        	Kt_coef = DPS_OSR_SF_4;
 8005c5e:	4b13      	ldr	r3, [pc, #76]	@ (8005cac <DPS368_conf_temp+0xfc>)
 8005c60:	f44f 1260 	mov.w	r2, #3670016	@ 0x380000
 8005c64:	601a      	str	r2, [r3, #0]
            break;
 8005c66:	e7e5      	b.n	8005c34 <DPS368_conf_temp+0x84>
        	Kt_coef = DPS_OSR_SF_8;
 8005c68:	4b10      	ldr	r3, [pc, #64]	@ (8005cac <DPS368_conf_temp+0xfc>)
 8005c6a:	f44f 02f0 	mov.w	r2, #7864320	@ 0x780000
 8005c6e:	601a      	str	r2, [r3, #0]
            break;
 8005c70:	e7e0      	b.n	8005c34 <DPS368_conf_temp+0x84>
        	Kt_coef = DPS_OSR_SF_16;
 8005c72:	4b0e      	ldr	r3, [pc, #56]	@ (8005cac <DPS368_conf_temp+0xfc>)
 8005c74:	f44f 3278 	mov.w	r2, #253952	@ 0x3e000
 8005c78:	601a      	str	r2, [r3, #0]
            break;
 8005c7a:	e7ba      	b.n	8005bf2 <DPS368_conf_temp+0x42>
        	Kt_coef = DPS_OSR_SF_32;
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cac <DPS368_conf_temp+0xfc>)
 8005c7e:	f44f 22fc 	mov.w	r2, #516096	@ 0x7e000
 8005c82:	601a      	str	r2, [r3, #0]
            break;
 8005c84:	e7b5      	b.n	8005bf2 <DPS368_conf_temp+0x42>
        	Kt_coef = DPS_OSR_SF_64;
 8005c86:	4b09      	ldr	r3, [pc, #36]	@ (8005cac <DPS368_conf_temp+0xfc>)
 8005c88:	f44f 227e 	mov.w	r2, #1040384	@ 0xfe000
 8005c8c:	601a      	str	r2, [r3, #0]
            break;
 8005c8e:	e7b0      	b.n	8005bf2 <DPS368_conf_temp+0x42>
   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005c90:	2301      	movs	r3, #1
 8005c92:	22fa      	movs	r2, #250	@ 0xfa
 8005c94:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c98:	9600      	str	r6, [sp, #0]
 8005c9a:	2209      	movs	r2, #9
 8005c9c:	21ee      	movs	r1, #238	@ 0xee
 8005c9e:	4802      	ldr	r0, [pc, #8]	@ (8005ca8 <DPS368_conf_temp+0xf8>)
 8005ca0:	f005 fcb6 	bl	800b610 <HAL_I2C_Mem_Read>
    if(ovr > DPS_OVERSAMPLE_8) setBit(&reg, 3, 1);
 8005ca4:	e7af      	b.n	8005c06 <DPS368_conf_temp+0x56>
 8005ca6:	bf00      	nop
 8005ca8:	200017ac 	.word	0x200017ac
 8005cac:	20001620 	.word	0x20001620

08005cb0 <DPS368_conf_press>:

void DPS368_conf_press(uint8_t ovr, uint8_t rate)
{
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	460d      	mov	r5, r1
	uint8_t reg;
	SET_DPS368();
	reg = ovr + rate;
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005cb8:	f10d 0617 	add.w	r6, sp, #23
	SET_DPS368();
 8005cbc:	f003 f9de 	bl	800907c <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	22fa      	movs	r2, #250	@ 0xfa
 8005cc4:	e9cd 3201 	strd	r3, r2, [sp, #4]
	reg = ovr + rate;
 8005cc8:	4425      	add	r5, r4
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005cca:	9600      	str	r6, [sp, #0]
 8005ccc:	2206      	movs	r2, #6
 8005cce:	21ee      	movs	r1, #238	@ 0xee
 8005cd0:	4834      	ldr	r0, [pc, #208]	@ (8005da4 <DPS368_conf_press+0xf4>)
	reg = ovr + rate;
 8005cd2:	f88d 5017 	strb.w	r5, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005cd6:	f005 fb75 	bl	800b3c4 <HAL_I2C_Mem_Write>
    switch (ovr)
 8005cda:	2c07      	cmp	r4, #7
 8005cdc:	d856      	bhi.n	8005d8c <DPS368_conf_press+0xdc>
 8005cde:	e8df f004 	tbb	[pc, r4]
 8005ce2:	3723      	.short	0x3723
 8005ce4:	4b46413c 	.word	0x4b46413c
 8005ce8:	0450      	.short	0x0450
        case DPS_OVERSAMPLE_64:
        	Kp_coef = DPS_OSR_SF_64;
            break;

        case DPS_OVERSAMPLE_128:
        	Kp_coef = DPS_OSR_SF_128;
 8005cea:	4b2f      	ldr	r3, [pc, #188]	@ (8005da8 <DPS368_conf_press+0xf8>)
 8005cec:	f44f 12ff 	mov.w	r2, #2088960	@ 0x1fe000
 8005cf0:	601a      	str	r2, [r3, #0]
            break;
    }

//    printf("Kp_coef set: %lu\r\n",Kp_coef);

   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005cf2:	22fa      	movs	r2, #250	@ 0xfa
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005cfa:	482a      	ldr	r0, [pc, #168]	@ (8005da4 <DPS368_conf_press+0xf4>)
 8005cfc:	9600      	str	r6, [sp, #0]
 8005cfe:	2209      	movs	r2, #9
 8005d00:	21ee      	movs	r1, #238	@ 0xee
 8005d02:	f005 fc85 	bl	800b610 <HAL_I2C_Mem_Read>
    if(ovr > DPS_OVERSAMPLE_8) setBit(&reg, 2, 1);
 8005d06:	2201      	movs	r2, #1
 8005d08:	2102      	movs	r1, #2
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f003 f95e 	bl	8008fcc <setBit>
    else setBit(&reg, 2, 0);
   	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005d10:	2301      	movs	r3, #1
 8005d12:	22fa      	movs	r2, #250	@ 0xfa
 8005d14:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d18:	9600      	str	r6, [sp, #0]
 8005d1a:	2209      	movs	r2, #9
 8005d1c:	21ee      	movs	r1, #238	@ 0xee
 8005d1e:	4821      	ldr	r0, [pc, #132]	@ (8005da4 <DPS368_conf_press+0xf4>)
 8005d20:	f005 fb50 	bl	800b3c4 <HAL_I2C_Mem_Write>


}
 8005d24:	b006      	add	sp, #24
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
            Kp_coef = DPS_OSR_SF_1;
 8005d28:	4b1f      	ldr	r3, [pc, #124]	@ (8005da8 <DPS368_conf_press+0xf8>)
 8005d2a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005d2e:	601a      	str	r2, [r3, #0]
   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005d30:	2301      	movs	r3, #1
 8005d32:	22fa      	movs	r2, #250	@ 0xfa
 8005d34:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d38:	9600      	str	r6, [sp, #0]
 8005d3a:	2209      	movs	r2, #9
 8005d3c:	21ee      	movs	r1, #238	@ 0xee
 8005d3e:	4819      	ldr	r0, [pc, #100]	@ (8005da4 <DPS368_conf_press+0xf4>)
 8005d40:	f005 fc66 	bl	800b610 <HAL_I2C_Mem_Read>
    else setBit(&reg, 2, 0);
 8005d44:	2200      	movs	r2, #0
 8005d46:	2102      	movs	r1, #2
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f003 f93f 	bl	8008fcc <setBit>
 8005d4e:	e7df      	b.n	8005d10 <DPS368_conf_press+0x60>
        	Kp_coef = DPS_OSR_SF_2;
 8005d50:	4b15      	ldr	r3, [pc, #84]	@ (8005da8 <DPS368_conf_press+0xf8>)
 8005d52:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 8005d56:	601a      	str	r2, [r3, #0]
            break;
 8005d58:	e7ea      	b.n	8005d30 <DPS368_conf_press+0x80>
        	Kp_coef = DPS_OSR_SF_4;
 8005d5a:	4b13      	ldr	r3, [pc, #76]	@ (8005da8 <DPS368_conf_press+0xf8>)
 8005d5c:	f44f 1260 	mov.w	r2, #3670016	@ 0x380000
 8005d60:	601a      	str	r2, [r3, #0]
            break;
 8005d62:	e7e5      	b.n	8005d30 <DPS368_conf_press+0x80>
        	Kp_coef = DPS_OSR_SF_8;
 8005d64:	4b10      	ldr	r3, [pc, #64]	@ (8005da8 <DPS368_conf_press+0xf8>)
 8005d66:	f44f 02f0 	mov.w	r2, #7864320	@ 0x780000
 8005d6a:	601a      	str	r2, [r3, #0]
            break;
 8005d6c:	e7e0      	b.n	8005d30 <DPS368_conf_press+0x80>
        	Kp_coef = DPS_OSR_SF_16;
 8005d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005da8 <DPS368_conf_press+0xf8>)
 8005d70:	f44f 3278 	mov.w	r2, #253952	@ 0x3e000
 8005d74:	601a      	str	r2, [r3, #0]
            break;
 8005d76:	e7bc      	b.n	8005cf2 <DPS368_conf_press+0x42>
        	Kp_coef = DPS_OSR_SF_32;
 8005d78:	4b0b      	ldr	r3, [pc, #44]	@ (8005da8 <DPS368_conf_press+0xf8>)
 8005d7a:	f44f 22fc 	mov.w	r2, #516096	@ 0x7e000
 8005d7e:	601a      	str	r2, [r3, #0]
            break;
 8005d80:	e7b7      	b.n	8005cf2 <DPS368_conf_press+0x42>
        	Kp_coef = DPS_OSR_SF_64;
 8005d82:	4b09      	ldr	r3, [pc, #36]	@ (8005da8 <DPS368_conf_press+0xf8>)
 8005d84:	f44f 227e 	mov.w	r2, #1040384	@ 0xfe000
 8005d88:	601a      	str	r2, [r3, #0]
            break;
 8005d8a:	e7b2      	b.n	8005cf2 <DPS368_conf_press+0x42>
   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	22fa      	movs	r2, #250	@ 0xfa
 8005d90:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d94:	9600      	str	r6, [sp, #0]
 8005d96:	2209      	movs	r2, #9
 8005d98:	21ee      	movs	r1, #238	@ 0xee
 8005d9a:	4802      	ldr	r0, [pc, #8]	@ (8005da4 <DPS368_conf_press+0xf4>)
 8005d9c:	f005 fc38 	bl	800b610 <HAL_I2C_Mem_Read>
    if(ovr > DPS_OVERSAMPLE_8) setBit(&reg, 2, 1);
 8005da0:	e7b1      	b.n	8005d06 <DPS368_conf_press+0x56>
 8005da2:	bf00      	nop
 8005da4:	200017ac 	.word	0x200017ac
 8005da8:	2000161c 	.word	0x2000161c

08005dac <DPS368_temp_correct>:
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);

}

void DPS368_temp_correct(uint8_t ovr)
{
 8005dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dae:	b087      	sub	sp, #28
	SET_DPS368();
	HAL_StatusTypeDef status;
	uint8_t write_data = 0xA5;
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005db0:	2401      	movs	r4, #1
{
 8005db2:	4605      	mov	r5, r0
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005db4:	27fa      	movs	r7, #250	@ 0xfa
	SET_DPS368();
 8005db6:	f003 f961 	bl	800907c <SET_DPS368>
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005dba:	f10d 0616 	add.w	r6, sp, #22
	uint8_t write_data = 0xA5;
 8005dbe:	23a5      	movs	r3, #165	@ 0xa5
 8005dc0:	f88d 3016 	strb.w	r3, [sp, #22]
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005dc4:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005dc8:	482b      	ldr	r0, [pc, #172]	@ (8005e78 <DPS368_temp_correct+0xcc>)
 8005dca:	9600      	str	r6, [sp, #0]
 8005dcc:	4623      	mov	r3, r4
 8005dce:	220e      	movs	r2, #14
 8005dd0:	21ee      	movs	r1, #238	@ 0xee
 8005dd2:	f005 faf7 	bl	800b3c4 <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 8005dd6:	b1c8      	cbz	r0, 8005e0c <DPS368_temp_correct+0x60>
	}
	if (status == HAL_OK) {
        write_data = 0x00;
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
	}
	DPS368_conf_temp(ovr, DPS_RATE_1);
 8005dd8:	4628      	mov	r0, r5
 8005dda:	2100      	movs	r1, #0
 8005ddc:	f7ff fee8 	bl	8005bb0 <DPS368_conf_temp>
}


void DPS368_run_mode(uint8_t mode)
{
	SET_DPS368();
 8005de0:	f003 f94c 	bl	800907c <SET_DPS368>
	uint8_t reg;
//	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
//	reg = (reg & 0x0E) | mode;
	reg = mode;
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005de4:	2301      	movs	r3, #1
 8005de6:	f10d 0217 	add.w	r2, sp, #23
 8005dea:	21fa      	movs	r1, #250	@ 0xfa
 8005dec:	e9cd 3101 	strd	r3, r1, [sp, #4]
	reg = mode;
 8005df0:	2402      	movs	r4, #2
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005df2:	9200      	str	r2, [sp, #0]
 8005df4:	21ee      	movs	r1, #238	@ 0xee
 8005df6:	2208      	movs	r2, #8
 8005df8:	481f      	ldr	r0, [pc, #124]	@ (8005e78 <DPS368_temp_correct+0xcc>)
	reg = mode;
 8005dfa:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005dfe:	f005 fae1 	bl	800b3c4 <HAL_I2C_Mem_Write>
	osDelay(2);
 8005e02:	4620      	mov	r0, r4
 8005e04:	f007 fcb8 	bl	800d778 <osDelay>
}
 8005e08:	b007      	add	sp, #28
 8005e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        write_data = 0x96;
 8005e0c:	2396      	movs	r3, #150	@ 0x96
 8005e0e:	f88d 3016 	strb.w	r3, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005e12:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005e16:	4818      	ldr	r0, [pc, #96]	@ (8005e78 <DPS368_temp_correct+0xcc>)
 8005e18:	9600      	str	r6, [sp, #0]
 8005e1a:	4623      	mov	r3, r4
 8005e1c:	220f      	movs	r2, #15
 8005e1e:	21ee      	movs	r1, #238	@ 0xee
 8005e20:	f005 fad0 	bl	800b3c4 <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d1d7      	bne.n	8005dd8 <DPS368_temp_correct+0x2c>
        write_data = 0x02;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	f88d 3016 	strb.w	r3, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x62, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005e2e:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005e32:	4811      	ldr	r0, [pc, #68]	@ (8005e78 <DPS368_temp_correct+0xcc>)
 8005e34:	9600      	str	r6, [sp, #0]
 8005e36:	4623      	mov	r3, r4
 8005e38:	2262      	movs	r2, #98	@ 0x62
 8005e3a:	21ee      	movs	r1, #238	@ 0xee
 8005e3c:	f005 fac2 	bl	800b3c4 <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d1c9      	bne.n	8005dd8 <DPS368_temp_correct+0x2c>
        write_data = 0x00;
 8005e44:	f88d 0016 	strb.w	r0, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005e48:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005e4c:	480a      	ldr	r0, [pc, #40]	@ (8005e78 <DPS368_temp_correct+0xcc>)
 8005e4e:	9600      	str	r6, [sp, #0]
 8005e50:	4623      	mov	r3, r4
 8005e52:	220e      	movs	r2, #14
 8005e54:	21ee      	movs	r1, #238	@ 0xee
 8005e56:	f005 fab5 	bl	800b3c4 <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d1bc      	bne.n	8005dd8 <DPS368_temp_correct+0x2c>
        write_data = 0x00;
 8005e5e:	f88d 0016 	strb.w	r0, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8005e62:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005e66:	9600      	str	r6, [sp, #0]
 8005e68:	4623      	mov	r3, r4
 8005e6a:	220f      	movs	r2, #15
 8005e6c:	21ee      	movs	r1, #238	@ 0xee
 8005e6e:	4802      	ldr	r0, [pc, #8]	@ (8005e78 <DPS368_temp_correct+0xcc>)
 8005e70:	f005 faa8 	bl	800b3c4 <HAL_I2C_Mem_Write>
 8005e74:	e7b0      	b.n	8005dd8 <DPS368_temp_correct+0x2c>
 8005e76:	bf00      	nop
 8005e78:	200017ac 	.word	0x200017ac

08005e7c <calcBusyTime>:


uint32_t calcBusyTime(uint8_t osr)
{
    // formula from datasheet (optimized)
    return (((uint32_t)20U) + ((uint32_t)16U << ((uint16_t)osr)));
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	fa03 f000 	lsl.w	r0, r3, r0
}
 8005e82:	3014      	adds	r0, #20
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop

08005e88 <DPS368_init>:

void DPS368_init(uint8_t fifo, uint8_t int_m)
{
 8005e88:	b530      	push	{r4, r5, lr}
 8005e8a:	460d      	mov	r5, r1
 8005e8c:	b087      	sub	sp, #28
 8005e8e:	4604      	mov	r4, r0
	DPS368_read_coeff();
 8005e90:	f7ff fd86 	bl	80059a0 <DPS368_read_coeff>
	DPS368_conf_int(int_m);
 8005e94:	4628      	mov	r0, r5
 8005e96:	f7ff fe2b 	bl	8005af0 <DPS368_conf_int>
	DPS368_fifo(fifo);
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f7ff fdfc 	bl	8005a98 <DPS368_fifo>
	SET_DPS368();
 8005ea0:	f003 f8ec 	bl	800907c <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f10d 0217 	add.w	r2, sp, #23
 8005eaa:	21fa      	movs	r1, #250	@ 0xfa
 8005eac:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8005eb0:	9200      	str	r2, [sp, #0]
 8005eb2:	21ee      	movs	r1, #238	@ 0xee
 8005eb4:	2208      	movs	r2, #8
	reg = mode;
 8005eb6:	2400      	movs	r4, #0
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005eb8:	4804      	ldr	r0, [pc, #16]	@ (8005ecc <DPS368_init+0x44>)
	reg = mode;
 8005eba:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005ebe:	f005 fa81 	bl	800b3c4 <HAL_I2C_Mem_Write>
	osDelay(2);
 8005ec2:	2002      	movs	r0, #2
 8005ec4:	f007 fc58 	bl	800d778 <osDelay>
	DPS368_run_mode(MODE_IDLE);
}
 8005ec8:	b007      	add	sp, #28
 8005eca:	bd30      	pop	{r4, r5, pc}
 8005ecc:	200017ac 	.word	0x200017ac

08005ed0 <DPS368_start_meas_temp>:

void DPS368_start_meas_temp(uint8_t ovr)
{
 8005ed0:	b510      	push	{r4, lr}
	DPS368_conf_temp(ovr, 0U);
 8005ed2:	2100      	movs	r1, #0
{
 8005ed4:	b086      	sub	sp, #24
	DPS368_conf_temp(ovr, 0U);
 8005ed6:	f7ff fe6b 	bl	8005bb0 <DPS368_conf_temp>
	SET_DPS368();
 8005eda:	f003 f8cf 	bl	800907c <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f10d 0217 	add.w	r2, sp, #23
 8005ee4:	21fa      	movs	r1, #250	@ 0xfa
 8005ee6:	e9cd 3101 	strd	r3, r1, [sp, #4]
	reg = mode;
 8005eea:	2402      	movs	r4, #2
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005eec:	9200      	str	r2, [sp, #0]
 8005eee:	21ee      	movs	r1, #238	@ 0xee
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	4805      	ldr	r0, [pc, #20]	@ (8005f08 <DPS368_start_meas_temp+0x38>)
	reg = mode;
 8005ef4:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005ef8:	f005 fa64 	bl	800b3c4 <HAL_I2C_Mem_Write>
	osDelay(2);
 8005efc:	4620      	mov	r0, r4
 8005efe:	f007 fc3b 	bl	800d778 <osDelay>
	DPS368_run_mode(MODE_CMD_TEMP);
}
 8005f02:	b006      	add	sp, #24
 8005f04:	bd10      	pop	{r4, pc}
 8005f06:	bf00      	nop
 8005f08:	200017ac 	.word	0x200017ac

08005f0c <DPS368_calc_temp>:
float DPS368_calc_temp(float temp_scaled)
{
	float temperature;
//	temp_scaled = DPS368_get_scaled_temp();
//	printf("DPS TEMP SCALED VALUE: %.3f\r\n", temp_scaled);
	temperature = DPS_coef.C0 + DPS_coef.C1 * temp_scaled;
 8005f0c:	4b06      	ldr	r3, [pc, #24]	@ (8005f28 <DPS368_calc_temp+0x1c>)
 8005f0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005f12:	edd3 7a00 	vldr	s15, [r3]
 8005f16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return temperature;
}
 8005f1e:	eee7 7a00 	vfma.f32	s15, s14, s0
 8005f22:	eeb0 0a67 	vmov.f32	s0, s15
 8005f26:	4770      	bx	lr
 8005f28:	20001624 	.word	0x20001624

08005f2c <DPS368_start_meas_press>:

void DPS368_start_meas_press(uint8_t ovr)
{
 8005f2c:	b500      	push	{lr}
	DPS368_conf_press(ovr, 0U);
 8005f2e:	2100      	movs	r1, #0
{
 8005f30:	b087      	sub	sp, #28
	DPS368_conf_press(ovr, 0U);
 8005f32:	f7ff febd 	bl	8005cb0 <DPS368_conf_press>
	SET_DPS368();
 8005f36:	f003 f8a1 	bl	800907c <SET_DPS368>
	reg = mode;
 8005f3a:	2301      	movs	r3, #1
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005f3c:	f10d 0217 	add.w	r2, sp, #23
 8005f40:	21fa      	movs	r1, #250	@ 0xfa
 8005f42:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8005f46:	9200      	str	r2, [sp, #0]
 8005f48:	21ee      	movs	r1, #238	@ 0xee
 8005f4a:	2208      	movs	r2, #8
 8005f4c:	4805      	ldr	r0, [pc, #20]	@ (8005f64 <DPS368_start_meas_press+0x38>)
	reg = mode;
 8005f4e:	f88d 3017 	strb.w	r3, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8005f52:	f005 fa37 	bl	800b3c4 <HAL_I2C_Mem_Write>
	osDelay(2);
 8005f56:	2002      	movs	r0, #2
 8005f58:	f007 fc0e 	bl	800d778 <osDelay>
	DPS368_run_mode(MODE_CMD_PRESS);
}
 8005f5c:	b007      	add	sp, #28
 8005f5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f62:	bf00      	nop
 8005f64:	200017ac 	.word	0x200017ac

08005f68 <DPS368_get_scaled_temp>:

float DPS368_get_scaled_temp()
{
 8005f68:	b500      	push	{lr}
 8005f6a:	b087      	sub	sp, #28
	SET_DPS368();
 8005f6c:	f003 f886 	bl	800907c <SET_DPS368>
	uint8_t value[3];
	int32_t raw_temp;
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP, I2C_MEMADD_SIZE_8BIT, value, 3, 250);
 8005f70:	2203      	movs	r2, #3
 8005f72:	ab05      	add	r3, sp, #20
 8005f74:	21fa      	movs	r1, #250	@ 0xfa
 8005f76:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	21ee      	movs	r1, #238	@ 0xee
 8005f7e:	2301      	movs	r3, #1
 8005f80:	4810      	ldr	r0, [pc, #64]	@ (8005fc4 <DPS368_get_scaled_temp+0x5c>)
 8005f82:	f005 fb45 	bl	800b610 <HAL_I2C_Mem_Read>
	raw_temp = (int32_t)(value[2]) + (value[1] << 8) + (value[0] << 16);
 8005f86:	f8bd 3015 	ldrh.w	r3, [sp, #21]
 8005f8a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8005f8e:	ba5b      	rev16	r3, r3
 8005f90:	0412      	lsls	r2, r2, #16
 8005f92:	fa12 f383 	uxtah	r3, r2, r3
    if (*raw & ((uint32_t)1 << (length - 1)))
 8005f96:	0dd2      	lsrs	r2, r2, #23
	getTwosComplement(&raw_temp, 24);
	const float scalingT = 1.0f/Kt_coef;
 8005f98:	4a0b      	ldr	r2, [pc, #44]	@ (8005fc8 <DPS368_get_scaled_temp+0x60>)
 8005f9a:	edd2 7a00 	vldr	s15, [r2]
        *raw -= (uint32_t)1 << length;
 8005f9e:	bf18      	it	ne
 8005fa0:	f103 437f 	addne.w	r3, r3, #4278190080	@ 0xff000000
	return ((float)raw_temp * scalingT);
 8005fa4:	ee07 3a10 	vmov	s14, r3
	const float scalingT = 1.0f/Kt_coef;
 8005fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
	return ((float)raw_temp * scalingT);
 8005fb0:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
	const float scalingT = 1.0f/Kt_coef;
 8005fb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
}
 8005fb8:	ee27 0a00 	vmul.f32	s0, s14, s0
 8005fbc:	b007      	add	sp, #28
 8005fbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fc2:	bf00      	nop
 8005fc4:	200017ac 	.word	0x200017ac
 8005fc8:	20001620 	.word	0x20001620

08005fcc <DPS368_get_press>:

float DPS368_get_press(float temp_scaled)
{
 8005fcc:	b500      	push	{lr}
 8005fce:	ed2d 8b02 	vpush	{d8}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	eeb0 8a40 	vmov.f32	s16, s0
	SET_DPS368();
 8005fd8:	f003 f850 	bl	800907c <SET_DPS368>
	uint8_t value[3];
	int32_t raw_press;
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_PRESS, I2C_MEMADD_SIZE_8BIT, value, 3, 250);
 8005fdc:	ab05      	add	r3, sp, #20
 8005fde:	21fa      	movs	r1, #250	@ 0xfa
 8005fe0:	2203      	movs	r2, #3
 8005fe2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2301      	movs	r3, #1
 8005fec:	21ee      	movs	r1, #238	@ 0xee
 8005fee:	4829      	ldr	r0, [pc, #164]	@ (8006094 <DPS368_get_press+0xc8>)
 8005ff0:	f005 fb0e 	bl	800b610 <HAL_I2C_Mem_Read>
	raw_press = (int32_t)(value[2]) + (value[1] << 8) + (value[0] << 16);
 8005ff4:	f8bd 3015 	ldrh.w	r3, [sp, #21]
 8005ff8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8005ffc:	ba5b      	rev16	r3, r3
 8005ffe:	0412      	lsls	r2, r2, #16
 8006000:	fa12 f383 	uxtah	r3, r2, r3
    if (*raw & ((uint32_t)1 << (length - 1)))
 8006004:	0dd2      	lsrs	r2, r2, #23
	getTwosComplement(&raw_press, 24);
	const float scalingP = 1.0f/Kp_coef;
 8006006:	4a24      	ldr	r2, [pc, #144]	@ (8006098 <DPS368_get_press+0xcc>)
 8006008:	edd2 6a00 	vldr	s13, [r2]
//	printf("DPS RAW PRESS VALUE: %ld\r\n", raw_press);
//	printf("DPS SCALING PRESS VALUE: %.12f\r\n", scalingP);
	float press_scaled, pressure;
	press_scaled = (float)raw_press * scalingP;
//	printf("DPS PRESS SCALED VALUE: %.3f\r\n", press_scaled);
    pressure = DPS_coef.C00;
 800600c:	4a23      	ldr	r2, [pc, #140]	@ (800609c <DPS368_get_press+0xd0>)
	const float scalingP = 1.0f/Kp_coef;
 800600e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006012:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006016:	ee86 7a26 	vdiv.f32	s14, s12, s13
        *raw -= (uint32_t)1 << length;
 800601a:	bf18      	it	ne
 800601c:	f103 437f 	addne.w	r3, r3, #4278190080	@ 0xff000000
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8006020:	edd2 6a08 	vldr	s13, [r2, #32]
	pressure += (temp_scaled * DPS_coef.C01);
 8006024:	ed92 5a04 	vldr	s10, [r2, #16]
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8006028:	edd2 4a07 	vldr	s9, [r2, #28]
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 800602c:	eeb8 4ae6 	vcvt.f32.s32	s8, s13
 8006030:	edd2 6a06 	vldr	s13, [r2, #24]
	press_scaled = (float)raw_press * scalingP;
 8006034:	ee07 3a90 	vmov	s15, r3
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8006038:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 800603c:	edd2 6a03 	vldr	s13, [r2, #12]
	press_scaled = (float)raw_press * scalingP;
 8006040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8006044:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
    pressure = DPS_coef.C00;
 8006048:	edd2 6a02 	vldr	s13, [r2, #8]
	press_scaled = (float)raw_press * scalingP;
 800604c:	ee67 7a27 	vmul.f32	s15, s14, s15
    pressure = DPS_coef.C00;
 8006050:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8006054:	edd2 6a05 	vldr	s13, [r2, #20]
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8006058:	eee4 5a27 	vfma.f32	s11, s8, s15
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 800605c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	pressure += (temp_scaled * DPS_coef.C01);
 8006060:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8006064:	eeb0 7a66 	vmov.f32	s14, s13
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8006068:	eef0 6a46 	vmov.f32	s13, s12
 800606c:	eee5 6aa7 	vfma.f32	s13, s11, s15
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8006070:	eef8 4ae4 	vcvt.f32.s32	s9, s9
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8006074:	eea6 0aa7 	vfma.f32	s0, s13, s15
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8006078:	eea4 7aa7 	vfma.f32	s14, s9, s15
	pressure += (temp_scaled * DPS_coef.C01);
 800607c:	eea5 0a08 	vfma.f32	s0, s10, s16
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8006080:	ee67 4a88 	vmul.f32	s9, s15, s16
//	return pressure *0.01f;
	return pressure;
}
 8006084:	eea4 0a87 	vfma.f32	s0, s9, s14
 8006088:	b007      	add	sp, #28
 800608a:	ecbd 8b02 	vpop	{d8}
 800608e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006092:	bf00      	nop
 8006094:	200017ac 	.word	0x200017ac
 8006098:	2000161c 	.word	0x2000161c
 800609c:	20001624 	.word	0x20001624

080060a0 <dps368_ovr_config>:

uint16_t dps368_ovr_config(uint8_t sensor_conf)
{
 80060a0:	b508      	push	{r3, lr}
    switch (sensor_conf) {
 80060a2:	2807      	cmp	r0, #7
 80060a4:	d84d      	bhi.n	8006142 <dps368_ovr_config+0xa2>
 80060a6:	e8df f000 	tbb	[pc, r0]
 80060aa:	160d      	.short	0x160d
 80060ac:	3a31281f 	.word	0x3a31281f
 80060b0:	0443      	.short	0x0443
            return combine_uint8(DPS_OVERSAMPLE_32,DPS_OVERSAMPLE_32);
        case 6:
        	printf("DPS368 set TEMP & PRESS Oversample x64\r\n");
            return combine_uint8(DPS_OVERSAMPLE_64,DPS_OVERSAMPLE_64);
        case 7:
        	printf("DPS368 set TEMP & PRESS Oversample x128\r\n");
 80060b2:	4828      	ldr	r0, [pc, #160]	@ (8006154 <dps368_ovr_config+0xb4>)
 80060b4:	f00a fb8e 	bl	80107d4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_128);
 80060b8:	2107      	movs	r1, #7

        default:
        	printf("DPS368 set TEMP Oversample x128, PRESS Oversample x4 \r\n");
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_4);
    }
}
 80060ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_128);
 80060be:	4608      	mov	r0, r1
 80060c0:	f002 bf96 	b.w	8008ff0 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x1\r\n");
 80060c4:	4824      	ldr	r0, [pc, #144]	@ (8006158 <dps368_ovr_config+0xb8>)
 80060c6:	f00a fb85 	bl	80107d4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_1,DPS_OVERSAMPLE_1);
 80060ca:	2100      	movs	r1, #0
}
 80060cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_1,DPS_OVERSAMPLE_1);
 80060d0:	4608      	mov	r0, r1
 80060d2:	f002 bf8d 	b.w	8008ff0 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x2\r\n");
 80060d6:	4821      	ldr	r0, [pc, #132]	@ (800615c <dps368_ovr_config+0xbc>)
 80060d8:	f00a fb7c 	bl	80107d4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_2,DPS_OVERSAMPLE_2);
 80060dc:	2101      	movs	r1, #1
}
 80060de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_2,DPS_OVERSAMPLE_2);
 80060e2:	4608      	mov	r0, r1
 80060e4:	f002 bf84 	b.w	8008ff0 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x4\r\n");
 80060e8:	481d      	ldr	r0, [pc, #116]	@ (8006160 <dps368_ovr_config+0xc0>)
 80060ea:	f00a fb73 	bl	80107d4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_4,DPS_OVERSAMPLE_4);
 80060ee:	2102      	movs	r1, #2
}
 80060f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_4,DPS_OVERSAMPLE_4);
 80060f4:	4608      	mov	r0, r1
 80060f6:	f002 bf7b 	b.w	8008ff0 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x8\r\n");
 80060fa:	481a      	ldr	r0, [pc, #104]	@ (8006164 <dps368_ovr_config+0xc4>)
 80060fc:	f00a fb6a 	bl	80107d4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_8,DPS_OVERSAMPLE_8);
 8006100:	2103      	movs	r1, #3
}
 8006102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_8,DPS_OVERSAMPLE_8);
 8006106:	4608      	mov	r0, r1
 8006108:	f002 bf72 	b.w	8008ff0 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x16\r\n");
 800610c:	4816      	ldr	r0, [pc, #88]	@ (8006168 <dps368_ovr_config+0xc8>)
 800610e:	f00a fb61 	bl	80107d4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_16,DPS_OVERSAMPLE_16);
 8006112:	2104      	movs	r1, #4
}
 8006114:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_16,DPS_OVERSAMPLE_16);
 8006118:	4608      	mov	r0, r1
 800611a:	f002 bf69 	b.w	8008ff0 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x32\r\n");
 800611e:	4813      	ldr	r0, [pc, #76]	@ (800616c <dps368_ovr_config+0xcc>)
 8006120:	f00a fb58 	bl	80107d4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_32,DPS_OVERSAMPLE_32);
 8006124:	2105      	movs	r1, #5
}
 8006126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_32,DPS_OVERSAMPLE_32);
 800612a:	4608      	mov	r0, r1
 800612c:	f002 bf60 	b.w	8008ff0 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x64\r\n");
 8006130:	480f      	ldr	r0, [pc, #60]	@ (8006170 <dps368_ovr_config+0xd0>)
 8006132:	f00a fb4f 	bl	80107d4 <puts>
            return combine_uint8(DPS_OVERSAMPLE_64,DPS_OVERSAMPLE_64);
 8006136:	2106      	movs	r1, #6
}
 8006138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_64,DPS_OVERSAMPLE_64);
 800613c:	4608      	mov	r0, r1
 800613e:	f002 bf57 	b.w	8008ff0 <combine_uint8>
        	printf("DPS368 set TEMP Oversample x128, PRESS Oversample x4 \r\n");
 8006142:	480c      	ldr	r0, [pc, #48]	@ (8006174 <dps368_ovr_config+0xd4>)
 8006144:	f00a fb46 	bl	80107d4 <puts>
}
 8006148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_4);
 800614c:	2102      	movs	r1, #2
 800614e:	2007      	movs	r0, #7
 8006150:	f002 bf4e 	b.w	8008ff0 <combine_uint8>
 8006154:	08015dd0 	.word	0x08015dd0
 8006158:	08015cb8 	.word	0x08015cb8
 800615c:	08015ce0 	.word	0x08015ce0
 8006160:	08015d08 	.word	0x08015d08
 8006164:	08015d30 	.word	0x08015d30
 8006168:	08015d58 	.word	0x08015d58
 800616c:	08015d80 	.word	0x08015d80
 8006170:	08015da8 	.word	0x08015da8
 8006174:	08015dfc 	.word	0x08015dfc

08006178 <PreSleepProcessing>:

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
/* place for user code */
}
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop

0800617c <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop

08006180 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006180:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006182:	2001      	movs	r0, #1
 8006184:	f007 faf8 	bl	800d778 <osDelay>
    __WFI();
 8006188:	bf30      	wfi
  for(;;)
 800618a:	e7fa      	b.n	8006182 <StartDefaultTask+0x2>

0800618c <SystemClock_Config>:
{
 800618c:	b530      	push	{r4, r5, lr}
 800618e:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006190:	2244      	movs	r2, #68	@ 0x44
 8006192:	2100      	movs	r1, #0
 8006194:	a806      	add	r0, sp, #24
 8006196:	f00a fc7d 	bl	8010a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800619a:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800619c:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061a0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80061a4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80061a8:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80061aa:	f005 fc5f 	bl	800ba6c <HAL_PWREx_ControlVoltageScaling>
 80061ae:	b108      	cbz	r0, 80061b4 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80061b0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80061b2:	e7fe      	b.n	80061b2 <SystemClock_Config+0x26>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80061b4:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80061b6:	2401      	movs	r4, #1
 80061b8:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80061bc:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80061be:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80061c0:	230a      	movs	r3, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80061c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 10;
 80061c6:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80061c8:	2207      	movs	r2, #7
 80061ca:	2302      	movs	r3, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80061cc:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80061ce:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = 1;
 80061d0:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80061d2:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 1;
 80061d6:	e9cd 4511 	strd	r4, r5, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80061da:	f005 fd27 	bl	800bc2c <HAL_RCC_OscConfig>
 80061de:	4603      	mov	r3, r0
 80061e0:	b108      	cbz	r0, 80061e6 <SystemClock_Config+0x5a>
 80061e2:	b672      	cpsid	i
  while (1)
 80061e4:	e7fe      	b.n	80061e4 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80061e6:	220f      	movs	r2, #15
 80061e8:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80061ea:	4629      	mov	r1, r5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80061ec:	2280      	movs	r2, #128	@ 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80061ee:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80061f0:	e9cd 4202 	strd	r4, r2, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80061f4:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80061f8:	f006 f822 	bl	800c240 <HAL_RCC_ClockConfig>
 80061fc:	b108      	cbz	r0, 8006202 <SystemClock_Config+0x76>
 80061fe:	b672      	cpsid	i
  while (1)
 8006200:	e7fe      	b.n	8006200 <SystemClock_Config+0x74>
}
 8006202:	b019      	add	sp, #100	@ 0x64
 8006204:	bd30      	pop	{r4, r5, pc}
 8006206:	bf00      	nop

08006208 <main>:
{
 8006208:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800620a:	2400      	movs	r4, #0
{
 800620c:	b090      	sub	sp, #64	@ 0x40
  HAL_Init();
 800620e:	f003 fba9 	bl	8009964 <HAL_Init>
  SystemClock_Config();
 8006212:	f7ff ffbb 	bl	800618c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006216:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 800621a:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800621e:	4db1      	ldr	r5, [pc, #708]	@ (80064e4 <main+0x2dc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006220:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006222:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006224:	f043 0304 	orr.w	r3, r3, #4
 8006228:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800622a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	9301      	str	r3, [sp, #4]
 8006232:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006234:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800623a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800623c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800623e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006242:	9302      	str	r3, [sp, #8]
 8006244:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006246:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006248:	f043 0301 	orr.w	r3, r3, #1
 800624c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800624e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	9303      	str	r3, [sp, #12]
 8006256:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006258:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800625a:	f043 0302 	orr.w	r3, r3, #2
 800625e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8006260:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8006262:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(SIM_UART_DTR_GPIO_Port, SIM_UART_DTR_Pin, GPIO_PIN_SET);
 8006266:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006268:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(SIM_UART_DTR_GPIO_Port, SIM_UART_DTR_Pin, GPIO_PIN_SET);
 800626a:	2201      	movs	r2, #1
 800626c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006270:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(SIM_UART_DTR_GPIO_Port, SIM_UART_DTR_Pin, GPIO_PIN_SET);
 8006272:	f004 fd6f 	bl	800ad54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SIM_PWR_Pin|RST3_Pin|Main_SW_Pin, GPIO_PIN_RESET);
 8006276:	4622      	mov	r2, r4
 8006278:	489b      	ldr	r0, [pc, #620]	@ (80064e8 <main+0x2e0>)
 800627a:	f248 2101 	movw	r1, #33281	@ 0x8201
 800627e:	f004 fd69 	bl	800ad54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RST2_Pin|BQ_QON_Pin|BQ_CE_Pin, GPIO_PIN_RESET);
 8006282:	4622      	mov	r2, r4
 8006284:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8006288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800628c:	f004 fd62 	bl	800ad54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8006290:	2201      	movs	r2, #1
 8006292:	4895      	ldr	r0, [pc, #596]	@ (80064e8 <main+0x2e0>)
 8006294:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8006298:	f004 fd5c 	bl	800ad54 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800629c:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = But_ONOFF_Pin;
 80062a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 80062a4:	4891      	ldr	r0, [pc, #580]	@ (80064ec <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80062a6:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 80062aa:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062ac:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062ae:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 80062b2:	f004 fc4f 	bl	800ab54 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062b6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062ba:	488c      	ldr	r0, [pc, #560]	@ (80064ec <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062bc:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062be:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062c0:	e9cd 370a 	strd	r3, r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062c4:	f004 fc46 	bl	800ab54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80062c8:	f248 0302 	movw	r3, #32770	@ 0x8002
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062cc:	a90a      	add	r1, sp, #40	@ 0x28
 80062ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d2:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80062d6:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062d8:	f004 fc3c 	bl	800ab54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 80062dc:	2310      	movs	r3, #16
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 80062de:	a90a      	add	r1, sp, #40	@ 0x28
 80062e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062e4:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 80062ea:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 80062ec:	f004 fc32 	bl	800ab54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|BQ_QON_Pin|BQ_CE_Pin;
 80062f0:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062f4:	a90a      	add	r1, sp, #40	@ 0x28
 80062f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062fa:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|BQ_QON_Pin|BQ_CE_Pin;
 80062fe:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006300:	960b      	str	r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006302:	f004 fc27 	bl	800ab54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 8006306:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 8006308:	a90a      	add	r1, sp, #40	@ 0x28
 800630a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800630e:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 8006312:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 8006314:	f004 fc1e 	bl	800ab54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_PWR_Pin|RST3_Pin|LED1_Pin|LED2_Pin;
 8006318:	f248 1321 	movw	r3, #33057	@ 0x8121
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800631c:	4872      	ldr	r0, [pc, #456]	@ (80064e8 <main+0x2e0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800631e:	940d      	str	r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006320:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006322:	e9cd 640b 	strd	r6, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = SIM_PWR_Pin|RST3_Pin|LED1_Pin|LED2_Pin;
 8006326:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006328:	f004 fc14 	bl	800ab54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 800632c:	f241 0302 	movw	r3, #4098	@ 0x1002
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006330:	486d      	ldr	r0, [pc, #436]	@ (80064e8 <main+0x2e0>)
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 8006332:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006334:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006336:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800633a:	f004 fc0b 	bl	800ab54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin|GPIO_PIN_11|GPIO_PIN_3;
 800633e:	f640 430c 	movw	r3, #3084	@ 0xc0c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006342:	4869      	ldr	r0, [pc, #420]	@ (80064e8 <main+0x2e0>)
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8006344:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006346:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006348:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = RST2_Pin;
 800634c:	f44f 7880 	mov.w	r8, #256	@ 0x100
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006350:	f004 fc00 	bl	800ab54 <HAL_GPIO_Init>
  HAL_GPIO_Init(RST2_GPIO_Port, &GPIO_InitStruct);
 8006354:	a90a      	add	r1, sp, #40	@ 0x28
 8006356:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800635a:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800635c:	e9cd 660b 	strd	r6, r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = RST2_Pin;
 8006360:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RST2_GPIO_Port, &GPIO_InitStruct);
 8006364:	f004 fbf6 	bl	800ab54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006368:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800636a:	4861      	ldr	r0, [pc, #388]	@ (80064f0 <main+0x2e8>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800636c:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800636e:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006370:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006374:	f004 fbee 	bl	800ab54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Main_SW_Pin;
 8006378:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(Main_SW_GPIO_Port, &GPIO_InitStruct);
 800637c:	485a      	ldr	r0, [pc, #360]	@ (80064e8 <main+0x2e0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800637e:	940d      	str	r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(Main_SW_GPIO_Port, &GPIO_InitStruct);
 8006380:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pin = Main_SW_Pin;
 8006382:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006384:	e9cd 690b 	strd	r6, r9, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(Main_SW_GPIO_Port, &GPIO_InitStruct);
 8006388:	f004 fbe4 	bl	800ab54 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800638c:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800638e:	4f59      	ldr	r7, [pc, #356]	@ (80064f4 <main+0x2ec>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006390:	4333      	orrs	r3, r6
 8006392:	64ab      	str	r3, [r5, #72]	@ 0x48
 8006394:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  hadc1.Instance = ADC1;
 8006396:	4d58      	ldr	r5, [pc, #352]	@ (80064f8 <main+0x2f0>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006398:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800639a:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800639c:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800639e:	2105      	movs	r1, #5
 80063a0:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80063a2:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80063a4:	f003 ffce 	bl	800a344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80063a8:	200b      	movs	r0, #11
 80063aa:	f004 f807 	bl	800a3bc <HAL_NVIC_EnableIRQ>
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80063ae:	230c      	movs	r3, #12
  ADC_ChannelConfTypeDef sConfig = {0};
 80063b0:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 80063b4:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 80063b8:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80063bc:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80063c0:	e9c5 440a 	strd	r4, r4, [r5, #40]	@ 0x28
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80063c4:	e9c5 4410 	strd	r4, r4, [r5, #64]	@ 0x40
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80063c8:	612c      	str	r4, [r5, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80063ca:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80063ce:	636c      	str	r4, [r5, #52]	@ 0x34
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80063d0:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80063d2:	2404      	movs	r4, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80063d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80063d8:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80063da:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80063de:	f8a5 8018 	strh.w	r8, [r5, #24]
  hadc1.Init.NbrOfConversion = 1;
 80063e2:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80063e4:	f885 6030 	strb.w	r6, [r5, #48]	@ 0x30
  hadc1.Init.OversamplingMode = ENABLE;
 80063e8:	f885 6038 	strb.w	r6, [r5, #56]	@ 0x38
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80063ec:	64ae      	str	r6, [r5, #72]	@ 0x48
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80063ee:	616c      	str	r4, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80063f0:	f003 faec 	bl	80099cc <HAL_ADC_Init>
 80063f4:	b108      	cbz	r0, 80063fa <main+0x1f2>
 80063f6:	b672      	cpsid	i
  while (1)
 80063f8:	e7fe      	b.n	80063f8 <main+0x1f0>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80063fa:	4603      	mov	r3, r0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80063fc:	4a3f      	ldr	r2, [pc, #252]	@ (80064fc <main+0x2f4>)
  sConfig.Offset = 0;
 80063fe:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006400:	2306      	movs	r3, #6
 8006402:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006406:	940e      	str	r4, [sp, #56]	@ 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006408:	237f      	movs	r3, #127	@ 0x7f
 800640a:	2407      	movs	r4, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800640c:	a90a      	add	r1, sp, #40	@ 0x28
 800640e:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006410:	e9cd 430c 	strd	r4, r3, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006414:	f003 fc02 	bl	8009c1c <HAL_ADC_ConfigChannel>
 8006418:	b990      	cbnz	r0, 8006440 <main+0x238>
  hi2c1.Instance = I2C1;
 800641a:	4c39      	ldr	r4, [pc, #228]	@ (8006500 <main+0x2f8>)
  hi2c1.Init.Timing = 0x00301347;
 800641c:	4b39      	ldr	r3, [pc, #228]	@ (8006504 <main+0x2fc>)
 800641e:	4d3a      	ldr	r5, [pc, #232]	@ (8006508 <main+0x300>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006420:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006422:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8006426:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800642a:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800642e:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x00301347;
 8006430:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006434:	f004 fdd8 	bl	800afe8 <HAL_I2C_Init>
 8006438:	4601      	mov	r1, r0
 800643a:	b118      	cbz	r0, 8006444 <main+0x23c>
 800643c:	b672      	cpsid	i
  while (1)
 800643e:	e7fe      	b.n	800643e <main+0x236>
 8006440:	b672      	cpsid	i
 8006442:	e7fe      	b.n	8006442 <main+0x23a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006444:	4620      	mov	r0, r4
 8006446:	f005 fab3 	bl	800b9b0 <HAL_I2CEx_ConfigAnalogFilter>
 800644a:	4601      	mov	r1, r0
 800644c:	b108      	cbz	r0, 8006452 <main+0x24a>
 800644e:	b672      	cpsid	i
  while (1)
 8006450:	e7fe      	b.n	8006450 <main+0x248>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006452:	4620      	mov	r0, r4
 8006454:	f005 fad6 	bl	800ba04 <HAL_I2CEx_ConfigDigitalFilter>
 8006458:	b108      	cbz	r0, 800645e <main+0x256>
 800645a:	b672      	cpsid	i
  while (1)
 800645c:	e7fe      	b.n	800645c <main+0x254>
  hi2c2.Instance = I2C2;
 800645e:	4c2b      	ldr	r4, [pc, #172]	@ (800650c <main+0x304>)
 8006460:	4b2b      	ldr	r3, [pc, #172]	@ (8006510 <main+0x308>)
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006462:	61e0      	str	r0, [r4, #28]
  hi2c2.Init.OwnAddress1 = 0;
 8006464:	e9c4 5001 	strd	r5, r0, [r4, #4]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006468:	e9c4 6003 	strd	r6, r0, [r4, #12]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800646c:	e9c4 0005 	strd	r0, r0, [r4, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006470:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006474:	4620      	mov	r0, r4
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006476:	6227      	str	r7, [r4, #32]
  hi2c2.Instance = I2C2;
 8006478:	6023      	str	r3, [r4, #0]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800647a:	f004 fdb5 	bl	800afe8 <HAL_I2C_Init>
 800647e:	4601      	mov	r1, r0
 8006480:	b108      	cbz	r0, 8006486 <main+0x27e>
 8006482:	b672      	cpsid	i
  while (1)
 8006484:	e7fe      	b.n	8006484 <main+0x27c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006486:	4620      	mov	r0, r4
 8006488:	f005 fa92 	bl	800b9b0 <HAL_I2CEx_ConfigAnalogFilter>
 800648c:	4601      	mov	r1, r0
 800648e:	b108      	cbz	r0, 8006494 <main+0x28c>
 8006490:	b672      	cpsid	i
  while (1)
 8006492:	e7fe      	b.n	8006492 <main+0x28a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006494:	4620      	mov	r0, r4
 8006496:	f005 fab5 	bl	800ba04 <HAL_I2CEx_ConfigDigitalFilter>
 800649a:	4603      	mov	r3, r0
 800649c:	b108      	cbz	r0, 80064a2 <main+0x29a>
 800649e:	b672      	cpsid	i
  while (1)
 80064a0:	e7fe      	b.n	80064a0 <main+0x298>
  hi2c3.Instance = I2C3;
 80064a2:	4c1c      	ldr	r4, [pc, #112]	@ (8006514 <main+0x30c>)
  hi2c3.Init.OwnAddress1 = 0;
 80064a4:	e9c4 5001 	strd	r5, r0, [r4, #4]
  hi2c3.Init.OwnAddress2 = 0;
 80064a8:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80064ac:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80064b0:	4620      	mov	r0, r4
  hi2c3.Instance = I2C3;
 80064b2:	4b19      	ldr	r3, [pc, #100]	@ (8006518 <main+0x310>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80064b4:	60e6      	str	r6, [r4, #12]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80064b6:	6227      	str	r7, [r4, #32]
  hi2c3.Instance = I2C3;
 80064b8:	6023      	str	r3, [r4, #0]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80064ba:	f004 fd95 	bl	800afe8 <HAL_I2C_Init>
 80064be:	4601      	mov	r1, r0
 80064c0:	b108      	cbz	r0, 80064c6 <main+0x2be>
 80064c2:	b672      	cpsid	i
  while (1)
 80064c4:	e7fe      	b.n	80064c4 <main+0x2bc>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80064c6:	4620      	mov	r0, r4
 80064c8:	f005 fa72 	bl	800b9b0 <HAL_I2CEx_ConfigAnalogFilter>
 80064cc:	b108      	cbz	r0, 80064d2 <main+0x2ca>
 80064ce:	b672      	cpsid	i
  while (1)
 80064d0:	e7fe      	b.n	80064d0 <main+0x2c8>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80064d2:	4810      	ldr	r0, [pc, #64]	@ (8006514 <main+0x30c>)
 80064d4:	2100      	movs	r1, #0
 80064d6:	f005 fa95 	bl	800ba04 <HAL_I2CEx_ConfigDigitalFilter>
 80064da:	4603      	mov	r3, r0
 80064dc:	b1f0      	cbz	r0, 800651c <main+0x314>
 80064de:	b672      	cpsid	i
  while (1)
 80064e0:	e7fe      	b.n	80064e0 <main+0x2d8>
 80064e2:	bf00      	nop
 80064e4:	40021000 	.word	0x40021000
 80064e8:	48000400 	.word	0x48000400
 80064ec:	48000800 	.word	0x48000800
 80064f0:	48001c00 	.word	0x48001c00
 80064f4:	50040000 	.word	0x50040000
 80064f8:	200018c0 	.word	0x200018c0
 80064fc:	c7520000 	.word	0xc7520000
 8006500:	20001800 	.word	0x20001800
 8006504:	40005400 	.word	0x40005400
 8006508:	00301347 	.word	0x00301347
 800650c:	200017ac 	.word	0x200017ac
 8006510:	40005800 	.word	0x40005800
 8006514:	20001758 	.word	0x20001758
 8006518:	40005c00 	.word	0x40005c00
  huart1.Instance = USART1;
 800651c:	4833      	ldr	r0, [pc, #204]	@ (80065ec <main+0x3e4>)
  huart1.Init.BaudRate = 115200;
 800651e:	4a34      	ldr	r2, [pc, #208]	@ (80065f0 <main+0x3e8>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8006520:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8006522:	f44f 35e1 	mov.w	r5, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006526:	240c      	movs	r4, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006528:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800652c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006530:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart1.Init.BaudRate = 115200;
 8006534:	e9c0 2500 	strd	r2, r5, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006538:	6144      	str	r4, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800653a:	f007 f833 	bl	800d5a4 <HAL_UART_Init>
 800653e:	4603      	mov	r3, r0
 8006540:	b108      	cbz	r0, 8006546 <main+0x33e>
 8006542:	b672      	cpsid	i
  while (1)
 8006544:	e7fe      	b.n	8006544 <main+0x33c>
  huart2.Instance = USART2;
 8006546:	482b      	ldr	r0, [pc, #172]	@ (80065f4 <main+0x3ec>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006548:	e9c0 5301 	strd	r5, r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 800654c:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006550:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006554:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006558:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.Instance = USART2;
 800655a:	4b27      	ldr	r3, [pc, #156]	@ (80065f8 <main+0x3f0>)
 800655c:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800655e:	f007 f821 	bl	800d5a4 <HAL_UART_Init>
 8006562:	4603      	mov	r3, r0
 8006564:	b108      	cbz	r0, 800656a <main+0x362>
 8006566:	b672      	cpsid	i
  while (1)
 8006568:	e7fe      	b.n	8006568 <main+0x360>
  hcrc.Instance = CRC;
 800656a:	4824      	ldr	r0, [pc, #144]	@ (80065fc <main+0x3f4>)
 800656c:	4924      	ldr	r1, [pc, #144]	@ (8006600 <main+0x3f8>)
 800656e:	6001      	str	r1, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8006570:	f240 1201 	movw	r2, #257	@ 0x101
 8006574:	8082      	strh	r2, [r0, #4]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8006576:	2131      	movs	r1, #49	@ 0x31
 8006578:	2210      	movs	r2, #16
 800657a:	e9c0 1202 	strd	r1, r2, [r0, #8]
  hcrc.Init.InitValue = 0xFF;
 800657e:	21ff      	movs	r1, #255	@ 0xff
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8006580:	2201      	movs	r2, #1
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8006582:	e9c0 1304 	strd	r1, r3, [r0, #16]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8006586:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8006588:	6202      	str	r2, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800658a:	f003 ff89 	bl	800a4a0 <HAL_CRC_Init>
 800658e:	4606      	mov	r6, r0
 8006590:	b108      	cbz	r0, 8006596 <main+0x38e>
 8006592:	b672      	cpsid	i
  while (1)
 8006594:	e7fe      	b.n	8006594 <main+0x38c>
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006596:	4602      	mov	r2, r0
 8006598:	2105      	movs	r1, #5
 800659a:	2025      	movs	r0, #37	@ 0x25
 800659c:	f003 fed2 	bl	800a344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80065a0:	2025      	movs	r0, #37	@ 0x25
 80065a2:	f003 ff0b 	bl	800a3bc <HAL_NVIC_EnableIRQ>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80065a6:	4c17      	ldr	r4, [pc, #92]	@ (8006604 <main+0x3fc>)
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80065a8:	4632      	mov	r2, r6
 80065aa:	2105      	movs	r1, #5
 80065ac:	2026      	movs	r0, #38	@ 0x26
 80065ae:	f003 fec9 	bl	800a344 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80065b2:	2026      	movs	r0, #38	@ 0x26
 80065b4:	f003 ff02 	bl	800a3bc <HAL_NVIC_EnableIRQ>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80065b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065ba:	ad05      	add	r5, sp, #20
 80065bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065be:	f854 3b04 	ldr.w	r3, [r4], #4
 80065c2:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80065c4:	4631      	mov	r1, r6
 80065c6:	a805      	add	r0, sp, #20
 80065c8:	f007 f8ba 	bl	800d740 <osThreadCreate>
 80065cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006608 <main+0x400>)
 80065ce:	6018      	str	r0, [r3, #0]
  osThreadDef(THPMainTask, THP_MainTask, osPriorityNormal, 0, 512);
 80065d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065d2:	ad0a      	add	r5, sp, #40	@ 0x28
 80065d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	602b      	str	r3, [r5, #0]
  THPMainTaskHandle = osThreadCreate(osThread(THPMainTask), NULL);
 80065da:	4631      	mov	r1, r6
 80065dc:	a80a      	add	r0, sp, #40	@ 0x28
 80065de:	f007 f8af 	bl	800d740 <osThreadCreate>
 80065e2:	4b0a      	ldr	r3, [pc, #40]	@ (800660c <main+0x404>)
 80065e4:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80065e6:	f007 f8a5 	bl	800d734 <osKernelStart>
  while (1)
 80065ea:	e7fe      	b.n	80065ea <main+0x3e2>
 80065ec:	200016d4 	.word	0x200016d4
 80065f0:	40013800 	.word	0x40013800
 80065f4:	20001650 	.word	0x20001650
 80065f8:	40004400 	.word	0x40004400
 80065fc:	20001854 	.word	0x20001854
 8006600:	40023000 	.word	0x40023000
 8006604:	08013bf8 	.word	0x08013bf8
 8006608:	2000164c 	.word	0x2000164c
 800660c:	20001648 	.word	0x20001648

08006610 <HAL_TIM_PeriodElapsedCallback>:
{
 8006610:	b538      	push	{r3, r4, r5, lr}
  if (htim->Instance == TIM7) {
 8006612:	4b07      	ldr	r3, [pc, #28]	@ (8006630 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006614:	6805      	ldr	r5, [r0, #0]
 8006616:	429d      	cmp	r5, r3
 8006618:	d000      	beq.n	800661c <HAL_TIM_PeriodElapsedCallback+0xc>
}
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	4604      	mov	r4, r0
    HAL_IncTick();
 800661e:	f003 f9b1 	bl	8009984 <HAL_IncTick>
  if (htim->Instance == TIM7) {
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	42ab      	cmp	r3, r5
 8006626:	d1f8      	bne.n	800661a <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8006628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  HAL_SYSTICK_Callback();
 800662c:	f000 bf70 	b.w	8007510 <HAL_SYSTICK_Callback>
 8006630:	40001400 	.word	0x40001400

08006634 <Error_Handler>:
 8006634:	b672      	cpsid	i
  while (1)
 8006636:	e7fe      	b.n	8006636 <Error_Handler+0x2>

08006638 <hsensor_humidity_conversion_and_read_adc>:
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 *       - ms8607_status_crc_error : CRC check error
 */
enum ms8607_status hsensor_humidity_conversion_and_read_adc( uint16_t *adc)
{
 8006638:	b5f0      	push	{r4, r5, r6, r7, lr}
		.address     = HSENSOR_ADDR,
		.data_length = 3,
		.data        = buffer,
	};
	
	if( hsensor_i2c_master_mode == ms8607_i2c_hold) {
 800663a:	4a35      	ldr	r2, [pc, #212]	@ (8006710 <hsensor_humidity_conversion_and_read_adc+0xd8>)
    struct i2c_master_packet read_transfer = {
 800663c:	4c35      	ldr	r4, [pc, #212]	@ (8006714 <hsensor_humidity_conversion_and_read_adc+0xdc>)
	if( hsensor_i2c_master_mode == ms8607_i2c_hold) {
 800663e:	7812      	ldrb	r2, [r2, #0]
{
 8006640:	b087      	sub	sp, #28
	buffer[0] = 0;
 8006642:	2300      	movs	r3, #0
    struct i2c_master_packet read_transfer = {
 8006644:	a901      	add	r1, sp, #4
	buffer[0] = 0;
 8006646:	f8ad 3004 	strh.w	r3, [sp, #4]
	buffer[2] = 0;
 800664a:	f88d 3006 	strb.w	r3, [sp, #6]
    struct i2c_master_packet read_transfer = {
 800664e:	e9cd 4102 	strd	r4, r1, [sp, #8]
	struct i2c_master_packet transfer = {
 8006652:	4b31      	ldr	r3, [pc, #196]	@ (8006718 <hsensor_humidity_conversion_and_read_adc+0xe0>)
{
 8006654:	4605      	mov	r5, r0
	if( hsensor_i2c_master_mode == ms8607_i2c_hold) {
 8006656:	b96a      	cbnz	r2, 8006674 <hsensor_humidity_conversion_and_read_adc+0x3c>
	data[0] = cmd;
 8006658:	22e5      	movs	r2, #229	@ 0xe5
	i2c_status = i2c_master_write_packet_wait_no_stop(&transfer);
 800665a:	a804      	add	r0, sp, #16
	data[0] = cmd;
 800665c:	f88d 2000 	strb.w	r2, [sp]
	struct i2c_master_packet transfer = {
 8006660:	9304      	str	r3, [sp, #16]
 8006662:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait_no_stop(&transfer);
 8006666:	f000 faf5 	bl	8006c54 <i2c_master_write_packet_wait_no_stop>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800666a:	2801      	cmp	r0, #1
 800666c:	d04a      	beq.n	8006704 <hsensor_humidity_conversion_and_read_adc+0xcc>
	if( i2c_status != STATUS_OK)
 800666e:	b1b8      	cbz	r0, 80066a0 <hsensor_humidity_conversion_and_read_adc+0x68>
		return ms8607_status_i2c_transfer_error;
 8006670:	2002      	movs	r0, #2
 8006672:	e03d      	b.n	80066f0 <hsensor_humidity_conversion_and_read_adc+0xb8>
	data[0] = cmd;
 8006674:	22f5      	movs	r2, #245	@ 0xf5
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006676:	a804      	add	r0, sp, #16
	struct i2c_master_packet transfer = {
 8006678:	9304      	str	r3, [sp, #16]
	data[0] = cmd;
 800667a:	f88d 2000 	strb.w	r2, [sp]
	struct i2c_master_packet transfer = {
 800667e:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006682:	f000 fad9 	bl	8006c38 <i2c_master_write_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8006686:	2801      	cmp	r0, #1
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006688:	4603      	mov	r3, r0
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800668a:	d033      	beq.n	80066f4 <hsensor_humidity_conversion_and_read_adc+0xbc>
		status = hsensor_write_command_no_stop(HSENSOR_READ_HUMIDITY_W_HOLD_COMMAND);
	}
	else {
		status = hsensor_write_command(HSENSOR_READ_HUMIDITY_WO_HOLD_COMMAND);
		// delay depending on resolution
		osDelay(hsensor_conversion_time/1000);
 800668c:	4923      	ldr	r1, [pc, #140]	@ (800671c <hsensor_humidity_conversion_and_read_adc+0xe4>)
 800668e:	4a24      	ldr	r2, [pc, #144]	@ (8006720 <hsensor_humidity_conversion_and_read_adc+0xe8>)
 8006690:	6808      	ldr	r0, [r1, #0]
 8006692:	fba2 2000 	umull	r2, r0, r2, r0
 8006696:	0980      	lsrs	r0, r0, #6
	if( i2c_status != STATUS_OK)
 8006698:	2b00      	cmp	r3, #0
 800669a:	d136      	bne.n	800670a <hsensor_humidity_conversion_and_read_adc+0xd2>
		osDelay(hsensor_conversion_time/1000);
 800669c:	f007 f86c 	bl	800d778 <osDelay>
	}
	if( status != ms8607_status_ok)
		return status;
		
    i2c_status = i2c_master_read_packet_wait(&read_transfer);
 80066a0:	a802      	add	r0, sp, #8
 80066a2:	f000 fabb 	bl	8006c1c <i2c_master_read_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 80066a6:	2801      	cmp	r0, #1
 80066a8:	d02c      	beq.n	8006704 <hsensor_humidity_conversion_and_read_adc+0xcc>
		return ms8607_status_no_i2c_acknowledge;
	if( i2c_status != STATUS_OK)
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d1e0      	bne.n	8006670 <hsensor_humidity_conversion_and_read_adc+0x38>
		return ms8607_status_i2c_transfer_error;

	_adc = (buffer[0] << 8) | buffer[1];
 80066ae:	f8bd 6004 	ldrh.w	r6, [sp, #4]
	crc = buffer[2];
 80066b2:	f89d 7006 	ldrb.w	r7, [sp, #6]
	uint32_t mask    = 0xFF8000;
 80066b6:	4c1b      	ldr	r4, [pc, #108]	@ (8006724 <hsensor_humidity_conversion_and_read_adc+0xec>)
	uint32_t polynom = 0x988000; // x^8 + x^5 + x^4 + 1
 80066b8:	491b      	ldr	r1, [pc, #108]	@ (8006728 <hsensor_humidity_conversion_and_read_adc+0xf0>)
 80066ba:	ba76      	rev16	r6, r6
 80066bc:	fa1f fc86 	uxth.w	ip, r6
	uint32_t result  = (uint32_t)value<<8; // Pad with zeros as specified in spec
 80066c0:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 80066c4:	2210      	movs	r2, #16
	uint32_t msb     = 0x800000;
 80066c6:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
		if( result & msb )
 80066ca:	ea13 0f0c 	tst.w	r3, ip
			result = ((result ^ polynom) & mask) | ( result & ~mask);
 80066ce:	bf1c      	itt	ne
 80066d0:	ea04 0e01 	andne.w	lr, r4, r1
 80066d4:	ea8c 0c0e 	eorne.w	ip, ip, lr
	while( msb != 0x80 ) {
 80066d8:	3a01      	subs	r2, #1
		msb >>= 1;
 80066da:	ea4f 0353 	mov.w	r3, r3, lsr #1
		mask >>= 1;
 80066de:	ea4f 0454 	mov.w	r4, r4, lsr #1
		polynom >>=1;
 80066e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
	while( msb != 0x80 ) {
 80066e6:	d1f0      	bne.n	80066ca <hsensor_humidity_conversion_and_read_adc+0x92>
	if( result == crc )
 80066e8:	4567      	cmp	r7, ip
	// compute CRC
	status = hsensor_crc_check(_adc,crc);
	if( status != ms8607_status_ok)
		return status;
	
	*adc = _adc;
 80066ea:	bf0c      	ite	eq
 80066ec:	802e      	strheq	r6, [r5, #0]
		return ms8607_status_crc_error;
 80066ee:	2003      	movne	r0, #3

	return status;
}
 80066f0:	b007      	add	sp, #28
 80066f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(hsensor_conversion_time/1000);
 80066f4:	4a09      	ldr	r2, [pc, #36]	@ (800671c <hsensor_humidity_conversion_and_read_adc+0xe4>)
 80066f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006720 <hsensor_humidity_conversion_and_read_adc+0xe8>)
 80066f8:	6810      	ldr	r0, [r2, #0]
 80066fa:	fba3 3000 	umull	r3, r0, r3, r0
 80066fe:	0980      	lsrs	r0, r0, #6
 8006700:	f007 f83a 	bl	800d778 <osDelay>
		return ms8607_status_no_i2c_acknowledge;
 8006704:	2001      	movs	r0, #1
}
 8006706:	b007      	add	sp, #28
 8006708:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(hsensor_conversion_time/1000);
 800670a:	f007 f835 	bl	800d778 <osDelay>
	if( status != ms8607_status_ok)
 800670e:	e7af      	b.n	8006670 <hsensor_humidity_conversion_and_read_adc+0x38>
 8006710:	20001936 	.word	0x20001936
 8006714:	00030080 	.word	0x00030080
 8006718:	00010080 	.word	0x00010080
 800671c:	20000000 	.word	0x20000000
 8006720:	10624dd3 	.word	0x10624dd3
 8006724:	00ff8000 	.word	0x00ff8000
 8006728:	00988000 	.word	0x00988000

0800672c <psensor_read_eeprom>:
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 *       - ms8607_status_crc_error : CRC check error on the coefficients
 */
enum ms8607_status psensor_read_eeprom(void)
{
 800672c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006730:	b087      	sub	sp, #28
 8006732:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8006814 <psensor_read_eeprom+0xe8>
	struct i2c_master_packet read_transfer = {
 8006736:	4e33      	ldr	r6, [pc, #204]	@ (8006804 <psensor_read_eeprom+0xd8>)
	struct i2c_master_packet transfer = {
 8006738:	4d33      	ldr	r5, [pc, #204]	@ (8006808 <psensor_read_eeprom+0xdc>)
{
 800673a:	f04f 09a0 	mov.w	r9, #160	@ 0xa0
 800673e:	af01      	add	r7, sp, #4
	buffer[0] = 0;
 8006740:	2400      	movs	r4, #0
 8006742:	e013      	b.n	800676c <psensor_read_eeprom+0x40>
	if( i2c_status != STATUS_OK)
 8006744:	bb33      	cbnz	r3, 8006794 <psensor_read_eeprom+0x68>
	i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8006746:	f000 fa69 	bl	8006c1c <i2c_master_read_packet_wait>
	enum ms8607_status status;
	uint8_t i;
	
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 800674a:	f109 0902 	add.w	r9, r9, #2
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800674e:	2801      	cmp	r0, #1
	i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8006750:	4601      	mov	r1, r0
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 8006752:	fa5f f989 	uxtb.w	r9, r9
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8006756:	d019      	beq.n	800678c <psensor_read_eeprom+0x60>
	if( i2c_status != STATUS_OK)
 8006758:	b9e0      	cbnz	r0, 8006794 <psensor_read_eeprom+0x68>
 800675a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	*coeff = (buffer[0] << 8) | buffer[1];
 800675e:	ba5a      	rev16	r2, r3
 8006760:	f828 2f02 	strh.w	r2, [r8, #2]!
    if (*coeff == 0) {
 8006764:	b1b3      	cbz	r3, 8006794 <psensor_read_eeprom+0x68>
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 8006766:	f1b9 0fae 	cmp.w	r9, #174	@ 0xae
 800676a:	d017      	beq.n	800679c <psensor_read_eeprom+0x70>
	i2c_status = i2c_master_write_packet_wait(&transfer);
 800676c:	a804      	add	r0, sp, #16
	struct i2c_master_packet read_transfer = {
 800676e:	e9cd 6702 	strd	r6, r7, [sp, #8]
	data[0] = cmd;
 8006772:	f88d 9000 	strb.w	r9, [sp]
	buffer[0] = 0;
 8006776:	f8ad 4004 	strh.w	r4, [sp, #4]
	struct i2c_master_packet transfer = {
 800677a:	9504      	str	r5, [sp, #16]
 800677c:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006780:	f000 fa5a 	bl	8006c38 <i2c_master_write_packet_wait>
 8006784:	4603      	mov	r3, r0
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8006786:	2b01      	cmp	r3, #1
	i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8006788:	a802      	add	r0, sp, #8
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800678a:	d1db      	bne.n	8006744 <psensor_read_eeprom+0x18>
 800678c:	2001      	movs	r0, #1
		return ms8607_status_crc_error;
	
	psensor_coeff_read = true;
	
  	return ms8607_status_ok;
}
 800678e:	b007      	add	sp, #28
 8006790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ms8607_status_i2c_transfer_error;
 8006794:	2002      	movs	r0, #2
}
 8006796:	b007      	add	sp, #28
 8006798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if( !psensor_crc_check( eeprom_coeff, (eeprom_coeff[CRC_INDEX] & 0xF000)>>12 ) )
 800679c:	4c1b      	ldr	r4, [pc, #108]	@ (800680c <psensor_read_eeprom+0xe0>)
 800679e:	8825      	ldrh	r5, [r4, #0]
	uint8_t cnt, n_bit;
	uint16_t n_rem, crc_read;
	
	n_rem = 0x00;
	crc_read = n_prom[0];
	n_prom[COEFFICIENT_NUMBERS] = 0;
 80067a0:	81e0      	strh	r0, [r4, #14]
	n_prom[0] = (0x0FFF & (n_prom[0]));    // Clear the CRC byte
 80067a2:	f3c5 030b 	ubfx	r3, r5, #0, #12
	if( !psensor_crc_check( eeprom_coeff, (eeprom_coeff[CRC_INDEX] & 0xF000)>>12 ) )
 80067a6:	0b2e      	lsrs	r6, r5, #12
	n_prom[0] = (0x0FFF & (n_prom[0]));    // Clear the CRC byte
 80067a8:	8023      	strh	r3, [r4, #0]
	n_rem = 0x00;
 80067aa:	4602      	mov	r2, r0

	for( cnt = 0 ; cnt < (COEFFICIENT_NUMBERS+1)*2 ; cnt++ ) {

		// Get next byte
		if (cnt%2 == 1)
 80067ac:	07c8      	lsls	r0, r1, #31
 80067ae:	bf46      	itte	mi
 80067b0:	b2db      	uxtbmi	r3, r3
 80067b2:	405a      	eormi	r2, r3
			n_rem ^=  n_prom[cnt>>1] & 0x00FF ;
		else
			n_rem ^=  n_prom[cnt>>1]>>8 ;
 80067b4:	ea82 2213 	eorpl.w	r2, r2, r3, lsr #8
	n_rem = 0x00;
 80067b8:	2008      	movs	r0, #8

		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {

			if( n_rem & 0x8000 )
				n_rem = (n_rem << 1) ^ 0x3000;
 80067ba:	0053      	lsls	r3, r2, #1
			if( n_rem & 0x8000 )
 80067bc:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
				n_rem = (n_rem << 1) ^ 0x3000;
 80067c0:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
			else
				n_rem <<= 1;
 80067c4:	bf08      	it	eq
 80067c6:	0052      	lsleq	r2, r2, #1
				n_rem = (n_rem << 1) ^ 0x3000;
 80067c8:	b21b      	sxth	r3, r3
		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
 80067ca:	f100 30ff 	add.w	r0, r0, #4294967295
				n_rem = (n_rem << 1) ^ 0x3000;
 80067ce:	bf14      	ite	ne
 80067d0:	b29a      	uxthne	r2, r3
				n_rem <<= 1;
 80067d2:	b292      	uxtheq	r2, r2
		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
 80067d4:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 80067d8:	d1ef      	bne.n	80067ba <psensor_read_eeprom+0x8e>
	for( cnt = 0 ; cnt < (COEFFICIENT_NUMBERS+1)*2 ; cnt++ ) {
 80067da:	3101      	adds	r1, #1
 80067dc:	b2c9      	uxtb	r1, r1
 80067de:	2910      	cmp	r1, #16
 80067e0:	d003      	beq.n	80067ea <psensor_read_eeprom+0xbe>
			n_rem ^=  n_prom[cnt>>1] & 0x00FF ;
 80067e2:	084b      	lsrs	r3, r1, #1
 80067e4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80067e8:	e7e0      	b.n	80067ac <psensor_read_eeprom+0x80>
	if( !psensor_crc_check( eeprom_coeff, (eeprom_coeff[CRC_INDEX] & 0xF000)>>12 ) )
 80067ea:	ebb6 3f12 	cmp.w	r6, r2, lsr #12
	psensor_coeff_read = true;
 80067ee:	bf08      	it	eq
 80067f0:	4b07      	ldreq	r3, [pc, #28]	@ (8006810 <psensor_read_eeprom+0xe4>)
		}
	}
	n_rem >>= 12;
	n_prom[0] = crc_read;
 80067f2:	8025      	strh	r5, [r4, #0]
	psensor_coeff_read = true;
 80067f4:	bf0a      	itet	eq
 80067f6:	2201      	moveq	r2, #1
		return ms8607_status_crc_error;
 80067f8:	2003      	movne	r0, #3
	psensor_coeff_read = true;
 80067fa:	701a      	strbeq	r2, [r3, #0]
}
 80067fc:	b007      	add	sp, #28
 80067fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006802:	bf00      	nop
 8006804:	000200ec 	.word	0x000200ec
 8006808:	000100ec 	.word	0x000100ec
 800680c:	20001924 	.word	0x20001924
 8006810:	20001934 	.word	0x20001934
 8006814:	20001922 	.word	0x20001922

08006818 <psensor_conversion_and_read_adc>:
{
 8006818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800681a:	b087      	sub	sp, #28
 800681c:	4604      	mov	r4, r0
    struct i2c_master_packet read_transfer = {
 800681e:	a801      	add	r0, sp, #4
	buffer[0] = 0;
 8006820:	2300      	movs	r3, #0
    struct i2c_master_packet read_transfer = {
 8006822:	4a27      	ldr	r2, [pc, #156]	@ (80068c0 <psensor_conversion_and_read_adc+0xa8>)
 8006824:	9003      	str	r0, [sp, #12]
	struct i2c_master_packet transfer = {
 8006826:	4f27      	ldr	r7, [pc, #156]	@ (80068c4 <psensor_conversion_and_read_adc+0xac>)
	data[0] = cmd;
 8006828:	f88d 4000 	strb.w	r4, [sp]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 800682c:	a804      	add	r0, sp, #16
{
 800682e:	460e      	mov	r6, r1
	buffer[0] = 0;
 8006830:	f8ad 3004 	strh.w	r3, [sp, #4]
	buffer[2] = 0;
 8006834:	f88d 3006 	strb.w	r3, [sp, #6]
    struct i2c_master_packet read_transfer = {
 8006838:	9202      	str	r2, [sp, #8]
	struct i2c_master_packet transfer = {
 800683a:	9704      	str	r7, [sp, #16]
 800683c:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006840:	f000 f9fa 	bl	8006c38 <i2c_master_write_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8006844:	2801      	cmp	r0, #1
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 8006846:	f3c4 0442 	ubfx	r4, r4, #1, #3
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800684a:	d028      	beq.n	800689e <psensor_conversion_and_read_adc+0x86>
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 800684c:	4b1e      	ldr	r3, [pc, #120]	@ (80068c8 <psensor_conversion_and_read_adc+0xb0>)
 800684e:	4605      	mov	r5, r0
 8006850:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006854:	4b1d      	ldr	r3, [pc, #116]	@ (80068cc <psensor_conversion_and_read_adc+0xb4>)
 8006856:	fba3 3000 	umull	r3, r0, r3, r0
 800685a:	0980      	lsrs	r0, r0, #6
	if( i2c_status != STATUS_OK)
 800685c:	bb5d      	cbnz	r5, 80068b6 <psensor_conversion_and_read_adc+0x9e>
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 800685e:	f006 ff8b 	bl	800d778 <osDelay>
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006862:	a804      	add	r0, sp, #16
	data[0] = cmd;
 8006864:	f88d 5000 	strb.w	r5, [sp]
	struct i2c_master_packet transfer = {
 8006868:	9704      	str	r7, [sp, #16]
 800686a:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 800686e:	f000 f9e3 	bl	8006c38 <i2c_master_write_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8006872:	2801      	cmp	r0, #1
 8006874:	d01c      	beq.n	80068b0 <psensor_conversion_and_read_adc+0x98>
	if( i2c_status != STATUS_OK)
 8006876:	bb00      	cbnz	r0, 80068ba <psensor_conversion_and_read_adc+0xa2>
    i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8006878:	a802      	add	r0, sp, #8
 800687a:	f000 f9cf 	bl	8006c1c <i2c_master_read_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800687e:	2801      	cmp	r0, #1
 8006880:	d016      	beq.n	80068b0 <psensor_conversion_and_read_adc+0x98>
	if( i2c_status != STATUS_OK)
 8006882:	b9d0      	cbnz	r0, 80068ba <psensor_conversion_and_read_adc+0xa2>
	*adc = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
 8006884:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006888:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800688c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006896:	4313      	orrs	r3, r2
 8006898:	6033      	str	r3, [r6, #0]
}
 800689a:	b007      	add	sp, #28
 800689c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 800689e:	4a0a      	ldr	r2, [pc, #40]	@ (80068c8 <psensor_conversion_and_read_adc+0xb0>)
 80068a0:	4b0a      	ldr	r3, [pc, #40]	@ (80068cc <psensor_conversion_and_read_adc+0xb4>)
 80068a2:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80068a6:	fba3 3000 	umull	r3, r0, r3, r0
 80068aa:	0980      	lsrs	r0, r0, #6
 80068ac:	f006 ff64 	bl	800d778 <osDelay>
		return ms8607_status_no_i2c_acknowledge;
 80068b0:	2001      	movs	r0, #1
}
 80068b2:	b007      	add	sp, #28
 80068b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 80068b6:	f006 ff5f 	bl	800d778 <osDelay>
		return ms8607_status_i2c_transfer_error;
 80068ba:	2002      	movs	r0, #2
}
 80068bc:	b007      	add	sp, #28
 80068be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068c0:	000300ec 	.word	0x000300ec
 80068c4:	000100ec 	.word	0x000100ec
 80068c8:	08015e4c 	.word	0x08015e4c
 80068cc:	10624dd3 	.word	0x10624dd3

080068d0 <ms8607_init>:
	hsensor_i2c_master_mode = ms8607_i2c_hold;
 80068d0:	4903      	ldr	r1, [pc, #12]	@ (80068e0 <ms8607_init+0x10>)
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 80068d2:	4b04      	ldr	r3, [pc, #16]	@ (80068e4 <ms8607_init+0x14>)
	hsensor_i2c_master_mode = ms8607_i2c_hold;
 80068d4:	2000      	movs	r0, #0
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 80068d6:	2205      	movs	r2, #5
	hsensor_i2c_master_mode = ms8607_i2c_hold;
 80068d8:	7008      	strb	r0, [r1, #0]
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 80068da:	701a      	strb	r2, [r3, #0]
	i2c_master_init();
 80068dc:	f000 b99c 	b.w	8006c18 <i2c_master_init>
 80068e0:	20001936 	.word	0x20001936
 80068e4:	20001935 	.word	0x20001935

080068e8 <MS8607_osr>:
	psensor_resolution_osr = osr;
 80068e8:	4b01      	ldr	r3, [pc, #4]	@ (80068f0 <MS8607_osr+0x8>)
 80068ea:	7018      	strb	r0, [r3, #0]
	i2c_master_init();
 80068ec:	f000 b994 	b.w	8006c18 <i2c_master_init>
 80068f0:	20001935 	.word	0x20001935

080068f4 <ms8607_is_connected>:
{
 80068f4:	b500      	push	{lr}
 80068f6:	b083      	sub	sp, #12
	struct i2c_master_packet transfer = {
 80068f8:	2280      	movs	r2, #128	@ 0x80
 80068fa:	2300      	movs	r3, #0
	i2c_status = i2c_master_write_packet_wait(&transfer);
 80068fc:	4668      	mov	r0, sp
	struct i2c_master_packet transfer = {
 80068fe:	e9cd 2300 	strd	r2, r3, [sp]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006902:	f000 f999 	bl	8006c38 <i2c_master_write_packet_wait>
	if( i2c_status != STATUS_OK)
 8006906:	b958      	cbnz	r0, 8006920 <ms8607_is_connected+0x2c>
	struct i2c_master_packet transfer = {
 8006908:	4603      	mov	r3, r0
 800690a:	22ec      	movs	r2, #236	@ 0xec
	i2c_status = i2c_master_write_packet_wait(&transfer);
 800690c:	4668      	mov	r0, sp
	struct i2c_master_packet transfer = {
 800690e:	e9cd 2300 	strd	r2, r3, [sp]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8006912:	f000 f991 	bl	8006c38 <i2c_master_write_packet_wait>
	if( i2c_status != STATUS_OK)
 8006916:	b918      	cbnz	r0, 8006920 <ms8607_is_connected+0x2c>
 8006918:	2001      	movs	r0, #1
}
 800691a:	b003      	add	sp, #12
 800691c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006920:	2000      	movs	r0, #0
 8006922:	b003      	add	sp, #12
 8006924:	f85d fb04 	ldr.w	pc, [sp], #4

08006928 <ms8607_read_humidity>:
{
 8006928:	b510      	push	{r4, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	4604      	mov	r4, r0
	status = hsensor_humidity_conversion_and_read_adc( &adc);
 800692e:	f10d 0006 	add.w	r0, sp, #6
 8006932:	f7ff fe81 	bl	8006638 <hsensor_humidity_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8006936:	b988      	cbnz	r0, 800695c <ms8607_read_humidity+0x34>
	*humidity = (float)adc * HUMIDITY_COEFF_MUL / (1UL<<16) + HUMIDITY_COEFF_ADD;
 8006938:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800693c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8006960 <ms8607_read_humidity+0x38>
 8006940:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8006964 <ms8607_read_humidity+0x3c>
 8006944:	ee07 3a90 	vmov	s15, r3
 8006948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006950:	eeb9 7a08 	vmov.f32	s14, #152	@ 0xc0c00000 -6.0
 8006954:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006958:	ed84 7a00 	vstr	s14, [r4]
	}
 800695c:	b002      	add	sp, #8
 800695e:	bd10      	pop	{r4, pc}
 8006960:	42fa0000 	.word	0x42fa0000
 8006964:	37800000 	.word	0x37800000

08006968 <psensor_read_temperature>:
{
 8006968:	b510      	push	{r4, lr}
	if( psensor_coeff_read == false )
 800696a:	4b28      	ldr	r3, [pc, #160]	@ (8006a0c <psensor_read_temperature+0xa4>)
 800696c:	781b      	ldrb	r3, [r3, #0]
{
 800696e:	b082      	sub	sp, #8
 8006970:	4604      	mov	r4, r0
	if( psensor_coeff_read == false )
 8006972:	b913      	cbnz	r3, 800697a <psensor_read_temperature+0x12>
		status = psensor_read_eeprom();
 8006974:	f7ff feda 	bl	800672c <psensor_read_eeprom>
	if( status != ms8607_status_ok)
 8006978:	bba8      	cbnz	r0, 80069e6 <psensor_read_temperature+0x7e>
	cmd = psensor_resolution_osr*2;
 800697a:	4b25      	ldr	r3, [pc, #148]	@ (8006a10 <psensor_read_temperature+0xa8>)
 800697c:	7818      	ldrb	r0, [r3, #0]
 800697e:	0040      	lsls	r0, r0, #1
 8006980:	b2c0      	uxtb	r0, r0
	status = psensor_conversion_and_read_adc( cmd, &adc_temperature);
 8006982:	a901      	add	r1, sp, #4
 8006984:	f040 0050 	orr.w	r0, r0, #80	@ 0x50
 8006988:	f7ff ff46 	bl	8006818 <psensor_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 800698c:	bb58      	cbnz	r0, 80069e6 <psensor_read_temperature+0x7e>
    if (adc_temperature == 0) {
 800698e:	9b01      	ldr	r3, [sp, #4]
 8006990:	b3cb      	cbz	r3, 8006a06 <psensor_read_temperature+0x9e>
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 8006992:	4a20      	ldr	r2, [pc, #128]	@ (8006a14 <psensor_read_temperature+0xac>)
 8006994:	8951      	ldrh	r1, [r2, #10]
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 8006996:	8992      	ldrh	r2, [r2, #12]
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 8006998:	eba3 2301 	sub.w	r3, r3, r1, lsl #8
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 800699c:	fb82 2103 	smull	r2, r1, r2, r3
 80069a0:	0dd2      	lsrs	r2, r2, #23
 80069a2:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80069a6:	f502 62fa 	add.w	r2, r2, #2000	@ 0x7d0
	if( TEMP < 2000 )
 80069aa:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
		T2 = ( 3 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 33;
 80069ae:	fb83 3103 	smull	r3, r1, r3, r3
	if( TEMP < 2000 )
 80069b2:	da1a      	bge.n	80069ea <psensor_read_temperature+0x82>
		T2 = ( 3 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 33;
 80069b4:	eb13 0c03 	adds.w	ip, r3, r3
 80069b8:	eb41 0e01 	adc.w	lr, r1, r1
 80069bc:	eb1c 0c03 	adds.w	ip, ip, r3
 80069c0:	eb41 010e 	adc.w	r1, r1, lr
 80069c4:	104b      	asrs	r3, r1, #1
 80069c6:	ee07 3a10 	vmov	s14, r3
	*temperature = ( (float)TEMP - T2 ) / 100;
 80069ca:	ee07 2a90 	vmov	s15, r2
 80069ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80069d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069d6:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8006a18 <psensor_read_temperature+0xb0>
 80069da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80069e2:	ed84 7a00 	vstr	s14, [r4]
}
 80069e6:	b002      	add	sp, #8
 80069e8:	bd10      	pop	{r4, pc}
		T2 = ( 5 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 38;
 80069ea:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 80069ee:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80069f2:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
 80069f6:	eb1c 0c03 	adds.w	ip, ip, r3
 80069fa:	eb41 010e 	adc.w	r1, r1, lr
 80069fe:	118b      	asrs	r3, r1, #6
 8006a00:	ee07 3a10 	vmov	s14, r3
		SENS2 = 0 ;
 8006a04:	e7e1      	b.n	80069ca <psensor_read_temperature+0x62>
        return ms8607_status_i2c_transfer_error;
 8006a06:	2002      	movs	r0, #2
}
 8006a08:	b002      	add	sp, #8
 8006a0a:	bd10      	pop	{r4, pc}
 8006a0c:	20001934 	.word	0x20001934
 8006a10:	20001935 	.word	0x20001935
 8006a14:	20001924 	.word	0x20001924
 8006a18:	42c80000 	.word	0x42c80000

08006a1c <ms8607_read_temperature>:
	status = psensor_read_temperature(t);
 8006a1c:	f7ff bfa4 	b.w	8006968 <psensor_read_temperature>

08006a20 <psensor_read_pressure>:
{
 8006a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( psensor_coeff_read == false )
 8006a24:	4b77      	ldr	r3, [pc, #476]	@ (8006c04 <psensor_read_pressure+0x1e4>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
{
 8006a28:	b083      	sub	sp, #12
 8006a2a:	4605      	mov	r5, r0
	if( psensor_coeff_read == false )
 8006a2c:	b91b      	cbnz	r3, 8006a36 <psensor_read_pressure+0x16>
		status = psensor_read_eeprom();
 8006a2e:	f7ff fe7d 	bl	800672c <psensor_read_eeprom>
	if( status != ms8607_status_ok)
 8006a32:	4604      	mov	r4, r0
 8006a34:	b950      	cbnz	r0, 8006a4c <psensor_read_pressure+0x2c>
	cmd = psensor_resolution_osr*2;
 8006a36:	4e74      	ldr	r6, [pc, #464]	@ (8006c08 <psensor_read_pressure+0x1e8>)
 8006a38:	7833      	ldrb	r3, [r6, #0]
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	b2db      	uxtb	r3, r3
	status = psensor_conversion_and_read_adc( cmd, &adc_temperature);
 8006a3e:	4669      	mov	r1, sp
 8006a40:	f043 0050 	orr.w	r0, r3, #80	@ 0x50
 8006a44:	f7ff fee8 	bl	8006818 <psensor_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8006a48:	4604      	mov	r4, r0
 8006a4a:	b118      	cbz	r0, 8006a54 <psensor_read_pressure+0x34>
}
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	b003      	add	sp, #12
 8006a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cmd = psensor_resolution_osr*2;
 8006a54:	7830      	ldrb	r0, [r6, #0]
 8006a56:	0040      	lsls	r0, r0, #1
 8006a58:	b2c0      	uxtb	r0, r0
	status = psensor_conversion_and_read_adc( cmd, &adc_pressure);
 8006a5a:	a901      	add	r1, sp, #4
 8006a5c:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8006a60:	f7ff feda 	bl	8006818 <psensor_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8006a64:	4604      	mov	r4, r0
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d1f0      	bne.n	8006a4c <psensor_read_pressure+0x2c>
    if (adc_temperature == 0 || adc_pressure == 0) {
 8006a6a:	9a00      	ldr	r2, [sp, #0]
 8006a6c:	2a00      	cmp	r2, #0
 8006a6e:	f000 80be 	beq.w	8006bee <psensor_read_pressure+0x1ce>
 8006a72:	9e01      	ldr	r6, [sp, #4]
 8006a74:	2e00      	cmp	r6, #0
 8006a76:	f000 80ba 	beq.w	8006bee <psensor_read_pressure+0x1ce>
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 8006a7a:	4964      	ldr	r1, [pc, #400]	@ (8006c0c <psensor_read_pressure+0x1ec>)
 8006a7c:	894b      	ldrh	r3, [r1, #10]
 8006a7e:	eba2 2203 	sub.w	r2, r2, r3, lsl #8
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 8006a82:	898b      	ldrh	r3, [r1, #12]
 8006a84:	fb83 3002 	smull	r3, r0, r3, r2
 8006a88:	0ddb      	lsrs	r3, r3, #23
 8006a8a:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8006a8e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
	if( TEMP < 2000 )
 8006a92:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8006a96:	f280 80af 	bge.w	8006bf8 <psensor_read_pressure+0x1d8>
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006a9a:	f5b3 6cfa 	subs.w	ip, r3, #2000	@ 0x7d0
 8006a9e:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8006aa2:	f169 0700 	sbc.w	r7, r9, #0
 8006aa6:	fb0c f707 	mul.w	r7, ip, r7
 8006aaa:	fbac 0c0c 	umull	r0, ip, ip, ip
 8006aae:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
 8006ab2:	ea4f 170c 	mov.w	r7, ip, lsl #4
 8006ab6:	ea4f 1e00 	mov.w	lr, r0, lsl #4
 8006aba:	ebbe 0e00 	subs.w	lr, lr, r0
 8006abe:	ea47 7710 	orr.w	r7, r7, r0, lsr #28
 8006ac2:	eb67 070c 	sbc.w	r7, r7, ip
 8006ac6:	00bf      	lsls	r7, r7, #2
 8006ac8:	ea47 779e 	orr.w	r7, r7, lr, lsr #30
 8006acc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006ad0:	eb1e 0e00 	adds.w	lr, lr, r0
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006ad4:	ea4f 0acc 	mov.w	sl, ip, lsl #3
 8006ad8:	ea4f 08c0 	mov.w	r8, r0, lsl #3
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006adc:	eb4c 0707 	adc.w	r7, ip, r7
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006ae0:	ea4a 7a50 	orr.w	sl, sl, r0, lsr #29
 8006ae4:	ebb8 0800 	subs.w	r8, r8, r0
 8006ae8:	eb6a 0a0c 	sbc.w	sl, sl, ip
 8006aec:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8006af0:	ea4a 7a98 	orr.w	sl, sl, r8, lsr #30
 8006af4:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8006af8:	eb18 0800 	adds.w	r8, r8, r0
		if( TEMP < -1500 )
 8006afc:	4844      	ldr	r0, [pc, #272]	@ (8006c10 <psensor_read_pressure+0x1f0>)
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006afe:	eb4c 0c0a 	adc.w	ip, ip, sl
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006b02:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006b06:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if( TEMP < -1500 )
 8006b0a:	4283      	cmp	r3, r0
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006b0c:	ea4e 7e07 	orr.w	lr, lr, r7, lsl #28
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006b10:	ea48 780c 	orr.w	r8, r8, ip, lsl #28
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006b14:	ea4f 1727 	mov.w	r7, r7, asr #4
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8006b18:	ea4f 1c2c 	mov.w	ip, ip, asr #4
		if( TEMP < -1500 )
 8006b1c:	da28      	bge.n	8006b70 <psensor_read_pressure+0x150>
			OFF2 += 17 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) ;
 8006b1e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8006b22:	181b      	adds	r3, r3, r0
 8006b24:	f149 0900 	adc.w	r9, r9, #0
 8006b28:	fb03 f909 	mul.w	r9, r3, r9
 8006b2c:	fba3 a303 	umull	sl, r3, r3, r3
 8006b30:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8006b34:	ea4f 1903 	mov.w	r9, r3, lsl #4
 8006b38:	ea4f 100a 	mov.w	r0, sl, lsl #4
 8006b3c:	eb10 000a 	adds.w	r0, r0, sl
 8006b40:	ea49 791a 	orr.w	r9, r9, sl, lsr #28
 8006b44:	eb43 0909 	adc.w	r9, r3, r9
 8006b48:	eb10 000e 	adds.w	r0, r0, lr
 8006b4c:	eb47 0709 	adc.w	r7, r7, r9
 8006b50:	4686      	mov	lr, r0
			SENS2 += 9 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) ;
 8006b52:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8006b56:	ea4f 00ca 	mov.w	r0, sl, lsl #3
 8006b5a:	eb10 000a 	adds.w	r0, r0, sl
 8006b5e:	ea49 795a 	orr.w	r9, r9, sl, lsr #29
 8006b62:	eb43 0309 	adc.w	r3, r3, r9
 8006b66:	eb10 0008 	adds.w	r0, r0, r8
 8006b6a:	eb4c 0c03 	adc.w	ip, ip, r3
 8006b6e:	4680      	mov	r8, r0
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8006b70:	f8b1 a008 	ldrh.w	sl, [r1, #8]
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8006b74:	88cb      	ldrh	r3, [r1, #6]
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8006b76:	8888      	ldrh	r0, [r1, #4]
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8006b78:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8006b7c:	fb8a 1a02 	smull	r1, sl, sl, r2
 8006b80:	0989      	lsrs	r1, r1, #6
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8006b82:	fb83 3202 	smull	r3, r2, r3, r2
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8006b86:	ea4f 4b40 	mov.w	fp, r0, lsl #17
 8006b8a:	ea41 618a 	orr.w	r1, r1, sl, lsl #26
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8006b8e:	09db      	lsrs	r3, r3, #7
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8006b90:	eb11 010b 	adds.w	r1, r1, fp
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8006b94:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8006b98:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8006b9c:	ea4f 30d0 	mov.w	r0, r0, lsr #15
 8006ba0:	eb40 10aa 	adc.w	r0, r0, sl, asr #6
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8006ba4:	11d2      	asrs	r2, r2, #7
 8006ba6:	eb13 0309 	adds.w	r3, r3, r9
 8006baa:	f142 0200 	adc.w	r2, r2, #0
	SENS -= SENS2 ;
 8006bae:	ebb3 0308 	subs.w	r3, r3, r8
 8006bb2:	eb62 020c 	sbc.w	r2, r2, ip
	OFF -= OFF2 ;
 8006bb6:	ebb1 0c0e 	subs.w	ip, r1, lr
	P = ( ( (adc_pressure * SENS) >> 21 ) - OFF ) >> 15 ;
 8006bba:	fba3 3106 	umull	r3, r1, r3, r6
 8006bbe:	fb06 1102 	mla	r1, r6, r2, r1
 8006bc2:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8006bc6:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
	OFF -= OFF2 ;
 8006bca:	eb60 0707 	sbc.w	r7, r0, r7
	P = ( ( (adc_pressure * SENS) >> 21 ) - OFF ) >> 15 ;
 8006bce:	1549      	asrs	r1, r1, #21
 8006bd0:	ebb3 000c 	subs.w	r0, r3, ip
 8006bd4:	eb61 0107 	sbc.w	r1, r1, r7
 8006bd8:	0bc0      	lsrs	r0, r0, #15
	*pressure = (float)P;
 8006bda:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
 8006bde:	13c9      	asrs	r1, r1, #15
 8006be0:	f7fa f962 	bl	8000ea8 <__aeabi_l2f>
 8006be4:	6028      	str	r0, [r5, #0]
}
 8006be6:	4620      	mov	r0, r4
 8006be8:	b003      	add	sp, #12
 8006bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ms8607_status_i2c_transfer_error;
 8006bee:	2402      	movs	r4, #2
}
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	b003      	add	sp, #12
 8006bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SENS2 = 0 ;
 8006bf8:	46a0      	mov	r8, r4
 8006bfa:	46a4      	mov	ip, r4
		OFF2 = 0 ;
 8006bfc:	46a6      	mov	lr, r4
 8006bfe:	4627      	mov	r7, r4
 8006c00:	e7b6      	b.n	8006b70 <psensor_read_pressure+0x150>
 8006c02:	bf00      	nop
 8006c04:	20001934 	.word	0x20001934
 8006c08:	20001935 	.word	0x20001935
 8006c0c:	20001924 	.word	0x20001924
 8006c10:	fffffa24 	.word	0xfffffa24

08006c14 <ms8607_read_pressure>:
	status = psensor_read_pressure(p);
 8006c14:	f7ff bf04 	b.w	8006a20 <psensor_read_pressure>

08006c18 <i2c_master_init>:
#include "ms8607.h"
#include "ms8607_i2c.h"

void i2c_master_init(void)
{
}
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop

08006c1c <i2c_master_read_packet_wait>:

enum status_code i2c_master_read_packet_wait(struct i2c_master_packet *const packet)
{
 8006c1c:	b510      	push	{r4, lr}
 8006c1e:	b082      	sub	sp, #8
    uint8_t res = HAL_I2C_Master_Receive(&hi2c2, packet->address, packet->data, packet->data_length, 50);
 8006c20:	2432      	movs	r4, #50	@ 0x32
 8006c22:	8843      	ldrh	r3, [r0, #2]
 8006c24:	6842      	ldr	r2, [r0, #4]
 8006c26:	8801      	ldrh	r1, [r0, #0]
 8006c28:	9400      	str	r4, [sp, #0]
 8006c2a:	4802      	ldr	r0, [pc, #8]	@ (8006c34 <i2c_master_read_packet_wait+0x18>)
 8006c2c:	f004 fafa 	bl	800b224 <HAL_I2C_Master_Receive>
    return (enum status_code)res;
}
 8006c30:	b002      	add	sp, #8
 8006c32:	bd10      	pop	{r4, pc}
 8006c34:	200017ac 	.word	0x200017ac

08006c38 <i2c_master_write_packet_wait>:


enum status_code i2c_master_write_packet_wait(struct i2c_master_packet *const packet)
{
 8006c38:	b510      	push	{r4, lr}
 8006c3a:	b082      	sub	sp, #8
    uint8_t res = HAL_I2C_Master_Transmit(&hi2c2, packet->address, packet->data, packet->data_length, 50);
 8006c3c:	2432      	movs	r4, #50	@ 0x32
 8006c3e:	8843      	ldrh	r3, [r0, #2]
 8006c40:	6842      	ldr	r2, [r0, #4]
 8006c42:	8801      	ldrh	r1, [r0, #0]
 8006c44:	9400      	str	r4, [sp, #0]
 8006c46:	4802      	ldr	r0, [pc, #8]	@ (8006c50 <i2c_master_write_packet_wait+0x18>)
 8006c48:	f004 fa22 	bl	800b090 <HAL_I2C_Master_Transmit>
    return (enum status_code)res;
}
 8006c4c:	b002      	add	sp, #8
 8006c4e:	bd10      	pop	{r4, pc}
 8006c50:	200017ac 	.word	0x200017ac

08006c54 <i2c_master_write_packet_wait_no_stop>:

enum status_code i2c_master_write_packet_wait_no_stop(struct i2c_master_packet *const packet)
 8006c54:	b510      	push	{r4, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	2432      	movs	r4, #50	@ 0x32
 8006c5a:	8843      	ldrh	r3, [r0, #2]
 8006c5c:	6842      	ldr	r2, [r0, #4]
 8006c5e:	8801      	ldrh	r1, [r0, #0]
 8006c60:	9400      	str	r4, [sp, #0]
 8006c62:	4802      	ldr	r0, [pc, #8]	@ (8006c6c <i2c_master_write_packet_wait_no_stop+0x18>)
 8006c64:	f004 fa14 	bl	800b090 <HAL_I2C_Master_Transmit>
 8006c68:	b002      	add	sp, #8
 8006c6a:	bd10      	pop	{r4, pc}
 8006c6c:	200017ac 	.word	0x200017ac

08006c70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c70:	4b11      	ldr	r3, [pc, #68]	@ (8006cb8 <HAL_MspInit+0x48>)
{
 8006c72:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c74:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8006c76:	f040 0001 	orr.w	r0, r0, #1
 8006c7a:	6618      	str	r0, [r3, #96]	@ 0x60
 8006c7c:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
{
 8006c7e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c80:	f004 0401 	and.w	r4, r4, #1
 8006c84:	9400      	str	r4, [sp, #0]
 8006c86:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c88:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8006c8a:	f044 5480 	orr.w	r4, r4, #268435456	@ 0x10000000
 8006c8e:	659c      	str	r4, [r3, #88]	@ 0x58
 8006c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c96:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006c98:	2200      	movs	r2, #0
 8006c9a:	210f      	movs	r1, #15
 8006c9c:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ca0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006ca2:	f003 fb4f 	bl	800a344 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8006ca6:	2105      	movs	r1, #5
 8006ca8:	2200      	movs	r2, #0
 8006caa:	4608      	mov	r0, r1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006cac:	b002      	add	sp, #8
 8006cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8006cb2:	f003 bb47 	b.w	800a344 <HAL_NVIC_SetPriority>
 8006cb6:	bf00      	nop
 8006cb8:	40021000 	.word	0x40021000
 8006cbc:	00000000 	.word	0x00000000

08006cc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006cc0:	b530      	push	{r4, r5, lr}
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	b09b      	sub	sp, #108	@ 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006cc6:	225c      	movs	r2, #92	@ 0x5c
 8006cc8:	2100      	movs	r1, #0
 8006cca:	a802      	add	r0, sp, #8
 8006ccc:	f009 fee2 	bl	8010a94 <memset>
  if(hadc->Instance==ADC1)
 8006cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8006d80 <HAL_ADC_MspInit+0xc0>)
 8006cd2:	6822      	ldr	r2, [r4, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d001      	beq.n	8006cdc <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006cd8:	b01b      	add	sp, #108	@ 0x6c
 8006cda:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006cdc:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8006d60 <HAL_ADC_MspInit+0xa0>
 8006ce0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ce4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8006d68 <HAL_ADC_MspInit+0xa8>
 8006ce8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006cec:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8006d70 <HAL_ADC_MspInit+0xb0>
 8006cf0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006cf4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8006d78 <HAL_ADC_MspInit+0xb8>
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8006cf8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006cfc:	a802      	add	r0, sp, #8
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006cfe:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8006d02:	9316      	str	r3, [sp, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006d04:	f005 fc26 	bl	800c554 <HAL_RCCEx_PeriphCLKConfig>
 8006d08:	bb18      	cbnz	r0, 8006d52 <HAL_ADC_MspInit+0x92>
    __HAL_RCC_ADC_CLK_ENABLE();
 8006d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8006d84 <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Instance = DMA1_Channel1;
 8006d0c:	4d1e      	ldr	r5, [pc, #120]	@ (8006d88 <HAL_ADC_MspInit+0xc8>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8006d0e:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8006d10:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8006d14:	64d1      	str	r1, [r2, #76]	@ 0x4c
 8006d16:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
    hdma_adc1.Instance = DMA1_Channel1;
 8006d18:	491c      	ldr	r1, [pc, #112]	@ (8006d8c <HAL_ADC_MspInit+0xcc>)
 8006d1a:	6029      	str	r1, [r5, #0]
    __HAL_RCC_ADC_CLK_ENABLE();
 8006d1c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006d20:	9201      	str	r2, [sp, #4]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC_CLK_ENABLE();
 8006d26:	9a01      	ldr	r2, [sp, #4]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8006d28:	622b      	str	r3, [r5, #32]
 8006d2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d2e:	e9c5 3103 	strd	r3, r1, [r5, #12]
 8006d32:	616a      	str	r2, [r5, #20]
 8006d34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d38:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006d3a:	4628      	mov	r0, r5
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8006d3c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8006d40:	e9c5 1206 	strd	r1, r2, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006d44:	f003 fc4a 	bl	800a5dc <HAL_DMA_Init>
 8006d48:	b930      	cbnz	r0, 8006d58 <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006d4a:	64e5      	str	r5, [r4, #76]	@ 0x4c
 8006d4c:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8006d4e:	b01b      	add	sp, #108	@ 0x6c
 8006d50:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8006d52:	f7ff fc6f 	bl	8006634 <Error_Handler>
 8006d56:	e7d8      	b.n	8006d0a <HAL_ADC_MspInit+0x4a>
      Error_Handler();
 8006d58:	f7ff fc6c 	bl	8006634 <Error_Handler>
 8006d5c:	e7f5      	b.n	8006d4a <HAL_ADC_MspInit+0x8a>
 8006d5e:	bf00      	nop
 8006d60:	00004000 	.word	0x00004000
 8006d64:	00000003 	.word	0x00000003
 8006d68:	00000001 	.word	0x00000001
 8006d6c:	00000008 	.word	0x00000008
 8006d70:	00000007 	.word	0x00000007
 8006d74:	00000002 	.word	0x00000002
 8006d78:	00000002 	.word	0x00000002
 8006d7c:	01000000 	.word	0x01000000
 8006d80:	50040000 	.word	0x50040000
 8006d84:	40021000 	.word	0x40021000
 8006d88:	20001878 	.word	0x20001878
 8006d8c:	40020008 	.word	0x40020008

08006d90 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8006d90:	4b09      	ldr	r3, [pc, #36]	@ (8006db8 <HAL_CRC_MspInit+0x28>)
 8006d92:	6802      	ldr	r2, [r0, #0]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d000      	beq.n	8006d9a <HAL_CRC_MspInit+0xa>
 8006d98:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006d9a:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
{
 8006d9e:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8006da0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006da2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006da6:	649a      	str	r2, [r3, #72]	@ 0x48
 8006da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006daa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006dae:	9301      	str	r3, [sp, #4]
 8006db0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8006db2:	b002      	add	sp, #8
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40023000 	.word	0x40023000

08006dbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	b0a5      	sub	sp, #148	@ 0x94
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dc2:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006dc4:	225c      	movs	r2, #92	@ 0x5c
 8006dc6:	a80d      	add	r0, sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dc8:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8006dcc:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
 8006dd0:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006dd2:	f009 fe5f 	bl	8010a94 <memset>
  if(hi2c->Instance==I2C1)
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	4a5a      	ldr	r2, [pc, #360]	@ (8006f44 <HAL_I2C_MspInit+0x188>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d007      	beq.n	8006dee <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8006dde:	4a5a      	ldr	r2, [pc, #360]	@ (8006f48 <HAL_I2C_MspInit+0x18c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d034      	beq.n	8006e4e <HAL_I2C_MspInit+0x92>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 8006de4:	4a59      	ldr	r2, [pc, #356]	@ (8006f4c <HAL_I2C_MspInit+0x190>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d05f      	beq.n	8006eaa <HAL_I2C_MspInit+0xee>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006dea:	b025      	add	sp, #148	@ 0x94
 8006dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006dee:	2240      	movs	r2, #64	@ 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8006df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006df4:	a80d      	add	r0, sp, #52	@ 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006df6:	920d      	str	r2, [sp, #52]	@ 0x34
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8006df8:	9319      	str	r3, [sp, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006dfa:	f005 fbab 	bl	800c554 <HAL_RCCEx_PeriphCLKConfig>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	f040 8096 	bne.w	8006f30 <HAL_I2C_MspInit+0x174>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e04:	4c52      	ldr	r4, [pc, #328]	@ (8006f50 <HAL_I2C_MspInit+0x194>)
 8006e06:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006e08:	f043 0301 	orr.w	r3, r3, #1
 8006e0c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8006e0e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e16:	2304      	movs	r3, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e18:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e1a:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	2303      	movs	r3, #3
 8006e20:	f44f 66c0 	mov.w	r6, #1536	@ 0x600
 8006e24:	2712      	movs	r7, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e26:	a908      	add	r1, sp, #32
 8006e28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006e2c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8006e30:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e34:	f003 fe8e 	bl	800ab54 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e3e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006e40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e46:	9302      	str	r3, [sp, #8]
 8006e48:	9b02      	ldr	r3, [sp, #8]
}
 8006e4a:	b025      	add	sp, #148	@ 0x94
 8006e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006e4e:	2280      	movs	r2, #128	@ 0x80
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8006e50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e54:	a80d      	add	r0, sp, #52	@ 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006e56:	920d      	str	r2, [sp, #52]	@ 0x34
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8006e58:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e5a:	f005 fb7b 	bl	800c554 <HAL_RCCEx_PeriphCLKConfig>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d169      	bne.n	8006f36 <HAL_I2C_MspInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e62:	4c3b      	ldr	r4, [pc, #236]	@ (8006f50 <HAL_I2C_MspInit+0x194>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e64:	483b      	ldr	r0, [pc, #236]	@ (8006f54 <HAL_I2C_MspInit+0x198>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e66:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006e68:	f043 0302 	orr.w	r3, r3, #2
 8006e6c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8006e6e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8006e76:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8006e7a:	2312      	movs	r3, #18
 8006e7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e80:	2201      	movs	r2, #1
 8006e82:	2303      	movs	r3, #3
 8006e84:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e88:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006e8a:	2304      	movs	r3, #4
 8006e8c:	930c      	str	r3, [sp, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e8e:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e90:	f003 fe60 	bl	800ab54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006e94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e9a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006e9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ea2:	9304      	str	r3, [sp, #16]
 8006ea4:	9b04      	ldr	r3, [sp, #16]
}
 8006ea6:	b025      	add	sp, #148	@ 0x94
 8006ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8006eaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8006eae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006eb2:	a80d      	add	r0, sp, #52	@ 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8006eb4:	920d      	str	r2, [sp, #52]	@ 0x34
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8006eb6:	931b      	str	r3, [sp, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006eb8:	f005 fb4c 	bl	800c554 <HAL_RCCEx_PeriphCLKConfig>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d13d      	bne.n	8006f3c <HAL_I2C_MspInit+0x180>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ec0:	4c23      	ldr	r4, [pc, #140]	@ (8006f50 <HAL_I2C_MspInit+0x194>)
 8006ec2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006ec4:	f043 0301 	orr.w	r3, r3, #1
 8006ec8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8006eca:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	9305      	str	r3, [sp, #20]
 8006ed2:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ed4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006ed6:	f043 0302 	orr.w	r3, r3, #2
 8006eda:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8006edc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006ee4:	2504      	movs	r5, #4
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006ee6:	2280      	movs	r2, #128	@ 0x80
 8006ee8:	2601      	movs	r6, #1
 8006eea:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006eec:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006eee:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006ef4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ef8:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006efc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006efe:	950c      	str	r5, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f00:	f003 fe28 	bl	800ab54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006f04:	2210      	movs	r2, #16
 8006f06:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f08:	4812      	ldr	r0, [pc, #72]	@ (8006f54 <HAL_I2C_MspInit+0x198>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006f0a:	950c      	str	r5, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f0c:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006f0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006f12:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f16:	f003 fe1d 	bl	800ab54 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006f1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f20:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006f22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f28:	9307      	str	r3, [sp, #28]
 8006f2a:	9b07      	ldr	r3, [sp, #28]
}
 8006f2c:	b025      	add	sp, #148	@ 0x94
 8006f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8006f30:	f7ff fb80 	bl	8006634 <Error_Handler>
 8006f34:	e766      	b.n	8006e04 <HAL_I2C_MspInit+0x48>
      Error_Handler();
 8006f36:	f7ff fb7d 	bl	8006634 <Error_Handler>
 8006f3a:	e792      	b.n	8006e62 <HAL_I2C_MspInit+0xa6>
      Error_Handler();
 8006f3c:	f7ff fb7a 	bl	8006634 <Error_Handler>
 8006f40:	e7be      	b.n	8006ec0 <HAL_I2C_MspInit+0x104>
 8006f42:	bf00      	nop
 8006f44:	40005400 	.word	0x40005400
 8006f48:	40005800 	.word	0x40005800
 8006f4c:	40005c00 	.word	0x40005c00
 8006f50:	40021000 	.word	0x40021000
 8006f54:	48000400 	.word	0x48000400

08006f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	b0a0      	sub	sp, #128	@ 0x80
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f5e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006f60:	225c      	movs	r2, #92	@ 0x5c
 8006f62:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f64:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8006f68:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8006f6c:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006f6e:	f009 fd91 	bl	8010a94 <memset>
  if(huart->Instance==USART1)
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	4a3a      	ldr	r2, [pc, #232]	@ (8007060 <HAL_UART_MspInit+0x108>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d004      	beq.n	8006f84 <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8006f7a:	4a3a      	ldr	r2, [pc, #232]	@ (8007064 <HAL_UART_MspInit+0x10c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d039      	beq.n	8006ff4 <HAL_UART_MspInit+0x9c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006f80:	b020      	add	sp, #128	@ 0x80
 8006f82:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006f84:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f86:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006f88:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8006f8a:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f8c:	f005 fae2 	bl	800c554 <HAL_RCCEx_PeriphCLKConfig>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d15f      	bne.n	8007054 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006f94:	4b34      	ldr	r3, [pc, #208]	@ (8007068 <HAL_UART_MspInit+0x110>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f96:	4835      	ldr	r0, [pc, #212]	@ (800706c <HAL_UART_MspInit+0x114>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8006f98:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f9e:	661a      	str	r2, [r3, #96]	@ 0x60
 8006fa0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006fa2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8006fa6:	9200      	str	r2, [sp, #0]
 8006fa8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006faa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fac:	f042 0202 	orr.w	r2, r2, #2
 8006fb0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006fba:	2240      	movs	r2, #64	@ 0x40
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fc2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006fc4:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fc6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006fc8:	2407      	movs	r4, #7
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006fca:	2302      	movs	r3, #2
 8006fcc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006fd0:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fd2:	f003 fdbf 	bl	800ab54 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fd6:	4825      	ldr	r0, [pc, #148]	@ (800706c <HAL_UART_MspInit+0x114>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006fd8:	2280      	movs	r2, #128	@ 0x80
 8006fda:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fdc:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = SIM_UART_RX_Pin;
 8006fde:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006fea:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(SIM_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8006fec:	f003 fdb2 	bl	800ab54 <HAL_GPIO_Init>
}
 8006ff0:	b020      	add	sp, #128	@ 0x80
 8006ff2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006ff4:	2202      	movs	r2, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8006ff6:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ff8:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006ffa:	9209      	str	r2, [sp, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8006ffc:	9312      	str	r3, [sp, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ffe:	f005 faa9 	bl	800c554 <HAL_RCCEx_PeriphCLKConfig>
 8007002:	bb50      	cbnz	r0, 800705a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007004:	4b18      	ldr	r3, [pc, #96]	@ (8007068 <HAL_UART_MspInit+0x110>)
 8007006:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007008:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800700c:	659a      	str	r2, [r3, #88]	@ 0x58
 800700e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007010:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8007014:	9202      	str	r2, [sp, #8]
 8007016:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007018:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800701a:	f042 0201 	orr.w	r2, r2, #1
 800701e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin;
 8007028:	2204      	movs	r2, #4
 800702a:	2302      	movs	r3, #2
 800702c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(SIM_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8007030:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin;
 8007032:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007034:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(SIM_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8007036:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin;
 800703a:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800703c:	2407      	movs	r4, #7
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin;
 800703e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007042:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(SIM_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8007044:	f003 fd86 	bl	800ab54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIM_UART_RX_Pin;
 8007048:	2208      	movs	r2, #8
 800704a:	2302      	movs	r3, #2
    HAL_GPIO_Init(SIM_UART_RX_GPIO_Port, &GPIO_InitStruct);
 800704c:	a904      	add	r1, sp, #16
 800704e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007052:	e7c4      	b.n	8006fde <HAL_UART_MspInit+0x86>
      Error_Handler();
 8007054:	f7ff faee 	bl	8006634 <Error_Handler>
 8007058:	e79c      	b.n	8006f94 <HAL_UART_MspInit+0x3c>
      Error_Handler();
 800705a:	f7ff faeb 	bl	8006634 <Error_Handler>
 800705e:	e7d1      	b.n	8007004 <HAL_UART_MspInit+0xac>
 8007060:	40013800 	.word	0x40013800
 8007064:	40004400 	.word	0x40004400
 8007068:	40021000 	.word	0x40021000
 800706c:	48000400 	.word	0x48000400

08007070 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8007070:	4b23      	ldr	r3, [pc, #140]	@ (8007100 <HAL_InitTick+0x90>)
{
 8007072:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM7_CLK_ENABLE();
 8007074:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007076:	f042 0220 	orr.w	r2, r2, #32
 800707a:	659a      	str	r2, [r3, #88]	@ 0x58
 800707c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
{
 800707e:	b088      	sub	sp, #32
  __HAL_RCC_TIM7_CLK_ENABLE();
 8007080:	f003 0320 	and.w	r3, r3, #32
 8007084:	9302      	str	r3, [sp, #8]
{
 8007086:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007088:	a901      	add	r1, sp, #4
 800708a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 800708c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800708e:	f005 f9b1 	bl	800c3f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8007092:	9b06      	ldr	r3, [sp, #24]
 8007094:	b9d3      	cbnz	r3, 80070cc <HAL_InitTick+0x5c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007096:	f005 f989 	bl	800c3ac <HAL_RCC_GetPCLK1Freq>
 800709a:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800709c:	4a19      	ldr	r2, [pc, #100]	@ (8007104 <HAL_InitTick+0x94>)

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800709e:	4c1a      	ldr	r4, [pc, #104]	@ (8007108 <HAL_InitTick+0x98>)
 80070a0:	491a      	ldr	r1, [pc, #104]	@ (800710c <HAL_InitTick+0x9c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80070a2:	fba2 2303 	umull	r2, r3, r2, r3
 80070a6:	0c9b      	lsrs	r3, r3, #18
 80070a8:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
 80070aa:	2200      	movs	r2, #0
  htim7.Init.Prescaler = uwPrescalerValue;
 80070ac:	e9c4 1300 	strd	r1, r3, [r4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim7);
 80070b0:	4620      	mov	r0, r4
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80070b2:	f240 33e7 	movw	r3, #999	@ 0x3e7
  htim7.Init.ClockDivision = 0;
 80070b6:	6122      	str	r2, [r4, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070b8:	60a2      	str	r2, [r4, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80070ba:	61a2      	str	r2, [r4, #24]
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80070bc:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim7);
 80070be:	f005 fce5 	bl	800ca8c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80070c2:	4606      	mov	r6, r0
 80070c4:	b130      	cbz	r0, 80070d4 <HAL_InitTick+0x64>
    }
  }

 /* Return function status */
  return status;
}
 80070c6:	4630      	mov	r0, r6
 80070c8:	b008      	add	sp, #32
 80070ca:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80070cc:	f005 f96e 	bl	800c3ac <HAL_RCC_GetPCLK1Freq>
 80070d0:	0043      	lsls	r3, r0, #1
 80070d2:	e7e3      	b.n	800709c <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim7);
 80070d4:	4620      	mov	r0, r4
 80070d6:	f005 fba5 	bl	800c824 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80070da:	4606      	mov	r6, r0
 80070dc:	2800      	cmp	r0, #0
 80070de:	d1f2      	bne.n	80070c6 <HAL_InitTick+0x56>
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80070e0:	2037      	movs	r0, #55	@ 0x37
 80070e2:	f003 f96b 	bl	800a3bc <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070e6:	2d0f      	cmp	r5, #15
 80070e8:	d901      	bls.n	80070ee <HAL_InitTick+0x7e>
        status = HAL_ERROR;
 80070ea:	2601      	movs	r6, #1
 80070ec:	e7eb      	b.n	80070c6 <HAL_InitTick+0x56>
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80070ee:	4632      	mov	r2, r6
 80070f0:	4629      	mov	r1, r5
 80070f2:	2037      	movs	r0, #55	@ 0x37
 80070f4:	f003 f926 	bl	800a344 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80070f8:	4b05      	ldr	r3, [pc, #20]	@ (8007110 <HAL_InitTick+0xa0>)
 80070fa:	601d      	str	r5, [r3, #0]
 80070fc:	e7e3      	b.n	80070c6 <HAL_InitTick+0x56>
 80070fe:	bf00      	nop
 8007100:	40021000 	.word	0x40021000
 8007104:	431bde83 	.word	0x431bde83
 8007108:	20001938 	.word	0x20001938
 800710c:	40001400 	.word	0x40001400
 8007110:	20000014 	.word	0x20000014

08007114 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007114:	e7fe      	b.n	8007114 <NMI_Handler>
 8007116:	bf00      	nop

08007118 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007118:	e7fe      	b.n	8007118 <HardFault_Handler>
 800711a:	bf00      	nop

0800711c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800711c:	e7fe      	b.n	800711c <MemManage_Handler>
 800711e:	bf00      	nop

08007120 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007120:	e7fe      	b.n	8007120 <BusFault_Handler>
 8007122:	bf00      	nop

08007124 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007124:	e7fe      	b.n	8007124 <UsageFault_Handler>
 8007126:	bf00      	nop

08007128 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop

0800712c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800712c:	4801      	ldr	r0, [pc, #4]	@ (8007134 <DMA1_Channel1_IRQHandler+0x8>)
 800712e:	f003 bb4f 	b.w	800a7d0 <HAL_DMA_IRQHandler>
 8007132:	bf00      	nop
 8007134:	20001878 	.word	0x20001878

08007138 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007138:	4801      	ldr	r0, [pc, #4]	@ (8007140 <USART1_IRQHandler+0x8>)
 800713a:	f005 bda3 	b.w	800cc84 <HAL_UART_IRQHandler>
 800713e:	bf00      	nop
 8007140:	200016d4 	.word	0x200016d4

08007144 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007144:	4801      	ldr	r0, [pc, #4]	@ (800714c <USART2_IRQHandler+0x8>)
 8007146:	f005 bd9d 	b.w	800cc84 <HAL_UART_IRQHandler>
 800714a:	bf00      	nop
 800714c:	20001650 	.word	0x20001650

08007150 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007150:	4801      	ldr	r0, [pc, #4]	@ (8007158 <TIM7_IRQHandler+0x8>)
 8007152:	f005 bb9b 	b.w	800c88c <HAL_TIM_IRQHandler>
 8007156:	bf00      	nop
 8007158:	20001938 	.word	0x20001938

0800715c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800715c:	2001      	movs	r0, #1
 800715e:	4770      	bx	lr

08007160 <_kill>:

int _kill(int pid, int sig)
{
 8007160:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007162:	f009 fd97 	bl	8010c94 <__errno>
 8007166:	2316      	movs	r3, #22
 8007168:	6003      	str	r3, [r0, #0]
  return -1;
}
 800716a:	f04f 30ff 	mov.w	r0, #4294967295
 800716e:	bd08      	pop	{r3, pc}

08007170 <_exit>:

void _exit (int status)
{
 8007170:	b508      	push	{r3, lr}
  errno = EINVAL;
 8007172:	f009 fd8f 	bl	8010c94 <__errno>
 8007176:	2316      	movs	r3, #22
 8007178:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800717a:	e7fe      	b.n	800717a <_exit+0xa>

0800717c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800717c:	f04f 30ff 	mov.w	r0, #4294967295
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop

08007184 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8007184:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007188:	604b      	str	r3, [r1, #4]
  return 0;
}
 800718a:	2000      	movs	r0, #0
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop

08007190 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8007190:	2001      	movs	r0, #1
 8007192:	4770      	bx	lr

08007194 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8007194:	2000      	movs	r0, #0
 8007196:	4770      	bx	lr

08007198 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007198:	490c      	ldr	r1, [pc, #48]	@ (80071cc <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800719a:	4a0d      	ldr	r2, [pc, #52]	@ (80071d0 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800719c:	680b      	ldr	r3, [r1, #0]
{
 800719e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80071a0:	4c0c      	ldr	r4, [pc, #48]	@ (80071d4 <_sbrk+0x3c>)
 80071a2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80071a4:	b12b      	cbz	r3, 80071b2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80071a6:	4418      	add	r0, r3
 80071a8:	4290      	cmp	r0, r2
 80071aa:	d807      	bhi.n	80071bc <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80071ac:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80071b2:	4b09      	ldr	r3, [pc, #36]	@ (80071d8 <_sbrk+0x40>)
 80071b4:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80071b6:	4418      	add	r0, r3
 80071b8:	4290      	cmp	r0, r2
 80071ba:	d9f7      	bls.n	80071ac <_sbrk+0x14>
    errno = ENOMEM;
 80071bc:	f009 fd6a 	bl	8010c94 <__errno>
 80071c0:	230c      	movs	r3, #12
 80071c2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80071c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	bd10      	pop	{r4, pc}
 80071cc:	20001984 	.word	0x20001984
 80071d0:	20010000 	.word	0x20010000
 80071d4:	00000400 	.word	0x00000400
 80071d8:	20005e38 	.word	0x20005e38

080071dc <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80071dc:	4a03      	ldr	r2, [pc, #12]	@ (80071ec <SystemInit+0x10>)
 80071de:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80071e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80071ea:	4770      	bx	lr
 80071ec:	e000ed00 	.word	0xe000ed00

080071f0 <SensorsTask>:
}

// ******************************************************************************************************

void SensorsTask(void const *argument)
{
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	ed2d 8b02 	vpush	{d8}
	uint8_t shtc3_values[6];

	printf("Sensors task created\r\n\r\n\r\n");
 80071f8:	48ae      	ldr	r0, [pc, #696]	@ (80074b4 <SensorsTask+0x2c4>)
 80071fa:	f8df 92ec 	ldr.w	r9, [pc, #748]	@ 80074e8 <SensorsTask+0x2f8>
 80071fe:	4cae      	ldr	r4, [pc, #696]	@ (80074b8 <SensorsTask+0x2c8>)
 8007200:	f8df 82e8 	ldr.w	r8, [pc, #744]	@ 80074ec <SensorsTask+0x2fc>
 8007204:	4ead      	ldr	r6, [pc, #692]	@ (80074bc <SensorsTask+0x2cc>)
 8007206:	f8df a2e8 	ldr.w	sl, [pc, #744]	@ 80074f0 <SensorsTask+0x300>
	while(1)
	{
		vTaskSuspend(NULL);		// zatrzymaj taki i czekaj na komende start
		LED2_ON();				// mrugniecie czerwona
 800720a:	f8df b2e8 	ldr.w	fp, [pc, #744]	@ 80074f4 <SensorsTask+0x304>
{
 800720e:	b083      	sub	sp, #12
	printf("Sensors task created\r\n\r\n\r\n");
 8007210:	f009 fae0 	bl	80107d4 <puts>
 8007214:	e01a      	b.n	800724c <SensorsTask+0x5c>
		  if(TMP117.temp.use_meas) {
			  TMP117.temp.value = TMP117_get_temp();
		//    			  printf("Temperatura TMP117: %.2f\r\n", TMP117.temp.value);
		  }
		}
		if(BME280.present && BME280.sensor_use){
 8007216:	7823      	ldrb	r3, [r4, #0]
 8007218:	f003 0303 	and.w	r3, r3, #3
 800721c:	2b03      	cmp	r3, #3
 800721e:	d062      	beq.n	80072e6 <SensorsTask+0xf6>
		  if(BME280.hum.use_meas) {
			  BME280.hum.value = BME280_get_hum();
		//    		      printf("Wilgotnosc BME280: %.2f\r\n", BME280.hum.value);
		  }
		}
		if(SHT3.present && SHT3.sensor_use){
 8007220:	f898 3000 	ldrb.w	r3, [r8]
 8007224:	f003 0303 	and.w	r3, r3, #3
 8007228:	2b03      	cmp	r3, #3
 800722a:	d073      	beq.n	8007314 <SensorsTask+0x124>
		  if(SHT3.hum.use_meas) {
			  SHT3.hum.value = SHTC3_get_hum(shtc3_values);
		//    			  printf("Wilgotnosc SHT3: %.2f\r\n", SHT3.hum.value);
		  }
		}
		if(MS8607.present && MS8607.sensor_use){
 800722c:	f89a 3000 	ldrb.w	r3, [sl]
 8007230:	f003 0303 	and.w	r3, r3, #3
 8007234:	2b03      	cmp	r3, #3
 8007236:	f000 8088 	beq.w	800734a <SensorsTask+0x15a>
		  if(MS8607.hum.use_meas) {
			  MS8607.hum.value = MS8607_get_hum();
		//    			  printf("Wilgotnosc MS8607: %.2f\r\n", MS8607.hum.value);
		  }
		}
		if(DPS368.present && DPS368.sensor_use){
 800723a:	7833      	ldrb	r3, [r6, #0]
 800723c:	f003 0303 	and.w	r3, r3, #3
 8007240:	2b03      	cmp	r3, #3
 8007242:	f000 809d 	beq.w	8007380 <SensorsTask+0x190>
			  osDelay( calcBusyTime(dps368_ovr_press) + 10);			// zaczekaj na koniec przetwarzania
   			  DPS368.press.value = DPS368_get_press(dps_scaled_temp);	// pobierz cisnienie uzywając temperatury
//    		  printf("Cisnienie DPS368: %.2f\r\n", DPS368.press.value);
		  }
		}
		sensors_data_ready = 1;
 8007246:	4a9e      	ldr	r2, [pc, #632]	@ (80074c0 <SensorsTask+0x2d0>)
 8007248:	2301      	movs	r3, #1
 800724a:	7013      	strb	r3, [r2, #0]
		vTaskSuspend(NULL);		// zatrzymaj taki i czekaj na komende start
 800724c:	2000      	movs	r0, #0
 800724e:	f006 ffa9 	bl	800e1a4 <vTaskSuspend>
		LED2_ON();				// mrugniecie czerwona
 8007252:	2200      	movs	r2, #0
 8007254:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007258:	4658      	mov	r0, fp
 800725a:	f003 fd7b 	bl	800ad54 <HAL_GPIO_WritePin>
		  if(TMP117.sensor_use && TMP117.temp.use_meas) {
 800725e:	f899 3000 	ldrb.w	r3, [r9]
 8007262:	f003 0303 	and.w	r3, r3, #3
 8007266:	2b03      	cmp	r3, #3
 8007268:	f000 80f4 	beq.w	8007454 <SensorsTask+0x264>
		uint32_t meas_time = 0;
 800726c:	2500      	movs	r5, #0
		  if(BME280.sensor_use && (BME280.temp.use_meas || BME280.press.use_meas || BME280.hum.use_meas) ) {
 800726e:	7823      	ldrb	r3, [r4, #0]
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	2b03      	cmp	r3, #3
 8007276:	f000 80e0 	beq.w	800743a <SensorsTask+0x24a>
		  if(SHT3.sensor_use && (SHT3.temp.use_meas || SHT3.hum.use_meas)) {
 800727a:	f898 3000 	ldrb.w	r3, [r8]
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	2b03      	cmp	r3, #3
 8007284:	f000 80c9 	beq.w	800741a <SensorsTask+0x22a>
		  if(DPS368.sensor_use && (DPS368.temp.use_meas || DPS368.press.use_meas)) {
 8007288:	7833      	ldrb	r3, [r6, #0]
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	2b03      	cmp	r3, #3
 8007290:	f000 809a 	beq.w	80073c8 <SensorsTask+0x1d8>
		uint8_t dps368_press = 0;
 8007294:	2700      	movs	r7, #0
		if(config.disp_type == 1) {
 8007296:	4b8b      	ldr	r3, [pc, #556]	@ (80074c4 <SensorsTask+0x2d4>)
 8007298:	79db      	ldrb	r3, [r3, #7]
 800729a:	f003 030e 	and.w	r3, r3, #14
 800729e:	2b02      	cmp	r3, #2
 80072a0:	f000 80ad 	beq.w	80073fe <SensorsTask+0x20e>
		osDelay(10);
 80072a4:	200a      	movs	r0, #10
 80072a6:	f006 fa67 	bl	800d778 <osDelay>
		LED2_OFF();						// mrugniecie czerwona
 80072aa:	2201      	movs	r2, #1
 80072ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80072b0:	4658      	mov	r0, fp
 80072b2:	f003 fd4f 	bl	800ad54 <HAL_GPIO_WritePin>
		osDelay(meas_time);				// odczekaj czas potrzebny na przetworzenie (maksymalny wymagany)
 80072b6:	4628      	mov	r0, r5
 80072b8:	f006 fa5e 	bl	800d778 <osDelay>
		if(TMP117.present && TMP117.sensor_use){
 80072bc:	f899 3000 	ldrb.w	r3, [r9]
 80072c0:	f003 0303 	and.w	r3, r3, #3
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d1a6      	bne.n	8007216 <SensorsTask+0x26>
		  if(TMP117.temp.use_meas) {
 80072c8:	f899 3001 	ldrb.w	r3, [r9, #1]
 80072cc:	07dd      	lsls	r5, r3, #31
 80072ce:	d5a2      	bpl.n	8007216 <SensorsTask+0x26>
			  TMP117.temp.value = TMP117_get_temp();
 80072d0:	f001 ff30 	bl	8009134 <TMP117_get_temp>
 80072d4:	ee10 3a10 	vmov	r3, s0
 80072d8:	f8c9 3002 	str.w	r3, [r9, #2]
		if(BME280.present && BME280.sensor_use){
 80072dc:	7823      	ldrb	r3, [r4, #0]
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d19c      	bne.n	8007220 <SensorsTask+0x30>
		  if(BME280.temp.use_meas) {
 80072e6:	7863      	ldrb	r3, [r4, #1]
 80072e8:	07d8      	lsls	r0, r3, #31
 80072ea:	f100 80d4 	bmi.w	8007496 <SensorsTask+0x2a6>
		  if(BME280.press.use_meas) {
 80072ee:	7ce3      	ldrb	r3, [r4, #19]
 80072f0:	07d9      	lsls	r1, r3, #31
 80072f2:	f100 80cb 	bmi.w	800748c <SensorsTask+0x29c>
		  if(BME280.hum.use_meas) {
 80072f6:	7aa3      	ldrb	r3, [r4, #10]
 80072f8:	07da      	lsls	r2, r3, #31
 80072fa:	d591      	bpl.n	8007220 <SensorsTask+0x30>
			  BME280.hum.value = BME280_get_hum();
 80072fc:	f002 f9d0 	bl	80096a0 <BME280_get_hum>
 8007300:	ee10 3a10 	vmov	r3, s0
 8007304:	f8c4 300b 	str.w	r3, [r4, #11]
		if(SHT3.present && SHT3.sensor_use){
 8007308:	f898 3000 	ldrb.w	r3, [r8]
 800730c:	f003 0303 	and.w	r3, r3, #3
 8007310:	2b03      	cmp	r3, #3
 8007312:	d18b      	bne.n	800722c <SensorsTask+0x3c>
		  SHTC3_read_values(shtc3_values);
 8007314:	4668      	mov	r0, sp
 8007316:	f002 f84d 	bl	80093b4 <SHTC3_read_values>
		  if(SHT3.temp.use_meas) {
 800731a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800731e:	07db      	lsls	r3, r3, #31
 8007320:	f100 80c0 	bmi.w	80074a4 <SensorsTask+0x2b4>
		  if(SHT3.hum.use_meas) {
 8007324:	f898 300a 	ldrb.w	r3, [r8, #10]
 8007328:	07dd      	lsls	r5, r3, #31
 800732a:	f57f af7f 	bpl.w	800722c <SensorsTask+0x3c>
			  SHT3.hum.value = SHTC3_get_hum(shtc3_values);
 800732e:	4668      	mov	r0, sp
 8007330:	f002 f88a 	bl	8009448 <SHTC3_get_hum>
 8007334:	ee10 3a10 	vmov	r3, s0
 8007338:	f8c8 300b 	str.w	r3, [r8, #11]
		if(MS8607.present && MS8607.sensor_use){
 800733c:	f89a 3000 	ldrb.w	r3, [sl]
 8007340:	f003 0303 	and.w	r3, r3, #3
 8007344:	2b03      	cmp	r3, #3
 8007346:	f47f af78 	bne.w	800723a <SensorsTask+0x4a>
		  if(MS8607.temp.use_meas) {
 800734a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800734e:	07d8      	lsls	r0, r3, #31
 8007350:	f100 808c 	bmi.w	800746c <SensorsTask+0x27c>
		  if(MS8607.press.use_meas) {
 8007354:	f89a 3013 	ldrb.w	r3, [sl, #19]
 8007358:	07d9      	lsls	r1, r3, #31
 800735a:	f100 8092 	bmi.w	8007482 <SensorsTask+0x292>
		  if(MS8607.hum.use_meas) {
 800735e:	f89a 300a 	ldrb.w	r3, [sl, #10]
 8007362:	07da      	lsls	r2, r3, #31
 8007364:	f57f af69 	bpl.w	800723a <SensorsTask+0x4a>
			  MS8607.hum.value = MS8607_get_hum();
 8007368:	f001 ff8e 	bl	8009288 <MS8607_get_hum>
 800736c:	ee10 3a10 	vmov	r3, s0
 8007370:	f8ca 300b 	str.w	r3, [sl, #11]
		if(DPS368.present && DPS368.sensor_use){
 8007374:	7833      	ldrb	r3, [r6, #0]
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b03      	cmp	r3, #3
 800737c:	f47f af63 	bne.w	8007246 <SensorsTask+0x56>
		  float dps_scaled_temp = DPS368_get_scaled_temp();				// odczytaj temperature
 8007380:	f7fe fdf2 	bl	8005f68 <DPS368_get_scaled_temp>
		  if(DPS368.temp.use_meas) {
 8007384:	7873      	ldrb	r3, [r6, #1]
 8007386:	07db      	lsls	r3, r3, #31
		  float dps_scaled_temp = DPS368_get_scaled_temp();				// odczytaj temperature
 8007388:	eeb0 8a40 	vmov.f32	s16, s0
		  if(DPS368.temp.use_meas) {
 800738c:	d415      	bmi.n	80073ba <SensorsTask+0x1ca>
		  if(dps368_press) {											// jak ma byc cisnienie z DPS
 800738e:	2f00      	cmp	r7, #0
 8007390:	f43f af59 	beq.w	8007246 <SensorsTask+0x56>
			  DPS368_start_meas_press(dps368_ovr_press);				// uruchom przetworzenie cisnienia
 8007394:	4d4c      	ldr	r5, [pc, #304]	@ (80074c8 <SensorsTask+0x2d8>)
 8007396:	7828      	ldrb	r0, [r5, #0]
 8007398:	f7fe fdc8 	bl	8005f2c <DPS368_start_meas_press>
			  osDelay( calcBusyTime(dps368_ovr_press) + 10);			// zaczekaj na koniec przetwarzania
 800739c:	7828      	ldrb	r0, [r5, #0]
 800739e:	f7fe fd6d 	bl	8005e7c <calcBusyTime>
 80073a2:	300a      	adds	r0, #10
 80073a4:	f006 f9e8 	bl	800d778 <osDelay>
   			  DPS368.press.value = DPS368_get_press(dps_scaled_temp);	// pobierz cisnienie uzywając temperatury
 80073a8:	eeb0 0a48 	vmov.f32	s0, s16
 80073ac:	f7fe fe0e 	bl	8005fcc <DPS368_get_press>
 80073b0:	ee10 3a10 	vmov	r3, s0
 80073b4:	f8c6 300b 	str.w	r3, [r6, #11]
 80073b8:	e745      	b.n	8007246 <SensorsTask+0x56>
			  DPS368.temp.value = DPS368_calc_temp(dps_scaled_temp);
 80073ba:	f7fe fda7 	bl	8005f0c <DPS368_calc_temp>
 80073be:	ee10 3a10 	vmov	r3, s0
 80073c2:	f8c6 3002 	str.w	r3, [r6, #2]
 80073c6:	e7e2      	b.n	800738e <SensorsTask+0x19e>
 80073c8:	7877      	ldrb	r7, [r6, #1]
 80073ca:	7ab3      	ldrb	r3, [r6, #10]
 80073cc:	431f      	orrs	r7, r3
		  if(DPS368.sensor_use && (DPS368.temp.use_meas || DPS368.press.use_meas)) {
 80073ce:	f017 0701 	ands.w	r7, r7, #1
 80073d2:	f43f af60 	beq.w	8007296 <SensorsTask+0xa6>
			  DPS368_start_meas_temp(dps368_ovr_temp);
 80073d6:	4f3d      	ldr	r7, [pc, #244]	@ (80074cc <SensorsTask+0x2dc>)
 80073d8:	7838      	ldrb	r0, [r7, #0]
 80073da:	f7fe fd79 	bl	8005ed0 <DPS368_start_meas_temp>
			  uint32_t dpstim = calcBusyTime(dps368_ovr_temp);
 80073de:	7838      	ldrb	r0, [r7, #0]
 80073e0:	f7fe fd4c 	bl	8005e7c <calcBusyTime>
		if(config.disp_type == 1) {
 80073e4:	4b37      	ldr	r3, [pc, #220]	@ (80074c4 <SensorsTask+0x2d4>)
			  if(DPS368.press.use_meas) dps368_press = 1;				// z DPS bedzie tez cisnienie
 80073e6:	7ab7      	ldrb	r7, [r6, #10]
		if(config.disp_type == 1) {
 80073e8:	79db      	ldrb	r3, [r3, #7]
 80073ea:	4285      	cmp	r5, r0
 80073ec:	f003 030e 	and.w	r3, r3, #14
 80073f0:	bf38      	it	cc
 80073f2:	4605      	movcc	r5, r0
 80073f4:	2b02      	cmp	r3, #2
			  if(DPS368.press.use_meas) dps368_press = 1;				// z DPS bedzie tez cisnienie
 80073f6:	f007 0701 	and.w	r7, r7, #1
		if(config.disp_type == 1) {
 80073fa:	f47f af53 	bne.w	80072a4 <SensorsTask+0xb4>
		  printf("Komenda startu pomiarow wyslana\r\n");
 80073fe:	4834      	ldr	r0, [pc, #208]	@ (80074d0 <SensorsTask+0x2e0>)
 8007400:	f009 f9e8 	bl	80107d4 <puts>
		  if(!meas_cont_mode) printf("Meas count: %u\r\n", meas_count);
 8007404:	4b33      	ldr	r3, [pc, #204]	@ (80074d4 <SensorsTask+0x2e4>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f47f af4b 	bne.w	80072a4 <SensorsTask+0xb4>
 800740e:	4b32      	ldr	r3, [pc, #200]	@ (80074d8 <SensorsTask+0x2e8>)
 8007410:	4832      	ldr	r0, [pc, #200]	@ (80074dc <SensorsTask+0x2ec>)
 8007412:	8819      	ldrh	r1, [r3, #0]
 8007414:	f009 f976 	bl	8010704 <iprintf>
 8007418:	e744      	b.n	80072a4 <SensorsTask+0xb4>
		  if(SHT3.sensor_use && (SHT3.temp.use_meas || SHT3.hum.use_meas)) {
 800741a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800741e:	f898 200a 	ldrb.w	r2, [r8, #10]
 8007422:	4313      	orrs	r3, r2
 8007424:	07df      	lsls	r7, r3, #31
 8007426:	f57f af2f 	bpl.w	8007288 <SensorsTask+0x98>
			  SHTC3_start_meas(sht3_mode);
 800742a:	4b2d      	ldr	r3, [pc, #180]	@ (80074e0 <SensorsTask+0x2f0>)
			  if(meas_time < 100) meas_time = 100;
 800742c:	2d64      	cmp	r5, #100	@ 0x64
			  SHTC3_start_meas(sht3_mode);
 800742e:	7818      	ldrb	r0, [r3, #0]
			  if(meas_time < 100) meas_time = 100;
 8007430:	bf38      	it	cc
 8007432:	2564      	movcc	r5, #100	@ 0x64
			  SHTC3_start_meas(sht3_mode);
 8007434:	f001 ff90 	bl	8009358 <SHTC3_start_meas>
			  if(meas_time < 100) meas_time = 100;
 8007438:	e726      	b.n	8007288 <SensorsTask+0x98>
		  if(BME280.sensor_use && (BME280.temp.use_meas || BME280.press.use_meas || BME280.hum.use_meas) ) {
 800743a:	7ce2      	ldrb	r2, [r4, #19]
 800743c:	7863      	ldrb	r3, [r4, #1]
 800743e:	4313      	orrs	r3, r2
 8007440:	7aa2      	ldrb	r2, [r4, #10]
 8007442:	4313      	orrs	r3, r2
 8007444:	07db      	lsls	r3, r3, #31
 8007446:	f57f af18 	bpl.w	800727a <SensorsTask+0x8a>
			  BME280_start_meas();
 800744a:	f002 f957 	bl	80096fc <BME280_start_meas>
			  if(meas_time < 500) meas_time = 500;
 800744e:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8007452:	e712      	b.n	800727a <SensorsTask+0x8a>
		  if(TMP117.sensor_use && TMP117.temp.use_meas) {
 8007454:	f899 5001 	ldrb.w	r5, [r9, #1]
 8007458:	f015 0501 	ands.w	r5, r5, #1
 800745c:	f43f af07 	beq.w	800726e <SensorsTask+0x7e>
			  TMP117_start_meas(tmp117_avr);
 8007460:	4b20      	ldr	r3, [pc, #128]	@ (80074e4 <SensorsTask+0x2f4>)
 8007462:	7818      	ldrb	r0, [r3, #0]
 8007464:	f001 fe82 	bl	800916c <TMP117_start_meas>
			  if(meas_time < 200) meas_time = 200;
 8007468:	25c8      	movs	r5, #200	@ 0xc8
 800746a:	e700      	b.n	800726e <SensorsTask+0x7e>
			  MS8607.temp.value = MS8607_get_temp();
 800746c:	f001 fef8 	bl	8009260 <MS8607_get_temp>
 8007470:	ee10 3a10 	vmov	r3, s0
 8007474:	f8ca 3002 	str.w	r3, [sl, #2]
		  if(MS8607.press.use_meas) {
 8007478:	f89a 3013 	ldrb.w	r3, [sl, #19]
 800747c:	07d9      	lsls	r1, r3, #31
 800747e:	f57f af6e 	bpl.w	800735e <SensorsTask+0x16e>
			  MS8607.press.value = MS8607_get_press();
 8007482:	f001 fef7 	bl	8009274 <MS8607_get_press>
 8007486:	ed8a 0a05 	vstr	s0, [sl, #20]
 800748a:	e768      	b.n	800735e <SensorsTask+0x16e>
			  BME280.press.value = BME280_get_press();
 800748c:	f002 f8da 	bl	8009644 <BME280_get_press>
 8007490:	ed84 0a05 	vstr	s0, [r4, #20]
 8007494:	e72f      	b.n	80072f6 <SensorsTask+0x106>
			  BME280.temp.value = BME280_get_temp();
 8007496:	f002 f8a7 	bl	80095e8 <BME280_get_temp>
 800749a:	ee10 3a10 	vmov	r3, s0
 800749e:	f8c4 3002 	str.w	r3, [r4, #2]
 80074a2:	e724      	b.n	80072ee <SensorsTask+0xfe>
			  SHT3.temp.value = SHTC3_get_temp(shtc3_values);
 80074a4:	4668      	mov	r0, sp
 80074a6:	f001 ff99 	bl	80093dc <SHTC3_get_temp>
 80074aa:	ee10 3a10 	vmov	r3, s0
 80074ae:	f8c8 3002 	str.w	r3, [r8, #2]
 80074b2:	e737      	b.n	8007324 <SensorsTask+0x134>
 80074b4:	08015eac 	.word	0x08015eac
 80074b8:	20001b00 	.word	0x20001b00
 80074bc:	20001ae8 	.word	0x20001ae8
 80074c0:	200019b4 	.word	0x200019b4
 80074c4:	200019c0 	.word	0x200019c0
 80074c8:	200019b0 	.word	0x200019b0
 80074cc:	200019b1 	.word	0x200019b1
 80074d0:	08015ec8 	.word	0x08015ec8
 80074d4:	200019b6 	.word	0x200019b6
 80074d8:	200019b8 	.word	0x200019b8
 80074dc:	08015eec 	.word	0x08015eec
 80074e0:	200019ac 	.word	0x200019ac
 80074e4:	200019b2 	.word	0x200019b2
 80074e8:	20001b60 	.word	0x20001b60
 80074ec:	20001b48 	.word	0x20001b48
 80074f0:	20001b24 	.word	0x20001b24
 80074f4:	48000400 	.word	0x48000400

080074f8 <_read>:
void _read(void)  {}
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop

080074fc <ReinitTimer>:
	meas_start = seconds;
 80074fc:	4a02      	ldr	r2, [pc, #8]	@ (8007508 <ReinitTimer+0xc>)
 80074fe:	4b03      	ldr	r3, [pc, #12]	@ (800750c <ReinitTimer+0x10>)
 8007500:	6812      	ldr	r2, [r2, #0]
 8007502:	601a      	str	r2, [r3, #0]
}
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	200019bc 	.word	0x200019bc
 800750c:	20001990 	.word	0x20001990

08007510 <HAL_SYSTICK_Callback>:
}
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop

08007514 <check_powerOn>:
{
 8007514:	b570      	push	{r4, r5, r6, lr}
	uint32_t timon = HAL_GetTick();
 8007516:	f002 fa41 	bl	800999c <HAL_GetTick>
	  while(Power_SW_READ() == GPIO_PIN_SET)
 800751a:	4e0f      	ldr	r6, [pc, #60]	@ (8007558 <check_powerOn+0x44>)
	uint32_t timon = HAL_GetTick();
 800751c:	4605      	mov	r5, r0
	  while(Power_SW_READ() == GPIO_PIN_SET)
 800751e:	e005      	b.n	800752c <check_powerOn+0x18>
	    if(HAL_GetTick() - timon > 1000) {    // 1 sec pushing
 8007520:	f002 fa3c 	bl	800999c <HAL_GetTick>
 8007524:	1b40      	subs	r0, r0, r5
 8007526:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800752a:	d808      	bhi.n	800753e <check_powerOn+0x2a>
	  while(Power_SW_READ() == GPIO_PIN_SET)
 800752c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007530:	4630      	mov	r0, r6
 8007532:	f003 fc09 	bl	800ad48 <HAL_GPIO_ReadPin>
 8007536:	2801      	cmp	r0, #1
 8007538:	4604      	mov	r4, r0
 800753a:	d0f1      	beq.n	8007520 <check_powerOn+0xc>
}
 800753c:	bd70      	pop	{r4, r5, r6, pc}
	    	timon = HAL_GetTick();
 800753e:	f002 fa2d 	bl	800999c <HAL_GetTick>
	        POWER_ON();    // pull-up power supply
 8007542:	4806      	ldr	r0, [pc, #24]	@ (800755c <check_powerOn+0x48>)
 8007544:	4622      	mov	r2, r4
 8007546:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800754a:	f003 fc03 	bl	800ad54 <HAL_GPIO_WritePin>
}
 800754e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	    	printf("Power ON\r\n");
 8007552:	4803      	ldr	r0, [pc, #12]	@ (8007560 <check_powerOn+0x4c>)
 8007554:	f009 b93e 	b.w	80107d4 <puts>
 8007558:	48000800 	.word	0x48000800
 800755c:	48000400 	.word	0x48000400
 8007560:	08015f00 	.word	0x08015f00

08007564 <check_powerOff>:
{
 8007564:	b538      	push	{r3, r4, r5, lr}
  if(Power_SW_READ()) { //power button pressed
 8007566:	4826      	ldr	r0, [pc, #152]	@ (8007600 <check_powerOff+0x9c>)
 8007568:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800756c:	f003 fbec 	bl	800ad48 <HAL_GPIO_ReadPin>
 8007570:	b160      	cbz	r0, 800758c <check_powerOff+0x28>
     if(offTim && HAL_GetTick() - offTim > 2000) {    // 2 sec pressed
 8007572:	4c24      	ldr	r4, [pc, #144]	@ (8007604 <check_powerOff+0xa0>)
	 LED2_ON();
 8007574:	4824      	ldr	r0, [pc, #144]	@ (8007608 <check_powerOff+0xa4>)
 8007576:	2200      	movs	r2, #0
 8007578:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800757c:	f003 fbea 	bl	800ad54 <HAL_GPIO_WritePin>
	 keystate = 1;
 8007580:	4a22      	ldr	r2, [pc, #136]	@ (800760c <check_powerOff+0xa8>)
     if(offTim && HAL_GetTick() - offTim > 2000) {    // 2 sec pressed
 8007582:	6823      	ldr	r3, [r4, #0]
	 keystate = 1;
 8007584:	2501      	movs	r5, #1
 8007586:	7015      	strb	r5, [r2, #0]
     if(offTim && HAL_GetTick() - offTim > 2000) {    // 2 sec pressed
 8007588:	b99b      	cbnz	r3, 80075b2 <check_powerOff+0x4e>
}
 800758a:	bd38      	pop	{r3, r4, r5, pc}
	  if(keystate) LED2_OFF();
 800758c:	4c1f      	ldr	r4, [pc, #124]	@ (800760c <check_powerOff+0xa8>)
	  offTim = HAL_GetTick();   // button released, update offTim
 800758e:	f002 fa05 	bl	800999c <HAL_GetTick>
 8007592:	4a1c      	ldr	r2, [pc, #112]	@ (8007604 <check_powerOff+0xa0>)
	  if(keystate) LED2_OFF();
 8007594:	7823      	ldrb	r3, [r4, #0]
	  offTim = HAL_GetTick();   // button released, update offTim
 8007596:	6010      	str	r0, [r2, #0]
	  if(keystate) LED2_OFF();
 8007598:	b913      	cbnz	r3, 80075a0 <check_powerOff+0x3c>
	  keystate = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	7023      	strb	r3, [r4, #0]
}
 800759e:	bd38      	pop	{r3, r4, r5, pc}
	  if(keystate) LED2_OFF();
 80075a0:	4819      	ldr	r0, [pc, #100]	@ (8007608 <check_powerOff+0xa4>)
 80075a2:	2201      	movs	r2, #1
 80075a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80075a8:	f003 fbd4 	bl	800ad54 <HAL_GPIO_WritePin>
	  keystate = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	7023      	strb	r3, [r4, #0]
 80075b0:	e7f5      	b.n	800759e <check_powerOff+0x3a>
     if(offTim && HAL_GetTick() - offTim > 2000) {    // 2 sec pressed
 80075b2:	f002 f9f3 	bl	800999c <HAL_GetTick>
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	1ac0      	subs	r0, r0, r3
 80075ba:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 80075be:	d9e4      	bls.n	800758a <check_powerOff+0x26>
    	 printf("Power off\r\n");
 80075c0:	4813      	ldr	r0, [pc, #76]	@ (8007610 <check_powerOff+0xac>)
 80075c2:	f009 f907 	bl	80107d4 <puts>
    	 LED2_OFF();
 80075c6:	462a      	mov	r2, r5
 80075c8:	480f      	ldr	r0, [pc, #60]	@ (8007608 <check_powerOff+0xa4>)
 80075ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80075ce:	f003 fbc1 	bl	800ad54 <HAL_GPIO_WritePin>
    	 LED1_OFF();
 80075d2:	462a      	mov	r2, r5
 80075d4:	2120      	movs	r1, #32
 80075d6:	480c      	ldr	r0, [pc, #48]	@ (8007608 <check_powerOff+0xa4>)
 80075d8:	f003 fbbc 	bl	800ad54 <HAL_GPIO_WritePin>
		 Sim80x_SetPower(0);
 80075dc:	2000      	movs	r0, #0
 80075de:	f7fb f8c1 	bl	8002764 <Sim80x_SetPower>
    	 POWER_OFF();
 80075e2:	4809      	ldr	r0, [pc, #36]	@ (8007608 <check_powerOff+0xa4>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80075ea:	f003 fbb3 	bl	800ad54 <HAL_GPIO_WritePin>
    	 osDelay(2000);
 80075ee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80075f2:	f006 f8c1 	bl	800d778 <osDelay>
}
 80075f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    	 HAL_NVIC_SystemReset();
 80075fa:	f002 beed 	b.w	800a3d8 <HAL_NVIC_SystemReset>
 80075fe:	bf00      	nop
 8007600:	48000800 	.word	0x48000800
 8007604:	200019a8 	.word	0x200019a8
 8007608:	48000400 	.word	0x48000400
 800760c:	2000198c 	.word	0x2000198c
 8007610:	08015f0c 	.word	0x08015f0c

08007614 <HALcalculateCRC>:
{
 8007614:	b570      	push	{r4, r5, r6, lr}
    HAL_CRC_Init(&hcrc);
 8007616:	4c09      	ldr	r4, [pc, #36]	@ (800763c <HALcalculateCRC+0x28>)
{
 8007618:	4605      	mov	r5, r0
    HAL_CRC_Init(&hcrc);
 800761a:	4620      	mov	r0, r4
{
 800761c:	460e      	mov	r6, r1
    HAL_CRC_Init(&hcrc);
 800761e:	f002 ff3f 	bl	800a4a0 <HAL_CRC_Init>
    __HAL_CRC_DR_RESET(&hcrc);
 8007622:	6820      	ldr	r0, [r4, #0]
 8007624:	6883      	ldr	r3, [r0, #8]
 8007626:	f043 0301 	orr.w	r3, r3, #1
 800762a:	6083      	str	r3, [r0, #8]
    uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, len);
 800762c:	4632      	mov	r2, r6
 800762e:	4629      	mov	r1, r5
 8007630:	4620      	mov	r0, r4
 8007632:	f002 ff73 	bl	800a51c <HAL_CRC_Calculate>
}
 8007636:	b2c0      	uxtb	r0, r0
 8007638:	bd70      	pop	{r4, r5, r6, pc}
 800763a:	bf00      	nop
 800763c:	20001854 	.word	0x20001854

08007640 <printCSVheader>:
{
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("\r\n");
 8007642:	4862      	ldr	r0, [pc, #392]	@ (80077cc <printCSVheader+0x18c>)
 8007644:	f009 f8c6 	bl	80107d4 <puts>
	printf("CNT;");
 8007648:	4861      	ldr	r0, [pc, #388]	@ (80077d0 <printCSVheader+0x190>)
 800764a:	f009 f85b 	bl	8010704 <iprintf>
	if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TEMP_TMP117;");
 800764e:	4a61      	ldr	r2, [pc, #388]	@ (80077d4 <printCSVheader+0x194>)
 8007650:	7813      	ldrb	r3, [r2, #0]
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	2b03      	cmp	r3, #3
 8007658:	d03a      	beq.n	80076d0 <printCSVheader+0x90>
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 800765a:	4d5f      	ldr	r5, [pc, #380]	@ (80077d8 <printCSVheader+0x198>)
 800765c:	782b      	ldrb	r3, [r5, #0]
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	2b03      	cmp	r3, #3
 8007664:	d040      	beq.n	80076e8 <printCSVheader+0xa8>
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 8007666:	4e5d      	ldr	r6, [pc, #372]	@ (80077dc <printCSVheader+0x19c>)
 8007668:	7833      	ldrb	r3, [r6, #0]
 800766a:	f003 0303 	and.w	r3, r3, #3
 800766e:	2b03      	cmp	r3, #3
 8007670:	d046      	beq.n	8007700 <printCSVheader+0xc0>
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 8007672:	4c5b      	ldr	r4, [pc, #364]	@ (80077e0 <printCSVheader+0x1a0>)
 8007674:	7823      	ldrb	r3, [r4, #0]
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	2b03      	cmp	r3, #3
 800767c:	d04c      	beq.n	8007718 <printCSVheader+0xd8>
	if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("TEMP_DPS368;");
 800767e:	4f59      	ldr	r7, [pc, #356]	@ (80077e4 <printCSVheader+0x1a4>)
 8007680:	783b      	ldrb	r3, [r7, #0]
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	2b03      	cmp	r3, #3
 8007688:	d052      	beq.n	8007730 <printCSVheader+0xf0>
	if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("PRESS_BME280;");
 800768a:	782b      	ldrb	r3, [r5, #0]
 800768c:	f003 0303 	and.w	r3, r3, #3
 8007690:	2b03      	cmp	r3, #3
 8007692:	d058      	beq.n	8007746 <printCSVheader+0x106>
	if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("PRESS_MS8607;");
 8007694:	7823      	ldrb	r3, [r4, #0]
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	2b03      	cmp	r3, #3
 800769c:	d05e      	beq.n	800775c <printCSVheader+0x11c>
	if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("PRESS_DPS368;");
 800769e:	783b      	ldrb	r3, [r7, #0]
 80076a0:	f003 0303 	and.w	r3, r3, #3
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d064      	beq.n	8007772 <printCSVheader+0x132>
	if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("HUM_BME280;");
 80076a8:	782b      	ldrb	r3, [r5, #0]
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d06a      	beq.n	8007788 <printCSVheader+0x148>
	if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("HUM_SHTC3;");
 80076b2:	7833      	ldrb	r3, [r6, #0]
 80076b4:	f003 0303 	and.w	r3, r3, #3
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d070      	beq.n	800779e <printCSVheader+0x15e>
	if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("HUM_MS8607;");
 80076bc:	7823      	ldrb	r3, [r4, #0]
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d076      	beq.n	80077b4 <printCSVheader+0x174>
}
 80076c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printf("\r\n");
 80076ca:	4840      	ldr	r0, [pc, #256]	@ (80077cc <printCSVheader+0x18c>)
 80076cc:	f009 b882 	b.w	80107d4 <puts>
	if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TEMP_TMP117;");
 80076d0:	7853      	ldrb	r3, [r2, #1]
 80076d2:	07df      	lsls	r7, r3, #31
 80076d4:	d5c1      	bpl.n	800765a <printCSVheader+0x1a>
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 80076d6:	4d40      	ldr	r5, [pc, #256]	@ (80077d8 <printCSVheader+0x198>)
	if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TEMP_TMP117;");
 80076d8:	4843      	ldr	r0, [pc, #268]	@ (80077e8 <printCSVheader+0x1a8>)
 80076da:	f009 f813 	bl	8010704 <iprintf>
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 80076de:	782b      	ldrb	r3, [r5, #0]
 80076e0:	f003 0303 	and.w	r3, r3, #3
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d1be      	bne.n	8007666 <printCSVheader+0x26>
 80076e8:	786b      	ldrb	r3, [r5, #1]
 80076ea:	07de      	lsls	r6, r3, #31
 80076ec:	d5bb      	bpl.n	8007666 <printCSVheader+0x26>
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 80076ee:	4e3b      	ldr	r6, [pc, #236]	@ (80077dc <printCSVheader+0x19c>)
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 80076f0:	483e      	ldr	r0, [pc, #248]	@ (80077ec <printCSVheader+0x1ac>)
 80076f2:	f009 f807 	bl	8010704 <iprintf>
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 80076f6:	7833      	ldrb	r3, [r6, #0]
 80076f8:	f003 0303 	and.w	r3, r3, #3
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d1b8      	bne.n	8007672 <printCSVheader+0x32>
 8007700:	7873      	ldrb	r3, [r6, #1]
 8007702:	07dc      	lsls	r4, r3, #31
 8007704:	d5b5      	bpl.n	8007672 <printCSVheader+0x32>
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 8007706:	4c36      	ldr	r4, [pc, #216]	@ (80077e0 <printCSVheader+0x1a0>)
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 8007708:	4839      	ldr	r0, [pc, #228]	@ (80077f0 <printCSVheader+0x1b0>)
 800770a:	f008 fffb 	bl	8010704 <iprintf>
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 800770e:	7823      	ldrb	r3, [r4, #0]
 8007710:	f003 0303 	and.w	r3, r3, #3
 8007714:	2b03      	cmp	r3, #3
 8007716:	d1b2      	bne.n	800767e <printCSVheader+0x3e>
 8007718:	7863      	ldrb	r3, [r4, #1]
 800771a:	07d8      	lsls	r0, r3, #31
 800771c:	d5af      	bpl.n	800767e <printCSVheader+0x3e>
	if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("TEMP_DPS368;");
 800771e:	4f31      	ldr	r7, [pc, #196]	@ (80077e4 <printCSVheader+0x1a4>)
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 8007720:	4834      	ldr	r0, [pc, #208]	@ (80077f4 <printCSVheader+0x1b4>)
 8007722:	f008 ffef 	bl	8010704 <iprintf>
	if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("TEMP_DPS368;");
 8007726:	783b      	ldrb	r3, [r7, #0]
 8007728:	f003 0303 	and.w	r3, r3, #3
 800772c:	2b03      	cmp	r3, #3
 800772e:	d1ac      	bne.n	800768a <printCSVheader+0x4a>
 8007730:	787b      	ldrb	r3, [r7, #1]
 8007732:	07d9      	lsls	r1, r3, #31
 8007734:	d5a9      	bpl.n	800768a <printCSVheader+0x4a>
 8007736:	4830      	ldr	r0, [pc, #192]	@ (80077f8 <printCSVheader+0x1b8>)
 8007738:	f008 ffe4 	bl	8010704 <iprintf>
	if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("PRESS_BME280;");
 800773c:	782b      	ldrb	r3, [r5, #0]
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	2b03      	cmp	r3, #3
 8007744:	d1a6      	bne.n	8007694 <printCSVheader+0x54>
 8007746:	7ceb      	ldrb	r3, [r5, #19]
 8007748:	07da      	lsls	r2, r3, #31
 800774a:	d5a3      	bpl.n	8007694 <printCSVheader+0x54>
 800774c:	482b      	ldr	r0, [pc, #172]	@ (80077fc <printCSVheader+0x1bc>)
 800774e:	f008 ffd9 	bl	8010704 <iprintf>
	if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("PRESS_MS8607;");
 8007752:	7823      	ldrb	r3, [r4, #0]
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	2b03      	cmp	r3, #3
 800775a:	d1a0      	bne.n	800769e <printCSVheader+0x5e>
 800775c:	7ce3      	ldrb	r3, [r4, #19]
 800775e:	07db      	lsls	r3, r3, #31
 8007760:	d59d      	bpl.n	800769e <printCSVheader+0x5e>
 8007762:	4827      	ldr	r0, [pc, #156]	@ (8007800 <printCSVheader+0x1c0>)
 8007764:	f008 ffce 	bl	8010704 <iprintf>
	if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("PRESS_DPS368;");
 8007768:	783b      	ldrb	r3, [r7, #0]
 800776a:	f003 0303 	and.w	r3, r3, #3
 800776e:	2b03      	cmp	r3, #3
 8007770:	d19a      	bne.n	80076a8 <printCSVheader+0x68>
 8007772:	7abb      	ldrb	r3, [r7, #10]
 8007774:	07d8      	lsls	r0, r3, #31
 8007776:	d597      	bpl.n	80076a8 <printCSVheader+0x68>
 8007778:	4822      	ldr	r0, [pc, #136]	@ (8007804 <printCSVheader+0x1c4>)
 800777a:	f008 ffc3 	bl	8010704 <iprintf>
	if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("HUM_BME280;");
 800777e:	782b      	ldrb	r3, [r5, #0]
 8007780:	f003 0303 	and.w	r3, r3, #3
 8007784:	2b03      	cmp	r3, #3
 8007786:	d194      	bne.n	80076b2 <printCSVheader+0x72>
 8007788:	7aab      	ldrb	r3, [r5, #10]
 800778a:	07d9      	lsls	r1, r3, #31
 800778c:	d591      	bpl.n	80076b2 <printCSVheader+0x72>
 800778e:	481e      	ldr	r0, [pc, #120]	@ (8007808 <printCSVheader+0x1c8>)
 8007790:	f008 ffb8 	bl	8010704 <iprintf>
	if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("HUM_SHTC3;");
 8007794:	7833      	ldrb	r3, [r6, #0]
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	2b03      	cmp	r3, #3
 800779c:	d18e      	bne.n	80076bc <printCSVheader+0x7c>
 800779e:	7ab3      	ldrb	r3, [r6, #10]
 80077a0:	07da      	lsls	r2, r3, #31
 80077a2:	d58b      	bpl.n	80076bc <printCSVheader+0x7c>
 80077a4:	4819      	ldr	r0, [pc, #100]	@ (800780c <printCSVheader+0x1cc>)
 80077a6:	f008 ffad 	bl	8010704 <iprintf>
	if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("HUM_MS8607;");
 80077aa:	7823      	ldrb	r3, [r4, #0]
 80077ac:	f003 0303 	and.w	r3, r3, #3
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d188      	bne.n	80076c6 <printCSVheader+0x86>
 80077b4:	7aa3      	ldrb	r3, [r4, #10]
 80077b6:	07db      	lsls	r3, r3, #31
 80077b8:	d585      	bpl.n	80076c6 <printCSVheader+0x86>
 80077ba:	4815      	ldr	r0, [pc, #84]	@ (8007810 <printCSVheader+0x1d0>)
 80077bc:	f008 ffa2 	bl	8010704 <iprintf>
}
 80077c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printf("\r\n");
 80077c4:	4801      	ldr	r0, [pc, #4]	@ (80077cc <printCSVheader+0x18c>)
 80077c6:	f009 b805 	b.w	80107d4 <puts>
 80077ca:	bf00      	nop
 80077cc:	08015ec4 	.word	0x08015ec4
 80077d0:	08015f18 	.word	0x08015f18
 80077d4:	20001b60 	.word	0x20001b60
 80077d8:	20001b00 	.word	0x20001b00
 80077dc:	20001b48 	.word	0x20001b48
 80077e0:	20001b24 	.word	0x20001b24
 80077e4:	20001ae8 	.word	0x20001ae8
 80077e8:	08015f20 	.word	0x08015f20
 80077ec:	08015f30 	.word	0x08015f30
 80077f0:	08015f40 	.word	0x08015f40
 80077f4:	08015f4c 	.word	0x08015f4c
 80077f8:	08015f5c 	.word	0x08015f5c
 80077fc:	08015f6c 	.word	0x08015f6c
 8007800:	08015f7c 	.word	0x08015f7c
 8007804:	08015f8c 	.word	0x08015f8c
 8007808:	08015f9c 	.word	0x08015f9c
 800780c:	08015fa8 	.word	0x08015fa8
 8007810:	08015fb4 	.word	0x08015fb4

08007814 <display_values>:
	switch (format)
 8007814:	2801      	cmp	r0, #1
{
 8007816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (format)
 8007818:	d002      	beq.n	8007820 <display_values+0xc>
 800781a:	2802      	cmp	r0, #2
 800781c:	d05e      	beq.n	80078dc <display_values+0xc8>
}
 800781e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("-----------------------\r\n");
 8007820:	48bc      	ldr	r0, [pc, #752]	@ (8007b14 <display_values+0x300>)
 8007822:	f008 ffd7 	bl	80107d4 <puts>
		printf("Temperature:\r\n");
 8007826:	48bc      	ldr	r0, [pc, #752]	@ (8007b18 <display_values+0x304>)
 8007828:	f008 ffd4 	bl	80107d4 <puts>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TMP117: %.2f   ", TMP117.temp.value+TMP117.temp.offset);
 800782c:	4abb      	ldr	r2, [pc, #748]	@ (8007b1c <display_values+0x308>)
 800782e:	7813      	ldrb	r3, [r2, #0]
 8007830:	f003 0303 	and.w	r3, r3, #3
 8007834:	2b03      	cmp	r3, #3
 8007836:	f000 80a1 	beq.w	800797c <display_values+0x168>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("BME280: %.2f   ", BME280.temp.value+BME280.temp.offset);
 800783a:	4db9      	ldr	r5, [pc, #740]	@ (8007b20 <display_values+0x30c>)
 800783c:	782b      	ldrb	r3, [r5, #0]
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	2b03      	cmp	r3, #3
 8007844:	f000 829c 	beq.w	8007d80 <display_values+0x56c>
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("SHTC3: %.2f   ", SHT3.temp.value+SHT3.temp.offset);
 8007848:	4eb6      	ldr	r6, [pc, #728]	@ (8007b24 <display_values+0x310>)
 800784a:	7833      	ldrb	r3, [r6, #0]
 800784c:	f003 0303 	and.w	r3, r3, #3
 8007850:	2b03      	cmp	r3, #3
 8007852:	f000 827d 	beq.w	8007d50 <display_values+0x53c>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("MS8607: %.2f   ", MS8607.temp.value+MS8607.temp.offset);
 8007856:	4cb4      	ldr	r4, [pc, #720]	@ (8007b28 <display_values+0x314>)
 8007858:	7823      	ldrb	r3, [r4, #0]
 800785a:	f003 0303 	and.w	r3, r3, #3
 800785e:	2b03      	cmp	r3, #3
 8007860:	f000 825e 	beq.w	8007d20 <display_values+0x50c>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("DPS368: %.2f   ", DPS368.temp.value+DPS368.temp.offset);
 8007864:	4fb1      	ldr	r7, [pc, #708]	@ (8007b2c <display_values+0x318>)
 8007866:	783b      	ldrb	r3, [r7, #0]
 8007868:	f003 0303 	and.w	r3, r3, #3
 800786c:	2b03      	cmp	r3, #3
 800786e:	f000 823f 	beq.w	8007cf0 <display_values+0x4dc>
		printf("\r\n-----------------------\r\n");
 8007872:	48af      	ldr	r0, [pc, #700]	@ (8007b30 <display_values+0x31c>)
 8007874:	f008 ffae 	bl	80107d4 <puts>
		printf("Press:\r\n");
 8007878:	48ae      	ldr	r0, [pc, #696]	@ (8007b34 <display_values+0x320>)
 800787a:	f008 ffab 	bl	80107d4 <puts>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("BME280: %.2f   ", BME280.press.value+BME280.press.offset);
 800787e:	782b      	ldrb	r3, [r5, #0]
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	2b03      	cmp	r3, #3
 8007886:	f000 821f 	beq.w	8007cc8 <display_values+0x4b4>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("MS8607: %.2f   ", MS8607.press.value+MS8607.press.offset);
 800788a:	7823      	ldrb	r3, [r4, #0]
 800788c:	f003 0303 	and.w	r3, r3, #3
 8007890:	2b03      	cmp	r3, #3
 8007892:	f000 8205 	beq.w	8007ca0 <display_values+0x48c>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("DPS368: %.2f   ", DPS368.press.value+DPS368.press.offset);
 8007896:	783b      	ldrb	r3, [r7, #0]
 8007898:	f003 0303 	and.w	r3, r3, #3
 800789c:	2b03      	cmp	r3, #3
 800789e:	f000 81e7 	beq.w	8007c70 <display_values+0x45c>
		printf("\r\n-----------------------\r\n");
 80078a2:	48a3      	ldr	r0, [pc, #652]	@ (8007b30 <display_values+0x31c>)
 80078a4:	f008 ff96 	bl	80107d4 <puts>
		printf("Hum:\r\n");
 80078a8:	48a3      	ldr	r0, [pc, #652]	@ (8007b38 <display_values+0x324>)
 80078aa:	f008 ff93 	bl	80107d4 <puts>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("BME280: %.2f   ", BME280.hum.value+BME280.hum.offset);
 80078ae:	782b      	ldrb	r3, [r5, #0]
 80078b0:	f003 0303 	and.w	r3, r3, #3
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	f000 81c3 	beq.w	8007c40 <display_values+0x42c>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("SHTC3: %.2f   ", SHT3.hum.value+SHT3.hum.offset);
 80078ba:	7833      	ldrb	r3, [r6, #0]
 80078bc:	f003 0303 	and.w	r3, r3, #3
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	f000 81a5 	beq.w	8007c10 <display_values+0x3fc>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("MS8607: %.2f   ", MS8607.hum.value+MS8607.hum.offset);
 80078c6:	7823      	ldrb	r3, [r4, #0]
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	f000 8187 	beq.w	8007be0 <display_values+0x3cc>
}
 80078d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("\r\n-----------------------\r\n");
 80078d6:	4896      	ldr	r0, [pc, #600]	@ (8007b30 <display_values+0x31c>)
 80078d8:	f008 bf7c 	b.w	80107d4 <puts>
		printf("%u;",++csvcnt);
 80078dc:	4b97      	ldr	r3, [pc, #604]	@ (8007b3c <display_values+0x328>)
 80078de:	4898      	ldr	r0, [pc, #608]	@ (8007b40 <display_values+0x32c>)
 80078e0:	8819      	ldrh	r1, [r3, #0]
 80078e2:	3101      	adds	r1, #1
 80078e4:	b289      	uxth	r1, r1
 80078e6:	8019      	strh	r1, [r3, #0]
 80078e8:	f008 ff0c 	bl	8010704 <iprintf>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("%.2f;",TMP117.temp.value+TMP117.temp.offset);
 80078ec:	4a8b      	ldr	r2, [pc, #556]	@ (8007b1c <display_values+0x308>)
 80078ee:	7813      	ldrb	r3, [r2, #0]
 80078f0:	f003 0303 	and.w	r3, r3, #3
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	f000 815b 	beq.w	8007bb0 <display_values+0x39c>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("%.2f;",BME280.temp.value+BME280.temp.offset);
 80078fa:	4d89      	ldr	r5, [pc, #548]	@ (8007b20 <display_values+0x30c>)
 80078fc:	782b      	ldrb	r3, [r5, #0]
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	2b03      	cmp	r3, #3
 8007904:	f000 813c 	beq.w	8007b80 <display_values+0x36c>
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("%.2f;",SHT3.temp.value+SHT3.temp.offset);
 8007908:	4e86      	ldr	r6, [pc, #536]	@ (8007b24 <display_values+0x310>)
 800790a:	7833      	ldrb	r3, [r6, #0]
 800790c:	f003 0303 	and.w	r3, r3, #3
 8007910:	2b03      	cmp	r3, #3
 8007912:	f000 811d 	beq.w	8007b50 <display_values+0x33c>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("%.2f;",MS8607.temp.value+MS8607.temp.offset);
 8007916:	4c84      	ldr	r4, [pc, #528]	@ (8007b28 <display_values+0x314>)
 8007918:	7823      	ldrb	r3, [r4, #0]
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	2b03      	cmp	r3, #3
 8007920:	f000 80e0 	beq.w	8007ae4 <display_values+0x2d0>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("%.2f;",DPS368.temp.value+DPS368.temp.offset);
 8007924:	4f81      	ldr	r7, [pc, #516]	@ (8007b2c <display_values+0x318>)
 8007926:	783b      	ldrb	r3, [r7, #0]
 8007928:	f003 0303 	and.w	r3, r3, #3
 800792c:	2b03      	cmp	r3, #3
 800792e:	f000 80c1 	beq.w	8007ab4 <display_values+0x2a0>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("%.2f;",BME280.press.value+BME280.press.offset);
 8007932:	782b      	ldrb	r3, [r5, #0]
 8007934:	f003 0303 	and.w	r3, r3, #3
 8007938:	2b03      	cmp	r3, #3
 800793a:	f000 80a7 	beq.w	8007a8c <display_values+0x278>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("%.2f;",MS8607.press.value+MS8607.press.offset);
 800793e:	7823      	ldrb	r3, [r4, #0]
 8007940:	f003 0303 	and.w	r3, r3, #3
 8007944:	2b03      	cmp	r3, #3
 8007946:	f000 808d 	beq.w	8007a64 <display_values+0x250>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("%.2f;",DPS368.press.value+DPS368.press.offset);
 800794a:	783b      	ldrb	r3, [r7, #0]
 800794c:	f003 0303 	and.w	r3, r3, #3
 8007950:	2b03      	cmp	r3, #3
 8007952:	d070      	beq.n	8007a36 <display_values+0x222>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("%.2f;",BME280.hum.value+BME280.hum.offset);
 8007954:	782b      	ldrb	r3, [r5, #0]
 8007956:	f003 0303 	and.w	r3, r3, #3
 800795a:	2b03      	cmp	r3, #3
 800795c:	d054      	beq.n	8007a08 <display_values+0x1f4>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("%.2f;",SHT3.hum.value+SHT3.hum.offset);
 800795e:	7833      	ldrb	r3, [r6, #0]
 8007960:	f003 0303 	and.w	r3, r3, #3
 8007964:	2b03      	cmp	r3, #3
 8007966:	d038      	beq.n	80079da <display_values+0x1c6>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("%.2f;",MS8607.hum.value+MS8607.hum.offset);
 8007968:	7823      	ldrb	r3, [r4, #0]
 800796a:	f003 0303 	and.w	r3, r3, #3
 800796e:	2b03      	cmp	r3, #3
 8007970:	d01c      	beq.n	80079ac <display_values+0x198>
}
 8007972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("\r\n");
 8007976:	4873      	ldr	r0, [pc, #460]	@ (8007b44 <display_values+0x330>)
 8007978:	f008 bf2c 	b.w	80107d4 <puts>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TMP117: %.2f   ", TMP117.temp.value+TMP117.temp.offset);
 800797c:	7853      	ldrb	r3, [r2, #1]
 800797e:	07df      	lsls	r7, r3, #31
 8007980:	f57f af5b 	bpl.w	800783a <display_values+0x26>
 8007984:	f8d2 0002 	ldr.w	r0, [r2, #2]
 8007988:	f8d2 3006 	ldr.w	r3, [r2, #6]
 800798c:	ee07 0a90 	vmov	s15, r0
 8007990:	ee07 3a10 	vmov	s14, r3
 8007994:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007998:	ee17 0a90 	vmov	r0, s15
 800799c:	f7f8 fe14 	bl	80005c8 <__aeabi_f2d>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4868      	ldr	r0, [pc, #416]	@ (8007b48 <display_values+0x334>)
 80079a6:	f008 fead 	bl	8010704 <iprintf>
 80079aa:	e746      	b.n	800783a <display_values+0x26>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("%.2f;",MS8607.hum.value+MS8607.hum.offset);
 80079ac:	7aa3      	ldrb	r3, [r4, #10]
 80079ae:	07db      	lsls	r3, r3, #31
 80079b0:	d5df      	bpl.n	8007972 <display_values+0x15e>
 80079b2:	f8d4 300f 	ldr.w	r3, [r4, #15]
 80079b6:	f8d4 000b 	ldr.w	r0, [r4, #11]
 80079ba:	ee07 3a10 	vmov	s14, r3
 80079be:	ee07 0a90 	vmov	s15, r0
 80079c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079c6:	ee17 0a90 	vmov	r0, s15
 80079ca:	f7f8 fdfd 	bl	80005c8 <__aeabi_f2d>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	485e      	ldr	r0, [pc, #376]	@ (8007b4c <display_values+0x338>)
 80079d4:	f008 fe96 	bl	8010704 <iprintf>
 80079d8:	e7cb      	b.n	8007972 <display_values+0x15e>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("%.2f;",SHT3.hum.value+SHT3.hum.offset);
 80079da:	7ab3      	ldrb	r3, [r6, #10]
 80079dc:	07da      	lsls	r2, r3, #31
 80079de:	d5c3      	bpl.n	8007968 <display_values+0x154>
 80079e0:	f8d6 300f 	ldr.w	r3, [r6, #15]
 80079e4:	f8d6 000b 	ldr.w	r0, [r6, #11]
 80079e8:	ee07 3a10 	vmov	s14, r3
 80079ec:	ee07 0a90 	vmov	s15, r0
 80079f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079f4:	ee17 0a90 	vmov	r0, s15
 80079f8:	f7f8 fde6 	bl	80005c8 <__aeabi_f2d>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4852      	ldr	r0, [pc, #328]	@ (8007b4c <display_values+0x338>)
 8007a02:	f008 fe7f 	bl	8010704 <iprintf>
 8007a06:	e7af      	b.n	8007968 <display_values+0x154>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("%.2f;",BME280.hum.value+BME280.hum.offset);
 8007a08:	7aab      	ldrb	r3, [r5, #10]
 8007a0a:	07d9      	lsls	r1, r3, #31
 8007a0c:	d5a7      	bpl.n	800795e <display_values+0x14a>
 8007a0e:	f8d5 300f 	ldr.w	r3, [r5, #15]
 8007a12:	f8d5 000b 	ldr.w	r0, [r5, #11]
 8007a16:	ee07 3a10 	vmov	s14, r3
 8007a1a:	ee07 0a90 	vmov	s15, r0
 8007a1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a22:	ee17 0a90 	vmov	r0, s15
 8007a26:	f7f8 fdcf 	bl	80005c8 <__aeabi_f2d>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4847      	ldr	r0, [pc, #284]	@ (8007b4c <display_values+0x338>)
 8007a30:	f008 fe68 	bl	8010704 <iprintf>
 8007a34:	e793      	b.n	800795e <display_values+0x14a>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("%.2f;",DPS368.press.value+DPS368.press.offset);
 8007a36:	7abb      	ldrb	r3, [r7, #10]
 8007a38:	07d8      	lsls	r0, r3, #31
 8007a3a:	d58b      	bpl.n	8007954 <display_values+0x140>
 8007a3c:	f8d7 300f 	ldr.w	r3, [r7, #15]
 8007a40:	f8d7 000b 	ldr.w	r0, [r7, #11]
 8007a44:	ee07 3a10 	vmov	s14, r3
 8007a48:	ee07 0a90 	vmov	s15, r0
 8007a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a50:	ee17 0a90 	vmov	r0, s15
 8007a54:	f7f8 fdb8 	bl	80005c8 <__aeabi_f2d>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	483b      	ldr	r0, [pc, #236]	@ (8007b4c <display_values+0x338>)
 8007a5e:	f008 fe51 	bl	8010704 <iprintf>
 8007a62:	e777      	b.n	8007954 <display_values+0x140>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("%.2f;",MS8607.press.value+MS8607.press.offset);
 8007a64:	7ce3      	ldrb	r3, [r4, #19]
 8007a66:	07db      	lsls	r3, r3, #31
 8007a68:	f57f af6f 	bpl.w	800794a <display_values+0x136>
 8007a6c:	ed94 7a05 	vldr	s14, [r4, #20]
 8007a70:	edd4 7a06 	vldr	s15, [r4, #24]
 8007a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a78:	ee17 0a90 	vmov	r0, s15
 8007a7c:	f7f8 fda4 	bl	80005c8 <__aeabi_f2d>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4831      	ldr	r0, [pc, #196]	@ (8007b4c <display_values+0x338>)
 8007a86:	f008 fe3d 	bl	8010704 <iprintf>
 8007a8a:	e75e      	b.n	800794a <display_values+0x136>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("%.2f;",BME280.press.value+BME280.press.offset);
 8007a8c:	7ceb      	ldrb	r3, [r5, #19]
 8007a8e:	07da      	lsls	r2, r3, #31
 8007a90:	f57f af55 	bpl.w	800793e <display_values+0x12a>
 8007a94:	ed95 7a05 	vldr	s14, [r5, #20]
 8007a98:	edd5 7a06 	vldr	s15, [r5, #24]
 8007a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007aa0:	ee17 0a90 	vmov	r0, s15
 8007aa4:	f7f8 fd90 	bl	80005c8 <__aeabi_f2d>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4827      	ldr	r0, [pc, #156]	@ (8007b4c <display_values+0x338>)
 8007aae:	f008 fe29 	bl	8010704 <iprintf>
 8007ab2:	e744      	b.n	800793e <display_values+0x12a>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("%.2f;",DPS368.temp.value+DPS368.temp.offset);
 8007ab4:	787b      	ldrb	r3, [r7, #1]
 8007ab6:	07d9      	lsls	r1, r3, #31
 8007ab8:	f57f af3b 	bpl.w	8007932 <display_values+0x11e>
 8007abc:	f8d7 3006 	ldr.w	r3, [r7, #6]
 8007ac0:	f8d7 0002 	ldr.w	r0, [r7, #2]
 8007ac4:	ee07 3a10 	vmov	s14, r3
 8007ac8:	ee07 0a90 	vmov	s15, r0
 8007acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ad0:	ee17 0a90 	vmov	r0, s15
 8007ad4:	f7f8 fd78 	bl	80005c8 <__aeabi_f2d>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	481b      	ldr	r0, [pc, #108]	@ (8007b4c <display_values+0x338>)
 8007ade:	f008 fe11 	bl	8010704 <iprintf>
 8007ae2:	e726      	b.n	8007932 <display_values+0x11e>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("%.2f;",MS8607.temp.value+MS8607.temp.offset);
 8007ae4:	7863      	ldrb	r3, [r4, #1]
 8007ae6:	07d8      	lsls	r0, r3, #31
 8007ae8:	f57f af1c 	bpl.w	8007924 <display_values+0x110>
 8007aec:	f8d4 3006 	ldr.w	r3, [r4, #6]
 8007af0:	f8d4 0002 	ldr.w	r0, [r4, #2]
 8007af4:	ee07 3a10 	vmov	s14, r3
 8007af8:	ee07 0a90 	vmov	s15, r0
 8007afc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b00:	ee17 0a90 	vmov	r0, s15
 8007b04:	f7f8 fd60 	bl	80005c8 <__aeabi_f2d>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	480f      	ldr	r0, [pc, #60]	@ (8007b4c <display_values+0x338>)
 8007b0e:	f008 fdf9 	bl	8010704 <iprintf>
 8007b12:	e707      	b.n	8007924 <display_values+0x110>
 8007b14:	08015fc0 	.word	0x08015fc0
 8007b18:	08015fdc 	.word	0x08015fdc
 8007b1c:	20001b60 	.word	0x20001b60
 8007b20:	20001b00 	.word	0x20001b00
 8007b24:	20001b48 	.word	0x20001b48
 8007b28:	20001b24 	.word	0x20001b24
 8007b2c:	20001ae8 	.word	0x20001ae8
 8007b30:	0801603c 	.word	0x0801603c
 8007b34:	08016058 	.word	0x08016058
 8007b38:	08016060 	.word	0x08016060
 8007b3c:	20001618 	.word	0x20001618
 8007b40:	08016068 	.word	0x08016068
 8007b44:	08015ec4 	.word	0x08015ec4
 8007b48:	08015fec 	.word	0x08015fec
 8007b4c:	0801606c 	.word	0x0801606c
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("%.2f;",SHT3.temp.value+SHT3.temp.offset);
 8007b50:	7873      	ldrb	r3, [r6, #1]
 8007b52:	07dc      	lsls	r4, r3, #31
 8007b54:	f57f aedf 	bpl.w	8007916 <display_values+0x102>
 8007b58:	f8d6 3006 	ldr.w	r3, [r6, #6]
 8007b5c:	f8d6 0002 	ldr.w	r0, [r6, #2]
 8007b60:	ee07 3a10 	vmov	s14, r3
 8007b64:	ee07 0a90 	vmov	s15, r0
 8007b68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b6c:	ee17 0a90 	vmov	r0, s15
 8007b70:	f7f8 fd2a 	bl	80005c8 <__aeabi_f2d>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	488d      	ldr	r0, [pc, #564]	@ (8007db0 <display_values+0x59c>)
 8007b7a:	f008 fdc3 	bl	8010704 <iprintf>
 8007b7e:	e6ca      	b.n	8007916 <display_values+0x102>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("%.2f;",BME280.temp.value+BME280.temp.offset);
 8007b80:	786b      	ldrb	r3, [r5, #1]
 8007b82:	07de      	lsls	r6, r3, #31
 8007b84:	f57f aec0 	bpl.w	8007908 <display_values+0xf4>
 8007b88:	f8d5 3006 	ldr.w	r3, [r5, #6]
 8007b8c:	f8d5 0002 	ldr.w	r0, [r5, #2]
 8007b90:	ee07 3a10 	vmov	s14, r3
 8007b94:	ee07 0a90 	vmov	s15, r0
 8007b98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b9c:	ee17 0a90 	vmov	r0, s15
 8007ba0:	f7f8 fd12 	bl	80005c8 <__aeabi_f2d>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4881      	ldr	r0, [pc, #516]	@ (8007db0 <display_values+0x59c>)
 8007baa:	f008 fdab 	bl	8010704 <iprintf>
 8007bae:	e6ab      	b.n	8007908 <display_values+0xf4>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("%.2f;",TMP117.temp.value+TMP117.temp.offset);
 8007bb0:	7853      	ldrb	r3, [r2, #1]
 8007bb2:	07df      	lsls	r7, r3, #31
 8007bb4:	f57f aea1 	bpl.w	80078fa <display_values+0xe6>
 8007bb8:	f8d2 0002 	ldr.w	r0, [r2, #2]
 8007bbc:	f8d2 3006 	ldr.w	r3, [r2, #6]
 8007bc0:	ee07 0a90 	vmov	s15, r0
 8007bc4:	ee07 3a10 	vmov	s14, r3
 8007bc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bcc:	ee17 0a90 	vmov	r0, s15
 8007bd0:	f7f8 fcfa 	bl	80005c8 <__aeabi_f2d>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4875      	ldr	r0, [pc, #468]	@ (8007db0 <display_values+0x59c>)
 8007bda:	f008 fd93 	bl	8010704 <iprintf>
 8007bde:	e68c      	b.n	80078fa <display_values+0xe6>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("MS8607: %.2f   ", MS8607.hum.value+MS8607.hum.offset);
 8007be0:	7aa3      	ldrb	r3, [r4, #10]
 8007be2:	07db      	lsls	r3, r3, #31
 8007be4:	f57f ae75 	bpl.w	80078d2 <display_values+0xbe>
 8007be8:	f8d4 300f 	ldr.w	r3, [r4, #15]
 8007bec:	f8d4 000b 	ldr.w	r0, [r4, #11]
 8007bf0:	ee07 3a10 	vmov	s14, r3
 8007bf4:	ee07 0a90 	vmov	s15, r0
 8007bf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bfc:	ee17 0a90 	vmov	r0, s15
 8007c00:	f7f8 fce2 	bl	80005c8 <__aeabi_f2d>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	486a      	ldr	r0, [pc, #424]	@ (8007db4 <display_values+0x5a0>)
 8007c0a:	f008 fd7b 	bl	8010704 <iprintf>
 8007c0e:	e660      	b.n	80078d2 <display_values+0xbe>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("SHTC3: %.2f   ", SHT3.hum.value+SHT3.hum.offset);
 8007c10:	7ab3      	ldrb	r3, [r6, #10]
 8007c12:	07da      	lsls	r2, r3, #31
 8007c14:	f57f ae57 	bpl.w	80078c6 <display_values+0xb2>
 8007c18:	f8d6 300f 	ldr.w	r3, [r6, #15]
 8007c1c:	f8d6 000b 	ldr.w	r0, [r6, #11]
 8007c20:	ee07 3a10 	vmov	s14, r3
 8007c24:	ee07 0a90 	vmov	s15, r0
 8007c28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c2c:	ee17 0a90 	vmov	r0, s15
 8007c30:	f7f8 fcca 	bl	80005c8 <__aeabi_f2d>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	485f      	ldr	r0, [pc, #380]	@ (8007db8 <display_values+0x5a4>)
 8007c3a:	f008 fd63 	bl	8010704 <iprintf>
 8007c3e:	e642      	b.n	80078c6 <display_values+0xb2>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("BME280: %.2f   ", BME280.hum.value+BME280.hum.offset);
 8007c40:	7aab      	ldrb	r3, [r5, #10]
 8007c42:	07d9      	lsls	r1, r3, #31
 8007c44:	f57f ae39 	bpl.w	80078ba <display_values+0xa6>
 8007c48:	f8d5 300f 	ldr.w	r3, [r5, #15]
 8007c4c:	f8d5 000b 	ldr.w	r0, [r5, #11]
 8007c50:	ee07 3a10 	vmov	s14, r3
 8007c54:	ee07 0a90 	vmov	s15, r0
 8007c58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c5c:	ee17 0a90 	vmov	r0, s15
 8007c60:	f7f8 fcb2 	bl	80005c8 <__aeabi_f2d>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4854      	ldr	r0, [pc, #336]	@ (8007dbc <display_values+0x5a8>)
 8007c6a:	f008 fd4b 	bl	8010704 <iprintf>
 8007c6e:	e624      	b.n	80078ba <display_values+0xa6>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("DPS368: %.2f   ", DPS368.press.value+DPS368.press.offset);
 8007c70:	7abb      	ldrb	r3, [r7, #10]
 8007c72:	07d8      	lsls	r0, r3, #31
 8007c74:	f57f ae15 	bpl.w	80078a2 <display_values+0x8e>
 8007c78:	f8d7 300f 	ldr.w	r3, [r7, #15]
 8007c7c:	f8d7 000b 	ldr.w	r0, [r7, #11]
 8007c80:	ee07 3a10 	vmov	s14, r3
 8007c84:	ee07 0a90 	vmov	s15, r0
 8007c88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c8c:	ee17 0a90 	vmov	r0, s15
 8007c90:	f7f8 fc9a 	bl	80005c8 <__aeabi_f2d>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4849      	ldr	r0, [pc, #292]	@ (8007dc0 <display_values+0x5ac>)
 8007c9a:	f008 fd33 	bl	8010704 <iprintf>
 8007c9e:	e600      	b.n	80078a2 <display_values+0x8e>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("MS8607: %.2f   ", MS8607.press.value+MS8607.press.offset);
 8007ca0:	7ce3      	ldrb	r3, [r4, #19]
 8007ca2:	07db      	lsls	r3, r3, #31
 8007ca4:	f57f adf7 	bpl.w	8007896 <display_values+0x82>
 8007ca8:	ed94 7a05 	vldr	s14, [r4, #20]
 8007cac:	edd4 7a06 	vldr	s15, [r4, #24]
 8007cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cb4:	ee17 0a90 	vmov	r0, s15
 8007cb8:	f7f8 fc86 	bl	80005c8 <__aeabi_f2d>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	483c      	ldr	r0, [pc, #240]	@ (8007db4 <display_values+0x5a0>)
 8007cc2:	f008 fd1f 	bl	8010704 <iprintf>
 8007cc6:	e5e6      	b.n	8007896 <display_values+0x82>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("BME280: %.2f   ", BME280.press.value+BME280.press.offset);
 8007cc8:	7ceb      	ldrb	r3, [r5, #19]
 8007cca:	07da      	lsls	r2, r3, #31
 8007ccc:	f57f addd 	bpl.w	800788a <display_values+0x76>
 8007cd0:	ed95 7a05 	vldr	s14, [r5, #20]
 8007cd4:	edd5 7a06 	vldr	s15, [r5, #24]
 8007cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cdc:	ee17 0a90 	vmov	r0, s15
 8007ce0:	f7f8 fc72 	bl	80005c8 <__aeabi_f2d>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4834      	ldr	r0, [pc, #208]	@ (8007dbc <display_values+0x5a8>)
 8007cea:	f008 fd0b 	bl	8010704 <iprintf>
 8007cee:	e5cc      	b.n	800788a <display_values+0x76>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("DPS368: %.2f   ", DPS368.temp.value+DPS368.temp.offset);
 8007cf0:	787b      	ldrb	r3, [r7, #1]
 8007cf2:	07d9      	lsls	r1, r3, #31
 8007cf4:	f57f adbd 	bpl.w	8007872 <display_values+0x5e>
 8007cf8:	f8d7 3006 	ldr.w	r3, [r7, #6]
 8007cfc:	f8d7 0002 	ldr.w	r0, [r7, #2]
 8007d00:	ee07 3a10 	vmov	s14, r3
 8007d04:	ee07 0a90 	vmov	s15, r0
 8007d08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d0c:	ee17 0a90 	vmov	r0, s15
 8007d10:	f7f8 fc5a 	bl	80005c8 <__aeabi_f2d>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4829      	ldr	r0, [pc, #164]	@ (8007dc0 <display_values+0x5ac>)
 8007d1a:	f008 fcf3 	bl	8010704 <iprintf>
 8007d1e:	e5a8      	b.n	8007872 <display_values+0x5e>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("MS8607: %.2f   ", MS8607.temp.value+MS8607.temp.offset);
 8007d20:	7863      	ldrb	r3, [r4, #1]
 8007d22:	07d8      	lsls	r0, r3, #31
 8007d24:	f57f ad9e 	bpl.w	8007864 <display_values+0x50>
 8007d28:	f8d4 3006 	ldr.w	r3, [r4, #6]
 8007d2c:	f8d4 0002 	ldr.w	r0, [r4, #2]
 8007d30:	ee07 3a10 	vmov	s14, r3
 8007d34:	ee07 0a90 	vmov	s15, r0
 8007d38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d3c:	ee17 0a90 	vmov	r0, s15
 8007d40:	f7f8 fc42 	bl	80005c8 <__aeabi_f2d>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	481a      	ldr	r0, [pc, #104]	@ (8007db4 <display_values+0x5a0>)
 8007d4a:	f008 fcdb 	bl	8010704 <iprintf>
 8007d4e:	e589      	b.n	8007864 <display_values+0x50>
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("SHTC3: %.2f   ", SHT3.temp.value+SHT3.temp.offset);
 8007d50:	7873      	ldrb	r3, [r6, #1]
 8007d52:	07dc      	lsls	r4, r3, #31
 8007d54:	f57f ad7f 	bpl.w	8007856 <display_values+0x42>
 8007d58:	f8d6 3006 	ldr.w	r3, [r6, #6]
 8007d5c:	f8d6 0002 	ldr.w	r0, [r6, #2]
 8007d60:	ee07 3a10 	vmov	s14, r3
 8007d64:	ee07 0a90 	vmov	s15, r0
 8007d68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d6c:	ee17 0a90 	vmov	r0, s15
 8007d70:	f7f8 fc2a 	bl	80005c8 <__aeabi_f2d>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	480f      	ldr	r0, [pc, #60]	@ (8007db8 <display_values+0x5a4>)
 8007d7a:	f008 fcc3 	bl	8010704 <iprintf>
 8007d7e:	e56a      	b.n	8007856 <display_values+0x42>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("BME280: %.2f   ", BME280.temp.value+BME280.temp.offset);
 8007d80:	786b      	ldrb	r3, [r5, #1]
 8007d82:	07de      	lsls	r6, r3, #31
 8007d84:	f57f ad60 	bpl.w	8007848 <display_values+0x34>
 8007d88:	f8d5 3006 	ldr.w	r3, [r5, #6]
 8007d8c:	f8d5 0002 	ldr.w	r0, [r5, #2]
 8007d90:	ee07 3a10 	vmov	s14, r3
 8007d94:	ee07 0a90 	vmov	s15, r0
 8007d98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d9c:	ee17 0a90 	vmov	r0, s15
 8007da0:	f7f8 fc12 	bl	80005c8 <__aeabi_f2d>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4804      	ldr	r0, [pc, #16]	@ (8007dbc <display_values+0x5a8>)
 8007daa:	f008 fcab 	bl	8010704 <iprintf>
 8007dae:	e54b      	b.n	8007848 <display_values+0x34>
 8007db0:	0801606c 	.word	0x0801606c
 8007db4:	0801601c 	.word	0x0801601c
 8007db8:	0801600c 	.word	0x0801600c
 8007dbc:	08015ffc 	.word	0x08015ffc
 8007dc0:	0801602c 	.word	0x0801602c

08007dc4 <getConfVars>:
{
 8007dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  BME280.sensor_use = config.BME280_use;
 8007dc8:	495f      	ldr	r1, [pc, #380]	@ (8007f48 <getConfVars+0x184>)
	  SHT3.sensor_use = config.SHT3_use;
 8007dca:	4b60      	ldr	r3, [pc, #384]	@ (8007f4c <getConfVars+0x188>)
	  BME280.sensor_use = config.BME280_use;
 8007dcc:	8808      	ldrh	r0, [r1, #0]
	  SHT3.sensor_use = config.SHT3_use;
 8007dce:	4e60      	ldr	r6, [pc, #384]	@ (8007f50 <getConfVars+0x18c>)
 8007dd0:	7bda      	ldrb	r2, [r3, #15]
	  MS8607.sensor_use = config.MS8607_use;
 8007dd2:	7e1d      	ldrb	r5, [r3, #24]
	  DPS368.sensor_use = config.DPS368_use;
 8007dd4:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8007f58 <getConfVars+0x194>
	  TMP117.sensor_use = config.TMP117_use;
 8007dd8:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8007f5c <getConfVars+0x198>
	  TMP117.sensor_conf = config.TMP117_conf;
 8007ddc:	7a9c      	ldrb	r4, [r3, #10]
	  TMP117.sensor_use = config.TMP117_use;
 8007dde:	f8bc e000 	ldrh.w	lr, [ip]
	  BME280.sensor_use = config.BME280_use;
 8007de2:	f893 7025 	ldrb.w	r7, [r3, #37]	@ 0x25
	  DPS368.sensor_use = config.DPS368_use;
 8007de6:	f893 b032 	ldrb.w	fp, [r3, #50]	@ 0x32
	  BME280.press.use_meas = config.BME280_p_use;
 8007dea:	f891 a013 	ldrb.w	sl, [r1, #19]
{
 8007dee:	b087      	sub	sp, #28
	  BME280.sensor_use = config.BME280_use;
 8007df0:	f420 709f 	bic.w	r0, r0, #318	@ 0x13e
	  SHT3.sensor_use = config.SHT3_use;
 8007df4:	9200      	str	r2, [sp, #0]
	  BME280.sensor_use = config.BME280_use;
 8007df6:	9002      	str	r0, [sp, #8]
	  MS8607.sensor_use = config.MS8607_use;
 8007df8:	4a56      	ldr	r2, [pc, #344]	@ (8007f54 <getConfVars+0x190>)
	  SHT3.sensor_use = config.SHT3_use;
 8007dfa:	8830      	ldrh	r0, [r6, #0]
	  MS8607.sensor_use = config.MS8607_use;
 8007dfc:	9501      	str	r5, [sp, #4]
	  SHT3.sensor_use = config.SHT3_use;
 8007dfe:	f420 759f 	bic.w	r5, r0, #318	@ 0x13e
	  MS8607.sensor_use = config.MS8607_use;
 8007e02:	8810      	ldrh	r0, [r2, #0]
	  SHT3.sensor_use = config.SHT3_use;
 8007e04:	9503      	str	r5, [sp, #12]
	  MS8607.sensor_use = config.MS8607_use;
 8007e06:	f420 799f 	bic.w	r9, r0, #318	@ 0x13e
	  DPS368.sensor_use = config.DPS368_use;
 8007e0a:	f8b8 0000 	ldrh.w	r0, [r8]
	  MS8607.sensor_use = config.MS8607_use;
 8007e0e:	f8cd 9010 	str.w	r9, [sp, #16]
	  DPS368.sensor_use = config.DPS368_use;
 8007e12:	f420 799f 	bic.w	r9, r0, #318	@ 0x13e
 8007e16:	f8cd 9014 	str.w	r9, [sp, #20]
	  TMP117.temp.offset = config.TMP117_t_offset;
 8007e1a:	f8d3 000b 	ldr.w	r0, [r3, #11]
 8007e1e:	f8cc 0006 	str.w	r0, [ip, #6]
	  BME280.temp.offset = config.BME280_t_offset;
 8007e22:	f8d3 0026 	ldr.w	r0, [r3, #38]	@ 0x26
 8007e26:	f8c1 0006 	str.w	r0, [r1, #6]
	  MS8607.temp.offset = config.MS8607_t_offset;
 8007e2a:	f8d3 0019 	ldr.w	r0, [r3, #25]
 8007e2e:	f8c2 0006 	str.w	r0, [r2, #6]
	  DPS368.temp.offset = config.DPS368_t_offset;
 8007e32:	f8d3 0033 	ldr.w	r0, [r3, #51]	@ 0x33
 8007e36:	f8c8 0006 	str.w	r0, [r8, #6]
	  TMP117.sensor_use = config.TMP117_use;
 8007e3a:	0060      	lsls	r0, r4, #1
 8007e3c:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 8007e40:	f3c4 1440 	ubfx	r4, r4, #5, #1
	  MS8607.sensor_use = config.MS8607_use;
 8007e44:	9d01      	ldr	r5, [sp, #4]
	  MS8607.press.use_meas = config.MS8607_p_use;
 8007e46:	f892 9013 	ldrb.w	r9, [r2, #19]
	  TMP117.sensor_use = config.TMP117_use;
 8007e4a:	f42e 7e9f 	bic.w	lr, lr, #318	@ 0x13e
 8007e4e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8007e52:	ea40 000e 	orr.w	r0, r0, lr
	  BME280.sensor_use = config.BME280_use;
 8007e56:	007c      	lsls	r4, r7, #1
	  TMP117.sensor_use = config.TMP117_use;
 8007e58:	f8ac 0000 	strh.w	r0, [ip]
	  BME280.sensor_use = config.BME280_use;
 8007e5c:	f004 043e 	and.w	r4, r4, #62	@ 0x3e
	  MS8607.sensor_use = config.MS8607_use;
 8007e60:	ea4f 0c45 	mov.w	ip, r5, lsl #1
	  BME280.sensor_use = config.BME280_use;
 8007e64:	f3c7 1540 	ubfx	r5, r7, #5, #1
 8007e68:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8007e6c:	9d02      	ldr	r5, [sp, #8]
	  SHT3.sensor_use = config.SHT3_use;
 8007e6e:	9800      	ldr	r0, [sp, #0]
	  BME280.sensor_use = config.BME280_use;
 8007e70:	432c      	orrs	r4, r5
 8007e72:	800c      	strh	r4, [r1, #0]
	  SHT3.sensor_use = config.SHT3_use;
 8007e74:	9c00      	ldr	r4, [sp, #0]
 8007e76:	9d03      	ldr	r5, [sp, #12]
 8007e78:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 8007e7c:	f3c4 1440 	ubfx	r4, r4, #5, #1
 8007e80:	f00e 0e3e 	and.w	lr, lr, #62	@ 0x3e
 8007e84:	ea4e 2e04 	orr.w	lr, lr, r4, lsl #8
 8007e88:	ea4e 0e05 	orr.w	lr, lr, r5
	  MS8607.sensor_use = config.MS8607_use;
 8007e8c:	9d01      	ldr	r5, [sp, #4]
	  SHT3.sensor_use = config.SHT3_use;
 8007e8e:	f8a6 e000 	strh.w	lr, [r6]
	  MS8607.sensor_use = config.MS8607_use;
 8007e92:	f00c 0c3e 	and.w	ip, ip, #62	@ 0x3e
 8007e96:	f3c5 1e40 	ubfx	lr, r5, #5, #1
 8007e9a:	9d04      	ldr	r5, [sp, #16]
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8007e9c:	9c00      	ldr	r4, [sp, #0]
	  MS8607.sensor_use = config.MS8607_use;
 8007e9e:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 8007ea2:	ea4c 0c05 	orr.w	ip, ip, r5
	  DPS368.sensor_use = config.DPS368_use;
 8007ea6:	ea4f 004b 	mov.w	r0, fp, lsl #1
	  MS8607.sensor_use = config.MS8607_use;
 8007eaa:	f8a2 c000 	strh.w	ip, [r2]
	  DPS368.sensor_use = config.DPS368_use;
 8007eae:	9d05      	ldr	r5, [sp, #20]
 8007eb0:	f3cb 1c40 	ubfx	ip, fp, #5, #1
 8007eb4:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 8007eb8:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8007ebc:	4328      	orrs	r0, r5
 8007ebe:	f8a8 0000 	strh.w	r0, [r8]
	  SHT3.temp.offset = config.SHT3_t_offset;
 8007ec2:	6918      	ldr	r0, [r3, #16]
 8007ec4:	f8c6 0006 	str.w	r0, [r6, #6]
	  MS8607.press.use_meas = config.MS8607_p_use;
 8007ec8:	9d01      	ldr	r5, [sp, #4]
	  BME280.press.offset = config.BME280_p_offset;
 8007eca:	f8d3 002e 	ldr.w	r0, [r3, #46]	@ 0x2e
 8007ece:	6188      	str	r0, [r1, #24]
	  BME280.press.use_meas = config.BME280_p_use;
 8007ed0:	ea4f 1ed7 	mov.w	lr, r7, lsr #7
 8007ed4:	f36e 0a00 	bfi	sl, lr, #0, #1
	  MS8607.press.use_meas = config.MS8607_p_use;
 8007ed8:	ea4f 1ed5 	mov.w	lr, r5, lsr #7
	  MS8607.press.offset = config.MS8607_p_offset;
 8007edc:	f8d3 0021 	ldr.w	r0, [r3, #33]	@ 0x21
 8007ee0:	6190      	str	r0, [r2, #24]
	  MS8607.press.use_meas = config.MS8607_p_use;
 8007ee2:	f36e 0900 	bfi	r9, lr, #0, #1
	  BME280.press.use_meas = config.BME280_p_use;
 8007ee6:	f881 a013 	strb.w	sl, [r1, #19]
	  MS8607.press.use_meas = config.MS8607_p_use;
 8007eea:	f882 9013 	strb.w	r9, [r2, #19]
	  DPS368.press.offset = config.DPS368_p_offset;
 8007eee:	f8d3 0037 	ldr.w	r0, [r3, #55]	@ 0x37
 8007ef2:	f8c8 000f 	str.w	r0, [r8, #15]
	  BME280.hum.offset = config.BME280_h_offset;
 8007ef6:	f8d3 002a 	ldr.w	r0, [r3, #42]	@ 0x2a
 8007efa:	f8c1 000f 	str.w	r0, [r1, #15]
	  MS8607.hum.offset = config.MS8607_h_offset;
 8007efe:	f8d3 001d 	ldr.w	r0, [r3, #29]
	  SHT3.hum.offset = config.SHT3_h_offset;
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	f8c6 300f 	str.w	r3, [r6, #15]
	  DPS368.press.use_meas = config.DPS368_p_use;
 8007f08:	f898 300a 	ldrb.w	r3, [r8, #10]
	  MS8607.hum.offset = config.MS8607_h_offset;
 8007f0c:	f8c2 000f 	str.w	r0, [r2, #15]
	  DPS368.press.use_meas = config.DPS368_p_use;
 8007f10:	f3cb 1c80 	ubfx	ip, fp, #6, #1
 8007f14:	f36c 0300 	bfi	r3, ip, #0, #1
 8007f18:	f888 300a 	strb.w	r3, [r8, #10]
	  BME280.hum.use_meas = config.BME280_h_use;
 8007f1c:	7a8b      	ldrb	r3, [r1, #10]
 8007f1e:	f3c7 1780 	ubfx	r7, r7, #6, #1
 8007f22:	f367 0300 	bfi	r3, r7, #0, #1
 8007f26:	728b      	strb	r3, [r1, #10]
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8007f28:	7ab1      	ldrb	r1, [r6, #10]
	  MS8607.hum.use_meas = config.MS8607_h_use;
 8007f2a:	7a93      	ldrb	r3, [r2, #10]
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8007f2c:	f3c4 1480 	ubfx	r4, r4, #6, #1
	  MS8607.hum.use_meas = config.MS8607_h_use;
 8007f30:	f3c5 1580 	ubfx	r5, r5, #6, #1
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8007f34:	f364 0100 	bfi	r1, r4, #0, #1
	  MS8607.hum.use_meas = config.MS8607_h_use;
 8007f38:	f365 0300 	bfi	r3, r5, #0, #1
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8007f3c:	72b1      	strb	r1, [r6, #10]
	  MS8607.hum.use_meas = config.MS8607_h_use;
 8007f3e:	7293      	strb	r3, [r2, #10]
}
 8007f40:	b007      	add	sp, #28
 8007f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f46:	bf00      	nop
 8007f48:	20001b00 	.word	0x20001b00
 8007f4c:	200019c0 	.word	0x200019c0
 8007f50:	20001b48 	.word	0x20001b48
 8007f54:	20001b24 	.word	0x20001b24
 8007f58:	20001ae8 	.word	0x20001ae8
 8007f5c:	20001b60 	.word	0x20001b60

08007f60 <SendTestMessage>:
{
 8007f60:	b570      	push	{r4, r5, r6, lr}
			Sim80x.Gsm.Time.Hour, Sim80x.Gsm.Time.Min, Sim80x.Gsm.Time.Sec);
 8007f62:	4d1e      	ldr	r5, [pc, #120]	@ (8007fdc <SendTestMessage+0x7c>)
{
 8007f64:	b09c      	sub	sp, #112	@ 0x70
	Sim80x_GetTime();		// pobranie czasu z RTC sim868
 8007f66:	f7fa fc79 	bl	800285c <Sim80x_GetTime>
	sprintf(tekst, "Test Wysylania przez GPRS z tasku GprsSend, Czas: %02u:%02u:%02u\r\n",
 8007f6a:	f895 1655 	ldrb.w	r1, [r5, #1621]	@ 0x655
 8007f6e:	f895 3654 	ldrb.w	r3, [r5, #1620]	@ 0x654
 8007f72:	f895 2653 	ldrb.w	r2, [r5, #1619]	@ 0x653
 8007f76:	9100      	str	r1, [sp, #0]
 8007f78:	a803      	add	r0, sp, #12
 8007f7a:	4919      	ldr	r1, [pc, #100]	@ (8007fe0 <SendTestMessage+0x80>)
 8007f7c:	f008 fc66 	bl	801084c <siprintf>
	Sim80x.GPRS.SendStatus = GPRSSendData_Idle;
 8007f80:	2300      	movs	r3, #0
 8007f82:	f885 382c 	strb.w	r3, [r5, #2092]	@ 0x82c
 8007f86:	2605      	movs	r6, #5
		GPRS_SendString(tekst);
 8007f88:	a803      	add	r0, sp, #12
 8007f8a:	f7f9 fdf3 	bl	8001b74 <GPRS_SendString>
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 8007f8e:	2400      	movs	r4, #0
 8007f90:	e004      	b.n	8007f9c <SendTestMessage+0x3c>
			if(++tout >= 100) break;			// break while - tout 10 sekund
 8007f92:	3401      	adds	r4, #1
			osDelay(100);
 8007f94:	f005 fbf0 	bl	800d778 <osDelay>
			if(++tout >= 100) break;			// break while - tout 10 sekund
 8007f98:	2c64      	cmp	r4, #100	@ 0x64
 8007f9a:	d008      	beq.n	8007fae <SendTestMessage+0x4e>
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 8007f9c:	f895 382c 	ldrb.w	r3, [r5, #2092]	@ 0x82c
 8007fa0:	2b02      	cmp	r3, #2
			osDelay(100);
 8007fa2:	f04f 0064 	mov.w	r0, #100	@ 0x64
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 8007fa6:	d1f4      	bne.n	8007f92 <SendTestMessage+0x32>
		if(tout < 50) {printf("Sending OK !\r\n"); break;}	// break for
 8007fa8:	b2e4      	uxtb	r4, r4
 8007faa:	2c31      	cmp	r4, #49	@ 0x31
 8007fac:	d911      	bls.n	8007fd2 <SendTestMessage+0x72>
	for(int i=0; i<5; ++i) {
 8007fae:	3e01      	subs	r6, #1
 8007fb0:	d1ea      	bne.n	8007f88 <SendTestMessage+0x28>
	if(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 8007fb2:	f895 382c 	ldrb.w	r3, [r5, #2092]	@ 0x82c
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d005      	beq.n	8007fc6 <SendTestMessage+0x66>
		printf("GPRS Sending Failed !\r\n");
 8007fba:	480a      	ldr	r0, [pc, #40]	@ (8007fe4 <SendTestMessage+0x84>)
 8007fbc:	f008 fc0a 	bl	80107d4 <puts>
		gprs_send_status = GPRSsendStatusError;			// ustaw globalny status wysylania na error
 8007fc0:	4b09      	ldr	r3, [pc, #36]	@ (8007fe8 <SendTestMessage+0x88>)
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	701a      	strb	r2, [r3, #0]
	osDelay(5000);			// normalnie zbedny, ale to dla mozliwosci odebrania danych z serwera.
 8007fc6:	f241 3088 	movw	r0, #5000	@ 0x1388
 8007fca:	f005 fbd5 	bl	800d778 <osDelay>
}
 8007fce:	b01c      	add	sp, #112	@ 0x70
 8007fd0:	bd70      	pop	{r4, r5, r6, pc}
		if(tout < 50) {printf("Sending OK !\r\n"); break;}	// break for
 8007fd2:	4806      	ldr	r0, [pc, #24]	@ (8007fec <SendTestMessage+0x8c>)
 8007fd4:	f008 fbfe 	bl	80107d4 <puts>
 8007fd8:	e7eb      	b.n	8007fb2 <SendTestMessage+0x52>
 8007fda:	bf00      	nop
 8007fdc:	20000230 	.word	0x20000230
 8007fe0:	08016074 	.word	0x08016074
 8007fe4:	080160c8 	.word	0x080160c8
 8007fe8:	2000198d 	.word	0x2000198d
 8007fec:	080160b8 	.word	0x080160b8

08007ff0 <SendMqttMessage>:
{
 8007ff0:	b570      	push	{r4, r5, r6, lr}
			Sim80x.Gsm.Time.Hour, Sim80x.Gsm.Time.Min, Sim80x.Gsm.Time.Sec);
 8007ff2:	4d20      	ldr	r5, [pc, #128]	@ (8008074 <SendMqttMessage+0x84>)
{
 8007ff4:	b09c      	sub	sp, #112	@ 0x70
	Sim80x_GetTime();		// pobranie czasu z RTC sim868
 8007ff6:	f7fa fc31 	bl	800285c <Sim80x_GetTime>
	sprintf(tekst, "Test Wysylania do MQTT, Czas: %02u:%02u:%02u\r\n",
 8007ffa:	f895 1655 	ldrb.w	r1, [r5, #1621]	@ 0x655
 8007ffe:	f895 3654 	ldrb.w	r3, [r5, #1620]	@ 0x654
 8008002:	f895 2653 	ldrb.w	r2, [r5, #1619]	@ 0x653
 8008006:	9100      	str	r1, [sp, #0]
 8008008:	a803      	add	r0, sp, #12
 800800a:	491b      	ldr	r1, [pc, #108]	@ (8008078 <SendMqttMessage+0x88>)
 800800c:	f008 fc1e 	bl	801084c <siprintf>
	Sim80x.GPRS.SendStatus = GPRSSendData_Idle;
 8008010:	2300      	movs	r3, #0
 8008012:	f885 382c 	strb.w	r3, [r5, #2092]	@ 0x82c
 8008016:	2605      	movs	r6, #5
		GPRS_SendRaw((uint8_t*)tekst, strlen(tekst));
 8008018:	a803      	add	r0, sp, #12
 800801a:	f7f8 f969 	bl	80002f0 <strlen>
 800801e:	b281      	uxth	r1, r0
 8008020:	a803      	add	r0, sp, #12
 8008022:	f7f9 fddf 	bl	8001be4 <GPRS_SendRaw>
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 8008026:	2400      	movs	r4, #0
 8008028:	e004      	b.n	8008034 <SendMqttMessage+0x44>
			if(++tout >= 100) break;			// break while - tout 10s
 800802a:	3401      	adds	r4, #1
			osDelay(100);
 800802c:	f005 fba4 	bl	800d778 <osDelay>
			if(++tout >= 100) break;			// break while - tout 10s
 8008030:	2c64      	cmp	r4, #100	@ 0x64
 8008032:	d008      	beq.n	8008046 <SendMqttMessage+0x56>
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 8008034:	f895 382c 	ldrb.w	r3, [r5, #2092]	@ 0x82c
 8008038:	2b02      	cmp	r3, #2
			osDelay(100);
 800803a:	f04f 0064 	mov.w	r0, #100	@ 0x64
		while(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 800803e:	d1f4      	bne.n	800802a <SendMqttMessage+0x3a>
		if(tout < 50) {printf("Sending OK !\r\n"); break;}	// break for
 8008040:	b2e4      	uxtb	r4, r4
 8008042:	2c31      	cmp	r4, #49	@ 0x31
 8008044:	d911      	bls.n	800806a <SendMqttMessage+0x7a>
	for(int i=0; i<5; ++i) {
 8008046:	3e01      	subs	r6, #1
 8008048:	d1e6      	bne.n	8008018 <SendMqttMessage+0x28>
	if(Sim80x.GPRS.SendStatus != GPRSSendData_SendOK) {
 800804a:	f895 382c 	ldrb.w	r3, [r5, #2092]	@ 0x82c
 800804e:	2b02      	cmp	r3, #2
 8008050:	d005      	beq.n	800805e <SendMqttMessage+0x6e>
		printf("GPRS Sending Failed !\r\n");
 8008052:	480a      	ldr	r0, [pc, #40]	@ (800807c <SendMqttMessage+0x8c>)
 8008054:	f008 fbbe 	bl	80107d4 <puts>
		gprs_send_status = GPRSsendStatusError;			// ustaw globalny status wysylania na error
 8008058:	4b09      	ldr	r3, [pc, #36]	@ (8008080 <SendMqttMessage+0x90>)
 800805a:	2203      	movs	r2, #3
 800805c:	701a      	strb	r2, [r3, #0]
	osDelay(5000);			// normalnie zbedny, ale to dla mozliwosci odebrania danych z serwera.
 800805e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8008062:	f005 fb89 	bl	800d778 <osDelay>
}
 8008066:	b01c      	add	sp, #112	@ 0x70
 8008068:	bd70      	pop	{r4, r5, r6, pc}
		if(tout < 50) {printf("Sending OK !\r\n"); break;}	// break for
 800806a:	4806      	ldr	r0, [pc, #24]	@ (8008084 <SendMqttMessage+0x94>)
 800806c:	f008 fbb2 	bl	80107d4 <puts>
 8008070:	e7eb      	b.n	800804a <SendMqttMessage+0x5a>
 8008072:	bf00      	nop
 8008074:	20000230 	.word	0x20000230
 8008078:	080160e0 	.word	0x080160e0
 800807c:	080160c8 	.word	0x080160c8
 8008080:	2000198d 	.word	0x2000198d
 8008084:	080160b8 	.word	0x080160b8

08008088 <GprsSendTask>:
{
 8008088:	b570      	push	{r4, r5, r6, lr}
	if(Sim80x.GPRS.Connection < GPRSConnection_GPRSup ||
 800808a:	4d54      	ldr	r5, [pc, #336]	@ (80081dc <GprsSendTask+0x154>)
	gprs_send_status = GPRSsendStatusInprogress;					// ustaw globalny status wysylania na "in progress"
 800808c:	4a54      	ldr	r2, [pc, #336]	@ (80081e0 <GprsSendTask+0x158>)
	if(Sim80x.GPRS.Connection < GPRSConnection_GPRSup ||
 800808e:	f895 382b 	ldrb.w	r3, [r5, #2091]	@ 0x82b
 8008092:	3b01      	subs	r3, #1
	gprs_send_status = GPRSsendStatusInprogress;					// ustaw globalny status wysylania na "in progress"
 8008094:	2101      	movs	r1, #1
	if(Sim80x.GPRS.Connection < GPRSConnection_GPRSup ||
 8008096:	2b02      	cmp	r3, #2
	gprs_send_status = GPRSsendStatusInprogress;					// ustaw globalny status wysylania na "in progress"
 8008098:	7011      	strb	r1, [r2, #0]
	if(Sim80x.GPRS.Connection < GPRSConnection_GPRSup ||
 800809a:	d914      	bls.n	80080c6 <GprsSendTask+0x3e>
		bool status = GPRS_ConnectToNetwork("INTERNET", "", "", false);
 800809c:	4a51      	ldr	r2, [pc, #324]	@ (80081e4 <GprsSendTask+0x15c>)
 800809e:	4852      	ldr	r0, [pc, #328]	@ (80081e8 <GprsSendTask+0x160>)
 80080a0:	2300      	movs	r3, #0
 80080a2:	4611      	mov	r1, r2
 80080a4:	f7f9 fcc4 	bl	8001a30 <GPRS_ConnectToNetwork>
		printf("Connect to network: %s\r\n", status ? "OK":"ERROR");
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d07a      	beq.n	80081a2 <GprsSendTask+0x11a>
 80080ac:	494f      	ldr	r1, [pc, #316]	@ (80081ec <GprsSendTask+0x164>)
 80080ae:	4850      	ldr	r0, [pc, #320]	@ (80081f0 <GprsSendTask+0x168>)
 80080b0:	f008 fb28 	bl	8010704 <iprintf>
		printf("Connected to GPRS, IP: %s\r\n", Sim80x.GPRS.LocalIP);
 80080b4:	f605 011a 	addw	r1, r5, #2074	@ 0x81a
 80080b8:	484e      	ldr	r0, [pc, #312]	@ (80081f4 <GprsSendTask+0x16c>)
 80080ba:	f008 fb23 	bl	8010704 <iprintf>
		osDelay(250);
 80080be:	20fa      	movs	r0, #250	@ 0xfa
 80080c0:	f005 fb5a 	bl	800d778 <osDelay>
		if(!status) {printf("GPRS ERROR\r\n"); goto error;}
 80080c4:	e002      	b.n	80080cc <GprsSendTask+0x44>
	} else printf("GPRS is UP\r\n");
 80080c6:	484c      	ldr	r0, [pc, #304]	@ (80081f8 <GprsSendTask+0x170>)
 80080c8:	f008 fb84 	bl	80107d4 <puts>
	if(config.sendFormat & 1) {				// normal send
 80080cc:	4e4b      	ldr	r6, [pc, #300]	@ (80081fc <GprsSendTask+0x174>)
 80080ce:	f896 303c 	ldrb.w	r3, [r6, #60]	@ 0x3c
 80080d2:	f003 0203 	and.w	r2, r3, #3
 80080d6:	07db      	lsls	r3, r3, #31
 80080d8:	d437      	bmi.n	800814a <GprsSendTask+0xc2>
	if(config.sendFormat & 2) {				// MQTT send
 80080da:	2a01      	cmp	r2, #1
 80080dc:	d80f      	bhi.n	80080fe <GprsSendTask+0x76>
	osDelay(300);
 80080de:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80080e2:	f005 fb49 	bl	800d778 <osDelay>
	GPRS_DeactivatePDPContext();				// wylacz GPRS
 80080e6:	f7f9 fc5d 	bl	80019a4 <GPRS_DeactivatePDPContext>
	osDelay(50);
 80080ea:	2032      	movs	r0, #50	@ 0x32
 80080ec:	f005 fb44 	bl	800d778 <osDelay>
	GprsSendTaskFlag = 0;						// odblokuj mozliwosc ponownego uruchomienia tego taska
 80080f0:	4b43      	ldr	r3, [pc, #268]	@ (8008200 <GprsSendTask+0x178>)
 80080f2:	2000      	movs	r0, #0
}
 80080f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	GprsSendTaskFlag = 0;						// odblokuj mozliwosc ponownego uruchomienia tego taska
 80080f8:	7018      	strb	r0, [r3, #0]
	vTaskDelete(NULL);							// usun task z pamieci jako juz zbedny
 80080fa:	f005 bcbf 	b.w	800da7c <vTaskDelete>
		printf("Connecting to MQTT: %s, port %d - %s\r\n", config.mqttIP, config.mqttPort,
 80080fe:	f8b6 40af 	ldrh.w	r4, [r6, #175]	@ 0xaf
				GPRS_ConnectToServer(config.mqttIP, config.mqttPort) ? "IN PROGRESS":"ERROR");
 8008102:	4840      	ldr	r0, [pc, #256]	@ (8008204 <GprsSendTask+0x17c>)
 8008104:	4621      	mov	r1, r4
 8008106:	f7f9 fce3 	bl	8001ad0 <GPRS_ConnectToServer>
		printf("Connecting to MQTT: %s, port %d - %s\r\n", config.mqttIP, config.mqttPort,
 800810a:	493f      	ldr	r1, [pc, #252]	@ (8008208 <GprsSendTask+0x180>)
 800810c:	4b3f      	ldr	r3, [pc, #252]	@ (800820c <GprsSendTask+0x184>)
 800810e:	4622      	mov	r2, r4
 8008110:	2800      	cmp	r0, #0
 8008112:	bf18      	it	ne
 8008114:	460b      	movne	r3, r1
 8008116:	493b      	ldr	r1, [pc, #236]	@ (8008204 <GprsSendTask+0x17c>)
 8008118:	483d      	ldr	r0, [pc, #244]	@ (8008210 <GprsSendTask+0x188>)
 800811a:	f008 faf3 	bl	8010704 <iprintf>
		while(Sim80x.GPRS.Connection != GPRSConnection_ConnectOK)	{	// gotowy do wysylania danych ?
 800811e:	2400      	movs	r4, #0
 8008120:	e003      	b.n	800812a <GprsSendTask+0xa2>
			osDelay(100);
 8008122:	f005 fb29 	bl	800d778 <osDelay>
			if(++tout >= 100) break;			// timeout na 10 sekund
 8008126:	2c64      	cmp	r4, #100	@ 0x64
 8008128:	d04b      	beq.n	80081c2 <GprsSendTask+0x13a>
		while(Sim80x.GPRS.Connection != GPRSConnection_ConnectOK)	{	// gotowy do wysylania danych ?
 800812a:	f895 382b 	ldrb.w	r3, [r5, #2091]	@ 0x82b
 800812e:	2b03      	cmp	r3, #3
			osDelay(100);
 8008130:	f04f 0064 	mov.w	r0, #100	@ 0x64
			if(++tout >= 100) break;			// timeout na 10 sekund
 8008134:	f104 0401 	add.w	r4, r4, #1
		while(Sim80x.GPRS.Connection != GPRSConnection_ConnectOK)	{	// gotowy do wysylania danych ?
 8008138:	d1f3      	bne.n	8008122 <GprsSendTask+0x9a>
			printf("Connected !\r\n");
 800813a:	4836      	ldr	r0, [pc, #216]	@ (8008214 <GprsSendTask+0x18c>)
 800813c:	f008 fb4a 	bl	80107d4 <puts>
			SendMqttMessage();					// serwer MQTT połączony, pogadaj z nim
 8008140:	f7ff ff56 	bl	8007ff0 <SendMqttMessage>
			GPRS_DisconnectFromServer();		// rozlacz od serwera
 8008144:	f7f9 fcfc 	bl	8001b40 <GPRS_DisconnectFromServer>
 8008148:	e7c9      	b.n	80080de <GprsSendTask+0x56>
		printf("Connecting to server: %s, port %d - %s\r\n", config.serverIP, config.serverPort,
 800814a:	f8b6 407d 	ldrh.w	r4, [r6, #125]	@ 0x7d
				GPRS_ConnectToServer(config.serverIP, config.serverPort) ? "IN PROGRESS":"ERROR");
 800814e:	f106 004d 	add.w	r0, r6, #77	@ 0x4d
 8008152:	4621      	mov	r1, r4
 8008154:	f7f9 fcbc 	bl	8001ad0 <GPRS_ConnectToServer>
		printf("Connecting to server: %s, port %d - %s\r\n", config.serverIP, config.serverPort,
 8008158:	492b      	ldr	r1, [pc, #172]	@ (8008208 <GprsSendTask+0x180>)
 800815a:	4b2c      	ldr	r3, [pc, #176]	@ (800820c <GprsSendTask+0x184>)
 800815c:	4622      	mov	r2, r4
 800815e:	2800      	cmp	r0, #0
 8008160:	bf18      	it	ne
 8008162:	460b      	movne	r3, r1
 8008164:	482c      	ldr	r0, [pc, #176]	@ (8008218 <GprsSendTask+0x190>)
 8008166:	f106 014d 	add.w	r1, r6, #77	@ 0x4d
 800816a:	f008 facb 	bl	8010704 <iprintf>
		while(Sim80x.GPRS.Connection != GPRSConnection_ConnectOK)	{	// gotowy do wysylania danych ?
 800816e:	2400      	movs	r4, #0
 8008170:	e003      	b.n	800817a <GprsSendTask+0xf2>
			osDelay(100);
 8008172:	f005 fb01 	bl	800d778 <osDelay>
			if(++tout >= 100) break;			// timeout na 10 sekund
 8008176:	2c64      	cmp	r4, #100	@ 0x64
 8008178:	d027      	beq.n	80081ca <GprsSendTask+0x142>
		while(Sim80x.GPRS.Connection != GPRSConnection_ConnectOK)	{	// gotowy do wysylania danych ?
 800817a:	f895 382b 	ldrb.w	r3, [r5, #2091]	@ 0x82b
 800817e:	2b03      	cmp	r3, #3
			osDelay(100);
 8008180:	f04f 0064 	mov.w	r0, #100	@ 0x64
			if(++tout >= 100) break;			// timeout na 10 sekund
 8008184:	f104 0401 	add.w	r4, r4, #1
		while(Sim80x.GPRS.Connection != GPRSConnection_ConnectOK)	{	// gotowy do wysylania danych ?
 8008188:	d1f3      	bne.n	8008172 <GprsSendTask+0xea>
			printf("Connected !\r\n");
 800818a:	4822      	ldr	r0, [pc, #136]	@ (8008214 <GprsSendTask+0x18c>)
 800818c:	f008 fb22 	bl	80107d4 <puts>
			SendTestMessage();					// serwer połączony, pogadaj z nim
 8008190:	f7ff fee6 	bl	8007f60 <SendTestMessage>
			GPRS_DisconnectFromServer();		// rozlacz od serwera
 8008194:	f7f9 fcd4 	bl	8001b40 <GPRS_DisconnectFromServer>
	if(config.sendFormat & 2) {				// MQTT send
 8008198:	f896 203c 	ldrb.w	r2, [r6, #60]	@ 0x3c
 800819c:	f002 0203 	and.w	r2, r2, #3
 80081a0:	e79b      	b.n	80080da <GprsSendTask+0x52>
		printf("Connect to network: %s\r\n", status ? "OK":"ERROR");
 80081a2:	491a      	ldr	r1, [pc, #104]	@ (800820c <GprsSendTask+0x184>)
 80081a4:	4812      	ldr	r0, [pc, #72]	@ (80081f0 <GprsSendTask+0x168>)
 80081a6:	f008 faad 	bl	8010704 <iprintf>
		printf("Connected to GPRS, IP: %s\r\n", Sim80x.GPRS.LocalIP);
 80081aa:	f605 011a 	addw	r1, r5, #2074	@ 0x81a
 80081ae:	4811      	ldr	r0, [pc, #68]	@ (80081f4 <GprsSendTask+0x16c>)
 80081b0:	f008 faa8 	bl	8010704 <iprintf>
		osDelay(250);
 80081b4:	20fa      	movs	r0, #250	@ 0xfa
 80081b6:	f005 fadf 	bl	800d778 <osDelay>
		if(!status) {printf("GPRS ERROR\r\n"); goto error;}
 80081ba:	4818      	ldr	r0, [pc, #96]	@ (800821c <GprsSendTask+0x194>)
 80081bc:	f008 fb0a 	bl	80107d4 <puts>
 80081c0:	e793      	b.n	80080ea <GprsSendTask+0x62>
		} else printf("MQTT Server not respond\r\n");
 80081c2:	4817      	ldr	r0, [pc, #92]	@ (8008220 <GprsSendTask+0x198>)
 80081c4:	f008 fb06 	bl	80107d4 <puts>
 80081c8:	e789      	b.n	80080de <GprsSendTask+0x56>
		} else printf("Server not respond\r\n");
 80081ca:	4816      	ldr	r0, [pc, #88]	@ (8008224 <GprsSendTask+0x19c>)
 80081cc:	f008 fb02 	bl	80107d4 <puts>
	if(config.sendFormat & 2) {				// MQTT send
 80081d0:	f896 203c 	ldrb.w	r2, [r6, #60]	@ 0x3c
 80081d4:	f002 0203 	and.w	r2, r2, #3
 80081d8:	e77f      	b.n	80080da <GprsSendTask+0x52>
 80081da:	bf00      	nop
 80081dc:	20000230 	.word	0x20000230
 80081e0:	2000198d 	.word	0x2000198d
 80081e4:	08014be4 	.word	0x08014be4
 80081e8:	080152f0 	.word	0x080152f0
 80081ec:	080151b8 	.word	0x080151b8
 80081f0:	0801617c 	.word	0x0801617c
 80081f4:	0801530c 	.word	0x0801530c
 80081f8:	0801611c 	.word	0x0801611c
 80081fc:	200019c0 	.word	0x200019c0
 8008200:	20001995 	.word	0x20001995
 8008204:	20001a3f 	.word	0x20001a3f
 8008208:	08016110 	.word	0x08016110
 800820c:	080151bc 	.word	0x080151bc
 8008210:	08016154 	.word	0x08016154
 8008214:	080161a4 	.word	0x080161a4
 8008218:	08016128 	.word	0x08016128
 800821c:	08016198 	.word	0x08016198
 8008220:	080161b4 	.word	0x080161b4
 8008224:	080161d0 	.word	0x080161d0

08008228 <StartSendGPRS>:
{
 8008228:	b530      	push	{r4, r5, lr}
	if(GprsSendTaskFlag == 0 && Sim80x.Status.RegisterdToNetwork && config.sendFormat) {
 800822a:	4c1c      	ldr	r4, [pc, #112]	@ (800829c <StartSendGPRS+0x74>)
 800822c:	7820      	ldrb	r0, [r4, #0]
{
 800822e:	b087      	sub	sp, #28
	if(GprsSendTaskFlag == 0 && Sim80x.Status.RegisterdToNetwork && config.sendFormat) {
 8008230:	b9e8      	cbnz	r0, 800826e <StartSendGPRS+0x46>
 8008232:	4b1b      	ldr	r3, [pc, #108]	@ (80082a0 <StartSendGPRS+0x78>)
 8008234:	f893 3330 	ldrb.w	r3, [r3, #816]	@ 0x330
 8008238:	07dd      	lsls	r5, r3, #31
 800823a:	d516      	bpl.n	800826a <StartSendGPRS+0x42>
 800823c:	4a19      	ldr	r2, [pc, #100]	@ (80082a4 <StartSendGPRS+0x7c>)
 800823e:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 8008242:	0799      	lsls	r1, r3, #30
 8008244:	d011      	beq.n	800826a <StartSendGPRS+0x42>
		if((config.sendFormat & 1) && (config.serverIP[0]==0 || config.serverPort==0)) return false;	// blad IP/Port normal
 8008246:	f003 0103 	and.w	r1, r3, #3
 800824a:	07db      	lsls	r3, r3, #31
 800824c:	d505      	bpl.n	800825a <StartSendGPRS+0x32>
 800824e:	f892 304d 	ldrb.w	r3, [r2, #77]	@ 0x4d
 8008252:	b153      	cbz	r3, 800826a <StartSendGPRS+0x42>
 8008254:	f8b2 307d 	ldrh.w	r3, [r2, #125]	@ 0x7d
 8008258:	b13b      	cbz	r3, 800826a <StartSendGPRS+0x42>
		if((config.sendFormat & 2) && (config.mqttIP[0]==0 || config.mqttPort==0)) return false;		// blad IP/Port MQTT
 800825a:	2901      	cmp	r1, #1
 800825c:	d90a      	bls.n	8008274 <StartSendGPRS+0x4c>
 800825e:	f892 307f 	ldrb.w	r3, [r2, #127]	@ 0x7f
 8008262:	b113      	cbz	r3, 800826a <StartSendGPRS+0x42>
 8008264:	f8b2 30af 	ldrh.w	r3, [r2, #175]	@ 0xaf
 8008268:	b923      	cbnz	r3, 8008274 <StartSendGPRS+0x4c>
}
 800826a:	b007      	add	sp, #28
 800826c:	bd30      	pop	{r4, r5, pc}
	return false;				// nie uruchomiono tasku bo juz działa
 800826e:	2000      	movs	r0, #0
}
 8008270:	b007      	add	sp, #28
 8008272:	bd30      	pop	{r4, r5, pc}
		osThreadDef(SendGPRSTask, GprsSendTask, osPriorityNormal, 0, 256);
 8008274:	4d0c      	ldr	r5, [pc, #48]	@ (80082a8 <StartSendGPRS+0x80>)
 8008276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008278:	f10d 0c04 	add.w	ip, sp, #4
 800827c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	f8cc 3000 	str.w	r3, [ip]
		GprsSendTaskHandle = osThreadCreate(osThread(SendGPRSTask), NULL);
 8008286:	2100      	movs	r1, #0
 8008288:	a801      	add	r0, sp, #4
 800828a:	f005 fa59 	bl	800d740 <osThreadCreate>
 800828e:	4a07      	ldr	r2, [pc, #28]	@ (80082ac <StartSendGPRS+0x84>)
		GprsSendTaskFlag = 1;
 8008290:	2301      	movs	r3, #1
		GprsSendTaskHandle = osThreadCreate(osThread(SendGPRSTask), NULL);
 8008292:	6010      	str	r0, [r2, #0]
		GprsSendTaskFlag = 1;
 8008294:	7023      	strb	r3, [r4, #0]
		return true;			// poprawnie uruchomiono task
 8008296:	4618      	mov	r0, r3
 8008298:	e7e7      	b.n	800826a <StartSendGPRS+0x42>
 800829a:	bf00      	nop
 800829c:	20001995 	.word	0x20001995
 80082a0:	20000230 	.word	0x20000230
 80082a4:	200019c0 	.word	0x200019c0
 80082a8:	08013c20 	.word	0x08013c20
 80082ac:	20001998 	.word	0x20001998

080082b0 <GPRS_UserNewData>:
{
 80082b0:	b508      	push	{r3, lr}
 80082b2:	460a      	mov	r2, r1
	_write(0, NewData, len);
 80082b4:	4601      	mov	r1, r0
 80082b6:	2000      	movs	r0, #0
 80082b8:	f7fb fde8 	bl	8003e8c <_write>
}
 80082bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printf("\r\n");
 80082c0:	4801      	ldr	r0, [pc, #4]	@ (80082c8 <GPRS_UserNewData+0x18>)
 80082c2:	f008 ba87 	b.w	80107d4 <puts>
 80082c6:	bf00      	nop
 80082c8:	08015ec4 	.word	0x08015ec4

080082cc <GsmWdt>:
{
 80082cc:	b570      	push	{r4, r5, r6, lr}
	gsm_wdt++;
 80082ce:	4c55      	ldr	r4, [pc, #340]	@ (8008424 <GsmWdt+0x158>)
	if(!gsm_led_state && SIM_WDT_READ()) {
 80082d0:	4d55      	ldr	r5, [pc, #340]	@ (8008428 <GsmWdt+0x15c>)
	gsm_wdt++;
 80082d2:	8823      	ldrh	r3, [r4, #0]
	if(!gsm_led_state && SIM_WDT_READ()) {
 80082d4:	782e      	ldrb	r6, [r5, #0]
	gsm_wdt++;
 80082d6:	3301      	adds	r3, #1
 80082d8:	8023      	strh	r3, [r4, #0]
	if(!gsm_led_state && SIM_WDT_READ()) {
 80082da:	2e00      	cmp	r6, #0
 80082dc:	f000 808c 	beq.w	80083f8 <GsmWdt+0x12c>
	if(gsm_led_state && !SIM_WDT_READ()) gsm_led_state = 0;
 80082e0:	4852      	ldr	r0, [pc, #328]	@ (800842c <GsmWdt+0x160>)
 80082e2:	2102      	movs	r1, #2
 80082e4:	f002 fd30 	bl	800ad48 <HAL_GPIO_ReadPin>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	f000 8094 	beq.w	8008416 <GsmWdt+0x14a>
	if(Sim80x.Status.Power && gsm_wdt > 300) {		// 10 sekund WDT timeout
 80082ee:	4d50      	ldr	r5, [pc, #320]	@ (8008430 <GsmWdt+0x164>)
 80082f0:	f895 c330 	ldrb.w	ip, [r5, #816]	@ 0x330
 80082f4:	f01c 0304 	ands.w	r3, ip, #4
 80082f8:	d135      	bne.n	8008366 <GsmWdt+0x9a>
	} else if(!Sim80x.Status.Power) gsm_wdt = 0;
 80082fa:	8023      	strh	r3, [r4, #0]
    if(gsm_restart_time) gsm_restart_time--;
 80082fc:	4e4d      	ldr	r6, [pc, #308]	@ (8008434 <GsmWdt+0x168>)
 80082fe:	6833      	ldr	r3, [r6, #0]
 8008300:	b133      	cbz	r3, 8008310 <GsmWdt+0x44>
 8008302:	3b01      	subs	r3, #1
 8008304:	6033      	str	r3, [r6, #0]
    if(gsm_restart_time == 0) {						// cykliczny restart SIM868 co 24h
 8008306:	b11b      	cbz	r3, 8008310 <GsmWdt+0x44>
	if(Sim80x.Status.FatalError) {			// odpal restart GSM
 8008308:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 800830c:	d139      	bne.n	8008382 <GsmWdt+0xb6>
}
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	4b49      	ldr	r3, [pc, #292]	@ (8008438 <GsmWdt+0x16c>)
        uint8_t msg_in_process = 0;
 8008312:	2200      	movs	r2, #0
 8008314:	f103 000a 	add.w	r0, r3, #10
            if(Sim80x.Gsm.HaveNewMsg[i] > 0) msg_in_process = 1;
 8008318:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800831c:	2900      	cmp	r1, #0
 800831e:	bf18      	it	ne
 8008320:	2201      	movne	r2, #1
        for(uint8_t i=0 ;i<sizeof(Sim80x.Gsm.HaveNewMsg); ++i) {
 8008322:	4298      	cmp	r0, r3
 8008324:	d1f8      	bne.n	8008318 <GsmWdt+0x4c>
           Sim80x.Gsm.GsmVoiceStatus == GsmVoiceStatus_Idle &&      // Nie trwa polaczenie voice
 8008326:	f895 182b 	ldrb.w	r1, [r5, #2091]	@ 0x82b
 800832a:	f895 3b31 	ldrb.w	r3, [r5, #2865]	@ 0xb31
 800832e:	430b      	orrs	r3, r1
 8008330:	f895 165a 	ldrb.w	r1, [r5, #1626]	@ 0x65a
 8008334:	430b      	orrs	r3, r1
 8008336:	f895 17db 	ldrb.w	r1, [r5, #2011]	@ 0x7db
 800833a:	430b      	orrs	r3, r1
           !Sim80x.Status.Busy &&                                   // Nie jest obslugiwana komenda AT
 800833c:	f00c 0102 	and.w	r1, ip, #2
           Sim80x.Gsm.GsmVoiceStatus == GsmVoiceStatus_Idle &&      // Nie trwa polaczenie voice
 8008340:	430b      	orrs	r3, r1
 8008342:	431a      	orrs	r2, r3
 8008344:	b2d2      	uxtb	r2, r2
 8008346:	2a00      	cmp	r2, #0
 8008348:	d150      	bne.n	80083ec <GsmWdt+0x120>
            Sim80x.Status.FatalError = 1;                           // wymus pelny restart SIM800
 800834a:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
            gsm_restart_time = GSM_RESTART_INTERVAL;
 800834e:	4a3b      	ldr	r2, [pc, #236]	@ (800843c <GsmWdt+0x170>)
            printf("Sheduled GSM restart.\r\n");
 8008350:	483b      	ldr	r0, [pc, #236]	@ (8008440 <GsmWdt+0x174>)
            gsm_restart_time = GSM_RESTART_INTERVAL;
 8008352:	6032      	str	r2, [r6, #0]
            Sim80x.Status.FatalError = 1;                           // wymus pelny restart SIM800
 8008354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008358:	f885 3330 	strb.w	r3, [r5, #816]	@ 0x330
            printf("Sheduled GSM restart.\r\n");
 800835c:	f008 fa3a 	bl	80107d4 <puts>
	if(Sim80x.Status.FatalError) {			// odpal restart GSM
 8008360:	f895 c330 	ldrb.w	ip, [r5, #816]	@ 0x330
            printf("Sheduled GSM restart.\r\n");
 8008364:	e7d0      	b.n	8008308 <GsmWdt+0x3c>
	if(Sim80x.Status.Power && gsm_wdt > 300) {		// 10 sekund WDT timeout
 8008366:	8823      	ldrh	r3, [r4, #0]
 8008368:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800836c:	d9c6      	bls.n	80082fc <GsmWdt+0x30>
		printf("GSM module recovery!\r\n");
 800836e:	4835      	ldr	r0, [pc, #212]	@ (8008444 <GsmWdt+0x178>)
 8008370:	f008 fa30 	bl	80107d4 <puts>
		Sim80x.Status.FatalError = 1;
 8008374:	f895 c330 	ldrb.w	ip, [r5, #816]	@ 0x330
 8008378:	f04c 0c40 	orr.w	ip, ip, #64	@ 0x40
 800837c:	f885 c330 	strb.w	ip, [r5, #816]	@ 0x330
 8008380:	e7bc      	b.n	80082fc <GsmWdt+0x30>
		printf("Restarting...\r\n");
 8008382:	4831      	ldr	r0, [pc, #196]	@ (8008448 <GsmWdt+0x17c>)
 8008384:	f008 fa26 	bl	80107d4 <puts>
		HAL_GPIO_WritePin(_SIM80X_POWER_KEY_GPIO,_SIM80X_POWER_KEY_PIN,GPIO_PIN_SET);
 8008388:	2201      	movs	r2, #1
 800838a:	4611      	mov	r1, r2
 800838c:	4827      	ldr	r0, [pc, #156]	@ (800842c <GsmWdt+0x160>)
 800838e:	f002 fce1 	bl	800ad54 <HAL_GPIO_WritePin>
		osDelay(1200);
 8008392:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8008396:	f005 f9ef 	bl	800d778 <osDelay>
		printf("RST 2\r\n");
 800839a:	482c      	ldr	r0, [pc, #176]	@ (800844c <GsmWdt+0x180>)
 800839c:	f008 fa1a 	bl	80107d4 <puts>
		HAL_GPIO_WritePin(_SIM80X_POWER_KEY_GPIO,_SIM80X_POWER_KEY_PIN,GPIO_PIN_RESET);
 80083a0:	2200      	movs	r2, #0
 80083a2:	2101      	movs	r1, #1
 80083a4:	4821      	ldr	r0, [pc, #132]	@ (800842c <GsmWdt+0x160>)
 80083a6:	f002 fcd5 	bl	800ad54 <HAL_GPIO_WritePin>
		osDelay(4000);
 80083aa:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80083ae:	f005 f9e3 	bl	800d778 <osDelay>
		printf("GSM power UP.\r\n");
 80083b2:	4827      	ldr	r0, [pc, #156]	@ (8008450 <GsmWdt+0x184>)
 80083b4:	f008 fa0e 	bl	80107d4 <puts>
		memset(&Sim80x,0,sizeof(Sim80x));
 80083b8:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 80083bc:	2100      	movs	r1, #0
 80083be:	481c      	ldr	r0, [pc, #112]	@ (8008430 <GsmWdt+0x164>)
 80083c0:	f008 fb68 	bl	8010a94 <memset>
		Sim80x_SetPower(true);
 80083c4:	2001      	movs	r0, #1
 80083c6:	f7fa f9cd 	bl	8002764 <Sim80x_SetPower>
		osDelay(100);
 80083ca:	2064      	movs	r0, #100	@ 0x64
 80083cc:	f005 f9d4 	bl	800d778 <osDelay>
		gps_start = seconds;
 80083d0:	4a20      	ldr	r2, [pc, #128]	@ (8008454 <GsmWdt+0x188>)
 80083d2:	4921      	ldr	r1, [pc, #132]	@ (8008458 <GsmWdt+0x18c>)
		gps_interval = 30;					// odczyt GPS po 30s od restartu
 80083d4:	4b21      	ldr	r3, [pc, #132]	@ (800845c <GsmWdt+0x190>)
		gps_start = seconds;
 80083d6:	6810      	ldr	r0, [r2, #0]
 80083d8:	6008      	str	r0, [r1, #0]
		gps_interval = 30;					// odczyt GPS po 30s od restartu
 80083da:	221e      	movs	r2, #30
 80083dc:	601a      	str	r2, [r3, #0]
		GprsSendTaskFlag = 0;
 80083de:	4920      	ldr	r1, [pc, #128]	@ (8008460 <GsmWdt+0x194>)
		gpsTaskFlag = 0;
 80083e0:	4a20      	ldr	r2, [pc, #128]	@ (8008464 <GsmWdt+0x198>)
		GprsSendTaskFlag = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	700b      	strb	r3, [r1, #0]
		gpsTaskFlag = 0;
 80083e6:	7013      	strb	r3, [r2, #0]
        gsm_wdt = 0;
 80083e8:	8023      	strh	r3, [r4, #0]
}
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
        } else gsm_restart_time = 10*5;                             // nie wolno restartowac, kolejny test za 5s.
 80083ec:	2332      	movs	r3, #50	@ 0x32
	if(Sim80x.Status.FatalError) {			// odpal restart GSM
 80083ee:	f01c 0f40 	tst.w	ip, #64	@ 0x40
        } else gsm_restart_time = 10*5;                             // nie wolno restartowac, kolejny test za 5s.
 80083f2:	6033      	str	r3, [r6, #0]
	if(Sim80x.Status.FatalError) {			// odpal restart GSM
 80083f4:	d08b      	beq.n	800830e <GsmWdt+0x42>
 80083f6:	e7c4      	b.n	8008382 <GsmWdt+0xb6>
	if(!gsm_led_state && SIM_WDT_READ()) {
 80083f8:	480c      	ldr	r0, [pc, #48]	@ (800842c <GsmWdt+0x160>)
 80083fa:	2102      	movs	r1, #2
 80083fc:	f002 fca4 	bl	800ad48 <HAL_GPIO_ReadPin>
 8008400:	b158      	cbz	r0, 800841a <GsmWdt+0x14e>
		gsm_led_state = 1;
 8008402:	2301      	movs	r3, #1
	if(gsm_led_state && !SIM_WDT_READ()) gsm_led_state = 0;
 8008404:	4809      	ldr	r0, [pc, #36]	@ (800842c <GsmWdt+0x160>)
		gsm_led_state = 1;
 8008406:	702b      	strb	r3, [r5, #0]
	if(gsm_led_state && !SIM_WDT_READ()) gsm_led_state = 0;
 8008408:	2102      	movs	r1, #2
		gsm_wdt = 0;
 800840a:	8026      	strh	r6, [r4, #0]
	if(gsm_led_state && !SIM_WDT_READ()) gsm_led_state = 0;
 800840c:	f002 fc9c 	bl	800ad48 <HAL_GPIO_ReadPin>
 8008410:	2800      	cmp	r0, #0
 8008412:	f47f af6c 	bne.w	80082ee <GsmWdt+0x22>
 8008416:	7028      	strb	r0, [r5, #0]
 8008418:	e769      	b.n	80082ee <GsmWdt+0x22>
 800841a:	782b      	ldrb	r3, [r5, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	f43f af66 	beq.w	80082ee <GsmWdt+0x22>
 8008422:	e75d      	b.n	80082e0 <GsmWdt+0x14>
 8008424:	2000198a 	.word	0x2000198a
 8008428:	20001988 	.word	0x20001988
 800842c:	48000400 	.word	0x48000400
 8008430:	20000230 	.word	0x20000230
 8008434:	20000008 	.word	0x20000008
 8008438:	20000a0b 	.word	0x20000a0b
 800843c:	00278d00 	.word	0x00278d00
 8008440:	080161fc 	.word	0x080161fc
 8008444:	080161e4 	.word	0x080161e4
 8008448:	08016214 	.word	0x08016214
 800844c:	08016224 	.word	0x08016224
 8008450:	0801622c 	.word	0x0801622c
 8008454:	200019bc 	.word	0x200019bc
 8008458:	200019a4 	.word	0x200019a4
 800845c:	2000000c 	.word	0x2000000c
 8008460:	20001995 	.word	0x20001995
 8008464:	20001996 	.word	0x20001996

08008468 <fixTZ>:
{
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	b085      	sub	sp, #20
 800846e:	f10d 0c04 	add.w	ip, sp, #4
 8008472:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8008476:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8008478:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 800847c:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8008480:	f89d e008 	ldrb.w	lr, [sp, #8]
 8008484:	f89d 4009 	ldrb.w	r4, [sp, #9]
 8008488:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800848c:	f99d 900c 	ldrsb.w	r9, [sp, #12]
 8008490:	4606      	mov	r6, r0
	for(int i=0; i<abs(zone); ++i) {
 8008492:	ea85 70e5 	eor.w	r0, r5, r5, asr #31
 8008496:	eba0 70e5 	sub.w	r0, r0, r5, asr #31
 800849a:	b34d      	cbz	r5, 80084f0 <fixTZ+0x88>
 800849c:	2100      	movs	r1, #0
		int Min = (int)tim.Min + ((zone < 0) ? -15:15);
 800849e:	2d00      	cmp	r5, #0
 80084a0:	db3d      	blt.n	800851e <fixTZ+0xb6>
 80084a2:	f103 020f 	add.w	r2, r3, #15
		if(zone > 0 && Min > 59) {
 80084a6:	2a3b      	cmp	r2, #59	@ 0x3b
 80084a8:	dd1e      	ble.n	80084e8 <fixTZ+0x80>
			if(++tim.Hour > 23)	{
 80084aa:	3401      	adds	r4, #1
 80084ac:	b2e4      	uxtb	r4, r4
 80084ae:	2c17      	cmp	r4, #23
			Min -= 60;
 80084b0:	f1a3 022d 	sub.w	r2, r3, #45	@ 0x2d
			if(++tim.Hour > 23)	{
 80084b4:	d918      	bls.n	80084e8 <fixTZ+0x80>
				if(++tim.Day > monthLength) {												// zmiana miesiaca ?
 80084b6:	f10e 0e01 	add.w	lr, lr, #1
				if (tim.Month==2) { 		// luty
 80084ba:	2f02      	cmp	r7, #2
				if(++tim.Day > monthLength) {												// zmiana miesiaca ?
 80084bc:	fa5f fe8e 	uxtb.w	lr, lr
				if (tim.Month==2) { 		// luty
 80084c0:	d041      	beq.n	8008546 <fixTZ+0xde>
				} else { monthLength = monthDays[tim.Month-1]; }							// inny miesiac
 80084c2:	4b5f      	ldr	r3, [pc, #380]	@ (8008640 <fixTZ+0x1d8>)
 80084c4:	443b      	add	r3, r7
				if(++tim.Day > monthLength) {												// zmiana miesiaca ?
 80084c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80084ca:	4573      	cmp	r3, lr
 80084cc:	d234      	bcs.n	8008538 <fixTZ+0xd0>
					if(++tim.Month > 12) {tim.Month = 1; tim.Year++;}
 80084ce:	3701      	adds	r7, #1
 80084d0:	b2ff      	uxtb	r7, r7
 80084d2:	2f0c      	cmp	r7, #12
 80084d4:	f240 80a2 	bls.w	800861c <fixTZ+0x1b4>
 80084d8:	f108 0801 	add.w	r8, r8, #1
					tim.Day = 1;
 80084dc:	f04f 0e01 	mov.w	lr, #1
					if(++tim.Month > 12) {tim.Month = 1; tim.Year++;}
 80084e0:	fa1f f888 	uxth.w	r8, r8
				tim.Hour = 0;
 80084e4:	2400      	movs	r4, #0
					if(++tim.Month > 12) {tim.Month = 1; tim.Year++;}
 80084e6:	4677      	mov	r7, lr
	for(int i=0; i<abs(zone); ++i) {
 80084e8:	3101      	adds	r1, #1
 80084ea:	4281      	cmp	r1, r0
		tim.Min = Min;
 80084ec:	b2d3      	uxtb	r3, r2
	for(int i=0; i<abs(zone); ++i) {
 80084ee:	d1d6      	bne.n	800849e <fixTZ+0x36>
	tim.Zone += zone;
 80084f0:	eb09 0205 	add.w	r2, r9, r5
	return tim;
 80084f4:	f88d 300a 	strb.w	r3, [sp, #10]
 80084f8:	f8ad 8004 	strh.w	r8, [sp, #4]
 80084fc:	f88d 7006 	strb.w	r7, [sp, #6]
 8008500:	f88d e008 	strb.w	lr, [sp, #8]
 8008504:	f88d 4009 	strb.w	r4, [sp, #9]
 8008508:	f88d 200c 	strb.w	r2, [sp, #12]
 800850c:	4663      	mov	r3, ip
 800850e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008510:	6030      	str	r0, [r6, #0]
}
 8008512:	4630      	mov	r0, r6
	return tim;
 8008514:	6071      	str	r1, [r6, #4]
 8008516:	60b2      	str	r2, [r6, #8]
}
 8008518:	b005      	add	sp, #20
 800851a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if(zone < 0 && Min < 0) {
 800851e:	f1b3 020f 	subs.w	r2, r3, #15
 8008522:	d5e1      	bpl.n	80084e8 <fixTZ+0x80>
			Min += 60;
 8008524:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
			if(--Hour < 0) {
 8008528:	1e63      	subs	r3, r4, #1
 800852a:	b1ec      	cbz	r4, 8008568 <fixTZ+0x100>
	for(int i=0; i<abs(zone); ++i) {
 800852c:	3101      	adds	r1, #1
 800852e:	4281      	cmp	r1, r0
			tim.Hour = Hour;
 8008530:	b2dc      	uxtb	r4, r3
		tim.Min = Min;
 8008532:	b2d3      	uxtb	r3, r2
	for(int i=0; i<abs(zone); ++i) {
 8008534:	d1b3      	bne.n	800849e <fixTZ+0x36>
 8008536:	e7db      	b.n	80084f0 <fixTZ+0x88>
 8008538:	3101      	adds	r1, #1
 800853a:	4281      	cmp	r1, r0
				tim.Hour = 0;
 800853c:	f04f 0400 	mov.w	r4, #0
		tim.Min = Min;
 8008540:	b2d3      	uxtb	r3, r2
	for(int i=0; i<abs(zone); ++i) {
 8008542:	d1ac      	bne.n	800849e <fixTZ+0x36>
 8008544:	e7d4      	b.n	80084f0 <fixTZ+0x88>
				  if (LEAP_YEAR(tim.Year)) { monthLength=29; } else { monthLength=28; }		// luty ma 28 czy 29 ?
 8008546:	f018 0403 	ands.w	r4, r8, #3
 800854a:	d024      	beq.n	8008596 <fixTZ+0x12e>
				if(++tim.Day > monthLength) {												// zmiana miesiaca ?
 800854c:	f1be 0f1c 	cmp.w	lr, #28
				tim.Hour = 0;
 8008550:	f04f 0400 	mov.w	r4, #0
				if(++tim.Day > monthLength) {												// zmiana miesiaca ?
 8008554:	d9c8      	bls.n	80084e8 <fixTZ+0x80>
	for(int i=0; i<abs(zone); ++i) {
 8008556:	3101      	adds	r1, #1
 8008558:	4281      	cmp	r1, r0
					tim.Day = 1;
 800855a:	f04f 0e01 	mov.w	lr, #1
					if(++tim.Month > 12) {tim.Month = 1; tim.Year++;}
 800855e:	f04f 0703 	mov.w	r7, #3
		tim.Min = Min;
 8008562:	b2d3      	uxtb	r3, r2
	for(int i=0; i<abs(zone); ++i) {
 8008564:	d19b      	bne.n	800849e <fixTZ+0x36>
 8008566:	e7c3      	b.n	80084f0 <fixTZ+0x88>
				if(--tim.Day < 1) {
 8008568:	f10e 3eff 	add.w	lr, lr, #4294967295
 800856c:	f01e 0eff 	ands.w	lr, lr, #255	@ 0xff
 8008570:	d10a      	bne.n	8008588 <fixTZ+0x120>
					if(--tim.Month < 1)  {tim.Month = 12; tim.Year--;}							// oblucz nowy miesiac i rok
 8008572:	3f01      	subs	r7, #1
 8008574:	f017 07ff 	ands.w	r7, r7, #255	@ 0xff
 8008578:	d12e      	bne.n	80085d8 <fixTZ+0x170>
 800857a:	f108 38ff 	add.w	r8, r8, #4294967295
 800857e:	fa1f f888 	uxth.w	r8, r8
 8008582:	f04f 0e1f 	mov.w	lr, #31
 8008586:	270c      	movs	r7, #12
	for(int i=0; i<abs(zone); ++i) {
 8008588:	3101      	adds	r1, #1
 800858a:	4281      	cmp	r1, r0
 800858c:	f04f 0417 	mov.w	r4, #23
		tim.Min = Min;
 8008590:	b2d3      	uxtb	r3, r2
	for(int i=0; i<abs(zone); ++i) {
 8008592:	d184      	bne.n	800849e <fixTZ+0x36>
 8008594:	e7ac      	b.n	80084f0 <fixTZ+0x88>
 8008596:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 800859a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800859e:	eba3 2383 	sub.w	r3, r3, r3, lsl #10
 80085a2:	f3c3 0b8d 	ubfx	fp, r3, #2, #14
 80085a6:	ea4b 3b83 	orr.w	fp, fp, r3, lsl #14
				  if (LEAP_YEAR(tim.Year)) { monthLength=29; } else { monthLength=28; }		// luty ma 28 czy 29 ?
 80085aa:	fa1f fb8b 	uxth.w	fp, fp
 80085ae:	f5bb 7f24 	cmp.w	fp, #656	@ 0x290
 80085b2:	fa1f fa83 	uxth.w	sl, r3
 80085b6:	d209      	bcs.n	80085cc <fixTZ+0x164>
 80085b8:	031b      	lsls	r3, r3, #12
 80085ba:	ea43 131a 	orr.w	r3, r3, sl, lsr #4
 80085be:	b29b      	uxth	r3, r3
 80085c0:	2ba3      	cmp	r3, #163	@ 0xa3
 80085c2:	d903      	bls.n	80085cc <fixTZ+0x164>
				if(++tim.Day > monthLength) {												// zmiana miesiaca ?
 80085c4:	f1be 0f1c 	cmp.w	lr, #28
 80085c8:	d98e      	bls.n	80084e8 <fixTZ+0x80>
 80085ca:	e7c4      	b.n	8008556 <fixTZ+0xee>
 80085cc:	f1be 0f1d 	cmp.w	lr, #29
				tim.Hour = 0;
 80085d0:	f04f 0400 	mov.w	r4, #0
				if(++tim.Day > monthLength) {												// zmiana miesiaca ?
 80085d4:	d988      	bls.n	80084e8 <fixTZ+0x80>
 80085d6:	e7be      	b.n	8008556 <fixTZ+0xee>
					if (tim.Month==2) { 														// jak wyszedl luty
 80085d8:	2f02      	cmp	r7, #2
 80085da:	d127      	bne.n	800862c <fixTZ+0x1c4>
						if (LEAP_YEAR(tim.Year)) { monthLength=29; } else { monthLength=28; }	// luty ma 28 czy 29 ?
 80085dc:	f018 0f03 	tst.w	r8, #3
 80085e0:	d120      	bne.n	8008624 <fixTZ+0x1bc>
 80085e2:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 80085e6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80085ea:	eba3 2383 	sub.w	r3, r3, r3, lsl #10
 80085ee:	f3c3 048d 	ubfx	r4, r3, #2, #14
 80085f2:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
 80085f6:	b2a4      	uxth	r4, r4
 80085f8:	f5b4 7f24 	cmp.w	r4, #656	@ 0x290
 80085fc:	fa1f fe83 	uxth.w	lr, r3
 8008600:	d219      	bcs.n	8008636 <fixTZ+0x1ce>
 8008602:	031b      	lsls	r3, r3, #12
 8008604:	ea43 131e 	orr.w	r3, r3, lr, lsr #4
 8008608:	b29b      	uxth	r3, r3
 800860a:	2ba4      	cmp	r3, #164	@ 0xa4
 800860c:	f04f 0417 	mov.w	r4, #23
 8008610:	bf34      	ite	cc
 8008612:	f04f 0e1d 	movcc.w	lr, #29
 8008616:	f04f 0e1c 	movcs.w	lr, #28
 800861a:	e765      	b.n	80084e8 <fixTZ+0x80>
				tim.Hour = 0;
 800861c:	2400      	movs	r4, #0
					tim.Day = 1;
 800861e:	f04f 0e01 	mov.w	lr, #1
 8008622:	e761      	b.n	80084e8 <fixTZ+0x80>
 8008624:	2417      	movs	r4, #23
						if (LEAP_YEAR(tim.Year)) { monthLength=29; } else { monthLength=28; }	// luty ma 28 czy 29 ?
 8008626:	f04f 0e1c 	mov.w	lr, #28
 800862a:	e75d      	b.n	80084e8 <fixTZ+0x80>
					} else { monthLength = monthDays[tim.Month-1]; }							// inny miesiac
 800862c:	4b04      	ldr	r3, [pc, #16]	@ (8008640 <fixTZ+0x1d8>)
 800862e:	443b      	add	r3, r7
 8008630:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 8008634:	e7a8      	b.n	8008588 <fixTZ+0x120>
 8008636:	2417      	movs	r4, #23
						if (LEAP_YEAR(tim.Year)) { monthLength=29; } else { monthLength=28; }	// luty ma 28 czy 29 ?
 8008638:	f04f 0e1d 	mov.w	lr, #29
 800863c:	e754      	b.n	80084e8 <fixTZ+0x80>
 800863e:	bf00      	nop
 8008640:	08016534 	.word	0x08016534

08008644 <GpsReadTask>:
{
 8008644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printf("GPS start.\r\n");
 8008648:	484c      	ldr	r0, [pc, #304]	@ (800877c <GpsReadTask+0x138>)
 800864a:	4c4d      	ldr	r4, [pc, #308]	@ (8008780 <GpsReadTask+0x13c>)
			printf("GSM Time update %s.\r\n", time_updated ? "OK":"ERROR");
 800864c:	f8df 9158 	ldr.w	r9, [pc, #344]	@ 80087a8 <GpsReadTask+0x164>
{
 8008650:	b089      	sub	sp, #36	@ 0x24
	printf("GPS start.\r\n");
 8008652:	f008 f8bf 	bl	80107d4 <puts>
	GPS_SetPower(1);
 8008656:	2001      	movs	r0, #1
 8008658:	f7f9 fb52 	bl	8001d00 <GPS_SetPower>
 800865c:	25b5      	movs	r5, #181	@ 0xb5
	uint8_t time_updated = 0;
 800865e:	2600      	movs	r6, #0
			Sim80x.Gsm.Time = fixTZ(Sim80x.GPS.Time, Sim80x.Gsm.Time.Zone);
 8008660:	f604 3834 	addw	r8, r4, #2868	@ 0xb34
 8008664:	f204 674e 	addw	r7, r4, #1614	@ 0x64e
		osDelay(1000);
 8008668:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800866c:	f005 f884 	bl	800d778 <osDelay>
		if(Sim80x.GPS.Time.Year > 2022 												// prawidlowy czas
 8008670:	f8b4 2b34 	ldrh.w	r2, [r4, #2868]	@ 0xb34
 8008674:	f240 73e6 	movw	r3, #2022	@ 0x7e6
 8008678:	429a      	cmp	r2, r3
 800867a:	d938      	bls.n	80086ee <GpsReadTask+0xaa>
		   && Sim80x.GPS.Fix														// i jest fix
 800867c:	f894 3b32 	ldrb.w	r3, [r4, #2866]	@ 0xb32
		   && !time_updated 														// i jeszcze nie uaktualniony
 8008680:	2e00      	cmp	r6, #0
 8008682:	d136      	bne.n	80086f2 <GpsReadTask+0xae>
		   && Sim80x.GPS.Fix														// i jest fix
 8008684:	2b00      	cmp	r3, #0
 8008686:	d077      	beq.n	8008778 <GpsReadTask+0x134>
		   && Sim80x.GPRS.Connection != GPRSConnection_ConnectOK) {					// i nie polaczony z serwerem
 8008688:	f894 382b 	ldrb.w	r3, [r4, #2091]	@ 0x82b
 800868c:	2b03      	cmp	r3, #3
 800868e:	d073      	beq.n	8008778 <GpsReadTask+0x134>
			if(Sim80x.Gsm.Time.Zone == 0) Sim80x.Gsm.Time.Zone = 8;					// tu male oszustwo ze strefą czasową
 8008690:	f994 3656 	ldrsb.w	r3, [r4, #1622]	@ 0x656
 8008694:	2b00      	cmp	r3, #0
 8008696:	bf08      	it	eq
 8008698:	2308      	moveq	r3, #8
			Sim80x.Gsm.Time = fixTZ(Sim80x.GPS.Time, Sim80x.Gsm.Time.Zone);
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80086a0:	a804      	add	r0, sp, #16
 80086a2:	f7ff fee1 	bl	8008468 <fixTZ>
 80086a6:	9b04      	ldr	r3, [sp, #16]
 80086a8:	603b      	str	r3, [r7, #0]
 80086aa:	9a05      	ldr	r2, [sp, #20]
 80086ac:	9b06      	ldr	r3, [sp, #24]
 80086ae:	60bb      	str	r3, [r7, #8]
 80086b0:	607a      	str	r2, [r7, #4]
			time_updated = Sim80x_SetTime();
 80086b2:	f7fa f8f5 	bl	80028a0 <Sim80x_SetTime>
			printf("GSM Time update %s.\r\n", time_updated ? "OK":"ERROR");
 80086b6:	1e06      	subs	r6, r0, #0
 80086b8:	4932      	ldr	r1, [pc, #200]	@ (8008784 <GpsReadTask+0x140>)
 80086ba:	4833      	ldr	r0, [pc, #204]	@ (8008788 <GpsReadTask+0x144>)
 80086bc:	bf18      	it	ne
 80086be:	4649      	movne	r1, r9
 80086c0:	f008 f820 	bl	8010704 <iprintf>
			printf("Current time is: %04u-%02u-%02u %02u:%02u:%02u, TZ:%d\r\n",
 80086c4:	f994 2656 	ldrsb.w	r2, [r4, #1622]	@ 0x656
 80086c8:	f894 3655 	ldrb.w	r3, [r4, #1621]	@ 0x655
 80086cc:	482f      	ldr	r0, [pc, #188]	@ (800878c <GpsReadTask+0x148>)
 80086ce:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80086d2:	f894 2654 	ldrb.w	r2, [r4, #1620]	@ 0x654
 80086d6:	f894 3653 	ldrb.w	r3, [r4, #1619]	@ 0x653
 80086da:	e9cd 3200 	strd	r3, r2, [sp]
 80086de:	f894 3652 	ldrb.w	r3, [r4, #1618]	@ 0x652
 80086e2:	f894 2650 	ldrb.w	r2, [r4, #1616]	@ 0x650
 80086e6:	f8b4 164e 	ldrh.w	r1, [r4, #1614]	@ 0x64e
 80086ea:	f008 f80b 	bl	8010704 <iprintf>
		if(time_updated && Sim80x.GPS.Fix && Sim80x.GPS.SatInUse > 3) break;
 80086ee:	2e00      	cmp	r6, #0
 80086f0:	d042      	beq.n	8008778 <GpsReadTask+0x134>
 80086f2:	f894 3b32 	ldrb.w	r3, [r4, #2866]	@ 0xb32
 80086f6:	b11b      	cbz	r3, 8008700 <GpsReadTask+0xbc>
 80086f8:	f894 3b4c 	ldrb.w	r3, [r4, #2892]	@ 0xb4c
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d828      	bhi.n	8008752 <GpsReadTask+0x10e>
 8008700:	2601      	movs	r6, #1
		if(++GPS_tout > 180 || Sim80x.GPS.RunStatus == 0) {		// 3 minuty timeout
 8008702:	3d01      	subs	r5, #1
 8008704:	b2ad      	uxth	r5, r5
 8008706:	b11d      	cbz	r5, 8008710 <GpsReadTask+0xcc>
 8008708:	f894 3b31 	ldrb.w	r3, [r4, #2865]	@ 0xb31
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1ab      	bne.n	8008668 <GpsReadTask+0x24>
			printf("GPS signal not available.");
 8008710:	481f      	ldr	r0, [pc, #124]	@ (8008790 <GpsReadTask+0x14c>)
 8008712:	f007 fff7 	bl	8010704 <iprintf>
			goto gpstaskend;
 8008716:	e003      	b.n	8008720 <GpsReadTask+0xdc>
	while(Sim80x.GPRS.Connection == GPRSConnection_ConnectOK) osDelay(1000);	// nie wysylaj nic do GPS jak polaczony
 8008718:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800871c:	f005 f82c 	bl	800d778 <osDelay>
 8008720:	f894 382b 	ldrb.w	r3, [r4, #2091]	@ 0x82b
 8008724:	2b03      	cmp	r3, #3
 8008726:	d0f7      	beq.n	8008718 <GpsReadTask+0xd4>
	GPS_SetPower(0);
 8008728:	2000      	movs	r0, #0
 800872a:	f7f9 fae9 	bl	8001d00 <GPS_SetPower>
	printf("GPS stopped.\r\n");
 800872e:	4819      	ldr	r0, [pc, #100]	@ (8008794 <GpsReadTask+0x150>)
 8008730:	f008 f850 	bl	80107d4 <puts>
	osDelay(100);
 8008734:	2064      	movs	r0, #100	@ 0x64
 8008736:	f005 f81f 	bl	800d778 <osDelay>
	gpsTaskFlag = 0;
 800873a:	4b17      	ldr	r3, [pc, #92]	@ (8008798 <GpsReadTask+0x154>)
 800873c:	2000      	movs	r0, #0
 800873e:	7018      	strb	r0, [r3, #0]
}
 8008740:	b009      	add	sp, #36	@ 0x24
 8008742:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	vTaskDelete(NULL);		// usun task z pamieci jako juz zbedny
 8008746:	f005 b999 	b.w	800da7c <vTaskDelete>
	while(Sim80x.GPRS.Connection == GPRSConnection_ConnectOK) osDelay(1000);	// nie wysylaj nic do GPS jak polaczony
 800874a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800874e:	f005 f813 	bl	800d778 <osDelay>
 8008752:	f894 382b 	ldrb.w	r3, [r4, #2091]	@ 0x82b
 8008756:	2b03      	cmp	r3, #3
 8008758:	d0f7      	beq.n	800874a <GpsReadTask+0x106>
	Sim80x_SendAtCommand("AT+CGNSCMD=0,\"$PMTK285,1,10*0D\"\r\n", 500, 1,"\r\nOK\r\n");		// 10ms BLUE blink
 800875a:	4b10      	ldr	r3, [pc, #64]	@ (800879c <GpsReadTask+0x158>)
 800875c:	4810      	ldr	r0, [pc, #64]	@ (80087a0 <GpsReadTask+0x15c>)
 800875e:	2201      	movs	r2, #1
 8008760:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8008764:	f7f9 fd9e 	bl	80022a4 <Sim80x_SendAtCommand>
	printf("FIX ok, position readed.\r\n");
 8008768:	480e      	ldr	r0, [pc, #56]	@ (80087a4 <GpsReadTask+0x160>)
 800876a:	f008 f833 	bl	80107d4 <puts>
	osDelay(15000);			// jeszcze przez 15 sekund czytaj GPS
 800876e:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8008772:	f005 f801 	bl	800d778 <osDelay>
 8008776:	e7d3      	b.n	8008720 <GpsReadTask+0xdc>
			printf("GSM Time update %s.\r\n", time_updated ? "OK":"ERROR");
 8008778:	2600      	movs	r6, #0
 800877a:	e7c2      	b.n	8008702 <GpsReadTask+0xbe>
 800877c:	0801623c 	.word	0x0801623c
 8008780:	20000230 	.word	0x20000230
 8008784:	080151bc 	.word	0x080151bc
 8008788:	08016248 	.word	0x08016248
 800878c:	08016260 	.word	0x08016260
 8008790:	080162d8 	.word	0x080162d8
 8008794:	080162f4 	.word	0x080162f4
 8008798:	20001996 	.word	0x20001996
 800879c:	08014908 	.word	0x08014908
 80087a0:	08016298 	.word	0x08016298
 80087a4:	080162bc 	.word	0x080162bc
 80087a8:	080151b8 	.word	0x080151b8

080087ac <StartReadGps>:
{
 80087ac:	b570      	push	{r4, r5, r6, lr}
	if(gpsTaskFlag == 0 && Sim80x.GPRS.Connection != GPRSConnection_ConnectOK) {
 80087ae:	4d12      	ldr	r5, [pc, #72]	@ (80087f8 <StartReadGps+0x4c>)
 80087b0:	782c      	ldrb	r4, [r5, #0]
{
 80087b2:	b086      	sub	sp, #24
	if(gpsTaskFlag == 0 && Sim80x.GPRS.Connection != GPRSConnection_ConnectOK) {
 80087b4:	b93c      	cbnz	r4, 80087c6 <StartReadGps+0x1a>
 80087b6:	4b11      	ldr	r3, [pc, #68]	@ (80087fc <StartReadGps+0x50>)
 80087b8:	f893 382b 	ldrb.w	r3, [r3, #2091]	@ 0x82b
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d106      	bne.n	80087ce <StartReadGps+0x22>
}
 80087c0:	4620      	mov	r0, r4
 80087c2:	b006      	add	sp, #24
 80087c4:	bd70      	pop	{r4, r5, r6, pc}
	return false;				// nie uruchomiono tasku bo juz działa
 80087c6:	2400      	movs	r4, #0
}
 80087c8:	4620      	mov	r0, r4
 80087ca:	b006      	add	sp, #24
 80087cc:	bd70      	pop	{r4, r5, r6, pc}
		osThreadDef(GPSTask, GpsReadTask, osPriorityNormal, 0, 256);
 80087ce:	4e0c      	ldr	r6, [pc, #48]	@ (8008800 <StartReadGps+0x54>)
 80087d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80087d2:	f10d 0c04 	add.w	ip, sp, #4
 80087d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80087da:	6833      	ldr	r3, [r6, #0]
 80087dc:	f8cc 3000 	str.w	r3, [ip]
		gpsTaskHandle = osThreadCreate(osThread(GPSTask), NULL);
 80087e0:	4621      	mov	r1, r4
 80087e2:	a801      	add	r0, sp, #4
 80087e4:	f004 ffac 	bl	800d740 <osThreadCreate>
 80087e8:	4b06      	ldr	r3, [pc, #24]	@ (8008804 <StartReadGps+0x58>)
		gpsTaskFlag = 1;
 80087ea:	2401      	movs	r4, #1
		gpsTaskHandle = osThreadCreate(osThread(GPSTask), NULL);
 80087ec:	6018      	str	r0, [r3, #0]
}
 80087ee:	4620      	mov	r0, r4
		gpsTaskFlag = 1;
 80087f0:	702c      	strb	r4, [r5, #0]
}
 80087f2:	b006      	add	sp, #24
 80087f4:	bd70      	pop	{r4, r5, r6, pc}
 80087f6:	bf00      	nop
 80087f8:	20001996 	.word	0x20001996
 80087fc:	20000230 	.word	0x20000230
 8008800:	08013c34 	.word	0x08013c34
 8008804:	2000199c 	.word	0x2000199c

08008808 <SysTimeSync>:
}

// ******************************************************************************************************

void SysTimeSync()
{
 8008808:	b508      	push	{r3, lr}
    // synchronizacja soft rtc
    Sim80x_GetTime();
 800880a:	f7fa f827 	bl	800285c <Sim80x_GetTime>
    if(Sim80x.Gsm.Time.Year > 2022) {
 800880e:	4a0f      	ldr	r2, [pc, #60]	@ (800884c <SysTimeSync+0x44>)
 8008810:	f8b2 164e 	ldrh.w	r1, [r2, #1614]	@ 0x64e
 8008814:	f240 73e6 	movw	r3, #2022	@ 0x7e6
 8008818:	4299      	cmp	r1, r3
 800881a:	d915      	bls.n	8008848 <SysTimeSync+0x40>
		int gsmsec = Sim80x.Gsm.Time.Hour * 3600 + Sim80x.Gsm.Time.Min * 60 + Sim80x.Gsm.Time.Sec;
 800881c:	f892 3654 	ldrb.w	r3, [r2, #1620]	@ 0x654
 8008820:	f892 c653 	ldrb.w	ip, [r2, #1619]	@ 0x653
		if(seconds != gsmsec) {
 8008824:	490a      	ldr	r1, [pc, #40]	@ (8008850 <SysTimeSync+0x48>)
		int gsmsec = Sim80x.Gsm.Time.Hour * 3600 + Sim80x.Gsm.Time.Min * 60 + Sim80x.Gsm.Time.Sec;
 8008826:	f892 0655 	ldrb.w	r0, [r2, #1621]	@ 0x655
 800882a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800882e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	fb02 330c 	mla	r3, r2, ip, r3
		if(seconds != gsmsec) {
 8008838:	680a      	ldr	r2, [r1, #0]
		int gsmsec = Sim80x.Gsm.Time.Hour * 3600 + Sim80x.Gsm.Time.Min * 60 + Sim80x.Gsm.Time.Sec;
 800883a:	4403      	add	r3, r0
		if(seconds != gsmsec) {
 800883c:	4293      	cmp	r3, r2
 800883e:	d003      	beq.n	8008848 <SysTimeSync+0x40>
		  seconds = gsmsec;
		  timesync = 1;
 8008840:	4a04      	ldr	r2, [pc, #16]	@ (8008854 <SysTimeSync+0x4c>)
		  seconds = gsmsec;
 8008842:	600b      	str	r3, [r1, #0]
		  timesync = 1;
 8008844:	2001      	movs	r0, #1
 8008846:	7010      	strb	r0, [r2, #0]
		}
    }
}
 8008848:	bd08      	pop	{r3, pc}
 800884a:	bf00      	nop
 800884c:	20000230 	.word	0x20000230
 8008850:	200019bc 	.word	0x200019bc
 8008854:	200019ba 	.word	0x200019ba

08008858 <CalculateNextMeasTime>:

void CalculateNextMeasTime()
{
 8008858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	printf("Current sys time: %02d:%02d:%02d\r\n", seconds/3600, (seconds%3600)/60, seconds%60);
 800885c:	4f4e      	ldr	r7, [pc, #312]	@ (8008998 <CalculateNextMeasTime+0x140>)
 800885e:	4e4f      	ldr	r6, [pc, #316]	@ (800899c <CalculateNextMeasTime+0x144>)
 8008860:	683d      	ldr	r5, [r7, #0]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	f8df 914c 	ldr.w	r9, [pc, #332]	@ 80089b4 <CalculateNextMeasTime+0x15c>
 8008868:	683b      	ldr	r3, [r7, #0]
	printf("Send interval: %d min, Meas count: %d, Meas Interval: 5s\r\n", config.tim_interval, config.measures);
 800886a:	f8df 8158 	ldr.w	r8, [pc, #344]	@ 80089c4 <CalculateNextMeasTime+0x16c>
	printf("Current sys time: %02d:%02d:%02d\r\n", seconds/3600, (seconds%3600)/60, seconds%60);
 800886e:	fb86 4102 	smull	r4, r1, r6, r2
 8008872:	4411      	add	r1, r2
 8008874:	17d0      	asrs	r0, r2, #31
 8008876:	ebc0 20e1 	rsb	r0, r0, r1, asr #11
 800887a:	fb89 4103 	smull	r4, r1, r9, r3
 800887e:	f44f 6461 	mov.w	r4, #3600	@ 0xe10
 8008882:	fb04 2210 	mls	r2, r4, r0, r2
 8008886:	4419      	add	r1, r3
 8008888:	17d8      	asrs	r0, r3, #31
 800888a:	ebc0 1061 	rsb	r0, r0, r1, asr #5
 800888e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8008892:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
 8008896:	fb89 0102 	smull	r0, r1, r9, r2
 800889a:	4411      	add	r1, r2
 800889c:	17d2      	asrs	r2, r2, #31
 800889e:	ebc2 1261 	rsb	r2, r2, r1, asr #5
 80088a2:	fb86 1005 	smull	r1, r0, r6, r5
 80088a6:	4428      	add	r0, r5
 80088a8:	17e9      	asrs	r1, r5, #31
 80088aa:	ebc1 21e0 	rsb	r1, r1, r0, asr #11
 80088ae:	483c      	ldr	r0, [pc, #240]	@ (80089a0 <CalculateNextMeasTime+0x148>)
 80088b0:	f007 ff28 	bl	8010704 <iprintf>
	printf("Send interval: %d min, Meas count: %d, Meas Interval: 5s\r\n", config.tim_interval, config.measures);
 80088b4:	f898 203b 	ldrb.w	r2, [r8, #59]	@ 0x3b
 80088b8:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 80088bc:	4839      	ldr	r0, [pc, #228]	@ (80089a4 <CalculateNextMeasTime+0x14c>)
 80088be:	f007 ff21 	bl	8010704 <iprintf>
	int nextsend = ((seconds + 60*config.tim_interval + 60)/900) * 900;	// aktualny + interval zaokraglony do 15min
 80088c2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80088c6:	683d      	ldr	r5, [r7, #0]
	printf("Next send at: %02d:%02d:%02d\r\n", nextsend/3600, (nextsend%3600)/60, nextsend%60);
 80088c8:	4837      	ldr	r0, [pc, #220]	@ (80089a8 <CalculateNextMeasTime+0x150>)
	int nextsend = ((seconds + 60*config.tim_interval + 60)/900) * 900;	// aktualny + interval zaokraglony do 15min
 80088ca:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80088ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80088d2:	353c      	adds	r5, #60	@ 0x3c
 80088d4:	fb86 2305 	smull	r2, r3, r6, r5
 80088d8:	442b      	add	r3, r5
 80088da:	17ed      	asrs	r5, r5, #31
 80088dc:	ebc5 2563 	rsb	r5, r5, r3, asr #9
 80088e0:	f44f 7361 	mov.w	r3, #900	@ 0x384
 80088e4:	fb03 f505 	mul.w	r5, r3, r5
	printf("Next send at: %02d:%02d:%02d\r\n", nextsend/3600, (nextsend%3600)/60, nextsend%60);
 80088e8:	fb86 3605 	smull	r3, r6, r6, r5
 80088ec:	442e      	add	r6, r5
 80088ee:	17e9      	asrs	r1, r5, #31
 80088f0:	ebc1 21e6 	rsb	r1, r1, r6, asr #11
 80088f4:	fb04 5411 	mls	r4, r4, r1, r5
 80088f8:	fb89 3204 	smull	r3, r2, r9, r4
 80088fc:	4422      	add	r2, r4
 80088fe:	17e4      	asrs	r4, r4, #31
 8008900:	ebc4 1262 	rsb	r2, r4, r2, asr #5
 8008904:	2300      	movs	r3, #0
 8008906:	f007 fefd 	bl	8010704 <iprintf>
	nextsend -= config.measures * 5;						// odejmij czas potrzebny na pomiary
 800890a:	f898 403b 	ldrb.w	r4, [r8, #59]	@ 0x3b
 800890e:	ebc4 7384 	rsb	r3, r4, r4, lsl #30
 8008912:	ebc4 0483 	rsb	r4, r4, r3, lsl #2
	if(nextsend < 0 ) nextsend += SEC_PER_DAY;				// jak < 0 to start przed polnoca
 8008916:	1964      	adds	r4, r4, r5
	if(nextsend <= seconds) {								// za malo czasu od teraz do startu
 8008918:	683b      	ldr	r3, [r7, #0]
	if(nextsend < 0 ) nextsend += SEC_PER_DAY;				// jak < 0 to start przed polnoca
 800891a:	d42d      	bmi.n	8008978 <CalculateNextMeasTime+0x120>
	if(nextsend <= seconds) {								// za malo czasu od teraz do startu
 800891c:	42a3      	cmp	r3, r4
 800891e:	da31      	bge.n	8008984 <CalculateNextMeasTime+0x12c>
		nextsend += 60*config.tim_interval;					// dodaj jeden interwal
		printf("Advance by one send interval\r\n");
	}
	if(nextsend >= SEC_PER_DAY) {
 8008920:	4b22      	ldr	r3, [pc, #136]	@ (80089ac <CalculateNextMeasTime+0x154>)
 8008922:	429c      	cmp	r4, r3
 8008924:	dd06      	ble.n	8008934 <CalculateNextMeasTime+0xdc>
		nextsend -= SEC_PER_DAY;							// wysylka bedzie w kolejnym dniu
		dayleap = true;										// blokada do czasu zmiany dnia
 8008926:	4b22      	ldr	r3, [pc, #136]	@ (80089b0 <CalculateNextMeasTime+0x158>)
		nextsend -= SEC_PER_DAY;							// wysylka bedzie w kolejnym dniu
 8008928:	f5a4 34a8 	sub.w	r4, r4, #86016	@ 0x15000
		dayleap = true;										// blokada do czasu zmiany dnia
 800892c:	2201      	movs	r2, #1
		nextsend -= SEC_PER_DAY;							// wysylka bedzie w kolejnym dniu
 800892e:	f5a4 74c0 	sub.w	r4, r4, #384	@ 0x180
		dayleap = true;										// blokada do czasu zmiany dnia
 8008932:	701a      	strb	r2, [r3, #0]
	}
	meas_start = nextsend;
	printf("Next measure start at: %02d:%02d:%02d\r\n", nextsend/3600, (nextsend%3600)/60, nextsend%60);
 8008934:	4a1f      	ldr	r2, [pc, #124]	@ (80089b4 <CalculateNextMeasTime+0x15c>)
 8008936:	4919      	ldr	r1, [pc, #100]	@ (800899c <CalculateNextMeasTime+0x144>)
 8008938:	fb82 5004 	smull	r5, r0, r2, r4
 800893c:	fb81 3104 	smull	r3, r1, r1, r4
 8008940:	4420      	add	r0, r4
 8008942:	17e3      	asrs	r3, r4, #31
 8008944:	4421      	add	r1, r4
 8008946:	ebc3 21e1 	rsb	r1, r3, r1, asr #11
 800894a:	ebc3 1360 	rsb	r3, r3, r0, asr #5
	meas_start = nextsend;
 800894e:	481a      	ldr	r0, [pc, #104]	@ (80089b8 <CalculateNextMeasTime+0x160>)
	printf("Next measure start at: %02d:%02d:%02d\r\n", nextsend/3600, (nextsend%3600)/60, nextsend%60);
 8008950:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	meas_start = nextsend;
 8008954:	6004      	str	r4, [r0, #0]
	printf("Next measure start at: %02d:%02d:%02d\r\n", nextsend/3600, (nextsend%3600)/60, nextsend%60);
 8008956:	f44f 6061 	mov.w	r0, #3600	@ 0xe10
 800895a:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 800895e:	fb00 4411 	mls	r4, r0, r1, r4
 8008962:	fb82 0204 	smull	r0, r2, r2, r4
 8008966:	4422      	add	r2, r4
 8008968:	17e4      	asrs	r4, r4, #31
 800896a:	ebc4 1262 	rsb	r2, r4, r2, asr #5
 800896e:	4813      	ldr	r0, [pc, #76]	@ (80089bc <CalculateNextMeasTime+0x164>)
}
 8008970:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	printf("Next measure start at: %02d:%02d:%02d\r\n", nextsend/3600, (nextsend%3600)/60, nextsend%60);
 8008974:	f007 bec6 	b.w	8010704 <iprintf>
	if(nextsend < 0 ) nextsend += SEC_PER_DAY;				// jak < 0 to start przed polnoca
 8008978:	f504 34a8 	add.w	r4, r4, #86016	@ 0x15000
 800897c:	f504 74c0 	add.w	r4, r4, #384	@ 0x180
	if(nextsend <= seconds) {								// za malo czasu od teraz do startu
 8008980:	429c      	cmp	r4, r3
 8008982:	dcd7      	bgt.n	8008934 <CalculateNextMeasTime+0xdc>
		nextsend += 60*config.tim_interval;					// dodaj jeden interwal
 8008984:	f8b8 3008 	ldrh.w	r3, [r8, #8]
		printf("Advance by one send interval\r\n");
 8008988:	480d      	ldr	r0, [pc, #52]	@ (80089c0 <CalculateNextMeasTime+0x168>)
		nextsend += 60*config.tim_interval;					// dodaj jeden interwal
 800898a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800898e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		printf("Advance by one send interval\r\n");
 8008992:	f007 ff1f 	bl	80107d4 <puts>
 8008996:	e7c3      	b.n	8008920 <CalculateNextMeasTime+0xc8>
 8008998:	200019bc 	.word	0x200019bc
 800899c:	91a2b3c5 	.word	0x91a2b3c5
 80089a0:	08016304 	.word	0x08016304
 80089a4:	08016328 	.word	0x08016328
 80089a8:	08016364 	.word	0x08016364
 80089ac:	0001517f 	.word	0x0001517f
 80089b0:	20001994 	.word	0x20001994
 80089b4:	88888889 	.word	0x88888889
 80089b8:	20001990 	.word	0x20001990
 80089bc:	080163a4 	.word	0x080163a4
 80089c0:	08016384 	.word	0x08016384
 80089c4:	200019c0 	.word	0x200019c0

080089c8 <THP_MainTask>:

void THP_MainTask(void const *argument)
{
 80089c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  POWER_OFF();
 80089cc:	4883      	ldr	r0, [pc, #524]	@ (8008bdc <THP_MainTask+0x214>)
{
 80089ce:	b089      	sub	sp, #36	@ 0x24
	  POWER_OFF();
 80089d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80089d4:	2200      	movs	r2, #0
 80089d6:	f002 f9bd 	bl	800ad54 <HAL_GPIO_WritePin>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 80089da:	4881      	ldr	r0, [pc, #516]	@ (8008be0 <THP_MainTask+0x218>)
 80089dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80089e0:	f002 f9b2 	bl	800ad48 <HAL_GPIO_ReadPin>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	f000 8238 	beq.w	8008e5a <THP_MainTask+0x492>
	  HAL_UART_RxCpltCallback(&huart1); //CLI
 80089ea:	487e      	ldr	r0, [pc, #504]	@ (8008be4 <THP_MainTask+0x21c>)
 80089ec:	f7fb fa7c 	bl	8003ee8 <HAL_UART_RxCpltCallback>
	  HAL_UART_RxCpltCallback(&huart2); //SIM
 80089f0:	487d      	ldr	r0, [pc, #500]	@ (8008be8 <THP_MainTask+0x220>)
 80089f2:	f7fb fa79 	bl	8003ee8 <HAL_UART_RxCpltCallback>
	  check_powerOn();
 80089f6:	f7fe fd8d 	bl	8007514 <check_powerOn>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 80089fa:	4879      	ldr	r0, [pc, #484]	@ (8008be0 <THP_MainTask+0x218>)
 80089fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008a00:	f002 f9a2 	bl	800ad48 <HAL_GPIO_ReadPin>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	f000 825f 	beq.w	8008ec8 <THP_MainTask+0x500>
	  printf("\r\n\r\n\r\nInitializing (RTOS version)...\r\n");
 8008a0a:	4878      	ldr	r0, [pc, #480]	@ (8008bec <THP_MainTask+0x224>)
 8008a0c:	f007 fee2 	bl	80107d4 <puts>
	  if (Load_config()==0) {printf("Config loaded OK \r\n");};
 8008a10:	f7f8 fd4e 	bl	80014b0 <Load_config>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	f000 8253 	beq.w	8008ec0 <THP_MainTask+0x4f8>
	  charger_state = BQ25798_check();
 8008a1a:	f7fb f88f 	bl	8003b3c <BQ25798_check>
 8008a1e:	4b74      	ldr	r3, [pc, #464]	@ (8008bf0 <THP_MainTask+0x228>)
 8008a20:	7018      	strb	r0, [r3, #0]
	  if (charger_state) {
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f040 821f 	bne.w	8008e68 <THP_MainTask+0x4a0>
		  BQ25798_Chrg_NTC_CTRL1_write(1);
		  CE_EN();
		  BQ25798_MPPT_CTRL(1); //MPPT ON

	  }
	  LED1_ON();
 8008a2a:	486c      	ldr	r0, [pc, #432]	@ (8008bdc <THP_MainTask+0x214>)
	  LED2_OFF();
	  ADC_DMA_Start();

	  TMP117.present = TMP117_check();
 8008a2c:	f8df 8214 	ldr.w	r8, [pc, #532]	@ 8008c44 <THP_MainTask+0x27c>
	  SHT3.present = SHTC3_check();
 8008a30:	4f70      	ldr	r7, [pc, #448]	@ (8008bf4 <THP_MainTask+0x22c>)
	  MS8607.present = MS8607_check();
 8008a32:	4c71      	ldr	r4, [pc, #452]	@ (8008bf8 <THP_MainTask+0x230>)
	  BME280.present = BME280_check();
 8008a34:	4e71      	ldr	r6, [pc, #452]	@ (8008bfc <THP_MainTask+0x234>)
	  DPS368.present = DPS368_check();
 8008a36:	4d72      	ldr	r5, [pc, #456]	@ (8008c00 <THP_MainTask+0x238>)

	  getConfVars();

	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
	//  printf("TMP117 conf var %x\r\n", tmp117_avr);
	  dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 8008a38:	f8df 920c 	ldr.w	r9, [pc, #524]	@ 8008c48 <THP_MainTask+0x280>
	  printf("DPS368 conf var %x\r\n", dps368_ovr_conf);
	  dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 8008a3c:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8008c4c <THP_MainTask+0x284>
	  LED1_ON();
 8008a40:	2200      	movs	r2, #0
 8008a42:	2120      	movs	r1, #32
 8008a44:	f002 f986 	bl	800ad54 <HAL_GPIO_WritePin>
	  LED2_OFF();
 8008a48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	4863      	ldr	r0, [pc, #396]	@ (8008bdc <THP_MainTask+0x214>)
 8008a50:	f002 f980 	bl	800ad54 <HAL_GPIO_WritePin>
	  ADC_DMA_Start();
 8008a54:	f7fa fc40 	bl	80032d8 <ADC_DMA_Start>
	  TMP117.present = TMP117_check();
 8008a58:	f000 fb32 	bl	80090c0 <TMP117_check>
 8008a5c:	f898 3000 	ldrb.w	r3, [r8]
 8008a60:	f360 0300 	bfi	r3, r0, #0, #1
 8008a64:	f888 3000 	strb.w	r3, [r8]
	  SHT3.present = SHTC3_check();
 8008a68:	f000 fc18 	bl	800929c <SHTC3_check>
 8008a6c:	783b      	ldrb	r3, [r7, #0]
 8008a6e:	f360 0300 	bfi	r3, r0, #0, #1
 8008a72:	703b      	strb	r3, [r7, #0]
	  MS8607.present = MS8607_check();
 8008a74:	f000 fbde 	bl	8009234 <MS8607_check>
 8008a78:	7823      	ldrb	r3, [r4, #0]
 8008a7a:	f360 0300 	bfi	r3, r0, #0, #1
 8008a7e:	7023      	strb	r3, [r4, #0]
	  BME280.present = BME280_check();
 8008a80:	f000 fd14 	bl	80094ac <BME280_check>
 8008a84:	7833      	ldrb	r3, [r6, #0]
 8008a86:	f360 0300 	bfi	r3, r0, #0, #1
 8008a8a:	7033      	strb	r3, [r6, #0]
	  DPS368.present = DPS368_check();
 8008a8c:	f7fc ff56 	bl	800593c <DPS368_check>
 8008a90:	782b      	ldrb	r3, [r5, #0]
 8008a92:	f360 0300 	bfi	r3, r0, #0, #1
 8008a96:	702b      	strb	r3, [r5, #0]
	  getConfVars();
 8008a98:	f7ff f994 	bl	8007dc4 <getConfVars>
	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 8008a9c:	f898 0000 	ldrb.w	r0, [r8]
 8008aa0:	f3c0 0083 	ubfx	r0, r0, #2, #4
 8008aa4:	f000 fba2 	bl	80091ec <tmp117_avr_conf>
 8008aa8:	4602      	mov	r2, r0
	  dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 8008aaa:	7828      	ldrb	r0, [r5, #0]
	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 8008aac:	4b55      	ldr	r3, [pc, #340]	@ (8008c04 <THP_MainTask+0x23c>)
	  dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 8008aae:	f3c0 0083 	ubfx	r0, r0, #2, #4
	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 8008ab2:	801a      	strh	r2, [r3, #0]
	  dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 8008ab4:	f7fd faf4 	bl	80060a0 <dps368_ovr_config>
 8008ab8:	f8a9 0000 	strh.w	r0, [r9]
	  printf("DPS368 conf var %x\r\n", dps368_ovr_conf);
 8008abc:	f8b9 1000 	ldrh.w	r1, [r9]
 8008ac0:	4851      	ldr	r0, [pc, #324]	@ (8008c08 <THP_MainTask+0x240>)
 8008ac2:	b289      	uxth	r1, r1
 8008ac4:	f007 fe1e 	bl	8010704 <iprintf>
	  dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 8008ac8:	f8b9 3000 	ldrh.w	r3, [r9]
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 8008acc:	4a4f      	ldr	r2, [pc, #316]	@ (8008c0c <THP_MainTask+0x244>)
	  dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 8008ace:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008ad2:	f88a 3000 	strb.w	r3, [sl]
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 8008ad6:	f8b9 3000 	ldrh.w	r3, [r9]

	  DPS368_init(FIFO_DIS, INT_NONE);
 8008ada:	2100      	movs	r1, #0
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 8008adc:	b2db      	uxtb	r3, r3
	  DPS368_init(FIFO_DIS, INT_NONE);
 8008ade:	4608      	mov	r0, r1
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 8008ae0:	7013      	strb	r3, [r2, #0]
	  DPS368_init(FIFO_DIS, INT_NONE);
 8008ae2:	f7fd f9d1 	bl	8005e88 <DPS368_init>
	  DPS368_temp_correct(dps368_ovr_temp);
 8008ae6:	f89a 0000 	ldrb.w	r0, [sl]
 8008aea:	f7fd f95f 	bl	8005dac <DPS368_temp_correct>

	  sht3_mode=SHT3.sensor_conf;
 8008aee:	783b      	ldrb	r3, [r7, #0]
 8008af0:	4a47      	ldr	r2, [pc, #284]	@ (8008c10 <THP_MainTask+0x248>)
	  if(sht3_mode==normal) printf("SHTC3 normal mode\r\n");
 8008af2:	f013 0f3c 	tst.w	r3, #60	@ 0x3c
	  sht3_mode=SHT3.sensor_conf;
 8008af6:	f3c3 0183 	ubfx	r1, r3, #2, #4
	  if(sht3_mode==normal) printf("SHTC3 normal mode\r\n");
 8008afa:	bf0c      	ite	eq
 8008afc:	4845      	ldreq	r0, [pc, #276]	@ (8008c14 <THP_MainTask+0x24c>)
	  else printf("SHTC3 low power mode\r\n");
 8008afe:	4846      	ldrne	r0, [pc, #280]	@ (8008c18 <THP_MainTask+0x250>)
	  sht3_mode=SHT3.sensor_conf;
 8008b00:	7011      	strb	r1, [r2, #0]
	  else printf("SHTC3 low power mode\r\n");
 8008b02:	f007 fe67 	bl	80107d4 <puts>

	  bme280_conf_change(BME280.sensor_conf);
 8008b06:	7830      	ldrb	r0, [r6, #0]
 8008b08:	f3c0 0083 	ubfx	r0, r0, #2, #4
 8008b0c:	f000 fe24 	bl	8009758 <bme280_conf_change>

	  MS8607_osr(MS8607.sensor_conf);
 8008b10:	7820      	ldrb	r0, [r4, #0]
 8008b12:	f3c0 0083 	ubfx	r0, r0, #2, #4
 8008b16:	f7fd fee7 	bl	80068e8 <MS8607_osr>
	  printf("MS8607 OSR %d\r\n", 256<<MS8607.sensor_conf);
 8008b1a:	7823      	ldrb	r3, [r4, #0]
 8008b1c:	483f      	ldr	r0, [pc, #252]	@ (8008c1c <THP_MainTask+0x254>)
 8008b1e:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8008b22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008b26:	4099      	lsls	r1, r3
 8008b28:	f007 fdec 	bl	8010704 <iprintf>

	  if(!TMP117.present && !SHT3.present && !MS8607.present && !BME280.present && !DPS368.present)
 8008b2c:	783a      	ldrb	r2, [r7, #0]
 8008b2e:	f898 3000 	ldrb.w	r3, [r8]
 8008b32:	7820      	ldrb	r0, [r4, #0]
 8008b34:	7831      	ldrb	r1, [r6, #0]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	4303      	orrs	r3, r0
 8008b3a:	782a      	ldrb	r2, [r5, #0]
 8008b3c:	430b      	orrs	r3, r1
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	f013 0301 	ands.w	r3, r3, #1
 8008b44:	f040 8186 	bne.w	8008e54 <THP_MainTask+0x48c>
		  config.disp_type = 0;
 8008b48:	4935      	ldr	r1, [pc, #212]	@ (8008c20 <THP_MainTask+0x258>)
 8008b4a:	9101      	str	r1, [sp, #4]
 8008b4c:	79ca      	ldrb	r2, [r1, #7]
 8008b4e:	f363 0243 	bfi	r2, r3, #1, #3
 8008b52:	71ca      	strb	r2, [r1, #7]

	  if (cmox_initialize(NULL) != CMOX_INIT_SUCCESS) puts("Cipher init error\r");
 8008b54:	2000      	movs	r0, #0
 8008b56:	f7f7 fb3b 	bl	80001d0 <cmox_initialize>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	f040 8180 	bne.w	8008e60 <THP_MainTask+0x498>

	  Sim80x_Init(osPriorityNormal);
 8008b60:	2000      	movs	r0, #0
 8008b62:	f7f9 fedd 	bl	8002920 <Sim80x_Init>
	  printf("SIM868 module startup %s.\r\n", Sim80x.Status.Power ? "OK" : "FAILED");
 8008b66:	4b2f      	ldr	r3, [pc, #188]	@ (8008c24 <THP_MainTask+0x25c>)
	  // uruchomienie taska sensorów
	  osThreadDef(SensorTask, SensorsTask, osPriorityNormal, 0, 512);
 8008b68:	4e2f      	ldr	r6, [pc, #188]	@ (8008c28 <THP_MainTask+0x260>)
	  printf("SIM868 module startup %s.\r\n", Sim80x.Status.Power ? "OK" : "FAILED");
 8008b6a:	f893 2330 	ldrb.w	r2, [r3, #816]	@ 0x330
 8008b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8008c2c <THP_MainTask+0x264>)
 8008b70:	492f      	ldr	r1, [pc, #188]	@ (8008c30 <THP_MainTask+0x268>)
 8008b72:	4830      	ldr	r0, [pc, #192]	@ (8008c34 <THP_MainTask+0x26c>)
 8008b74:	f8df a0d8 	ldr.w	sl, [pc, #216]	@ 8008c50 <THP_MainTask+0x288>
 8008b78:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8008c54 <THP_MainTask+0x28c>
 8008b7c:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8008c58 <THP_MainTask+0x290>
 8008b80:	f012 0f04 	tst.w	r2, #4
 8008b84:	bf18      	it	ne
 8008b86:	4619      	movne	r1, r3
 8008b88:	f007 fdbc 	bl	8010704 <iprintf>
	  osThreadDef(SensorTask, SensorsTask, osPriorityNormal, 0, 512);
 8008b8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008b8e:	ac03      	add	r4, sp, #12
 8008b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	  uint8_t registered = 0;
	  uint8_t measint = 99;

	  meas_start = -1;
	  meas_count = config.measures;
	  if(meas_count == 0) meas_count = 1;
 8008b92:	2500      	movs	r5, #0
	  measTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8008b94:	4629      	mov	r1, r5
	  osThreadDef(SensorTask, SensorsTask, osPriorityNormal, 0, 512);
 8008b96:	6833      	ldr	r3, [r6, #0]
 8008b98:	6023      	str	r3, [r4, #0]
	  measTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8008b9a:	a803      	add	r0, sp, #12
 8008b9c:	f004 fdd0 	bl	800d740 <osThreadCreate>
 8008ba0:	4b25      	ldr	r3, [pc, #148]	@ (8008c38 <THP_MainTask+0x270>)
 8008ba2:	6018      	str	r0, [r3, #0]
	  osDelay(10);
 8008ba4:	200a      	movs	r0, #10
 8008ba6:	f004 fde7 	bl	800d778 <osDelay>
	  uint32_t ticks30ms = HAL_GetTick();
 8008baa:	f000 fef7 	bl	800999c <HAL_GetTick>
 8008bae:	4607      	mov	r7, r0
	  uint32_t ticksbqwd = HAL_GetTick();
 8008bb0:	f000 fef4 	bl	800999c <HAL_GetTick>
 8008bb4:	4606      	mov	r6, r0
	  uint32_t secdiv = HAL_GetTick();
 8008bb6:	f000 fef1 	bl	800999c <HAL_GetTick>
	  if(meas_count == 0) meas_count = 1;
 8008bba:	9b01      	ldr	r3, [sp, #4]
 8008bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8008c3c <THP_MainTask+0x274>)
 8008bbe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	bf38      	it	cc
 8008bc6:	2301      	movcc	r3, #1
 8008bc8:	8013      	strh	r3, [r2, #0]
	  meas_start = -1;
 8008bca:	4a1d      	ldr	r2, [pc, #116]	@ (8008c40 <THP_MainTask+0x278>)
 8008bcc:	f04f 33ff 	mov.w	r3, #4294967295
	  if(meas_count == 0) meas_count = 1;
 8008bd0:	f04f 0963 	mov.w	r9, #99	@ 0x63
	  uint32_t secdiv = HAL_GetTick();
 8008bd4:	4604      	mov	r4, r0
	  meas_start = -1;
 8008bd6:	6013      	str	r3, [r2, #0]
	  if(meas_count == 0) meas_count = 1;
 8008bd8:	e0ae      	b.n	8008d38 <THP_MainTask+0x370>
 8008bda:	bf00      	nop
 8008bdc:	48000400 	.word	0x48000400
 8008be0:	48000800 	.word	0x48000800
 8008be4:	200016d4 	.word	0x200016d4
 8008be8:	20001650 	.word	0x20001650
 8008bec:	080163d4 	.word	0x080163d4
 8008bf0:	20001b6f 	.word	0x20001b6f
 8008bf4:	20001b48 	.word	0x20001b48
 8008bf8:	20001b24 	.word	0x20001b24
 8008bfc:	20001b00 	.word	0x20001b00
 8008c00:	20001ae8 	.word	0x20001ae8
 8008c04:	200019b2 	.word	0x200019b2
 8008c08:	08016424 	.word	0x08016424
 8008c0c:	200019b0 	.word	0x200019b0
 8008c10:	200019ac 	.word	0x200019ac
 8008c14:	0801643c 	.word	0x0801643c
 8008c18:	08016450 	.word	0x08016450
 8008c1c:	08016468 	.word	0x08016468
 8008c20:	200019c0 	.word	0x200019c0
 8008c24:	20000230 	.word	0x20000230
 8008c28:	08013c48 	.word	0x08013c48
 8008c2c:	080151b8 	.word	0x080151b8
 8008c30:	080163cc 	.word	0x080163cc
 8008c34:	0801648c 	.word	0x0801648c
 8008c38:	200019a0 	.word	0x200019a0
 8008c3c:	200019b8 	.word	0x200019b8
 8008c40:	20001990 	.word	0x20001990
 8008c44:	20001b60 	.word	0x20001b60
 8008c48:	200019ae 	.word	0x200019ae
 8008c4c:	200019b1 	.word	0x200019b1
 8008c50:	200019b4 	.word	0x200019b4
 8008c54:	200019bc 	.word	0x200019bc
 8008c58:	2000000c 	.word	0x2000000c
			  ticksbqwd = HAL_GetTick();
			  BQ25798_WD_RST();
		  }

		  // wyslanie i wyswietlenie pomiarow
	      if(sensors_data_ready) {						// taks sensorow zakonczyl dzialanie ?
 8008c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c60:	b193      	cbz	r3, 8008c88 <THP_MainTask+0x2c0>
	    	  sensors_data_ready = 0;
	    	  if(config.disp_type > 0) {
 8008c62:	9b01      	ldr	r3, [sp, #4]
 8008c64:	79d8      	ldrb	r0, [r3, #7]
	    	  sensors_data_ready = 0;
 8008c66:	2300      	movs	r3, #0
	    	  if(config.disp_type > 0) {
 8008c68:	f010 0f0e 	tst.w	r0, #14
	    	  sensors_data_ready = 0;
 8008c6c:	f88a 3000 	strb.w	r3, [sl]
	    	  if(config.disp_type > 0) {
 8008c70:	f040 80a4 	bne.w	8008dbc <THP_MainTask+0x3f4>
	    		  display_values(config.disp_type);
	    	  }

	    	  if(send_enable) {
 8008c74:	4996      	ldr	r1, [pc, #600]	@ (8008ed0 <THP_MainTask+0x508>)
 8008c76:	780b      	ldrb	r3, [r1, #0]
 8008c78:	b133      	cbz	r3, 8008c88 <THP_MainTask+0x2c0>
	    		  send_enable = 0;
	    		  if(!meas_cont_mode) printf("Starting GPRS thread %s\r\n", StartSendGPRS() ? "OK":"ERROR");
 8008c7a:	4b96      	ldr	r3, [pc, #600]	@ (8008ed4 <THP_MainTask+0x50c>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
	    		  send_enable = 0;
 8008c7e:	2200      	movs	r2, #0
 8008c80:	700a      	strb	r2, [r1, #0]
	    		  if(!meas_cont_mode) printf("Starting GPRS thread %s\r\n", StartSendGPRS() ? "OK":"ERROR");
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 80aa 	beq.w	8008ddc <THP_MainTask+0x414>
	    	  }
	      }
//--------------------------------------------------------------------------------------------------
		  // zadania wykonywane co sekunde
		  if(HAL_GetTick() - secdiv >= 1000UL) {
 8008c88:	f000 fe88 	bl	800999c <HAL_GetTick>
 8008c8c:	1b00      	subs	r0, r0, r4
 8008c8e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008c92:	d350      	bcc.n	8008d36 <THP_MainTask+0x36e>
			  secdiv = HAL_GetTick();
 8008c94:	f000 fe82 	bl	800999c <HAL_GetTick>
			  // zwieksz globalny licznik sekund liczacy sekundy danego jednego dnia
			  if(++seconds >= SEC_PER_DAY) seconds = 0;
 8008c98:	f8d8 3000 	ldr.w	r3, [r8]
 8008c9c:	4a8e      	ldr	r2, [pc, #568]	@ (8008ed8 <THP_MainTask+0x510>)
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	f8c8 3000 	str.w	r3, [r8]
 8008ca6:	bfc4      	itt	gt
 8008ca8:	2300      	movgt	r3, #0
 8008caa:	f8c8 3000 	strgt.w	r3, [r8]
			  // zeruj flage nastepnego dnia (nie przy stricte 0, bo korekta moze spowodowac przeoczenie)
			  if(seconds < 60) dayleap = false;
 8008cae:	f8d8 3000 	ldr.w	r3, [r8]
 8008cb2:	2b3b      	cmp	r3, #59	@ 0x3b
			  secdiv = HAL_GetTick();
 8008cb4:	4604      	mov	r4, r0
			  if(seconds < 60) dayleap = false;
 8008cb6:	dc02      	bgt.n	8008cbe <THP_MainTask+0x2f6>
 8008cb8:	4a88      	ldr	r2, [pc, #544]	@ (8008edc <THP_MainTask+0x514>)
 8008cba:	2300      	movs	r3, #0
 8008cbc:	7013      	strb	r3, [r2, #0]

			  // ===================================================================================

			  if(meas_start < 0 && timesync) CalculateNextMeasTime();		// oblicz czas rozpoczecia pomiaru
 8008cbe:	4b88      	ldr	r3, [pc, #544]	@ (8008ee0 <THP_MainTask+0x518>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	db4c      	blt.n	8008d60 <THP_MainTask+0x398>
			  if(registered && meas_start < 0) SysTimeSync();
 8008cc6:	2d00      	cmp	r5, #0
 8008cc8:	d051      	beq.n	8008d6e <THP_MainTask+0x3a6>

			  // uruchomienie pomiaru
			  if((!dayleap && meas_start >= 0 && seconds >= meas_start) || meas_cont_mode) {	// czas uruchomic pomiar ?
 8008cca:	4a84      	ldr	r2, [pc, #528]	@ (8008edc <THP_MainTask+0x514>)
 8008ccc:	7812      	ldrb	r2, [r2, #0]
 8008cce:	2a00      	cmp	r2, #0
 8008cd0:	d154      	bne.n	8008d7c <THP_MainTask+0x3b4>
 8008cd2:	f8d8 2000 	ldr.w	r2, [r8]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	db50      	blt.n	8008d7c <THP_MainTask+0x3b4>
				  if(++measint >= 5) {
 8008cda:	f109 0901 	add.w	r9, r9, #1
 8008cde:	fa5f f989 	uxtb.w	r9, r9
 8008ce2:	f1b9 0f04 	cmp.w	r9, #4
 8008ce6:	d910      	bls.n	8008d0a <THP_MainTask+0x342>
					  measint = 0;
					  if (meas_count > 0 || meas_cont_mode) {
 8008ce8:	4b7e      	ldr	r3, [pc, #504]	@ (8008ee4 <THP_MainTask+0x51c>)
 8008cea:	4a7a      	ldr	r2, [pc, #488]	@ (8008ed4 <THP_MainTask+0x50c>)
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	f892 9000 	ldrb.w	r9, [r2]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f040 8083 	bne.w	8008dfe <THP_MainTask+0x436>
 8008cf8:	f1b9 0f00 	cmp.w	r9, #0
 8008cfc:	d005      	beq.n	8008d0a <THP_MainTask+0x342>
					  measint = 0;
 8008cfe:	f04f 0900 	mov.w	r9, #0
								  measint = 99;
								  meas_count = config.measures;
								  CalculateNextMeasTime();					// oblicz czas rozpoczecia kolejnego pomiaru
							  } else printf("Measure no.%u\r\n", config.measures-meas_count);
						  }
						  vTaskResume(measTaskHandle);						// odblokuj taks pomiarow
 8008d02:	4b79      	ldr	r3, [pc, #484]	@ (8008ee8 <THP_MainTask+0x520>)
 8008d04:	6818      	ldr	r0, [r3, #0]
 8008d06:	f004 ff41 	bl	800db8c <vTaskResume>
			  }

			  // ===================================================================================

			  // czas na odczyt GPS ?, nie odczytuj w trakcie połączenia z serwerem, bo komendy bruzdza
			  if(++gps_start >= gps_interval) {
 8008d0a:	4a78      	ldr	r2, [pc, #480]	@ (8008eec <THP_MainTask+0x524>)
 8008d0c:	6813      	ldr	r3, [r2, #0]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	f8db 2000 	ldr.w	r2, [fp]
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d255      	bcs.n	8008dc6 <THP_MainTask+0x3fe>
					  gps_start = 0;
					  gps_interval = 15*60;						// co 15 minut proba odczytu GPS
				  } else gps_interval += 30;					// nie wolno zalaczyc GPS -> za 30sek kolejna proba
			  }
			  // jak zlapano FIX to następny odczyt GPS za 12 godzin
			  if(Sim80x.GPS.Fix && gps_interval < GPS_INTERVAL)  gps_interval = GPS_INTERVAL;	// GPS OK, nastepny raz za 12 godzin
 8008d1a:	4b75      	ldr	r3, [pc, #468]	@ (8008ef0 <THP_MainTask+0x528>)
 8008d1c:	f893 3b32 	ldrb.w	r3, [r3, #2866]	@ 0xb32
 8008d20:	b14b      	cbz	r3, 8008d36 <THP_MainTask+0x36e>
 8008d22:	f8db 2000 	ldr.w	r2, [fp]
 8008d26:	f64a 03bf 	movw	r3, #43199	@ 0xa8bf
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	bf9c      	itt	ls
 8008d2e:	f64a 03c0 	movwls	r3, #43200	@ 0xa8c0
 8008d32:	f8cb 3000 	strls.w	r3, [fp]

			  // ===================================================================================
		  }
	      __WFI();
 8008d36:	bf30      	wfi
		  CLI();
 8008d38:	f7fc fdba 	bl	80058b0 <CLI>
		  if(HAL_GetTick()-ticks30ms >= 30) {
 8008d3c:	f000 fe2e 	bl	800999c <HAL_GetTick>
 8008d40:	1bc0      	subs	r0, r0, r7
 8008d42:	281d      	cmp	r0, #29
 8008d44:	d81f      	bhi.n	8008d86 <THP_MainTask+0x3be>
		  if(HAL_GetTick()-ticksbqwd >= 15000) {
 8008d46:	f000 fe29 	bl	800999c <HAL_GetTick>
 8008d4a:	f643 2397 	movw	r3, #14999	@ 0x3a97
 8008d4e:	1b80      	subs	r0, r0, r6
 8008d50:	4298      	cmp	r0, r3
 8008d52:	d983      	bls.n	8008c5c <THP_MainTask+0x294>
			  ticksbqwd = HAL_GetTick();
 8008d54:	f000 fe22 	bl	800999c <HAL_GetTick>
 8008d58:	4606      	mov	r6, r0
			  BQ25798_WD_RST();
 8008d5a:	f7fb f833 	bl	8003dc4 <BQ25798_WD_RST>
 8008d5e:	e77d      	b.n	8008c5c <THP_MainTask+0x294>
			  if(meas_start < 0 && timesync) CalculateNextMeasTime();		// oblicz czas rozpoczecia pomiaru
 8008d60:	4b64      	ldr	r3, [pc, #400]	@ (8008ef4 <THP_MainTask+0x52c>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d163      	bne.n	8008e30 <THP_MainTask+0x468>
			  if(registered && meas_start < 0) SysTimeSync();
 8008d68:	b10d      	cbz	r5, 8008d6e <THP_MainTask+0x3a6>
 8008d6a:	f7ff fd4d 	bl	8008808 <SysTimeSync>
			  if((!dayleap && meas_start >= 0 && seconds >= meas_start) || meas_cont_mode) {	// czas uruchomic pomiar ?
 8008d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8008edc <THP_MainTask+0x514>)
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	b91b      	cbnz	r3, 8008d7c <THP_MainTask+0x3b4>
 8008d74:	4b5a      	ldr	r3, [pc, #360]	@ (8008ee0 <THP_MainTask+0x518>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	daaa      	bge.n	8008cd2 <THP_MainTask+0x30a>
 8008d7c:	4b55      	ldr	r3, [pc, #340]	@ (8008ed4 <THP_MainTask+0x50c>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1aa      	bne.n	8008cda <THP_MainTask+0x312>
 8008d84:	e7c1      	b.n	8008d0a <THP_MainTask+0x342>
			  ticks30ms = HAL_GetTick();
 8008d86:	f000 fe09 	bl	800999c <HAL_GetTick>
			  LED1_TOGGLE();
 8008d8a:	2120      	movs	r1, #32
			  ticks30ms = HAL_GetTick();
 8008d8c:	4607      	mov	r7, r0
			  LED1_TOGGLE();
 8008d8e:	485a      	ldr	r0, [pc, #360]	@ (8008ef8 <THP_MainTask+0x530>)
 8008d90:	f001 ffe6 	bl	800ad60 <HAL_GPIO_TogglePin>
			  check_powerOff();
 8008d94:	f7fe fbe6 	bl	8007564 <check_powerOff>
			  GsmWdt();
 8008d98:	f7ff fa98 	bl	80082cc <GsmWdt>
			  if(!registered && Sim80x.Status.RegisterdToNetwork) {
 8008d9c:	b945      	cbnz	r5, 8008db0 <THP_MainTask+0x3e8>
 8008d9e:	4b54      	ldr	r3, [pc, #336]	@ (8008ef0 <THP_MainTask+0x528>)
 8008da0:	f893 5330 	ldrb.w	r5, [r3, #816]	@ 0x330
 8008da4:	f015 0501 	ands.w	r5, r5, #1
 8008da8:	d0cd      	beq.n	8008d46 <THP_MainTask+0x37e>
				  printf("Succesfully registered to network.\r\n");
 8008daa:	4854      	ldr	r0, [pc, #336]	@ (8008efc <THP_MainTask+0x534>)
 8008dac:	f007 fd12 	bl	80107d4 <puts>
			  if(registered && Sim80x.Status.RegisterdToNetwork == 0) registered = 0;
 8008db0:	4b4f      	ldr	r3, [pc, #316]	@ (8008ef0 <THP_MainTask+0x528>)
 8008db2:	f893 5330 	ldrb.w	r5, [r3, #816]	@ 0x330
 8008db6:	f005 0501 	and.w	r5, r5, #1
 8008dba:	e7c4      	b.n	8008d46 <THP_MainTask+0x37e>
	    		  display_values(config.disp_type);
 8008dbc:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8008dc0:	f7fe fd28 	bl	8007814 <display_values>
 8008dc4:	e756      	b.n	8008c74 <THP_MainTask+0x2ac>
				  if(StartReadGps()) {	// najpierw test na GPRS
 8008dc6:	f7ff fcf1 	bl	80087ac <StartReadGps>
 8008dca:	b190      	cbz	r0, 8008df2 <THP_MainTask+0x42a>
					  gps_start = 0;
 8008dcc:	4a47      	ldr	r2, [pc, #284]	@ (8008eec <THP_MainTask+0x524>)
 8008dce:	2300      	movs	r3, #0
 8008dd0:	6013      	str	r3, [r2, #0]
					  gps_interval = 15*60;						// co 15 minut proba odczytu GPS
 8008dd2:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8008dd6:	f8cb 3000 	str.w	r3, [fp]
 8008dda:	e79e      	b.n	8008d1a <THP_MainTask+0x352>
	    		  if(!meas_cont_mode) printf("Starting GPRS thread %s\r\n", StartSendGPRS() ? "OK":"ERROR");
 8008ddc:	f7ff fa24 	bl	8008228 <StartSendGPRS>
 8008de0:	4b47      	ldr	r3, [pc, #284]	@ (8008f00 <THP_MainTask+0x538>)
 8008de2:	4948      	ldr	r1, [pc, #288]	@ (8008f04 <THP_MainTask+0x53c>)
 8008de4:	2800      	cmp	r0, #0
 8008de6:	bf08      	it	eq
 8008de8:	4619      	moveq	r1, r3
 8008dea:	4847      	ldr	r0, [pc, #284]	@ (8008f08 <THP_MainTask+0x540>)
 8008dec:	f007 fc8a 	bl	8010704 <iprintf>
 8008df0:	e74a      	b.n	8008c88 <THP_MainTask+0x2c0>
				  } else gps_interval += 30;					// nie wolno zalaczyc GPS -> za 30sek kolejna proba
 8008df2:	f8db 3000 	ldr.w	r3, [fp]
 8008df6:	331e      	adds	r3, #30
 8008df8:	f8cb 3000 	str.w	r3, [fp]
 8008dfc:	e78d      	b.n	8008d1a <THP_MainTask+0x352>
						  if(meas_cont_mode == 0) {
 8008dfe:	f1b9 0f00 	cmp.w	r9, #0
 8008e02:	f47f af7c 	bne.w	8008cfe <THP_MainTask+0x336>
							  if(--meas_count == 0) {
 8008e06:	4a37      	ldr	r2, [pc, #220]	@ (8008ee4 <THP_MainTask+0x51c>)
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	8013      	strh	r3, [r2, #0]
 8008e0e:	b9cb      	cbnz	r3, 8008e44 <THP_MainTask+0x47c>
								  printf("Last measure & Send\r\n");
 8008e10:	483e      	ldr	r0, [pc, #248]	@ (8008f0c <THP_MainTask+0x544>)
 8008e12:	f007 fcdf 	bl	80107d4 <puts>
								  meas_count = config.measures;
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	4a32      	ldr	r2, [pc, #200]	@ (8008ee4 <THP_MainTask+0x51c>)
 8008e1a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8008e1e:	8013      	strh	r3, [r2, #0]
								  send_enable = 1;
 8008e20:	4a2b      	ldr	r2, [pc, #172]	@ (8008ed0 <THP_MainTask+0x508>)
 8008e22:	2301      	movs	r3, #1
 8008e24:	7013      	strb	r3, [r2, #0]
								  measint = 99;
 8008e26:	f04f 0963 	mov.w	r9, #99	@ 0x63
								  CalculateNextMeasTime();					// oblicz czas rozpoczecia kolejnego pomiaru
 8008e2a:	f7ff fd15 	bl	8008858 <CalculateNextMeasTime>
 8008e2e:	e768      	b.n	8008d02 <THP_MainTask+0x33a>
			  if(meas_start < 0 && timesync) CalculateNextMeasTime();		// oblicz czas rozpoczecia pomiaru
 8008e30:	f7ff fd12 	bl	8008858 <CalculateNextMeasTime>
			  if(registered && meas_start < 0) SysTimeSync();
 8008e34:	2d00      	cmp	r5, #0
 8008e36:	d09a      	beq.n	8008d6e <THP_MainTask+0x3a6>
 8008e38:	4b29      	ldr	r3, [pc, #164]	@ (8008ee0 <THP_MainTask+0x518>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f6bf af44 	bge.w	8008cca <THP_MainTask+0x302>
 8008e42:	e792      	b.n	8008d6a <THP_MainTask+0x3a2>
							  } else printf("Measure no.%u\r\n", config.measures-meas_count);
 8008e44:	9a01      	ldr	r2, [sp, #4]
 8008e46:	4832      	ldr	r0, [pc, #200]	@ (8008f10 <THP_MainTask+0x548>)
 8008e48:	f892 103b 	ldrb.w	r1, [r2, #59]	@ 0x3b
 8008e4c:	1ac9      	subs	r1, r1, r3
 8008e4e:	f007 fc59 	bl	8010704 <iprintf>
 8008e52:	e754      	b.n	8008cfe <THP_MainTask+0x336>
 8008e54:	4b2f      	ldr	r3, [pc, #188]	@ (8008f14 <THP_MainTask+0x54c>)
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	e67c      	b.n	8008b54 <THP_MainTask+0x18c>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 8008e5a:	f001 fabd 	bl	800a3d8 <HAL_NVIC_SystemReset>
 8008e5e:	e5c4      	b.n	80089ea <THP_MainTask+0x22>
	  if (cmox_initialize(NULL) != CMOX_INIT_SUCCESS) puts("Cipher init error\r");
 8008e60:	482d      	ldr	r0, [pc, #180]	@ (8008f18 <THP_MainTask+0x550>)
 8008e62:	f007 fcb7 	bl	80107d4 <puts>
 8008e66:	e67b      	b.n	8008b60 <THP_MainTask+0x198>
		  printf("Configure charger \r\n");
 8008e68:	482c      	ldr	r0, [pc, #176]	@ (8008f1c <THP_MainTask+0x554>)
 8008e6a:	f007 fcb3 	bl	80107d4 <puts>
		  QON_EN();
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008e78:	f001 ff6c 	bl	800ad54 <HAL_GPIO_WritePin>
		  BQ25798_Sys_Min_Voltage_write(3); 	// 3250mV
 8008e7c:	2003      	movs	r0, #3
 8008e7e:	f7fa ff49 	bl	8003d14 <BQ25798_Sys_Min_Voltage_write>
		  BQ25798_Chr_Volt_Limit_write(4200); 	// 4200mV
 8008e82:	f241 0068 	movw	r0, #4200	@ 0x1068
 8008e86:	f7fa ff4f 	bl	8003d28 <BQ25798_Chr_Volt_Limit_write>
		  BQ25798_Chr_Curr_Limit_write(2000); 	// 2000mA
 8008e8a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8008e8e:	f7fa ff5f 	bl	8003d50 <BQ25798_Chr_Curr_Limit_write>
		  BQ25798_Chr_Input_Voltage_Limit_write(130); //*100mV
 8008e92:	2082      	movs	r0, #130	@ 0x82
 8008e94:	f7fa ff70 	bl	8003d78 <BQ25798_Chr_Input_Voltage_Limit_write>
		  BQ25798_Chr_Input_Curr_Limit_write(200); //*10mA
 8008e98:	20c8      	movs	r0, #200	@ 0xc8
 8008e9a:	f7fa ff75 	bl	8003d88 <BQ25798_Chr_Input_Curr_Limit_write>
		  BQ25798_Chrg_CTRL1_write(0x95);
 8008e9e:	2095      	movs	r0, #149	@ 0x95
 8008ea0:	f7fa ff80 	bl	8003da4 <BQ25798_Chrg_CTRL1_write>
		  BQ25798_Chrg_NTC_CTRL1_write(1);
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	f7fa ff85 	bl	8003db4 <BQ25798_Chrg_NTC_CTRL1_write>
		  CE_EN();
 8008eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008eb4:	f001 ff4e 	bl	800ad54 <HAL_GPIO_WritePin>
		  BQ25798_MPPT_CTRL(1); //MPPT ON
 8008eb8:	2001      	movs	r0, #1
 8008eba:	f7fa ff9f 	bl	8003dfc <BQ25798_MPPT_CTRL>
 8008ebe:	e5b4      	b.n	8008a2a <THP_MainTask+0x62>
	  if (Load_config()==0) {printf("Config loaded OK \r\n");};
 8008ec0:	4817      	ldr	r0, [pc, #92]	@ (8008f20 <THP_MainTask+0x558>)
 8008ec2:	f007 fc87 	bl	80107d4 <puts>
 8008ec6:	e5a8      	b.n	8008a1a <THP_MainTask+0x52>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 8008ec8:	f001 fa86 	bl	800a3d8 <HAL_NVIC_SystemReset>
 8008ecc:	e59d      	b.n	8008a0a <THP_MainTask+0x42>
 8008ece:	bf00      	nop
 8008ed0:	200019b5 	.word	0x200019b5
 8008ed4:	200019b6 	.word	0x200019b6
 8008ed8:	0001517f 	.word	0x0001517f
 8008edc:	20001994 	.word	0x20001994
 8008ee0:	20001990 	.word	0x20001990
 8008ee4:	200019b8 	.word	0x200019b8
 8008ee8:	200019a0 	.word	0x200019a0
 8008eec:	200019a4 	.word	0x200019a4
 8008ef0:	20000230 	.word	0x20000230
 8008ef4:	200019ba 	.word	0x200019ba
 8008ef8:	48000400 	.word	0x48000400
 8008efc:	080164a8 	.word	0x080164a8
 8008f00:	080151bc 	.word	0x080151bc
 8008f04:	080151b8 	.word	0x080151b8
 8008f08:	080164cc 	.word	0x080164cc
 8008f0c:	080164e8 	.word	0x080164e8
 8008f10:	08016500 	.word	0x08016500
 8008f14:	200019c0 	.word	0x200019c0
 8008f18:	08016478 	.word	0x08016478
 8008f1c:	08016410 	.word	0x08016410
 8008f20:	080163fc 	.word	0x080163fc

08008f24 <i2c_read8>:
#include <math.h>



uint8_t i2c_read8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t *value, uint8_t addr)
{
 8008f24:	b530      	push	{r4, r5, lr}
 8008f26:	b087      	sub	sp, #28
 8008f28:	460d      	mov	r5, r1
 8008f2a:	4619      	mov	r1, r3
	uint8_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8008f2c:	2308      	movs	r3, #8
{
 8008f2e:	4614      	mov	r4, r2
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8008f30:	9302      	str	r3, [sp, #8]
 8008f32:	462a      	mov	r2, r5
 8008f34:	2301      	movs	r3, #1
 8008f36:	f10d 0517 	add.w	r5, sp, #23
 8008f3a:	9301      	str	r3, [sp, #4]
 8008f3c:	9500      	str	r5, [sp, #0]
 8008f3e:	f002 fb67 	bl	800b610 <HAL_I2C_Mem_Read>
    *value = tmp;
 8008f42:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008f46:	7023      	strb	r3, [r4, #0]
    return res;
}
 8008f48:	b007      	add	sp, #28
 8008f4a:	bd30      	pop	{r4, r5, pc}

08008f4c <i2c_read16>:

uint8_t i2c_read16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t *value, uint8_t addr)
{
 8008f4c:	b510      	push	{r4, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	468c      	mov	ip, r1
 8008f52:	4619      	mov	r1, r3
	uint16_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8008f54:	2308      	movs	r3, #8
 8008f56:	9302      	str	r3, [sp, #8]
 8008f58:	2302      	movs	r3, #2
 8008f5a:	9301      	str	r3, [sp, #4]
 8008f5c:	f10d 0316 	add.w	r3, sp, #22
{
 8008f60:	4614      	mov	r4, r2
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	4662      	mov	r2, ip
 8008f66:	2301      	movs	r3, #1
 8008f68:	f002 fb52 	bl	800b610 <HAL_I2C_Mem_Read>
    *value = tmp;
 8008f6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8008f70:	8023      	strh	r3, [r4, #0]
    return res;
}
 8008f72:	b006      	add	sp, #24
 8008f74:	bd10      	pop	{r4, pc}
 8008f76:	bf00      	nop

08008f78 <i2c_write8>:
    *value = tmp;
    return res;
}

uint8_t i2c_write8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t value, uint8_t addr)
{
 8008f78:	b510      	push	{r4, lr}
 8008f7a:	b086      	sub	sp, #24
	uint8_t tmp = value;
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8008f7c:	2408      	movs	r4, #8
 8008f7e:	9402      	str	r4, [sp, #8]
{
 8008f80:	4614      	mov	r4, r2
 8008f82:	468c      	mov	ip, r1
	uint8_t tmp = value;
 8008f84:	f88d 4017 	strb.w	r4, [sp, #23]
{
 8008f88:	4619      	mov	r1, r3
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8008f8a:	f10d 0417 	add.w	r4, sp, #23
 8008f8e:	2301      	movs	r3, #1
 8008f90:	9301      	str	r3, [sp, #4]
 8008f92:	4662      	mov	r2, ip
 8008f94:	9400      	str	r4, [sp, #0]
 8008f96:	f002 fa15 	bl	800b3c4 <HAL_I2C_Mem_Write>
    return res;
}
 8008f9a:	b006      	add	sp, #24
 8008f9c:	bd10      	pop	{r4, pc}
 8008f9e:	bf00      	nop

08008fa0 <i2c_write16>:

uint8_t i2c_write16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t value, uint8_t addr)
{
 8008fa0:	b500      	push	{lr}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	468e      	mov	lr, r1
 8008fa6:	4619      	mov	r1, r3
	uint16_t tmp = value;
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8008fa8:	2308      	movs	r3, #8
 8008faa:	9302      	str	r3, [sp, #8]
 8008fac:	2302      	movs	r3, #2
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	f10d 0316 	add.w	r3, sp, #22
{
 8008fb4:	4694      	mov	ip, r2
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	4672      	mov	r2, lr
 8008fba:	2301      	movs	r3, #1
	uint16_t tmp = value;
 8008fbc:	f8ad c016 	strh.w	ip, [sp, #22]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8008fc0:	f002 fa00 	bl	800b3c4 <HAL_I2C_Mem_Write>
    return res;
}
 8008fc4:	b007      	add	sp, #28
 8008fc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fca:	bf00      	nop

08008fcc <setBit>:
    old_word |= new_word;
    i2c_write16(i2c, sub_address, old_word, addr);
}

void setBit(uint8_t* reg, int bitNumber, int value) {
    if (value == 0) {
 8008fcc:	b932      	cbnz	r2, 8008fdc <setBit+0x10>
        *reg &= ~(1 << bitNumber);  // Ustawienie bitu na 0
 8008fce:	7803      	ldrb	r3, [r0, #0]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	408a      	lsls	r2, r1
 8008fd4:	ea23 0302 	bic.w	r3, r3, r2
 8008fd8:	7003      	strb	r3, [r0, #0]
 8008fda:	4770      	bx	lr
    } else if (value == 1) {
 8008fdc:	2a01      	cmp	r2, #1
 8008fde:	d000      	beq.n	8008fe2 <setBit+0x16>
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
    }
}
 8008fe0:	4770      	bx	lr
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
 8008fe2:	7803      	ldrb	r3, [r0, #0]
 8008fe4:	fa02 f101 	lsl.w	r1, r2, r1
 8008fe8:	430b      	orrs	r3, r1
 8008fea:	7003      	strb	r3, [r0, #0]
}
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop

08008ff0 <combine_uint8>:

uint16_t combine_uint8(uint8_t high, uint8_t low) {
    return ((uint16_t)high << 8) | low;
}
 8008ff0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop

08008ff8 <modifyRegister>:

void modifyRegister(unsigned char* reg, unsigned char mask, unsigned char value) {
    *reg = (*reg & ~mask) | (value & mask);
 8008ff8:	7803      	ldrb	r3, [r0, #0]
 8008ffa:	ea23 0301 	bic.w	r3, r3, r1
 8008ffe:	4011      	ands	r1, r2
 8009000:	430b      	orrs	r3, r1
 8009002:	7003      	strb	r3, [r0, #0]
}
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop

08009008 <i2c_scan>:

void i2c_scan(I2C_HandleTypeDef * i2c, uint8_t addr_min, uint8_t addr_max)
{
 8009008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800900c:	460c      	mov	r4, r1
 800900e:	4616      	mov	r6, r2
 8009010:	4607      	mov	r7, r0
	printf("Scanning I2C devices ...\r\n");
 8009012:	4815      	ldr	r0, [pc, #84]	@ (8009068 <i2c_scan+0x60>)
 8009014:	f007 fbde 	bl	80107d4 <puts>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8009018:	42b4      	cmp	r4, r6
 800901a:	d823      	bhi.n	8009064 <i2c_scan+0x5c>
		status = HAL_I2C_IsDeviceReady(i2c, addr << 1, 3, 500);
		osDelay(100);
		if (status == HAL_OK) {
			    	printf("Device found on %#x \r\n", addr);
			    } else {
			    	printf("Device NOTfound on %#x \r\n", addr);
 800901c:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 800906c <i2c_scan+0x64>
			    	printf("Device found on %#x \r\n", addr);
 8009020:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8009070 <i2c_scan+0x68>
 8009024:	e006      	b.n	8009034 <i2c_scan+0x2c>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8009026:	3401      	adds	r4, #1
			    	printf("Device found on %#x \r\n", addr);
 8009028:	4648      	mov	r0, r9
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 800902a:	b2e4      	uxtb	r4, r4
			    	printf("Device found on %#x \r\n", addr);
 800902c:	f007 fb6a 	bl	8010704 <iprintf>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8009030:	42a6      	cmp	r6, r4
 8009032:	d317      	bcc.n	8009064 <i2c_scan+0x5c>
		status = HAL_I2C_IsDeviceReady(i2c, addr << 1, 3, 500);
 8009034:	0061      	lsls	r1, r4, #1
 8009036:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800903a:	2203      	movs	r2, #3
 800903c:	4638      	mov	r0, r7
 800903e:	f002 fc05 	bl	800b84c <HAL_I2C_IsDeviceReady>
 8009042:	4605      	mov	r5, r0
		osDelay(100);
 8009044:	2064      	movs	r0, #100	@ 0x64
 8009046:	f004 fb97 	bl	800d778 <osDelay>
			    	printf("Device NOTfound on %#x \r\n", addr);
 800904a:	4621      	mov	r1, r4
 800904c:	4640      	mov	r0, r8
		if (status == HAL_OK) {
 800904e:	2d00      	cmp	r5, #0
 8009050:	d0e9      	beq.n	8009026 <i2c_scan+0x1e>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8009052:	3401      	adds	r4, #1
			    	printf("Device NOTfound on %#x \r\n", addr);
 8009054:	f007 fb56 	bl	8010704 <iprintf>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8009058:	b2e4      	uxtb	r4, r4
			    	osDelay(100);
 800905a:	2064      	movs	r0, #100	@ 0x64
 800905c:	f004 fb8c 	bl	800d778 <osDelay>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8009060:	42a6      	cmp	r6, r4
 8009062:	d2e7      	bcs.n	8009034 <i2c_scan+0x2c>
			    }
	}
}
 8009064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009068:	08016540 	.word	0x08016540
 800906c:	08016574 	.word	0x08016574
 8009070:	0801655c 	.word	0x0801655c

08009074 <byteswap16>:
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8009074:	ba40      	rev16	r0, r0

uint16_t byteswap16 (uint16_t bytes)
{
//	return ((bytes & 0xFF) << 8) | ((bytes >> 8) & 0xFF);
	return __REV16(bytes);
}
 8009076:	b280      	uxth	r0, r0
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop

0800907c <SET_DPS368>:
{
	TCA9543A_SelectChannel(0);
}

void SET_DPS368()
{
 800907c:	b500      	push	{lr}
		I2C2TCA_NRST();
 800907e:	2201      	movs	r2, #1
{
 8009080:	b087      	sub	sp, #28
		I2C2TCA_NRST();
 8009082:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009086:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800908a:	f001 fe63 	bl	800ad54 <HAL_GPIO_WritePin>
		osDelay(1);
 800908e:	2001      	movs	r0, #1
 8009090:	f004 fb72 	bl	800d778 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009094:	2301      	movs	r3, #1
 8009096:	f10d 0217 	add.w	r2, sp, #23
 800909a:	f04f 31ff 	mov.w	r1, #4294967295
 800909e:	e9cd 3101 	strd	r3, r1, [sp, #4]
		uint8_t data = 1 << channel;
 80090a2:	f04f 0c02 	mov.w	ip, #2
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80090a6:	9200      	str	r2, [sp, #0]
 80090a8:	21e4      	movs	r1, #228	@ 0xe4
 80090aa:	2200      	movs	r2, #0
 80090ac:	4803      	ldr	r0, [pc, #12]	@ (80090bc <SET_DPS368+0x40>)
		uint8_t data = 1 << channel;
 80090ae:	f88d c017 	strb.w	ip, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80090b2:	f002 f987 	bl	800b3c4 <HAL_I2C_Mem_Write>
	TCA9543A_SelectChannel(1);
}
 80090b6:	b007      	add	sp, #28
 80090b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80090bc:	200017ac 	.word	0x200017ac

080090c0 <TMP117_check>:



uint8_t TMP117_check()
{
 80090c0:	b510      	push	{r4, lr}
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR << 1, 3, 500);
 80090c2:	4818      	ldr	r0, [pc, #96]	@ (8009124 <TMP117_check+0x64>)
{
 80090c4:	b086      	sub	sp, #24
	status = HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR << 1, 3, 500);
 80090c6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80090ca:	2203      	movs	r2, #3
 80090cc:	2192      	movs	r1, #146	@ 0x92
 80090ce:	f002 fbbd 	bl	800b84c <HAL_I2C_IsDeviceReady>
 80090d2:	4604      	mov	r4, r0
	osDelay(100);
 80090d4:	2064      	movs	r0, #100	@ 0x64
 80090d6:	f004 fb4f 	bl	800d778 <osDelay>
	if (status == HAL_OK) {
 80090da:	b9f4      	cbnz	r4, 800911a <TMP117_check+0x5a>
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80090dc:	2108      	movs	r1, #8
 80090de:	2202      	movs	r2, #2
 80090e0:	f10d 0316 	add.w	r3, sp, #22
 80090e4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	220f      	movs	r2, #15
 80090ec:	2301      	movs	r3, #1
 80090ee:	480d      	ldr	r0, [pc, #52]	@ (8009124 <TMP117_check+0x64>)
 80090f0:	2192      	movs	r1, #146	@ 0x92
 80090f2:	f002 fa8d 	bl	800b610 <HAL_I2C_Mem_Read>
    *value = tmp;
 80090f6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
		uint16_t value;
		i2c_read16(&hi2c2, TMP117_ID_REG, &value, TMP117_ADDR << 1);
		if(value == TMP117_ID) {printf("TMP117 OK\r\n"); return 1;} else {printf("NOT TMP117\r\n"); return 0;}
 80090fa:	f241 7301 	movw	r3, #5889	@ 0x1701
 80090fe:	429a      	cmp	r2, r3
 8009100:	d005      	beq.n	800910e <TMP117_check+0x4e>
 8009102:	4809      	ldr	r0, [pc, #36]	@ (8009128 <TMP117_check+0x68>)
 8009104:	f007 fb66 	bl	80107d4 <puts>
 8009108:	2000      	movs	r0, #0
	} else {printf("TMP117 FAILED\r\n"); return 0;}
}
 800910a:	b006      	add	sp, #24
 800910c:	bd10      	pop	{r4, pc}
		if(value == TMP117_ID) {printf("TMP117 OK\r\n"); return 1;} else {printf("NOT TMP117\r\n"); return 0;}
 800910e:	4807      	ldr	r0, [pc, #28]	@ (800912c <TMP117_check+0x6c>)
 8009110:	f007 fb60 	bl	80107d4 <puts>
 8009114:	2001      	movs	r0, #1
}
 8009116:	b006      	add	sp, #24
 8009118:	bd10      	pop	{r4, pc}
	} else {printf("TMP117 FAILED\r\n"); return 0;}
 800911a:	4805      	ldr	r0, [pc, #20]	@ (8009130 <TMP117_check+0x70>)
 800911c:	f007 fb5a 	bl	80107d4 <puts>
 8009120:	e7f2      	b.n	8009108 <TMP117_check+0x48>
 8009122:	bf00      	nop
 8009124:	200017ac 	.word	0x200017ac
 8009128:	0801659c 	.word	0x0801659c
 800912c:	08016590 	.word	0x08016590
 8009130:	080165a8 	.word	0x080165a8

08009134 <TMP117_get_temp>:
	osDelay(1);

}

float TMP117_get_temp()
{
 8009134:	b500      	push	{lr}
 8009136:	b087      	sub	sp, #28
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8009138:	f10d 0316 	add.w	r3, sp, #22
 800913c:	2108      	movs	r1, #8
 800913e:	2202      	movs	r2, #2
 8009140:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	2200      	movs	r2, #0
 8009148:	2301      	movs	r3, #1
 800914a:	2192      	movs	r1, #146	@ 0x92
 800914c:	4806      	ldr	r0, [pc, #24]	@ (8009168 <TMP117_get_temp+0x34>)
 800914e:	f002 fa5f 	bl	800b610 <HAL_I2C_Mem_Read>
    *value = tmp;
 8009152:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8009156:	ba5b      	rev16	r3, r3
	uint16_t value;
	int16_t raw;
    i2c_read16(&hi2c2, TMP117_TEMP_REG, &value, TMP117_ADDR << 1);
    raw = byteswap16(value);
    return (float)(raw * TMP117_RESOLUTION);
 8009158:	b21b      	sxth	r3, r3
 800915a:	ee00 3a10 	vmov	s0, r3
}
 800915e:	eeba 0aec 	vcvt.f32.s32	s0, s0, #7
 8009162:	b007      	add	sp, #28
 8009164:	f85d fb04 	ldr.w	pc, [sp], #4
 8009168:	200017ac 	.word	0x200017ac

0800916c <TMP117_start_meas>:

void TMP117_start_meas(uint8_t avg_mode)
{
 800916c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009170:	b086      	sub	sp, #24
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8009172:	4e1d      	ldr	r6, [pc, #116]	@ (80091e8 <TMP117_start_meas+0x7c>)
	uint16_t tmp = value;
 8009174:	f44f 7308 	mov.w	r3, #544	@ 0x220
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8009178:	f04f 0808 	mov.w	r8, #8
 800917c:	2502      	movs	r5, #2
 800917e:	f10d 0716 	add.w	r7, sp, #22
	uint16_t tmp = value;
 8009182:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8009186:	2301      	movs	r3, #1
 8009188:	461a      	mov	r2, r3
 800918a:	2192      	movs	r1, #146	@ 0x92
 800918c:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8009190:	9700      	str	r7, [sp, #0]
{
 8009192:	4604      	mov	r4, r0
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8009194:	4630      	mov	r0, r6
 8009196:	f002 f915 	bl	800b3c4 <HAL_I2C_Mem_Write>
	osDelay(1);
 800919a:	2001      	movs	r0, #1
 800919c:	f004 faec 	bl	800d778 <osDelay>
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80091a0:	2301      	movs	r3, #1
 80091a2:	461a      	mov	r2, r3
 80091a4:	e9cd 5801 	strd	r5, r8, [sp, #4]
 80091a8:	9700      	str	r7, [sp, #0]
 80091aa:	2192      	movs	r1, #146	@ 0x92
 80091ac:	4630      	mov	r0, r6
 80091ae:	f002 fa2f 	bl	800b610 <HAL_I2C_Mem_Read>
    *value = tmp;
 80091b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80091b6:	ba5b      	rev16	r3, r3
	uint16_t config, swapconfig;
	TMP117_RST_Conf_Reg();
	i2c_read16(&hi2c2, TMP117_CONF_REG, &config, TMP117_ADDR << 1);
	swapconfig = byteswap16(config);
//	printf("REG in TMP (hex): %x \r\n", swapconfig);
	swapconfig |= avg_mode;
 80091b8:	431c      	orrs	r4, r3
 80091ba:	b2a4      	uxth	r4, r4
	return __REV16(bytes);
 80091bc:	f444 6440 	orr.w	r4, r4, #3072	@ 0xc00
 80091c0:	ba64      	rev16	r4, r4
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80091c2:	2301      	movs	r3, #1
 80091c4:	e9cd 7500 	strd	r7, r5, [sp]
 80091c8:	f8cd 8008 	str.w	r8, [sp, #8]
 80091cc:	4630      	mov	r0, r6
 80091ce:	461a      	mov	r2, r3
 80091d0:	2192      	movs	r1, #146	@ 0x92
	return __REV16(bytes);
 80091d2:	f8ad 4016 	strh.w	r4, [sp, #22]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80091d6:	f002 f8f5 	bl	800b3c4 <HAL_I2C_Mem_Write>
	swapconfig |= one_shot;
	config = byteswap16(swapconfig);
	i2c_write16(&hi2c2, TMP117_CONF_REG, config, TMP117_ADDR << 1);
	osDelay(2);
 80091da:	4628      	mov	r0, r5
}
 80091dc:	b006      	add	sp, #24
 80091de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	osDelay(2);
 80091e2:	f004 bac9 	b.w	800d778 <osDelay>
 80091e6:	bf00      	nop
 80091e8:	200017ac 	.word	0x200017ac

080091ec <tmp117_avr_conf>:

uint16_t tmp117_avr_conf(uint8_t sensor_conf)
{
    switch (sensor_conf) {
 80091ec:	2802      	cmp	r0, #2
{
 80091ee:	b508      	push	{r3, lr}
    switch (sensor_conf) {
 80091f0:	d008      	beq.n	8009204 <tmp117_avr_conf+0x18>
 80091f2:	2803      	cmp	r0, #3
 80091f4:	d010      	beq.n	8009218 <tmp117_avr_conf+0x2c>
 80091f6:	2801      	cmp	r0, #1
 80091f8:	d009      	beq.n	800920e <tmp117_avr_conf+0x22>
        case 0:
        	printf("TMP117 set no_avg\r\n");
 80091fa:	480a      	ldr	r0, [pc, #40]	@ (8009224 <tmp117_avr_conf+0x38>)
 80091fc:	f007 faea 	bl	80107d4 <puts>
            return no_avg;
 8009200:	2000      	movs	r0, #0
            return avg64;
        default:
        	printf("TMP117 set no_avg\r\n");
            return no_avg;
    }
}
 8009202:	bd08      	pop	{r3, pc}
        	printf("TMP117 set avg32\r\n");
 8009204:	4808      	ldr	r0, [pc, #32]	@ (8009228 <tmp117_avr_conf+0x3c>)
 8009206:	f007 fae5 	bl	80107d4 <puts>
            return avg32;
 800920a:	2040      	movs	r0, #64	@ 0x40
}
 800920c:	bd08      	pop	{r3, pc}
        	printf("TMP117 set avg8\r\n");
 800920e:	4807      	ldr	r0, [pc, #28]	@ (800922c <tmp117_avr_conf+0x40>)
 8009210:	f007 fae0 	bl	80107d4 <puts>
            return avg8;
 8009214:	2020      	movs	r0, #32
}
 8009216:	bd08      	pop	{r3, pc}
        	printf("TMP117 set avg64\r\n");
 8009218:	4805      	ldr	r0, [pc, #20]	@ (8009230 <tmp117_avr_conf+0x44>)
 800921a:	f007 fadb 	bl	80107d4 <puts>
            return avg64;
 800921e:	2060      	movs	r0, #96	@ 0x60
}
 8009220:	bd08      	pop	{r3, pc}
 8009222:	bf00      	nop
 8009224:	080165b8 	.word	0x080165b8
 8009228:	080165e0 	.word	0x080165e0
 800922c:	080165cc 	.word	0x080165cc
 8009230:	080165f4 	.word	0x080165f4

08009234 <MS8607_check>:

uint8_t MS8607_check()
{
 8009234:	b510      	push	{r4, lr}
	ms8607_init();
 8009236:	f7fd fb4b 	bl	80068d0 <ms8607_init>
	if(ms8607_is_connected()) {printf("MS8607 OK\r\n"); return 1;
 800923a:	f7fd fb5b 	bl	80068f4 <ms8607_is_connected>
 800923e:	b120      	cbz	r0, 800924a <MS8607_check+0x16>
 8009240:	4805      	ldr	r0, [pc, #20]	@ (8009258 <MS8607_check+0x24>)
 8009242:	f007 fac7 	bl	80107d4 <puts>
 8009246:	2001      	movs	r0, #1
	} else {printf("MS8607 FAIL\r\n"); return 0;};
	ms8607_reset();
}
 8009248:	bd10      	pop	{r4, pc}
 800924a:	4604      	mov	r4, r0
	} else {printf("MS8607 FAIL\r\n"); return 0;};
 800924c:	4803      	ldr	r0, [pc, #12]	@ (800925c <MS8607_check+0x28>)
 800924e:	f007 fac1 	bl	80107d4 <puts>
 8009252:	4620      	mov	r0, r4
}
 8009254:	bd10      	pop	{r4, pc}
 8009256:	bf00      	nop
 8009258:	08016608 	.word	0x08016608
 800925c:	08016614 	.word	0x08016614

08009260 <MS8607_get_temp>:




float MS8607_get_temp()
{
 8009260:	b500      	push	{lr}
 8009262:	b083      	sub	sp, #12
	float temp;
	ms8607_read_temperature(&temp);
 8009264:	a801      	add	r0, sp, #4
 8009266:	f7fd fbd9 	bl	8006a1c <ms8607_read_temperature>
//	printf("MS Temp: %f\r\n",temp);
	return temp;
}
 800926a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800926e:	b003      	add	sp, #12
 8009270:	f85d fb04 	ldr.w	pc, [sp], #4

08009274 <MS8607_get_press>:

float MS8607_get_press()
{
 8009274:	b500      	push	{lr}
 8009276:	b083      	sub	sp, #12
	float press;
	ms8607_read_pressure(&press);
 8009278:	a801      	add	r0, sp, #4
 800927a:	f7fd fccb 	bl	8006c14 <ms8607_read_pressure>
//	printf("MS Press: %f\r\n",press);
	return press;
}
 800927e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009282:	b003      	add	sp, #12
 8009284:	f85d fb04 	ldr.w	pc, [sp], #4

08009288 <MS8607_get_hum>:

float MS8607_get_hum()
{
 8009288:	b500      	push	{lr}
 800928a:	b083      	sub	sp, #12
	float hum;
	ms8607_read_humidity(&hum);
 800928c:	a801      	add	r0, sp, #4
 800928e:	f7fd fb4b 	bl	8006928 <ms8607_read_humidity>
//	printf("MS Hum: %f\r\n",hum);
	return hum;
}
 8009292:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009296:	b003      	add	sp, #12
 8009298:	f85d fb04 	ldr.w	pc, [sp], #4

0800929c <SHTC3_check>:
	else return 0;
}


uint8_t SHTC3_check()
{
 800929c:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef status, status2;
	uint8_t data[2];
	status = HAL_I2C_IsDeviceReady(&hi2c2, SHTC3_ADDR_WRITE, 3, 500);
 800929e:	4829      	ldr	r0, [pc, #164]	@ (8009344 <SHTC3_check+0xa8>)
{
 80092a0:	b085      	sub	sp, #20
	status = HAL_I2C_IsDeviceReady(&hi2c2, SHTC3_ADDR_WRITE, 3, 500);
 80092a2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80092a6:	2203      	movs	r2, #3
 80092a8:	21e0      	movs	r1, #224	@ 0xe0
 80092aa:	f002 facf 	bl	800b84c <HAL_I2C_IsDeviceReady>
 80092ae:	4604      	mov	r4, r0
	osDelay(2);
 80092b0:	2002      	movs	r0, #2
 80092b2:	f004 fa61 	bl	800d778 <osDelay>
	if (status == HAL_OK) {
 80092b6:	bbac      	cbnz	r4, 8009324 <SHTC3_check+0x88>
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80092b8:	2396      	movs	r3, #150	@ 0x96
	uint16_t command = SHTC3_CMD_WAKEUP;
 80092ba:	f241 7135 	movw	r1, #5941	@ 0x1735
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80092be:	9300      	str	r3, [sp, #0]
	uint16_t command = SHTC3_CMD_WAKEUP;
 80092c0:	f8ad 100e 	strh.w	r1, [sp, #14]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80092c4:	481f      	ldr	r0, [pc, #124]	@ (8009344 <SHTC3_check+0xa8>)
 80092c6:	21e0      	movs	r1, #224	@ 0xe0
 80092c8:	2302      	movs	r3, #2
 80092ca:	f10d 020e 	add.w	r2, sp, #14
 80092ce:	f001 fedf 	bl	800b090 <HAL_I2C_Master_Transmit>
	if(status == HAL_OK) { return 1; }
 80092d2:	4601      	mov	r1, r0
 80092d4:	bb10      	cbnz	r0, 800931c <SHTC3_check+0x80>
		SHTC3_wakeup();
		uint16_t command = SHTC3_CMD_READ_ID;
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80092d6:	2596      	movs	r5, #150	@ 0x96
		uint16_t command = SHTC3_CMD_READ_ID;
 80092d8:	f64c 00ef 	movw	r0, #51439	@ 0xc8ef
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80092dc:	2302      	movs	r3, #2
 80092de:	f10d 020e 	add.w	r2, sp, #14
 80092e2:	21e0      	movs	r1, #224	@ 0xe0
		uint16_t command = SHTC3_CMD_READ_ID;
 80092e4:	f8ad 000e 	strh.w	r0, [sp, #14]
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80092e8:	9500      	str	r5, [sp, #0]
 80092ea:	4816      	ldr	r0, [pc, #88]	@ (8009344 <SHTC3_check+0xa8>)
 80092ec:	f001 fed0 	bl	800b090 <HAL_I2C_Master_Transmit>
		status2 = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 2, 150);
 80092f0:	4814      	ldr	r0, [pc, #80]	@ (8009344 <SHTC3_check+0xa8>)
 80092f2:	9500      	str	r5, [sp, #0]
 80092f4:	2302      	movs	r3, #2
 80092f6:	aa03      	add	r2, sp, #12
 80092f8:	21e1      	movs	r1, #225	@ 0xe1
 80092fa:	f001 ff93 	bl	800b224 <HAL_I2C_Master_Receive>
		  if (status2 == HAL_OK) {
 80092fe:	b9d0      	cbnz	r0, 8009336 <SHTC3_check+0x9a>
			  uint16_t id = data[0] << 8 | data[1];
			  uint16_t code = id & SHTC3_PRODUCT_CODE_MASK;
			  if (code == 0x807) {
 8009300:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8009304:	f640 033f 	movw	r3, #2111	@ 0x83f
 8009308:	ba52      	rev16	r2, r2
 800930a:	4013      	ands	r3, r2
 800930c:	f640 0207 	movw	r2, #2055	@ 0x807
 8009310:	4293      	cmp	r3, r2
 8009312:	d00b      	beq.n	800932c <SHTC3_check+0x90>
//				  SHTC3_start_meas(0);
//				  SHTC3_sleep();
				  return 1;
			  }
		  } else {printf("NO SHTC3\r\n"); return 0;}
	} else {printf("SHTC3 FAILED\r\n"); return 0;}
 8009314:	2400      	movs	r4, #0
	return 0;
}
 8009316:	4620      	mov	r0, r4
 8009318:	b005      	add	sp, #20
 800931a:	bd30      	pop	{r4, r5, pc}
	else {printf("SHTC3 Wake up fail %x\r\n", status); return 0; }
 800931c:	480a      	ldr	r0, [pc, #40]	@ (8009348 <SHTC3_check+0xac>)
 800931e:	f007 f9f1 	bl	8010704 <iprintf>
 8009322:	e7d8      	b.n	80092d6 <SHTC3_check+0x3a>
	} else {printf("SHTC3 FAILED\r\n"); return 0;}
 8009324:	4809      	ldr	r0, [pc, #36]	@ (800934c <SHTC3_check+0xb0>)
 8009326:	f007 fa55 	bl	80107d4 <puts>
 800932a:	e7f3      	b.n	8009314 <SHTC3_check+0x78>
				  printf("SHTC3 OK\r\n");
 800932c:	4808      	ldr	r0, [pc, #32]	@ (8009350 <SHTC3_check+0xb4>)
 800932e:	f007 fa51 	bl	80107d4 <puts>
				  return 1;
 8009332:	2401      	movs	r4, #1
 8009334:	e7ef      	b.n	8009316 <SHTC3_check+0x7a>
		  } else {printf("NO SHTC3\r\n"); return 0;}
 8009336:	4807      	ldr	r0, [pc, #28]	@ (8009354 <SHTC3_check+0xb8>)
 8009338:	f007 fa4c 	bl	80107d4 <puts>
}
 800933c:	4620      	mov	r0, r4
 800933e:	b005      	add	sp, #20
 8009340:	bd30      	pop	{r4, r5, pc}
 8009342:	bf00      	nop
 8009344:	200017ac 	.word	0x200017ac
 8009348:	08016624 	.word	0x08016624
 800934c:	08016654 	.word	0x08016654
 8009350:	0801663c 	.word	0x0801663c
 8009354:	08016648 	.word	0x08016648

08009358 <SHTC3_start_meas>:

uint8_t SHTC3_start_meas(uint8_t mode)
{
 8009358:	b510      	push	{r4, lr}
 800935a:	b084      	sub	sp, #16
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800935c:	2396      	movs	r3, #150	@ 0x96
	uint16_t command = SHTC3_CMD_WAKEUP;
 800935e:	f241 7135 	movw	r1, #5941	@ 0x1735
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8009362:	9300      	str	r3, [sp, #0]
{
 8009364:	4604      	mov	r4, r0
	uint16_t command = SHTC3_CMD_WAKEUP;
 8009366:	f8ad 100e 	strh.w	r1, [sp, #14]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800936a:	4810      	ldr	r0, [pc, #64]	@ (80093ac <SHTC3_start_meas+0x54>)
 800936c:	2302      	movs	r3, #2
 800936e:	f10d 020e 	add.w	r2, sp, #14
 8009372:	21e0      	movs	r1, #224	@ 0xe0
 8009374:	f001 fe8c 	bl	800b090 <HAL_I2C_Master_Transmit>
	if(status == HAL_OK) { return 1; }
 8009378:	b998      	cbnz	r0, 80093a2 <SHTC3_start_meas+0x4a>
	HAL_StatusTypeDef status;
	uint16_t command;
	SHTC3_wakeup();
	if(mode == 0) command = SHTC3_CMD_TEMP_HUM;
 800937a:	f24a 227c 	movw	r2, #41596	@ 0xa27c
	else command = SHTC3_CMD_TEMP_HUM_LP;
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800937e:	2396      	movs	r3, #150	@ 0x96
	if(mode == 0) command = SHTC3_CMD_TEMP_HUM;
 8009380:	f645 0c64 	movw	ip, #22628	@ 0x5864
 8009384:	2c00      	cmp	r4, #0
 8009386:	bf08      	it	eq
 8009388:	4694      	moveq	ip, r2
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	f10d 020e 	add.w	r2, sp, #14
 8009390:	2302      	movs	r3, #2
 8009392:	21e0      	movs	r1, #224	@ 0xe0
 8009394:	4805      	ldr	r0, [pc, #20]	@ (80093ac <SHTC3_start_meas+0x54>)
 8009396:	f8ad c00e 	strh.w	ip, [sp, #14]
 800939a:	f001 fe79 	bl	800b090 <HAL_I2C_Master_Transmit>
	return status; //0 = OK
}
 800939e:	b004      	add	sp, #16
 80093a0:	bd10      	pop	{r4, pc}
 80093a2:	4601      	mov	r1, r0
	else {printf("SHTC3 Wake up fail %x\r\n", status); return 0; }
 80093a4:	4802      	ldr	r0, [pc, #8]	@ (80093b0 <SHTC3_start_meas+0x58>)
 80093a6:	f007 f9ad 	bl	8010704 <iprintf>
 80093aa:	e7e6      	b.n	800937a <SHTC3_start_meas+0x22>
 80093ac:	200017ac 	.word	0x200017ac
 80093b0:	08016624 	.word	0x08016624

080093b4 <SHTC3_read_values>:

uint8_t SHTC3_read_values(uint8_t* result)
{
 80093b4:	b500      	push	{lr}
 80093b6:	b083      	sub	sp, #12
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)result, 6, 500);
 80093b8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
{
 80093bc:	4602      	mov	r2, r0
	status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)result, 6, 500);
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	21e1      	movs	r1, #225	@ 0xe1
 80093c2:	2306      	movs	r3, #6
 80093c4:	4804      	ldr	r0, [pc, #16]	@ (80093d8 <SHTC3_read_values+0x24>)
 80093c6:	f001 ff2d 	bl	800b224 <HAL_I2C_Master_Receive>
	if (status != HAL_OK) {
		return 0;
	} 	else {
		return 1;
	};
}
 80093ca:	fab0 f080 	clz	r0, r0
 80093ce:	0940      	lsrs	r0, r0, #5
 80093d0:	b003      	add	sp, #12
 80093d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80093d6:	bf00      	nop
 80093d8:	200017ac 	.word	0x200017ac

080093dc <SHTC3_get_temp>:

float SHTC3_get_temp(uint8_t* result)
{
 80093dc:	b530      	push	{r4, r5, lr}
 80093de:	8803      	ldrh	r3, [r0, #0]
 80093e0:	b083      	sub	sp, #12
 80093e2:	ba5b      	rev16	r3, r3
 80093e4:	4604      	mov	r4, r0
 80093e6:	b29d      	uxth	r5, r3
	uint16_t raw_temp = result[0] << 8 | result[1];
	uint8_t data[2] = {raw_temp >> 8, raw_temp & 0xFF};
	uint8_t crc_hal = HALcalculateCRC(data,2);
 80093e8:	2102      	movs	r1, #2
	uint8_t data[2] = {raw_temp >> 8, raw_temp & 0xFF};
 80093ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
	uint8_t crc_hal = HALcalculateCRC(data,2);
 80093ee:	a801      	add	r0, sp, #4
	uint8_t data[2] = {raw_temp >> 8, raw_temp & 0xFF};
 80093f0:	f88d 3004 	strb.w	r3, [sp, #4]
 80093f4:	f88d 5005 	strb.w	r5, [sp, #5]
	uint8_t crc_hal = HALcalculateCRC(data,2);
 80093f8:	f7fe f90c 	bl	8007614 <HALcalculateCRC>
	if(result[2] == crc_hal) {
 80093fc:	78a3      	ldrb	r3, [r4, #2]
 80093fe:	4283      	cmp	r3, r0
 8009400:	d006      	beq.n	8009410 <SHTC3_get_temp+0x34>
		return (float)(((raw_temp * 175.0f) / 65535.0f) - 45.0f);
	}
	else {printf("Bad CRC\r\n");};
 8009402:	480c      	ldr	r0, [pc, #48]	@ (8009434 <SHTC3_get_temp+0x58>)
 8009404:	f007 f9e6 	bl	80107d4 <puts>
	return -1000.0;
 8009408:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8009438 <SHTC3_get_temp+0x5c>
}
 800940c:	b003      	add	sp, #12
 800940e:	bd30      	pop	{r4, r5, pc}
		return (float)(((raw_temp * 175.0f) / 65535.0f) - 45.0f);
 8009410:	ee07 5a90 	vmov	s15, r5
 8009414:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800943c <SHTC3_get_temp+0x60>
 8009418:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8009440 <SHTC3_get_temp+0x64>
 800941c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009424:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8009444 <SHTC3_get_temp+0x68>
 8009428:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 800942c:	ee30 0a47 	vsub.f32	s0, s0, s14
}
 8009430:	b003      	add	sp, #12
 8009432:	bd30      	pop	{r4, r5, pc}
 8009434:	08016664 	.word	0x08016664
 8009438:	c47a0000 	.word	0xc47a0000
 800943c:	432f0000 	.word	0x432f0000
 8009440:	477fff00 	.word	0x477fff00
 8009444:	42340000 	.word	0x42340000

08009448 <SHTC3_get_hum>:

float SHTC3_get_hum(uint8_t* result)
{
 8009448:	b530      	push	{r4, r5, lr}
 800944a:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800944e:	b083      	sub	sp, #12
 8009450:	ba5b      	rev16	r3, r3
 8009452:	4604      	mov	r4, r0
 8009454:	b29d      	uxth	r5, r3
	uint16_t raw_hum = result[3] << 8 | result[4];
	uint8_t data[2] = {raw_hum >> 8, raw_hum & 0xFF};
	uint8_t crc_hal = HALcalculateCRC(data,2);
 8009456:	2102      	movs	r1, #2
	uint8_t data[2] = {raw_hum >> 8, raw_hum & 0xFF};
 8009458:	f3c3 2307 	ubfx	r3, r3, #8, #8
	uint8_t crc_hal = HALcalculateCRC(data,2);
 800945c:	a801      	add	r0, sp, #4
	uint8_t data[2] = {raw_hum >> 8, raw_hum & 0xFF};
 800945e:	f88d 3004 	strb.w	r3, [sp, #4]
 8009462:	f88d 5005 	strb.w	r5, [sp, #5]
	uint8_t crc_hal = HALcalculateCRC(data,2);
 8009466:	f7fe f8d5 	bl	8007614 <HALcalculateCRC>
	if(result[5] == crc_hal) {
 800946a:	7963      	ldrb	r3, [r4, #5]
 800946c:	4283      	cmp	r3, r0
 800946e:	d006      	beq.n	800947e <SHTC3_get_hum+0x36>
		return (float)((raw_hum * 100.0f) / 65535.0f);
	}
	else {printf("Bad CRC\r\n");};
 8009470:	480a      	ldr	r0, [pc, #40]	@ (800949c <SHTC3_get_hum+0x54>)
 8009472:	f007 f9af 	bl	80107d4 <puts>
	return -1000.0;
 8009476:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80094a0 <SHTC3_get_hum+0x58>
}
 800947a:	b003      	add	sp, #12
 800947c:	bd30      	pop	{r4, r5, pc}
		return (float)((raw_hum * 100.0f) / 65535.0f);
 800947e:	ee07 5a90 	vmov	s15, r5
 8009482:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80094a4 <SHTC3_get_hum+0x5c>
 8009486:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80094a8 <SHTC3_get_hum+0x60>
 800948a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800948e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009492:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 8009496:	b003      	add	sp, #12
 8009498:	bd30      	pop	{r4, r5, pc}
 800949a:	bf00      	nop
 800949c:	08016664 	.word	0x08016664
 80094a0:	c47a0000 	.word	0xc47a0000
 80094a4:	42c80000 	.word	0x42c80000
 80094a8:	477fff00 	.word	0x477fff00

080094ac <BME280_check>:

uint8_t BME280_check()
{
 80094ac:	b570      	push	{r4, r5, r6, lr}
		I2C2TCA_NRST();
 80094ae:	2201      	movs	r2, #1
{
 80094b0:	b086      	sub	sp, #24
		I2C2TCA_NRST();
 80094b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80094b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80094ba:	f001 fc4b 	bl	800ad54 <HAL_GPIO_WritePin>
		osDelay(1);
 80094be:	2001      	movs	r0, #1
 80094c0:	f004 f95a 	bl	800d778 <osDelay>
		uint8_t data = 1 << channel;
 80094c4:	2401      	movs	r4, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80094c6:	f04f 31ff 	mov.w	r1, #4294967295
 80094ca:	f10d 0617 	add.w	r6, sp, #23
 80094ce:	e9cd 4101 	strd	r4, r1, [sp, #4]
 80094d2:	4623      	mov	r3, r4
 80094d4:	2200      	movs	r2, #0
 80094d6:	21e4      	movs	r1, #228	@ 0xe4
 80094d8:	4817      	ldr	r0, [pc, #92]	@ (8009538 <BME280_check+0x8c>)
 80094da:	9600      	str	r6, [sp, #0]
		uint8_t data = 1 << channel;
 80094dc:	f88d 4017 	strb.w	r4, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80094e0:	f001 ff70 	bl	800b3c4 <HAL_I2C_Mem_Write>
	uint8_t value;
	SET_BME280();
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, BMP280_I2C_ADDRESS_1 << 1, 3, 150);
 80094e4:	4814      	ldr	r0, [pc, #80]	@ (8009538 <BME280_check+0x8c>)
 80094e6:	2396      	movs	r3, #150	@ 0x96
 80094e8:	2203      	movs	r2, #3
 80094ea:	21ee      	movs	r1, #238	@ 0xee
 80094ec:	f002 f9ae 	bl	800b84c <HAL_I2C_IsDeviceReady>
 80094f0:	4605      	mov	r5, r0
	osDelay(100);
 80094f2:	2064      	movs	r0, #100	@ 0x64
 80094f4:	f004 f940 	bl	800d778 <osDelay>
	if (status == HAL_OK) {
 80094f8:	b9cd      	cbnz	r5, 800952e <BME280_check+0x82>
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 80094fa:	2308      	movs	r3, #8
 80094fc:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8009500:	480d      	ldr	r0, [pc, #52]	@ (8009538 <BME280_check+0x8c>)
 8009502:	9600      	str	r6, [sp, #0]
 8009504:	4623      	mov	r3, r4
 8009506:	22d0      	movs	r2, #208	@ 0xd0
 8009508:	21ee      	movs	r1, #238	@ 0xee
 800950a:	f002 f881 	bl	800b610 <HAL_I2C_Mem_Read>
    *value = tmp;
 800950e:	f89d 3017 	ldrb.w	r3, [sp, #23]
		i2c_read8(&hi2c2, BMP280_REG_ID, &value, BMP280_I2C_ADDRESS_1 << 1);
		if(value == BME280_CHIP_ID) {printf("BME280 OK\r\n"); return 1;} else {printf("NOT BME280\r\n"); return 0;}
 8009512:	2b60      	cmp	r3, #96	@ 0x60
 8009514:	d005      	beq.n	8009522 <BME280_check+0x76>
 8009516:	4809      	ldr	r0, [pc, #36]	@ (800953c <BME280_check+0x90>)
 8009518:	f007 f95c 	bl	80107d4 <puts>
 800951c:	2000      	movs	r0, #0
	} else {printf("BME280 FAILED\r\n"); return 0;}
	return 0;

}
 800951e:	b006      	add	sp, #24
 8009520:	bd70      	pop	{r4, r5, r6, pc}
		if(value == BME280_CHIP_ID) {printf("BME280 OK\r\n"); return 1;} else {printf("NOT BME280\r\n"); return 0;}
 8009522:	4807      	ldr	r0, [pc, #28]	@ (8009540 <BME280_check+0x94>)
 8009524:	f007 f956 	bl	80107d4 <puts>
 8009528:	4620      	mov	r0, r4
}
 800952a:	b006      	add	sp, #24
 800952c:	bd70      	pop	{r4, r5, r6, pc}
	} else {printf("BME280 FAILED\r\n"); return 0;}
 800952e:	4805      	ldr	r0, [pc, #20]	@ (8009544 <BME280_check+0x98>)
 8009530:	f007 f950 	bl	80107d4 <puts>
 8009534:	e7f2      	b.n	800951c <BME280_check+0x70>
 8009536:	bf00      	nop
 8009538:	200017ac 	.word	0x200017ac
 800953c:	0801667c 	.word	0x0801667c
 8009540:	08016670 	.word	0x08016670
 8009544:	08016688 	.word	0x08016688

08009548 <BME280_init_config>:

void BME280_init_config(uint8_t conf_mode, uint8_t ovr_temp, uint8_t ovr_press, uint8_t ovr_hum, uint8_t coeff)
{
 8009548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800954c:	b087      	sub	sp, #28
 800954e:	4604      	mov	r4, r0
 8009550:	460f      	mov	r7, r1
 8009552:	4690      	mov	r8, r2
		I2C2TCA_NRST();
 8009554:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009558:	2201      	movs	r2, #1
 800955a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
{
 800955e:	461e      	mov	r6, r3
 8009560:	f89d 9038 	ldrb.w	r9, [sp, #56]	@ 0x38
		I2C2TCA_NRST();
 8009564:	f001 fbf6 	bl	800ad54 <HAL_GPIO_WritePin>
		osDelay(1);
 8009568:	2001      	movs	r0, #1
 800956a:	f004 f905 	bl	800d778 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800956e:	f04f 32ff 	mov.w	r2, #4294967295
		uint8_t data = 1 << channel;
 8009572:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009574:	9202      	str	r2, [sp, #8]
 8009576:	f10d 0217 	add.w	r2, sp, #23
 800957a:	9301      	str	r3, [sp, #4]
 800957c:	9200      	str	r2, [sp, #0]
 800957e:	21e4      	movs	r1, #228	@ 0xe4
 8009580:	2200      	movs	r2, #0
 8009582:	4815      	ldr	r0, [pc, #84]	@ (80095d8 <BME280_init_config+0x90>)
		uint8_t data = 1 << channel;
 8009584:	f88d 3017 	strb.w	r3, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009588:	f001 ff1c 	bl	800b3c4 <HAL_I2C_Mem_Write>
	bmp280.params.oversampling_humidity = ovr_hum;
//	bmp280.params.standby = BMP280_STANDBY_250;
	bmp280.addr = BMP280_I2C_ADDRESS_1;
	bmp280.i2c = &hi2c2;

	switch (conf_mode)
 800958c:	2c01      	cmp	r4, #1
 800958e:	bf18      	it	ne
 8009590:	2403      	movne	r4, #3
	{
	case 1:
		bmp280.params.mode = BMP280_MODE_FORCED;
 8009592:	2500      	movs	r5, #0
	bmp280.params.oversampling_humidity = ovr_hum;
 8009594:	4811      	ldr	r0, [pc, #68]	@ (80095dc <BME280_init_config+0x94>)
	bmp280.i2c = &hi2c2;
 8009596:	4b10      	ldr	r3, [pc, #64]	@ (80095d8 <BME280_init_config+0x90>)
	bmp280.params.oversampling_humidity = ovr_hum;
 8009598:	f880 6030 	strb.w	r6, [r0, #48]	@ 0x30
		bmp280.params.mode = BMP280_MODE_FORCED;
 800959c:	f364 0507 	bfi	r5, r4, #0, #8
 80095a0:	f369 250f 	bfi	r5, r9, #8, #8
 80095a4:	f368 4517 	bfi	r5, r8, #16, #8
 80095a8:	4601      	mov	r1, r0
 80095aa:	f367 651f 	bfi	r5, r7, #24, #8
	bmp280.addr = BMP280_I2C_ADDRESS_1;
 80095ae:	2277      	movs	r2, #119	@ 0x77
		bmp280.params.mode = BMP280_MODE_FORCED;
 80095b0:	f841 5f2c 	str.w	r5, [r1, #44]!
	bmp280.addr = BMP280_I2C_ADDRESS_1;
 80095b4:	8482      	strh	r2, [r0, #36]	@ 0x24
	bmp280.i2c = &hi2c2;
 80095b6:	6283      	str	r3, [r0, #40]	@ 0x28
		bmp280.params.mode = BMP280_MODE_NORMAL;
		break;
	default:
		bmp280.params.mode = BMP280_MODE_NORMAL;
	  }
	if(bmp280_init(&bmp280, &bmp280.params)) printf("BME280 init OK\r\n"); else printf("BME280 init FAIL\r\n");
 80095b8:	f7f9 ff10 	bl	80033dc <bmp280_init>
 80095bc:	b128      	cbz	r0, 80095ca <BME280_init_config+0x82>
 80095be:	4808      	ldr	r0, [pc, #32]	@ (80095e0 <BME280_init_config+0x98>)
}
 80095c0:	b007      	add	sp, #28
 80095c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(bmp280_init(&bmp280, &bmp280.params)) printf("BME280 init OK\r\n"); else printf("BME280 init FAIL\r\n");
 80095c6:	f007 b905 	b.w	80107d4 <puts>
 80095ca:	4806      	ldr	r0, [pc, #24]	@ (80095e4 <BME280_init_config+0x9c>)
}
 80095cc:	b007      	add	sp, #28
 80095ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(bmp280_init(&bmp280, &bmp280.params)) printf("BME280 init OK\r\n"); else printf("BME280 init FAIL\r\n");
 80095d2:	f007 b8ff 	b.w	80107d4 <puts>
 80095d6:	bf00      	nop
 80095d8:	200017ac 	.word	0x200017ac
 80095dc:	20001ab4 	.word	0x20001ab4
 80095e0:	08016698 	.word	0x08016698
 80095e4:	080166a8 	.word	0x080166a8

080095e8 <BME280_get_temp>:

float BME280_get_temp()
{
 80095e8:	b530      	push	{r4, r5, lr}
		I2C2TCA_NRST();
 80095ea:	2201      	movs	r2, #1
{
 80095ec:	b089      	sub	sp, #36	@ 0x24
		I2C2TCA_NRST();
 80095ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80095f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80095f6:	f001 fbad 	bl	800ad54 <HAL_GPIO_WritePin>
		osDelay(1);
 80095fa:	2001      	movs	r0, #1
 80095fc:	f004 f8bc 	bl	800d778 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009600:	ad07      	add	r5, sp, #28
		uint8_t data = 1 << channel;
 8009602:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009604:	f04f 32ff 	mov.w	r2, #4294967295
 8009608:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800960c:	480b      	ldr	r0, [pc, #44]	@ (800963c <BME280_get_temp+0x54>)
 800960e:	9500      	str	r5, [sp, #0]
 8009610:	2200      	movs	r2, #0
 8009612:	21e4      	movs	r1, #228	@ 0xe4
		uint8_t data = 1 << channel;
 8009614:	f88d 301c 	strb.w	r3, [sp, #28]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009618:	f001 fed4 	bl	800b3c4 <HAL_I2C_Mem_Write>
	SET_BME280();
	float temp, press, hum;
	while(bmp280_is_measuring(&bmp280));
 800961c:	4c08      	ldr	r4, [pc, #32]	@ (8009640 <BME280_get_temp+0x58>)
 800961e:	4620      	mov	r0, r4
 8009620:	f7fa f8ca 	bl	80037b8 <bmp280_is_measuring>
 8009624:	2800      	cmp	r0, #0
 8009626:	d1fa      	bne.n	800961e <BME280_get_temp+0x36>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 8009628:	462b      	mov	r3, r5
 800962a:	aa06      	add	r2, sp, #24
 800962c:	a905      	add	r1, sp, #20
 800962e:	4804      	ldr	r0, [pc, #16]	@ (8009640 <BME280_get_temp+0x58>)
 8009630:	f7fa fa42 	bl	8003ab8 <bmp280_read_float>
	return temp;
}
 8009634:	ed9d 0a05 	vldr	s0, [sp, #20]
 8009638:	b009      	add	sp, #36	@ 0x24
 800963a:	bd30      	pop	{r4, r5, pc}
 800963c:	200017ac 	.word	0x200017ac
 8009640:	20001ab4 	.word	0x20001ab4

08009644 <BME280_get_press>:

float BME280_get_press()
{
 8009644:	b530      	push	{r4, r5, lr}
		I2C2TCA_NRST();
 8009646:	2201      	movs	r2, #1
{
 8009648:	b089      	sub	sp, #36	@ 0x24
		I2C2TCA_NRST();
 800964a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800964e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009652:	f001 fb7f 	bl	800ad54 <HAL_GPIO_WritePin>
		osDelay(1);
 8009656:	2001      	movs	r0, #1
 8009658:	f004 f88e 	bl	800d778 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800965c:	ad07      	add	r5, sp, #28
		uint8_t data = 1 << channel;
 800965e:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009660:	f04f 32ff 	mov.w	r2, #4294967295
 8009664:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009668:	480b      	ldr	r0, [pc, #44]	@ (8009698 <BME280_get_press+0x54>)
 800966a:	9500      	str	r5, [sp, #0]
 800966c:	2200      	movs	r2, #0
 800966e:	21e4      	movs	r1, #228	@ 0xe4
		uint8_t data = 1 << channel;
 8009670:	f88d 301c 	strb.w	r3, [sp, #28]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009674:	f001 fea6 	bl	800b3c4 <HAL_I2C_Mem_Write>
	SET_BME280();
	float temp, press, hum;
	while(bmp280_is_measuring(&bmp280));
 8009678:	4c08      	ldr	r4, [pc, #32]	@ (800969c <BME280_get_press+0x58>)
 800967a:	4620      	mov	r0, r4
 800967c:	f7fa f89c 	bl	80037b8 <bmp280_is_measuring>
 8009680:	2800      	cmp	r0, #0
 8009682:	d1fa      	bne.n	800967a <BME280_get_press+0x36>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 8009684:	462b      	mov	r3, r5
 8009686:	aa06      	add	r2, sp, #24
 8009688:	a905      	add	r1, sp, #20
 800968a:	4804      	ldr	r0, [pc, #16]	@ (800969c <BME280_get_press+0x58>)
 800968c:	f7fa fa14 	bl	8003ab8 <bmp280_read_float>
	return press;
}
 8009690:	ed9d 0a06 	vldr	s0, [sp, #24]
 8009694:	b009      	add	sp, #36	@ 0x24
 8009696:	bd30      	pop	{r4, r5, pc}
 8009698:	200017ac 	.word	0x200017ac
 800969c:	20001ab4 	.word	0x20001ab4

080096a0 <BME280_get_hum>:

float BME280_get_hum()
{
 80096a0:	b530      	push	{r4, r5, lr}
		I2C2TCA_NRST();
 80096a2:	2201      	movs	r2, #1
{
 80096a4:	b089      	sub	sp, #36	@ 0x24
		I2C2TCA_NRST();
 80096a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80096aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80096ae:	f001 fb51 	bl	800ad54 <HAL_GPIO_WritePin>
		osDelay(1);
 80096b2:	2001      	movs	r0, #1
 80096b4:	f004 f860 	bl	800d778 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80096b8:	ad07      	add	r5, sp, #28
		uint8_t data = 1 << channel;
 80096ba:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80096bc:	f04f 32ff 	mov.w	r2, #4294967295
 80096c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80096c4:	480b      	ldr	r0, [pc, #44]	@ (80096f4 <BME280_get_hum+0x54>)
 80096c6:	9500      	str	r5, [sp, #0]
 80096c8:	2200      	movs	r2, #0
 80096ca:	21e4      	movs	r1, #228	@ 0xe4
		uint8_t data = 1 << channel;
 80096cc:	f88d 301c 	strb.w	r3, [sp, #28]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80096d0:	f001 fe78 	bl	800b3c4 <HAL_I2C_Mem_Write>
	SET_BME280();
	float temp, press, hum;
	while(bmp280_is_measuring(&bmp280));
 80096d4:	4c08      	ldr	r4, [pc, #32]	@ (80096f8 <BME280_get_hum+0x58>)
 80096d6:	4620      	mov	r0, r4
 80096d8:	f7fa f86e 	bl	80037b8 <bmp280_is_measuring>
 80096dc:	2800      	cmp	r0, #0
 80096de:	d1fa      	bne.n	80096d6 <BME280_get_hum+0x36>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 80096e0:	462b      	mov	r3, r5
 80096e2:	aa06      	add	r2, sp, #24
 80096e4:	a905      	add	r1, sp, #20
 80096e6:	4804      	ldr	r0, [pc, #16]	@ (80096f8 <BME280_get_hum+0x58>)
 80096e8:	f7fa f9e6 	bl	8003ab8 <bmp280_read_float>
	return hum;
}
 80096ec:	ed9d 0a07 	vldr	s0, [sp, #28]
 80096f0:	b009      	add	sp, #36	@ 0x24
 80096f2:	bd30      	pop	{r4, r5, pc}
 80096f4:	200017ac 	.word	0x200017ac
 80096f8:	20001ab4 	.word	0x20001ab4

080096fc <BME280_start_meas>:

void BME280_start_meas()
{
 80096fc:	b500      	push	{lr}
		I2C2TCA_NRST();
 80096fe:	2201      	movs	r2, #1
{
 8009700:	b087      	sub	sp, #28
		I2C2TCA_NRST();
 8009702:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800970a:	f001 fb23 	bl	800ad54 <HAL_GPIO_WritePin>
		osDelay(1);
 800970e:	2001      	movs	r0, #1
 8009710:	f004 f832 	bl	800d778 <osDelay>
		uint8_t data = 1 << channel;
 8009714:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8009716:	f04f 30ff 	mov.w	r0, #4294967295
 800971a:	f10d 0117 	add.w	r1, sp, #23
 800971e:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8009722:	9100      	str	r1, [sp, #0]
 8009724:	4809      	ldr	r0, [pc, #36]	@ (800974c <BME280_start_meas+0x50>)
		uint8_t data = 1 << channel;
 8009726:	f88d 3017 	strb.w	r3, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800972a:	2200      	movs	r2, #0
 800972c:	21e4      	movs	r1, #228	@ 0xe4
 800972e:	f001 fe49 	bl	800b3c4 <HAL_I2C_Mem_Write>
	SET_BME280();
	if(!bmp280_force_measurement(&bmp280)) printf("Komenda w BME280 niewykonana\r\n");
 8009732:	4807      	ldr	r0, [pc, #28]	@ (8009750 <BME280_start_meas+0x54>)
 8009734:	f7fa f80c 	bl	8003750 <bmp280_force_measurement>
 8009738:	b110      	cbz	r0, 8009740 <BME280_start_meas+0x44>
}
 800973a:	b007      	add	sp, #28
 800973c:	f85d fb04 	ldr.w	pc, [sp], #4
	if(!bmp280_force_measurement(&bmp280)) printf("Komenda w BME280 niewykonana\r\n");
 8009740:	4804      	ldr	r0, [pc, #16]	@ (8009754 <BME280_start_meas+0x58>)
}
 8009742:	b007      	add	sp, #28
 8009744:	f85d eb04 	ldr.w	lr, [sp], #4
	if(!bmp280_force_measurement(&bmp280)) printf("Komenda w BME280 niewykonana\r\n");
 8009748:	f007 b844 	b.w	80107d4 <puts>
 800974c:	200017ac 	.word	0x200017ac
 8009750:	20001ab4 	.word	0x20001ab4
 8009754:	080166bc 	.word	0x080166bc

08009758 <bme280_conf_change>:

void bme280_conf_change(uint8_t sensor_conf)
{
 8009758:	b500      	push	{lr}
 800975a:	b083      	sub	sp, #12
    switch (sensor_conf) {
 800975c:	2809      	cmp	r0, #9
 800975e:	d869      	bhi.n	8009834 <bme280_conf_change+0xdc>
 8009760:	e8df f000 	tbb	[pc, r0]
 8009764:	30261c12 	.word	0x30261c12
 8009768:	564d443a 	.word	0x564d443a
 800976c:	055f      	.short	0x055f
        case 8:
        	BME280_init_config(1, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_FILTER_2);
        	printf("BME280 set x8, 2 IIR\r\n");
            return;
        case 9:
        	BME280_init_config(1, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_2);
 800976e:	2305      	movs	r3, #5
 8009770:	2001      	movs	r0, #1
 8009772:	9000      	str	r0, [sp, #0]
 8009774:	461a      	mov	r2, r3
 8009776:	4619      	mov	r1, r3
 8009778:	f7ff fee6 	bl	8009548 <BME280_init_config>
        	printf("BME280 set x16, 2 IIR\r\n");
 800977c:	4832      	ldr	r0, [pc, #200]	@ (8009848 <bme280_conf_change+0xf0>)
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_2);
        	printf("BME280 set TEMP x4, PRESS x8, HUM x16, 2 IIR\r\n");
            return ;
    }

}
 800977e:	b003      	add	sp, #12
 8009780:	f85d eb04 	ldr.w	lr, [sp], #4
        	printf("BME280 set TEMP x4, PRESS x8, HUM x16, 2 IIR\r\n");
 8009784:	f007 b826 	b.w	80107d4 <puts>
        	BME280_init_config(1, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_FILTER_OFF);
 8009788:	2301      	movs	r3, #1
 800978a:	2200      	movs	r2, #0
 800978c:	4618      	mov	r0, r3
 800978e:	9200      	str	r2, [sp, #0]
 8009790:	4619      	mov	r1, r3
 8009792:	461a      	mov	r2, r3
 8009794:	f7ff fed8 	bl	8009548 <BME280_init_config>
        	printf("BME280 set x1, no IIR\r\n");
 8009798:	482c      	ldr	r0, [pc, #176]	@ (800984c <bme280_conf_change+0xf4>)
 800979a:	e7f0      	b.n	800977e <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_FILTER_OFF);
 800979c:	2302      	movs	r3, #2
 800979e:	2200      	movs	r2, #0
 80097a0:	2001      	movs	r0, #1
 80097a2:	9200      	str	r2, [sp, #0]
 80097a4:	4619      	mov	r1, r3
 80097a6:	461a      	mov	r2, r3
 80097a8:	f7ff fece 	bl	8009548 <BME280_init_config>
        	printf("BME280 set x2, no IIR\r\n");
 80097ac:	4828      	ldr	r0, [pc, #160]	@ (8009850 <bme280_conf_change+0xf8>)
 80097ae:	e7e6      	b.n	800977e <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_STANDARD, BMP280_STANDARD, BMP280_STANDARD, BMP280_FILTER_OFF);
 80097b0:	2303      	movs	r3, #3
 80097b2:	2200      	movs	r2, #0
 80097b4:	2001      	movs	r0, #1
 80097b6:	9200      	str	r2, [sp, #0]
 80097b8:	4619      	mov	r1, r3
 80097ba:	461a      	mov	r2, r3
 80097bc:	f7ff fec4 	bl	8009548 <BME280_init_config>
        	printf("BME280 set x4, no IIR\r\n");
 80097c0:	4824      	ldr	r0, [pc, #144]	@ (8009854 <bme280_conf_change+0xfc>)
 80097c2:	e7dc      	b.n	800977e <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_FILTER_OFF);
 80097c4:	2304      	movs	r3, #4
 80097c6:	2200      	movs	r2, #0
 80097c8:	2001      	movs	r0, #1
 80097ca:	9200      	str	r2, [sp, #0]
 80097cc:	4619      	mov	r1, r3
 80097ce:	461a      	mov	r2, r3
 80097d0:	f7ff feba 	bl	8009548 <BME280_init_config>
        	printf("BME280 set x8, no IIR\r\n");
 80097d4:	4820      	ldr	r0, [pc, #128]	@ (8009858 <bme280_conf_change+0x100>)
 80097d6:	e7d2      	b.n	800977e <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_OFF);
 80097d8:	2305      	movs	r3, #5
 80097da:	2200      	movs	r2, #0
 80097dc:	2001      	movs	r0, #1
 80097de:	9200      	str	r2, [sp, #0]
 80097e0:	4619      	mov	r1, r3
 80097e2:	461a      	mov	r2, r3
 80097e4:	f7ff feb0 	bl	8009548 <BME280_init_config>
        	printf("BME280 set x16, no IIR\r\n");
 80097e8:	481c      	ldr	r0, [pc, #112]	@ (800985c <bme280_conf_change+0x104>)
 80097ea:	e7c8      	b.n	800977e <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_FILTER_2);
 80097ec:	2101      	movs	r1, #1
 80097ee:	4608      	mov	r0, r1
 80097f0:	9100      	str	r1, [sp, #0]
 80097f2:	460b      	mov	r3, r1
 80097f4:	460a      	mov	r2, r1
 80097f6:	f7ff fea7 	bl	8009548 <BME280_init_config>
        	printf("BME280 set x1, 2 IIR\r\n");
 80097fa:	4819      	ldr	r0, [pc, #100]	@ (8009860 <bme280_conf_change+0x108>)
 80097fc:	e7bf      	b.n	800977e <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_FILTER_2);
 80097fe:	2302      	movs	r3, #2
 8009800:	2001      	movs	r0, #1
 8009802:	9000      	str	r0, [sp, #0]
 8009804:	461a      	mov	r2, r3
 8009806:	4619      	mov	r1, r3
 8009808:	f7ff fe9e 	bl	8009548 <BME280_init_config>
        	printf("BME280 set x2, 2 IIR\r\n");
 800980c:	4815      	ldr	r0, [pc, #84]	@ (8009864 <bme280_conf_change+0x10c>)
 800980e:	e7b6      	b.n	800977e <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_STANDARD, BMP280_STANDARD, BMP280_STANDARD, BMP280_FILTER_2);
 8009810:	2303      	movs	r3, #3
 8009812:	2001      	movs	r0, #1
 8009814:	9000      	str	r0, [sp, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	4619      	mov	r1, r3
 800981a:	f7ff fe95 	bl	8009548 <BME280_init_config>
        	printf("BME280 set x4, 2 IIR\r\n");
 800981e:	4812      	ldr	r0, [pc, #72]	@ (8009868 <bme280_conf_change+0x110>)
 8009820:	e7ad      	b.n	800977e <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_FILTER_2);
 8009822:	2304      	movs	r3, #4
 8009824:	2001      	movs	r0, #1
 8009826:	9000      	str	r0, [sp, #0]
 8009828:	461a      	mov	r2, r3
 800982a:	4619      	mov	r1, r3
 800982c:	f7ff fe8c 	bl	8009548 <BME280_init_config>
        	printf("BME280 set x8, 2 IIR\r\n");
 8009830:	480e      	ldr	r0, [pc, #56]	@ (800986c <bme280_conf_change+0x114>)
 8009832:	e7a4      	b.n	800977e <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_2);
 8009834:	2001      	movs	r0, #1
 8009836:	9000      	str	r0, [sp, #0]
 8009838:	2305      	movs	r3, #5
 800983a:	2204      	movs	r2, #4
 800983c:	2102      	movs	r1, #2
 800983e:	f7ff fe83 	bl	8009548 <BME280_init_config>
        	printf("BME280 set TEMP x4, PRESS x8, HUM x16, 2 IIR\r\n");
 8009842:	480b      	ldr	r0, [pc, #44]	@ (8009870 <bme280_conf_change+0x118>)
 8009844:	e79b      	b.n	800977e <bme280_conf_change+0x26>
 8009846:	bf00      	nop
 8009848:	080167b4 	.word	0x080167b4
 800984c:	080166dc 	.word	0x080166dc
 8009850:	080166f4 	.word	0x080166f4
 8009854:	0801670c 	.word	0x0801670c
 8009858:	08016724 	.word	0x08016724
 800985c:	0801673c 	.word	0x0801673c
 8009860:	08016754 	.word	0x08016754
 8009864:	0801676c 	.word	0x0801676c
 8009868:	08016784 	.word	0x08016784
 800986c:	0801679c 	.word	0x0801679c
 8009870:	080167cc 	.word	0x080167cc

08009874 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80098ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009878:	f7fd fcb0 	bl	80071dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800987c:	480c      	ldr	r0, [pc, #48]	@ (80098b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800987e:	490d      	ldr	r1, [pc, #52]	@ (80098b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009880:	4a0d      	ldr	r2, [pc, #52]	@ (80098b8 <LoopForever+0xe>)
  movs r3, #0
 8009882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009884:	e002      	b.n	800988c <LoopCopyDataInit>

08009886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800988a:	3304      	adds	r3, #4

0800988c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800988c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800988e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009890:	d3f9      	bcc.n	8009886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009892:	4a0a      	ldr	r2, [pc, #40]	@ (80098bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8009894:	4c0a      	ldr	r4, [pc, #40]	@ (80098c0 <LoopForever+0x16>)
  movs r3, #0
 8009896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009898:	e001      	b.n	800989e <LoopFillZerobss>

0800989a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800989a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800989c:	3204      	adds	r2, #4

0800989e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800989e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80098a0:	d3fb      	bcc.n	800989a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80098a2:	f007 f9fd 	bl	8010ca0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80098a6:	f7fc fcaf 	bl	8006208 <main>

080098aa <LoopForever>:

LoopForever:
    b LoopForever
 80098aa:	e7fe      	b.n	80098aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80098ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80098b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80098b4:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80098b8:	08016c58 	.word	0x08016c58
  ldr r2, =_sbss
 80098bc:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80098c0:	20005e34 	.word	0x20005e34

080098c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80098c4:	e7fe      	b.n	80098c4 <ADC1_IRQHandler>
	...

080098c8 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80098c8:	b510      	push	{r4, lr}
  if (lock == NULL)
 80098ca:	b160      	cbz	r0, 80098e6 <__retarget_lock_init_recursive+0x1e>
  {
    errno = EINVAL;
    return;
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80098cc:	4604      	mov	r4, r0
 80098ce:	200c      	movs	r0, #12
 80098d0:	f005 f82e 	bl	800e930 <malloc>
 80098d4:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 80098d6:	b158      	cbz	r0, 80098f0 <__retarget_lock_init_recursive+0x28>
static inline void stm32_lock_init(LockingData_t *lock)
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
  {
    lock->basepri[i] = 0;
 80098d8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80098f8 <__retarget_lock_init_recursive+0x30>
  }
  lock->nesting_level = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	7203      	strb	r3, [r0, #8]
    lock->basepri[i] = 0;
 80098e0:	ed80 7b00 	vstr	d7, [r0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 80098e4:	bd10      	pop	{r4, pc}
    errno = EINVAL;
 80098e6:	f007 f9d5 	bl	8010c94 <__errno>
 80098ea:	2316      	movs	r3, #22
 80098ec:	6003      	str	r3, [r0, #0]
}
 80098ee:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80098f0:	b672      	cpsid	i
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80098f2:	f7fc fe9f 	bl	8006634 <Error_Handler>
 80098f6:	e7fe      	b.n	80098f6 <__retarget_lock_init_recursive+0x2e>
	...

08009900 <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 8009900:	b508      	push	{r3, lr}
 8009902:	b1a8      	cbz	r0, 8009930 <__retarget_lock_acquire_recursive+0x30>
 8009904:	7a03      	ldrb	r3, [r0, #8]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d80e      	bhi.n	8009928 <__retarget_lock_acquire_recursive+0x28>
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	7202      	strb	r2, [r0, #8]
 800990e:	f3ef 8211 	mrs	r2, BASEPRI
 8009912:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8009916:	f381 8811 	msr	BASEPRI, r1
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8009926:	bd08      	pop	{r3, pc}
 8009928:	b672      	cpsid	i
 800992a:	f7fc fe83 	bl	8006634 <Error_Handler>
 800992e:	e7fe      	b.n	800992e <__retarget_lock_acquire_recursive+0x2e>
 8009930:	b672      	cpsid	i
 8009932:	f7fc fe7f 	bl	8006634 <Error_Handler>
 8009936:	e7fe      	b.n	8009936 <__retarget_lock_acquire_recursive+0x36>

08009938 <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 8009938:	b508      	push	{r3, lr}
 800993a:	b170      	cbz	r0, 800995a <__retarget_lock_release_recursive+0x22>
 800993c:	7a03      	ldrb	r3, [r0, #8]
 800993e:	3b01      	subs	r3, #1
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b01      	cmp	r3, #1
 8009944:	7203      	strb	r3, [r0, #8]
 8009946:	d804      	bhi.n	8009952 <__retarget_lock_release_recursive+0x1a>
 8009948:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	bd08      	pop	{r3, pc}
 8009952:	b672      	cpsid	i
 8009954:	f7fc fe6e 	bl	8006634 <Error_Handler>
 8009958:	e7fe      	b.n	8009958 <__retarget_lock_release_recursive+0x20>
 800995a:	b672      	cpsid	i
 800995c:	f7fc fe6a 	bl	8006634 <Error_Handler>
 8009960:	e7fe      	b.n	8009960 <__retarget_lock_release_recursive+0x28>
 8009962:	bf00      	nop

08009964 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009964:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009966:	2003      	movs	r0, #3
 8009968:	f000 fcda 	bl	800a320 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800996c:	200f      	movs	r0, #15
 800996e:	f7fd fb7f 	bl	8007070 <HAL_InitTick>
 8009972:	b110      	cbz	r0, 800997a <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 8009974:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8009976:	4620      	mov	r0, r4
 8009978:	bd10      	pop	{r4, pc}
 800997a:	4604      	mov	r4, r0
    HAL_MspInit();
 800997c:	f7fd f978 	bl	8006c70 <HAL_MspInit>
}
 8009980:	4620      	mov	r0, r4
 8009982:	bd10      	pop	{r4, pc}

08009984 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8009984:	4a03      	ldr	r2, [pc, #12]	@ (8009994 <HAL_IncTick+0x10>)
 8009986:	4b04      	ldr	r3, [pc, #16]	@ (8009998 <HAL_IncTick+0x14>)
 8009988:	6811      	ldr	r1, [r2, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	440b      	add	r3, r1
 800998e:	6013      	str	r3, [r2, #0]
}
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	20001b88 	.word	0x20001b88
 8009998:	20000010 	.word	0x20000010

0800999c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800999c:	4b01      	ldr	r3, [pc, #4]	@ (80099a4 <HAL_GetTick+0x8>)
 800999e:	6818      	ldr	r0, [r3, #0]
}
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	20001b88 	.word	0x20001b88

080099a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80099ac:	f7ff fff6 	bl	800999c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80099b0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80099b2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80099b4:	d002      	beq.n	80099bc <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 80099b6:	4b04      	ldr	r3, [pc, #16]	@ (80099c8 <HAL_Delay+0x20>)
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80099bc:	f7ff ffee 	bl	800999c <HAL_GetTick>
 80099c0:	1b40      	subs	r0, r0, r5
 80099c2:	42a0      	cmp	r0, r4
 80099c4:	d3fa      	bcc.n	80099bc <HAL_Delay+0x14>
  {
  }
}
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	20000010 	.word	0x20000010

080099cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80099cc:	b530      	push	{r4, r5, lr}
 80099ce:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80099d0:	2300      	movs	r3, #0
 80099d2:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f000 8087 	beq.w	8009ae8 <HAL_ADC_Init+0x11c>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80099da:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80099dc:	4604      	mov	r4, r0
 80099de:	2d00      	cmp	r5, #0
 80099e0:	f000 8087 	beq.w	8009af2 <HAL_ADC_Init+0x126>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80099e4:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80099e6:	6893      	ldr	r3, [r2, #8]
 80099e8:	0098      	lsls	r0, r3, #2
 80099ea:	d505      	bpl.n	80099f8 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80099ec:	6893      	ldr	r3, [r2, #8]
 80099ee:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80099f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80099f6:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80099f8:	6893      	ldr	r3, [r2, #8]
 80099fa:	00d9      	lsls	r1, r3, #3
 80099fc:	d419      	bmi.n	8009a32 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80099fe:	4b5a      	ldr	r3, [pc, #360]	@ (8009b68 <HAL_ADC_Init+0x19c>)
 8009a00:	485a      	ldr	r0, [pc, #360]	@ (8009b6c <HAL_ADC_Init+0x1a0>)
 8009a02:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8009a04:	6891      	ldr	r1, [r2, #8]
 8009a06:	099b      	lsrs	r3, r3, #6
 8009a08:	fba0 0303 	umull	r0, r3, r0, r3
 8009a0c:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8009a10:	099b      	lsrs	r3, r3, #6
 8009a12:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8009a16:	3301      	adds	r3, #1
 8009a18:	005b      	lsls	r3, r3, #1
 8009a1a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8009a1e:	6091      	str	r1, [r2, #8]
 8009a20:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009a22:	9b01      	ldr	r3, [sp, #4]
 8009a24:	b12b      	cbz	r3, 8009a32 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8009a26:	9b01      	ldr	r3, [sp, #4]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009a2c:	9b01      	ldr	r3, [sp, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1f9      	bne.n	8009a26 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009a32:	6893      	ldr	r3, [r2, #8]
 8009a34:	00db      	lsls	r3, r3, #3
 8009a36:	d45a      	bmi.n	8009aee <HAL_ADC_Init+0x122>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a38:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009a3a:	f043 0310 	orr.w	r3, r3, #16
 8009a3e:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a40:	6da3      	ldr	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8009a42:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a44:	4303      	orrs	r3, r0
 8009a46:	65a3      	str	r3, [r4, #88]	@ 0x58
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009a48:	6893      	ldr	r3, [r2, #8]
 8009a4a:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009a4e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009a50:	d146      	bne.n	8009ae0 <HAL_ADC_Init+0x114>
 8009a52:	06dd      	lsls	r5, r3, #27
 8009a54:	d444      	bmi.n	8009ae0 <HAL_ADC_Init+0x114>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009a56:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009a58:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009a5c:	f043 0302 	orr.w	r3, r3, #2
 8009a60:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009a62:	6893      	ldr	r3, [r2, #8]
 8009a64:	07d9      	lsls	r1, r3, #31
 8009a66:	d40a      	bmi.n	8009a7e <HAL_ADC_Init+0xb2>
 8009a68:	4b41      	ldr	r3, [pc, #260]	@ (8009b70 <HAL_ADC_Init+0x1a4>)
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	07db      	lsls	r3, r3, #31
 8009a6e:	d406      	bmi.n	8009a7e <HAL_ADC_Init+0xb2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009a70:	4940      	ldr	r1, [pc, #256]	@ (8009b74 <HAL_ADC_Init+0x1a8>)
 8009a72:	6865      	ldr	r5, [r4, #4]
 8009a74:	688b      	ldr	r3, [r1, #8]
 8009a76:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8009a7a:	432b      	orrs	r3, r5
 8009a7c:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8009a7e:	68e5      	ldr	r5, [r4, #12]
 8009a80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009a82:	f894 1020 	ldrb.w	r1, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8009a86:	432b      	orrs	r3, r5
 8009a88:	68a5      	ldr	r5, [r4, #8]
 8009a8a:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009a8c:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009a8e:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8009a90:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009a98:	d047      	beq.n	8009b2a <HAL_ADC_Init+0x15e>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009a9a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8009a9c:	b121      	cbz	r1, 8009aa8 <HAL_ADC_Init+0xdc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8009a9e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009aa0:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8009aa4:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009aa6:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009aa8:	68d5      	ldr	r5, [r2, #12]
 8009aaa:	4933      	ldr	r1, [pc, #204]	@ (8009b78 <HAL_ADC_Init+0x1ac>)
 8009aac:	4029      	ands	r1, r5
 8009aae:	4319      	orrs	r1, r3
 8009ab0:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009ab2:	6891      	ldr	r1, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009ab4:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009ab6:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009aba:	f003 0308 	and.w	r3, r3, #8
 8009abe:	430b      	orrs	r3, r1
 8009ac0:	d01d      	beq.n	8009afe <HAL_ADC_Init+0x132>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d035      	beq.n	8009b34 <HAL_ADC_Init+0x168>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009ac8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009aca:	f023 030f 	bic.w	r3, r3, #15
 8009ace:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009ad0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009ad2:	f023 0303 	bic.w	r3, r3, #3
 8009ad6:	f043 0301 	orr.w	r3, r3, #1
 8009ada:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8009adc:	b003      	add	sp, #12
 8009ade:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ae0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009ae2:	f043 0310 	orr.w	r3, r3, #16
 8009ae6:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8009ae8:	2001      	movs	r0, #1
}
 8009aea:	b003      	add	sp, #12
 8009aec:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009aee:	2000      	movs	r0, #0
 8009af0:	e7aa      	b.n	8009a48 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8009af2:	f7fd f8e5 	bl	8006cc0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8009af6:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8009af8:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8009afc:	e772      	b.n	80099e4 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009afe:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009b00:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009b04:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009b06:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009b0a:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009b0c:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009b10:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009b14:	430b      	orrs	r3, r1
 8009b16:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8009b18:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d011      	beq.n	8009b44 <HAL_ADC_Init+0x178>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009b20:	6913      	ldr	r3, [r2, #16]
 8009b22:	f023 0301 	bic.w	r3, r3, #1
 8009b26:	6113      	str	r3, [r2, #16]
 8009b28:	e7cb      	b.n	8009ac2 <HAL_ADC_Init+0xf6>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009b2a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009b2c:	3901      	subs	r1, #1
 8009b2e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8009b32:	e7b2      	b.n	8009a9a <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009b34:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8009b36:	69e3      	ldr	r3, [r4, #28]
 8009b38:	f021 010f 	bic.w	r1, r1, #15
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	430b      	orrs	r3, r1
 8009b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b42:	e7c5      	b.n	8009ad0 <HAL_ADC_Init+0x104>
        MODIFY_REG(hadc->Instance->CFGR2,
 8009b44:	6911      	ldr	r1, [r2, #16]
 8009b46:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009b48:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009b4a:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 8009b4e:	f021 0104 	bic.w	r1, r1, #4
 8009b52:	432b      	orrs	r3, r5
 8009b54:	430b      	orrs	r3, r1
 8009b56:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009b58:	430b      	orrs	r3, r1
 8009b5a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009b5c:	430b      	orrs	r3, r1
 8009b5e:	f043 0301 	orr.w	r3, r3, #1
 8009b62:	6113      	str	r3, [r2, #16]
 8009b64:	e7ad      	b.n	8009ac2 <HAL_ADC_Init+0xf6>
 8009b66:	bf00      	nop
 8009b68:	20000004 	.word	0x20000004
 8009b6c:	053e2d63 	.word	0x053e2d63
 8009b70:	50040000 	.word	0x50040000
 8009b74:	50040300 	.word	0x50040300
 8009b78:	fff0c007 	.word	0xfff0c007

08009b7c <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop

08009b80 <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop

08009b84 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009b84:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009b86:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8009b88:	f7ff fffa 	bl	8009b80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009b8c:	bd08      	pop	{r3, pc}
 8009b8e:	bf00      	nop

08009b90 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop

08009b94 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b94:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009b96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b98:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8009b9c:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009b9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009ba0:	d11d      	bne.n	8009bde <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009ba2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ba8:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009baa:	680a      	ldr	r2, [r1, #0]
 8009bac:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009bb0:	68ca      	ldr	r2, [r1, #12]
 8009bb2:	d01b      	beq.n	8009bec <ADC_DMAConvCplt+0x58>
 8009bb4:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8009bb8:	d10d      	bne.n	8009bd6 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009bba:	68ca      	ldr	r2, [r1, #12]
 8009bbc:	0494      	lsls	r4, r2, #18
 8009bbe:	d40a      	bmi.n	8009bd6 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009bc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009bc2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009bc6:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009bc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009bca:	04d1      	lsls	r1, r2, #19
 8009bcc:	d403      	bmi.n	8009bd6 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009bce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009bd0:	f042 0201 	orr.w	r2, r2, #1
 8009bd4:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7ff ffd0 	bl	8009b7c <HAL_ADC_ConvCpltCallback>
}
 8009bdc:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009bde:	06d2      	lsls	r2, r2, #27
 8009be0:	d40a      	bmi.n	8009bf8 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8009be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bea:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009bec:	0790      	lsls	r0, r2, #30
 8009bee:	d5e7      	bpl.n	8009bc0 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7ff ffc3 	bl	8009b7c <HAL_ADC_ConvCpltCallback>
 8009bf6:	e7f1      	b.n	8009bdc <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff ffc9 	bl	8009b90 <HAL_ADC_ErrorCallback>
}
 8009bfe:	bd10      	pop	{r4, pc}

08009c00 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c00:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8009c02:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009c04:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c0a:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009c0c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8009c0e:	f043 0304 	orr.w	r3, r3, #4
 8009c12:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009c14:	f7ff ffbc 	bl	8009b90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009c18:	bd08      	pop	{r3, pc}
 8009c1a:	bf00      	nop

08009c1c <HAL_ADC_ConfigChannel>:
{
 8009c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8009c1e:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
{
 8009c22:	b083      	sub	sp, #12
 8009c24:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8009c26:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8009c28:	f04f 0000 	mov.w	r0, #0
 8009c2c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8009c2e:	f000 8115 	beq.w	8009e5c <HAL_ADC_ConfigChannel+0x240>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009c32:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8009c34:	2001      	movs	r0, #1
 8009c36:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009c3a:	68a2      	ldr	r2, [r4, #8]
 8009c3c:	f012 0204 	ands.w	r2, r2, #4
 8009c40:	d157      	bne.n	8009cf2 <HAL_ADC_ConfigChannel+0xd6>
    if (sConfig->Rank <= 5U)
 8009c42:	6848      	ldr	r0, [r1, #4]
 8009c44:	2805      	cmp	r0, #5
 8009c46:	f240 808f 	bls.w	8009d68 <HAL_ADC_ConfigChannel+0x14c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009c4a:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 8009c4c:	261f      	movs	r6, #31
 8009c4e:	f000 001f 	and.w	r0, r0, #31
 8009c52:	4086      	lsls	r6, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009c54:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8009c58:	43f6      	mvns	r6, r6
 8009c5a:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009c5c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 8009c60:	f3c5 6c84 	ubfx	ip, r5, #26, #5
 8009c64:	f85e 5002 	ldr.w	r5, [lr, r2]
 8009c68:	fa0c f000 	lsl.w	r0, ip, r0
 8009c6c:	46f4      	mov	ip, lr
 8009c6e:	ea05 0e06 	and.w	lr, r5, r6
 8009c72:	ea40 000e 	orr.w	r0, r0, lr
 8009c76:	f84c 0002 	str.w	r0, [ip, r2]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009c7a:	68a2      	ldr	r2, [r4, #8]
 8009c7c:	0752      	lsls	r2, r2, #29
 8009c7e:	d541      	bpl.n	8009d04 <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009c80:	68a2      	ldr	r2, [r4, #8]
 8009c82:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009c84:	68a0      	ldr	r0, [r4, #8]
 8009c86:	07c6      	lsls	r6, r0, #31
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009c88:	4615      	mov	r5, r2
 8009c8a:	d413      	bmi.n	8009cb4 <HAL_ADC_ConfigChannel+0x98>
 8009c8c:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8009c8e:	48bd      	ldr	r0, [pc, #756]	@ (8009f84 <HAL_ADC_ConfigChannel+0x368>)
 8009c90:	f8d4 60b0 	ldr.w	r6, [r4, #176]	@ 0xb0
 8009c94:	f007 0c18 	and.w	ip, r7, #24
 8009c98:	fa20 f00c 	lsr.w	r0, r0, ip
 8009c9c:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8009ca0:	4010      	ands	r0, r2
 8009ca2:	ea26 060c 	bic.w	r6, r6, ip
 8009ca6:	4330      	orrs	r0, r6
 8009ca8:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009cac:	48b6      	ldr	r0, [pc, #728]	@ (8009f88 <HAL_ADC_ConfigChannel+0x36c>)
 8009cae:	4287      	cmp	r7, r0
 8009cb0:	f000 8084 	beq.w	8009dbc <HAL_ADC_ConfigChannel+0x1a0>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009cb4:	4ab5      	ldr	r2, [pc, #724]	@ (8009f8c <HAL_ADC_ConfigChannel+0x370>)
 8009cb6:	4215      	tst	r5, r2
 8009cb8:	d019      	beq.n	8009cee <HAL_ADC_ConfigChannel+0xd2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009cba:	49b5      	ldr	r1, [pc, #724]	@ (8009f90 <HAL_ADC_ConfigChannel+0x374>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009cbc:	48b5      	ldr	r0, [pc, #724]	@ (8009f94 <HAL_ADC_ConfigChannel+0x378>)
 8009cbe:	688a      	ldr	r2, [r1, #8]
 8009cc0:	4285      	cmp	r5, r0
 8009cc2:	f002 76e0 	and.w	r6, r2, #29360128	@ 0x1c00000
 8009cc6:	d057      	beq.n	8009d78 <HAL_ADC_ConfigChannel+0x15c>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009cc8:	48b3      	ldr	r0, [pc, #716]	@ (8009f98 <HAL_ADC_ConfigChannel+0x37c>)
 8009cca:	4285      	cmp	r5, r0
 8009ccc:	f000 80c9 	beq.w	8009e62 <HAL_ADC_ConfigChannel+0x246>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009cd0:	48b2      	ldr	r0, [pc, #712]	@ (8009f9c <HAL_ADC_ConfigChannel+0x380>)
 8009cd2:	4285      	cmp	r5, r0
 8009cd4:	d10b      	bne.n	8009cee <HAL_ADC_ConfigChannel+0xd2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009cd6:	0252      	lsls	r2, r2, #9
 8009cd8:	d409      	bmi.n	8009cee <HAL_ADC_ConfigChannel+0xd2>
        if (ADC_VREFINT_INSTANCE(hadc))
 8009cda:	4ab1      	ldr	r2, [pc, #708]	@ (8009fa0 <HAL_ADC_ConfigChannel+0x384>)
 8009cdc:	4294      	cmp	r4, r2
 8009cde:	d106      	bne.n	8009cee <HAL_ADC_ConfigChannel+0xd2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009ce0:	688a      	ldr	r2, [r1, #8]
 8009ce2:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8009ce6:	4332      	orrs	r2, r6
 8009ce8:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8009cec:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009cee:	2000      	movs	r0, #0
 8009cf0:	e003      	b.n	8009cfa <HAL_ADC_ConfigChannel+0xde>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009cf2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009cf4:	f042 0220 	orr.w	r2, r2, #32
 8009cf8:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8009d00:	b003      	add	sp, #12
 8009d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009d04:	68a0      	ldr	r0, [r4, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009d06:	680a      	ldr	r2, [r1, #0]
 8009d08:	0707      	lsls	r7, r0, #28
 8009d0a:	d4bb      	bmi.n	8009c84 <HAL_ADC_ConfigChannel+0x68>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009d0c:	0dd0      	lsrs	r0, r2, #23
 8009d0e:	f000 0004 	and.w	r0, r0, #4
 8009d12:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8009d16:	f3c2 5c04 	ubfx	ip, r2, #20, #5
 8009d1a:	688e      	ldr	r6, [r1, #8]
 8009d1c:	582a      	ldr	r2, [r5, r0]
 8009d1e:	2707      	movs	r7, #7
 8009d20:	fa07 f70c 	lsl.w	r7, r7, ip
 8009d24:	fa06 f60c 	lsl.w	r6, r6, ip
 8009d28:	ea22 0207 	bic.w	r2, r2, r7
 8009d2c:	4332      	orrs	r2, r6
 8009d2e:	502a      	str	r2, [r5, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009d30:	e9d1 6204 	ldrd	r6, r2, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009d34:	2e04      	cmp	r6, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009d36:	68e0      	ldr	r0, [r4, #12]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009d38:	f104 0560 	add.w	r5, r4, #96	@ 0x60
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009d3c:	f000 80f2 	beq.w	8009f24 <HAL_ADC_ConfigChannel+0x308>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009d40:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8009d44:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 8009d46:	f855 c026 	ldr.w	ip, [r5, r6, lsl #2]
 8009d4a:	4f96      	ldr	r7, [pc, #600]	@ (8009fa4 <HAL_ADC_ConfigChannel+0x388>)
 8009d4c:	4082      	lsls	r2, r0
 8009d4e:	6808      	ldr	r0, [r1, #0]
 8009d50:	ea0c 0707 	and.w	r7, ip, r7
 8009d54:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8009d58:	4338      	orrs	r0, r7
 8009d5a:	4302      	orrs	r2, r0
 8009d5c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8009d60:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
 8009d64:	680a      	ldr	r2, [r1, #0]
}
 8009d66:	e78d      	b.n	8009c84 <HAL_ADC_ConfigChannel+0x68>
      switch (sConfig->Rank)
 8009d68:	3802      	subs	r0, #2
 8009d6a:	2803      	cmp	r0, #3
 8009d6c:	f200 8192 	bhi.w	800a094 <HAL_ADC_ConfigChannel+0x478>
 8009d70:	e8df f000 	tbb	[pc, r0]
 8009d74:	8698938e 	.word	0x8698938e
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009d78:	0215      	lsls	r5, r2, #8
 8009d7a:	d4b8      	bmi.n	8009cee <HAL_ADC_ConfigChannel+0xd2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009d7c:	4a88      	ldr	r2, [pc, #544]	@ (8009fa0 <HAL_ADC_ConfigChannel+0x384>)
 8009d7e:	4294      	cmp	r4, r2
 8009d80:	d1b5      	bne.n	8009cee <HAL_ADC_ConfigChannel+0xd2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009d82:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009d84:	4888      	ldr	r0, [pc, #544]	@ (8009fa8 <HAL_ADC_ConfigChannel+0x38c>)
 8009d86:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8009d8a:	4332      	orrs	r2, r6
 8009d8c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009d90:	608a      	str	r2, [r1, #8]
 8009d92:	6802      	ldr	r2, [r0, #0]
 8009d94:	4985      	ldr	r1, [pc, #532]	@ (8009fac <HAL_ADC_ConfigChannel+0x390>)
 8009d96:	0992      	lsrs	r2, r2, #6
 8009d98:	fba1 1202 	umull	r1, r2, r1, r2
 8009d9c:	0992      	lsrs	r2, r2, #6
 8009d9e:	3201      	adds	r2, #1
 8009da0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009da4:	0092      	lsls	r2, r2, #2
 8009da6:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8009da8:	9a01      	ldr	r2, [sp, #4]
 8009daa:	2a00      	cmp	r2, #0
 8009dac:	d09f      	beq.n	8009cee <HAL_ADC_ConfigChannel+0xd2>
            wait_loop_index--;
 8009dae:	9a01      	ldr	r2, [sp, #4]
 8009db0:	3a01      	subs	r2, #1
 8009db2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8009db4:	9a01      	ldr	r2, [sp, #4]
 8009db6:	2a00      	cmp	r2, #0
 8009db8:	d1f9      	bne.n	8009dae <HAL_ADC_ConfigChannel+0x192>
 8009dba:	e798      	b.n	8009cee <HAL_ADC_ConfigChannel+0xd2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009dbc:	f1bc 0f00 	cmp.w	ip, #0
 8009dc0:	d075      	beq.n	8009eae <HAL_ADC_ConfigChannel+0x292>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dc2:	fa92 f0a2 	rbit	r0, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f000 8085 	beq.w	8009ed6 <HAL_ADC_ConfigChannel+0x2ba>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8009dcc:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	f000 001f 	and.w	r0, r0, #31
 8009dd6:	2809      	cmp	r0, #9
 8009dd8:	d97d      	bls.n	8009ed6 <HAL_ADC_ConfigChannel+0x2ba>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dda:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8009dde:	2800      	cmp	r0, #0
 8009de0:	f000 8151 	beq.w	800a086 <HAL_ADC_ConfigChannel+0x46a>
  return __builtin_clz(value);
 8009de4:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009de8:	3001      	adds	r0, #1
 8009dea:	0680      	lsls	r0, r0, #26
 8009dec:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009df0:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8009df4:	2d00      	cmp	r5, #0
 8009df6:	f000 814b 	beq.w	800a090 <HAL_ADC_ConfigChannel+0x474>
  return __builtin_clz(value);
 8009dfa:	fab5 f585 	clz	r5, r5
 8009dfe:	3501      	adds	r5, #1
 8009e00:	f005 051f 	and.w	r5, r5, #31
 8009e04:	2601      	movs	r6, #1
 8009e06:	fa06 f505 	lsl.w	r5, r6, r5
 8009e0a:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e0c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8009e10:	2a00      	cmp	r2, #0
 8009e12:	f000 813b 	beq.w	800a08c <HAL_ADC_ConfigChannel+0x470>
  return __builtin_clz(value);
 8009e16:	fab2 f282 	clz	r2, r2
 8009e1a:	1c55      	adds	r5, r2, #1
 8009e1c:	f005 051f 	and.w	r5, r5, #31
 8009e20:	2203      	movs	r2, #3
 8009e22:	f06f 061d 	mvn.w	r6, #29
 8009e26:	fb12 6205 	smlabb	r2, r2, r5, r6
 8009e2a:	0512      	lsls	r2, r2, #20
 8009e2c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009e30:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009e32:	0dd5      	lsrs	r5, r2, #23
  MODIFY_REG(*preg,
 8009e34:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009e36:	f005 0504 	and.w	r5, r5, #4
 8009e3a:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 8009e3e:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8009e42:	fa00 f702 	lsl.w	r7, r0, r2
 8009e46:	f04f 0c07 	mov.w	ip, #7
 8009e4a:	5970      	ldr	r0, [r6, r5]
 8009e4c:	fa0c f202 	lsl.w	r2, ip, r2
 8009e50:	ea20 0202 	bic.w	r2, r0, r2
 8009e54:	433a      	orrs	r2, r7
 8009e56:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009e58:	680d      	ldr	r5, [r1, #0]
}
 8009e5a:	e72b      	b.n	8009cb4 <HAL_ADC_ConfigChannel+0x98>
  __HAL_LOCK(hadc);
 8009e5c:	2002      	movs	r0, #2
}
 8009e5e:	b003      	add	sp, #12
 8009e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009e62:	01d0      	lsls	r0, r2, #7
 8009e64:	f53f af43 	bmi.w	8009cee <HAL_ADC_ConfigChannel+0xd2>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009e68:	4a4d      	ldr	r2, [pc, #308]	@ (8009fa0 <HAL_ADC_ConfigChannel+0x384>)
 8009e6a:	4294      	cmp	r4, r2
 8009e6c:	f47f af3f 	bne.w	8009cee <HAL_ADC_ConfigChannel+0xd2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009e70:	688a      	ldr	r2, [r1, #8]
 8009e72:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8009e76:	4332      	orrs	r2, r6
 8009e78:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8009e7c:	608a      	str	r2, [r1, #8]
}
 8009e7e:	e736      	b.n	8009cee <HAL_ADC_ConfigChannel+0xd2>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8009e80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e84:	604a      	str	r2, [r1, #4]
          break;
 8009e86:	2000      	movs	r0, #0
 8009e88:	f06f 061f 	mvn.w	r6, #31
 8009e8c:	2204      	movs	r2, #4
 8009e8e:	e6e4      	b.n	8009c5a <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8009e90:	200c      	movs	r0, #12
 8009e92:	6048      	str	r0, [r1, #4]
          break;
 8009e94:	f46f 36f8 	mvn.w	r6, #126976	@ 0x1f000
 8009e98:	e6df      	b.n	8009c5a <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8009e9a:	2012      	movs	r0, #18
 8009e9c:	6048      	str	r0, [r1, #4]
          break;
 8009e9e:	f46f 06f8 	mvn.w	r6, #8126464	@ 0x7c0000
 8009ea2:	e6da      	b.n	8009c5a <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8009ea4:	2018      	movs	r0, #24
 8009ea6:	6048      	str	r0, [r1, #4]
          break;
 8009ea8:	f06f 56f8 	mvn.w	r6, #520093696	@ 0x1f000000
 8009eac:	e6d5      	b.n	8009c5a <HAL_ADC_ConfigChannel+0x3e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009eae:	0e92      	lsrs	r2, r2, #26
 8009eb0:	3201      	adds	r2, #1
 8009eb2:	f002 061f 	and.w	r6, r2, #31
 8009eb6:	0692      	lsls	r2, r2, #26
 8009eb8:	f002 45f8 	and.w	r5, r2, #2080374784	@ 0x7c000000
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	40b2      	lsls	r2, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009ec0:	2e09      	cmp	r6, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009ec2:	ea45 0002 	orr.w	r0, r5, r2
 8009ec6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009eca:	d929      	bls.n	8009f20 <HAL_ADC_ConfigChannel+0x304>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009ecc:	3a1e      	subs	r2, #30
 8009ece:	0512      	lsls	r2, r2, #20
 8009ed0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8009ed4:	e7ac      	b.n	8009e30 <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ed6:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f000 80d0 	beq.w	800a080 <HAL_ADC_ConfigChannel+0x464>
  return __builtin_clz(value);
 8009ee0:	fab0 f080 	clz	r0, r0
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	0680      	lsls	r0, r0, #26
 8009ee8:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009eec:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8009ef0:	2d00      	cmp	r5, #0
 8009ef2:	f000 80c3 	beq.w	800a07c <HAL_ADC_ConfigChannel+0x460>
  return __builtin_clz(value);
 8009ef6:	fab5 f585 	clz	r5, r5
 8009efa:	3501      	adds	r5, #1
 8009efc:	f005 051f 	and.w	r5, r5, #31
 8009f00:	2601      	movs	r6, #1
 8009f02:	fa06 f505 	lsl.w	r5, r6, r5
 8009f06:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f08:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8009f0c:	2a00      	cmp	r2, #0
 8009f0e:	f000 80b2 	beq.w	800a076 <HAL_ADC_ConfigChannel+0x45a>
  return __builtin_clz(value);
 8009f12:	fab2 f282 	clz	r2, r2
 8009f16:	3201      	adds	r2, #1
 8009f18:	f002 021f 	and.w	r2, r2, #31
 8009f1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009f20:	0512      	lsls	r2, r2, #20
 8009f22:	e785      	b.n	8009e30 <HAL_ADC_ConfigChannel+0x214>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009f24:	6e22      	ldr	r2, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009f26:	680a      	ldr	r2, [r1, #0]
 8009f28:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8009f2a:	f3c2 0612 	ubfx	r6, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009f2e:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009f32:	2e00      	cmp	r6, #0
 8009f34:	d13c      	bne.n	8009fb0 <HAL_ADC_ConfigChannel+0x394>
 8009f36:	f3c2 6684 	ubfx	r6, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009f3a:	42b0      	cmp	r0, r6
 8009f3c:	f000 808b 	beq.w	800a056 <HAL_ADC_ConfigChannel+0x43a>
 8009f40:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8009f42:	6e60      	ldr	r0, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009f44:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8009f48:	42b0      	cmp	r0, r6
 8009f4a:	d062      	beq.n	800a012 <HAL_ADC_ConfigChannel+0x3f6>
 8009f4c:	68a8      	ldr	r0, [r5, #8]
 8009f4e:	68a8      	ldr	r0, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009f50:	f105 0708 	add.w	r7, r5, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009f54:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009f58:	f3c2 6684 	ubfx	r6, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009f5c:	4286      	cmp	r6, r0
 8009f5e:	d069      	beq.n	800a034 <HAL_ADC_ConfigChannel+0x418>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009f60:	68e8      	ldr	r0, [r5, #12]
 8009f62:	68e8      	ldr	r0, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009f64:	f105 060c 	add.w	r6, r5, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009f68:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009f6c:	f3c2 6584 	ubfx	r5, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009f70:	4285      	cmp	r5, r0
 8009f72:	f47f ae87 	bne.w	8009c84 <HAL_ADC_ConfigChannel+0x68>
  MODIFY_REG(*preg,
 8009f76:	6832      	ldr	r2, [r6, #0]
 8009f78:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009f7c:	6032      	str	r2, [r6, #0]
 8009f7e:	680a      	ldr	r2, [r1, #0]
}
 8009f80:	e680      	b.n	8009c84 <HAL_ADC_ConfigChannel+0x68>
 8009f82:	bf00      	nop
 8009f84:	0007ffff 	.word	0x0007ffff
 8009f88:	407f0000 	.word	0x407f0000
 8009f8c:	80080000 	.word	0x80080000
 8009f90:	50040300 	.word	0x50040300
 8009f94:	c7520000 	.word	0xc7520000
 8009f98:	cb840000 	.word	0xcb840000
 8009f9c:	80000001 	.word	0x80000001
 8009fa0:	50040000 	.word	0x50040000
 8009fa4:	03fff000 	.word	0x03fff000
 8009fa8:	20000004 	.word	0x20000004
 8009fac:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fb0:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8009fb4:	b11e      	cbz	r6, 8009fbe <HAL_ADC_ConfigChannel+0x3a2>
  return __builtin_clz(value);
 8009fb6:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009fba:	42b0      	cmp	r0, r6
 8009fbc:	d04b      	beq.n	800a056 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009fbe:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8009fc0:	6e60      	ldr	r0, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009fc2:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fc6:	fa92 f6a2 	rbit	r6, r2
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009fca:	f105 0708 	add.w	r7, r5, #8
 8009fce:	46bc      	mov	ip, r7
  if (value == 0U)
 8009fd0:	b11e      	cbz	r6, 8009fda <HAL_ADC_ConfigChannel+0x3be>
  return __builtin_clz(value);
 8009fd2:	fab6 f686 	clz	r6, r6
 8009fd6:	4286      	cmp	r6, r0
 8009fd8:	d01d      	beq.n	800a016 <HAL_ADC_ConfigChannel+0x3fa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009fda:	68a8      	ldr	r0, [r5, #8]
 8009fdc:	68a8      	ldr	r0, [r5, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009fde:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fe2:	fa92 fca2 	rbit	ip, r2
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009fe6:	f105 060c 	add.w	r6, r5, #12
 8009fea:	46b6      	mov	lr, r6
  if (value == 0U)
 8009fec:	f1bc 0f00 	cmp.w	ip, #0
 8009ff0:	d003      	beq.n	8009ffa <HAL_ADC_ConfigChannel+0x3de>
  return __builtin_clz(value);
 8009ff2:	fabc fc8c 	clz	ip, ip
 8009ff6:	4584      	cmp	ip, r0
 8009ff8:	d01e      	beq.n	800a038 <HAL_ADC_ConfigChannel+0x41c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009ffa:	68e8      	ldr	r0, [r5, #12]
 8009ffc:	68e8      	ldr	r0, [r5, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009ffe:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a002:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800a006:	2d00      	cmp	r5, #0
 800a008:	f43f ae3c 	beq.w	8009c84 <HAL_ADC_ConfigChannel+0x68>
  return __builtin_clz(value);
 800a00c:	fab5 f585 	clz	r5, r5
 800a010:	e7ae      	b.n	8009f70 <HAL_ADC_ConfigChannel+0x354>
 800a012:	f105 0c08 	add.w	ip, r5, #8
  MODIFY_REG(*preg,
 800a016:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a018:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a01c:	6662      	str	r2, [r4, #100]	@ 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a01e:	68aa      	ldr	r2, [r5, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a020:	680a      	ldr	r2, [r1, #0]
 800a022:	68a8      	ldr	r0, [r5, #8]
 800a024:	f3c2 0612 	ubfx	r6, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a028:	4667      	mov	r7, ip
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a02a:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a02e:	2e00      	cmp	r6, #0
 800a030:	d092      	beq.n	8009f58 <HAL_ADC_ConfigChannel+0x33c>
 800a032:	e7d6      	b.n	8009fe2 <HAL_ADC_ConfigChannel+0x3c6>
 800a034:	f105 0e0c 	add.w	lr, r5, #12
  MODIFY_REG(*preg,
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a03e:	603a      	str	r2, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a040:	68ea      	ldr	r2, [r5, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a042:	680a      	ldr	r2, [r1, #0]
 800a044:	68e8      	ldr	r0, [r5, #12]
 800a046:	f3c2 0512 	ubfx	r5, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a04a:	4676      	mov	r6, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a04c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a050:	2d00      	cmp	r5, #0
 800a052:	d08b      	beq.n	8009f6c <HAL_ADC_ConfigChannel+0x350>
 800a054:	e7d5      	b.n	800a002 <HAL_ADC_ConfigChannel+0x3e6>
  MODIFY_REG(*preg,
 800a056:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800a058:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a05c:	6622      	str	r2, [r4, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a05e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a060:	680a      	ldr	r2, [r1, #0]
 800a062:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800a064:	f3c2 0612 	ubfx	r6, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a068:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a06c:	2e00      	cmp	r6, #0
 800a06e:	d1aa      	bne.n	8009fc6 <HAL_ADC_ConfigChannel+0x3aa>
 800a070:	f3c2 6684 	ubfx	r6, r2, #26, #5
 800a074:	e768      	b.n	8009f48 <HAL_ADC_ConfigChannel+0x32c>
 800a076:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800a07a:	e6d9      	b.n	8009e30 <HAL_ADC_ConfigChannel+0x214>
 800a07c:	2502      	movs	r5, #2
 800a07e:	e742      	b.n	8009f06 <HAL_ADC_ConfigChannel+0x2ea>
 800a080:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800a084:	e732      	b.n	8009eec <HAL_ADC_ConfigChannel+0x2d0>
 800a086:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800a08a:	e6b1      	b.n	8009df0 <HAL_ADC_ConfigChannel+0x1d4>
 800a08c:	4a04      	ldr	r2, [pc, #16]	@ (800a0a0 <HAL_ADC_ConfigChannel+0x484>)
 800a08e:	e6cf      	b.n	8009e30 <HAL_ADC_ConfigChannel+0x214>
 800a090:	2502      	movs	r5, #2
 800a092:	e6ba      	b.n	8009e0a <HAL_ADC_ConfigChannel+0x1ee>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800a094:	2006      	movs	r0, #6
 800a096:	6048      	str	r0, [r1, #4]
          break;
 800a098:	f46f 66f8 	mvn.w	r6, #1984	@ 0x7c0
 800a09c:	e5dd      	b.n	8009c5a <HAL_ADC_ConfigChannel+0x3e>
 800a09e:	bf00      	nop
 800a0a0:	fe500000 	.word	0xfe500000

0800a0a4 <ADC_Enable>:
{
 800a0a4:	b570      	push	{r4, r5, r6, lr}
 800a0a6:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800a0a8:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a0aa:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 800a0ac:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	07d2      	lsls	r2, r2, #31
 800a0b2:	d42c      	bmi.n	800a10e <ADC_Enable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800a0b4:	6899      	ldr	r1, [r3, #8]
 800a0b6:	4a28      	ldr	r2, [pc, #160]	@ (800a158 <ADC_Enable+0xb4>)
 800a0b8:	4211      	tst	r1, r2
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	d12a      	bne.n	800a114 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 800a0be:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a0c0:	4926      	ldr	r1, [pc, #152]	@ (800a15c <ADC_Enable+0xb8>)
  MODIFY_REG(ADCx->CR,
 800a0c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a0c6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800a0ca:	f042 0201 	orr.w	r2, r2, #1
 800a0ce:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a0d0:	688b      	ldr	r3, [r1, #8]
    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a0d2:	021b      	lsls	r3, r3, #8
 800a0d4:	d429      	bmi.n	800a12a <ADC_Enable+0x86>
    tickstart = HAL_GetTick();
 800a0d6:	f7ff fc61 	bl	800999c <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a0da:	6823      	ldr	r3, [r4, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 800a0e0:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a0e2:	d414      	bmi.n	800a10e <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 800a0e4:	4e1e      	ldr	r6, [pc, #120]	@ (800a160 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a0e6:	689a      	ldr	r2, [r3, #8]
 800a0e8:	07d0      	lsls	r0, r2, #31
 800a0ea:	d404      	bmi.n	800a0f6 <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 800a0ec:	689a      	ldr	r2, [r3, #8]
 800a0ee:	4032      	ands	r2, r6
 800a0f0:	f042 0201 	orr.w	r2, r2, #1
 800a0f4:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a0f6:	f7ff fc51 	bl	800999c <HAL_GetTick>
 800a0fa:	1b43      	subs	r3, r0, r5
 800a0fc:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a0fe:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a100:	d902      	bls.n	800a108 <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	07d1      	lsls	r1, r2, #31
 800a106:	d505      	bpl.n	800a114 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	07d2      	lsls	r2, r2, #31
 800a10c:	d5eb      	bpl.n	800a0e6 <ADC_Enable+0x42>
  return HAL_OK;
 800a10e:	2000      	movs	r0, #0
}
 800a110:	b002      	add	sp, #8
 800a112:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a114:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a116:	f043 0310 	orr.w	r3, r3, #16
 800a11a:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a11c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 800a11e:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a120:	f043 0301 	orr.w	r3, r3, #1
 800a124:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 800a126:	b002      	add	sp, #8
 800a128:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a12a:	4b0e      	ldr	r3, [pc, #56]	@ (800a164 <ADC_Enable+0xc0>)
 800a12c:	4a0e      	ldr	r2, [pc, #56]	@ (800a168 <ADC_Enable+0xc4>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	099b      	lsrs	r3, r3, #6
 800a132:	fba2 2303 	umull	r2, r3, r2, r3
 800a136:	099b      	lsrs	r3, r3, #6
 800a138:	3301      	adds	r3, #1
 800a13a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800a142:	9b01      	ldr	r3, [sp, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d0c6      	beq.n	800a0d6 <ADC_Enable+0x32>
        wait_loop_index--;
 800a148:	9b01      	ldr	r3, [sp, #4]
 800a14a:	3b01      	subs	r3, #1
 800a14c:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800a14e:	9b01      	ldr	r3, [sp, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1f9      	bne.n	800a148 <ADC_Enable+0xa4>
 800a154:	e7bf      	b.n	800a0d6 <ADC_Enable+0x32>
 800a156:	bf00      	nop
 800a158:	8000003f 	.word	0x8000003f
 800a15c:	50040300 	.word	0x50040300
 800a160:	7fffffc0 	.word	0x7fffffc0
 800a164:	20000004 	.word	0x20000004
 800a168:	053e2d63 	.word	0x053e2d63

0800a16c <HAL_ADC_Start_DMA>:
{
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a16e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a170:	689d      	ldr	r5, [r3, #8]
 800a172:	f015 0504 	ands.w	r5, r5, #4
 800a176:	d141      	bne.n	800a1fc <HAL_ADC_Start_DMA+0x90>
    __HAL_LOCK(hadc);
 800a178:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	4604      	mov	r4, r0
 800a180:	d03c      	beq.n	800a1fc <HAL_ADC_Start_DMA+0x90>
 800a182:	2301      	movs	r3, #1
 800a184:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
      tmp_hal_status = ADC_Enable(hadc);
 800a188:	460f      	mov	r7, r1
 800a18a:	4616      	mov	r6, r2
 800a18c:	f7ff ff8a 	bl	800a0a4 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800a190:	2800      	cmp	r0, #0
 800a192:	d135      	bne.n	800a200 <HAL_ADC_Start_DMA+0x94>
        ADC_STATE_CLR_SET(hadc->State,
 800a194:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a196:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a198:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 800a19a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a19e:	f023 0301 	bic.w	r3, r3, #1
 800a1a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1a6:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a1a8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a1aa:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a1ae:	bf1c      	itt	ne
 800a1b0:	6da3      	ldrne	r3, [r4, #88]	@ 0x58
 800a1b2:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800a1b6:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a1b8:	4b13      	ldr	r3, [pc, #76]	@ (800a208 <HAL_ADC_Start_DMA+0x9c>)
 800a1ba:	62c3      	str	r3, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a1bc:	4b13      	ldr	r3, [pc, #76]	@ (800a20c <HAL_ADC_Start_DMA+0xa0>)
 800a1be:	6303      	str	r3, [r0, #48]	@ 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a1c0:	251c      	movs	r5, #28
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a1c2:	4b13      	ldr	r3, [pc, #76]	@ (800a210 <HAL_ADC_Start_DMA+0xa4>)
 800a1c4:	6343      	str	r3, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a1c6:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 800a1c8:	2500      	movs	r5, #0
 800a1ca:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a1ce:	684d      	ldr	r5, [r1, #4]
 800a1d0:	f045 0510 	orr.w	r5, r5, #16
 800a1d4:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a1d6:	68cd      	ldr	r5, [r1, #12]
 800a1d8:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a1dc:	4633      	mov	r3, r6
 800a1de:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a1e0:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a1e2:	3140      	adds	r1, #64	@ 0x40
 800a1e4:	f000 fa66 	bl	800a6b4 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a1e8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800a1ea:	6893      	ldr	r3, [r2, #8]
 800a1ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a1f4:	f043 0304 	orr.w	r3, r3, #4
 800a1f8:	6093      	str	r3, [r2, #8]
}
 800a1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 800a1fc:	2002      	movs	r0, #2
}
 800a1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 800a200:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
}
 800a204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a206:	bf00      	nop
 800a208:	08009b95 	.word	0x08009b95
 800a20c:	08009b85 	.word	0x08009b85
 800a210:	08009c01 	.word	0x08009c01

0800a214 <ADC_Disable>:
{
 800a214:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a216:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a218:	689a      	ldr	r2, [r3, #8]
 800a21a:	0795      	lsls	r5, r2, #30
 800a21c:	d502      	bpl.n	800a224 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a21e:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 800a220:	2000      	movs	r0, #0
}
 800a222:	bd38      	pop	{r3, r4, r5, pc}
 800a224:	689a      	ldr	r2, [r3, #8]
 800a226:	07d4      	lsls	r4, r2, #31
 800a228:	d5fa      	bpl.n	800a220 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a22a:	689a      	ldr	r2, [r3, #8]
 800a22c:	f002 020d 	and.w	r2, r2, #13
 800a230:	2a01      	cmp	r2, #1
 800a232:	4604      	mov	r4, r0
 800a234:	d009      	beq.n	800a24a <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a236:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a238:	f043 0310 	orr.w	r3, r3, #16
 800a23c:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a23e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a240:	f043 0301 	orr.w	r3, r3, #1
 800a244:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 800a246:	2001      	movs	r0, #1
}
 800a248:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800a24a:	689a      	ldr	r2, [r3, #8]
 800a24c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a250:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a254:	2103      	movs	r1, #3
 800a256:	f042 0202 	orr.w	r2, r2, #2
 800a25a:	609a      	str	r2, [r3, #8]
 800a25c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800a25e:	f7ff fb9d 	bl	800999c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 800a268:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a26a:	d403      	bmi.n	800a274 <ADC_Disable+0x60>
 800a26c:	e7d8      	b.n	800a220 <ADC_Disable+0xc>
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	07db      	lsls	r3, r3, #31
 800a272:	d5d5      	bpl.n	800a220 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a274:	f7ff fb92 	bl	800999c <HAL_GetTick>
 800a278:	1b40      	subs	r0, r0, r5
 800a27a:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a27c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a27e:	d9f6      	bls.n	800a26e <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a280:	689a      	ldr	r2, [r3, #8]
 800a282:	07d2      	lsls	r2, r2, #31
 800a284:	d5f3      	bpl.n	800a26e <ADC_Disable+0x5a>
 800a286:	e7d6      	b.n	800a236 <ADC_Disable+0x22>

0800a288 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800a288:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a28a:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 800a28e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800a290:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800a292:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 800a294:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800a296:	d03f      	beq.n	800a318 <HAL_ADCEx_Calibration_Start+0x90>
 800a298:	2301      	movs	r3, #1
 800a29a:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800a29e:	4604      	mov	r4, r0
 800a2a0:	460d      	mov	r5, r1
 800a2a2:	f7ff ffb7 	bl	800a214 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a2a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  if (tmp_hal_status == HAL_OK)
 800a2a8:	b9e0      	cbnz	r0, 800a2e4 <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 800a2aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a2ae:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800a2b2:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800a2b4:	f043 0302 	orr.w	r3, r3, #2
 800a2b8:	6563      	str	r3, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 800a2ba:	6893      	ldr	r3, [r2, #8]
 800a2bc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800a2c0:	f005 4180 	and.w	r1, r5, #1073741824	@ 0x40000000
 800a2c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a2c8:	430b      	orrs	r3, r1
 800a2ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a2ce:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a2d0:	6893      	ldr	r3, [r2, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	db0e      	blt.n	800a2f4 <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a2d6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a2d8:	f023 0303 	bic.w	r3, r3, #3
 800a2dc:	f043 0301 	orr.w	r3, r3, #1
 800a2e0:	6563      	str	r3, [r4, #84]	@ 0x54
 800a2e2:	e002      	b.n	800a2ea <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2e4:	f043 0310 	orr.w	r3, r3, #16
 800a2e8:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800a2f0:	b003      	add	sp, #12
 800a2f2:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 800a2f4:	9b01      	ldr	r3, [sp, #4]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800a2fa:	9b01      	ldr	r3, [sp, #4]
 800a2fc:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800a300:	d3e6      	bcc.n	800a2d0 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 800a302:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a304:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 800a308:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 800a30a:	f043 0310 	orr.w	r3, r3, #16
 800a30e:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 800a310:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        return HAL_ERROR;
 800a314:	2001      	movs	r0, #1
 800a316:	e7eb      	b.n	800a2f0 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 800a318:	2002      	movs	r0, #2
}
 800a31a:	b003      	add	sp, #12
 800a31c:	bd30      	pop	{r4, r5, pc}
 800a31e:	bf00      	nop

0800a320 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a320:	4907      	ldr	r1, [pc, #28]	@ (800a340 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800a322:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a324:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a326:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a32a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a32e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a330:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a332:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800a33a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	e000ed00 	.word	0xe000ed00

0800a344 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a344:	4b1b      	ldr	r3, [pc, #108]	@ (800a3b4 <HAL_NVIC_SetPriority+0x70>)
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a34c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a34e:	f1c3 0e07 	rsb	lr, r3, #7
 800a352:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a356:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a35a:	bf28      	it	cs
 800a35c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a360:	f1bc 0f06 	cmp.w	ip, #6
 800a364:	d91c      	bls.n	800a3a0 <HAL_NVIC_SetPriority+0x5c>
 800a366:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a36a:	f04f 33ff 	mov.w	r3, #4294967295
 800a36e:	fa03 f30c 	lsl.w	r3, r3, ip
 800a372:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a376:	f04f 33ff 	mov.w	r3, #4294967295
 800a37a:	fa03 f30e 	lsl.w	r3, r3, lr
 800a37e:	ea21 0303 	bic.w	r3, r1, r3
 800a382:	fa03 f30c 	lsl.w	r3, r3, ip
 800a386:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a388:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800a38a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a38c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800a38e:	db0a      	blt.n	800a3a6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a390:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800a394:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800a398:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a39c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3a0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a3a2:	4694      	mov	ip, r2
 800a3a4:	e7e7      	b.n	800a376 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3a6:	4a04      	ldr	r2, [pc, #16]	@ (800a3b8 <HAL_NVIC_SetPriority+0x74>)
 800a3a8:	f000 000f 	and.w	r0, r0, #15
 800a3ac:	4402      	add	r2, r0
 800a3ae:	7613      	strb	r3, [r2, #24]
 800a3b0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3b4:	e000ed00 	.word	0xe000ed00
 800a3b8:	e000ecfc 	.word	0xe000ecfc

0800a3bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	db07      	blt.n	800a3d0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a3c0:	4a04      	ldr	r2, [pc, #16]	@ (800a3d4 <HAL_NVIC_EnableIRQ+0x18>)
 800a3c2:	0941      	lsrs	r1, r0, #5
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	f000 001f 	and.w	r0, r0, #31
 800a3ca:	4083      	lsls	r3, r0
 800a3cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	e000e100 	.word	0xe000e100

0800a3d8 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800a3d8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a3dc:	4905      	ldr	r1, [pc, #20]	@ (800a3f4 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a3de:	4b06      	ldr	r3, [pc, #24]	@ (800a3f8 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a3e0:	68ca      	ldr	r2, [r1, #12]
 800a3e2:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	60cb      	str	r3, [r1, #12]
 800a3ea:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a3ee:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800a3f0:	e7fd      	b.n	800a3ee <HAL_NVIC_SystemReset+0x16>
 800a3f2:	bf00      	nop
 800a3f4:	e000ed00 	.word	0xe000ed00
 800a3f8:	05fa0004 	.word	0x05fa0004

0800a3fc <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800a3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800a400:	0897      	lsrs	r7, r2, #2
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
  {
    if ((BufferLength % 4U) == 1U)
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800a402:	6805      	ldr	r5, [r0, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800a404:	d015      	beq.n	800a432 <CRC_Handle_8+0x36>
 800a406:	468c      	mov	ip, r1
 800a408:	eb01 0687 	add.w	r6, r1, r7, lsl #2
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800a40c:	f89c 3001 	ldrb.w	r3, [ip, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800a410:	f89c 8000 	ldrb.w	r8, [ip]
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800a414:	f89c 4003 	ldrb.w	r4, [ip, #3]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800a418:	f89c e002 	ldrb.w	lr, [ip, #2]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800a41c:	041b      	lsls	r3, r3, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800a41e:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 800a422:	4323      	orrs	r3, r4
  for (i = 0U; i < (BufferLength / 4U); i++)
 800a424:	f10c 0c04 	add.w	ip, ip, #4
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800a428:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  for (i = 0U; i < (BufferLength / 4U); i++)
 800a42c:	45b4      	cmp	ip, r6
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800a42e:	602b      	str	r3, [r5, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800a430:	d1ec      	bne.n	800a40c <CRC_Handle_8+0x10>
  if ((BufferLength % 4U) != 0U)
 800a432:	f012 0203 	ands.w	r2, r2, #3
 800a436:	d00c      	beq.n	800a452 <CRC_Handle_8+0x56>
    if ((BufferLength % 4U) == 1U)
 800a438:	2a01      	cmp	r2, #1
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800a43a:	f811 4027 	ldrb.w	r4, [r1, r7, lsl #2]
 800a43e:	ea4f 0787 	mov.w	r7, r7, lsl #2
    if ((BufferLength % 4U) == 1U)
 800a442:	d009      	beq.n	800a458 <CRC_Handle_8+0x5c>
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
    }
    if ((BufferLength % 4U) == 3U)
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800a444:	4439      	add	r1, r7
    if ((BufferLength % 4U) == 2U)
 800a446:	2a02      	cmp	r2, #2
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800a448:	784b      	ldrb	r3, [r1, #1]
 800a44a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
      *pReg = data;
 800a44e:	802b      	strh	r3, [r5, #0]
    if ((BufferLength % 4U) == 2U)
 800a450:	d107      	bne.n	800a462 <CRC_Handle_8+0x66>
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800a452:	6828      	ldr	r0, [r5, #0]
}
 800a454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800a458:	702c      	strb	r4, [r5, #0]
  return hcrc->Instance->DR;
 800a45a:	6805      	ldr	r5, [r0, #0]
 800a45c:	6828      	ldr	r0, [r5, #0]
}
 800a45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800a462:	788b      	ldrb	r3, [r1, #2]
 800a464:	702b      	strb	r3, [r5, #0]
  return hcrc->Instance->DR;
 800a466:	6805      	ldr	r5, [r0, #0]
 800a468:	6828      	ldr	r0, [r5, #0]
}
 800a46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a46e:	bf00      	nop

0800a470 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800a470:	b530      	push	{r4, r5, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800a472:	ea5f 0e52 	movs.w	lr, r2, lsr #1
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
  }
  if ((BufferLength % 2U) != 0U)
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800a476:	6804      	ldr	r4, [r0, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800a478:	d00b      	beq.n	800a492 <CRC_Handle_16+0x22>
 800a47a:	2300      	movs	r3, #0
 800a47c:	1c8d      	adds	r5, r1, #2
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800a47e:	f831 c023 	ldrh.w	ip, [r1, r3, lsl #2]
 800a482:	f835 0023 	ldrh.w	r0, [r5, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800a486:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800a488:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
  for (i = 0U; i < (BufferLength / 2U); i++)
 800a48c:	4573      	cmp	r3, lr
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800a48e:	6020      	str	r0, [r4, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800a490:	d1f5      	bne.n	800a47e <CRC_Handle_16+0xe>
  if ((BufferLength % 2U) != 0U)
 800a492:	07d3      	lsls	r3, r2, #31
    *pReg = pBuffer[2U * i];
 800a494:	bf44      	itt	mi
 800a496:	f831 302e 	ldrhmi.w	r3, [r1, lr, lsl #2]
 800a49a:	8023      	strhmi	r3, [r4, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800a49c:	6820      	ldr	r0, [r4, #0]
}
 800a49e:	bd30      	pop	{r4, r5, pc}

0800a4a0 <HAL_CRC_Init>:
  if (hcrc == NULL)
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d036      	beq.n	800a512 <HAL_CRC_Init+0x72>
{
 800a4a4:	b510      	push	{r4, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a4a6:	7f43      	ldrb	r3, [r0, #29]
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a4ae:	b363      	cbz	r3, 800a50a <HAL_CRC_Init+0x6a>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a4b0:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a4b6:	b9f3      	cbnz	r3, 800a4f6 <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	4a17      	ldr	r2, [pc, #92]	@ (800a518 <HAL_CRC_Init+0x78>)
 800a4bc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a4be:	689a      	ldr	r2, [r3, #8]
 800a4c0:	f022 0218 	bic.w	r2, r2, #24
 800a4c4:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a4c6:	7962      	ldrb	r2, [r4, #5]
 800a4c8:	b18a      	cbz	r2, 800a4ee <HAL_CRC_Init+0x4e>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a4ca:	6922      	ldr	r2, [r4, #16]
 800a4cc:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a4ce:	689a      	ldr	r2, [r3, #8]
 800a4d0:	6961      	ldr	r1, [r4, #20]
 800a4d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a4d6:	430a      	orrs	r2, r1
 800a4d8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a4da:	689a      	ldr	r2, [r3, #8]
 800a4dc:	69a1      	ldr	r1, [r4, #24]
 800a4de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a4e2:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
 800a4e4:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a4e6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800a4e8:	7761      	strb	r1, [r4, #29]
  return HAL_OK;
 800a4ea:	2000      	movs	r0, #0
}
 800a4ec:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f2:	611a      	str	r2, [r3, #16]
 800a4f4:	e7eb      	b.n	800a4ce <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a4f6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f000 f83a 	bl	800a574 <HAL_CRCEx_Polynomial_Set>
 800a500:	b908      	cbnz	r0, 800a506 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	e7df      	b.n	800a4c6 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 800a506:	2001      	movs	r0, #1
}
 800a508:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800a50a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800a50c:	f7fc fc40 	bl	8006d90 <HAL_CRC_MspInit>
 800a510:	e7ce      	b.n	800a4b0 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 800a512:	2001      	movs	r0, #1
}
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	04c11db7 	.word	0x04c11db7

0800a51c <HAL_CRC_Calculate>:
{
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_CRC_DR_RESET(hcrc);
 800a51e:	6806      	ldr	r6, [r0, #0]
  switch (hcrc->InputDataFormat)
 800a520:	6a07      	ldr	r7, [r0, #32]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a522:	2502      	movs	r5, #2
 800a524:	7745      	strb	r5, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800a526:	68b5      	ldr	r5, [r6, #8]
  switch (hcrc->InputDataFormat)
 800a528:	2f02      	cmp	r7, #2
  __HAL_CRC_DR_RESET(hcrc);
 800a52a:	f045 0501 	orr.w	r5, r5, #1
{
 800a52e:	4604      	mov	r4, r0
  __HAL_CRC_DR_RESET(hcrc);
 800a530:	60b5      	str	r5, [r6, #8]
  switch (hcrc->InputDataFormat)
 800a532:	d007      	beq.n	800a544 <HAL_CRC_Calculate+0x28>
 800a534:	2f03      	cmp	r7, #3
 800a536:	d00f      	beq.n	800a558 <HAL_CRC_Calculate+0x3c>
 800a538:	2f01      	cmp	r7, #1
 800a53a:	d008      	beq.n	800a54e <HAL_CRC_Calculate+0x32>
  hcrc->State = HAL_CRC_STATE_READY;
 800a53c:	2301      	movs	r3, #1
 800a53e:	7763      	strb	r3, [r4, #29]
  switch (hcrc->InputDataFormat)
 800a540:	2000      	movs	r0, #0
}
 800a542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800a544:	f7ff ff94 	bl	800a470 <CRC_Handle_16>
  hcrc->State = HAL_CRC_STATE_READY;
 800a548:	2301      	movs	r3, #1
 800a54a:	7763      	strb	r3, [r4, #29]
}
 800a54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800a54e:	f7ff ff55 	bl	800a3fc <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY;
 800a552:	2301      	movs	r3, #1
 800a554:	7763      	strb	r3, [r4, #29]
}
 800a556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (index = 0U; index < BufferLength; index++)
 800a558:	b13a      	cbz	r2, 800a56a <HAL_CRC_Calculate+0x4e>
 800a55a:	3904      	subs	r1, #4
 800a55c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
        hcrc->Instance->DR = pBuffer[index];
 800a560:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800a564:	6033      	str	r3, [r6, #0]
      for (index = 0U; index < BufferLength; index++)
 800a566:	4291      	cmp	r1, r2
 800a568:	d1fa      	bne.n	800a560 <HAL_CRC_Calculate+0x44>
  hcrc->State = HAL_CRC_STATE_READY;
 800a56a:	2301      	movs	r3, #1
      temp = hcrc->Instance->DR;
 800a56c:	6830      	ldr	r0, [r6, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 800a56e:	7763      	strb	r3, [r4, #29]
}
 800a570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a572:	bf00      	nop

0800a574 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a574:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a576:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a578:	3b01      	subs	r3, #1
 800a57a:	1c5c      	adds	r4, r3, #1
 800a57c:	fa21 fc03 	lsr.w	ip, r1, r3
 800a580:	d013      	beq.n	800a5aa <HAL_CRCEx_Polynomial_Set+0x36>
 800a582:	f01c 0f01 	tst.w	ip, #1
 800a586:	d0f7      	beq.n	800a578 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800a588:	2a18      	cmp	r2, #24
 800a58a:	d80f      	bhi.n	800a5ac <HAL_CRCEx_Polynomial_Set+0x38>
 800a58c:	e8df f002 	tbb	[pc, r2]
 800a590:	0e0e0e14 	.word	0x0e0e0e14
 800a594:	0e0e0e0e 	.word	0x0e0e0e0e
 800a598:	0e0e0e1f 	.word	0x0e0e0e1f
 800a59c:	0e0e0e0e 	.word	0x0e0e0e0e
 800a5a0:	0e0e0e22 	.word	0x0e0e0e22
 800a5a4:	0e0e0e0e 	.word	0x0e0e0e0e
 800a5a8:	12          	.byte	0x12
 800a5a9:	00          	.byte	0x00
 800a5aa:	b12a      	cbz	r2, 800a5b8 <HAL_CRCEx_Polynomial_Set+0x44>
 800a5ac:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 800a5ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5b2:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 800a5b4:	2b06      	cmp	r3, #6
 800a5b6:	d8f9      	bhi.n	800a5ac <HAL_CRCEx_Polynomial_Set+0x38>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a5b8:	6804      	ldr	r4, [r0, #0]
 800a5ba:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a5bc:	68a3      	ldr	r3, [r4, #8]
 800a5be:	f023 0318 	bic.w	r3, r3, #24
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	60a3      	str	r3, [r4, #8]
}
 800a5c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5cc:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_16B)
 800a5ce:	2b0f      	cmp	r3, #15
 800a5d0:	d9f2      	bls.n	800a5b8 <HAL_CRCEx_Polynomial_Set+0x44>
 800a5d2:	e7eb      	b.n	800a5ac <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 800a5d4:	2b07      	cmp	r3, #7
 800a5d6:	d9ef      	bls.n	800a5b8 <HAL_CRCEx_Polynomial_Set+0x44>
 800a5d8:	e7e8      	b.n	800a5ac <HAL_CRCEx_Polynomial_Set+0x38>
 800a5da:	bf00      	nop

0800a5dc <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d050      	beq.n	800a682 <HAL_DMA_Init+0xa6>
{
 800a5e0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a5e2:	4a2e      	ldr	r2, [pc, #184]	@ (800a69c <HAL_DMA_Init+0xc0>)
 800a5e4:	6804      	ldr	r4, [r0, #0]
 800a5e6:	4294      	cmp	r4, r2
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	d941      	bls.n	800a670 <HAL_DMA_Init+0x94>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800a5ec:	492c      	ldr	r1, [pc, #176]	@ (800a6a0 <HAL_DMA_Init+0xc4>)
 800a5ee:	4a2d      	ldr	r2, [pc, #180]	@ (800a6a4 <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA2;
 800a5f0:	4d2d      	ldr	r5, [pc, #180]	@ (800a6a8 <HAL_DMA_Init+0xcc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800a5f2:	4421      	add	r1, r4
 800a5f4:	fba2 2101 	umull	r2, r1, r2, r1
 800a5f8:	0909      	lsrs	r1, r1, #4
 800a5fa:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a602:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a606:	691f      	ldr	r7, [r3, #16]
  tmp = hdma->Instance->CCR;
 800a608:	6820      	ldr	r0, [r4, #0]
 800a60a:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp |=  hdma->Init.Direction        |
 800a60c:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a60e:	433a      	orrs	r2, r7
 800a610:	695f      	ldr	r7, [r3, #20]
 800a612:	6459      	str	r1, [r3, #68]	@ 0x44
 800a614:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a616:	699f      	ldr	r7, [r3, #24]
 800a618:	433a      	orrs	r2, r7
 800a61a:	69df      	ldr	r7, [r3, #28]
 800a61c:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800a61e:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a620:	f420 40ff 	bic.w	r0, r0, #32640	@ 0x7f80
 800a624:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800a628:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 800a62a:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a62c:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 800a630:	6022      	str	r2, [r4, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a632:	d014      	beq.n	800a65e <HAL_DMA_Init+0x82>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a634:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a636:	f001 011c 	and.w	r1, r1, #28
 800a63a:	220f      	movs	r2, #15
 800a63c:	408a      	lsls	r2, r1
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a63e:	4088      	lsls	r0, r1
    if (DMA1 == hdma->DmaBaseAddress)
 800a640:	491a      	ldr	r1, [pc, #104]	@ (800a6ac <HAL_DMA_Init+0xd0>)
 800a642:	428d      	cmp	r5, r1
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a644:	ea6f 0202 	mvn.w	r2, r2
    if (DMA1 == hdma->DmaBaseAddress)
 800a648:	d01d      	beq.n	800a686 <HAL_DMA_Init+0xaa>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a64a:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	@ 0x4a8
 800a64e:	4022      	ands	r2, r4
 800a650:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a654:	f8d1 24a8 	ldr.w	r2, [r1, #1192]	@ 0x4a8
 800a658:	4302      	orrs	r2, r0
 800a65a:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a65e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800a660:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a662:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a664:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 800a668:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
}
 800a66c:	bcf0      	pop	{r4, r5, r6, r7}
 800a66e:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800a670:	490f      	ldr	r1, [pc, #60]	@ (800a6b0 <HAL_DMA_Init+0xd4>)
 800a672:	4a0c      	ldr	r2, [pc, #48]	@ (800a6a4 <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA1;
 800a674:	4d0d      	ldr	r5, [pc, #52]	@ (800a6ac <HAL_DMA_Init+0xd0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800a676:	4421      	add	r1, r4
 800a678:	fba2 2101 	umull	r2, r1, r2, r1
 800a67c:	0909      	lsrs	r1, r1, #4
 800a67e:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 800a680:	e7bc      	b.n	800a5fc <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 800a682:	2001      	movs	r0, #1
}
 800a684:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a686:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800a68a:	400a      	ands	r2, r1
 800a68c:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a690:	f8d5 20a8 	ldr.w	r2, [r5, #168]	@ 0xa8
 800a694:	4302      	orrs	r2, r0
 800a696:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
 800a69a:	e7e0      	b.n	800a65e <HAL_DMA_Init+0x82>
 800a69c:	40020407 	.word	0x40020407
 800a6a0:	bffdfbf8 	.word	0xbffdfbf8
 800a6a4:	cccccccd 	.word	0xcccccccd
 800a6a8:	40020400 	.word	0x40020400
 800a6ac:	40020000 	.word	0x40020000
 800a6b0:	bffdfff8 	.word	0xbffdfff8

0800a6b4 <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a6b4:	f890 c024 	ldrb.w	ip, [r0, #36]	@ 0x24
 800a6b8:	f1bc 0f01 	cmp.w	ip, #1
 800a6bc:	d03c      	beq.n	800a738 <HAL_DMA_Start_IT+0x84>
{
 800a6be:	b570      	push	{r4, r5, r6, lr}

  if(HAL_DMA_STATE_READY == hdma->State)
 800a6c0:	f890 c025 	ldrb.w	ip, [r0, #37]	@ 0x25
  __HAL_LOCK(hdma);
 800a6c4:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800a6c6:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 800a6c8:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 800a6cc:	fa5f fe8c 	uxtb.w	lr, ip
 800a6d0:	d004      	beq.n	800a6dc <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 800a6d8:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 800a6da:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800a6dc:	2502      	movs	r5, #2
 800a6de:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    __HAL_DMA_DISABLE(hdma);
 800a6e2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a6e4:	2500      	movs	r5, #0
 800a6e6:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 800a6e8:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a6ea:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 800a6ec:	f026 0601 	bic.w	r6, r6, #1
 800a6f0:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a6f2:	f005 051c 	and.w	r5, r5, #28
 800a6f6:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 800a6f8:	fa0e f505 	lsl.w	r5, lr, r5
 800a6fc:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a6fe:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a700:	6883      	ldr	r3, [r0, #8]
 800a702:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800a704:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a706:	bf0b      	itete	eq
 800a708:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800a70a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800a70c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800a70e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800a710:	b14b      	cbz	r3, 800a726 <HAL_DMA_Start_IT+0x72>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	f043 030e 	orr.w	r3, r3, #14
 800a718:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800a71a:	6823      	ldr	r3, [r4, #0]
 800a71c:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800a720:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800a722:	6023      	str	r3, [r4, #0]
}
 800a724:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	f023 0304 	bic.w	r3, r3, #4
 800a72c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a72e:	6823      	ldr	r3, [r4, #0]
 800a730:	f043 030a 	orr.w	r3, r3, #10
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	e7f0      	b.n	800a71a <HAL_DMA_Start_IT+0x66>
  __HAL_LOCK(hdma);
 800a738:	2002      	movs	r0, #2
}
 800a73a:	4770      	bx	lr

0800a73c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a73c:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800a740:	2a02      	cmp	r2, #2
{
 800a742:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a744:	d006      	beq.n	800a754 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a746:	2204      	movs	r2, #4
 800a748:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800a74a:	2200      	movs	r2, #0
    return HAL_ERROR;
 800a74c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800a74e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800a752:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a754:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a756:	6c42      	ldr	r2, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a758:	6808      	ldr	r0, [r1, #0]
 800a75a:	f020 000e 	bic.w	r0, r0, #14
 800a75e:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800a760:	6808      	ldr	r0, [r1, #0]
 800a762:	f020 0001 	bic.w	r0, r0, #1
 800a766:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a768:	f04f 0c01 	mov.w	ip, #1
 800a76c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800a76e:	f002 021c 	and.w	r2, r2, #28
 800a772:	fa0c f202 	lsl.w	r2, ip, r2
 800a776:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 800a778:	2200      	movs	r2, #0
    return status;
 800a77a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800a77c:	f883 c025 	strb.w	ip, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800a780:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop

0800a788 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a788:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800a78c:	2a02      	cmp	r2, #2
 800a78e:	d003      	beq.n	800a798 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a790:	2204      	movs	r2, #4
 800a792:	63c2      	str	r2, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 800a794:	2001      	movs	r0, #1
}
 800a796:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a798:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a79a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
{
 800a79c:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a79e:	680c      	ldr	r4, [r1, #0]
 800a7a0:	f024 040e 	bic.w	r4, r4, #14
 800a7a4:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800a7a6:	680c      	ldr	r4, [r1, #0]
 800a7a8:	f024 0401 	bic.w	r4, r4, #1
 800a7ac:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a7ae:	f002 021c 	and.w	r2, r2, #28
 800a7b2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800a7b4:	2101      	movs	r1, #1
 800a7b6:	fa01 f202 	lsl.w	r2, r1, r2
 800a7ba:	6062      	str	r2, [r4, #4]
    if(hdma->XferAbortCallback != NULL)
 800a7bc:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800a7be:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800a7c2:	2400      	movs	r4, #0
 800a7c4:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    if(hdma->XferAbortCallback != NULL)
 800a7c8:	b102      	cbz	r2, 800a7cc <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 800a7ca:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800a7cc:	2000      	movs	r0, #0
}
 800a7ce:	bd10      	pop	{r4, pc}

0800a7d0 <HAL_DMA_IRQHandler>:
{
 800a7d0:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a7d2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a7d4:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800a7d6:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a7d8:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800a7da:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a7dc:	f003 031c 	and.w	r3, r3, #28
 800a7e0:	2204      	movs	r2, #4
 800a7e2:	409a      	lsls	r2, r3
 800a7e4:	420a      	tst	r2, r1
 800a7e6:	d00e      	beq.n	800a806 <HAL_DMA_IRQHandler+0x36>
 800a7e8:	f014 0f04 	tst.w	r4, #4
 800a7ec:	d00b      	beq.n	800a806 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a7ee:	682b      	ldr	r3, [r5, #0]
 800a7f0:	069b      	lsls	r3, r3, #26
 800a7f2:	d403      	bmi.n	800a7fc <HAL_DMA_IRQHandler+0x2c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a7f4:	682b      	ldr	r3, [r5, #0]
 800a7f6:	f023 0304 	bic.w	r3, r3, #4
 800a7fa:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800a7fc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800a7fe:	6072      	str	r2, [r6, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 800a800:	b1cb      	cbz	r3, 800a836 <HAL_DMA_IRQHandler+0x66>
}
 800a802:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800a804:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800a806:	2202      	movs	r2, #2
 800a808:	409a      	lsls	r2, r3
 800a80a:	420a      	tst	r2, r1
 800a80c:	d015      	beq.n	800a83a <HAL_DMA_IRQHandler+0x6a>
 800a80e:	f014 0f02 	tst.w	r4, #2
 800a812:	d012      	beq.n	800a83a <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a814:	682b      	ldr	r3, [r5, #0]
 800a816:	0699      	lsls	r1, r3, #26
 800a818:	d406      	bmi.n	800a828 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a81a:	682b      	ldr	r3, [r5, #0]
 800a81c:	f023 030a 	bic.w	r3, r3, #10
 800a820:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800a822:	2301      	movs	r3, #1
 800a824:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if(hdma->XferCpltCallback != NULL)
 800a828:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800a82a:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 800a82c:	2100      	movs	r1, #0
 800a82e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if(hdma->XferCpltCallback != NULL)
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1e5      	bne.n	800a802 <HAL_DMA_IRQHandler+0x32>
}
 800a836:	bc70      	pop	{r4, r5, r6}
 800a838:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800a83a:	2208      	movs	r2, #8
 800a83c:	409a      	lsls	r2, r3
 800a83e:	420a      	tst	r2, r1
 800a840:	d0f9      	beq.n	800a836 <HAL_DMA_IRQHandler+0x66>
 800a842:	0722      	lsls	r2, r4, #28
 800a844:	d5f7      	bpl.n	800a836 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a846:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 800a848:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a84a:	f022 020e 	bic.w	r2, r2, #14
 800a84e:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a850:	2201      	movs	r2, #1
 800a852:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 800a856:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a858:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a85a:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800a85c:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 800a860:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 800a864:	2900      	cmp	r1, #0
 800a866:	d0e6      	beq.n	800a836 <HAL_DMA_IRQHandler+0x66>
}
 800a868:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800a86a:	4708      	bx	r1

0800a86c <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800a86c:	4b06      	ldr	r3, [pc, #24]	@ (800a888 <HAL_FLASH_Unlock+0x1c>)
 800a86e:	695a      	ldr	r2, [r3, #20]
 800a870:	2a00      	cmp	r2, #0
 800a872:	db01      	blt.n	800a878 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800a874:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 800a876:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a878:	4904      	ldr	r1, [pc, #16]	@ (800a88c <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a87a:	4a05      	ldr	r2, [pc, #20]	@ (800a890 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a87c:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a87e:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800a880:	6958      	ldr	r0, [r3, #20]
 800a882:	0fc0      	lsrs	r0, r0, #31
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	40022000 	.word	0x40022000
 800a88c:	45670123 	.word	0x45670123
 800a890:	cdef89ab 	.word	0xcdef89ab

0800a894 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800a894:	4a03      	ldr	r2, [pc, #12]	@ (800a8a4 <HAL_FLASH_Lock+0x10>)
 800a896:	6953      	ldr	r3, [r2, #20]
 800a898:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000

  return HAL_OK;
}
 800a89c:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800a89e:	6153      	str	r3, [r2, #20]
}
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	40022000 	.word	0x40022000

0800a8a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800a8a8:	b570      	push	{r4, r5, r6, lr}
 800a8aa:	4605      	mov	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800a8ac:	f7ff f876 	bl	800999c <HAL_GetTick>
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800a8b0:	4c10      	ldr	r4, [pc, #64]	@ (800a8f4 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 800a8b2:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800a8b4:	e001      	b.n	800a8ba <FLASH_WaitForLastOperation+0x12>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a8b6:	1c69      	adds	r1, r5, #1
 800a8b8:	d10d      	bne.n	800a8d6 <FLASH_WaitForLastOperation+0x2e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800a8ba:	6923      	ldr	r3, [r4, #16]
 800a8bc:	03da      	lsls	r2, r3, #15
 800a8be:	d4fa      	bmi.n	800a8b6 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800a8c0:	6923      	ldr	r3, [r4, #16]
 800a8c2:	4a0d      	ldr	r2, [pc, #52]	@ (800a8f8 <FLASH_WaitForLastOperation+0x50>)

  if(error != 0u)
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	d10d      	bne.n	800a8e4 <FLASH_WaitForLastOperation+0x3c>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a8c8:	6923      	ldr	r3, [r4, #16]
 800a8ca:	07db      	lsls	r3, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a8cc:	bf44      	itt	mi
 800a8ce:	2301      	movmi	r3, #1
 800a8d0:	6123      	strmi	r3, [r4, #16]
    return HAL_ERROR;
 800a8d2:	2000      	movs	r0, #0
  }

  /* If there is an error flag set */
  return HAL_OK;
}
 800a8d4:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) >= Timeout)
 800a8d6:	f7ff f861 	bl	800999c <HAL_GetTick>
 800a8da:	1b80      	subs	r0, r0, r6
 800a8dc:	42a8      	cmp	r0, r5
 800a8de:	d3ec      	bcc.n	800a8ba <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 800a8e0:	2003      	movs	r0, #3
}
 800a8e2:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 800a8e4:	4905      	ldr	r1, [pc, #20]	@ (800a8fc <FLASH_WaitForLastOperation+0x54>)
 800a8e6:	684a      	ldr	r2, [r1, #4]
 800a8e8:	431a      	orrs	r2, r3
 800a8ea:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 800a8ec:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 800a8ee:	6123      	str	r3, [r4, #16]
}
 800a8f0:	bd70      	pop	{r4, r5, r6, pc}
 800a8f2:	bf00      	nop
 800a8f4:	40022000 	.word	0x40022000
 800a8f8:	0002c3fa 	.word	0x0002c3fa
 800a8fc:	20000018 	.word	0x20000018

0800a900 <HAL_FLASH_Program>:
{
 800a900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800a904:	4e34      	ldr	r6, [pc, #208]	@ (800a9d8 <HAL_FLASH_Program+0xd8>)
{
 800a906:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 800a908:	7833      	ldrb	r3, [r6, #0]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d027      	beq.n	800a95e <HAL_FLASH_Program+0x5e>
 800a90e:	2301      	movs	r3, #1
 800a910:	4607      	mov	r7, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a912:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a916:	460d      	mov	r5, r1
 800a918:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 800a91a:	7033      	strb	r3, [r6, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a91c:	f7ff ffc4 	bl	800a8a8 <FLASH_WaitForLastOperation>
 800a920:	4681      	mov	r9, r0
  if(status == HAL_OK)
 800a922:	b120      	cbz	r0, 800a92e <HAL_FLASH_Program+0x2e>
  __HAL_UNLOCK(&pFlash);
 800a924:	2300      	movs	r3, #0
 800a926:	7033      	strb	r3, [r6, #0]
}
 800a928:	4648      	mov	r0, r9
 800a92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800a92e:	4a2b      	ldr	r2, [pc, #172]	@ (800a9dc <HAL_FLASH_Program+0xdc>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a930:	6070      	str	r0, [r6, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800a932:	6813      	ldr	r3, [r2, #0]
 800a934:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800a938:	bf1f      	itttt	ne
 800a93a:	6813      	ldrne	r3, [r2, #0]
 800a93c:	f423 6380 	bicne.w	r3, r3, #1024	@ 0x400
 800a940:	6013      	strne	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800a942:	2302      	movne	r3, #2
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800a944:	7733      	strb	r3, [r6, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800a946:	b17f      	cbz	r7, 800a968 <HAL_FLASH_Program+0x68>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800a948:	1e7b      	subs	r3, r7, #1
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d922      	bls.n	800a994 <HAL_FLASH_Program+0x94>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a94e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a952:	f7ff ffa9 	bl	800a8a8 <FLASH_WaitForLastOperation>
 800a956:	4681      	mov	r9, r0
    FLASH_FlushCaches();
 800a958:	f000 f842 	bl	800a9e0 <FLASH_FlushCaches>
 800a95c:	e7e2      	b.n	800a924 <HAL_FLASH_Program+0x24>
  __HAL_LOCK(&pFlash);
 800a95e:	f04f 0902 	mov.w	r9, #2
}
 800a962:	4648      	mov	r0, r9
 800a964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a968:	4a1c      	ldr	r2, [pc, #112]	@ (800a9dc <HAL_FLASH_Program+0xdc>)
 800a96a:	6953      	ldr	r3, [r2, #20]
 800a96c:	f043 0301 	orr.w	r3, r3, #1
 800a970:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a972:	602c      	str	r4, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800a974:	f3bf 8f6f 	isb	sy
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a978:	f24c 3050 	movw	r0, #50000	@ 0xc350
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800a97c:	f8c5 8004 	str.w	r8, [r5, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a980:	f7ff ff92 	bl	800a8a8 <FLASH_WaitForLastOperation>
 800a984:	f06f 0101 	mvn.w	r1, #1
 800a988:	4681      	mov	r9, r0
      CLEAR_BIT(FLASH->CR, prog_bit);
 800a98a:	4a14      	ldr	r2, [pc, #80]	@ (800a9dc <HAL_FLASH_Program+0xdc>)
 800a98c:	6953      	ldr	r3, [r2, #20]
 800a98e:	400b      	ands	r3, r1
 800a990:	6153      	str	r3, [r2, #20]
 800a992:	e7e1      	b.n	800a958 <HAL_FLASH_Program+0x58>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800a994:	4911      	ldr	r1, [pc, #68]	@ (800a9dc <HAL_FLASH_Program+0xdc>)
 800a996:	694b      	ldr	r3, [r1, #20]
 800a998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a99c:	4622      	mov	r2, r4
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800a99e:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9a0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a9a4:	b672      	cpsid	i
 800a9a6:	1aa9      	subs	r1, r5, r2
 800a9a8:	f502 7080 	add.w	r0, r2, #256	@ 0x100
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800a9ac:	6813      	ldr	r3, [r2, #0]
 800a9ae:	5053      	str	r3, [r2, r1]
    dest_addr++;
    src_addr++;
 800a9b0:	3204      	adds	r2, #4
    row_index--;
  } while (row_index != 0U);
 800a9b2:	4290      	cmp	r0, r2
 800a9b4:	d1fa      	bne.n	800a9ac <HAL_FLASH_Program+0xac>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9b6:	f384 8810 	msr	PRIMASK, r4
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800a9ba:	2f02      	cmp	r7, #2
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a9bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800a9c0:	d003      	beq.n	800a9ca <HAL_FLASH_Program+0xca>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a9c2:	f7ff ff71 	bl	800a8a8 <FLASH_WaitForLastOperation>
 800a9c6:	4681      	mov	r9, r0
    if (prog_bit != 0U)
 800a9c8:	e7c6      	b.n	800a958 <HAL_FLASH_Program+0x58>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a9ca:	f7ff ff6d 	bl	800a8a8 <FLASH_WaitForLastOperation>
 800a9ce:	f46f 2180 	mvn.w	r1, #262144	@ 0x40000
 800a9d2:	4681      	mov	r9, r0
    if (prog_bit != 0U)
 800a9d4:	e7d9      	b.n	800a98a <HAL_FLASH_Program+0x8a>
 800a9d6:	bf00      	nop
 800a9d8:	20000018 	.word	0x20000018
 800a9dc:	40022000 	.word	0x40022000

0800a9e0 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800a9e0:	4915      	ldr	r1, [pc, #84]	@ (800aa38 <FLASH_FlushCaches+0x58>)
 800a9e2:	7f0b      	ldrb	r3, [r1, #28]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800a9e4:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 800a9e8:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800a9ea:	b2db      	uxtb	r3, r3
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800a9ec:	d110      	bne.n	800aa10 <FLASH_FlushCaches+0x30>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a9ee:	4a13      	ldr	r2, [pc, #76]	@ (800aa3c <FLASH_FlushCaches+0x5c>)
 800a9f0:	6810      	ldr	r0, [r2, #0]
 800a9f2:	f420 7000 	bic.w	r0, r0, #512	@ 0x200
 800a9f6:	6010      	str	r0, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a9f8:	6810      	ldr	r0, [r2, #0]
 800a9fa:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 800a9fe:	6010      	str	r0, [r2, #0]
 800aa00:	6810      	ldr	r0, [r2, #0]
 800aa02:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
 800aa06:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800aa08:	6810      	ldr	r0, [r2, #0]
 800aa0a:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 800aa0e:	6010      	str	r0, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800aa10:	3b02      	subs	r3, #2
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d80c      	bhi.n	800aa30 <FLASH_FlushCaches+0x50>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800aa16:	4b09      	ldr	r3, [pc, #36]	@ (800aa3c <FLASH_FlushCaches+0x5c>)
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800aa1e:	601a      	str	r2, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800aa26:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aa2e:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800aa30:	2300      	movs	r3, #0
 800aa32:	770b      	strb	r3, [r1, #28]
}
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	20000018 	.word	0x20000018
 800aa3c:	40022000 	.word	0x40022000

0800aa40 <HAL_FLASHEx_Erase>:
{
 800aa40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 800aa44:	4f40      	ldr	r7, [pc, #256]	@ (800ab48 <HAL_FLASHEx_Erase+0x108>)
 800aa46:	783b      	ldrb	r3, [r7, #0]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d054      	beq.n	800aaf6 <HAL_FLASHEx_Erase+0xb6>
 800aa4c:	4682      	mov	sl, r0
 800aa4e:	2401      	movs	r4, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aa50:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800aa54:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800aa56:	703c      	strb	r4, [r7, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aa58:	f7ff ff26 	bl	800a8a8 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	b120      	cbz	r0, 800aa6a <HAL_FLASHEx_Erase+0x2a>
  __HAL_UNLOCK(&pFlash);
 800aa60:	2300      	movs	r3, #0
 800aa62:	703b      	strb	r3, [r7, #0]
}
 800aa64:	4630      	mov	r0, r6
 800aa66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800aa6a:	4b38      	ldr	r3, [pc, #224]	@ (800ab4c <HAL_FLASHEx_Erase+0x10c>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aa6c:	6078      	str	r0, [r7, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	f412 7f00 	tst.w	r2, #512	@ 0x200
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800aa74:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800aa76:	d142      	bne.n	800aafe <HAL_FLASHEx_Erase+0xbe>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800aa78:	0552      	lsls	r2, r2, #21
 800aa7a:	d54b      	bpl.n	800ab14 <HAL_FLASHEx_Erase+0xd4>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa82:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800aa84:	2302      	movs	r3, #2
 800aa86:	773b      	strb	r3, [r7, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800aa88:	f8da 3000 	ldr.w	r3, [sl]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d043      	beq.n	800ab18 <HAL_FLASHEx_Erase+0xd8>
      *PageError = 0xFFFFFFFFU;
 800aa90:	f04f 33ff 	mov.w	r3, #4294967295
 800aa94:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800aa98:	e9da 5302 	ldrd	r5, r3, [sl, #8]
 800aa9c:	442b      	add	r3, r5
 800aa9e:	429d      	cmp	r5, r3
 800aaa0:	d226      	bcs.n	800aaf0 <HAL_FLASHEx_Erase+0xb0>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800aaa2:	4c2a      	ldr	r4, [pc, #168]	@ (800ab4c <HAL_FLASHEx_Erase+0x10c>)
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800aaa4:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 800ab50 <HAL_FLASHEx_Erase+0x110>
 800aaa8:	e005      	b.n	800aab6 <HAL_FLASHEx_Erase+0x76>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800aaaa:	e9da 3202 	ldrd	r3, r2, [sl, #8]
 800aaae:	3501      	adds	r5, #1
 800aab0:	4413      	add	r3, r2
 800aab2:	42ab      	cmp	r3, r5
 800aab4:	d91c      	bls.n	800aaf0 <HAL_FLASHEx_Erase+0xb0>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800aab6:	6962      	ldr	r2, [r4, #20]
 800aab8:	00eb      	lsls	r3, r5, #3
 800aaba:	f422 727e 	bic.w	r2, r2, #1016	@ 0x3f8
 800aabe:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800aac2:	4313      	orrs	r3, r2
 800aac4:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800aac6:	6963      	ldr	r3, [r4, #20]
 800aac8:	f043 0302 	orr.w	r3, r3, #2
 800aacc:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800aace:	6963      	ldr	r3, [r4, #20]
 800aad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aad4:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aad6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800aada:	f7ff fee5 	bl	800a8a8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800aade:	6963      	ldr	r3, [r4, #20]
 800aae0:	ea03 0309 	and.w	r3, r3, r9
 800aae4:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 800aae6:	2800      	cmp	r0, #0
 800aae8:	d0df      	beq.n	800aaaa <HAL_FLASHEx_Erase+0x6a>
          *PageError = page_index;
 800aaea:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aaee:	4606      	mov	r6, r0
    FLASH_FlushCaches();
 800aaf0:	f7ff ff76 	bl	800a9e0 <FLASH_FlushCaches>
 800aaf4:	e7b4      	b.n	800aa60 <HAL_FLASHEx_Erase+0x20>
  __HAL_LOCK(&pFlash);
 800aaf6:	2602      	movs	r6, #2
}
 800aaf8:	4630      	mov	r0, r6
 800aafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800aafe:	0551      	lsls	r1, r2, #21
 800ab00:	d506      	bpl.n	800ab10 <HAL_FLASHEx_Erase+0xd0>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab08:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	773b      	strb	r3, [r7, #28]
 800ab0e:	e7bb      	b.n	800aa88 <HAL_FLASHEx_Erase+0x48>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800ab10:	773c      	strb	r4, [r7, #28]
 800ab12:	e7b9      	b.n	800aa88 <HAL_FLASHEx_Erase+0x48>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800ab14:	7738      	strb	r0, [r7, #28]
 800ab16:	e7b7      	b.n	800aa88 <HAL_FLASHEx_Erase+0x48>
    if((Banks & FLASH_BANK_1) != 0U)
 800ab18:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ab1c:	07db      	lsls	r3, r3, #31
 800ab1e:	d504      	bpl.n	800ab2a <HAL_FLASHEx_Erase+0xea>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800ab20:	4a0a      	ldr	r2, [pc, #40]	@ (800ab4c <HAL_FLASHEx_Erase+0x10c>)
 800ab22:	6953      	ldr	r3, [r2, #20]
 800ab24:	f043 0304 	orr.w	r3, r3, #4
 800ab28:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800ab2a:	4c08      	ldr	r4, [pc, #32]	@ (800ab4c <HAL_FLASHEx_Erase+0x10c>)
 800ab2c:	6963      	ldr	r3, [r4, #20]
 800ab2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab32:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ab34:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ab38:	f7ff feb6 	bl	800a8a8 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800ab3c:	6963      	ldr	r3, [r4, #20]
 800ab3e:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ab42:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800ab44:	6163      	str	r3, [r4, #20]
 800ab46:	e7d3      	b.n	800aaf0 <HAL_FLASHEx_Erase+0xb0>
 800ab48:	20000018 	.word	0x20000018
 800ab4c:	40022000 	.word	0x40022000
 800ab50:	fffffc05 	.word	0xfffffc05

0800ab54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ab58:	680c      	ldr	r4, [r1, #0]
{
 800ab5a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ab5c:	2c00      	cmp	r4, #0
 800ab5e:	f000 8084 	beq.w	800ac6a <HAL_GPIO_Init+0x116>
  uint32_t position = 0x00u;
 800ab62:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ab64:	f04f 0b01 	mov.w	fp, #1
 800ab68:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 800ab6c:	ea1e 0a04 	ands.w	sl, lr, r4
 800ab70:	d076      	beq.n	800ac60 <HAL_GPIO_Init+0x10c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ab72:	684d      	ldr	r5, [r1, #4]
 800ab74:	f005 0203 	and.w	r2, r5, #3
 800ab78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ab7c:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ab7e:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ab82:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ab86:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ab8a:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ab8e:	d96f      	bls.n	800ac70 <HAL_GPIO_Init+0x11c>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ab90:	2a03      	cmp	r2, #3
 800ab92:	f040 80ab 	bne.w	800acec <HAL_GPIO_Init+0x198>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ab96:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 800ab9a:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ab9e:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800aba2:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800aba4:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800aba8:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800abaa:	d059      	beq.n	800ac60 <HAL_GPIO_Init+0x10c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800abac:	4f60      	ldr	r7, [pc, #384]	@ (800ad30 <HAL_GPIO_Init+0x1dc>)
 800abae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800abb0:	f042 0201 	orr.w	r2, r2, #1
 800abb4:	663a      	str	r2, [r7, #96]	@ 0x60
 800abb6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800abb8:	f002 0201 	and.w	r2, r2, #1
 800abbc:	9203      	str	r2, [sp, #12]
 800abbe:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 800abc0:	f023 0203 	bic.w	r2, r3, #3
 800abc4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800abc8:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800abcc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800abd0:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800abd2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800abd6:	260f      	movs	r6, #15
 800abd8:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800abdc:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800abe0:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800abe4:	d018      	beq.n	800ac18 <HAL_GPIO_Init+0xc4>
 800abe6:	4e53      	ldr	r6, [pc, #332]	@ (800ad34 <HAL_GPIO_Init+0x1e0>)
 800abe8:	42b0      	cmp	r0, r6
 800abea:	f000 8092 	beq.w	800ad12 <HAL_GPIO_Init+0x1be>
 800abee:	4e52      	ldr	r6, [pc, #328]	@ (800ad38 <HAL_GPIO_Init+0x1e4>)
 800abf0:	42b0      	cmp	r0, r6
 800abf2:	f000 8095 	beq.w	800ad20 <HAL_GPIO_Init+0x1cc>
 800abf6:	f8df e148 	ldr.w	lr, [pc, #328]	@ 800ad40 <HAL_GPIO_Init+0x1ec>
 800abfa:	4570      	cmp	r0, lr
 800abfc:	f000 8082 	beq.w	800ad04 <HAL_GPIO_Init+0x1b0>
 800ac00:	f8df e140 	ldr.w	lr, [pc, #320]	@ 800ad44 <HAL_GPIO_Init+0x1f0>
 800ac04:	4570      	cmp	r0, lr
 800ac06:	bf0c      	ite	eq
 800ac08:	f04f 0e04 	moveq.w	lr, #4
 800ac0c:	f04f 0e07 	movne.w	lr, #7
 800ac10:	fa0e fc0c 	lsl.w	ip, lr, ip
 800ac14:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ac18:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ac1a:	4a48      	ldr	r2, [pc, #288]	@ (800ad3c <HAL_GPIO_Init+0x1e8>)
 800ac1c:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ac1e:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800ac20:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800ac24:	4e45      	ldr	r6, [pc, #276]	@ (800ad3c <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 800ac26:	bf54      	ite	pl
 800ac28:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800ac2a:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 800ac2e:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 800ac30:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ac32:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800ac34:	4e41      	ldr	r6, [pc, #260]	@ (800ad3c <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 800ac36:	bf54      	ite	pl
 800ac38:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800ac3a:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 800ac3e:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800ac40:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800ac42:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 800ac44:	4e3d      	ldr	r6, [pc, #244]	@ (800ad3c <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 800ac46:	bf54      	ite	pl
 800ac48:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800ac4a:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 800ac4e:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 800ac50:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800ac52:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800ac54:	4d39      	ldr	r5, [pc, #228]	@ (800ad3c <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 800ac56:	bf54      	ite	pl
 800ac58:	403a      	andpl	r2, r7
          temp |= iocurrent;
 800ac5a:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 800ac5e:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 800ac60:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ac62:	fa34 f203 	lsrs.w	r2, r4, r3
 800ac66:	f47f af7f 	bne.w	800ab68 <HAL_GPIO_Init+0x14>
  }
}
 800ac6a:	b005      	add	sp, #20
 800ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800ac70:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ac74:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ac76:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ac7a:	fa06 f80c 	lsl.w	r8, r6, ip
 800ac7e:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800ac82:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 800ac86:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ac8a:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ac8c:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ac90:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 800ac94:	fa0e fe03 	lsl.w	lr, lr, r3
 800ac98:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 800ac9c:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800aca0:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aca4:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800aca8:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800acac:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800acb0:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800acb2:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800acb6:	f47f af6e 	bne.w	800ab96 <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800acba:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 800acbc:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800acc0:	f003 0e07 	and.w	lr, r3, #7
 800acc4:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800acc8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800accc:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 800acd0:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800acd4:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800acd6:	260f      	movs	r6, #15
 800acd8:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800acdc:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800acde:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ace2:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 800ace6:	f8c8 e020 	str.w	lr, [r8, #32]
 800acea:	e754      	b.n	800ab96 <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 800acec:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800acf0:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800acf2:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800acf6:	fa06 fe0c 	lsl.w	lr, r6, ip
 800acfa:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 800acfe:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ad02:	e748      	b.n	800ab96 <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ad04:	f04f 0e03 	mov.w	lr, #3
 800ad08:	fa0e fc0c 	lsl.w	ip, lr, ip
 800ad0c:	ea47 070c 	orr.w	r7, r7, ip
 800ad10:	e782      	b.n	800ac18 <HAL_GPIO_Init+0xc4>
 800ad12:	f04f 0e01 	mov.w	lr, #1
 800ad16:	fa0e fc0c 	lsl.w	ip, lr, ip
 800ad1a:	ea47 070c 	orr.w	r7, r7, ip
 800ad1e:	e77b      	b.n	800ac18 <HAL_GPIO_Init+0xc4>
 800ad20:	f04f 0e02 	mov.w	lr, #2
 800ad24:	fa0e fc0c 	lsl.w	ip, lr, ip
 800ad28:	ea47 070c 	orr.w	r7, r7, ip
 800ad2c:	e774      	b.n	800ac18 <HAL_GPIO_Init+0xc4>
 800ad2e:	bf00      	nop
 800ad30:	40021000 	.word	0x40021000
 800ad34:	48000400 	.word	0x48000400
 800ad38:	48000800 	.word	0x48000800
 800ad3c:	40010400 	.word	0x40010400
 800ad40:	48000c00 	.word	0x48000c00
 800ad44:	48001000 	.word	0x48001000

0800ad48 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800ad48:	6903      	ldr	r3, [r0, #16]
 800ad4a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800ad4c:	bf14      	ite	ne
 800ad4e:	2001      	movne	r0, #1
 800ad50:	2000      	moveq	r0, #0
 800ad52:	4770      	bx	lr

0800ad54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ad54:	b10a      	cbz	r2, 800ad5a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ad56:	6181      	str	r1, [r0, #24]
 800ad58:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ad5a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop

0800ad60 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ad60:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ad62:	ea01 0203 	and.w	r2, r1, r3
 800ad66:	ea21 0103 	bic.w	r1, r1, r3
 800ad6a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad6e:	6181      	str	r1, [r0, #24]
}
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop

0800ad74 <I2C_IsErrorOccurred>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t itflag   = hi2c->Instance->ISR;
 800ad74:	6803      	ldr	r3, [r0, #0]
{
 800ad76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad7a:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800ad7c:	6998      	ldr	r0, [r3, #24]
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ad7e:	f010 0c10 	ands.w	ip, r0, #16
 800ad82:	d043      	beq.n	800ae0c <I2C_IsErrorOccurred+0x98>
 800ad84:	4616      	mov	r6, r2
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad86:	2210      	movs	r2, #16
 800ad88:	460f      	mov	r7, r1
 800ad8a:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800ad8c:	f04f 0800 	mov.w	r8, #0

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ad90:	699a      	ldr	r2, [r3, #24]
 800ad92:	0692      	lsls	r2, r2, #26
 800ad94:	f100 808d 	bmi.w	800aeb2 <I2C_IsErrorOccurred+0x13e>
 800ad98:	f1b8 0f00 	cmp.w	r8, #0
 800ad9c:	d106      	bne.n	800adac <I2C_IsErrorOccurred+0x38>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ad9e:	1c78      	adds	r0, r7, #1
 800ada0:	d150      	bne.n	800ae44 <I2C_IsErrorOccurred+0xd0>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ada2:	699a      	ldr	r2, [r3, #24]
 800ada4:	0691      	lsls	r1, r2, #26
 800ada6:	d5fc      	bpl.n	800ada2 <I2C_IsErrorOccurred+0x2e>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ada8:	2220      	movs	r2, #32
 800adaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800adac:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800adae:	05d5      	lsls	r5, r2, #23
    error_code |= HAL_I2C_ERROR_AF;
 800adb0:	f04f 0c04 	mov.w	ip, #4
    status = HAL_ERROR;
 800adb4:	f04f 0001 	mov.w	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800adb8:	d42c      	bmi.n	800ae14 <I2C_IsErrorOccurred+0xa0>

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800adba:	0557      	lsls	r7, r2, #21
 800adbc:	d53c      	bpl.n	800ae38 <I2C_IsErrorOccurred+0xc4>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800adbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800adc2:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800adc4:	f04c 0c08 	orr.w	ip, ip, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800adc8:	0596      	lsls	r6, r2, #22
 800adca:	d504      	bpl.n	800add6 <I2C_IsErrorOccurred+0x62>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800adcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800add0:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800add4:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800add6:	699a      	ldr	r2, [r3, #24]
 800add8:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800adda:	bf44      	itt	mi
 800addc:	2200      	movmi	r2, #0
 800adde:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ade0:	699a      	ldr	r2, [r3, #24]
 800ade2:	07d2      	lsls	r2, r2, #31
 800ade4:	d523      	bpl.n	800ae2e <I2C_IsErrorOccurred+0xba>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	4934      	ldr	r1, [pc, #208]	@ (800aebc <I2C_IsErrorOccurred+0x148>)
 800adea:	400a      	ands	r2, r1
 800adec:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800adee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800adf0:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 800adf2:	ea43 030c 	orr.w	r3, r3, ip
    hi2c->State = HAL_I2C_STATE_READY;
 800adf6:	2120      	movs	r1, #32
    hi2c->ErrorCode |= error_code;
 800adf8:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adfa:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800adfe:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae02:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800ae06:	2001      	movs	r0, #1
  }

  return status;
}
 800ae08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  itflag = hi2c->Instance->ISR;
 800ae0c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ae0e:	05d5      	lsls	r5, r2, #23
  HAL_StatusTypeDef status = HAL_OK;
 800ae10:	4660      	mov	r0, ip
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ae12:	d5d2      	bpl.n	800adba <I2C_IsErrorOccurred+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ae14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ae18:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ae1a:	0551      	lsls	r1, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800ae1c:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ae20:	d5d2      	bpl.n	800adc8 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ae22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ae26:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800ae28:	f04c 0c08 	orr.w	ip, ip, #8
 800ae2c:	e7cc      	b.n	800adc8 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ae2e:	699a      	ldr	r2, [r3, #24]
 800ae30:	f042 0201 	orr.w	r2, r2, #1
 800ae34:	619a      	str	r2, [r3, #24]
 800ae36:	e7d6      	b.n	800ade6 <I2C_IsErrorOccurred+0x72>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ae38:	0595      	lsls	r5, r2, #22
 800ae3a:	d4c7      	bmi.n	800adcc <I2C_IsErrorOccurred+0x58>
  if (status != HAL_OK)
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d1ca      	bne.n	800add6 <I2C_IsErrorOccurred+0x62>
}
 800ae40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ae44:	f7fe fdaa 	bl	800999c <HAL_GetTick>
 800ae48:	1b80      	subs	r0, r0, r6
 800ae4a:	42b8      	cmp	r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ae4c:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ae4e:	d804      	bhi.n	800ae5a <I2C_IsErrorOccurred+0xe6>
 800ae50:	b11f      	cbz	r7, 800ae5a <I2C_IsErrorOccurred+0xe6>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ae52:	699a      	ldr	r2, [r3, #24]
 800ae54:	0692      	lsls	r2, r2, #26
 800ae56:	d5a2      	bpl.n	800ad9e <I2C_IsErrorOccurred+0x2a>
 800ae58:	e7a6      	b.n	800ada8 <I2C_IsErrorOccurred+0x34>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ae5a:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800ae5c:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ae60:	6999      	ldr	r1, [r3, #24]
 800ae62:	040d      	lsls	r5, r1, #16
          tmp2 = hi2c->Mode;
 800ae64:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ae66:	d50d      	bpl.n	800ae84 <I2C_IsErrorOccurred+0x110>
 800ae68:	0441      	lsls	r1, r0, #17
 800ae6a:	d40b      	bmi.n	800ae84 <I2C_IsErrorOccurred+0x110>
              (tmp1 != I2C_CR2_STOP) && \
 800ae6c:	2a20      	cmp	r2, #32
 800ae6e:	d009      	beq.n	800ae84 <I2C_IsErrorOccurred+0x110>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ae70:	685a      	ldr	r2, [r3, #4]
 800ae72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae76:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800ae78:	f7fe fd90 	bl	800999c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae7c:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800ae7e:	4606      	mov	r6, r0
 800ae80:	e000      	b.n	800ae84 <I2C_IsErrorOccurred+0x110>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	699d      	ldr	r5, [r3, #24]
 800ae86:	f015 0520 	ands.w	r5, r5, #32
 800ae8a:	d181      	bne.n	800ad90 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ae8c:	f7fe fd86 	bl	800999c <HAL_GetTick>
 800ae90:	1b80      	subs	r0, r0, r6
 800ae92:	2819      	cmp	r0, #25
 800ae94:	d9f5      	bls.n	800ae82 <I2C_IsErrorOccurred+0x10e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae96:	6c63      	ldr	r3, [r4, #68]	@ 0x44
              __HAL_UNLOCK(hi2c);
 800ae98:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
              hi2c->State = HAL_I2C_STATE_READY;
 800ae9c:	2220      	movs	r2, #32
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	6463      	str	r3, [r4, #68]	@ 0x44
              status = HAL_ERROR;
 800aea2:	f04f 0801 	mov.w	r8, #1
              hi2c->State = HAL_I2C_STATE_READY;
 800aea6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aeaa:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800aeac:	f884 5042 	strb.w	r5, [r4, #66]	@ 0x42
              status = HAL_ERROR;
 800aeb0:	e7e8      	b.n	800ae84 <I2C_IsErrorOccurred+0x110>
    if (status == HAL_OK)
 800aeb2:	f1b8 0f00 	cmp.w	r8, #0
 800aeb6:	f47f af79 	bne.w	800adac <I2C_IsErrorOccurred+0x38>
 800aeba:	e775      	b.n	800ada8 <I2C_IsErrorOccurred+0x34>
 800aebc:	fe00e800 	.word	0xfe00e800

0800aec0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	4604      	mov	r4, r0
 800aec4:	460e      	mov	r6, r1
 800aec6:	4615      	mov	r5, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aec8:	e004      	b.n	800aed4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aeca:	f7ff ff53 	bl	800ad74 <I2C_IsErrorOccurred>
 800aece:	b9e8      	cbnz	r0, 800af0c <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (Timeout != HAL_MAX_DELAY)
 800aed0:	1c72      	adds	r2, r6, #1
 800aed2:	d108      	bne.n	800aee6 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	079b      	lsls	r3, r3, #30
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aeda:	462a      	mov	r2, r5
 800aedc:	4631      	mov	r1, r6
 800aede:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aee0:	d5f3      	bpl.n	800aeca <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800aee2:	2000      	movs	r0, #0
}
 800aee4:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aee6:	f7fe fd59 	bl	800999c <HAL_GetTick>
 800aeea:	1b40      	subs	r0, r0, r5
 800aeec:	42b0      	cmp	r0, r6
 800aeee:	d801      	bhi.n	800aef4 <I2C_WaitOnTXISFlagUntilTimeout+0x34>
 800aef0:	2e00      	cmp	r6, #0
 800aef2:	d1ef      	bne.n	800aed4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aef4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aef6:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aef8:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800aefc:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aefe:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800af00:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800af04:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af08:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800af0c:	2001      	movs	r0, #1
}
 800af0e:	bd70      	pop	{r4, r5, r6, pc}

0800af10 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800af10:	b570      	push	{r4, r5, r6, lr}
 800af12:	4605      	mov	r5, r0
 800af14:	460c      	mov	r4, r1
 800af16:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af18:	e008      	b.n	800af2c <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af1a:	f7ff ff2b 	bl	800ad74 <I2C_IsErrorOccurred>
 800af1e:	b9d0      	cbnz	r0, 800af56 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af20:	f7fe fd3c 	bl	800999c <HAL_GetTick>
 800af24:	1b80      	subs	r0, r0, r6
 800af26:	42a0      	cmp	r0, r4
 800af28:	d809      	bhi.n	800af3e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800af2a:	b144      	cbz	r4, 800af3e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	069b      	lsls	r3, r3, #26
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af32:	4632      	mov	r2, r6
 800af34:	4621      	mov	r1, r4
 800af36:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af38:	d5ef      	bpl.n	800af1a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800af3a:	2000      	movs	r0, #0
}
 800af3c:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af3e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800af40:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af42:	f043 0320 	orr.w	r3, r3, #32
      hi2c->State = HAL_I2C_STATE_READY;
 800af46:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af48:	646b      	str	r3, [r5, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800af4a:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 800af4e:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800af52:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
      return HAL_ERROR;
 800af56:	2001      	movs	r0, #1
}
 800af58:	bd70      	pop	{r4, r5, r6, pc}
 800af5a:	bf00      	nop

0800af5c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800af5c:	b570      	push	{r4, r5, r6, lr}
 800af5e:	4604      	mov	r4, r0
 800af60:	460d      	mov	r5, r1
 800af62:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af64:	e00c      	b.n	800af80 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af66:	f7ff ff05 	bl	800ad74 <I2C_IsErrorOccurred>
 800af6a:	b9d8      	cbnz	r0, 800afa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	699a      	ldr	r2, [r3, #24]
 800af70:	0691      	lsls	r1, r2, #26
 800af72:	d419      	bmi.n	800afa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af74:	f7fe fd12 	bl	800999c <HAL_GetTick>
 800af78:	1b80      	subs	r0, r0, r6
 800af7a:	42a8      	cmp	r0, r5
 800af7c:	d809      	bhi.n	800af92 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800af7e:	b145      	cbz	r5, 800af92 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af80:	6823      	ldr	r3, [r4, #0]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	075b      	lsls	r3, r3, #29
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af86:	4632      	mov	r2, r6
 800af88:	4629      	mov	r1, r5
 800af8a:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af8c:	d5eb      	bpl.n	800af66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 800af8e:	2000      	movs	r0, #0
}
 800af90:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af92:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800af94:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af96:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800af98:	2100      	movs	r1, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af9a:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800af9c:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 800afa0:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
      return HAL_ERROR;
 800afa4:	2001      	movs	r0, #1
}
 800afa6:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800afa8:	699a      	ldr	r2, [r3, #24]
 800afaa:	0752      	lsls	r2, r2, #29
 800afac:	d502      	bpl.n	800afb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x58>
 800afae:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800afb0:	2a00      	cmp	r2, #0
 800afb2:	d1ec      	bne.n	800af8e <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800afb4:	699a      	ldr	r2, [r3, #24]
 800afb6:	f012 0210 	ands.w	r2, r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afba:	bf1c      	itt	ne
 800afbc:	2110      	movne	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800afbe:	2204      	movne	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800afc0:	f04f 0020 	mov.w	r0, #32
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afc4:	bf18      	it	ne
 800afc6:	61d9      	strne	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800afc8:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800afca:	61d8      	str	r0, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800afcc:	685a      	ldr	r2, [r3, #4]
 800afce:	4905      	ldr	r1, [pc, #20]	@ (800afe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x88>)
 800afd0:	400a      	ands	r2, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800afd2:	2100      	movs	r1, #0
        I2C_RESET_CR2(hi2c);
 800afd4:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800afd6:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 800afda:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800afde:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
        return HAL_ERROR;
 800afe2:	e7df      	b.n	800afa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800afe4:	fe00e800 	.word	0xfe00e800

0800afe8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800afe8:	2800      	cmp	r0, #0
 800afea:	d04f      	beq.n	800b08c <HAL_I2C_Init+0xa4>
{
 800afec:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800afee:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800aff2:	4604      	mov	r4, r0
 800aff4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d042      	beq.n	800b082 <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 800affc:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800affe:	2224      	movs	r2, #36	@ 0x24
 800b000:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b004:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b006:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 800b008:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b00c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800b010:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b012:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b014:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b016:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b018:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b01c:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b01e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b020:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b022:	d02a      	beq.n	800b07a <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b024:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b028:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b02a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b02c:	bf04      	itt	eq
 800b02e:	f44f 6200 	moveq.w	r2, #2048	@ 0x800
 800b032:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b034:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b036:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b038:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 800b03c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800b040:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b042:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b044:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b046:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b048:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b04a:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b04e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b052:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b054:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b056:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b058:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b05a:	4301      	orrs	r1, r0
 800b05c:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800b05e:	6819      	ldr	r1, [r3, #0]
 800b060:	f041 0101 	orr.w	r1, r1, #1
 800b064:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b066:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800b068:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b06a:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b06c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b070:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b072:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 800b076:	4610      	mov	r0, r2
}
 800b078:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b07a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b07e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b080:	e7d8      	b.n	800b034 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800b082:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800b086:	f7fb fe99 	bl	8006dbc <HAL_I2C_MspInit>
 800b08a:	e7b7      	b.n	800affc <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800b08c:	2001      	movs	r0, #1
}
 800b08e:	4770      	bx	lr

0800b090 <HAL_I2C_Master_Transmit>:
{
 800b090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b094:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b096:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800b09a:	9d08      	ldr	r5, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b09c:	2b20      	cmp	r3, #32
 800b09e:	d171      	bne.n	800b184 <HAL_I2C_Master_Transmit+0xf4>
    __HAL_LOCK(hi2c);
 800b0a0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	d06c      	beq.n	800b184 <HAL_I2C_Master_Transmit+0xf4>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800b0b0:	460f      	mov	r7, r1
 800b0b2:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800b0b4:	f7fe fc72 	bl	800999c <HAL_GetTick>
 800b0b8:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0ba:	e004      	b.n	800b0c6 <HAL_I2C_Master_Transmit+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0bc:	f7fe fc6e 	bl	800999c <HAL_GetTick>
 800b0c0:	1b80      	subs	r0, r0, r6
 800b0c2:	2819      	cmp	r0, #25
 800b0c4:	d861      	bhi.n	800b18a <HAL_I2C_Master_Transmit+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	6998      	ldr	r0, [r3, #24]
 800b0ca:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 800b0ce:	d1f5      	bne.n	800b0bc <HAL_I2C_Master_Transmit+0x2c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b0d0:	2221      	movs	r2, #33	@ 0x21
 800b0d2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b0d6:	2210      	movs	r2, #16
 800b0d8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0dc:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 800b0de:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b0e2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr  = pData;
 800b0e4:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b0e8:	b292      	uxth	r2, r2
 800b0ea:	2aff      	cmp	r2, #255	@ 0xff
    hi2c->XferISR   = NULL;
 800b0ec:	6360      	str	r0, [r4, #52]	@ 0x34
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b0ee:	f3c7 0709 	ubfx	r7, r7, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b0f2:	d86e      	bhi.n	800b1d2 <HAL_I2C_Master_Transmit+0x142>
      hi2c->XferSize = hi2c->XferCount;
 800b0f4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b0f6:	4848      	ldr	r0, [pc, #288]	@ (800b218 <HAL_I2C_Master_Transmit+0x188>)
 800b0f8:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 800b0fa:	b292      	uxth	r2, r2
 800b0fc:	8522      	strh	r2, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b0fe:	b2d2      	uxtb	r2, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b100:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800b104:	4001      	ands	r1, r0
 800b106:	430a      	orrs	r2, r1
 800b108:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800b10c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b110:	605a      	str	r2, [r3, #4]
    while (hi2c->XferCount > 0U)
 800b112:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b114:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b116:	4632      	mov	r2, r6
 800b118:	4629      	mov	r1, r5
 800b11a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b11c:	b30b      	cbz	r3, 800b162 <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b11e:	f7ff fecf 	bl	800aec0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b122:	2800      	cmp	r0, #0
 800b124:	d13d      	bne.n	800b1a2 <HAL_I2C_Master_Transmit+0x112>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b126:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b128:	6822      	ldr	r2, [r4, #0]
 800b12a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b12e:	6293      	str	r3, [r2, #40]	@ 0x28
      hi2c->XferCount--;
 800b130:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b134:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800b136:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800b138:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b13c:	fa1f fc8c 	uxth.w	ip, ip
 800b140:	f8a4 c02a 	strh.w	ip, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b144:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b146:	3b01      	subs	r3, #1
 800b148:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b14a:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 800b14c:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b14e:	2900      	cmp	r1, #0
 800b150:	d0df      	beq.n	800b112 <HAL_I2C_Master_Transmit+0x82>
 800b152:	b35b      	cbz	r3, 800b1ac <HAL_I2C_Master_Transmit+0x11c>
    while (hi2c->XferCount > 0U)
 800b154:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b156:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b158:	4632      	mov	r2, r6
 800b15a:	4629      	mov	r1, r5
 800b15c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1dd      	bne.n	800b11e <HAL_I2C_Master_Transmit+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b162:	f7ff fed5 	bl	800af10 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b166:	b9e0      	cbnz	r0, 800b1a2 <HAL_I2C_Master_Transmit+0x112>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b168:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800b16a:	4d2c      	ldr	r5, [pc, #176]	@ (800b21c <HAL_I2C_Master_Transmit+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b16c:	2120      	movs	r1, #32
 800b16e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b170:	685a      	ldr	r2, [r3, #4]
 800b172:	402a      	ands	r2, r5
 800b174:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b176:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800b17a:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b17e:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800b182:	e000      	b.n	800b186 <HAL_I2C_Master_Transmit+0xf6>
    __HAL_LOCK(hi2c);
 800b184:	2002      	movs	r0, #2
}
 800b186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b18a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b18c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b18e:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800b192:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b194:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b196:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800b19a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b19e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800b1a2:	2001      	movs	r0, #1
}
 800b1a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800b1a8:	1c69      	adds	r1, r5, #1
 800b1aa:	d11e      	bne.n	800b1ea <HAL_I2C_Master_Transmit+0x15a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1ac:	6993      	ldr	r3, [r2, #24]
 800b1ae:	061b      	lsls	r3, r3, #24
 800b1b0:	d5fa      	bpl.n	800b1a8 <HAL_I2C_Master_Transmit+0x118>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b1b2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	2bff      	cmp	r3, #255	@ 0xff
 800b1b8:	d920      	bls.n	800b1fc <HAL_I2C_Master_Transmit+0x16c>
  MODIFY_REG(hi2c->Instance->CR2, \
 800b1ba:	6853      	ldr	r3, [r2, #4]
 800b1bc:	4918      	ldr	r1, [pc, #96]	@ (800b220 <HAL_I2C_Master_Transmit+0x190>)
 800b1be:	400b      	ands	r3, r1
 800b1c0:	433b      	orrs	r3, r7
 800b1c2:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800b1c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b1ca:	21ff      	movs	r1, #255	@ 0xff
 800b1cc:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800b1ce:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b1d0:	e79f      	b.n	800b112 <HAL_I2C_Master_Transmit+0x82>
  MODIFY_REG(hi2c->Instance->CR2, \
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	4910      	ldr	r1, [pc, #64]	@ (800b218 <HAL_I2C_Master_Transmit+0x188>)
 800b1d6:	400a      	ands	r2, r1
 800b1d8:	433a      	orrs	r2, r7
 800b1da:	f042 72ff 	orr.w	r2, r2, #33423360	@ 0x1fe0000
 800b1de:	f442 3290 	orr.w	r2, r2, #73728	@ 0x12000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b1e2:	21ff      	movs	r1, #255	@ 0xff
 800b1e4:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800b1e6:	605a      	str	r2, [r3, #4]
}
 800b1e8:	e793      	b.n	800b112 <HAL_I2C_Master_Transmit+0x82>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ea:	f7fe fbd7 	bl	800999c <HAL_GetTick>
 800b1ee:	1b80      	subs	r0, r0, r6
 800b1f0:	4285      	cmp	r5, r0
 800b1f2:	d3ca      	bcc.n	800b18a <HAL_I2C_Master_Transmit+0xfa>
 800b1f4:	2d00      	cmp	r5, #0
 800b1f6:	d0c8      	beq.n	800b18a <HAL_I2C_Master_Transmit+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1f8:	6822      	ldr	r2, [r4, #0]
 800b1fa:	e7d7      	b.n	800b1ac <HAL_I2C_Master_Transmit+0x11c>
          hi2c->XferSize = hi2c->XferCount;
 800b1fc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800b1fe:	4808      	ldr	r0, [pc, #32]	@ (800b220 <HAL_I2C_Master_Transmit+0x190>)
          hi2c->XferSize = hi2c->XferCount;
 800b200:	b29b      	uxth	r3, r3
 800b202:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b204:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800b206:	6853      	ldr	r3, [r2, #4]
 800b208:	4003      	ands	r3, r0
 800b20a:	433b      	orrs	r3, r7
 800b20c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b210:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b214:	6053      	str	r3, [r2, #4]
}
 800b216:	e77c      	b.n	800b112 <HAL_I2C_Master_Transmit+0x82>
 800b218:	fc009800 	.word	0xfc009800
 800b21c:	fe00e800 	.word	0xfe00e800
 800b220:	fc009c00 	.word	0xfc009c00

0800b224 <HAL_I2C_Master_Receive>:
{
 800b224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b228:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b22a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800b22e:	9d08      	ldr	r5, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b230:	2b20      	cmp	r3, #32
 800b232:	f040 808d 	bne.w	800b350 <HAL_I2C_Master_Receive+0x12c>
    __HAL_LOCK(hi2c);
 800b236:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	4604      	mov	r4, r0
 800b23e:	f000 8087 	beq.w	800b350 <HAL_I2C_Master_Receive+0x12c>
 800b242:	2301      	movs	r3, #1
 800b244:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800b248:	460f      	mov	r7, r1
 800b24a:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800b24c:	f7fe fba6 	bl	800999c <HAL_GetTick>
 800b250:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b252:	e005      	b.n	800b260 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b254:	f7fe fba2 	bl	800999c <HAL_GetTick>
 800b258:	1b80      	subs	r0, r0, r6
 800b25a:	2819      	cmp	r0, #25
 800b25c:	f200 8082 	bhi.w	800b364 <HAL_I2C_Master_Receive+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	6998      	ldr	r0, [r3, #24]
 800b264:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 800b268:	d1f4      	bne.n	800b254 <HAL_I2C_Master_Receive+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b26a:	2222      	movs	r2, #34	@ 0x22
 800b26c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b270:	2210      	movs	r2, #16
 800b272:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b276:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 800b278:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b27c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr  = pData;
 800b27e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b282:	b292      	uxth	r2, r2
 800b284:	2aff      	cmp	r2, #255	@ 0xff
    hi2c->XferISR   = NULL;
 800b286:	6360      	str	r0, [r4, #52]	@ 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b288:	f3c7 0709 	ubfx	r7, r7, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b28c:	d879      	bhi.n	800b382 <HAL_I2C_Master_Receive+0x15e>
      hi2c->XferSize = hi2c->XferCount;
 800b28e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800b290:	4849      	ldr	r0, [pc, #292]	@ (800b3b8 <HAL_I2C_Master_Receive+0x194>)
 800b292:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 800b294:	b292      	uxth	r2, r2
 800b296:	8522      	strh	r2, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b298:	b2d2      	uxtb	r2, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b29a:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800b29e:	4001      	ands	r1, r0
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800b2a6:	f442 5210 	orr.w	r2, r2, #9216	@ 0x2400
 800b2aa:	605a      	str	r2, [r3, #4]
    while (hi2c->XferCount > 0U)
 800b2ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b2ae:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2b0:	4632      	mov	r2, r6
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d039      	beq.n	800b32e <HAL_I2C_Master_Receive+0x10a>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2ba:	f7ff fe4f 	bl	800af5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d15c      	bne.n	800b37c <HAL_I2C_Master_Receive+0x158>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b2c2:	6822      	ldr	r2, [r4, #0]
 800b2c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b2c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b2c8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800b2ca:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b2ce:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800b2d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800b2d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b2d6:	fa1f fc8c 	uxth.w	ip, ip
 800b2da:	f8a4 c02a 	strh.w	ip, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b2de:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b2e0:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800b2e2:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800b2e4:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b2e6:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800b2e8:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800b2ea:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b2ec:	2a00      	cmp	r2, #0
 800b2ee:	d0dd      	beq.n	800b2ac <HAL_I2C_Master_Receive+0x88>
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1db      	bne.n	800b2ac <HAL_I2C_Master_Receive+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b2f4:	6822      	ldr	r2, [r4, #0]
 800b2f6:	e001      	b.n	800b2fc <HAL_I2C_Master_Receive+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 800b2f8:	1c69      	adds	r1, r5, #1
 800b2fa:	d12c      	bne.n	800b356 <HAL_I2C_Master_Receive+0x132>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b2fc:	6993      	ldr	r3, [r2, #24]
 800b2fe:	061b      	lsls	r3, r3, #24
 800b300:	d5fa      	bpl.n	800b2f8 <HAL_I2C_Master_Receive+0xd4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b302:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b304:	b29b      	uxth	r3, r3
 800b306:	2bff      	cmp	r3, #255	@ 0xff
 800b308:	d947      	bls.n	800b39a <HAL_I2C_Master_Receive+0x176>
  MODIFY_REG(hi2c->Instance->CR2, \
 800b30a:	6853      	ldr	r3, [r2, #4]
 800b30c:	492b      	ldr	r1, [pc, #172]	@ (800b3bc <HAL_I2C_Master_Receive+0x198>)
 800b30e:	400b      	ands	r3, r1
 800b310:	433b      	orrs	r3, r7
 800b312:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800b316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b31a:	21ff      	movs	r1, #255	@ 0xff
 800b31c:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800b31e:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 800b320:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b322:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b324:	4632      	mov	r2, r6
 800b326:	4629      	mov	r1, r5
 800b328:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1c5      	bne.n	800b2ba <HAL_I2C_Master_Receive+0x96>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b32e:	f7ff fdef 	bl	800af10 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b332:	bb18      	cbnz	r0, 800b37c <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b334:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800b336:	4d22      	ldr	r5, [pc, #136]	@ (800b3c0 <HAL_I2C_Master_Receive+0x19c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b338:	2120      	movs	r1, #32
 800b33a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b33c:	685a      	ldr	r2, [r3, #4]
 800b33e:	402a      	ands	r2, r5
 800b340:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b342:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800b346:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b34a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800b34e:	e000      	b.n	800b352 <HAL_I2C_Master_Receive+0x12e>
    __HAL_LOCK(hi2c);
 800b350:	2002      	movs	r0, #2
}
 800b352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b356:	f7fe fb21 	bl	800999c <HAL_GetTick>
 800b35a:	1b80      	subs	r0, r0, r6
 800b35c:	4285      	cmp	r5, r0
 800b35e:	d301      	bcc.n	800b364 <HAL_I2C_Master_Receive+0x140>
 800b360:	2d00      	cmp	r5, #0
 800b362:	d1c7      	bne.n	800b2f4 <HAL_I2C_Master_Receive+0xd0>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b364:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b366:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b368:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800b36c:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b36e:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b370:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800b374:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b378:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800b37c:	2001      	movs	r0, #1
}
 800b37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	490c      	ldr	r1, [pc, #48]	@ (800b3b8 <HAL_I2C_Master_Receive+0x194>)
 800b386:	400a      	ands	r2, r1
 800b388:	433a      	orrs	r2, r7
 800b38a:	f042 72ff 	orr.w	r2, r2, #33423360	@ 0x1fe0000
 800b38e:	f442 3292 	orr.w	r2, r2, #74752	@ 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b392:	21ff      	movs	r1, #255	@ 0xff
 800b394:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800b396:	605a      	str	r2, [r3, #4]
}
 800b398:	e788      	b.n	800b2ac <HAL_I2C_Master_Receive+0x88>
          hi2c->XferSize = hi2c->XferCount;
 800b39a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800b39c:	4807      	ldr	r0, [pc, #28]	@ (800b3bc <HAL_I2C_Master_Receive+0x198>)
 800b39e:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b3a4:	b2db      	uxtb	r3, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b3a6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800b3aa:	4001      	ands	r1, r0
 800b3ac:	430b      	orrs	r3, r1
 800b3ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b3b2:	6053      	str	r3, [r2, #4]
}
 800b3b4:	e77a      	b.n	800b2ac <HAL_I2C_Master_Receive+0x88>
 800b3b6:	bf00      	nop
 800b3b8:	fc009800 	.word	0xfc009800
 800b3bc:	fc009c00 	.word	0xfc009c00
 800b3c0:	fe00e800 	.word	0xfe00e800

0800b3c4 <HAL_I2C_Mem_Write>:
{
 800b3c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3ca:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800b3ce:	f8bd b02c 	ldrh.w	fp, [sp, #44]	@ 0x2c
 800b3d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3d4:	2b20      	cmp	r3, #32
 800b3d6:	f040 80a5 	bne.w	800b524 <HAL_I2C_Mem_Write+0x160>
    if ((pData == NULL) || (Size == 0U))
 800b3da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3dc:	4604      	mov	r4, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	f000 809a 	beq.w	800b518 <HAL_I2C_Mem_Write+0x154>
 800b3e4:	f1bb 0f00 	cmp.w	fp, #0
 800b3e8:	f000 8096 	beq.w	800b518 <HAL_I2C_Mem_Write+0x154>
    __HAL_LOCK(hi2c);
 800b3ec:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	f000 8097 	beq.w	800b524 <HAL_I2C_Mem_Write+0x160>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800b3fc:	4688      	mov	r8, r1
 800b3fe:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800b400:	f7fe facc 	bl	800999c <HAL_GetTick>
 800b404:	4607      	mov	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b406:	e005      	b.n	800b414 <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b408:	f7fe fac8 	bl	800999c <HAL_GetTick>
 800b40c:	1bc0      	subs	r0, r0, r7
 800b40e:	2819      	cmp	r0, #25
 800b410:	f200 808b 	bhi.w	800b52a <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	699d      	ldr	r5, [r3, #24]
 800b418:	f415 4500 	ands.w	r5, r5, #32768	@ 0x8000
 800b41c:	d1f4      	bne.n	800b408 <HAL_I2C_Mem_Write+0x44>
    hi2c->pBuffPtr  = pData;
 800b41e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b420:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b422:	2221      	movs	r2, #33	@ 0x21
 800b424:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b428:	2240      	movs	r2, #64	@ 0x40
 800b42a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b42e:	6465      	str	r5, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 800b430:	f8a4 b02a 	strh.w	fp, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	4973      	ldr	r1, [pc, #460]	@ (800b604 <HAL_I2C_Mem_Write+0x240>)
    hi2c->XferISR   = NULL;
 800b438:	6365      	str	r5, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 800b43a:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b43c:	fa5f f18a 	uxtb.w	r1, sl
  MODIFY_REG(hi2c->Instance->CR2, \
 800b440:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b444:	f3c8 0809 	ubfx	r8, r8, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800b448:	ea42 0208 	orr.w	r2, r2, r8
 800b44c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800b450:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b454:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b456:	4631      	mov	r1, r6
 800b458:	463a      	mov	r2, r7
 800b45a:	4620      	mov	r0, r4
 800b45c:	f7ff fd30 	bl	800aec0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b460:	2800      	cmp	r0, #0
 800b462:	f040 80a6 	bne.w	800b5b2 <HAL_I2C_Mem_Write+0x1ee>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b466:	f1ba 0f01 	cmp.w	sl, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b46a:	6822      	ldr	r2, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b46c:	d16a      	bne.n	800b544 <HAL_I2C_Mem_Write+0x180>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b46e:	fa5f f389 	uxtb.w	r3, r9
 800b472:	6293      	str	r3, [r2, #40]	@ 0x28
 800b474:	e002      	b.n	800b47c <HAL_I2C_Mem_Write+0xb8>
    if (Timeout != HAL_MAX_DELAY)
 800b476:	1c75      	adds	r5, r6, #1
 800b478:	f040 808a 	bne.w	800b590 <HAL_I2C_Mem_Write+0x1cc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b47c:	6993      	ldr	r3, [r2, #24]
 800b47e:	0618      	lsls	r0, r3, #24
 800b480:	d5f9      	bpl.n	800b476 <HAL_I2C_Mem_Write+0xb2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b482:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b484:	b29b      	uxth	r3, r3
 800b486:	2bff      	cmp	r3, #255	@ 0xff
 800b488:	f240 8097 	bls.w	800b5ba <HAL_I2C_Mem_Write+0x1f6>
  MODIFY_REG(hi2c->Instance->CR2, \
 800b48c:	6853      	ldr	r3, [r2, #4]
 800b48e:	495e      	ldr	r1, [pc, #376]	@ (800b608 <HAL_I2C_Mem_Write+0x244>)
 800b490:	400b      	ands	r3, r1
 800b492:	ea43 0308 	orr.w	r3, r3, r8
 800b496:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800b49a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b49e:	21ff      	movs	r1, #255	@ 0xff
 800b4a0:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800b4a2:	6053      	str	r3, [r2, #4]
}
 800b4a4:	e004      	b.n	800b4b0 <HAL_I2C_Mem_Write+0xec>
    } while (hi2c->XferCount > 0U);
 800b4a6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f000 8094 	beq.w	800b5d8 <HAL_I2C_Mem_Write+0x214>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4b0:	463a      	mov	r2, r7
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f7ff fd03 	bl	800aec0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d12f      	bne.n	800b51e <HAL_I2C_Mem_Write+0x15a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b4be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b4c0:	6822      	ldr	r2, [r4, #0]
 800b4c2:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b4c6:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800b4c8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800b4ca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b4d2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b4d4:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b4da:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 800b4dc:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b4de:	2900      	cmp	r1, #0
 800b4e0:	d0e1      	beq.n	800b4a6 <HAL_I2C_Mem_Write+0xe2>
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1df      	bne.n	800b4a6 <HAL_I2C_Mem_Write+0xe2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b4e6:	6993      	ldr	r3, [r2, #24]
 800b4e8:	061b      	lsls	r3, r3, #24
 800b4ea:	d404      	bmi.n	800b4f6 <HAL_I2C_Mem_Write+0x132>
    if (Timeout != HAL_MAX_DELAY)
 800b4ec:	1c71      	adds	r1, r6, #1
 800b4ee:	d137      	bne.n	800b560 <HAL_I2C_Mem_Write+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b4f0:	6993      	ldr	r3, [r2, #24]
 800b4f2:	061b      	lsls	r3, r3, #24
 800b4f4:	d5fa      	bpl.n	800b4ec <HAL_I2C_Mem_Write+0x128>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b4f6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	2bff      	cmp	r3, #255	@ 0xff
 800b4fc:	d939      	bls.n	800b572 <HAL_I2C_Mem_Write+0x1ae>
  MODIFY_REG(hi2c->Instance->CR2, \
 800b4fe:	6853      	ldr	r3, [r2, #4]
 800b500:	4941      	ldr	r1, [pc, #260]	@ (800b608 <HAL_I2C_Mem_Write+0x244>)
 800b502:	400b      	ands	r3, r1
 800b504:	ea43 0308 	orr.w	r3, r3, r8
 800b508:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800b50c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b510:	21ff      	movs	r1, #255	@ 0xff
 800b512:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800b514:	6053      	str	r3, [r2, #4]
}
 800b516:	e7c6      	b.n	800b4a6 <HAL_I2C_Mem_Write+0xe2>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b518:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b51c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800b51e:	2001      	movs	r0, #1
}
 800b520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800b524:	2002      	movs	r0, #2
}
 800b526:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b52a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b52c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b52e:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800b532:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b534:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b536:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800b53a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b53e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 800b542:	e7ec      	b.n	800b51e <HAL_I2C_Mem_Write+0x15a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b544:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800b548:	6293      	str	r3, [r2, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b54a:	4631      	mov	r1, r6
 800b54c:	463a      	mov	r2, r7
 800b54e:	4620      	mov	r0, r4
 800b550:	f7ff fcb6 	bl	800aec0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b554:	bb68      	cbnz	r0, 800b5b2 <HAL_I2C_Mem_Write+0x1ee>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b556:	6822      	ldr	r2, [r4, #0]
 800b558:	fa5f f389 	uxtb.w	r3, r9
 800b55c:	6293      	str	r3, [r2, #40]	@ 0x28
 800b55e:	e78d      	b.n	800b47c <HAL_I2C_Mem_Write+0xb8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b560:	f7fe fa1c 	bl	800999c <HAL_GetTick>
 800b564:	1bc0      	subs	r0, r0, r7
 800b566:	4286      	cmp	r6, r0
 800b568:	d3df      	bcc.n	800b52a <HAL_I2C_Mem_Write+0x166>
 800b56a:	2e00      	cmp	r6, #0
 800b56c:	d0dd      	beq.n	800b52a <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b56e:	6822      	ldr	r2, [r4, #0]
 800b570:	e7be      	b.n	800b4f0 <HAL_I2C_Mem_Write+0x12c>
          hi2c->XferSize = hi2c->XferCount;
 800b572:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800b574:	4824      	ldr	r0, [pc, #144]	@ (800b608 <HAL_I2C_Mem_Write+0x244>)
          hi2c->XferSize = hi2c->XferCount;
 800b576:	b29b      	uxth	r3, r3
 800b578:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b57a:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800b57c:	6853      	ldr	r3, [r2, #4]
 800b57e:	4003      	ands	r3, r0
 800b580:	ea43 0308 	orr.w	r3, r3, r8
 800b584:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b588:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b58c:	6053      	str	r3, [r2, #4]
}
 800b58e:	e78a      	b.n	800b4a6 <HAL_I2C_Mem_Write+0xe2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b590:	f7fe fa04 	bl	800999c <HAL_GetTick>
 800b594:	1bc0      	subs	r0, r0, r7
 800b596:	4286      	cmp	r6, r0
 800b598:	d302      	bcc.n	800b5a0 <HAL_I2C_Mem_Write+0x1dc>
 800b59a:	b10e      	cbz	r6, 800b5a0 <HAL_I2C_Mem_Write+0x1dc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b59c:	6822      	ldr	r2, [r4, #0]
 800b59e:	e76d      	b.n	800b47c <HAL_I2C_Mem_Write+0xb8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5a0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b5a2:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5a4:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5a6:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5a8:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b5aa:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ae:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800b5b8:	e7b1      	b.n	800b51e <HAL_I2C_Mem_Write+0x15a>
      hi2c->XferSize = hi2c->XferCount;
 800b5ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800b5bc:	4812      	ldr	r0, [pc, #72]	@ (800b608 <HAL_I2C_Mem_Write+0x244>)
      hi2c->XferSize = hi2c->XferCount;
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b5c2:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800b5c4:	6853      	ldr	r3, [r2, #4]
 800b5c6:	4003      	ands	r3, r0
 800b5c8:	ea43 0308 	orr.w	r3, r3, r8
 800b5cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b5d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b5d4:	6053      	str	r3, [r2, #4]
}
 800b5d6:	e76b      	b.n	800b4b0 <HAL_I2C_Mem_Write+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5d8:	463a      	mov	r2, r7
 800b5da:	4631      	mov	r1, r6
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f7ff fc97 	bl	800af10 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d19b      	bne.n	800b51e <HAL_I2C_Mem_Write+0x15a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b5e6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800b5e8:	4d08      	ldr	r5, [pc, #32]	@ (800b60c <HAL_I2C_Mem_Write+0x248>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b5ea:	2120      	movs	r1, #32
 800b5ec:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b5ee:	685a      	ldr	r2, [r3, #4]
 800b5f0:	402a      	ands	r2, r5
 800b5f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b5f4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800b5f8:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b5fc:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800b600:	e78e      	b.n	800b520 <HAL_I2C_Mem_Write+0x15c>
 800b602:	bf00      	nop
 800b604:	fc009800 	.word	0xfc009800
 800b608:	fc009c00 	.word	0xfc009c00
 800b60c:	fe00e800 	.word	0xfe00e800

0800b610 <HAL_I2C_Mem_Read>:
{
 800b610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b614:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b616:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800b61a:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 800b61e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b620:	2b20      	cmp	r3, #32
 800b622:	f040 8081 	bne.w	800b728 <HAL_I2C_Mem_Read+0x118>
    if ((pData == NULL) || (Size == 0U))
 800b626:	9b08      	ldr	r3, [sp, #32]
 800b628:	4605      	mov	r5, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d076      	beq.n	800b71c <HAL_I2C_Mem_Read+0x10c>
 800b62e:	f1ba 0f00 	cmp.w	sl, #0
 800b632:	d073      	beq.n	800b71c <HAL_I2C_Mem_Read+0x10c>
    __HAL_LOCK(hi2c);
 800b634:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d075      	beq.n	800b728 <HAL_I2C_Mem_Read+0x118>
 800b63c:	2301      	movs	r3, #1
 800b63e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800b642:	460f      	mov	r7, r1
 800b644:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800b646:	f7fe f9a9 	bl	800999c <HAL_GetTick>
 800b64a:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b64c:	e004      	b.n	800b658 <HAL_I2C_Mem_Read+0x48>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b64e:	f7fe f9a5 	bl	800999c <HAL_GetTick>
 800b652:	1b80      	subs	r0, r0, r6
 800b654:	2819      	cmp	r0, #25
 800b656:	d871      	bhi.n	800b73c <HAL_I2C_Mem_Read+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b658:	682b      	ldr	r3, [r5, #0]
 800b65a:	6998      	ldr	r0, [r3, #24]
 800b65c:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 800b660:	d1f5      	bne.n	800b64e <HAL_I2C_Mem_Read+0x3e>
    hi2c->pBuffPtr  = pData;
 800b662:	9a08      	ldr	r2, [sp, #32]
 800b664:	626a      	str	r2, [r5, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b666:	2222      	movs	r2, #34	@ 0x22
 800b668:	f885 2041 	strb.w	r2, [r5, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b66c:	2240      	movs	r2, #64	@ 0x40
 800b66e:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b672:	6468      	str	r0, [r5, #68]	@ 0x44
    hi2c->XferCount = Size;
 800b674:	f8a5 a02a 	strh.w	sl, [r5, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800b678:	685a      	ldr	r2, [r3, #4]
 800b67a:	4971      	ldr	r1, [pc, #452]	@ (800b840 <HAL_I2C_Mem_Read+0x230>)
    hi2c->XferISR   = NULL;
 800b67c:	6368      	str	r0, [r5, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 800b67e:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b680:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 800b684:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b688:	f3c7 0709 	ubfx	r7, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800b68c:	433a      	orrs	r2, r7
 800b68e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b692:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b694:	4621      	mov	r1, r4
 800b696:	4632      	mov	r2, r6
 800b698:	4628      	mov	r0, r5
 800b69a:	f7ff fc11 	bl	800aec0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	f040 80a4 	bne.w	800b7ec <HAL_I2C_Mem_Read+0x1dc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b6a4:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b6a8:	6829      	ldr	r1, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b6aa:	d172      	bne.n	800b792 <HAL_I2C_Mem_Read+0x182>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b6ac:	fa5f f389 	uxtb.w	r3, r9
 800b6b0:	628b      	str	r3, [r1, #40]	@ 0x28
 800b6b2:	e002      	b.n	800b6ba <HAL_I2C_Mem_Read+0xaa>
    if (Timeout != HAL_MAX_DELAY)
 800b6b4:	1c60      	adds	r0, r4, #1
 800b6b6:	f040 8088 	bne.w	800b7ca <HAL_I2C_Mem_Read+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6ba:	698b      	ldr	r3, [r1, #24]
 800b6bc:	065a      	lsls	r2, r3, #25
 800b6be:	d5f9      	bpl.n	800b6b4 <HAL_I2C_Mem_Read+0xa4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6c0:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	2bff      	cmp	r3, #255	@ 0xff
 800b6c6:	f240 8095 	bls.w	800b7f4 <HAL_I2C_Mem_Read+0x1e4>
  MODIFY_REG(hi2c->Instance->CR2, \
 800b6ca:	684b      	ldr	r3, [r1, #4]
 800b6cc:	4a5c      	ldr	r2, [pc, #368]	@ (800b840 <HAL_I2C_Mem_Read+0x230>)
 800b6ce:	4013      	ands	r3, r2
 800b6d0:	433b      	orrs	r3, r7
 800b6d2:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800b6d6:	f443 3392 	orr.w	r3, r3, #74752	@ 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6da:	22ff      	movs	r2, #255	@ 0xff
 800b6dc:	852a      	strh	r2, [r5, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800b6de:	604b      	str	r3, [r1, #4]
}
 800b6e0:	e001      	b.n	800b6e6 <HAL_I2C_Mem_Read+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 800b6e2:	1c63      	adds	r3, r4, #1
 800b6e4:	d123      	bne.n	800b72e <HAL_I2C_Mem_Read+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6e6:	698b      	ldr	r3, [r1, #24]
 800b6e8:	0758      	lsls	r0, r3, #29
 800b6ea:	d5fa      	bpl.n	800b6e2 <HAL_I2C_Mem_Read+0xd2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b6ec:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b6ee:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800b6f0:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800b6f2:	8d6a      	ldrh	r2, [r5, #42]	@ 0x2a
      hi2c->XferSize--;
 800b6f4:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800b6f6:	6a69      	ldr	r1, [r5, #36]	@ 0x24
      hi2c->XferCount--;
 800b6f8:	3a01      	subs	r2, #1
 800b6fa:	b292      	uxth	r2, r2
 800b6fc:	856a      	strh	r2, [r5, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b6fe:	8d6a      	ldrh	r2, [r5, #42]	@ 0x2a
      hi2c->XferSize--;
 800b700:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800b702:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800b704:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b706:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800b708:	6269      	str	r1, [r5, #36]	@ 0x24
      hi2c->XferSize--;
 800b70a:	852b      	strh	r3, [r5, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b70c:	b102      	cbz	r2, 800b710 <HAL_I2C_Mem_Read+0x100>
 800b70e:	b34b      	cbz	r3, 800b764 <HAL_I2C_Mem_Read+0x154>
    } while (hi2c->XferCount > 0U);
 800b710:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800b712:	b29b      	uxth	r3, r3
 800b714:	2b00      	cmp	r3, #0
 800b716:	d07d      	beq.n	800b814 <HAL_I2C_Mem_Read+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b718:	6829      	ldr	r1, [r5, #0]
 800b71a:	e7e4      	b.n	800b6e6 <HAL_I2C_Mem_Read+0xd6>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b71c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b720:	646b      	str	r3, [r5, #68]	@ 0x44
      return  HAL_ERROR;
 800b722:	2001      	movs	r0, #1
}
 800b724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800b728:	2002      	movs	r0, #2
}
 800b72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b72e:	f7fe f935 	bl	800999c <HAL_GetTick>
 800b732:	1b80      	subs	r0, r0, r6
 800b734:	4284      	cmp	r4, r0
 800b736:	d301      	bcc.n	800b73c <HAL_I2C_Mem_Read+0x12c>
 800b738:	2c00      	cmp	r4, #0
 800b73a:	d1ed      	bne.n	800b718 <HAL_I2C_Mem_Read+0x108>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b73c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b73e:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b740:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800b744:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b746:	646b      	str	r3, [r5, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b748:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800b74c:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b750:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 800b754:	e7e5      	b.n	800b722 <HAL_I2C_Mem_Read+0x112>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b756:	f7fe f921 	bl	800999c <HAL_GetTick>
 800b75a:	1b83      	subs	r3, r0, r6
 800b75c:	429c      	cmp	r4, r3
 800b75e:	d3ed      	bcc.n	800b73c <HAL_I2C_Mem_Read+0x12c>
 800b760:	2c00      	cmp	r4, #0
 800b762:	d0eb      	beq.n	800b73c <HAL_I2C_Mem_Read+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b764:	682a      	ldr	r2, [r5, #0]
 800b766:	e001      	b.n	800b76c <HAL_I2C_Mem_Read+0x15c>
    if (Timeout != HAL_MAX_DELAY)
 800b768:	1c61      	adds	r1, r4, #1
 800b76a:	d1f4      	bne.n	800b756 <HAL_I2C_Mem_Read+0x146>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b76c:	6993      	ldr	r3, [r2, #24]
 800b76e:	061b      	lsls	r3, r3, #24
 800b770:	d5fa      	bpl.n	800b768 <HAL_I2C_Mem_Read+0x158>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b772:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800b774:	b29b      	uxth	r3, r3
 800b776:	2bff      	cmp	r3, #255	@ 0xff
 800b778:	d919      	bls.n	800b7ae <HAL_I2C_Mem_Read+0x19e>
  MODIFY_REG(hi2c->Instance->CR2, \
 800b77a:	6853      	ldr	r3, [r2, #4]
 800b77c:	4931      	ldr	r1, [pc, #196]	@ (800b844 <HAL_I2C_Mem_Read+0x234>)
 800b77e:	400b      	ands	r3, r1
 800b780:	433b      	orrs	r3, r7
 800b782:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800b786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b78a:	21ff      	movs	r1, #255	@ 0xff
 800b78c:	8529      	strh	r1, [r5, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800b78e:	6053      	str	r3, [r2, #4]
}
 800b790:	e7be      	b.n	800b710 <HAL_I2C_Mem_Read+0x100>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b792:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800b796:	628b      	str	r3, [r1, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b798:	4632      	mov	r2, r6
 800b79a:	4621      	mov	r1, r4
 800b79c:	4628      	mov	r0, r5
 800b79e:	f7ff fb8f 	bl	800aec0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b7a2:	bb18      	cbnz	r0, 800b7ec <HAL_I2C_Mem_Read+0x1dc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b7a4:	6829      	ldr	r1, [r5, #0]
 800b7a6:	fa5f f389 	uxtb.w	r3, r9
 800b7aa:	628b      	str	r3, [r1, #40]	@ 0x28
 800b7ac:	e785      	b.n	800b6ba <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 800b7ae:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800b7b0:	4824      	ldr	r0, [pc, #144]	@ (800b844 <HAL_I2C_Mem_Read+0x234>)
 800b7b2:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	852b      	strh	r3, [r5, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b7b8:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800b7ba:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800b7be:	4001      	ands	r1, r0
 800b7c0:	430b      	orrs	r3, r1
 800b7c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b7c6:	6053      	str	r3, [r2, #4]
}
 800b7c8:	e7a2      	b.n	800b710 <HAL_I2C_Mem_Read+0x100>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7ca:	f7fe f8e7 	bl	800999c <HAL_GetTick>
 800b7ce:	1b83      	subs	r3, r0, r6
 800b7d0:	429c      	cmp	r4, r3
 800b7d2:	d302      	bcc.n	800b7da <HAL_I2C_Mem_Read+0x1ca>
 800b7d4:	b10c      	cbz	r4, 800b7da <HAL_I2C_Mem_Read+0x1ca>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b7d6:	6829      	ldr	r1, [r5, #0]
 800b7d8:	e76f      	b.n	800b6ba <HAL_I2C_Mem_Read+0xaa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7da:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b7dc:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7de:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7e0:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7e2:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b7e4:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7e8:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 800b7f2:	e796      	b.n	800b722 <HAL_I2C_Mem_Read+0x112>
      hi2c->XferSize = hi2c->XferCount;
 800b7f4:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800b7f6:	4812      	ldr	r0, [pc, #72]	@ (800b840 <HAL_I2C_Mem_Read+0x230>)
      hi2c->XferSize = hi2c->XferCount;
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	852b      	strh	r3, [r5, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b7fc:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800b7fe:	684b      	ldr	r3, [r1, #4]
 800b800:	4003      	ands	r3, r0
 800b802:	433b      	orrs	r3, r7
 800b804:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b808:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b80c:	f443 5310 	orr.w	r3, r3, #9216	@ 0x2400
 800b810:	604b      	str	r3, [r1, #4]
}
 800b812:	e768      	b.n	800b6e6 <HAL_I2C_Mem_Read+0xd6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b814:	4632      	mov	r2, r6
 800b816:	4621      	mov	r1, r4
 800b818:	4628      	mov	r0, r5
 800b81a:	f7ff fb79 	bl	800af10 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b81e:	2800      	cmp	r0, #0
 800b820:	f47f af7f 	bne.w	800b722 <HAL_I2C_Mem_Read+0x112>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b824:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 800b826:	4c08      	ldr	r4, [pc, #32]	@ (800b848 <HAL_I2C_Mem_Read+0x238>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b828:	2120      	movs	r1, #32
 800b82a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	4022      	ands	r2, r4
 800b830:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b832:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800b836:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b83a:	f885 0042 	strb.w	r0, [r5, #66]	@ 0x42
    return HAL_OK;
 800b83e:	e771      	b.n	800b724 <HAL_I2C_Mem_Read+0x114>
 800b840:	fc009800 	.word	0xfc009800
 800b844:	fc009c00 	.word	0xfc009c00
 800b848:	fe00e800 	.word	0xfe00e800

0800b84c <HAL_I2C_IsDeviceReady>:
{
 800b84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b850:	b082      	sub	sp, #8
 800b852:	4604      	mov	r4, r0
  __IO uint32_t I2C_Trials = 0UL;
 800b854:	2000      	movs	r0, #0
 800b856:	9001      	str	r0, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b858:	f894 0041 	ldrb.w	r0, [r4, #65]	@ 0x41
 800b85c:	2820      	cmp	r0, #32
 800b85e:	d159      	bne.n	800b914 <HAL_I2C_IsDeviceReady+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b860:	4617      	mov	r7, r2
 800b862:	6822      	ldr	r2, [r4, #0]
 800b864:	461e      	mov	r6, r3
 800b866:	6993      	ldr	r3, [r2, #24]
 800b868:	f413 4300 	ands.w	r3, r3, #32768	@ 0x8000
 800b86c:	d152      	bne.n	800b914 <HAL_I2C_IsDeviceReady+0xc8>
    __HAL_LOCK(hi2c);
 800b86e:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 800b872:	2801      	cmp	r0, #1
 800b874:	d04e      	beq.n	800b914 <HAL_I2C_IsDeviceReady+0xc8>
 800b876:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800b87a:	2101      	movs	r1, #1
 800b87c:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b880:	2124      	movs	r1, #36	@ 0x24
 800b882:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800b886:	f44a 5920 	orr.w	r9, sl, #10240	@ 0x2800
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b88a:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b88c:	f04f 0810 	mov.w	r8, #16
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800b890:	68e3      	ldr	r3, [r4, #12]
 800b892:	2b01      	cmp	r3, #1
 800b894:	bf06      	itte	eq
 800b896:	f04a 7300 	orreq.w	r3, sl, #33554432	@ 0x2000000
 800b89a:	f443 5300 	orreq.w	r3, r3, #8192	@ 0x2000
 800b89e:	464b      	movne	r3, r9
 800b8a0:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800b8a2:	f7fe f87b 	bl	800999c <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8a6:	6821      	ldr	r1, [r4, #0]
      tickstart = HAL_GetTick();
 800b8a8:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8aa:	698b      	ldr	r3, [r1, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b8ac:	6988      	ldr	r0, [r1, #24]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8ae:	f003 0320 	and.w	r3, r3, #32
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b8b2:	f000 0010 	and.w	r0, r0, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b8b6:	4303      	orrs	r3, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8b8:	460a      	mov	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b8ba:	d113      	bne.n	800b8e4 <HAL_I2C_IsDeviceReady+0x98>
        if (Timeout != HAL_MAX_DELAY)
 800b8bc:	1c72      	adds	r2, r6, #1
 800b8be:	d007      	beq.n	800b8d0 <HAL_I2C_IsDeviceReady+0x84>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b8c0:	f7fe f86c 	bl	800999c <HAL_GetTick>
 800b8c4:	1b40      	subs	r0, r0, r5
 800b8c6:	42b0      	cmp	r0, r6
 800b8c8:	d83e      	bhi.n	800b948 <HAL_I2C_IsDeviceReady+0xfc>
 800b8ca:	2e00      	cmp	r6, #0
 800b8cc:	d03c      	beq.n	800b948 <HAL_I2C_IsDeviceReady+0xfc>
 800b8ce:	6821      	ldr	r1, [r4, #0]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8d0:	698a      	ldr	r2, [r1, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b8d2:	698b      	ldr	r3, [r1, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8d4:	f002 0c20 	and.w	ip, r2, #32
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b8d8:	f003 0310 	and.w	r3, r3, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b8dc:	ea5c 0c03 	orrs.w	ip, ip, r3
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8e0:	460a      	mov	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b8e2:	d0eb      	beq.n	800b8bc <HAL_I2C_IsDeviceReady+0x70>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800b8e4:	698b      	ldr	r3, [r1, #24]
 800b8e6:	06db      	lsls	r3, r3, #27
 800b8e8:	d402      	bmi.n	800b8f0 <HAL_I2C_IsDeviceReady+0xa4>
 800b8ea:	e019      	b.n	800b920 <HAL_I2C_IsDeviceReady+0xd4>
    if (Timeout != HAL_MAX_DELAY)
 800b8ec:	1c73      	adds	r3, r6, #1
 800b8ee:	d123      	bne.n	800b938 <HAL_I2C_IsDeviceReady+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b8f0:	698b      	ldr	r3, [r1, #24]
 800b8f2:	0698      	lsls	r0, r3, #26
 800b8f4:	d5fa      	bpl.n	800b8ec <HAL_I2C_IsDeviceReady+0xa0>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8f6:	2320      	movs	r3, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8f8:	f8c1 801c 	str.w	r8, [r1, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8fc:	61cb      	str	r3, [r1, #28]
      if (I2C_Trials == Trials)
 800b8fe:	9b01      	ldr	r3, [sp, #4]
 800b900:	42bb      	cmp	r3, r7
 800b902:	d02d      	beq.n	800b960 <HAL_I2C_IsDeviceReady+0x114>
      I2C_Trials++;
 800b904:	9b01      	ldr	r3, [sp, #4]
 800b906:	3301      	adds	r3, #1
 800b908:	9301      	str	r3, [sp, #4]
    } while (I2C_Trials < Trials);
 800b90a:	9b01      	ldr	r3, [sp, #4]
 800b90c:	42bb      	cmp	r3, r7
 800b90e:	d21b      	bcs.n	800b948 <HAL_I2C_IsDeviceReady+0xfc>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800b910:	460a      	mov	r2, r1
 800b912:	e7bd      	b.n	800b890 <HAL_I2C_IsDeviceReady+0x44>
      return HAL_BUSY;
 800b914:	2002      	movs	r0, #2
}
 800b916:	b002      	add	sp, #8
 800b918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (Timeout != HAL_MAX_DELAY)
 800b91c:	1c70      	adds	r0, r6, #1
 800b91e:	d13e      	bne.n	800b99e <HAL_I2C_IsDeviceReady+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b920:	6993      	ldr	r3, [r2, #24]
 800b922:	0699      	lsls	r1, r3, #26
 800b924:	d5fa      	bpl.n	800b91c <HAL_I2C_IsDeviceReady+0xd0>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b926:	2120      	movs	r1, #32
        __HAL_UNLOCK(hi2c);
 800b928:	2300      	movs	r3, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b92a:	61d1      	str	r1, [r2, #28]
        return HAL_OK;
 800b92c:	4618      	mov	r0, r3
        hi2c->State = HAL_I2C_STATE_READY;
 800b92e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 800b932:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_OK;
 800b936:	e7ee      	b.n	800b916 <HAL_I2C_IsDeviceReady+0xca>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b938:	f7fe f830 	bl	800999c <HAL_GetTick>
 800b93c:	1b40      	subs	r0, r0, r5
 800b93e:	4286      	cmp	r6, r0
 800b940:	d323      	bcc.n	800b98a <HAL_I2C_IsDeviceReady+0x13e>
 800b942:	b316      	cbz	r6, 800b98a <HAL_I2C_IsDeviceReady+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b944:	6821      	ldr	r1, [r4, #0]
 800b946:	e7d3      	b.n	800b8f0 <HAL_I2C_IsDeviceReady+0xa4>
    hi2c->State = HAL_I2C_STATE_READY;
 800b948:	2320      	movs	r3, #32
 800b94a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b94e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b950:	f043 0320 	orr.w	r3, r3, #32
 800b954:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b956:	2300      	movs	r3, #0
 800b958:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            return HAL_ERROR;
 800b95c:	2001      	movs	r0, #1
 800b95e:	e7da      	b.n	800b916 <HAL_I2C_IsDeviceReady+0xca>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b960:	684b      	ldr	r3, [r1, #4]
 800b962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b966:	604b      	str	r3, [r1, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b968:	e001      	b.n	800b96e <HAL_I2C_IsDeviceReady+0x122>
    if (Timeout != HAL_MAX_DELAY)
 800b96a:	1c72      	adds	r2, r6, #1
 800b96c:	d105      	bne.n	800b97a <HAL_I2C_IsDeviceReady+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b96e:	698b      	ldr	r3, [r1, #24]
 800b970:	069b      	lsls	r3, r3, #26
 800b972:	d5fa      	bpl.n	800b96a <HAL_I2C_IsDeviceReady+0x11e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b974:	2320      	movs	r3, #32
 800b976:	61cb      	str	r3, [r1, #28]
 800b978:	e7c4      	b.n	800b904 <HAL_I2C_IsDeviceReady+0xb8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b97a:	f7fe f80f 	bl	800999c <HAL_GetTick>
 800b97e:	1b43      	subs	r3, r0, r5
 800b980:	429e      	cmp	r6, r3
 800b982:	d302      	bcc.n	800b98a <HAL_I2C_IsDeviceReady+0x13e>
 800b984:	b10e      	cbz	r6, 800b98a <HAL_I2C_IsDeviceReady+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b986:	6821      	ldr	r1, [r4, #0]
 800b988:	e7f1      	b.n	800b96e <HAL_I2C_IsDeviceReady+0x122>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b98a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b98c:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b98e:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b990:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b992:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b994:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b998:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 800b99c:	e7db      	b.n	800b956 <HAL_I2C_IsDeviceReady+0x10a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b99e:	f7fd fffd 	bl	800999c <HAL_GetTick>
 800b9a2:	1b43      	subs	r3, r0, r5
 800b9a4:	429e      	cmp	r6, r3
 800b9a6:	d3f0      	bcc.n	800b98a <HAL_I2C_IsDeviceReady+0x13e>
 800b9a8:	2e00      	cmp	r6, #0
 800b9aa:	d0ee      	beq.n	800b98a <HAL_I2C_IsDeviceReady+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9ac:	6822      	ldr	r2, [r4, #0]
 800b9ae:	e7b7      	b.n	800b920 <HAL_I2C_IsDeviceReady+0xd4>

0800b9b0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9b0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800b9b4:	2a20      	cmp	r2, #32
 800b9b6:	d123      	bne.n	800ba00 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800b9b8:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9bc:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800b9c0:	2a01      	cmp	r2, #1
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	d01c      	beq.n	800ba00 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b9c6:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b9c8:	2024      	movs	r0, #36	@ 0x24
{
 800b9ca:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b9cc:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 800b9d0:	6810      	ldr	r0, [r2, #0]
 800b9d2:	f020 0001 	bic.w	r0, r0, #1
 800b9d6:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b9d8:	6810      	ldr	r0, [r2, #0]
 800b9da:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800b9de:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b9e0:	6810      	ldr	r0, [r2, #0]
 800b9e2:	4301      	orrs	r1, r0
 800b9e4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b9e6:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9e8:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 800b9ec:	f041 0101 	orr.w	r1, r1, #1
 800b9f0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800b9f2:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800b9f6:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 800b9fa:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b9fc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800ba00:	2002      	movs	r0, #2
}
 800ba02:	4770      	bx	lr

0800ba04 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba04:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800ba08:	2a20      	cmp	r2, #32
 800ba0a:	d122      	bne.n	800ba52 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 800ba0c:	b500      	push	{lr}
 800ba0e:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba12:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800ba16:	2a01      	cmp	r2, #1
 800ba18:	4603      	mov	r3, r0
 800ba1a:	d01c      	beq.n	800ba56 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba1c:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba1e:	2024      	movs	r0, #36	@ 0x24
 800ba20:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 800ba24:	6810      	ldr	r0, [r2, #0]
 800ba26:	f020 0001 	bic.w	r0, r0, #1
 800ba2a:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ba2c:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ba2e:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ba32:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ba36:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba38:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba3a:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 800ba3e:	f041 0101 	orr.w	r1, r1, #1
 800ba42:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800ba44:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800ba48:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 800ba4c:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 800ba4e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800ba52:	2002      	movs	r0, #2
}
 800ba54:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800ba56:	2002      	movs	r0, #2
}
 800ba58:	f85d fb04 	ldr.w	pc, [sp], #4

0800ba5c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ba5c:	4b02      	ldr	r3, [pc, #8]	@ (800ba68 <HAL_PWREx_GetVoltageRange+0xc>)
 800ba5e:	6818      	ldr	r0, [r3, #0]
#endif
}
 800ba60:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 800ba64:	4770      	bx	lr
 800ba66:	bf00      	nop
 800ba68:	40007000 	.word	0x40007000

0800ba6c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ba6c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800ba70:	d00e      	beq.n	800ba90 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ba72:	4a1b      	ldr	r2, [pc, #108]	@ (800bae0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800ba74:	6813      	ldr	r3, [r2, #0]
 800ba76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ba7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba7e:	d005      	beq.n	800ba8c <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ba80:	6813      	ldr	r3, [r2, #0]
 800ba82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ba86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ba8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ba90:	4913      	ldr	r1, [pc, #76]	@ (800bae0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800ba92:	680b      	ldr	r3, [r1, #0]
 800ba94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ba98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba9c:	d0f6      	beq.n	800ba8c <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ba9e:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800baa0:	4a10      	ldr	r2, [pc, #64]	@ (800bae4 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800baa2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800baa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800baaa:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800baac:	6813      	ldr	r3, [r2, #0]
 800baae:	4a0e      	ldr	r2, [pc, #56]	@ (800bae8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800bab0:	2032      	movs	r0, #50	@ 0x32
 800bab2:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bab6:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bab8:	fba2 2303 	umull	r2, r3, r2, r3
 800babc:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800babe:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bac0:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bac4:	d506      	bpl.n	800bad4 <HAL_PWREx_ControlVoltageScaling+0x68>
 800bac6:	e000      	b.n	800baca <HAL_PWREx_ControlVoltageScaling+0x5e>
 800bac8:	b123      	cbz	r3, 800bad4 <HAL_PWREx_ControlVoltageScaling+0x68>
 800baca:	694a      	ldr	r2, [r1, #20]
 800bacc:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 800bace:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bad2:	d4f9      	bmi.n	800bac8 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bad4:	4b02      	ldr	r3, [pc, #8]	@ (800bae0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800bad6:	695b      	ldr	r3, [r3, #20]
 800bad8:	055b      	lsls	r3, r3, #21
 800bada:	d5d7      	bpl.n	800ba8c <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 800badc:	2003      	movs	r0, #3
}
 800bade:	4770      	bx	lr
 800bae0:	40007000 	.word	0x40007000
 800bae4:	20000004 	.word	0x20000004
 800bae8:	431bde83 	.word	0x431bde83

0800baec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800baec:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800baee:	4d20      	ldr	r5, [pc, #128]	@ (800bb70 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800baf0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800baf2:	00db      	lsls	r3, r3, #3
{
 800baf4:	b083      	sub	sp, #12
 800baf6:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800baf8:	d51a      	bpl.n	800bb30 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800bafa:	f7ff ffaf 	bl	800ba5c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bafe:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800bb02:	d027      	beq.n	800bb54 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800bb04:	2c80      	cmp	r4, #128	@ 0x80
 800bb06:	d82c      	bhi.n	800bb62 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800bb08:	d02f      	beq.n	800bb6a <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800bb0a:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 800bb0e:	fab4 f484 	clz	r4, r4
 800bb12:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800bb14:	4917      	ldr	r1, [pc, #92]	@ (800bb74 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800bb16:	680b      	ldr	r3, [r1, #0]
 800bb18:	f023 0307 	bic.w	r3, r3, #7
 800bb1c:	4323      	orrs	r3, r4
 800bb1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800bb20:	6808      	ldr	r0, [r1, #0]
 800bb22:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800bb26:	1b00      	subs	r0, r0, r4
 800bb28:	bf18      	it	ne
 800bb2a:	2001      	movne	r0, #1
 800bb2c:	b003      	add	sp, #12
 800bb2e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800bb30:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800bb32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb36:	65ab      	str	r3, [r5, #88]	@ 0x58
 800bb38:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800bb3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb3e:	9301      	str	r3, [sp, #4]
 800bb40:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800bb42:	f7ff ff8b 	bl	800ba5c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800bb46:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bb48:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 800bb4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb50:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bb52:	d1d7      	bne.n	800bb04 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 800bb54:	2c80      	cmp	r4, #128	@ 0x80
 800bb56:	d906      	bls.n	800bb66 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800bb58:	2ca1      	cmp	r4, #161	@ 0xa1
 800bb5a:	bf34      	ite	cc
 800bb5c:	2401      	movcc	r4, #1
 800bb5e:	2402      	movcs	r4, #2
 800bb60:	e7d8      	b.n	800bb14 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 800bb62:	2403      	movs	r4, #3
 800bb64:	e7d6      	b.n	800bb14 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800bb66:	2400      	movs	r4, #0
 800bb68:	e7d4      	b.n	800bb14 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 800bb6a:	2402      	movs	r4, #2
 800bb6c:	e7d2      	b.n	800bb14 <RCC_SetFlashLatencyFromMSIRange+0x28>
 800bb6e:	bf00      	nop
 800bb70:	40021000 	.word	0x40021000
 800bb74:	40022000 	.word	0x40022000

0800bb78 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb78:	4a28      	ldr	r2, [pc, #160]	@ (800bc1c <HAL_RCC_GetSysClockFreq+0xa4>)
 800bb7a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bb7c:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bb7e:	f013 030c 	ands.w	r3, r3, #12
 800bb82:	d005      	beq.n	800bb90 <HAL_RCC_GetSysClockFreq+0x18>
 800bb84:	2b0c      	cmp	r3, #12
 800bb86:	d035      	beq.n	800bbf4 <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800bb88:	2b04      	cmp	r3, #4
 800bb8a:	d141      	bne.n	800bc10 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 800bb8c:	4824      	ldr	r0, [pc, #144]	@ (800bc20 <HAL_RCC_GetSysClockFreq+0xa8>)
 800bb8e:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bb90:	4a22      	ldr	r2, [pc, #136]	@ (800bc1c <HAL_RCC_GetSysClockFreq+0xa4>)
 800bb92:	6811      	ldr	r1, [r2, #0]
 800bb94:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bb96:	bf54      	ite	pl
 800bb98:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bb9c:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 800bb9e:	4921      	ldr	r1, [pc, #132]	@ (800bc24 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bba0:	bf54      	ite	pl
 800bba2:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bba6:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800bbaa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bbae:	b303      	cbz	r3, 800bbf2 <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800bbb0:	2b0c      	cmp	r3, #12
 800bbb2:	d11d      	bne.n	800bbf0 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bbb4:	4b19      	ldr	r3, [pc, #100]	@ (800bc1c <HAL_RCC_GetSysClockFreq+0xa4>)
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d025      	beq.n	800bc0c <HAL_RCC_GetSysClockFreq+0x94>
 800bbc0:	4a19      	ldr	r2, [pc, #100]	@ (800bc28 <HAL_RCC_GetSysClockFreq+0xb0>)
 800bbc2:	2b03      	cmp	r3, #3
 800bbc4:	bf08      	it	eq
 800bbc6:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bbc8:	4b14      	ldr	r3, [pc, #80]	@ (800bc1c <HAL_RCC_GetSysClockFreq+0xa4>)
 800bbca:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bbcc:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bbd4:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bbd8:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bbdc:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bbde:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bbe2:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bbe4:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bbe6:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800bbea:	fbb2 f0f3 	udiv	r0, r2, r3
 800bbee:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bbf0:	2000      	movs	r0, #0
}
 800bbf2:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bbf4:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bbf8:	2a01      	cmp	r2, #1
 800bbfa:	d0c9      	beq.n	800bb90 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bbfc:	4b07      	ldr	r3, [pc, #28]	@ (800bc1c <HAL_RCC_GetSysClockFreq+0xa4>)
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800bc04:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bc06:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 800bc0a:	d1d9      	bne.n	800bbc0 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 800bc0c:	4804      	ldr	r0, [pc, #16]	@ (800bc20 <HAL_RCC_GetSysClockFreq+0xa8>)
 800bc0e:	e7db      	b.n	800bbc8 <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 800bc10:	2b08      	cmp	r3, #8
 800bc12:	4805      	ldr	r0, [pc, #20]	@ (800bc28 <HAL_RCC_GetSysClockFreq+0xb0>)
 800bc14:	bf18      	it	ne
 800bc16:	2000      	movne	r0, #0
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	40021000 	.word	0x40021000
 800bc20:	00f42400 	.word	0x00f42400
 800bc24:	08015e64 	.word	0x08015e64
 800bc28:	007a1200 	.word	0x007a1200

0800bc2c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	f000 8300 	beq.w	800c232 <HAL_RCC_OscConfig+0x606>
{
 800bc32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc36:	4a94      	ldr	r2, [pc, #592]	@ (800be88 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bc38:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc3a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bc3c:	68d6      	ldr	r6, [r2, #12]
 800bc3e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bc40:	06d8      	lsls	r0, r3, #27
{
 800bc42:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc44:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bc48:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bc4c:	d52e      	bpl.n	800bcac <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bc4e:	2d00      	cmp	r5, #0
 800bc50:	f000 8123 	beq.w	800be9a <HAL_RCC_OscConfig+0x26e>
 800bc54:	2d0c      	cmp	r5, #12
 800bc56:	f000 811d 	beq.w	800be94 <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bc5a:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 800bc5c:	4f8a      	ldr	r7, [pc, #552]	@ (800be88 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f000 8192 	beq.w	800bf88 <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_MSI_ENABLE();
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	f043 0301 	orr.w	r3, r3, #1
 800bc6a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800bc6c:	f7fd fe96 	bl	800999c <HAL_GetTick>
 800bc70:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bc72:	e006      	b.n	800bc82 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bc74:	f7fd fe92 	bl	800999c <HAL_GetTick>
 800bc78:	eba0 0008 	sub.w	r0, r0, r8
 800bc7c:	2802      	cmp	r0, #2
 800bc7e:	f200 8193 	bhi.w	800bfa8 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	079b      	lsls	r3, r3, #30
 800bc86:	d5f5      	bpl.n	800bc74 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	f043 0308 	orr.w	r3, r3, #8
 800bc8e:	603b      	str	r3, [r7, #0]
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	6a22      	ldr	r2, [r4, #32]
 800bc94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	69e2      	ldr	r2, [r4, #28]
 800bca0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bca4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bca8:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bcaa:	6823      	ldr	r3, [r4, #0]
 800bcac:	07d9      	lsls	r1, r3, #31
 800bcae:	f100 80c1 	bmi.w	800be34 <HAL_RCC_OscConfig+0x208>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bcb2:	0799      	lsls	r1, r3, #30
 800bcb4:	d523      	bpl.n	800bcfe <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800bcb6:	2d04      	cmp	r5, #4
 800bcb8:	f000 8156 	beq.w	800bf68 <HAL_RCC_OscConfig+0x33c>
 800bcbc:	2d0c      	cmp	r5, #12
 800bcbe:	f000 8150 	beq.w	800bf62 <HAL_RCC_OscConfig+0x336>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bcc2:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800bcc4:	4e70      	ldr	r6, [pc, #448]	@ (800be88 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f000 8189 	beq.w	800bfde <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_ENABLE();
 800bccc:	6833      	ldr	r3, [r6, #0]
 800bcce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcd2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800bcd4:	f7fd fe62 	bl	800999c <HAL_GetTick>
 800bcd8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bcda:	e005      	b.n	800bce8 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bcdc:	f7fd fe5e 	bl	800999c <HAL_GetTick>
 800bce0:	1bc0      	subs	r0, r0, r7
 800bce2:	2802      	cmp	r0, #2
 800bce4:	f200 8160 	bhi.w	800bfa8 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bce8:	6833      	ldr	r3, [r6, #0]
 800bcea:	055b      	lsls	r3, r3, #21
 800bcec:	d5f6      	bpl.n	800bcdc <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bcee:	6873      	ldr	r3, [r6, #4]
 800bcf0:	6922      	ldr	r2, [r4, #16]
 800bcf2:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800bcf6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bcfa:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bcfc:	6823      	ldr	r3, [r4, #0]
 800bcfe:	0719      	lsls	r1, r3, #28
 800bd00:	d519      	bpl.n	800bd36 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bd02:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800bd04:	4e60      	ldr	r6, [pc, #384]	@ (800be88 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f000 8117 	beq.w	800bf3a <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_LSI_ENABLE();
 800bd0c:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800bd10:	f043 0301 	orr.w	r3, r3, #1
 800bd14:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800bd18:	f7fd fe40 	bl	800999c <HAL_GetTick>
 800bd1c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bd1e:	e005      	b.n	800bd2c <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bd20:	f7fd fe3c 	bl	800999c <HAL_GetTick>
 800bd24:	1bc0      	subs	r0, r0, r7
 800bd26:	2802      	cmp	r0, #2
 800bd28:	f200 813e 	bhi.w	800bfa8 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bd2c:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800bd30:	079a      	lsls	r2, r3, #30
 800bd32:	d5f5      	bpl.n	800bd20 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bd34:	6823      	ldr	r3, [r4, #0]
 800bd36:	075f      	lsls	r7, r3, #29
 800bd38:	d53f      	bpl.n	800bdba <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800bd3a:	4b53      	ldr	r3, [pc, #332]	@ (800be88 <HAL_RCC_OscConfig+0x25c>)
 800bd3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bd3e:	00d6      	lsls	r6, r2, #3
 800bd40:	f100 814b 	bmi.w	800bfda <HAL_RCC_OscConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bd46:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800bd4a:	659a      	str	r2, [r3, #88]	@ 0x58
 800bd4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd52:	9301      	str	r3, [sp, #4]
 800bd54:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800bd56:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bd58:	4f4c      	ldr	r7, [pc, #304]	@ (800be8c <HAL_RCC_OscConfig+0x260>)
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	05d8      	lsls	r0, r3, #23
 800bd5e:	f140 8198 	bpl.w	800c092 <HAL_RCC_OscConfig+0x466>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd62:	68a3      	ldr	r3, [r4, #8]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	f000 814c 	beq.w	800c002 <HAL_RCC_OscConfig+0x3d6>
 800bd6a:	2b05      	cmp	r3, #5
 800bd6c:	f000 81bc 	beq.w	800c0e8 <HAL_RCC_OscConfig+0x4bc>
 800bd70:	4f45      	ldr	r7, [pc, #276]	@ (800be88 <HAL_RCC_OscConfig+0x25c>)
 800bd72:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800bd76:	f022 0201 	bic.w	r2, r2, #1
 800bd7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800bd7e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800bd82:	f022 0204 	bic.w	r2, r2, #4
 800bd86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f040 8140 	bne.w	800c010 <HAL_RCC_OscConfig+0x3e4>
      tickstart = HAL_GetTick();
 800bd90:	f7fd fe04 	bl	800999c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd94:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800bd98:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bd9a:	e006      	b.n	800bdaa <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd9c:	f7fd fdfe 	bl	800999c <HAL_GetTick>
 800bda0:	eba0 0008 	sub.w	r0, r0, r8
 800bda4:	4548      	cmp	r0, r9
 800bda6:	f200 80ff 	bhi.w	800bfa8 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bdaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bdae:	079b      	lsls	r3, r3, #30
 800bdb0:	d4f4      	bmi.n	800bd9c <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 800bdb2:	2e00      	cmp	r6, #0
 800bdb4:	f040 817f 	bne.w	800c0b6 <HAL_RCC_OscConfig+0x48a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bdb8:	6823      	ldr	r3, [r4, #0]
 800bdba:	0698      	lsls	r0, r3, #26
 800bdbc:	d518      	bpl.n	800bdf0 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bdbe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 800bdc0:	4e31      	ldr	r6, [pc, #196]	@ (800be88 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f000 8151 	beq.w	800c06a <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_ENABLE();
 800bdc8:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800bdcc:	f043 0301 	orr.w	r3, r3, #1
 800bdd0:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800bdd4:	f7fd fde2 	bl	800999c <HAL_GetTick>
 800bdd8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bdda:	e005      	b.n	800bde8 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bddc:	f7fd fdde 	bl	800999c <HAL_GetTick>
 800bde0:	1bc0      	subs	r0, r0, r7
 800bde2:	2802      	cmp	r0, #2
 800bde4:	f200 80e0 	bhi.w	800bfa8 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bde8:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800bdec:	0799      	lsls	r1, r3, #30
 800bdee:	d5f5      	bpl.n	800bddc <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bdf0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bdf2:	b1db      	cbz	r3, 800be2c <HAL_RCC_OscConfig+0x200>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	f000 8185 	beq.w	800c104 <HAL_RCC_OscConfig+0x4d8>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bdfa:	2d0c      	cmp	r5, #12
 800bdfc:	f000 808f 	beq.w	800bf1e <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_PLL_DISABLE();
 800be00:	4c21      	ldr	r4, [pc, #132]	@ (800be88 <HAL_RCC_OscConfig+0x25c>)
 800be02:	6823      	ldr	r3, [r4, #0]
 800be04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800be08:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800be0a:	f7fd fdc7 	bl	800999c <HAL_GetTick>
 800be0e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800be10:	e005      	b.n	800be1e <HAL_RCC_OscConfig+0x1f2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be12:	f7fd fdc3 	bl	800999c <HAL_GetTick>
 800be16:	1b40      	subs	r0, r0, r5
 800be18:	2802      	cmp	r0, #2
 800be1a:	f200 80c5 	bhi.w	800bfa8 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800be1e:	6823      	ldr	r3, [r4, #0]
 800be20:	019b      	lsls	r3, r3, #6
 800be22:	d4f6      	bmi.n	800be12 <HAL_RCC_OscConfig+0x1e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800be24:	68e2      	ldr	r2, [r4, #12]
 800be26:	4b1a      	ldr	r3, [pc, #104]	@ (800be90 <HAL_RCC_OscConfig+0x264>)
 800be28:	4013      	ands	r3, r2
 800be2a:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 800be2c:	2000      	movs	r0, #0
}
 800be2e:	b003      	add	sp, #12
 800be30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800be34:	2d08      	cmp	r5, #8
 800be36:	d076      	beq.n	800bf26 <HAL_RCC_OscConfig+0x2fa>
 800be38:	2d0c      	cmp	r5, #12
 800be3a:	d072      	beq.n	800bf22 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800be3c:	6863      	ldr	r3, [r4, #4]
 800be3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be42:	f000 80b5 	beq.w	800bfb0 <HAL_RCC_OscConfig+0x384>
 800be46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be4a:	f000 8140 	beq.w	800c0ce <HAL_RCC_OscConfig+0x4a2>
 800be4e:	4f0e      	ldr	r7, [pc, #56]	@ (800be88 <HAL_RCC_OscConfig+0x25c>)
 800be50:	683a      	ldr	r2, [r7, #0]
 800be52:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800be56:	603a      	str	r2, [r7, #0]
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800be5e:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be60:	2b00      	cmp	r3, #0
 800be62:	f040 80aa 	bne.w	800bfba <HAL_RCC_OscConfig+0x38e>
        tickstart = HAL_GetTick();
 800be66:	f7fd fd99 	bl	800999c <HAL_GetTick>
 800be6a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800be6c:	e006      	b.n	800be7c <HAL_RCC_OscConfig+0x250>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be6e:	f7fd fd95 	bl	800999c <HAL_GetTick>
 800be72:	eba0 0008 	sub.w	r0, r0, r8
 800be76:	2864      	cmp	r0, #100	@ 0x64
 800be78:	f200 8096 	bhi.w	800bfa8 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	0398      	lsls	r0, r3, #14
 800be80:	d4f5      	bmi.n	800be6e <HAL_RCC_OscConfig+0x242>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	e715      	b.n	800bcb2 <HAL_RCC_OscConfig+0x86>
 800be86:	bf00      	nop
 800be88:	40021000 	.word	0x40021000
 800be8c:	40007000 	.word	0x40007000
 800be90:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800be94:	2e01      	cmp	r6, #1
 800be96:	f47f aee0 	bne.w	800bc5a <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800be9a:	4ba6      	ldr	r3, [pc, #664]	@ (800c134 <HAL_RCC_OscConfig+0x508>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	0799      	lsls	r1, r3, #30
 800bea0:	d43a      	bmi.n	800bf18 <HAL_RCC_OscConfig+0x2ec>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bea2:	4ba4      	ldr	r3, [pc, #656]	@ (800c134 <HAL_RCC_OscConfig+0x508>)
 800bea4:	6a20      	ldr	r0, [r4, #32]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	0712      	lsls	r2, r2, #28
 800beaa:	bf56      	itet	pl
 800beac:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 800beb0:	681b      	ldrmi	r3, [r3, #0]
 800beb2:	091b      	lsrpl	r3, r3, #4
 800beb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800beb8:	4298      	cmp	r0, r3
 800beba:	f200 80be 	bhi.w	800c03a <HAL_RCC_OscConfig+0x40e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bebe:	4b9d      	ldr	r3, [pc, #628]	@ (800c134 <HAL_RCC_OscConfig+0x508>)
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	f042 0208 	orr.w	r2, r2, #8
 800bec6:	601a      	str	r2, [r3, #0]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800bece:	4302      	orrs	r2, r0
 800bed0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bed2:	685a      	ldr	r2, [r3, #4]
 800bed4:	69e1      	ldr	r1, [r4, #28]
 800bed6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800beda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800bede:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bee0:	2d00      	cmp	r5, #0
 800bee2:	f000 80ee 	beq.w	800c0c2 <HAL_RCC_OscConfig+0x496>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bee6:	f7ff fe47 	bl	800bb78 <HAL_RCC_GetSysClockFreq>
 800beea:	4b92      	ldr	r3, [pc, #584]	@ (800c134 <HAL_RCC_OscConfig+0x508>)
 800beec:	4a92      	ldr	r2, [pc, #584]	@ (800c138 <HAL_RCC_OscConfig+0x50c>)
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bef4:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 800bef6:	4a91      	ldr	r2, [pc, #580]	@ (800c13c <HAL_RCC_OscConfig+0x510>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bef8:	f003 031f 	and.w	r3, r3, #31
 800befc:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 800bf00:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bf02:	4a8f      	ldr	r2, [pc, #572]	@ (800c140 <HAL_RCC_OscConfig+0x514>)
 800bf04:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800bf06:	f7fb f8b3 	bl	8007070 <HAL_InitTick>
        if(status != HAL_OK)
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d18f      	bne.n	800be2e <HAL_RCC_OscConfig+0x202>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	07d9      	lsls	r1, r3, #31
 800bf12:	f57f aece 	bpl.w	800bcb2 <HAL_RCC_OscConfig+0x86>
 800bf16:	e78d      	b.n	800be34 <HAL_RCC_OscConfig+0x208>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bf18:	69a3      	ldr	r3, [r4, #24]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1c1      	bne.n	800bea2 <HAL_RCC_OscConfig+0x276>
    return HAL_ERROR;
 800bf1e:	2001      	movs	r0, #1
 800bf20:	e785      	b.n	800be2e <HAL_RCC_OscConfig+0x202>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bf22:	2e03      	cmp	r6, #3
 800bf24:	d18a      	bne.n	800be3c <HAL_RCC_OscConfig+0x210>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf26:	4a83      	ldr	r2, [pc, #524]	@ (800c134 <HAL_RCC_OscConfig+0x508>)
 800bf28:	6812      	ldr	r2, [r2, #0]
 800bf2a:	0392      	lsls	r2, r2, #14
 800bf2c:	f57f aec1 	bpl.w	800bcb2 <HAL_RCC_OscConfig+0x86>
 800bf30:	6862      	ldr	r2, [r4, #4]
 800bf32:	2a00      	cmp	r2, #0
 800bf34:	f47f aebd 	bne.w	800bcb2 <HAL_RCC_OscConfig+0x86>
 800bf38:	e7f1      	b.n	800bf1e <HAL_RCC_OscConfig+0x2f2>
      __HAL_RCC_LSI_DISABLE();
 800bf3a:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800bf3e:	f023 0301 	bic.w	r3, r3, #1
 800bf42:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800bf46:	f7fd fd29 	bl	800999c <HAL_GetTick>
 800bf4a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bf4c:	e004      	b.n	800bf58 <HAL_RCC_OscConfig+0x32c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bf4e:	f7fd fd25 	bl	800999c <HAL_GetTick>
 800bf52:	1bc0      	subs	r0, r0, r7
 800bf54:	2802      	cmp	r0, #2
 800bf56:	d827      	bhi.n	800bfa8 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bf58:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800bf5c:	079b      	lsls	r3, r3, #30
 800bf5e:	d4f6      	bmi.n	800bf4e <HAL_RCC_OscConfig+0x322>
 800bf60:	e6e8      	b.n	800bd34 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bf62:	2e02      	cmp	r6, #2
 800bf64:	f47f aead 	bne.w	800bcc2 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bf68:	4a72      	ldr	r2, [pc, #456]	@ (800c134 <HAL_RCC_OscConfig+0x508>)
 800bf6a:	6812      	ldr	r2, [r2, #0]
 800bf6c:	0552      	lsls	r2, r2, #21
 800bf6e:	d502      	bpl.n	800bf76 <HAL_RCC_OscConfig+0x34a>
 800bf70:	68e2      	ldr	r2, [r4, #12]
 800bf72:	2a00      	cmp	r2, #0
 800bf74:	d0d3      	beq.n	800bf1e <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf76:	496f      	ldr	r1, [pc, #444]	@ (800c134 <HAL_RCC_OscConfig+0x508>)
 800bf78:	6920      	ldr	r0, [r4, #16]
 800bf7a:	684a      	ldr	r2, [r1, #4]
 800bf7c:	f022 52f8 	bic.w	r2, r2, #520093696	@ 0x1f000000
 800bf80:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800bf84:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bf86:	e6ba      	b.n	800bcfe <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	f023 0301 	bic.w	r3, r3, #1
 800bf8e:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800bf90:	f7fd fd04 	bl	800999c <HAL_GetTick>
 800bf94:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	0798      	lsls	r0, r3, #30
 800bf9a:	d5b8      	bpl.n	800bf0e <HAL_RCC_OscConfig+0x2e2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bf9c:	f7fd fcfe 	bl	800999c <HAL_GetTick>
 800bfa0:	eba0 0008 	sub.w	r0, r0, r8
 800bfa4:	2802      	cmp	r0, #2
 800bfa6:	d9f6      	bls.n	800bf96 <HAL_RCC_OscConfig+0x36a>
            return HAL_TIMEOUT;
 800bfa8:	2003      	movs	r0, #3
}
 800bfaa:	b003      	add	sp, #12
 800bfac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bfb0:	4a60      	ldr	r2, [pc, #384]	@ (800c134 <HAL_RCC_OscConfig+0x508>)
 800bfb2:	6813      	ldr	r3, [r2, #0]
 800bfb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bfb8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800bfba:	f7fd fcef 	bl	800999c <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bfbe:	f8df 8174 	ldr.w	r8, [pc, #372]	@ 800c134 <HAL_RCC_OscConfig+0x508>
        tickstart = HAL_GetTick();
 800bfc2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bfc4:	e004      	b.n	800bfd0 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfc6:	f7fd fce9 	bl	800999c <HAL_GetTick>
 800bfca:	1bc0      	subs	r0, r0, r7
 800bfcc:	2864      	cmp	r0, #100	@ 0x64
 800bfce:	d8eb      	bhi.n	800bfa8 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bfd0:	f8d8 3000 	ldr.w	r3, [r8]
 800bfd4:	039b      	lsls	r3, r3, #14
 800bfd6:	d5f6      	bpl.n	800bfc6 <HAL_RCC_OscConfig+0x39a>
 800bfd8:	e753      	b.n	800be82 <HAL_RCC_OscConfig+0x256>
    FlagStatus       pwrclkchanged = RESET;
 800bfda:	2600      	movs	r6, #0
 800bfdc:	e6bc      	b.n	800bd58 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 800bfde:	6833      	ldr	r3, [r6, #0]
 800bfe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bfe4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800bfe6:	f7fd fcd9 	bl	800999c <HAL_GetTick>
 800bfea:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bfec:	e004      	b.n	800bff8 <HAL_RCC_OscConfig+0x3cc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bfee:	f7fd fcd5 	bl	800999c <HAL_GetTick>
 800bff2:	1bc0      	subs	r0, r0, r7
 800bff4:	2802      	cmp	r0, #2
 800bff6:	d8d7      	bhi.n	800bfa8 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bff8:	6833      	ldr	r3, [r6, #0]
 800bffa:	0558      	lsls	r0, r3, #21
 800bffc:	d4f7      	bmi.n	800bfee <HAL_RCC_OscConfig+0x3c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	e67d      	b.n	800bcfe <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c002:	4a4c      	ldr	r2, [pc, #304]	@ (800c134 <HAL_RCC_OscConfig+0x508>)
 800c004:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800c008:	f043 0301 	orr.w	r3, r3, #1
 800c00c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 800c010:	f7fd fcc4 	bl	800999c <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c014:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 800c134 <HAL_RCC_OscConfig+0x508>
      tickstart = HAL_GetTick();
 800c018:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c01a:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c01e:	e004      	b.n	800c02a <HAL_RCC_OscConfig+0x3fe>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c020:	f7fd fcbc 	bl	800999c <HAL_GetTick>
 800c024:	1bc0      	subs	r0, r0, r7
 800c026:	4548      	cmp	r0, r9
 800c028:	d8be      	bhi.n	800bfa8 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c02a:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 800c02e:	079a      	lsls	r2, r3, #30
 800c030:	d5f6      	bpl.n	800c020 <HAL_RCC_OscConfig+0x3f4>
    if(pwrclkchanged == SET)
 800c032:	2e00      	cmp	r6, #0
 800c034:	f43f aec0 	beq.w	800bdb8 <HAL_RCC_OscConfig+0x18c>
 800c038:	e03d      	b.n	800c0b6 <HAL_RCC_OscConfig+0x48a>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c03a:	f7ff fd57 	bl	800baec <RCC_SetFlashLatencyFromMSIRange>
 800c03e:	2800      	cmp	r0, #0
 800c040:	f47f af6d 	bne.w	800bf1e <HAL_RCC_OscConfig+0x2f2>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c044:	4b3b      	ldr	r3, [pc, #236]	@ (800c134 <HAL_RCC_OscConfig+0x508>)
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	f042 0208 	orr.w	r2, r2, #8
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	6a21      	ldr	r1, [r4, #32]
 800c052:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800c056:	430a      	orrs	r2, r1
 800c058:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c05a:	685a      	ldr	r2, [r3, #4]
 800c05c:	69e1      	ldr	r1, [r4, #28]
 800c05e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800c062:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c066:	605a      	str	r2, [r3, #4]
 800c068:	e73d      	b.n	800bee6 <HAL_RCC_OscConfig+0x2ba>
      __HAL_RCC_HSI48_DISABLE();
 800c06a:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800c06e:	f023 0301 	bic.w	r3, r3, #1
 800c072:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800c076:	f7fd fc91 	bl	800999c <HAL_GetTick>
 800c07a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c07c:	e004      	b.n	800c088 <HAL_RCC_OscConfig+0x45c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c07e:	f7fd fc8d 	bl	800999c <HAL_GetTick>
 800c082:	1bc0      	subs	r0, r0, r7
 800c084:	2802      	cmp	r0, #2
 800c086:	d88f      	bhi.n	800bfa8 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c088:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800c08c:	079a      	lsls	r2, r3, #30
 800c08e:	d4f6      	bmi.n	800c07e <HAL_RCC_OscConfig+0x452>
 800c090:	e6ae      	b.n	800bdf0 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c098:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800c09a:	f7fd fc7f 	bl	800999c <HAL_GetTick>
 800c09e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	05d9      	lsls	r1, r3, #23
 800c0a4:	f53f ae5d 	bmi.w	800bd62 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c0a8:	f7fd fc78 	bl	800999c <HAL_GetTick>
 800c0ac:	eba0 0008 	sub.w	r0, r0, r8
 800c0b0:	2802      	cmp	r0, #2
 800c0b2:	d9f5      	bls.n	800c0a0 <HAL_RCC_OscConfig+0x474>
 800c0b4:	e778      	b.n	800bfa8 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c0b6:	4a1f      	ldr	r2, [pc, #124]	@ (800c134 <HAL_RCC_OscConfig+0x508>)
 800c0b8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c0ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c0be:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0c0:	e67a      	b.n	800bdb8 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c0c2:	f7ff fd13 	bl	800baec <RCC_SetFlashLatencyFromMSIRange>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	f43f af0d 	beq.w	800bee6 <HAL_RCC_OscConfig+0x2ba>
 800c0cc:	e727      	b.n	800bf1e <HAL_RCC_OscConfig+0x2f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c0ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0d2:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c0dc:	601a      	str	r2, [r3, #0]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c0e4:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c0e6:	e768      	b.n	800bfba <HAL_RCC_OscConfig+0x38e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c0e8:	4b12      	ldr	r3, [pc, #72]	@ (800c134 <HAL_RCC_OscConfig+0x508>)
 800c0ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800c0ee:	f042 0204 	orr.w	r2, r2, #4
 800c0f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800c0f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800c0fa:	f042 0201 	orr.w	r2, r2, #1
 800c0fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c102:	e785      	b.n	800c010 <HAL_RCC_OscConfig+0x3e4>
      pll_config = RCC->PLLCFGR;
 800c104:	4e0b      	ldr	r6, [pc, #44]	@ (800c134 <HAL_RCC_OscConfig+0x508>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c106:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 800c108:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c10a:	f003 0103 	and.w	r1, r3, #3
 800c10e:	4291      	cmp	r1, r2
 800c110:	d052      	beq.n	800c1b8 <HAL_RCC_OscConfig+0x58c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c112:	2d0c      	cmp	r5, #12
 800c114:	f43f af03 	beq.w	800bf1e <HAL_RCC_OscConfig+0x2f2>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c118:	4d06      	ldr	r5, [pc, #24]	@ (800c134 <HAL_RCC_OscConfig+0x508>)
 800c11a:	682b      	ldr	r3, [r5, #0]
 800c11c:	015b      	lsls	r3, r3, #5
 800c11e:	f53f aefe 	bmi.w	800bf1e <HAL_RCC_OscConfig+0x2f2>
            __HAL_RCC_PLL_DISABLE();
 800c122:	682b      	ldr	r3, [r5, #0]
 800c124:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c128:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800c12a:	f7fd fc37 	bl	800999c <HAL_GetTick>
 800c12e:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c130:	e00e      	b.n	800c150 <HAL_RCC_OscConfig+0x524>
 800c132:	bf00      	nop
 800c134:	40021000 	.word	0x40021000
 800c138:	08015e9c 	.word	0x08015e9c
 800c13c:	20000014 	.word	0x20000014
 800c140:	20000004 	.word	0x20000004
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c144:	f7fd fc2a 	bl	800999c <HAL_GetTick>
 800c148:	1b80      	subs	r0, r0, r6
 800c14a:	2802      	cmp	r0, #2
 800c14c:	f63f af2c 	bhi.w	800bfa8 <HAL_RCC_OscConfig+0x37c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	019f      	lsls	r7, r3, #6
 800c154:	d4f6      	bmi.n	800c144 <HAL_RCC_OscConfig+0x518>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c156:	68e9      	ldr	r1, [r5, #12]
 800c158:	4b37      	ldr	r3, [pc, #220]	@ (800c238 <HAL_RCC_OscConfig+0x60c>)
 800c15a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c15c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c15e:	4e37      	ldr	r6, [pc, #220]	@ (800c23c <HAL_RCC_OscConfig+0x610>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c160:	400b      	ands	r3, r1
 800c162:	4313      	orrs	r3, r2
 800c164:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	@ 0x34
 800c168:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c16c:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800c170:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 800c174:	3801      	subs	r0, #1
 800c176:	0849      	lsrs	r1, r1, #1
 800c178:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800c17c:	3901      	subs	r1, #1
 800c17e:	0852      	lsrs	r2, r2, #1
 800c180:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800c184:	3a01      	subs	r2, #1
 800c186:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800c18a:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 800c18c:	682b      	ldr	r3, [r5, #0]
 800c18e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c192:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c194:	68eb      	ldr	r3, [r5, #12]
 800c196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c19a:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 800c19c:	f7fd fbfe 	bl	800999c <HAL_GetTick>
 800c1a0:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1a2:	e005      	b.n	800c1b0 <HAL_RCC_OscConfig+0x584>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1a4:	f7fd fbfa 	bl	800999c <HAL_GetTick>
 800c1a8:	1b00      	subs	r0, r0, r4
 800c1aa:	2802      	cmp	r0, #2
 800c1ac:	f63f aefc 	bhi.w	800bfa8 <HAL_RCC_OscConfig+0x37c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1b0:	6833      	ldr	r3, [r6, #0]
 800c1b2:	0198      	lsls	r0, r3, #6
 800c1b4:	d5f6      	bpl.n	800c1a4 <HAL_RCC_OscConfig+0x578>
 800c1b6:	e639      	b.n	800be2c <HAL_RCC_OscConfig+0x200>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c1b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c1ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c1be:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c1c0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800c1c4:	d1a5      	bne.n	800c112 <HAL_RCC_OscConfig+0x4e6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c1c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c1cc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800c1d0:	d19f      	bne.n	800c112 <HAL_RCC_OscConfig+0x4e6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c1d2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c1d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c1d8:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800c1dc:	d199      	bne.n	800c112 <HAL_RCC_OscConfig+0x4e6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c1de:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c1e0:	0852      	lsrs	r2, r2, #1
 800c1e2:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800c1e6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c1e8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800c1ec:	d191      	bne.n	800c112 <HAL_RCC_OscConfig+0x4e6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c1ee:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c1f0:	0852      	lsrs	r2, r2, #1
 800c1f2:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800c1f6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c1f8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800c1fc:	d189      	bne.n	800c112 <HAL_RCC_OscConfig+0x4e6>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c1fe:	6833      	ldr	r3, [r6, #0]
 800c200:	0199      	lsls	r1, r3, #6
 800c202:	f53f ae13 	bmi.w	800be2c <HAL_RCC_OscConfig+0x200>
          __HAL_RCC_PLL_ENABLE();
 800c206:	6833      	ldr	r3, [r6, #0]
 800c208:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c20c:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c20e:	68f3      	ldr	r3, [r6, #12]
 800c210:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c214:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 800c216:	f7fd fbc1 	bl	800999c <HAL_GetTick>
 800c21a:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c21c:	e005      	b.n	800c22a <HAL_RCC_OscConfig+0x5fe>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c21e:	f7fd fbbd 	bl	800999c <HAL_GetTick>
 800c222:	1b03      	subs	r3, r0, r4
 800c224:	2b02      	cmp	r3, #2
 800c226:	f63f aebf 	bhi.w	800bfa8 <HAL_RCC_OscConfig+0x37c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c22a:	6833      	ldr	r3, [r6, #0]
 800c22c:	019a      	lsls	r2, r3, #6
 800c22e:	d5f6      	bpl.n	800c21e <HAL_RCC_OscConfig+0x5f2>
 800c230:	e5fc      	b.n	800be2c <HAL_RCC_OscConfig+0x200>
    return HAL_ERROR;
 800c232:	2001      	movs	r0, #1
}
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	019d808c 	.word	0x019d808c
 800c23c:	40021000 	.word	0x40021000

0800c240 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800c240:	2800      	cmp	r0, #0
 800c242:	f000 80a0 	beq.w	800c386 <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c246:	4a54      	ldr	r2, [pc, #336]	@ (800c398 <HAL_RCC_ClockConfig+0x158>)
 800c248:	6813      	ldr	r3, [r2, #0]
 800c24a:	f003 0307 	and.w	r3, r3, #7
 800c24e:	428b      	cmp	r3, r1
{
 800c250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c254:	460d      	mov	r5, r1
 800c256:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c258:	d20c      	bcs.n	800c274 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c25a:	6813      	ldr	r3, [r2, #0]
 800c25c:	f023 0307 	bic.w	r3, r3, #7
 800c260:	430b      	orrs	r3, r1
 800c262:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c264:	6813      	ldr	r3, [r2, #0]
 800c266:	f003 0307 	and.w	r3, r3, #7
 800c26a:	428b      	cmp	r3, r1
 800c26c:	d002      	beq.n	800c274 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800c26e:	2001      	movs	r0, #1
}
 800c270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c274:	6823      	ldr	r3, [r4, #0]
 800c276:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c278:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c27c:	d570      	bpl.n	800c360 <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c27e:	4e47      	ldr	r6, [pc, #284]	@ (800c39c <HAL_RCC_ClockConfig+0x15c>)
 800c280:	68a0      	ldr	r0, [r4, #8]
 800c282:	68b1      	ldr	r1, [r6, #8]
 800c284:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 800c288:	4288      	cmp	r0, r1
 800c28a:	d904      	bls.n	800c296 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c28c:	68b1      	ldr	r1, [r6, #8]
 800c28e:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 800c292:	4301      	orrs	r1, r0
 800c294:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c296:	b332      	cbz	r2, 800c2e6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c298:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c29a:	4b40      	ldr	r3, [pc, #256]	@ (800c39c <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c29c:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c29e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c2a0:	d065      	beq.n	800c36e <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c2a2:	2a02      	cmp	r2, #2
 800c2a4:	d06c      	beq.n	800c380 <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c2a6:	2a00      	cmp	r2, #0
 800c2a8:	d171      	bne.n	800c38e <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c2aa:	079e      	lsls	r6, r3, #30
 800c2ac:	d5df      	bpl.n	800c26e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c2ae:	4e3b      	ldr	r6, [pc, #236]	@ (800c39c <HAL_RCC_ClockConfig+0x15c>)
 800c2b0:	68b3      	ldr	r3, [r6, #8]
 800c2b2:	f023 0303 	bic.w	r3, r3, #3
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800c2ba:	f7fd fb6f 	bl	800999c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c2be:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800c2c2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2c4:	e004      	b.n	800c2d0 <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c2c6:	f7fd fb69 	bl	800999c <HAL_GetTick>
 800c2ca:	1bc0      	subs	r0, r0, r7
 800c2cc:	4540      	cmp	r0, r8
 800c2ce:	d85c      	bhi.n	800c38a <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2d0:	68b3      	ldr	r3, [r6, #8]
 800c2d2:	6862      	ldr	r2, [r4, #4]
 800c2d4:	f003 030c 	and.w	r3, r3, #12
 800c2d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800c2dc:	d1f3      	bne.n	800c2c6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2de:	6823      	ldr	r3, [r4, #0]
 800c2e0:	0799      	lsls	r1, r3, #30
 800c2e2:	d506      	bpl.n	800c2f2 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c2e4:	68a0      	ldr	r0, [r4, #8]
 800c2e6:	492d      	ldr	r1, [pc, #180]	@ (800c39c <HAL_RCC_ClockConfig+0x15c>)
 800c2e8:	688a      	ldr	r2, [r1, #8]
 800c2ea:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800c2ee:	4282      	cmp	r2, r0
 800c2f0:	d840      	bhi.n	800c374 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c2f2:	4929      	ldr	r1, [pc, #164]	@ (800c398 <HAL_RCC_ClockConfig+0x158>)
 800c2f4:	680a      	ldr	r2, [r1, #0]
 800c2f6:	f002 0207 	and.w	r2, r2, #7
 800c2fa:	42aa      	cmp	r2, r5
 800c2fc:	d909      	bls.n	800c312 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2fe:	680a      	ldr	r2, [r1, #0]
 800c300:	f022 0207 	bic.w	r2, r2, #7
 800c304:	432a      	orrs	r2, r5
 800c306:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c308:	680a      	ldr	r2, [r1, #0]
 800c30a:	f002 0207 	and.w	r2, r2, #7
 800c30e:	42aa      	cmp	r2, r5
 800c310:	d1ad      	bne.n	800c26e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c312:	075a      	lsls	r2, r3, #29
 800c314:	d506      	bpl.n	800c324 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c316:	4921      	ldr	r1, [pc, #132]	@ (800c39c <HAL_RCC_ClockConfig+0x15c>)
 800c318:	68e0      	ldr	r0, [r4, #12]
 800c31a:	688a      	ldr	r2, [r1, #8]
 800c31c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c320:	4302      	orrs	r2, r0
 800c322:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c324:	071b      	lsls	r3, r3, #28
 800c326:	d507      	bpl.n	800c338 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c328:	4a1c      	ldr	r2, [pc, #112]	@ (800c39c <HAL_RCC_ClockConfig+0x15c>)
 800c32a:	6921      	ldr	r1, [r4, #16]
 800c32c:	6893      	ldr	r3, [r2, #8]
 800c32e:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800c332:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800c336:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c338:	f7ff fc1e 	bl	800bb78 <HAL_RCC_GetSysClockFreq>
 800c33c:	4a17      	ldr	r2, [pc, #92]	@ (800c39c <HAL_RCC_ClockConfig+0x15c>)
 800c33e:	4c18      	ldr	r4, [pc, #96]	@ (800c3a0 <HAL_RCC_ClockConfig+0x160>)
 800c340:	6892      	ldr	r2, [r2, #8]
 800c342:	4918      	ldr	r1, [pc, #96]	@ (800c3a4 <HAL_RCC_ClockConfig+0x164>)
 800c344:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800c348:	4603      	mov	r3, r0
 800c34a:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 800c34c:	4816      	ldr	r0, [pc, #88]	@ (800c3a8 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c34e:	f002 021f 	and.w	r2, r2, #31
 800c352:	40d3      	lsrs	r3, r2
}
 800c354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800c358:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c35a:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 800c35c:	f7fa be88 	b.w	8007070 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c360:	2a00      	cmp	r2, #0
 800c362:	d0c6      	beq.n	800c2f2 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c364:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c366:	4b0d      	ldr	r3, [pc, #52]	@ (800c39c <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c368:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c36a:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c36c:	d199      	bne.n	800c2a2 <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c36e:	019b      	lsls	r3, r3, #6
 800c370:	d49d      	bmi.n	800c2ae <HAL_RCC_ClockConfig+0x6e>
 800c372:	e77c      	b.n	800c26e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c374:	688a      	ldr	r2, [r1, #8]
 800c376:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800c37a:	4302      	orrs	r2, r0
 800c37c:	608a      	str	r2, [r1, #8]
 800c37e:	e7b8      	b.n	800c2f2 <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c380:	039f      	lsls	r7, r3, #14
 800c382:	d494      	bmi.n	800c2ae <HAL_RCC_ClockConfig+0x6e>
 800c384:	e773      	b.n	800c26e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800c386:	2001      	movs	r0, #1
}
 800c388:	4770      	bx	lr
        return HAL_TIMEOUT;
 800c38a:	2003      	movs	r0, #3
 800c38c:	e770      	b.n	800c270 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c38e:	0558      	lsls	r0, r3, #21
 800c390:	f57f af6d 	bpl.w	800c26e <HAL_RCC_ClockConfig+0x2e>
 800c394:	e78b      	b.n	800c2ae <HAL_RCC_ClockConfig+0x6e>
 800c396:	bf00      	nop
 800c398:	40022000 	.word	0x40022000
 800c39c:	40021000 	.word	0x40021000
 800c3a0:	08015e9c 	.word	0x08015e9c
 800c3a4:	20000004 	.word	0x20000004
 800c3a8:	20000014 	.word	0x20000014

0800c3ac <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c3ac:	4b05      	ldr	r3, [pc, #20]	@ (800c3c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 800c3ae:	4a06      	ldr	r2, [pc, #24]	@ (800c3c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800c3b0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800c3b2:	4906      	ldr	r1, [pc, #24]	@ (800c3cc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c3b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800c3b8:	6808      	ldr	r0, [r1, #0]
 800c3ba:	5cd3      	ldrb	r3, [r2, r3]
 800c3bc:	f003 031f 	and.w	r3, r3, #31
}
 800c3c0:	40d8      	lsrs	r0, r3
 800c3c2:	4770      	bx	lr
 800c3c4:	40021000 	.word	0x40021000
 800c3c8:	08015e94 	.word	0x08015e94
 800c3cc:	20000004 	.word	0x20000004

0800c3d0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c3d0:	4b05      	ldr	r3, [pc, #20]	@ (800c3e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 800c3d2:	4a06      	ldr	r2, [pc, #24]	@ (800c3ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 800c3d4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800c3d6:	4906      	ldr	r1, [pc, #24]	@ (800c3f0 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c3d8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800c3dc:	6808      	ldr	r0, [r1, #0]
 800c3de:	5cd3      	ldrb	r3, [r2, r3]
 800c3e0:	f003 031f 	and.w	r3, r3, #31
}
 800c3e4:	40d8      	lsrs	r0, r3
 800c3e6:	4770      	bx	lr
 800c3e8:	40021000 	.word	0x40021000
 800c3ec:	08015e94 	.word	0x08015e94
 800c3f0:	20000004 	.word	0x20000004

0800c3f4 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800c3f4:	4b0e      	ldr	r3, [pc, #56]	@ (800c430 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c3f6:	220f      	movs	r2, #15
 800c3f8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800c3fa:	689a      	ldr	r2, [r3, #8]
 800c3fc:	f002 0203 	and.w	r2, r2, #3
 800c400:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800c402:	689a      	ldr	r2, [r3, #8]
 800c404:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800c408:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800c40a:	689a      	ldr	r2, [r3, #8]
 800c40c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800c410:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	08db      	lsrs	r3, r3, #3
{
 800c416:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800c418:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800c41c:	4c05      	ldr	r4, [pc, #20]	@ (800c434 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800c41e:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800c420:	6823      	ldr	r3, [r4, #0]
}
 800c422:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	600b      	str	r3, [r1, #0]
}
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	40021000 	.word	0x40021000
 800c434:	40022000 	.word	0x40022000

0800c438 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c438:	4a45      	ldr	r2, [pc, #276]	@ (800c550 <RCCEx_PLLSAI1_Config+0x118>)
{
 800c43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c43c:	68d6      	ldr	r6, [r2, #12]
{
 800c43e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c440:	07b1      	lsls	r1, r6, #30
{
 800c442:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c444:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c446:	d006      	beq.n	800c456 <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c448:	68d1      	ldr	r1, [r2, #12]
 800c44a:	f001 0103 	and.w	r1, r1, #3
 800c44e:	4281      	cmp	r1, r0
 800c450:	d04b      	beq.n	800c4ea <RCCEx_PLLSAI1_Config+0xb2>
 800c452:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 800c454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800c456:	2802      	cmp	r0, #2
 800c458:	d058      	beq.n	800c50c <RCCEx_PLLSAI1_Config+0xd4>
 800c45a:	2803      	cmp	r0, #3
 800c45c:	d04f      	beq.n	800c4fe <RCCEx_PLLSAI1_Config+0xc6>
 800c45e:	2801      	cmp	r0, #1
 800c460:	d1f7      	bne.n	800c452 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c462:	6812      	ldr	r2, [r2, #0]
 800c464:	0793      	lsls	r3, r2, #30
 800c466:	d5f5      	bpl.n	800c454 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c468:	4939      	ldr	r1, [pc, #228]	@ (800c550 <RCCEx_PLLSAI1_Config+0x118>)
 800c46a:	68ca      	ldr	r2, [r1, #12]
 800c46c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800c470:	ea42 0300 	orr.w	r3, r2, r0
 800c474:	6862      	ldr	r2, [r4, #4]
 800c476:	3a01      	subs	r2, #1
 800c478:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800c47c:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 800c47e:	4e34      	ldr	r6, [pc, #208]	@ (800c550 <RCCEx_PLLSAI1_Config+0x118>)
 800c480:	6833      	ldr	r3, [r6, #0]
 800c482:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c486:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800c488:	f7fd fa88 	bl	800999c <HAL_GetTick>
 800c48c:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c48e:	e004      	b.n	800c49a <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c490:	f7fd fa84 	bl	800999c <HAL_GetTick>
 800c494:	1bc3      	subs	r3, r0, r7
 800c496:	2b02      	cmp	r3, #2
 800c498:	d83c      	bhi.n	800c514 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c49a:	6833      	ldr	r3, [r6, #0]
 800c49c:	011a      	lsls	r2, r3, #4
 800c49e:	d4f7      	bmi.n	800c490 <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c4a0:	68a3      	ldr	r3, [r4, #8]
 800c4a2:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 800c4a4:	2d00      	cmp	r5, #0
 800c4a6:	d137      	bne.n	800c518 <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c4a8:	6932      	ldr	r2, [r6, #16]
 800c4aa:	68e3      	ldr	r3, [r4, #12]
 800c4ac:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 800c4b0:	ea41 63c3 	orr.w	r3, r1, r3, lsl #27
 800c4b4:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800c4bc:	4d24      	ldr	r5, [pc, #144]	@ (800c550 <RCCEx_PLLSAI1_Config+0x118>)
 800c4be:	682b      	ldr	r3, [r5, #0]
 800c4c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c4c4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800c4c6:	f7fd fa69 	bl	800999c <HAL_GetTick>
 800c4ca:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c4cc:	e004      	b.n	800c4d8 <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c4ce:	f7fd fa65 	bl	800999c <HAL_GetTick>
 800c4d2:	1b80      	subs	r0, r0, r6
 800c4d4:	2802      	cmp	r0, #2
 800c4d6:	d81d      	bhi.n	800c514 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c4d8:	682b      	ldr	r3, [r5, #0]
 800c4da:	011b      	lsls	r3, r3, #4
 800c4dc:	d5f7      	bpl.n	800c4ce <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c4de:	692b      	ldr	r3, [r5, #16]
 800c4e0:	69a2      	ldr	r2, [r4, #24]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	612b      	str	r3, [r5, #16]
}
 800c4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800c4ea:	2900      	cmp	r1, #0
 800c4ec:	d0b1      	beq.n	800c452 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c4ee:	68d3      	ldr	r3, [r2, #12]
       ||
 800c4f0:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c4f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c4f6:	3301      	adds	r3, #1
       ||
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d1aa      	bne.n	800c452 <RCCEx_PLLSAI1_Config+0x1a>
 800c4fc:	e7bf      	b.n	800c47e <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c4fe:	6811      	ldr	r1, [r2, #0]
 800c500:	038e      	lsls	r6, r1, #14
 800c502:	d4b1      	bmi.n	800c468 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c504:	6812      	ldr	r2, [r2, #0]
 800c506:	0351      	lsls	r1, r2, #13
 800c508:	d5a3      	bpl.n	800c452 <RCCEx_PLLSAI1_Config+0x1a>
 800c50a:	e7ad      	b.n	800c468 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c50c:	6812      	ldr	r2, [r2, #0]
 800c50e:	0557      	lsls	r7, r2, #21
 800c510:	d59f      	bpl.n	800c452 <RCCEx_PLLSAI1_Config+0x1a>
 800c512:	e7a9      	b.n	800c468 <RCCEx_PLLSAI1_Config+0x30>
 800c514:	2003      	movs	r0, #3
}
 800c516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800c518:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c51a:	6933      	ldr	r3, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 800c51c:	d00b      	beq.n	800c536 <RCCEx_PLLSAI1_Config+0xfe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c51e:	6962      	ldr	r2, [r4, #20]
 800c520:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800c524:	0852      	lsrs	r2, r2, #1
 800c526:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c52a:	3a01      	subs	r2, #1
 800c52c:	430b      	orrs	r3, r1
 800c52e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800c532:	6133      	str	r3, [r6, #16]
 800c534:	e7c2      	b.n	800c4bc <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c536:	6922      	ldr	r2, [r4, #16]
 800c538:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800c53c:	0852      	lsrs	r2, r2, #1
 800c53e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c542:	3a01      	subs	r2, #1
 800c544:	430b      	orrs	r3, r1
 800c546:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800c54a:	6133      	str	r3, [r6, #16]
 800c54c:	e7b6      	b.n	800c4bc <RCCEx_PLLSAI1_Config+0x84>
 800c54e:	bf00      	nop
 800c550:	40021000 	.word	0x40021000

0800c554 <HAL_RCCEx_PeriphCLKConfig>:
{
 800c554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c558:	6803      	ldr	r3, [r0, #0]
 800c55a:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 800c55e:	b083      	sub	sp, #12
 800c560:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c562:	d00c      	beq.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x2a>
    switch(PeriphClkInit->Sai1ClockSelection)
 800c564:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800c566:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800c56a:	f000 810c 	beq.w	800c786 <HAL_RCCEx_PeriphCLKConfig+0x232>
 800c56e:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 800c572:	f000 810d 	beq.w	800c790 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800c576:	2900      	cmp	r1, #0
 800c578:	f000 8129 	beq.w	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x27a>
 800c57c:	2601      	movs	r6, #1
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c57e:	0398      	lsls	r0, r3, #14
 800c580:	d554      	bpl.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c582:	4ba5      	ldr	r3, [pc, #660]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c584:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c586:	00d1      	lsls	r1, r2, #3
 800c588:	f140 80f2 	bpl.w	800c770 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    FlagStatus       pwrclkchanged = RESET;
 800c58c:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c58e:	4da3      	ldr	r5, [pc, #652]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800c590:	682b      	ldr	r3, [r5, #0]
 800c592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c596:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800c598:	f7fd fa00 	bl	800999c <HAL_GetTick>
 800c59c:	4680      	mov	r8, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c59e:	e006      	b.n	800c5ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c5a0:	f7fd f9fc 	bl	800999c <HAL_GetTick>
 800c5a4:	eba0 0308 	sub.w	r3, r0, r8
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	f200 80fb 	bhi.w	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x250>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c5ae:	682b      	ldr	r3, [r5, #0]
 800c5b0:	05da      	lsls	r2, r3, #23
 800c5b2:	d5f5      	bpl.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    if(ret == HAL_OK)
 800c5b4:	bbb6      	cbnz	r6, 800c624 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c5b6:	4d98      	ldr	r5, [pc, #608]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c5b8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c5ba:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c5be:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800c5c2:	d027      	beq.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d025      	beq.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c5c8:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800c5cc:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800c5d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c5d4:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c5d8:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800c5dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c5e0:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c5e4:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 800c5e8:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c5ec:	07cb      	lsls	r3, r1, #31
 800c5ee:	d511      	bpl.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        tickstart = HAL_GetTick();
 800c5f0:	f7fd f9d4 	bl	800999c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c5f4:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800c5f8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c5fa:	e006      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0xb6>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c5fc:	f7fd f9ce 	bl	800999c <HAL_GetTick>
 800c600:	eba0 0008 	sub.w	r0, r0, r8
 800c604:	4548      	cmp	r0, r9
 800c606:	f200 80cd 	bhi.w	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x250>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c60a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800c60e:	0798      	lsls	r0, r3, #30
 800c610:	d5f4      	bpl.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0xa8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c612:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800c614:	4980      	ldr	r1, [pc, #512]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c616:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800c61a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c61e:	4313      	orrs	r3, r2
 800c620:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c624:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 800c626:	2f00      	cmp	r7, #0
 800c628:	f040 80c1 	bne.w	800c7ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c62c:	07d9      	lsls	r1, r3, #31
 800c62e:	d508      	bpl.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0xee>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c630:	4979      	ldr	r1, [pc, #484]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c632:	6a20      	ldr	r0, [r4, #32]
 800c634:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800c638:	f022 0203 	bic.w	r2, r2, #3
 800c63c:	4302      	orrs	r2, r0
 800c63e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c642:	079a      	lsls	r2, r3, #30
 800c644:	d508      	bpl.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0x104>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c646:	4974      	ldr	r1, [pc, #464]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c648:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c64a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800c64e:	f022 020c 	bic.w	r2, r2, #12
 800c652:	4302      	orrs	r2, r0
 800c654:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c658:	075f      	lsls	r7, r3, #29
 800c65a:	d508      	bpl.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c65c:	496e      	ldr	r1, [pc, #440]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c65e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800c660:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800c664:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800c668:	4302      	orrs	r2, r0
 800c66a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c66e:	069d      	lsls	r5, r3, #26
 800c670:	d508      	bpl.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c672:	4969      	ldr	r1, [pc, #420]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c674:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800c676:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800c67a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800c67e:	4302      	orrs	r2, r0
 800c680:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c684:	0598      	lsls	r0, r3, #22
 800c686:	d508      	bpl.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c688:	4963      	ldr	r1, [pc, #396]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c68a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800c68c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800c690:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800c694:	4302      	orrs	r2, r0
 800c696:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c69a:	0559      	lsls	r1, r3, #21
 800c69c:	d508      	bpl.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c69e:	495e      	ldr	r1, [pc, #376]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c6a0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800c6a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800c6a6:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800c6aa:	4302      	orrs	r2, r0
 800c6ac:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c6b0:	065a      	lsls	r2, r3, #25
 800c6b2:	d508      	bpl.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x172>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c6b4:	4958      	ldr	r1, [pc, #352]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c6b6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c6b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800c6bc:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800c6c0:	4302      	orrs	r2, r0
 800c6c2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c6c6:	061f      	lsls	r7, r3, #24
 800c6c8:	d508      	bpl.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x188>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c6ca:	4953      	ldr	r1, [pc, #332]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c6cc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800c6ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800c6d2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c6d6:	4302      	orrs	r2, r0
 800c6d8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c6dc:	05dd      	lsls	r5, r3, #23
 800c6de:	d508      	bpl.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c6e0:	494d      	ldr	r1, [pc, #308]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c6e2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800c6e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800c6e8:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800c6ec:	4302      	orrs	r2, r0
 800c6ee:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800c6f2:	0318      	lsls	r0, r3, #12
 800c6f4:	d50e      	bpl.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c6f6:	4948      	ldr	r1, [pc, #288]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c6f8:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800c6fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800c6fe:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800c702:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c704:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c708:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c70c:	d055      	beq.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x266>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800c70e:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800c712:	d06c      	beq.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x29a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c714:	0359      	lsls	r1, r3, #13
 800c716:	d50e      	bpl.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c718:	493f      	ldr	r1, [pc, #252]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c71a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800c71c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800c720:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800c724:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c726:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c72a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c72e:	d049      	beq.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c730:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800c734:	d064      	beq.n	800c800 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c736:	045a      	lsls	r2, r3, #17
 800c738:	d50b      	bpl.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c73a:	4837      	ldr	r0, [pc, #220]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c73c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800c73e:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800c742:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800c746:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c748:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c74c:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c750:	d044      	beq.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0x288>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c752:	041b      	lsls	r3, r3, #16
 800c754:	d508      	bpl.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0x214>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c756:	4a30      	ldr	r2, [pc, #192]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c758:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c75a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800c75e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c762:	430b      	orrs	r3, r1
 800c764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 800c768:	4630      	mov	r0, r6
 800c76a:	b003      	add	sp, #12
 800c76c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800c770:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c772:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800c776:	659a      	str	r2, [r3, #88]	@ 0x58
 800c778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c77a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c77e:	9301      	str	r3, [sp, #4]
 800c780:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800c782:	2701      	movs	r7, #1
 800c784:	e703      	b.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c786:	4824      	ldr	r0, [pc, #144]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c788:	68c2      	ldr	r2, [r0, #12]
 800c78a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c78e:	60c2      	str	r2, [r0, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c790:	4821      	ldr	r0, [pc, #132]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c792:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800c796:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800c79a:	430a      	orrs	r2, r1
 800c79c:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c7a0:	2600      	movs	r6, #0
 800c7a2:	e6ec      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c7a4:	6823      	ldr	r3, [r4, #0]
        ret = HAL_TIMEOUT;
 800c7a6:	2603      	movs	r6, #3
    if(pwrclkchanged == SET)
 800c7a8:	2f00      	cmp	r7, #0
 800c7aa:	f43f af3f 	beq.w	800c62c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c7ae:	491a      	ldr	r1, [pc, #104]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c7b0:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800c7b2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c7b6:	658a      	str	r2, [r1, #88]	@ 0x58
 800c7b8:	e738      	b.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c7ba:	68ca      	ldr	r2, [r1, #12]
 800c7bc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800c7c0:	60ca      	str	r2, [r1, #12]
 800c7c2:	e7a7      	b.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c7c4:	68ca      	ldr	r2, [r1, #12]
 800c7c6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800c7ca:	60ca      	str	r2, [r1, #12]
 800c7cc:	e7b3      	b.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c7ce:	3004      	adds	r0, #4
 800c7d0:	f7ff fe32 	bl	800c438 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	b1e0      	cbz	r0, 800c812 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c7d8:	6823      	ldr	r3, [r4, #0]
 800c7da:	e6d0      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c7dc:	2102      	movs	r1, #2
 800c7de:	1d20      	adds	r0, r4, #4
 800c7e0:	f7ff fe2a 	bl	800c438 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c7e4:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d0b3      	beq.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c7ea:	4606      	mov	r6, r0
 800c7ec:	e7b1      	b.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c7ee:	2101      	movs	r1, #1
 800c7f0:	1d20      	adds	r0, r4, #4
 800c7f2:	f7ff fe21 	bl	800c438 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c7f6:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	d08b      	beq.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	e789      	b.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c800:	2101      	movs	r1, #1
 800c802:	1d20      	adds	r0, r4, #4
 800c804:	f7ff fe18 	bl	800c438 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c808:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d093      	beq.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c80e:	4606      	mov	r6, r0
 800c810:	e791      	b.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c812:	6c61      	ldr	r1, [r4, #68]	@ 0x44
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c814:	6823      	ldr	r3, [r4, #0]
 800c816:	e7bb      	b.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800c818:	40021000 	.word	0x40021000
 800c81c:	40007000 	.word	0x40007000

0800c820 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop

0800c824 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c824:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d116      	bne.n	800c85a <HAL_TIM_Base_Start_IT+0x36>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c82c:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c82e:	4910      	ldr	r1, [pc, #64]	@ (800c870 <HAL_TIM_Base_Start_IT+0x4c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c830:	2202      	movs	r2, #2
 800c832:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c836:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c838:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c83a:	f042 0201 	orr.w	r2, r2, #1
 800c83e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c840:	d00d      	beq.n	800c85e <HAL_TIM_Base_Start_IT+0x3a>
 800c842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c846:	d00a      	beq.n	800c85e <HAL_TIM_Base_Start_IT+0x3a>
 800c848:	4a0a      	ldr	r2, [pc, #40]	@ (800c874 <HAL_TIM_Base_Start_IT+0x50>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d007      	beq.n	800c85e <HAL_TIM_Base_Start_IT+0x3a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    {
      __HAL_TIM_ENABLE(htim);
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	f042 0201 	orr.w	r2, r2, #1
 800c854:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c856:	2000      	movs	r0, #0
 800c858:	4770      	bx	lr
    return HAL_ERROR;
 800c85a:	2001      	movs	r0, #1
}
 800c85c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c85e:	6899      	ldr	r1, [r3, #8]
 800c860:	4a05      	ldr	r2, [pc, #20]	@ (800c878 <HAL_TIM_Base_Start_IT+0x54>)
 800c862:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c864:	2a06      	cmp	r2, #6
 800c866:	d0f6      	beq.n	800c856 <HAL_TIM_Base_Start_IT+0x32>
 800c868:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c86c:	d1ef      	bne.n	800c84e <HAL_TIM_Base_Start_IT+0x2a>
 800c86e:	e7f2      	b.n	800c856 <HAL_TIM_Base_Start_IT+0x32>
 800c870:	40012c00 	.word	0x40012c00
 800c874:	40014000 	.word	0x40014000
 800c878:	00010007 	.word	0x00010007

0800c87c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop

0800c880 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop

0800c884 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop

0800c888 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800c888:	4770      	bx	lr
 800c88a:	bf00      	nop

0800c88c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c88c:	6803      	ldr	r3, [r0, #0]
 800c88e:	691a      	ldr	r2, [r3, #16]
 800c890:	0791      	lsls	r1, r2, #30
{
 800c892:	b510      	push	{r4, lr}
 800c894:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c896:	d502      	bpl.n	800c89e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c898:	68da      	ldr	r2, [r3, #12]
 800c89a:	0792      	lsls	r2, r2, #30
 800c89c:	d468      	bmi.n	800c970 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c89e:	691a      	ldr	r2, [r3, #16]
 800c8a0:	0752      	lsls	r2, r2, #29
 800c8a2:	d502      	bpl.n	800c8aa <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c8a4:	68da      	ldr	r2, [r3, #12]
 800c8a6:	0750      	lsls	r0, r2, #29
 800c8a8:	d44f      	bmi.n	800c94a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c8aa:	691a      	ldr	r2, [r3, #16]
 800c8ac:	0711      	lsls	r1, r2, #28
 800c8ae:	d502      	bpl.n	800c8b6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c8b0:	68da      	ldr	r2, [r3, #12]
 800c8b2:	0712      	lsls	r2, r2, #28
 800c8b4:	d437      	bmi.n	800c926 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c8b6:	691a      	ldr	r2, [r3, #16]
 800c8b8:	06d0      	lsls	r0, r2, #27
 800c8ba:	d502      	bpl.n	800c8c2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c8bc:	68da      	ldr	r2, [r3, #12]
 800c8be:	06d1      	lsls	r1, r2, #27
 800c8c0:	d41e      	bmi.n	800c900 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c8c2:	691a      	ldr	r2, [r3, #16]
 800c8c4:	07d2      	lsls	r2, r2, #31
 800c8c6:	d502      	bpl.n	800c8ce <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c8c8:	68da      	ldr	r2, [r3, #12]
 800c8ca:	07d0      	lsls	r0, r2, #31
 800c8cc:	d469      	bmi.n	800c9a2 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c8ce:	691a      	ldr	r2, [r3, #16]
 800c8d0:	0611      	lsls	r1, r2, #24
 800c8d2:	d502      	bpl.n	800c8da <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c8d4:	68da      	ldr	r2, [r3, #12]
 800c8d6:	0612      	lsls	r2, r2, #24
 800c8d8:	d46b      	bmi.n	800c9b2 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c8da:	691a      	ldr	r2, [r3, #16]
 800c8dc:	05d0      	lsls	r0, r2, #23
 800c8de:	d502      	bpl.n	800c8e6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	0611      	lsls	r1, r2, #24
 800c8e4:	d46d      	bmi.n	800c9c2 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c8e6:	691a      	ldr	r2, [r3, #16]
 800c8e8:	0652      	lsls	r2, r2, #25
 800c8ea:	d502      	bpl.n	800c8f2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8ec:	68da      	ldr	r2, [r3, #12]
 800c8ee:	0650      	lsls	r0, r2, #25
 800c8f0:	d46f      	bmi.n	800c9d2 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8f2:	691a      	ldr	r2, [r3, #16]
 800c8f4:	0691      	lsls	r1, r2, #26
 800c8f6:	d502      	bpl.n	800c8fe <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8f8:	68da      	ldr	r2, [r3, #12]
 800c8fa:	0692      	lsls	r2, r2, #26
 800c8fc:	d449      	bmi.n	800c992 <HAL_TIM_IRQHandler+0x106>
}
 800c8fe:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c900:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c904:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c906:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c908:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c90a:	69db      	ldr	r3, [r3, #28]
 800c90c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800c910:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c912:	d16f      	bne.n	800c9f4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c914:	f7ff ffb2 	bl	800c87c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c918:	4620      	mov	r0, r4
 800c91a:	f7ff ffb3 	bl	800c884 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c91e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c920:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c922:	7722      	strb	r2, [r4, #28]
 800c924:	e7cd      	b.n	800c8c2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c926:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c92a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c92c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c92e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c930:	69db      	ldr	r3, [r3, #28]
 800c932:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800c934:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c936:	d15a      	bne.n	800c9ee <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c938:	f7ff ffa0 	bl	800c87c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c93c:	4620      	mov	r0, r4
 800c93e:	f7ff ffa1 	bl	800c884 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c942:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c944:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c946:	7722      	strb	r2, [r4, #28]
 800c948:	e7b5      	b.n	800c8b6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c94a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c94e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c950:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c952:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800c95a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c95c:	d144      	bne.n	800c9e8 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c95e:	f7ff ff8d 	bl	800c87c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c962:	4620      	mov	r0, r4
 800c964:	f7ff ff8e 	bl	800c884 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c968:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c96a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c96c:	7722      	strb	r2, [r4, #28]
 800c96e:	e79c      	b.n	800c8aa <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c970:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c974:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c976:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c978:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c97a:	699b      	ldr	r3, [r3, #24]
 800c97c:	0799      	lsls	r1, r3, #30
 800c97e:	d130      	bne.n	800c9e2 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c980:	f7ff ff7c 	bl	800c87c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c984:	4620      	mov	r0, r4
 800c986:	f7ff ff7d 	bl	800c884 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c98a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c98c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c98e:	7722      	strb	r2, [r4, #28]
 800c990:	e785      	b.n	800c89e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c992:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c996:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c998:	611a      	str	r2, [r3, #16]
}
 800c99a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c99e:	f000 b8a7 	b.w	800caf0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9a2:	f06f 0201 	mvn.w	r2, #1
 800c9a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f7f9 fe31 	bl	8006610 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c9ae:	6823      	ldr	r3, [r4, #0]
 800c9b0:	e78d      	b.n	800c8ce <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c9b2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c9b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f000 f89b 	bl	800caf4 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c9be:	6823      	ldr	r3, [r4, #0]
 800c9c0:	e78b      	b.n	800c8da <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c9c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f000 f895 	bl	800caf8 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c9ce:	6823      	ldr	r3, [r4, #0]
 800c9d0:	e789      	b.n	800c8e6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c9d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c9d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f7ff ff55 	bl	800c888 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	e787      	b.n	800c8f2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800c9e2:	f7ff ff4d 	bl	800c880 <HAL_TIM_IC_CaptureCallback>
 800c9e6:	e7d0      	b.n	800c98a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800c9e8:	f7ff ff4a 	bl	800c880 <HAL_TIM_IC_CaptureCallback>
 800c9ec:	e7bc      	b.n	800c968 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800c9ee:	f7ff ff47 	bl	800c880 <HAL_TIM_IC_CaptureCallback>
 800c9f2:	e7a6      	b.n	800c942 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800c9f4:	f7ff ff44 	bl	800c880 <HAL_TIM_IC_CaptureCallback>
 800c9f8:	e791      	b.n	800c91e <HAL_TIM_IRQHandler+0x92>
 800c9fa:	bf00      	nop

0800c9fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c9fc:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c9fe:	4e21      	ldr	r6, [pc, #132]	@ (800ca84 <TIM_Base_SetConfig+0x88>)
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca00:	688c      	ldr	r4, [r1, #8]
  tmpcr1 = TIMx->CR1;
 800ca02:	6803      	ldr	r3, [r0, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca04:	694d      	ldr	r5, [r1, #20]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca06:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca08:	42b0      	cmp	r0, r6
 800ca0a:	d01c      	beq.n	800ca46 <TIM_Base_SetConfig+0x4a>
 800ca0c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ca10:	d010      	beq.n	800ca34 <TIM_Base_SetConfig+0x38>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca12:	4e1d      	ldr	r6, [pc, #116]	@ (800ca88 <TIM_Base_SetConfig+0x8c>)
 800ca14:	42b0      	cmp	r0, r6
 800ca16:	d02a      	beq.n	800ca6e <TIM_Base_SetConfig+0x72>
 800ca18:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800ca1c:	42b0      	cmp	r0, r6
 800ca1e:	d016      	beq.n	800ca4e <TIM_Base_SetConfig+0x52>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca24:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800ca26:	6003      	str	r3, [r0, #0]
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca28:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca2a:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ca2c:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800ca2e:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800ca30:	6143      	str	r3, [r0, #20]
}
 800ca32:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800ca34:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca36:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800ca3c:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca42:	430b      	orrs	r3, r1
 800ca44:	e7ec      	b.n	800ca20 <TIM_Base_SetConfig+0x24>
    tmpcr1 |= Structure->CounterMode;
 800ca46:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800ca4c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca4e:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca54:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca5a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800ca5c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca5e:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ca60:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800ca62:	690b      	ldr	r3, [r1, #16]
 800ca64:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800ca66:	2301      	movs	r3, #1
}
 800ca68:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800ca6a:	6143      	str	r3, [r0, #20]
}
 800ca6c:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca6e:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca74:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca7a:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 800ca7c:	6005      	str	r5, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca7e:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ca80:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca82:	e7ee      	b.n	800ca62 <TIM_Base_SetConfig+0x66>
 800ca84:	40012c00 	.word	0x40012c00
 800ca88:	40014000 	.word	0x40014000

0800ca8c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800ca8c:	b370      	cbz	r0, 800caec <HAL_TIM_Base_Init+0x60>
{
 800ca8e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800ca90:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ca94:	4604      	mov	r4, r0
 800ca96:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ca9a:	b313      	cbz	r3, 800cae2 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca9c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800ca9e:	2302      	movs	r3, #2
 800caa0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800caa4:	f851 0b04 	ldr.w	r0, [r1], #4
 800caa8:	f7ff ffa8 	bl	800c9fc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800caac:	2301      	movs	r3, #1
 800caae:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cab2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800cab6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800caba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800cabe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800cac2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cac6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800caca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800cace:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800cad2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800cad6:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800cada:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800cade:	2000      	movs	r0, #0
}
 800cae0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800cae2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800cae6:	f7ff fe9b 	bl	800c820 <HAL_TIM_Base_MspInit>
 800caea:	e7d7      	b.n	800ca9c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800caec:	2001      	movs	r0, #1
}
 800caee:	4770      	bx	lr

0800caf0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800caf0:	4770      	bx	lr
 800caf2:	bf00      	nop

0800caf4 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop

0800caf8 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800caf8:	4770      	bx	lr
 800cafa:	bf00      	nop

0800cafc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cafc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafe:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb06:	e842 3100 	strex	r1, r3, [r2]
 800cb0a:	2900      	cmp	r1, #0
 800cb0c:	d1f7      	bne.n	800cafe <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb0e:	f102 0308 	add.w	r3, r2, #8
 800cb12:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb16:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1a:	f102 0c08 	add.w	ip, r2, #8
 800cb1e:	e84c 3100 	strex	r1, r3, [ip]
 800cb22:	2900      	cmp	r1, #0
 800cb24:	d1f3      	bne.n	800cb0e <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb26:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d005      	beq.n	800cb38 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb2c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800cb2e:	2220      	movs	r2, #32
 800cb30:	67c2      	str	r2, [r0, #124]	@ 0x7c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb32:	6643      	str	r3, [r0, #100]	@ 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb34:	6603      	str	r3, [r0, #96]	@ 0x60
}
 800cb36:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb38:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb3c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb40:	e842 3100 	strex	r1, r3, [r2]
 800cb44:	2900      	cmp	r1, #0
 800cb46:	d0f1      	beq.n	800cb2c <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb48:	e852 3f00 	ldrex	r3, [r2]
 800cb4c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb50:	e842 3100 	strex	r1, r3, [r2]
 800cb54:	2900      	cmp	r1, #0
 800cb56:	d1ef      	bne.n	800cb38 <UART_EndRxTransfer+0x3c>
 800cb58:	e7e8      	b.n	800cb2c <UART_EndRxTransfer+0x30>
 800cb5a:	bf00      	nop

0800cb5c <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cb5c:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800cb5e:	2b21      	cmp	r3, #33	@ 0x21
 800cb60:	d000      	beq.n	800cb64 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800cb62:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800cb64:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cb68:	6802      	ldr	r2, [r0, #0]
    if (huart->TxXferCount == 0U)
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	b983      	cbnz	r3, 800cb90 <UART_TxISR_16BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb6e:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800cb72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb76:	e842 3100 	strex	r1, r3, [r2]
 800cb7a:	2900      	cmp	r1, #0
 800cb7c:	d1f7      	bne.n	800cb6e <UART_TxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7e:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb86:	e842 3100 	strex	r1, r3, [r2]
 800cb8a:	2900      	cmp	r1, #0
 800cb8c:	d1f7      	bne.n	800cb7e <UART_TxISR_16BIT+0x22>
 800cb8e:	4770      	bx	lr
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cb90:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800cb92:	f831 3b02 	ldrh.w	r3, [r1], #2
 800cb96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb9a:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800cb9c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->pTxBuffPtr += 2U;
 800cba0:	64c1      	str	r1, [r0, #76]	@ 0x4c
      huart->TxXferCount--;
 800cba2:	3b01      	subs	r3, #1
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
}
 800cbaa:	4770      	bx	lr

0800cbac <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cbac:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800cbae:	2b21      	cmp	r3, #33	@ 0x21
 800cbb0:	d000      	beq.n	800cbb4 <UART_TxISR_8BIT+0x8>
}
 800cbb2:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800cbb4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cbb8:	6802      	ldr	r2, [r0, #0]
    if (huart->TxXferCount == 0U)
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	b983      	cbnz	r3, 800cbe0 <UART_TxISR_8BIT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbbe:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800cbc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc6:	e842 3100 	strex	r1, r3, [r2]
 800cbca:	2900      	cmp	r1, #0
 800cbcc:	d1f7      	bne.n	800cbbe <UART_TxISR_8BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbce:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd6:	e842 3100 	strex	r1, r3, [r2]
 800cbda:	2900      	cmp	r1, #0
 800cbdc:	d1f7      	bne.n	800cbce <UART_TxISR_8BIT+0x22>
 800cbde:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cbe0:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800cbe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbe6:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800cbe8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
      huart->pTxBuffPtr++;
 800cbec:	64c1      	str	r1, [r0, #76]	@ 0x4c
      huart->TxXferCount--;
 800cbee:	3b01      	subs	r3, #1
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
}
 800cbf6:	4770      	bx	lr

0800cbf8 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800cbf8:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800cbfa:	2b20      	cmp	r3, #32
 800cbfc:	d129      	bne.n	800cc52 <HAL_UART_Transmit_IT+0x5a>
    if ((pData == NULL) || (Size == 0U))
 800cbfe:	b331      	cbz	r1, 800cc4e <HAL_UART_Transmit_IT+0x56>
 800cc00:	b32a      	cbz	r2, 800cc4e <HAL_UART_Transmit_IT+0x56>
    __HAL_LOCK(huart);
 800cc02:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d023      	beq.n	800cc52 <HAL_UART_Transmit_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc0a:	6883      	ldr	r3, [r0, #8]
{
 800cc0c:	b410      	push	{r4}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc12:	f04f 0400 	mov.w	r4, #0
    huart->pTxBuffPtr  = pData;
 800cc16:	64c1      	str	r1, [r0, #76]	@ 0x4c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc18:	f04f 0121 	mov.w	r1, #33	@ 0x21
    huart->TxXferCount = Size;
 800cc1c:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
    huart->TxXferSize  = Size;
 800cc20:	f8a0 2050 	strh.w	r2, [r0, #80]	@ 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc24:	f8c0 4080 	str.w	r4, [r0, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc28:	6781      	str	r1, [r0, #120]	@ 0x78
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc2a:	d014      	beq.n	800cc56 <HAL_UART_Transmit_IT+0x5e>
      huart->TxISR = UART_TxISR_8BIT;
 800cc2c:	4b0d      	ldr	r3, [pc, #52]	@ (800cc64 <HAL_UART_Transmit_IT+0x6c>)
 800cc2e:	6802      	ldr	r2, [r0, #0]
 800cc30:	6683      	str	r3, [r0, #104]	@ 0x68
    __HAL_UNLOCK(huart);
 800cc32:	2100      	movs	r1, #0
 800cc34:	f880 1074 	strb.w	r1, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc38:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800cc3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc40:	e842 3000 	strex	r0, r3, [r2]
 800cc44:	2800      	cmp	r0, #0
 800cc46:	d1f7      	bne.n	800cc38 <HAL_UART_Transmit_IT+0x40>
}
 800cc48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc4c:	4770      	bx	lr
      return HAL_ERROR;
 800cc4e:	2001      	movs	r0, #1
 800cc50:	4770      	bx	lr
    __HAL_LOCK(huart);
 800cc52:	2002      	movs	r0, #2
}
 800cc54:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc56:	6901      	ldr	r1, [r0, #16]
      huart->TxISR = UART_TxISR_16BIT;
 800cc58:	4b02      	ldr	r3, [pc, #8]	@ (800cc64 <HAL_UART_Transmit_IT+0x6c>)
 800cc5a:	4a03      	ldr	r2, [pc, #12]	@ (800cc68 <HAL_UART_Transmit_IT+0x70>)
 800cc5c:	42a1      	cmp	r1, r4
 800cc5e:	bf08      	it	eq
 800cc60:	4613      	moveq	r3, r2
 800cc62:	e7e4      	b.n	800cc2e <HAL_UART_Transmit_IT+0x36>
 800cc64:	0800cbad 	.word	0x0800cbad
 800cc68:	0800cb5d 	.word	0x0800cb5d

0800cc6c <UART_DMAAbortOnError>:
{
 800cc6c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc6e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 800cc70:	2300      	movs	r3, #0
 800cc72:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800cc76:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
  HAL_UART_ErrorCallback(huart);
 800cc7a:	f7f7 f959 	bl	8003f30 <HAL_UART_ErrorCallback>
}
 800cc7e:	bd08      	pop	{r3, pc}

0800cc80 <HAL_UARTEx_RxEventCallback>:
}
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop

0800cc84 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cc84:	6803      	ldr	r3, [r0, #0]
 800cc86:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc88:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cc8a:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 800cc8e:	ea12 0f0c 	tst.w	r2, ip
{
 800cc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc96:	689d      	ldr	r5, [r3, #8]
{
 800cc98:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800cc9a:	d14f      	bne.n	800cd3c <HAL_UART_IRQHandler+0xb8>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cc9c:	0697      	lsls	r7, r2, #26
 800cc9e:	d502      	bpl.n	800cca6 <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cca0:	068e      	lsls	r6, r1, #26
 800cca2:	f100 80b8 	bmi.w	800ce16 <HAL_UART_IRQHandler+0x192>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cca6:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800cca8:	2801      	cmp	r0, #1
 800ccaa:	d025      	beq.n	800ccf8 <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ccac:	02d0      	lsls	r0, r2, #11
 800ccae:	d502      	bpl.n	800ccb6 <HAL_UART_IRQHandler+0x32>
 800ccb0:	026f      	lsls	r7, r5, #9
 800ccb2:	f100 80b5 	bmi.w	800ce20 <HAL_UART_IRQHandler+0x19c>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ccb6:	0616      	lsls	r6, r2, #24
 800ccb8:	d415      	bmi.n	800cce6 <HAL_UART_IRQHandler+0x62>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ccba:	0650      	lsls	r0, r2, #25
 800ccbc:	d501      	bpl.n	800ccc2 <HAL_UART_IRQHandler+0x3e>
 800ccbe:	064a      	lsls	r2, r1, #25
 800ccc0:	d401      	bmi.n	800ccc6 <HAL_UART_IRQHandler+0x42>
}
 800ccc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc6:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ccca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccce:	e843 2100 	strex	r1, r2, [r3]
 800ccd2:	2900      	cmp	r1, #0
 800ccd4:	d1f7      	bne.n	800ccc6 <HAL_UART_IRQHandler+0x42>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ccd6:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ccd8:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800ccda:	67a2      	str	r2, [r4, #120]	@ 0x78
  huart->TxISR = NULL;
 800ccdc:	66a3      	str	r3, [r4, #104]	@ 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ccde:	4620      	mov	r0, r4
 800cce0:	f7f7 f8cc 	bl	8003e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cce4:	e7ed      	b.n	800ccc2 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cce6:	060d      	lsls	r5, r1, #24
 800cce8:	d5e7      	bpl.n	800ccba <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 800ccea:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d0e8      	beq.n	800ccc2 <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 800ccf0:	4620      	mov	r0, r4
}
 800ccf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800ccf6:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ccf8:	06d6      	lsls	r6, r2, #27
 800ccfa:	d5d7      	bpl.n	800ccac <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ccfc:	06c8      	lsls	r0, r1, #27
 800ccfe:	d5d5      	bpl.n	800ccac <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd00:	2210      	movs	r2, #16
 800cd02:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd04:	689a      	ldr	r2, [r3, #8]
 800cd06:	0657      	lsls	r7, r2, #25
 800cd08:	f140 810c 	bpl.w	800cf24 <HAL_UART_IRQHandler+0x2a0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cd0c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800cd0e:	6801      	ldr	r1, [r0, #0]
 800cd10:	684a      	ldr	r2, [r1, #4]
 800cd12:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800cd14:	2a00      	cmp	r2, #0
 800cd16:	d0d4      	beq.n	800ccc2 <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cd18:	f8b4 5058 	ldrh.w	r5, [r4, #88]	@ 0x58
 800cd1c:	4295      	cmp	r5, r2
 800cd1e:	d9d0      	bls.n	800ccc2 <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 800cd20:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cd24:	680a      	ldr	r2, [r1, #0]
 800cd26:	0696      	lsls	r6, r2, #26
 800cd28:	f140 80cc 	bpl.w	800cec4 <HAL_UART_IRQHandler+0x240>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd2c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800cd30:	1ae9      	subs	r1, r5, r3
 800cd32:	4620      	mov	r0, r4
 800cd34:	b289      	uxth	r1, r1
 800cd36:	f7ff ffa3 	bl	800cc80 <HAL_UARTEx_RxEventCallback>
 800cd3a:	e7c2      	b.n	800ccc2 <HAL_UART_IRQHandler+0x3e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cd3c:	f015 0701 	ands.w	r7, r5, #1
 800cd40:	461e      	mov	r6, r3
 800cd42:	f040 8090 	bne.w	800ce66 <HAL_UART_IRQHandler+0x1e2>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800cd46:	4894      	ldr	r0, [pc, #592]	@ (800cf98 <HAL_UART_IRQHandler+0x314>)
 800cd48:	4201      	tst	r1, r0
 800cd4a:	d0ac      	beq.n	800cca6 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cd4c:	07d5      	lsls	r5, r2, #31
 800cd4e:	d50e      	bpl.n	800cd6e <HAL_UART_IRQHandler+0xea>
 800cd50:	05c8      	lsls	r0, r1, #23
 800cd52:	f140 80b3 	bpl.w	800cebc <HAL_UART_IRQHandler+0x238>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cd56:	2001      	movs	r0, #1
 800cd58:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cd5a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800cd5e:	f040 0001 	orr.w	r0, r0, #1
 800cd62:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd66:	0790      	lsls	r0, r2, #30
 800cd68:	d566      	bpl.n	800ce38 <HAL_UART_IRQHandler+0x1b4>
 800cd6a:	2f00      	cmp	r7, #0
 800cd6c:	d17f      	bne.n	800ce6e <HAL_UART_IRQHandler+0x1ea>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd6e:	0755      	lsls	r5, r2, #29
 800cd70:	f140 8087 	bpl.w	800ce82 <HAL_UART_IRQHandler+0x1fe>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cd74:	0717      	lsls	r7, r2, #28
 800cd76:	f100 8096 	bmi.w	800cea6 <HAL_UART_IRQHandler+0x222>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cd7a:	0515      	lsls	r5, r2, #20
 800cd7c:	d50a      	bpl.n	800cd94 <HAL_UART_IRQHandler+0x110>
 800cd7e:	0148      	lsls	r0, r1, #5
 800cd80:	d508      	bpl.n	800cd94 <HAL_UART_IRQHandler+0x110>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd82:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800cd86:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cd88:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cd8c:	f043 0320 	orr.w	r3, r3, #32
 800cd90:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd94:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d092      	beq.n	800ccc2 <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cd9c:	0692      	lsls	r2, r2, #26
 800cd9e:	d502      	bpl.n	800cda6 <HAL_UART_IRQHandler+0x122>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cda0:	068b      	lsls	r3, r1, #26
 800cda2:	f100 8083 	bmi.w	800ceac <HAL_UART_IRQHandler+0x228>
      errorcode = huart->ErrorCode;
 800cda6:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cdaa:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cdac:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cdb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdb4:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 800cdb8:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cdba:	f000 80e7 	beq.w	800cf8c <HAL_UART_IRQHandler+0x308>
        UART_EndRxTransfer(huart);
 800cdbe:	f7ff fe9d 	bl	800cafc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdc2:	68b3      	ldr	r3, [r6, #8]
 800cdc4:	065f      	lsls	r7, r3, #25
 800cdc6:	d565      	bpl.n	800ce94 <HAL_UART_IRQHandler+0x210>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc8:	f106 0308 	add.w	r3, r6, #8
 800cdcc:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdd4:	f106 0108 	add.w	r1, r6, #8
 800cdd8:	e841 3200 	strex	r2, r3, [r1]
 800cddc:	b162      	cbz	r2, 800cdf8 <HAL_UART_IRQHandler+0x174>
 800cdde:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde0:	f103 0208 	add.w	r2, r3, #8
 800cde4:	e852 2f00 	ldrex	r2, [r2]
 800cde8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdec:	f103 0008 	add.w	r0, r3, #8
 800cdf0:	e840 2100 	strex	r1, r2, [r0]
 800cdf4:	2900      	cmp	r1, #0
 800cdf6:	d1f3      	bne.n	800cde0 <HAL_UART_IRQHandler+0x15c>
          if (huart->hdmarx != NULL)
 800cdf8:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	d04a      	beq.n	800ce94 <HAL_UART_IRQHandler+0x210>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cdfe:	4b67      	ldr	r3, [pc, #412]	@ (800cf9c <HAL_UART_IRQHandler+0x318>)
 800ce00:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ce02:	f7fd fcc1 	bl	800a788 <HAL_DMA_Abort_IT>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	f43f af5b 	beq.w	800ccc2 <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce0c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
}
 800ce0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce12:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ce14:	4718      	bx	r3
      if (huart->RxISR != NULL)
 800ce16:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	f47f af6a 	bne.w	800ccf2 <HAL_UART_IRQHandler+0x6e>
 800ce1e:	e750      	b.n	800ccc2 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce20:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800ce24:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce26:	621a      	str	r2, [r3, #32]
}
 800ce28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800ce2c:	f000 bc80 	b.w	800d730 <HAL_UARTEx_WakeupCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce30:	05c8      	lsls	r0, r1, #23
 800ce32:	d490      	bmi.n	800cd56 <HAL_UART_IRQHandler+0xd2>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce34:	0795      	lsls	r5, r2, #30
 800ce36:	d41a      	bmi.n	800ce6e <HAL_UART_IRQHandler+0x1ea>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce38:	0750      	lsls	r0, r2, #29
 800ce3a:	d522      	bpl.n	800ce82 <HAL_UART_IRQHandler+0x1fe>
 800ce3c:	2f00      	cmp	r7, #0
 800ce3e:	d099      	beq.n	800cd74 <HAL_UART_IRQHandler+0xf0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce40:	2004      	movs	r0, #4
 800ce42:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce44:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce48:	0715      	lsls	r5, r2, #28
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce4a:	f040 0002 	orr.w	r0, r0, #2
 800ce4e:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce52:	d592      	bpl.n	800cd7a <HAL_UART_IRQHandler+0xf6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce54:	2008      	movs	r0, #8
 800ce56:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ce58:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800ce5c:	f040 0008 	orr.w	r0, r0, #8
 800ce60:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 800ce64:	e789      	b.n	800cd7a <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce66:	07d0      	lsls	r0, r2, #31
 800ce68:	d4e2      	bmi.n	800ce30 <HAL_UART_IRQHandler+0x1ac>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce6a:	0795      	lsls	r5, r2, #30
 800ce6c:	d516      	bpl.n	800ce9c <HAL_UART_IRQHandler+0x218>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce6e:	2002      	movs	r0, #2
 800ce70:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce72:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800ce76:	f040 0004 	orr.w	r0, r0, #4
 800ce7a:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce7e:	0750      	lsls	r0, r2, #29
 800ce80:	d4de      	bmi.n	800ce40 <HAL_UART_IRQHandler+0x1bc>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce82:	0710      	lsls	r0, r2, #28
 800ce84:	f57f af79 	bpl.w	800cd7a <HAL_UART_IRQHandler+0xf6>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ce88:	f001 0020 	and.w	r0, r1, #32
 800ce8c:	4338      	orrs	r0, r7
 800ce8e:	f43f af74 	beq.w	800cd7a <HAL_UART_IRQHandler+0xf6>
 800ce92:	e7df      	b.n	800ce54 <HAL_UART_IRQHandler+0x1d0>
            HAL_UART_ErrorCallback(huart);
 800ce94:	4620      	mov	r0, r4
 800ce96:	f7f7 f84b 	bl	8003f30 <HAL_UART_ErrorCallback>
 800ce9a:	e712      	b.n	800ccc2 <HAL_UART_IRQHandler+0x3e>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce9c:	0757      	lsls	r7, r2, #29
 800ce9e:	d4cf      	bmi.n	800ce40 <HAL_UART_IRQHandler+0x1bc>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cea0:	0710      	lsls	r0, r2, #28
 800cea2:	d4d7      	bmi.n	800ce54 <HAL_UART_IRQHandler+0x1d0>
 800cea4:	e769      	b.n	800cd7a <HAL_UART_IRQHandler+0xf6>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cea6:	068d      	lsls	r5, r1, #26
 800cea8:	d4d4      	bmi.n	800ce54 <HAL_UART_IRQHandler+0x1d0>
 800ceaa:	e766      	b.n	800cd7a <HAL_UART_IRQHandler+0xf6>
        if (huart->RxISR != NULL)
 800ceac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f43f af79 	beq.w	800cda6 <HAL_UART_IRQHandler+0x122>
          huart->RxISR(huart);
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ceb8:	6826      	ldr	r6, [r4, #0]
 800ceba:	e774      	b.n	800cda6 <HAL_UART_IRQHandler+0x122>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cebc:	0795      	lsls	r5, r2, #30
 800cebe:	f53f af56 	bmi.w	800cd6e <HAL_UART_IRQHandler+0xea>
 800cec2:	e7b9      	b.n	800ce38 <HAL_UART_IRQHandler+0x1b4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cecc:	e843 2100 	strex	r1, r2, [r3]
 800ced0:	2900      	cmp	r1, #0
 800ced2:	d1f7      	bne.n	800cec4 <HAL_UART_IRQHandler+0x240>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced4:	f103 0208 	add.w	r2, r3, #8
 800ced8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cedc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee0:	f103 0508 	add.w	r5, r3, #8
 800cee4:	e845 2100 	strex	r1, r2, [r5]
 800cee8:	2900      	cmp	r1, #0
 800ceea:	d1f3      	bne.n	800ced4 <HAL_UART_IRQHandler+0x250>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceec:	f103 0208 	add.w	r2, r3, #8
 800cef0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cef4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef8:	f103 0508 	add.w	r5, r3, #8
 800cefc:	e845 2100 	strex	r1, r2, [r5]
 800cf00:	2900      	cmp	r1, #0
 800cf02:	d1f3      	bne.n	800ceec <HAL_UART_IRQHandler+0x268>
          huart->RxState = HAL_UART_STATE_READY;
 800cf04:	2220      	movs	r2, #32
 800cf06:	67e2      	str	r2, [r4, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf08:	6621      	str	r1, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf0a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf0e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf12:	e843 2100 	strex	r1, r2, [r3]
 800cf16:	2900      	cmp	r1, #0
 800cf18:	d1f7      	bne.n	800cf0a <HAL_UART_IRQHandler+0x286>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cf1a:	f7fd fc0f 	bl	800a73c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf1e:	f8b4 5058 	ldrh.w	r5, [r4, #88]	@ 0x58
 800cf22:	e703      	b.n	800cd2c <HAL_UART_IRQHandler+0xa8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cf24:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
      if ((huart->RxXferCount > 0U)
 800cf28:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cf2c:	f8b4 0058 	ldrh.w	r0, [r4, #88]	@ 0x58
      if ((huart->RxXferCount > 0U)
 800cf30:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cf32:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800cf34:	2a00      	cmp	r2, #0
 800cf36:	f43f aec4 	beq.w	800ccc2 <HAL_UART_IRQHandler+0x3e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cf3a:	1a41      	subs	r1, r0, r1
 800cf3c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800cf3e:	2900      	cmp	r1, #0
 800cf40:	f43f aebf 	beq.w	800ccc2 <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf44:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cf48:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf4c:	e843 2000 	strex	r0, r2, [r3]
 800cf50:	2800      	cmp	r0, #0
 800cf52:	d1f7      	bne.n	800cf44 <HAL_UART_IRQHandler+0x2c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf54:	f103 0208 	add.w	r2, r3, #8
 800cf58:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf5c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf60:	f103 0508 	add.w	r5, r3, #8
 800cf64:	e845 2000 	strex	r0, r2, [r5]
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d1f3      	bne.n	800cf54 <HAL_UART_IRQHandler+0x2d0>
        huart->RxState = HAL_UART_STATE_READY;
 800cf6c:	2220      	movs	r2, #32
 800cf6e:	67e2      	str	r2, [r4, #124]	@ 0x7c
        huart->RxISR = NULL;
 800cf70:	6660      	str	r0, [r4, #100]	@ 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf72:	6620      	str	r0, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf74:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf78:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf7c:	e843 2000 	strex	r0, r2, [r3]
 800cf80:	2800      	cmp	r0, #0
 800cf82:	d1f7      	bne.n	800cf74 <HAL_UART_IRQHandler+0x2f0>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cf84:	4620      	mov	r0, r4
 800cf86:	f7ff fe7b 	bl	800cc80 <HAL_UARTEx_RxEventCallback>
 800cf8a:	e69a      	b.n	800ccc2 <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 800cf8c:	f7f6 ffd0 	bl	8003f30 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf90:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 800cf94:	e695      	b.n	800ccc2 <HAL_UART_IRQHandler+0x3e>
 800cf96:	bf00      	nop
 800cf98:	04000120 	.word	0x04000120
 800cf9c:	0800cc6d 	.word	0x0800cc6d

0800cfa0 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cfa0:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cfa2:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cfa4:	2922      	cmp	r1, #34	@ 0x22
{
 800cfa6:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800cfa8:	f8b0 305c 	ldrh.w	r3, [r0, #92]	@ 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cfac:	d005      	beq.n	800cfba <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cfae:	8b13      	ldrh	r3, [r2, #24]
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	f043 0308 	orr.w	r3, r3, #8
 800cfb6:	8313      	strh	r3, [r2, #24]
  }
}
 800cfb8:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cfba:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cfbc:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800cfbe:	400b      	ands	r3, r1
 800cfc0:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 800cfc2:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr++;
 800cfc6:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    if (huart->RxXferCount == 0U)
 800cfd0:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr++;
 800cfd4:	3201      	adds	r2, #1
    if (huart->RxXferCount == 0U)
 800cfd6:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 800cfd8:	6542      	str	r2, [r0, #84]	@ 0x54
    if (huart->RxXferCount == 0U)
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d1ec      	bne.n	800cfb8 <UART_RxISR_8BIT+0x18>
 800cfde:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cfe4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe8:	e843 2100 	strex	r1, r2, [r3]
 800cfec:	2900      	cmp	r1, #0
 800cfee:	d1f7      	bne.n	800cfe0 <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff0:	f103 0208 	add.w	r2, r3, #8
 800cff4:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cff8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cffc:	f103 0c08 	add.w	ip, r3, #8
 800d000:	e84c 2100 	strex	r1, r2, [ip]
 800d004:	2900      	cmp	r1, #0
 800d006:	d1f3      	bne.n	800cff0 <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 800d008:	2220      	movs	r2, #32
 800d00a:	67c2      	str	r2, [r0, #124]	@ 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d00c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
      huart->RxISR = NULL;
 800d00e:	6641      	str	r1, [r0, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d010:	2a01      	cmp	r2, #1
 800d012:	d112      	bne.n	800d03a <UART_RxISR_8BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d014:	6601      	str	r1, [r0, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d016:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d01a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d01e:	e843 2100 	strex	r1, r2, [r3]
 800d022:	2900      	cmp	r1, #0
 800d024:	d1f7      	bne.n	800d016 <UART_RxISR_8BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d026:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d028:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d02c:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d02e:	bf44      	itt	mi
 800d030:	2210      	movmi	r2, #16
 800d032:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d034:	f7ff fe24 	bl	800cc80 <HAL_UARTEx_RxEventCallback>
}
 800d038:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800d03a:	f7f6 ff55 	bl	8003ee8 <HAL_UART_RxCpltCallback>
}
 800d03e:	bd08      	pop	{r3, pc}

0800d040 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d040:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
  uint16_t uhMask = huart->Mask;
 800d042:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d046:	2922      	cmp	r1, #34	@ 0x22
{
 800d048:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d04a:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d04c:	d005      	beq.n	800d05a <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d04e:	8b1a      	ldrh	r2, [r3, #24]
 800d050:	b292      	uxth	r2, r2
 800d052:	f042 0208 	orr.w	r2, r2, #8
 800d056:	831a      	strh	r2, [r3, #24]
  }
}
 800d058:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d05a:	f8b3 c024 	ldrh.w	ip, [r3, #36]	@ 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800d05e:	6d41      	ldr	r1, [r0, #84]	@ 0x54
 800d060:	ea02 020c 	and.w	r2, r2, ip
 800d064:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 800d068:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr += 2U;
 800d06c:	6541      	str	r1, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 800d06e:	3a01      	subs	r2, #1
 800d070:	b292      	uxth	r2, r2
 800d072:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
    if (huart->RxXferCount == 0U)
 800d076:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
 800d07a:	b292      	uxth	r2, r2
 800d07c:	2a00      	cmp	r2, #0
 800d07e:	d1eb      	bne.n	800d058 <UART_RxISR_16BIT+0x18>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d080:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d084:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d088:	e843 2100 	strex	r1, r2, [r3]
 800d08c:	2900      	cmp	r1, #0
 800d08e:	d1f7      	bne.n	800d080 <UART_RxISR_16BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d090:	f103 0208 	add.w	r2, r3, #8
 800d094:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d098:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09c:	f103 0c08 	add.w	ip, r3, #8
 800d0a0:	e84c 2100 	strex	r1, r2, [ip]
 800d0a4:	2900      	cmp	r1, #0
 800d0a6:	d1f3      	bne.n	800d090 <UART_RxISR_16BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 800d0a8:	2220      	movs	r2, #32
 800d0aa:	67c2      	str	r2, [r0, #124]	@ 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0ac:	6e02      	ldr	r2, [r0, #96]	@ 0x60
      huart->RxISR = NULL;
 800d0ae:	6641      	str	r1, [r0, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0b0:	2a01      	cmp	r2, #1
 800d0b2:	d112      	bne.n	800d0da <UART_RxISR_16BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0b4:	6601      	str	r1, [r0, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0ba:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0be:	e843 2100 	strex	r1, r2, [r3]
 800d0c2:	2900      	cmp	r1, #0
 800d0c4:	d1f7      	bne.n	800d0b6 <UART_RxISR_16BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d0c6:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0c8:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d0cc:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d0ce:	bf44      	itt	mi
 800d0d0:	2210      	movmi	r2, #16
 800d0d2:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0d4:	f7ff fdd4 	bl	800cc80 <HAL_UARTEx_RxEventCallback>
}
 800d0d8:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800d0da:	f7f6 ff05 	bl	8003ee8 <HAL_UART_RxCpltCallback>
}
 800d0de:	bd08      	pop	{r3, pc}

0800d0e0 <UART_SetConfig>:
{
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800d0e4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0e6:	6883      	ldr	r3, [r0, #8]
 800d0e8:	6900      	ldr	r0, [r0, #16]
 800d0ea:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0ec:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0ee:	4303      	orrs	r3, r0
 800d0f0:	430b      	orrs	r3, r1
 800d0f2:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0f4:	496d      	ldr	r1, [pc, #436]	@ (800d2ac <UART_SetConfig+0x1cc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0f6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0f8:	4029      	ands	r1, r5
 800d0fa:	430b      	orrs	r3, r1
 800d0fc:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0fe:	6853      	ldr	r3, [r2, #4]
 800d100:	68e1      	ldr	r1, [r4, #12]
 800d102:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800d106:	430b      	orrs	r3, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d108:	4969      	ldr	r1, [pc, #420]	@ (800d2b0 <UART_SetConfig+0x1d0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d10a:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d10c:	428a      	cmp	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d10e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d110:	6891      	ldr	r1, [r2, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d112:	d032      	beq.n	800d17a <UART_SetConfig+0x9a>
    tmpreg |= huart->Init.OneBitSampling;
 800d114:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d116:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800d11a:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d11c:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d11e:	4965      	ldr	r1, [pc, #404]	@ (800d2b4 <UART_SetConfig+0x1d4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d120:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d122:	428a      	cmp	r2, r1
 800d124:	d115      	bne.n	800d152 <UART_SetConfig+0x72>
 800d126:	4b64      	ldr	r3, [pc, #400]	@ (800d2b8 <UART_SetConfig+0x1d8>)
 800d128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d12c:	f003 0303 	and.w	r3, r3, #3
 800d130:	2b02      	cmp	r3, #2
 800d132:	f000 8088 	beq.w	800d246 <UART_SetConfig+0x166>
 800d136:	2b03      	cmp	r3, #3
 800d138:	d072      	beq.n	800d220 <UART_SetConfig+0x140>
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d068      	beq.n	800d210 <UART_SetConfig+0x130>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d13e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d142:	f000 808d 	beq.w	800d260 <UART_SetConfig+0x180>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d146:	f7ff f943 	bl	800c3d0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800d14a:	2800      	cmp	r0, #0
 800d14c:	d16d      	bne.n	800d22a <UART_SetConfig+0x14a>
        pclk = (uint32_t) HSI_VALUE;
 800d14e:	2000      	movs	r0, #0
 800d150:	e024      	b.n	800d19c <UART_SetConfig+0xbc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d152:	4b5a      	ldr	r3, [pc, #360]	@ (800d2bc <UART_SetConfig+0x1dc>)
 800d154:	429a      	cmp	r2, r3
 800d156:	d14d      	bne.n	800d1f4 <UART_SetConfig+0x114>
 800d158:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 800d15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d160:	f003 030c 	and.w	r3, r3, #12
 800d164:	2b0c      	cmp	r3, #12
 800d166:	d818      	bhi.n	800d19a <UART_SetConfig+0xba>
 800d168:	e8df f003 	tbb	[pc, r3]
 800d16c:	17171774 	.word	0x17171774
 800d170:	17171752 	.word	0x17171752
 800d174:	1717176d 	.word	0x1717176d
 800d178:	5a          	.byte	0x5a
 800d179:	00          	.byte	0x00
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d17a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d17e:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d180:	484d      	ldr	r0, [pc, #308]	@ (800d2b8 <UART_SetConfig+0x1d8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d182:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d184:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800d188:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d18c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d190:	d05e      	beq.n	800d250 <UART_SetConfig+0x170>
 800d192:	d907      	bls.n	800d1a4 <UART_SetConfig+0xc4>
 800d194:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d198:	d00c      	beq.n	800d1b4 <UART_SetConfig+0xd4>
        ret = HAL_ERROR;
 800d19a:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800d19c:	2300      	movs	r3, #0
 800d19e:	e9c4 3319 	strd	r3, r3, [r4, #100]	@ 0x64
}
 800d1a2:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d1a4:	b30b      	cbz	r3, 800d1ea <UART_SetConfig+0x10a>
 800d1a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1aa:	d1f6      	bne.n	800d19a <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 800d1ac:	f7fe fce4 	bl	800bb78 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800d1b0:	b910      	cbnz	r0, 800d1b8 <UART_SetConfig+0xd8>
 800d1b2:	e7cc      	b.n	800d14e <UART_SetConfig+0x6e>
        pclk = (uint32_t) LSE_VALUE;
 800d1b4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d1b8:	6862      	ldr	r2, [r4, #4]
 800d1ba:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800d1be:	4283      	cmp	r3, r0
 800d1c0:	d8eb      	bhi.n	800d19a <UART_SetConfig+0xba>
 800d1c2:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800d1c6:	d8e8      	bhi.n	800d19a <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d1c8:	0851      	lsrs	r1, r2, #1
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	468c      	mov	ip, r1
 800d1ce:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	fbe0 c105 	umlal	ip, r1, r0, r5
 800d1d8:	4660      	mov	r0, ip
 800d1da:	f7f3 fef3 	bl	8000fc4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1de:	4b38      	ldr	r3, [pc, #224]	@ (800d2c0 <UART_SetConfig+0x1e0>)
 800d1e0:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d8d8      	bhi.n	800d19a <UART_SetConfig+0xba>
 800d1e8:	e02a      	b.n	800d240 <UART_SetConfig+0x160>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1ea:	f7ff f8df 	bl	800c3ac <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800d1ee:	2800      	cmp	r0, #0
 800d1f0:	d1e2      	bne.n	800d1b8 <UART_SetConfig+0xd8>
 800d1f2:	e7ac      	b.n	800d14e <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d1f4:	4b33      	ldr	r3, [pc, #204]	@ (800d2c4 <UART_SetConfig+0x1e4>)
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d1cf      	bne.n	800d19a <UART_SetConfig+0xba>
 800d1fa:	4b2f      	ldr	r3, [pc, #188]	@ (800d2b8 <UART_SetConfig+0x1d8>)
 800d1fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d200:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d204:	2b20      	cmp	r3, #32
 800d206:	d01e      	beq.n	800d246 <UART_SetConfig+0x166>
 800d208:	d808      	bhi.n	800d21c <UART_SetConfig+0x13c>
 800d20a:	b31b      	cbz	r3, 800d254 <UART_SetConfig+0x174>
 800d20c:	2b10      	cmp	r3, #16
 800d20e:	d1c4      	bne.n	800d19a <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d210:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d214:	d043      	beq.n	800d29e <UART_SetConfig+0x1be>
        pclk = HAL_RCC_GetSysClockFreq();
 800d216:	f7fe fcaf 	bl	800bb78 <HAL_RCC_GetSysClockFreq>
        break;
 800d21a:	e796      	b.n	800d14a <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d21c:	2b30      	cmp	r3, #48	@ 0x30
 800d21e:	d1bc      	bne.n	800d19a <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d220:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d224:	d038      	beq.n	800d298 <UART_SetConfig+0x1b8>
        pclk = (uint32_t) LSE_VALUE;
 800d226:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d22a:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d22c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d230:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800d234:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d238:	f1a0 0310 	sub.w	r3, r0, #16
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d8ac      	bhi.n	800d19a <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d240:	6823      	ldr	r3, [r4, #0]
 800d242:	60d8      	str	r0, [r3, #12]
 800d244:	e783      	b.n	800d14e <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d246:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d24a:	d023      	beq.n	800d294 <UART_SetConfig+0x1b4>
        pclk = (uint32_t) HSI_VALUE;
 800d24c:	481e      	ldr	r0, [pc, #120]	@ (800d2c8 <UART_SetConfig+0x1e8>)
 800d24e:	e7ec      	b.n	800d22a <UART_SetConfig+0x14a>
        pclk = (uint32_t) HSI_VALUE;
 800d250:	481d      	ldr	r0, [pc, #116]	@ (800d2c8 <UART_SetConfig+0x1e8>)
 800d252:	e7b1      	b.n	800d1b8 <UART_SetConfig+0xd8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d254:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d258:	d024      	beq.n	800d2a4 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d25a:	f7ff f8a7 	bl	800c3ac <HAL_RCC_GetPCLK1Freq>
        break;
 800d25e:	e774      	b.n	800d14a <UART_SetConfig+0x6a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d260:	f7ff f8b6 	bl	800c3d0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800d264:	2800      	cmp	r0, #0
 800d266:	f43f af72 	beq.w	800d14e <UART_SetConfig+0x6e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d26a:	0043      	lsls	r3, r0, #1
 800d26c:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d26e:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d272:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800d276:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d27a:	f1a3 0210 	sub.w	r2, r3, #16
 800d27e:	428a      	cmp	r2, r1
 800d280:	d88b      	bhi.n	800d19a <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d282:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800d286:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d288:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d28a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800d28e:	4313      	orrs	r3, r2
 800d290:	60cb      	str	r3, [r1, #12]
 800d292:	e75c      	b.n	800d14e <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d294:	4b0d      	ldr	r3, [pc, #52]	@ (800d2cc <UART_SetConfig+0x1ec>)
 800d296:	e7e9      	b.n	800d26c <UART_SetConfig+0x18c>
 800d298:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800d29c:	e7e6      	b.n	800d26c <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 800d29e:	f7fe fc6b 	bl	800bb78 <HAL_RCC_GetSysClockFreq>
        break;
 800d2a2:	e7df      	b.n	800d264 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2a4:	f7ff f882 	bl	800c3ac <HAL_RCC_GetPCLK1Freq>
        break;
 800d2a8:	e7dc      	b.n	800d264 <UART_SetConfig+0x184>
 800d2aa:	bf00      	nop
 800d2ac:	efff69f3 	.word	0xefff69f3
 800d2b0:	40008000 	.word	0x40008000
 800d2b4:	40013800 	.word	0x40013800
 800d2b8:	40021000 	.word	0x40021000
 800d2bc:	40004400 	.word	0x40004400
 800d2c0:	000ffcff 	.word	0x000ffcff
 800d2c4:	40004800 	.word	0x40004800
 800d2c8:	00f42400 	.word	0x00f42400
 800d2cc:	01e84800 	.word	0x01e84800

0800d2d0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d2d0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d2d2:	07da      	lsls	r2, r3, #31
{
 800d2d4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d2d6:	d506      	bpl.n	800d2e6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d2d8:	6801      	ldr	r1, [r0, #0]
 800d2da:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d2dc:	684a      	ldr	r2, [r1, #4]
 800d2de:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800d2e2:	4322      	orrs	r2, r4
 800d2e4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d2e6:	079c      	lsls	r4, r3, #30
 800d2e8:	d506      	bpl.n	800d2f8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d2ea:	6801      	ldr	r1, [r0, #0]
 800d2ec:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800d2ee:	684a      	ldr	r2, [r1, #4]
 800d2f0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d2f4:	4322      	orrs	r2, r4
 800d2f6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d2f8:	0759      	lsls	r1, r3, #29
 800d2fa:	d506      	bpl.n	800d30a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d2fc:	6801      	ldr	r1, [r0, #0]
 800d2fe:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800d300:	684a      	ldr	r2, [r1, #4]
 800d302:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d306:	4322      	orrs	r2, r4
 800d308:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d30a:	071a      	lsls	r2, r3, #28
 800d30c:	d506      	bpl.n	800d31c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d30e:	6801      	ldr	r1, [r0, #0]
 800d310:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800d312:	684a      	ldr	r2, [r1, #4]
 800d314:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d318:	4322      	orrs	r2, r4
 800d31a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d31c:	06dc      	lsls	r4, r3, #27
 800d31e:	d506      	bpl.n	800d32e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d320:	6801      	ldr	r1, [r0, #0]
 800d322:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800d324:	688a      	ldr	r2, [r1, #8]
 800d326:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d32a:	4322      	orrs	r2, r4
 800d32c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d32e:	0699      	lsls	r1, r3, #26
 800d330:	d506      	bpl.n	800d340 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d332:	6801      	ldr	r1, [r0, #0]
 800d334:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800d336:	688a      	ldr	r2, [r1, #8]
 800d338:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d33c:	4322      	orrs	r2, r4
 800d33e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d340:	065a      	lsls	r2, r3, #25
 800d342:	d509      	bpl.n	800d358 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d344:	6801      	ldr	r1, [r0, #0]
 800d346:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800d348:	684a      	ldr	r2, [r1, #4]
 800d34a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800d34e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d350:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d354:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d356:	d00b      	beq.n	800d370 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d358:	061b      	lsls	r3, r3, #24
 800d35a:	d506      	bpl.n	800d36a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d35c:	6802      	ldr	r2, [r0, #0]
 800d35e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800d360:	6853      	ldr	r3, [r2, #4]
 800d362:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800d366:	430b      	orrs	r3, r1
 800d368:	6053      	str	r3, [r2, #4]
}
 800d36a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d36e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d370:	684a      	ldr	r2, [r1, #4]
 800d372:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800d374:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800d378:	4322      	orrs	r2, r4
 800d37a:	604a      	str	r2, [r1, #4]
 800d37c:	e7ec      	b.n	800d358 <UART_AdvFeatureConfig+0x88>
 800d37e:	bf00      	nop

0800d380 <UART_WaitOnFlagUntilTimeout>:
{
 800d380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d384:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d388:	6805      	ldr	r5, [r0, #0]
{
 800d38a:	4681      	mov	r9, r0
 800d38c:	460f      	mov	r7, r1
 800d38e:	4616      	mov	r6, r2
 800d390:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d392:	e002      	b.n	800d39a <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 800d394:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d398:	d10a      	bne.n	800d3b0 <UART_WaitOnFlagUntilTimeout+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d39a:	69ec      	ldr	r4, [r5, #28]
 800d39c:	ea37 0404 	bics.w	r4, r7, r4
 800d3a0:	bf0c      	ite	eq
 800d3a2:	2401      	moveq	r4, #1
 800d3a4:	2400      	movne	r4, #0
 800d3a6:	42b4      	cmp	r4, r6
 800d3a8:	d0f4      	beq.n	800d394 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 800d3aa:	2000      	movs	r0, #0
}
 800d3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3b0:	f7fc faf4 	bl	800999c <HAL_GetTick>
 800d3b4:	eba0 000a 	sub.w	r0, r0, sl
 800d3b8:	4540      	cmp	r0, r8
 800d3ba:	d831      	bhi.n	800d420 <UART_WaitOnFlagUntilTimeout+0xa0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d3bc:	f8d9 5000 	ldr.w	r5, [r9]
 800d3c0:	462b      	mov	r3, r5
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3c2:	f1b8 0f00 	cmp.w	r8, #0
 800d3c6:	d02d      	beq.n	800d424 <UART_WaitOnFlagUntilTimeout+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d3c8:	682a      	ldr	r2, [r5, #0]
 800d3ca:	0751      	lsls	r1, r2, #29
 800d3cc:	d5e5      	bpl.n	800d39a <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d3ce:	69ea      	ldr	r2, [r5, #28]
 800d3d0:	0512      	lsls	r2, r2, #20
 800d3d2:	d5e2      	bpl.n	800d39a <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d3d8:	622a      	str	r2, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3da:	e855 2f00 	ldrex	r2, [r5]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d3de:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e2:	e845 2100 	strex	r1, r2, [r5]
 800d3e6:	b139      	cbz	r1, 800d3f8 <UART_WaitOnFlagUntilTimeout+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e8:	e853 2f00 	ldrex	r2, [r3]
 800d3ec:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f0:	e843 2100 	strex	r1, r2, [r3]
 800d3f4:	2900      	cmp	r1, #0
 800d3f6:	d1f7      	bne.n	800d3e8 <UART_WaitOnFlagUntilTimeout+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f8:	f103 0208 	add.w	r2, r3, #8
 800d3fc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d400:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d404:	f103 0008 	add.w	r0, r3, #8
 800d408:	e840 2100 	strex	r1, r2, [r0]
 800d40c:	2900      	cmp	r1, #0
 800d40e:	d1f3      	bne.n	800d3f8 <UART_WaitOnFlagUntilTimeout+0x78>
          huart->gState = HAL_UART_STATE_READY;
 800d410:	2320      	movs	r3, #32
 800d412:	f8c9 3078 	str.w	r3, [r9, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d416:	f8c9 307c 	str.w	r3, [r9, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d41a:	f8c9 3080 	str.w	r3, [r9, #128]	@ 0x80
          return HAL_TIMEOUT;
 800d41e:	e01a      	b.n	800d456 <UART_WaitOnFlagUntilTimeout+0xd6>
 800d420:	f8d9 3000 	ldr.w	r3, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d424:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d428:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d42c:	e843 2100 	strex	r1, r2, [r3]
 800d430:	2900      	cmp	r1, #0
 800d432:	d1f7      	bne.n	800d424 <UART_WaitOnFlagUntilTimeout+0xa4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d434:	f103 0208 	add.w	r2, r3, #8
 800d438:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d43c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d440:	f103 0008 	add.w	r0, r3, #8
 800d444:	e840 2100 	strex	r1, r2, [r0]
 800d448:	2900      	cmp	r1, #0
 800d44a:	d1f3      	bne.n	800d434 <UART_WaitOnFlagUntilTimeout+0xb4>
        huart->gState = HAL_UART_STATE_READY;
 800d44c:	2320      	movs	r3, #32
 800d44e:	f8c9 3078 	str.w	r3, [r9, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d452:	f8c9 307c 	str.w	r3, [r9, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800d456:	2300      	movs	r3, #0
 800d458:	f889 3074 	strb.w	r3, [r9, #116]	@ 0x74
        return HAL_TIMEOUT;
 800d45c:	2003      	movs	r0, #3
 800d45e:	e7a5      	b.n	800d3ac <UART_WaitOnFlagUntilTimeout+0x2c>

0800d460 <HAL_UART_Transmit>:
{
 800d460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d464:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800d466:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800d468:	2820      	cmp	r0, #32
{
 800d46a:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 800d46c:	d148      	bne.n	800d500 <HAL_UART_Transmit+0xa0>
    if ((pData == NULL) || (Size == 0U))
 800d46e:	460d      	mov	r5, r1
 800d470:	2900      	cmp	r1, #0
 800d472:	d041      	beq.n	800d4f8 <HAL_UART_Transmit+0x98>
 800d474:	4617      	mov	r7, r2
 800d476:	2a00      	cmp	r2, #0
 800d478:	d03e      	beq.n	800d4f8 <HAL_UART_Transmit+0x98>
 800d47a:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800d47c:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 800d480:	2b01      	cmp	r3, #1
 800d482:	d03d      	beq.n	800d500 <HAL_UART_Transmit+0xa0>
 800d484:	2301      	movs	r3, #1
 800d486:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d48a:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d48e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d490:	f8c4 8080 	str.w	r8, [r4, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d494:	67a3      	str	r3, [r4, #120]	@ 0x78
    tickstart = HAL_GetTick();
 800d496:	f7fc fa81 	bl	800999c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d49a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800d49c:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800d4a4:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    tickstart = HAL_GetTick();
 800d4a8:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4aa:	d02d      	beq.n	800d508 <HAL_UART_Transmit+0xa8>
    while (huart->TxXferCount > 0U)
 800d4ac:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
    __HAL_UNLOCK(huart);
 800d4b0:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800d4b2:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800d4b4:	f884 2074 	strb.w	r2, [r4, #116]	@ 0x74
    while (huart->TxXferCount > 0U)
 800d4b8:	b96b      	cbnz	r3, 800d4d6 <HAL_UART_Transmit+0x76>
 800d4ba:	e02f      	b.n	800d51c <HAL_UART_Transmit+0xbc>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d4bc:	f815 2b01 	ldrb.w	r2, [r5], #1
 800d4c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 800d4c2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 800d4c6:	3a01      	subs	r2, #1
 800d4c8:	b292      	uxth	r2, r2
 800d4ca:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800d4ce:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	b313      	cbz	r3, 800d51c <HAL_UART_Transmit+0xbc>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d4d6:	9600      	str	r6, [sp, #0]
 800d4d8:	463b      	mov	r3, r7
 800d4da:	2200      	movs	r2, #0
 800d4dc:	2180      	movs	r1, #128	@ 0x80
 800d4de:	4620      	mov	r0, r4
 800d4e0:	f7ff ff4e 	bl	800d380 <UART_WaitOnFlagUntilTimeout>
 800d4e4:	b9b0      	cbnz	r0, 800d514 <HAL_UART_Transmit+0xb4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d4e6:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800d4e8:	2d00      	cmp	r5, #0
 800d4ea:	d1e7      	bne.n	800d4bc <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d4ec:	f838 2b02 	ldrh.w	r2, [r8], #2
 800d4f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d4f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d4f6:	e7e4      	b.n	800d4c2 <HAL_UART_Transmit+0x62>
      return  HAL_ERROR;
 800d4f8:	2001      	movs	r0, #1
}
 800d4fa:	b002      	add	sp, #8
 800d4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(huart);
 800d500:	2002      	movs	r0, #2
}
 800d502:	b002      	add	sp, #8
 800d504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d508:	6923      	ldr	r3, [r4, #16]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d1ce      	bne.n	800d4ac <HAL_UART_Transmit+0x4c>
 800d50e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800d510:	461d      	mov	r5, r3
 800d512:	e7cb      	b.n	800d4ac <HAL_UART_Transmit+0x4c>
        return HAL_TIMEOUT;
 800d514:	2003      	movs	r0, #3
}
 800d516:	b002      	add	sp, #8
 800d518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d51c:	9600      	str	r6, [sp, #0]
 800d51e:	463b      	mov	r3, r7
 800d520:	2200      	movs	r2, #0
 800d522:	2140      	movs	r1, #64	@ 0x40
 800d524:	4620      	mov	r0, r4
 800d526:	f7ff ff2b 	bl	800d380 <UART_WaitOnFlagUntilTimeout>
 800d52a:	2800      	cmp	r0, #0
 800d52c:	d1f2      	bne.n	800d514 <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 800d52e:	2320      	movs	r3, #32
 800d530:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_OK;
 800d532:	e7e2      	b.n	800d4fa <HAL_UART_Transmit+0x9a>

0800d534 <UART_CheckIdleState>:
{
 800d534:	b570      	push	{r4, r5, r6, lr}
 800d536:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d538:	2600      	movs	r6, #0
{
 800d53a:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d53c:	f8c0 6080 	str.w	r6, [r0, #128]	@ 0x80
  tickstart = HAL_GetTick();
 800d540:	f7fc fa2c 	bl	800999c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d544:	6823      	ldr	r3, [r4, #0]
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800d54a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d54c:	d40c      	bmi.n	800d568 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	075b      	lsls	r3, r3, #29
 800d552:	d418      	bmi.n	800d586 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d554:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800d556:	2220      	movs	r2, #32
  return HAL_OK;
 800d558:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800d55a:	67a2      	str	r2, [r4, #120]	@ 0x78
  __HAL_UNLOCK(huart);
 800d55c:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800d560:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d562:	6623      	str	r3, [r4, #96]	@ 0x60
}
 800d564:	b002      	add	sp, #8
 800d566:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d568:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d56c:	9300      	str	r3, [sp, #0]
 800d56e:	4632      	mov	r2, r6
 800d570:	4603      	mov	r3, r0
 800d572:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d576:	4620      	mov	r0, r4
 800d578:	f7ff ff02 	bl	800d380 <UART_WaitOnFlagUntilTimeout>
 800d57c:	b978      	cbnz	r0, 800d59e <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d57e:	6823      	ldr	r3, [r4, #0]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	075b      	lsls	r3, r3, #29
 800d584:	d5e6      	bpl.n	800d554 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d586:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	2200      	movs	r2, #0
 800d58e:	462b      	mov	r3, r5
 800d590:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d594:	4620      	mov	r0, r4
 800d596:	f7ff fef3 	bl	800d380 <UART_WaitOnFlagUntilTimeout>
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d0da      	beq.n	800d554 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800d59e:	2003      	movs	r0, #3
}
 800d5a0:	b002      	add	sp, #8
 800d5a2:	bd70      	pop	{r4, r5, r6, pc}

0800d5a4 <HAL_UART_Init>:
  if (huart == NULL)
 800d5a4:	b370      	cbz	r0, 800d604 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800d5a6:	6f83      	ldr	r3, [r0, #120]	@ 0x78
{
 800d5a8:	b510      	push	{r4, lr}
 800d5aa:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800d5ac:	b32b      	cbz	r3, 800d5fa <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 800d5ae:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d5b0:	2324      	movs	r3, #36	@ 0x24
 800d5b2:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UART_DISABLE(huart);
 800d5b4:	6813      	ldr	r3, [r2, #0]
 800d5b6:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d5ba:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800d5bc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d5be:	f7ff fd8f 	bl	800d0e0 <UART_SetConfig>
 800d5c2:	2801      	cmp	r0, #1
 800d5c4:	d017      	beq.n	800d5f6 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d5c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d5c8:	b98b      	cbnz	r3, 800d5ee <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	685a      	ldr	r2, [r3, #4]
 800d5ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d5d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d5d4:	689a      	ldr	r2, [r3, #8]
 800d5d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d5da:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800d5e2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800d5e4:	601a      	str	r2, [r3, #0]
}
 800d5e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800d5ea:	f7ff bfa3 	b.w	800d534 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	f7ff fe6e 	bl	800d2d0 <UART_AdvFeatureConfig>
 800d5f4:	e7e9      	b.n	800d5ca <HAL_UART_Init+0x26>
}
 800d5f6:	2001      	movs	r0, #1
 800d5f8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800d5fa:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    HAL_UART_MspInit(huart);
 800d5fe:	f7f9 fcab 	bl	8006f58 <HAL_UART_MspInit>
 800d602:	e7d4      	b.n	800d5ae <HAL_UART_Init+0xa>
}
 800d604:	2001      	movs	r0, #1
 800d606:	4770      	bx	lr

0800d608 <UART_Start_Receive_IT>:
{
 800d608:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 800d60a:	6884      	ldr	r4, [r0, #8]
  huart->pRxBuffPtr  = pData;
 800d60c:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->RxISR       = NULL;
 800d60e:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 800d610:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
  huart->RxXferSize  = Size;
 800d614:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->RxXferCount = Size;
 800d618:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800d61c:	6643      	str	r3, [r0, #100]	@ 0x64
  UART_MASK_COMPUTATION(huart);
 800d61e:	d04e      	beq.n	800d6be <UART_Start_Receive_IT+0xb6>
 800d620:	bb74      	cbnz	r4, 800d680 <UART_Start_Receive_IT+0x78>
 800d622:	6903      	ldr	r3, [r0, #16]
 800d624:	2b00      	cmp	r3, #0
 800d626:	bf14      	ite	ne
 800d628:	237f      	movne	r3, #127	@ 0x7f
 800d62a:	23ff      	moveq	r3, #255	@ 0xff
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d62c:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d62e:	2122      	movs	r1, #34	@ 0x22
 800d630:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d632:	f8c0 4080 	str.w	r4, [r0, #128]	@ 0x80
  UART_MASK_COMPUTATION(huart);
 800d636:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d63a:	67c1      	str	r1, [r0, #124]	@ 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d63c:	f102 0308 	add.w	r3, r2, #8
 800d640:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d644:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d648:	f102 0408 	add.w	r4, r2, #8
 800d64c:	e844 3100 	strex	r1, r3, [r4]
 800d650:	2900      	cmp	r1, #0
 800d652:	d1f3      	bne.n	800d63c <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d654:	6884      	ldr	r4, [r0, #8]
 800d656:	6903      	ldr	r3, [r0, #16]
 800d658:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 800d65c:	d019      	beq.n	800d692 <UART_Start_Receive_IT+0x8a>
 800d65e:	4c1e      	ldr	r4, [pc, #120]	@ (800d6d8 <UART_Start_Receive_IT+0xd0>)
 800d660:	6644      	str	r4, [r0, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 800d662:	f880 1074 	strb.w	r1, [r0, #116]	@ 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d666:	b1cb      	cbz	r3, 800d69c <UART_Start_Receive_IT+0x94>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d668:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d66c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d670:	e842 3100 	strex	r1, r3, [r2]
 800d674:	2900      	cmp	r1, #0
 800d676:	d1f7      	bne.n	800d668 <UART_Start_Receive_IT+0x60>
}
 800d678:	2000      	movs	r0, #0
 800d67a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d67e:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800d680:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 800d684:	d1d2      	bne.n	800d62c <UART_Start_Receive_IT+0x24>
 800d686:	6903      	ldr	r3, [r0, #16]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	bf14      	ite	ne
 800d68c:	233f      	movne	r3, #63	@ 0x3f
 800d68e:	237f      	moveq	r3, #127	@ 0x7f
 800d690:	e7cc      	b.n	800d62c <UART_Start_Receive_IT+0x24>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d692:	b9db      	cbnz	r3, 800d6cc <UART_Start_Receive_IT+0xc4>
 800d694:	4911      	ldr	r1, [pc, #68]	@ (800d6dc <UART_Start_Receive_IT+0xd4>)
 800d696:	6641      	str	r1, [r0, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 800d698:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d69c:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800d6a0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a4:	e842 3100 	strex	r1, r3, [r2]
 800d6a8:	2900      	cmp	r1, #0
 800d6aa:	d0e5      	beq.n	800d678 <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ac:	e852 3f00 	ldrex	r3, [r2]
 800d6b0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b4:	e842 3100 	strex	r1, r3, [r2]
 800d6b8:	2900      	cmp	r1, #0
 800d6ba:	d1ef      	bne.n	800d69c <UART_Start_Receive_IT+0x94>
 800d6bc:	e7dc      	b.n	800d678 <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 800d6be:	6902      	ldr	r2, [r0, #16]
 800d6c0:	2a00      	cmp	r2, #0
 800d6c2:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800d6c6:	bf18      	it	ne
 800d6c8:	23ff      	movne	r3, #255	@ 0xff
 800d6ca:	e7af      	b.n	800d62c <UART_Start_Receive_IT+0x24>
 800d6cc:	4b02      	ldr	r3, [pc, #8]	@ (800d6d8 <UART_Start_Receive_IT+0xd0>)
 800d6ce:	6643      	str	r3, [r0, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 800d6d0:	f880 1074 	strb.w	r1, [r0, #116]	@ 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d6d4:	e7c8      	b.n	800d668 <UART_Start_Receive_IT+0x60>
 800d6d6:	bf00      	nop
 800d6d8:	0800cfa1 	.word	0x0800cfa1
 800d6dc:	0800d041 	.word	0x0800d041

0800d6e0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800d6e0:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800d6e2:	2b20      	cmp	r3, #32
 800d6e4:	d120      	bne.n	800d728 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 800d6e6:	b1e9      	cbz	r1, 800d724 <HAL_UART_Receive_IT+0x44>
 800d6e8:	b1e2      	cbz	r2, 800d724 <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 800d6ea:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d01a      	beq.n	800d728 <HAL_UART_Receive_IT+0x48>
{
 800d6f2:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d6f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d72c <HAL_UART_Receive_IT+0x4c>)
 800d6f6:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 800d6f8:	2501      	movs	r5, #1
 800d6fa:	f880 5074 	strb.w	r5, [r0, #116]	@ 0x74
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d6fe:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d700:	f04f 0500 	mov.w	r5, #0
 800d704:	6605      	str	r5, [r0, #96]	@ 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d706:	d00a      	beq.n	800d71e <HAL_UART_Receive_IT+0x3e>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d708:	6863      	ldr	r3, [r4, #4]
 800d70a:	021b      	lsls	r3, r3, #8
 800d70c:	d507      	bpl.n	800d71e <HAL_UART_Receive_IT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70e:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d712:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d716:	e844 3500 	strex	r5, r3, [r4]
 800d71a:	2d00      	cmp	r5, #0
 800d71c:	d1f7      	bne.n	800d70e <HAL_UART_Receive_IT+0x2e>
}
 800d71e:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 800d720:	f7ff bf72 	b.w	800d608 <UART_Start_Receive_IT>
      return HAL_ERROR;
 800d724:	2001      	movs	r0, #1
 800d726:	4770      	bx	lr
    __HAL_LOCK(huart);
 800d728:	2002      	movs	r0, #2
}
 800d72a:	4770      	bx	lr
 800d72c:	40008000 	.word	0x40008000

0800d730 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d730:	4770      	bx	lr
 800d732:	bf00      	nop

0800d734 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d734:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800d736:	f000 fa77 	bl	800dc28 <vTaskStartScheduler>
  
  return osOK;
}
 800d73a:	2000      	movs	r0, #0
 800d73c:	bd08      	pop	{r3, pc}
 800d73e:	bf00      	nop

0800d740 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d740:	b510      	push	{r4, lr}
 800d742:	4684      	mov	ip, r0
 800d744:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d746:	f8bc 2010 	ldrh.w	r2, [ip, #16]
 800d74a:	f8dc 1000 	ldr.w	r1, [ip]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d74e:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d752:	6840      	ldr	r0, [r0, #4]
{
 800d754:	b084      	sub	sp, #16
  if (priority != osPriorityError) {
 800d756:	f1bc 0f84 	cmp.w	ip, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 800d75a:	bf14      	ite	ne
 800d75c:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d760:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d762:	9400      	str	r4, [sp, #0]
 800d764:	ac03      	add	r4, sp, #12
 800d766:	9401      	str	r4, [sp, #4]
 800d768:	f000 f89e 	bl	800d8a8 <xTaskCreate>
 800d76c:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d76e:	bf0c      	ite	eq
 800d770:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800d772:	2000      	movne	r0, #0
}
 800d774:	b004      	add	sp, #16
 800d776:	bd10      	pop	{r4, pc}

0800d778 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d778:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d77a:	2801      	cmp	r0, #1
 800d77c:	bf38      	it	cc
 800d77e:	2001      	movcc	r0, #1
 800d780:	f000 fca2 	bl	800e0c8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d784:	2000      	movs	r0, #0
 800d786:	bd08      	pop	{r3, pc}

0800d788 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d788:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d78c:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d790:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d792:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d796:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d79a:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop

0800d7a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop

0800d7a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d7a8:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d7aa:	6803      	ldr	r3, [r0, #0]
{
 800d7ac:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d7ae:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 800d7b0:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d7b2:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d7b6:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d7b8:	6091      	str	r1, [r2, #8]
}
 800d7ba:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 800d7be:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d7c0:	6003      	str	r3, [r0, #0]
}
 800d7c2:	4770      	bx	lr

0800d7c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d7c4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d7c6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d7c8:	1c6b      	adds	r3, r5, #1
 800d7ca:	d010      	beq.n	800d7ee <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d7cc:	f100 0308 	add.w	r3, r0, #8
 800d7d0:	461c      	mov	r4, r3
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	42aa      	cmp	r2, r5
 800d7d8:	d9fa      	bls.n	800d7d0 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d7da:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800d7dc:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800d7de:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d7e0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d7e2:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d7e4:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800d7e6:	6108      	str	r0, [r1, #16]
}
 800d7e8:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 800d7ea:	6002      	str	r2, [r0, #0]
}
 800d7ec:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800d7ee:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800d7f0:	6863      	ldr	r3, [r4, #4]
 800d7f2:	e7f2      	b.n	800d7da <vListInsert+0x16>

0800d7f4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d7f4:	6903      	ldr	r3, [r0, #16]
{
 800d7f6:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d7f8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d7fc:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d7fe:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 800d800:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d802:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d804:	bf08      	it	eq
 800d806:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800d808:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800d80a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 800d80e:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 800d810:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 800d812:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d814:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800d816:	6818      	ldr	r0, [r3, #0]
}
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop

0800d81c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d81e:	4b1b      	ldr	r3, [pc, #108]	@ (800d88c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d820:	4e1b      	ldr	r6, [pc, #108]	@ (800d890 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800d822:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d824:	6833      	ldr	r3, [r6, #0]
{
 800d826:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d828:	1d18      	adds	r0, r3, #4
{
 800d82a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d82c:	f7ff ffe2 	bl	800d7f4 <uxListRemove>
 800d830:	b940      	cbnz	r0, 800d844 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d832:	6833      	ldr	r3, [r6, #0]
 800d834:	4917      	ldr	r1, [pc, #92]	@ (800d894 <prvAddCurrentTaskToDelayedList+0x78>)
 800d836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d838:	2201      	movs	r2, #1
 800d83a:	409a      	lsls	r2, r3
 800d83c:	680b      	ldr	r3, [r1, #0]
 800d83e:	ea23 0302 	bic.w	r3, r3, r2
 800d842:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d844:	1c6b      	adds	r3, r5, #1
 800d846:	d017      	beq.n	800d878 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d848:	6833      	ldr	r3, [r6, #0]
 800d84a:	1964      	adds	r4, r4, r5
 800d84c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800d84e:	d307      	bcc.n	800d860 <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d850:	4b11      	ldr	r3, [pc, #68]	@ (800d898 <prvAddCurrentTaskToDelayedList+0x7c>)
 800d852:	6818      	ldr	r0, [r3, #0]
 800d854:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d856:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d85a:	3104      	adds	r1, #4
 800d85c:	f7ff bfb2 	b.w	800d7c4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d860:	4b0e      	ldr	r3, [pc, #56]	@ (800d89c <prvAddCurrentTaskToDelayedList+0x80>)
 800d862:	6818      	ldr	r0, [r3, #0]
 800d864:	6831      	ldr	r1, [r6, #0]
 800d866:	3104      	adds	r1, #4
 800d868:	f7ff ffac 	bl	800d7c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d86c:	4b0c      	ldr	r3, [pc, #48]	@ (800d8a0 <prvAddCurrentTaskToDelayedList+0x84>)
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800d872:	bf88      	it	hi
 800d874:	601c      	strhi	r4, [r3, #0]
}
 800d876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d878:	2f00      	cmp	r7, #0
 800d87a:	d0e5      	beq.n	800d848 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d87c:	6831      	ldr	r1, [r6, #0]
 800d87e:	4809      	ldr	r0, [pc, #36]	@ (800d8a4 <prvAddCurrentTaskToDelayedList+0x88>)
}
 800d880:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d884:	3104      	adds	r1, #4
 800d886:	f7ff bf8f 	b.w	800d7a8 <vListInsertEnd>
 800d88a:	bf00      	nop
 800d88c:	20001bb0 	.word	0x20001bb0
 800d890:	20001cb4 	.word	0x20001cb4
 800d894:	20001bac 	.word	0x20001bac
 800d898:	20001bf8 	.word	0x20001bf8
 800d89c:	20001bfc 	.word	0x20001bfc
 800d8a0:	20001b94 	.word	0x20001b94
 800d8a4:	20001bb8 	.word	0x20001bb8

0800d8a8 <xTaskCreate>:
	{
 800d8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d8ac:	0095      	lsls	r5, r2, #2
	{
 800d8ae:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d8b0:	4628      	mov	r0, r5
	{
 800d8b2:	460f      	mov	r7, r1
 800d8b4:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d8b6:	f000 ff5f 	bl	800e778 <pvPortMalloc>
			if( pxStack != NULL )
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	f000 8087 	beq.w	800d9ce <xTaskCreate+0x126>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d8c0:	4606      	mov	r6, r0
 800d8c2:	20a0      	movs	r0, #160	@ 0xa0
 800d8c4:	f000 ff58 	bl	800e778 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d8c8:	4604      	mov	r4, r0
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d07c      	beq.n	800d9c8 <xTaskCreate+0x120>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d8ce:	3d04      	subs	r5, #4
 800d8d0:	4435      	add	r5, r6
					pxNewTCB->pxStack = pxStack;
 800d8d2:	6306      	str	r6, [r0, #48]	@ 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d8d4:	f025 0607 	bic.w	r6, r5, #7
	if( pcName != NULL )
 800d8d8:	2f00      	cmp	r7, #0
 800d8da:	f000 808b 	beq.w	800d9f4 <xTaskCreate+0x14c>
 800d8de:	f107 3cff 	add.w	ip, r7, #4294967295
 800d8e2:	f100 0333 	add.w	r3, r0, #51	@ 0x33
 800d8e6:	370f      	adds	r7, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d8e8:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 800d8ec:	f803 5f01 	strb.w	r5, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800d8f0:	b10d      	cbz	r5, 800d8f6 <xTaskCreate+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8f2:	45bc      	cmp	ip, r7
 800d8f4:	d1f8      	bne.n	800d8e8 <xTaskCreate+0x40>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8fc:	9d08      	ldr	r5, [sp, #32]
 800d8fe:	2d06      	cmp	r5, #6
 800d900:	bf28      	it	cs
 800d902:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 800d904:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d908:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800d90a:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d90c:	6465      	str	r5, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d90e:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 800d910:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d914:	f7ff ff44 	bl	800d7a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d918:	f104 0018 	add.w	r0, r4, #24
 800d91c:	f7ff ff40 	bl	800d7a0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d920:	f1c5 0507 	rsb	r5, r5, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d924:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d926:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800d928:	f8c4 a098 	str.w	sl, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d92c:	4651      	mov	r1, sl
 800d92e:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d930:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d932:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d934:	f884 a09c 	strb.w	sl, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d938:	f003 f8ac 	bl	8010a94 <memset>
 800d93c:	4b41      	ldr	r3, [pc, #260]	@ (800da44 <xTaskCreate+0x19c>)
 800d93e:	6523      	str	r3, [r4, #80]	@ 0x50
 800d940:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 800d944:	33d0      	adds	r3, #208	@ 0xd0
 800d946:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d948:	464a      	mov	r2, r9
 800d94a:	4641      	mov	r1, r8
 800d94c:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d94e:	6565      	str	r5, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d950:	f000 fd08 	bl	800e364 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 800d954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d956:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800d958:	b103      	cbz	r3, 800d95c <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d95a:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 800d95c:	f000 fd2a 	bl	800e3b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800d960:	4a39      	ldr	r2, [pc, #228]	@ (800da48 <xTaskCreate+0x1a0>)
		if( pxCurrentTCB == NULL )
 800d962:	4d3a      	ldr	r5, [pc, #232]	@ (800da4c <xTaskCreate+0x1a4>)
		uxCurrentNumberOfTasks++;
 800d964:	6813      	ldr	r3, [r2, #0]
 800d966:	3301      	adds	r3, #1
 800d968:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d96a:	682b      	ldr	r3, [r5, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d038      	beq.n	800d9e2 <xTaskCreate+0x13a>
			if( xSchedulerRunning == pdFALSE )
 800d970:	4e37      	ldr	r6, [pc, #220]	@ (800da50 <xTaskCreate+0x1a8>)
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d972:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800d974:	6833      	ldr	r3, [r6, #0]
 800d976:	b373      	cbz	r3, 800d9d6 <xTaskCreate+0x12e>
 800d978:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 800da74 <xTaskCreate+0x1cc>
		prvAddTaskToReadyList( pxNewTCB );
 800d97c:	4a35      	ldr	r2, [pc, #212]	@ (800da54 <xTaskCreate+0x1ac>)
 800d97e:	4639      	mov	r1, r7
		uxTaskNumber++;
 800d980:	4f35      	ldr	r7, [pc, #212]	@ (800da58 <xTaskCreate+0x1b0>)
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	3301      	adds	r3, #1
 800d986:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800d988:	6817      	ldr	r7, [r2, #0]
 800d98a:	2301      	movs	r3, #1
 800d98c:	4083      	lsls	r3, r0
 800d98e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d992:	433b      	orrs	r3, r7
 800d994:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800d998:	6013      	str	r3, [r2, #0]
 800d99a:	f7ff ff05 	bl	800d7a8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800d99e:	f000 fd2b 	bl	800e3f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800d9a2:	6833      	ldr	r3, [r6, #0]
 800d9a4:	b173      	cbz	r3, 800d9c4 <xTaskCreate+0x11c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d9a6:	682a      	ldr	r2, [r5, #0]
 800d9a8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d9aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d209      	bcs.n	800d9c4 <xTaskCreate+0x11c>
			taskYIELD_IF_USING_PREEMPTION();
 800d9b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d9b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800d9c4:	2001      	movs	r0, #1
		return xReturn;
 800d9c6:	e004      	b.n	800d9d2 <xTaskCreate+0x12a>
					vPortFree( pxStack );
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f000 ff69 	bl	800e8a0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d9ce:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800d9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d9d6:	682b      	ldr	r3, [r5, #0]
 800d9d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9da:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 800d9dc:	bf98      	it	ls
 800d9de:	602c      	strls	r4, [r5, #0]
 800d9e0:	e7ca      	b.n	800d978 <xTaskCreate+0xd0>
			pxCurrentTCB = pxNewTCB;
 800d9e2:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9e4:	6813      	ldr	r3, [r2, #0]
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d007      	beq.n	800d9fa <xTaskCreate+0x152>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d9ea:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d9ec:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 800da74 <xTaskCreate+0x1cc>
 800d9f0:	4e17      	ldr	r6, [pc, #92]	@ (800da50 <xTaskCreate+0x1a8>)
 800d9f2:	e7c3      	b.n	800d97c <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d9f4:	f880 7034 	strb.w	r7, [r0, #52]	@ 0x34
 800d9f8:	e780      	b.n	800d8fc <xTaskCreate+0x54>
 800d9fa:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 800da74 <xTaskCreate+0x1cc>
 800d9fe:	4646      	mov	r6, r8
 800da00:	f108 098c 	add.w	r9, r8, #140	@ 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800da04:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da06:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800da08:	f7ff febe 	bl	800d788 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da0c:	454e      	cmp	r6, r9
 800da0e:	d1f9      	bne.n	800da04 <xTaskCreate+0x15c>
	vListInitialise( &xDelayedTaskList1 );
 800da10:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800da78 <xTaskCreate+0x1d0>
	vListInitialise( &xDelayedTaskList2 );
 800da14:	4e11      	ldr	r6, [pc, #68]	@ (800da5c <xTaskCreate+0x1b4>)
	vListInitialise( &xDelayedTaskList1 );
 800da16:	4648      	mov	r0, r9
 800da18:	f7ff feb6 	bl	800d788 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800da1c:	4630      	mov	r0, r6
 800da1e:	f7ff feb3 	bl	800d788 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800da22:	480f      	ldr	r0, [pc, #60]	@ (800da60 <xTaskCreate+0x1b8>)
 800da24:	f7ff feb0 	bl	800d788 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800da28:	480e      	ldr	r0, [pc, #56]	@ (800da64 <xTaskCreate+0x1bc>)
 800da2a:	f7ff fead 	bl	800d788 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800da2e:	480e      	ldr	r0, [pc, #56]	@ (800da68 <xTaskCreate+0x1c0>)
 800da30:	f7ff feaa 	bl	800d788 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800da34:	4b0d      	ldr	r3, [pc, #52]	@ (800da6c <xTaskCreate+0x1c4>)
		prvAddTaskToReadyList( pxNewTCB );
 800da36:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 800da38:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da3c:	4b0c      	ldr	r3, [pc, #48]	@ (800da70 <xTaskCreate+0x1c8>)
 800da3e:	601e      	str	r6, [r3, #0]
 800da40:	4e03      	ldr	r6, [pc, #12]	@ (800da50 <xTaskCreate+0x1a8>)
}
 800da42:	e79b      	b.n	800d97c <xTaskCreate+0xd4>
 800da44:	20005cf4 	.word	0x20005cf4
 800da48:	20001bb4 	.word	0x20001bb4
 800da4c:	20001cb4 	.word	0x20001cb4
 800da50:	20001ba8 	.word	0x20001ba8
 800da54:	20001bac 	.word	0x20001bac
 800da58:	20001b98 	.word	0x20001b98
 800da5c:	20001c00 	.word	0x20001c00
 800da60:	20001be4 	.word	0x20001be4
 800da64:	20001bd0 	.word	0x20001bd0
 800da68:	20001bb8 	.word	0x20001bb8
 800da6c:	20001bfc 	.word	0x20001bfc
 800da70:	20001bf8 	.word	0x20001bf8
 800da74:	20001c28 	.word	0x20001c28
 800da78:	20001c14 	.word	0x20001c14

0800da7c <vTaskDelete>:
	{
 800da7c:	b570      	push	{r4, r5, r6, lr}
 800da7e:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800da80:	4d37      	ldr	r5, [pc, #220]	@ (800db60 <vTaskDelete+0xe4>)
		taskENTER_CRITICAL();
 800da82:	f000 fc97 	bl	800e3b4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800da86:	2c00      	cmp	r4, #0
 800da88:	d051      	beq.n	800db2e <vTaskDelete+0xb2>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da8a:	1d26      	adds	r6, r4, #4
 800da8c:	4630      	mov	r0, r6
 800da8e:	f7ff feb1 	bl	800d7f4 <uxListRemove>
 800da92:	b938      	cbnz	r0, 800daa4 <vTaskDelete+0x28>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800da94:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800da96:	4933      	ldr	r1, [pc, #204]	@ (800db64 <vTaskDelete+0xe8>)
 800da98:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	58cb      	ldr	r3, [r1, r3]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d032      	beq.n	800db0a <vTaskDelete+0x8e>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800daa4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800daa6:	b11b      	cbz	r3, 800dab0 <vTaskDelete+0x34>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800daa8:	f104 0018 	add.w	r0, r4, #24
 800daac:	f7ff fea2 	bl	800d7f4 <uxListRemove>
			uxTaskNumber++;
 800dab0:	4a2d      	ldr	r2, [pc, #180]	@ (800db68 <vTaskDelete+0xec>)
 800dab2:	6813      	ldr	r3, [r2, #0]
 800dab4:	3301      	adds	r3, #1
 800dab6:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 800dab8:	682b      	ldr	r3, [r5, #0]
 800daba:	42a3      	cmp	r3, r4
 800dabc:	d02e      	beq.n	800db1c <vTaskDelete+0xa0>
				--uxCurrentNumberOfTasks;
 800dabe:	4a2b      	ldr	r2, [pc, #172]	@ (800db6c <vTaskDelete+0xf0>)
 800dac0:	6813      	ldr	r3, [r2, #0]
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dac2:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
				--uxCurrentNumberOfTasks;
 800dac6:	3b01      	subs	r3, #1
 800dac8:	6013      	str	r3, [r2, #0]
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800daca:	f003 f847 	bl	8010b5c <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800dace:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800dad0:	f000 fee6 	bl	800e8a0 <vPortFree>
			vPortFree( pxTCB );
 800dad4:	4620      	mov	r0, r4
 800dad6:	f000 fee3 	bl	800e8a0 <vPortFree>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dada:	4b25      	ldr	r3, [pc, #148]	@ (800db70 <vTaskDelete+0xf4>)
 800dadc:	681a      	ldr	r2, [r3, #0]
 800dade:	6812      	ldr	r2, [r2, #0]
 800dae0:	b172      	cbz	r2, 800db00 <vTaskDelete+0x84>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dae2:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dae4:	4b23      	ldr	r3, [pc, #140]	@ (800db74 <vTaskDelete+0xf8>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dae6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dae8:	68d2      	ldr	r2, [r2, #12]
 800daea:	6852      	ldr	r2, [r2, #4]
 800daec:	601a      	str	r2, [r3, #0]
		taskEXIT_CRITICAL();
 800daee:	f000 fc83 	bl	800e3f8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800daf2:	4b21      	ldr	r3, [pc, #132]	@ (800db78 <vTaskDelete+0xfc>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	b113      	cbz	r3, 800dafe <vTaskDelete+0x82>
			if( pxTCB == pxCurrentTCB )
 800daf8:	682b      	ldr	r3, [r5, #0]
 800dafa:	42a3      	cmp	r3, r4
 800dafc:	d019      	beq.n	800db32 <vTaskDelete+0xb6>
	}
 800dafe:	bd70      	pop	{r4, r5, r6, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 800db00:	4b1c      	ldr	r3, [pc, #112]	@ (800db74 <vTaskDelete+0xf8>)
 800db02:	f04f 32ff 	mov.w	r2, #4294967295
 800db06:	601a      	str	r2, [r3, #0]
 800db08:	e7f1      	b.n	800daee <vTaskDelete+0x72>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800db0a:	491c      	ldr	r1, [pc, #112]	@ (800db7c <vTaskDelete+0x100>)
 800db0c:	2301      	movs	r3, #1
 800db0e:	fa03 f202 	lsl.w	r2, r3, r2
 800db12:	680b      	ldr	r3, [r1, #0]
 800db14:	ea23 0302 	bic.w	r3, r3, r2
 800db18:	600b      	str	r3, [r1, #0]
 800db1a:	e7c3      	b.n	800daa4 <vTaskDelete+0x28>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800db1c:	4818      	ldr	r0, [pc, #96]	@ (800db80 <vTaskDelete+0x104>)
 800db1e:	4631      	mov	r1, r6
 800db20:	f7ff fe42 	bl	800d7a8 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 800db24:	4a17      	ldr	r2, [pc, #92]	@ (800db84 <vTaskDelete+0x108>)
 800db26:	6813      	ldr	r3, [r2, #0]
 800db28:	3301      	adds	r3, #1
 800db2a:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 800db2c:	e7df      	b.n	800daee <vTaskDelete+0x72>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800db2e:	682c      	ldr	r4, [r5, #0]
 800db30:	e7ab      	b.n	800da8a <vTaskDelete+0xe>
				configASSERT( uxSchedulerSuspended == 0 );
 800db32:	4b15      	ldr	r3, [pc, #84]	@ (800db88 <vTaskDelete+0x10c>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	b143      	cbz	r3, 800db4a <vTaskDelete+0xce>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800db38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db3c:	f383 8811 	msr	BASEPRI, r3
 800db40:	f3bf 8f6f 	isb	sy
 800db44:	f3bf 8f4f 	dsb	sy
 800db48:	e7fe      	b.n	800db48 <vTaskDelete+0xcc>
				portYIELD_WITHIN_API();
 800db4a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800db4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db52:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800db56:	f3bf 8f4f 	dsb	sy
 800db5a:	f3bf 8f6f 	isb	sy
	}
 800db5e:	bd70      	pop	{r4, r5, r6, pc}
 800db60:	20001cb4 	.word	0x20001cb4
 800db64:	20001c28 	.word	0x20001c28
 800db68:	20001b98 	.word	0x20001b98
 800db6c:	20001bb4 	.word	0x20001bb4
 800db70:	20001bfc 	.word	0x20001bfc
 800db74:	20001b94 	.word	0x20001b94
 800db78:	20001ba8 	.word	0x20001ba8
 800db7c:	20001bac 	.word	0x20001bac
 800db80:	20001bd0 	.word	0x20001bd0
 800db84:	20001bcc 	.word	0x20001bcc
 800db88:	20001b8c 	.word	0x20001b8c

0800db8c <vTaskResume>:
	{
 800db8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 800db8e:	b178      	cbz	r0, 800dbb0 <vTaskResume+0x24>
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800db90:	4d20      	ldr	r5, [pc, #128]	@ (800dc14 <vTaskResume+0x88>)
 800db92:	682b      	ldr	r3, [r5, #0]
 800db94:	4283      	cmp	r3, r0
 800db96:	4604      	mov	r4, r0
 800db98:	d009      	beq.n	800dbae <vTaskResume+0x22>
			taskENTER_CRITICAL();
 800db9a:	f000 fc0b 	bl	800e3b4 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db9e:	4b1e      	ldr	r3, [pc, #120]	@ (800dc18 <vTaskResume+0x8c>)
 800dba0:	6962      	ldr	r2, [r4, #20]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d00d      	beq.n	800dbc2 <vTaskResume+0x36>
	}
 800dba6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			taskEXIT_CRITICAL();
 800dbaa:	f000 bc25 	b.w	800e3f8 <vPortExitCritical>
	}
 800dbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb4:	f383 8811 	msr	BASEPRI, r3
 800dbb8:	f3bf 8f6f 	isb	sy
 800dbbc:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 800dbc0:	e7fe      	b.n	800dbc0 <vTaskResume+0x34>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800dbc2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800dbc4:	4a15      	ldr	r2, [pc, #84]	@ (800dc1c <vTaskResume+0x90>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d0ed      	beq.n	800dba6 <vTaskResume+0x1a>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d1eb      	bne.n	800dba6 <vTaskResume+0x1a>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800dbce:	1d26      	adds	r6, r4, #4
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	f7ff fe0f 	bl	800d7f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dbd6:	4812      	ldr	r0, [pc, #72]	@ (800dc20 <vTaskResume+0x94>)
 800dbd8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dbda:	6807      	ldr	r7, [r0, #0]
 800dbdc:	2201      	movs	r2, #1
 800dbde:	4631      	mov	r1, r6
 800dbe0:	409a      	lsls	r2, r3
 800dbe2:	4e10      	ldr	r6, [pc, #64]	@ (800dc24 <vTaskResume+0x98>)
 800dbe4:	433a      	orrs	r2, r7
 800dbe6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dbea:	6002      	str	r2, [r0, #0]
 800dbec:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 800dbf0:	f7ff fdda 	bl	800d7a8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbf4:	682b      	ldr	r3, [r5, #0]
 800dbf6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dbf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d3d3      	bcc.n	800dba6 <vTaskResume+0x1a>
						taskYIELD_IF_USING_PREEMPTION();
 800dbfe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dc02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc06:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	f3bf 8f6f 	isb	sy
 800dc12:	e7c8      	b.n	800dba6 <vTaskResume+0x1a>
 800dc14:	20001cb4 	.word	0x20001cb4
 800dc18:	20001bb8 	.word	0x20001bb8
 800dc1c:	20001be4 	.word	0x20001be4
 800dc20:	20001bac 	.word	0x20001bac
 800dc24:	20001c28 	.word	0x20001c28

0800dc28 <vTaskStartScheduler>:
{
 800dc28:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800dc2a:	4b1a      	ldr	r3, [pc, #104]	@ (800dc94 <vTaskStartScheduler+0x6c>)
 800dc2c:	491a      	ldr	r1, [pc, #104]	@ (800dc98 <vTaskStartScheduler+0x70>)
 800dc2e:	481b      	ldr	r0, [pc, #108]	@ (800dc9c <vTaskStartScheduler+0x74>)
{
 800dc30:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 800dc32:	2400      	movs	r4, #0
 800dc34:	e9cd 4300 	strd	r4, r3, [sp]
 800dc38:	2280      	movs	r2, #128	@ 0x80
 800dc3a:	4623      	mov	r3, r4
 800dc3c:	f7ff fe34 	bl	800d8a8 <xTaskCreate>
	if( xReturn == pdPASS )
 800dc40:	2801      	cmp	r0, #1
 800dc42:	d00c      	beq.n	800dc5e <vTaskStartScheduler+0x36>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc44:	3001      	adds	r0, #1
 800dc46:	d001      	beq.n	800dc4c <vTaskStartScheduler+0x24>
}
 800dc48:	b003      	add	sp, #12
 800dc4a:	bd30      	pop	{r4, r5, pc}
 800dc4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc50:	f383 8811 	msr	BASEPRI, r3
 800dc54:	f3bf 8f6f 	isb	sy
 800dc58:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc5c:	e7fe      	b.n	800dc5c <vTaskStartScheduler+0x34>
 800dc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc62:	f383 8811 	msr	BASEPRI, r3
 800dc66:	f3bf 8f6f 	isb	sy
 800dc6a:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc6e:	4b0c      	ldr	r3, [pc, #48]	@ (800dca0 <vTaskStartScheduler+0x78>)
 800dc70:	4a0c      	ldr	r2, [pc, #48]	@ (800dca4 <vTaskStartScheduler+0x7c>)
 800dc72:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800dc74:	490c      	ldr	r1, [pc, #48]	@ (800dca8 <vTaskStartScheduler+0x80>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc76:	334c      	adds	r3, #76	@ 0x4c
 800dc78:	6013      	str	r3, [r2, #0]
		xSchedulerRunning = pdTRUE;
 800dc7a:	4a0c      	ldr	r2, [pc, #48]	@ (800dcac <vTaskStartScheduler+0x84>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc7c:	4b0c      	ldr	r3, [pc, #48]	@ (800dcb0 <vTaskStartScheduler+0x88>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800dc7e:	f04f 35ff 	mov.w	r5, #4294967295
 800dc82:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800dc84:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc86:	601c      	str	r4, [r3, #0]
}
 800dc88:	b003      	add	sp, #12
 800dc8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 800dc8e:	f000 bcbf 	b.w	800e610 <xPortStartScheduler>
 800dc92:	bf00      	nop
 800dc94:	20001b90 	.word	0x20001b90
 800dc98:	080167fc 	.word	0x080167fc
 800dc9c:	0800df9d 	.word	0x0800df9d
 800dca0:	20001cb4 	.word	0x20001cb4
 800dca4:	200001b4 	.word	0x200001b4
 800dca8:	20001b94 	.word	0x20001b94
 800dcac:	20001ba8 	.word	0x20001ba8
 800dcb0:	20001bb0 	.word	0x20001bb0

0800dcb4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800dcb4:	4a02      	ldr	r2, [pc, #8]	@ (800dcc0 <vTaskSuspendAll+0xc>)
 800dcb6:	6813      	ldr	r3, [r2, #0]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	6013      	str	r3, [r2, #0]
}
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	20001b8c 	.word	0x20001b8c

0800dcc4 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800dcc4:	4a09      	ldr	r2, [pc, #36]	@ (800dcec <vTaskStepTick+0x28>)
 800dcc6:	490a      	ldr	r1, [pc, #40]	@ (800dcf0 <vTaskStepTick+0x2c>)
 800dcc8:	6813      	ldr	r3, [r2, #0]
 800dcca:	6809      	ldr	r1, [r1, #0]
 800dccc:	4403      	add	r3, r0
 800dcce:	428b      	cmp	r3, r1
 800dcd0:	d908      	bls.n	800dce4 <vTaskStepTick+0x20>
 800dcd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd6:	f383 8811 	msr	BASEPRI, r3
 800dcda:	f3bf 8f6f 	isb	sy
 800dcde:	f3bf 8f4f 	dsb	sy
 800dce2:	e7fe      	b.n	800dce2 <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 800dce4:	6813      	ldr	r3, [r2, #0]
 800dce6:	4403      	add	r3, r0
 800dce8:	6013      	str	r3, [r2, #0]
	}
 800dcea:	4770      	bx	lr
 800dcec:	20001bb0 	.word	0x20001bb0
 800dcf0:	20001b94 	.word	0x20001b94

0800dcf4 <xTaskIncrementTick>:
{
 800dcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcf8:	4b4e      	ldr	r3, [pc, #312]	@ (800de34 <xTaskIncrementTick+0x140>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
{
 800dcfc:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d148      	bne.n	800dd94 <xTaskIncrementTick+0xa0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd02:	4b4d      	ldr	r3, [pc, #308]	@ (800de38 <xTaskIncrementTick+0x144>)
 800dd04:	681d      	ldr	r5, [r3, #0]
 800dd06:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800dd08:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd0a:	2d00      	cmp	r5, #0
 800dd0c:	d04b      	beq.n	800dda6 <xTaskIncrementTick+0xb2>
 800dd0e:	4b4b      	ldr	r3, [pc, #300]	@ (800de3c <xTaskIncrementTick+0x148>)
 800dd10:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd12:	9b01      	ldr	r3, [sp, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	429d      	cmp	r5, r3
 800dd18:	d352      	bcc.n	800ddc0 <xTaskIncrementTick+0xcc>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd1a:	4e49      	ldr	r6, [pc, #292]	@ (800de40 <xTaskIncrementTick+0x14c>)
 800dd1c:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 800de58 <xTaskIncrementTick+0x164>
 800dd20:	6833      	ldr	r3, [r6, #0]
 800dd22:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 800de5c <xTaskIncrementTick+0x168>
 800dd26:	681c      	ldr	r4, [r3, #0]
 800dd28:	2c00      	cmp	r4, #0
 800dd2a:	d075      	beq.n	800de18 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList( pxTCB );
 800dd2c:	4f45      	ldr	r7, [pc, #276]	@ (800de44 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 800dd2e:	2400      	movs	r4, #0
 800dd30:	e022      	b.n	800dd78 <xTaskIncrementTick+0x84>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd32:	f7ff fd5f 	bl	800d7f4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd36:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd3a:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd3e:	b10a      	cbz	r2, 800dd44 <xTaskIncrementTick+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd40:	f7ff fd58 	bl	800d7f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd44:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	4082      	lsls	r2, r0
 800dd4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dd52:	431a      	orrs	r2, r3
 800dd54:	4651      	mov	r1, sl
 800dd56:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800dd5a:	603a      	str	r2, [r7, #0]
 800dd5c:	f7ff fd24 	bl	800d7a8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd60:	f8d9 3000 	ldr.w	r3, [r9]
 800dd64:	f8db 202c 	ldr.w	r2, [fp, #44]	@ 0x2c
 800dd68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	bf28      	it	cs
 800dd6e:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd70:	6833      	ldr	r3, [r6, #0]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d04f      	beq.n	800de18 <xTaskIncrementTick+0x124>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd78:	6833      	ldr	r3, [r6, #0]
 800dd7a:	68db      	ldr	r3, [r3, #12]
 800dd7c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd80:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd84:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 800dd88:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd8a:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800dd8c:	d2d1      	bcs.n	800dd32 <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
 800dd8e:	9b01      	ldr	r3, [sp, #4]
 800dd90:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd92:	e01a      	b.n	800ddca <xTaskIncrementTick+0xd6>
		++xPendedTicks;
 800dd94:	4a2c      	ldr	r2, [pc, #176]	@ (800de48 <xTaskIncrementTick+0x154>)
 800dd96:	6813      	ldr	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800dd98:	2400      	movs	r4, #0
		++xPendedTicks;
 800dd9a:	3301      	adds	r3, #1
}
 800dd9c:	4620      	mov	r0, r4
		++xPendedTicks;
 800dd9e:	6013      	str	r3, [r2, #0]
}
 800dda0:	b003      	add	sp, #12
 800dda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800dda6:	4b26      	ldr	r3, [pc, #152]	@ (800de40 <xTaskIncrementTick+0x14c>)
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	6812      	ldr	r2, [r2, #0]
 800ddac:	b30a      	cbz	r2, 800ddf2 <xTaskIncrementTick+0xfe>
 800ddae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb2:	f383 8811 	msr	BASEPRI, r3
 800ddb6:	f3bf 8f6f 	isb	sy
 800ddba:	f3bf 8f4f 	dsb	sy
 800ddbe:	e7fe      	b.n	800ddbe <xTaskIncrementTick+0xca>
 800ddc0:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 800de58 <xTaskIncrementTick+0x164>
 800ddc4:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 800de5c <xTaskIncrementTick+0x168>
BaseType_t xSwitchRequired = pdFALSE;
 800ddc8:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ddca:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 800ddce:	491f      	ldr	r1, [pc, #124]	@ (800de4c <xTaskIncrementTick+0x158>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ddd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ddd6:	009b      	lsls	r3, r3, #2
 800ddd8:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 800dddc:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 800ddde:	2a02      	cmp	r2, #2
 800dde0:	bf28      	it	cs
 800dde2:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	bf18      	it	ne
 800dde8:	2401      	movne	r4, #1
}
 800ddea:	4620      	mov	r0, r4
 800ddec:	b003      	add	sp, #12
 800ddee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800ddf2:	4a17      	ldr	r2, [pc, #92]	@ (800de50 <xTaskIncrementTick+0x15c>)
 800ddf4:	6818      	ldr	r0, [r3, #0]
 800ddf6:	6811      	ldr	r1, [r2, #0]
 800ddf8:	6019      	str	r1, [r3, #0]
 800ddfa:	4916      	ldr	r1, [pc, #88]	@ (800de54 <xTaskIncrementTick+0x160>)
 800ddfc:	6010      	str	r0, [r2, #0]
 800ddfe:	680a      	ldr	r2, [r1, #0]
 800de00:	3201      	adds	r2, #1
 800de02:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	6812      	ldr	r2, [r2, #0]
 800de08:	b95a      	cbnz	r2, 800de22 <xTaskIncrementTick+0x12e>
		xNextTaskUnblockTime = portMAX_DELAY;
 800de0a:	4b0c      	ldr	r3, [pc, #48]	@ (800de3c <xTaskIncrementTick+0x148>)
 800de0c:	9301      	str	r3, [sp, #4]
 800de0e:	461a      	mov	r2, r3
 800de10:	f04f 33ff 	mov.w	r3, #4294967295
 800de14:	6013      	str	r3, [r2, #0]
 800de16:	e77c      	b.n	800dd12 <xTaskIncrementTick+0x1e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de18:	9a01      	ldr	r2, [sp, #4]
 800de1a:	f04f 33ff 	mov.w	r3, #4294967295
 800de1e:	6013      	str	r3, [r2, #0]
					break;
 800de20:	e7d3      	b.n	800ddca <xTaskIncrementTick+0xd6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de22:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de24:	4a05      	ldr	r2, [pc, #20]	@ (800de3c <xTaskIncrementTick+0x148>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de26:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de28:	9201      	str	r2, [sp, #4]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	6013      	str	r3, [r2, #0]
}
 800de30:	e76f      	b.n	800dd12 <xTaskIncrementTick+0x1e>
 800de32:	bf00      	nop
 800de34:	20001b8c 	.word	0x20001b8c
 800de38:	20001bb0 	.word	0x20001bb0
 800de3c:	20001b94 	.word	0x20001b94
 800de40:	20001bfc 	.word	0x20001bfc
 800de44:	20001bac 	.word	0x20001bac
 800de48:	20001ba4 	.word	0x20001ba4
 800de4c:	20001ba0 	.word	0x20001ba0
 800de50:	20001bf8 	.word	0x20001bf8
 800de54:	20001b9c 	.word	0x20001b9c
 800de58:	20001c28 	.word	0x20001c28
 800de5c:	20001cb4 	.word	0x20001cb4

0800de60 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800de60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 800de64:	f000 faa6 	bl	800e3b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800de68:	4b3a      	ldr	r3, [pc, #232]	@ (800df54 <xTaskResumeAll.part.0+0xf4>)
 800de6a:	681a      	ldr	r2, [r3, #0]
 800de6c:	3a01      	subs	r2, #1
 800de6e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d160      	bne.n	800df38 <xTaskResumeAll.part.0+0xd8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de76:	4b38      	ldr	r3, [pc, #224]	@ (800df58 <xTaskResumeAll.part.0+0xf8>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d05c      	beq.n	800df38 <xTaskResumeAll.part.0+0xd8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de7e:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 800df70 <xTaskResumeAll.part.0+0x110>
 800de82:	f8db 3000 	ldr.w	r3, [fp]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d061      	beq.n	800df4e <xTaskResumeAll.part.0+0xee>
 800de8a:	4d34      	ldr	r5, [pc, #208]	@ (800df5c <xTaskResumeAll.part.0+0xfc>)
 800de8c:	f8df 80e4 	ldr.w	r8, [pc, #228]	@ 800df74 <xTaskResumeAll.part.0+0x114>
 800de90:	4f33      	ldr	r7, [pc, #204]	@ (800df60 <xTaskResumeAll.part.0+0x100>)
 800de92:	f8df 90e4 	ldr.w	r9, [pc, #228]	@ 800df78 <xTaskResumeAll.part.0+0x118>
					prvAddTaskToReadyList( pxTCB );
 800de96:	2601      	movs	r6, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de98:	f8db 300c 	ldr.w	r3, [fp, #12]
 800de9c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dea0:	f10a 0404 	add.w	r4, sl, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dea4:	f10a 0018 	add.w	r0, sl, #24
 800dea8:	f7ff fca4 	bl	800d7f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800deac:	4620      	mov	r0, r4
 800deae:	f7ff fca1 	bl	800d7f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800deb2:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 800deb6:	682a      	ldr	r2, [r5, #0]
 800deb8:	fa06 f300 	lsl.w	r3, r6, r0
 800debc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dec0:	4313      	orrs	r3, r2
 800dec2:	4621      	mov	r1, r4
 800dec4:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800dec8:	602b      	str	r3, [r5, #0]
 800deca:	f7ff fc6d 	bl	800d7a8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	f8da 202c 	ldr.w	r2, [sl, #44]	@ 0x2c
 800ded4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded6:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800ded8:	bf28      	it	cs
 800deda:	f8c9 6000 	strcs.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dede:	f8db 3000 	ldr.w	r3, [fp]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d1d8      	bne.n	800de98 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dee6:	4b1f      	ldr	r3, [pc, #124]	@ (800df64 <xTaskResumeAll.part.0+0x104>)
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	6812      	ldr	r2, [r2, #0]
 800deec:	b352      	cbz	r2, 800df44 <xTaskResumeAll.part.0+0xe4>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deee:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800def0:	4b1d      	ldr	r3, [pc, #116]	@ (800df68 <xTaskResumeAll.part.0+0x108>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800def2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800def4:	68d2      	ldr	r2, [r2, #12]
 800def6:	6852      	ldr	r2, [r2, #4]
 800def8:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800defa:	4e1c      	ldr	r6, [pc, #112]	@ (800df6c <xTaskResumeAll.part.0+0x10c>)
 800defc:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800defe:	b144      	cbz	r4, 800df12 <xTaskResumeAll.part.0+0xb2>
								xYieldPending = pdTRUE;
 800df00:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 800df02:	f7ff fef7 	bl	800dcf4 <xTaskIncrementTick>
 800df06:	b108      	cbz	r0, 800df0c <xTaskResumeAll.part.0+0xac>
								xYieldPending = pdTRUE;
 800df08:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df0c:	3c01      	subs	r4, #1
 800df0e:	d1f8      	bne.n	800df02 <xTaskResumeAll.part.0+0xa2>
						xPendedTicks = 0;
 800df10:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800df12:	f8d9 3000 	ldr.w	r3, [r9]
 800df16:	b17b      	cbz	r3, 800df38 <xTaskResumeAll.part.0+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
 800df18:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800df1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df20:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800df24:	f3bf 8f4f 	dsb	sy
 800df28:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800df2c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800df2e:	f000 fa63 	bl	800e3f8 <vPortExitCritical>
}
 800df32:	4620      	mov	r0, r4
 800df34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 800df38:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800df3a:	f000 fa5d 	bl	800e3f8 <vPortExitCritical>
}
 800df3e:	4620      	mov	r0, r4
 800df40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 800df44:	4b08      	ldr	r3, [pc, #32]	@ (800df68 <xTaskResumeAll.part.0+0x108>)
 800df46:	f04f 32ff 	mov.w	r2, #4294967295
 800df4a:	601a      	str	r2, [r3, #0]
 800df4c:	e7d5      	b.n	800defa <xTaskResumeAll.part.0+0x9a>
 800df4e:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 800df78 <xTaskResumeAll.part.0+0x118>
 800df52:	e7d2      	b.n	800defa <xTaskResumeAll.part.0+0x9a>
 800df54:	20001b8c 	.word	0x20001b8c
 800df58:	20001bb4 	.word	0x20001bb4
 800df5c:	20001bac 	.word	0x20001bac
 800df60:	20001cb4 	.word	0x20001cb4
 800df64:	20001bfc 	.word	0x20001bfc
 800df68:	20001b94 	.word	0x20001b94
 800df6c:	20001ba4 	.word	0x20001ba4
 800df70:	20001be4 	.word	0x20001be4
 800df74:	20001c28 	.word	0x20001c28
 800df78:	20001ba0 	.word	0x20001ba0

0800df7c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800df7c:	4b06      	ldr	r3, [pc, #24]	@ (800df98 <xTaskResumeAll+0x1c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	b943      	cbnz	r3, 800df94 <xTaskResumeAll+0x18>
 800df82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df86:	f383 8811 	msr	BASEPRI, r3
 800df8a:	f3bf 8f6f 	isb	sy
 800df8e:	f3bf 8f4f 	dsb	sy
 800df92:	e7fe      	b.n	800df92 <xTaskResumeAll+0x16>
 800df94:	f7ff bf64 	b.w	800de60 <xTaskResumeAll.part.0>
 800df98:	20001b8c 	.word	0x20001b8c

0800df9c <prvIdleTask>:
{
 800df9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa0:	4d40      	ldr	r5, [pc, #256]	@ (800e0a4 <prvIdleTask+0x108>)
 800dfa2:	4f41      	ldr	r7, [pc, #260]	@ (800e0a8 <prvIdleTask+0x10c>)
 800dfa4:	4e41      	ldr	r6, [pc, #260]	@ (800e0ac <prvIdleTask+0x110>)
 800dfa6:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 800e0bc <prvIdleTask+0x120>
 800dfaa:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 800e0c0 <prvIdleTask+0x124>
 800dfae:	f8df a114 	ldr.w	sl, [pc, #276]	@ 800e0c4 <prvIdleTask+0x128>
				taskYIELD();
 800dfb2:	f04f 2be0 	mov.w	fp, #3758153728	@ 0xe000e000
 800dfb6:	e018      	b.n	800dfea <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
 800dfb8:	f000 f9fc 	bl	800e3b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfc0:	1d20      	adds	r0, r4, #4
 800dfc2:	f7ff fc17 	bl	800d7f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dfc6:	6833      	ldr	r3, [r6, #0]
 800dfc8:	3b01      	subs	r3, #1
 800dfca:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dfcc:	682b      	ldr	r3, [r5, #0]
 800dfce:	3b01      	subs	r3, #1
 800dfd0:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 800dfd2:	f000 fa11 	bl	800e3f8 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dfd6:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800dfda:	f002 fdbf 	bl	8010b5c <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800dfde:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800dfe0:	f000 fc5e 	bl	800e8a0 <vPortFree>
			vPortFree( pxTCB );
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f000 fc5b 	bl	800e8a0 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dfea:	682b      	ldr	r3, [r5, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d1e3      	bne.n	800dfb8 <prvIdleTask+0x1c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dff0:	f8d8 3000 	ldr.w	r3, [r8]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d907      	bls.n	800e008 <prvIdleTask+0x6c>
				taskYIELD();
 800dff8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800dffc:	f8cb 3d04 	str.w	r3, [fp, #3332]	@ 0xd04
 800e000:	f3bf 8f4f 	dsb	sy
 800e004:	f3bf 8f6f 	isb	sy
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800e008:	f8d9 3000 	ldr.w	r3, [r9]
 800e00c:	2b01      	cmp	r3, #1
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800e00e:	f8da 3000 	ldr.w	r3, [sl]
 800e012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800e014:	d904      	bls.n	800e020 <prvIdleTask+0x84>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800e016:	2b00      	cmp	r3, #0
 800e018:	d1e7      	bne.n	800dfea <prvIdleTask+0x4e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800e01a:	f8d8 3000 	ldr.w	r3, [r8]
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e01e:	e7e4      	b.n	800dfea <prvIdleTask+0x4e>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800e020:	2b00      	cmp	r3, #0
 800e022:	d1e2      	bne.n	800dfea <prvIdleTask+0x4e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800e024:	f8d8 3000 	ldr.w	r3, [r8]
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d8de      	bhi.n	800dfea <prvIdleTask+0x4e>
			xReturn = xNextTaskUnblockTime - xTickCount;
 800e02c:	4920      	ldr	r1, [pc, #128]	@ (800e0b0 <prvIdleTask+0x114>)
 800e02e:	4821      	ldr	r0, [pc, #132]	@ (800e0b4 <prvIdleTask+0x118>)
 800e030:	680b      	ldr	r3, [r1, #0]
 800e032:	6802      	ldr	r2, [r0, #0]
 800e034:	1a9b      	subs	r3, r3, r2
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e036:	2b01      	cmp	r3, #1
 800e038:	d9d7      	bls.n	800dfea <prvIdleTask+0x4e>
	++uxSchedulerSuspended;
 800e03a:	4a1f      	ldr	r2, [pc, #124]	@ (800e0b8 <prvIdleTask+0x11c>)
 800e03c:	6813      	ldr	r3, [r2, #0]
 800e03e:	3301      	adds	r3, #1
 800e040:	6013      	str	r3, [r2, #0]
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800e042:	680a      	ldr	r2, [r1, #0]
 800e044:	6803      	ldr	r3, [r0, #0]
 800e046:	429a      	cmp	r2, r3
 800e048:	d323      	bcc.n	800e092 <prvIdleTask+0xf6>
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800e04a:	f8d9 3000 	ldr.w	r3, [r9]
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800e04e:	f8da 2000 	ldr.w	r2, [sl]
 800e052:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e054:	b922      	cbnz	r2, 800e060 <prvIdleTask+0xc4>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800e056:	f8d8 2000 	ldr.w	r2, [r8]
 800e05a:	4313      	orrs	r3, r2
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d90e      	bls.n	800e07e <prvIdleTask+0xe2>
	configASSERT( uxSchedulerSuspended );
 800e060:	4b15      	ldr	r3, [pc, #84]	@ (800e0b8 <prvIdleTask+0x11c>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	b943      	cbnz	r3, 800e078 <prvIdleTask+0xdc>
 800e066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e06a:	f383 8811 	msr	BASEPRI, r3
 800e06e:	f3bf 8f6f 	isb	sy
 800e072:	f3bf 8f4f 	dsb	sy
 800e076:	e7fe      	b.n	800e076 <prvIdleTask+0xda>
 800e078:	f7ff fef2 	bl	800de60 <xTaskResumeAll.part.0>
 800e07c:	e7b5      	b.n	800dfea <prvIdleTask+0x4e>
			xReturn = xNextTaskUnblockTime - xTickCount;
 800e07e:	4b0c      	ldr	r3, [pc, #48]	@ (800e0b0 <prvIdleTask+0x114>)
 800e080:	6818      	ldr	r0, [r3, #0]
 800e082:	4b0c      	ldr	r3, [pc, #48]	@ (800e0b4 <prvIdleTask+0x118>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	1ac0      	subs	r0, r0, r3
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e088:	2801      	cmp	r0, #1
 800e08a:	d9e9      	bls.n	800e060 <prvIdleTask+0xc4>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800e08c:	f000 fa10 	bl	800e4b0 <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
 800e090:	e7e6      	b.n	800e060 <prvIdleTask+0xc4>
 800e092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e096:	f383 8811 	msr	BASEPRI, r3
 800e09a:	f3bf 8f6f 	isb	sy
 800e09e:	f3bf 8f4f 	dsb	sy
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800e0a2:	e7fe      	b.n	800e0a2 <prvIdleTask+0x106>
 800e0a4:	20001bcc 	.word	0x20001bcc
 800e0a8:	20001bd0 	.word	0x20001bd0
 800e0ac:	20001bb4 	.word	0x20001bb4
 800e0b0:	20001b94 	.word	0x20001b94
 800e0b4:	20001bb0 	.word	0x20001bb0
 800e0b8:	20001b8c 	.word	0x20001b8c
 800e0bc:	20001c28 	.word	0x20001c28
 800e0c0:	20001bac 	.word	0x20001bac
 800e0c4:	20001cb4 	.word	0x20001cb4

0800e0c8 <vTaskDelay>:
	{
 800e0c8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e0ca:	b950      	cbnz	r0, 800e0e2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800e0cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e0d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	f3bf 8f6f 	isb	sy
	}
 800e0e0:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800e0e2:	4c10      	ldr	r4, [pc, #64]	@ (800e124 <vTaskDelay+0x5c>)
 800e0e4:	6821      	ldr	r1, [r4, #0]
 800e0e6:	b141      	cbz	r1, 800e0fa <vTaskDelay+0x32>
 800e0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ec:	f383 8811 	msr	BASEPRI, r3
 800e0f0:	f3bf 8f6f 	isb	sy
 800e0f4:	f3bf 8f4f 	dsb	sy
 800e0f8:	e7fe      	b.n	800e0f8 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 800e0fa:	6823      	ldr	r3, [r4, #0]
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e100:	f7ff fb8c 	bl	800d81c <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800e104:	6823      	ldr	r3, [r4, #0]
 800e106:	b943      	cbnz	r3, 800e11a <vTaskDelay+0x52>
 800e108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e10c:	f383 8811 	msr	BASEPRI, r3
 800e110:	f3bf 8f6f 	isb	sy
 800e114:	f3bf 8f4f 	dsb	sy
 800e118:	e7fe      	b.n	800e118 <vTaskDelay+0x50>
 800e11a:	f7ff fea1 	bl	800de60 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800e11e:	2800      	cmp	r0, #0
 800e120:	d0d4      	beq.n	800e0cc <vTaskDelay+0x4>
	}
 800e122:	bd10      	pop	{r4, pc}
 800e124:	20001b8c 	.word	0x20001b8c

0800e128 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e128:	4b18      	ldr	r3, [pc, #96]	@ (800e18c <vTaskSwitchContext+0x64>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	b11b      	cbz	r3, 800e136 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800e12e:	4b18      	ldr	r3, [pc, #96]	@ (800e190 <vTaskSwitchContext+0x68>)
 800e130:	2201      	movs	r2, #1
 800e132:	601a      	str	r2, [r3, #0]
 800e134:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800e136:	4916      	ldr	r1, [pc, #88]	@ (800e190 <vTaskSwitchContext+0x68>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e138:	4a16      	ldr	r2, [pc, #88]	@ (800e194 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 800e13a:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e13c:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e13e:	fab3 f383 	clz	r3, r3
 800e142:	b2db      	uxtb	r3, r3
 800e144:	f1c3 031f 	rsb	r3, r3, #31
 800e148:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e14c:	4912      	ldr	r1, [pc, #72]	@ (800e198 <vTaskSwitchContext+0x70>)
 800e14e:	009a      	lsls	r2, r3, #2
 800e150:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e154:	5888      	ldr	r0, [r1, r2]
 800e156:	b940      	cbnz	r0, 800e16a <vTaskSwitchContext+0x42>
	__asm volatile
 800e158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e15c:	f383 8811 	msr	BASEPRI, r3
 800e160:	f3bf 8f6f 	isb	sy
 800e164:	f3bf 8f4f 	dsb	sy
 800e168:	e7fe      	b.n	800e168 <vTaskSwitchContext+0x40>
 800e16a:	6858      	ldr	r0, [r3, #4]
 800e16c:	3208      	adds	r2, #8
 800e16e:	6840      	ldr	r0, [r0, #4]
 800e170:	6058      	str	r0, [r3, #4]
 800e172:	440a      	add	r2, r1
 800e174:	4290      	cmp	r0, r2
 800e176:	bf04      	itt	eq
 800e178:	6840      	ldreq	r0, [r0, #4]
 800e17a:	6058      	streq	r0, [r3, #4]
 800e17c:	4b07      	ldr	r3, [pc, #28]	@ (800e19c <vTaskSwitchContext+0x74>)
 800e17e:	68c2      	ldr	r2, [r0, #12]
 800e180:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a06      	ldr	r2, [pc, #24]	@ (800e1a0 <vTaskSwitchContext+0x78>)
 800e186:	334c      	adds	r3, #76	@ 0x4c
 800e188:	6013      	str	r3, [r2, #0]
}
 800e18a:	4770      	bx	lr
 800e18c:	20001b8c 	.word	0x20001b8c
 800e190:	20001ba0 	.word	0x20001ba0
 800e194:	20001bac 	.word	0x20001bac
 800e198:	20001c28 	.word	0x20001c28
 800e19c:	20001cb4 	.word	0x20001cb4
 800e1a0:	200001b4 	.word	0x200001b4

0800e1a4 <vTaskSuspend>:
	{
 800e1a4:	b570      	push	{r4, r5, r6, lr}
 800e1a6:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e1a8:	4e38      	ldr	r6, [pc, #224]	@ (800e28c <vTaskSuspend+0xe8>)
		taskENTER_CRITICAL();
 800e1aa:	f000 f903 	bl	800e3b4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e1ae:	2c00      	cmp	r4, #0
 800e1b0:	d04d      	beq.n	800e24e <vTaskSuspend+0xaa>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1b2:	1d25      	adds	r5, r4, #4
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	f7ff fb1d 	bl	800d7f4 <uxListRemove>
 800e1ba:	b930      	cbnz	r0, 800e1ca <vTaskSuspend+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e1bc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e1be:	4934      	ldr	r1, [pc, #208]	@ (800e290 <vTaskSuspend+0xec>)
 800e1c0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	58cb      	ldr	r3, [r1, r3]
 800e1c8:	b34b      	cbz	r3, 800e21e <vTaskSuspend+0x7a>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e1ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e1cc:	b11b      	cbz	r3, 800e1d6 <vTaskSuspend+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1ce:	f104 0018 	add.w	r0, r4, #24
 800e1d2:	f7ff fb0f 	bl	800d7f4 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	482e      	ldr	r0, [pc, #184]	@ (800e294 <vTaskSuspend+0xf0>)
		if( xSchedulerRunning != pdFALSE )
 800e1da:	4d2f      	ldr	r5, [pc, #188]	@ (800e298 <vTaskSuspend+0xf4>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800e1dc:	f7ff fae4 	bl	800d7a8 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e1e0:	f894 309c 	ldrb.w	r3, [r4, #156]	@ 0x9c
 800e1e4:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e1e6:	bf04      	itt	eq
 800e1e8:	2300      	moveq	r3, #0
 800e1ea:	f884 309c 	strbeq.w	r3, [r4, #156]	@ 0x9c
		taskEXIT_CRITICAL();
 800e1ee:	f000 f903 	bl	800e3f8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e1f2:	682b      	ldr	r3, [r5, #0]
 800e1f4:	b9e3      	cbnz	r3, 800e230 <vTaskSuspend+0x8c>
		if( pxTCB == pxCurrentTCB )
 800e1f6:	6833      	ldr	r3, [r6, #0]
 800e1f8:	42a3      	cmp	r3, r4
 800e1fa:	d000      	beq.n	800e1fe <vTaskSuspend+0x5a>
	}
 800e1fc:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 800e1fe:	682b      	ldr	r3, [r5, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d02b      	beq.n	800e25c <vTaskSuspend+0xb8>
				configASSERT( uxSchedulerSuspended == 0 );
 800e204:	4b25      	ldr	r3, [pc, #148]	@ (800e29c <vTaskSuspend+0xf8>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d02f      	beq.n	800e26c <vTaskSuspend+0xc8>
 800e20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e210:	f383 8811 	msr	BASEPRI, r3
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	e7fe      	b.n	800e21c <vTaskSuspend+0x78>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e21e:	4920      	ldr	r1, [pc, #128]	@ (800e2a0 <vTaskSuspend+0xfc>)
 800e220:	2301      	movs	r3, #1
 800e222:	fa03 f202 	lsl.w	r2, r3, r2
 800e226:	680b      	ldr	r3, [r1, #0]
 800e228:	ea23 0302 	bic.w	r3, r3, r2
 800e22c:	600b      	str	r3, [r1, #0]
 800e22e:	e7cc      	b.n	800e1ca <vTaskSuspend+0x26>
			taskENTER_CRITICAL();
 800e230:	f000 f8c0 	bl	800e3b4 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e234:	4b1b      	ldr	r3, [pc, #108]	@ (800e2a4 <vTaskSuspend+0x100>)
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	6812      	ldr	r2, [r2, #0]
 800e23a:	b152      	cbz	r2, 800e252 <vTaskSuspend+0xae>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e23c:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e23e:	4b1a      	ldr	r3, [pc, #104]	@ (800e2a8 <vTaskSuspend+0x104>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e240:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e242:	68d2      	ldr	r2, [r2, #12]
 800e244:	6852      	ldr	r2, [r2, #4]
 800e246:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 800e248:	f000 f8d6 	bl	800e3f8 <vPortExitCritical>
 800e24c:	e7d3      	b.n	800e1f6 <vTaskSuspend+0x52>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e24e:	6834      	ldr	r4, [r6, #0]
 800e250:	e7af      	b.n	800e1b2 <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e252:	4b15      	ldr	r3, [pc, #84]	@ (800e2a8 <vTaskSuspend+0x104>)
 800e254:	f04f 32ff 	mov.w	r2, #4294967295
 800e258:	601a      	str	r2, [r3, #0]
 800e25a:	e7f5      	b.n	800e248 <vTaskSuspend+0xa4>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800e25c:	490d      	ldr	r1, [pc, #52]	@ (800e294 <vTaskSuspend+0xf0>)
 800e25e:	4a13      	ldr	r2, [pc, #76]	@ (800e2ac <vTaskSuspend+0x108>)
 800e260:	6809      	ldr	r1, [r1, #0]
 800e262:	6812      	ldr	r2, [r2, #0]
 800e264:	4291      	cmp	r1, r2
 800e266:	d10c      	bne.n	800e282 <vTaskSuspend+0xde>
					pxCurrentTCB = NULL;
 800e268:	6033      	str	r3, [r6, #0]
	}
 800e26a:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 800e26c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e270:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e274:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	f3bf 8f6f 	isb	sy
	}
 800e280:	bd70      	pop	{r4, r5, r6, pc}
 800e282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 800e286:	f7ff bf4f 	b.w	800e128 <vTaskSwitchContext>
 800e28a:	bf00      	nop
 800e28c:	20001cb4 	.word	0x20001cb4
 800e290:	20001c28 	.word	0x20001c28
 800e294:	20001bb8 	.word	0x20001bb8
 800e298:	20001ba8 	.word	0x20001ba8
 800e29c:	20001b8c 	.word	0x20001b8c
 800e2a0:	20001bac 	.word	0x20001bac
 800e2a4:	20001bfc 	.word	0x20001bfc
 800e2a8:	20001b94 	.word	0x20001b94
 800e2ac:	20001bb4 	.word	0x20001bb4

0800e2b0 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800e2b0:	4b09      	ldr	r3, [pc, #36]	@ (800e2d8 <eTaskConfirmSleepModeStatus+0x28>)
 800e2b2:	6818      	ldr	r0, [r3, #0]
 800e2b4:	b918      	cbnz	r0, 800e2be <eTaskConfirmSleepModeStatus+0xe>
		else if( xYieldPending != pdFALSE )
 800e2b6:	4b09      	ldr	r3, [pc, #36]	@ (800e2dc <eTaskConfirmSleepModeStatus+0x2c>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	b113      	cbz	r3, 800e2c2 <eTaskConfirmSleepModeStatus+0x12>
	}
 800e2bc:	4770      	bx	lr
			eReturn = eAbortSleep;
 800e2be:	2000      	movs	r0, #0
	}
 800e2c0:	4770      	bx	lr
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800e2c2:	4a07      	ldr	r2, [pc, #28]	@ (800e2e0 <eTaskConfirmSleepModeStatus+0x30>)
 800e2c4:	4b07      	ldr	r3, [pc, #28]	@ (800e2e4 <eTaskConfirmSleepModeStatus+0x34>)
 800e2c6:	6810      	ldr	r0, [r2, #0]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	3b01      	subs	r3, #1
	eSleepModeStatus eReturn = eStandardSleep;
 800e2cc:	4298      	cmp	r0, r3
 800e2ce:	bf0c      	ite	eq
 800e2d0:	2002      	moveq	r0, #2
 800e2d2:	2001      	movne	r0, #1
 800e2d4:	4770      	bx	lr
 800e2d6:	bf00      	nop
 800e2d8:	20001be4 	.word	0x20001be4
 800e2dc:	20001ba0 	.word	0x20001ba0
 800e2e0:	20001bb8 	.word	0x20001bb8
 800e2e4:	20001bb4 	.word	0x20001bb4

0800e2e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e2e8:	4808      	ldr	r0, [pc, #32]	@ (800e30c <prvPortStartFirstTask+0x24>)
 800e2ea:	6800      	ldr	r0, [r0, #0]
 800e2ec:	6800      	ldr	r0, [r0, #0]
 800e2ee:	f380 8808 	msr	MSP, r0
 800e2f2:	f04f 0000 	mov.w	r0, #0
 800e2f6:	f380 8814 	msr	CONTROL, r0
 800e2fa:	b662      	cpsie	i
 800e2fc:	b661      	cpsie	f
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	f3bf 8f6f 	isb	sy
 800e306:	df00      	svc	0
 800e308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e30a:	0000      	.short	0x0000
 800e30c:	e000ed08 	.word	0xe000ed08

0800e310 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e310:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e320 <vPortEnableVFP+0x10>
 800e314:	6801      	ldr	r1, [r0, #0]
 800e316:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e31a:	6001      	str	r1, [r0, #0]
 800e31c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e31e:	0000      	.short	0x0000
 800e320:	e000ed88 	.word	0xe000ed88

0800e324 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 800e324:	4b0e      	ldr	r3, [pc, #56]	@ (800e360 <prvTaskExitError+0x3c>)
 800e326:	681b      	ldr	r3, [r3, #0]
{
 800e328:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800e32a:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800e32c:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800e32e:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800e330:	d008      	beq.n	800e344 <prvTaskExitError+0x20>
 800e332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e336:	f383 8811 	msr	BASEPRI, r3
 800e33a:	f3bf 8f6f 	isb	sy
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	e7fe      	b.n	800e342 <prvTaskExitError+0x1e>
 800e344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e348:	f383 8811 	msr	BASEPRI, r3
 800e34c:	f3bf 8f6f 	isb	sy
 800e350:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800e354:	9b01      	ldr	r3, [sp, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d0fc      	beq.n	800e354 <prvTaskExitError+0x30>
}
 800e35a:	b002      	add	sp, #8
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop
 800e360:	20000038 	.word	0x20000038

0800e364 <pxPortInitialiseStack>:
{
 800e364:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e366:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e36a:	4c07      	ldr	r4, [pc, #28]	@ (800e388 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e36c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e370:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e374:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e378:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e37c:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 800e380:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e384:	3844      	subs	r0, #68	@ 0x44
 800e386:	4770      	bx	lr
 800e388:	0800e325 	.word	0x0800e325
 800e38c:	00000000 	.word	0x00000000

0800e390 <SVC_Handler>:
	__asm volatile (
 800e390:	4b07      	ldr	r3, [pc, #28]	@ (800e3b0 <pxCurrentTCBConst2>)
 800e392:	6819      	ldr	r1, [r3, #0]
 800e394:	6808      	ldr	r0, [r1, #0]
 800e396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e39a:	f380 8809 	msr	PSP, r0
 800e39e:	f3bf 8f6f 	isb	sy
 800e3a2:	f04f 0000 	mov.w	r0, #0
 800e3a6:	f380 8811 	msr	BASEPRI, r0
 800e3aa:	4770      	bx	lr
 800e3ac:	f3af 8000 	nop.w

0800e3b0 <pxCurrentTCBConst2>:
 800e3b0:	20001cb4 	.word	0x20001cb4

0800e3b4 <vPortEnterCritical>:
 800e3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3b8:	f383 8811 	msr	BASEPRI, r3
 800e3bc:	f3bf 8f6f 	isb	sy
 800e3c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800e3c4:	4a0b      	ldr	r2, [pc, #44]	@ (800e3f4 <vPortEnterCritical+0x40>)
 800e3c6:	6813      	ldr	r3, [r2, #0]
 800e3c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800e3ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800e3cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800e3ce:	d000      	beq.n	800e3d2 <vPortEnterCritical+0x1e>
}
 800e3d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e3d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e3d6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d0f7      	beq.n	800e3d0 <vPortEnterCritical+0x1c>
 800e3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e4:	f383 8811 	msr	BASEPRI, r3
 800e3e8:	f3bf 8f6f 	isb	sy
 800e3ec:	f3bf 8f4f 	dsb	sy
 800e3f0:	e7fe      	b.n	800e3f0 <vPortEnterCritical+0x3c>
 800e3f2:	bf00      	nop
 800e3f4:	20000038 	.word	0x20000038

0800e3f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e3f8:	4a08      	ldr	r2, [pc, #32]	@ (800e41c <vPortExitCritical+0x24>)
 800e3fa:	6813      	ldr	r3, [r2, #0]
 800e3fc:	b943      	cbnz	r3, 800e410 <vPortExitCritical+0x18>
 800e3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e402:	f383 8811 	msr	BASEPRI, r3
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	e7fe      	b.n	800e40e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800e410:	3b01      	subs	r3, #1
 800e412:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e414:	b90b      	cbnz	r3, 800e41a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e416:	f383 8811 	msr	BASEPRI, r3
}
 800e41a:	4770      	bx	lr
 800e41c:	20000038 	.word	0x20000038

0800e420 <PendSV_Handler>:
	__asm volatile
 800e420:	f3ef 8009 	mrs	r0, PSP
 800e424:	f3bf 8f6f 	isb	sy
 800e428:	4b15      	ldr	r3, [pc, #84]	@ (800e480 <pxCurrentTCBConst>)
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	f01e 0f10 	tst.w	lr, #16
 800e430:	bf08      	it	eq
 800e432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43a:	6010      	str	r0, [r2, #0]
 800e43c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e440:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e444:	f380 8811 	msr	BASEPRI, r0
 800e448:	f3bf 8f4f 	dsb	sy
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f7ff fe6a 	bl	800e128 <vTaskSwitchContext>
 800e454:	f04f 0000 	mov.w	r0, #0
 800e458:	f380 8811 	msr	BASEPRI, r0
 800e45c:	bc09      	pop	{r0, r3}
 800e45e:	6819      	ldr	r1, [r3, #0]
 800e460:	6808      	ldr	r0, [r1, #0]
 800e462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e466:	f01e 0f10 	tst.w	lr, #16
 800e46a:	bf08      	it	eq
 800e46c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e470:	f380 8809 	msr	PSP, r0
 800e474:	f3bf 8f6f 	isb	sy
 800e478:	4770      	bx	lr
 800e47a:	bf00      	nop
 800e47c:	f3af 8000 	nop.w

0800e480 <pxCurrentTCBConst>:
 800e480:	20001cb4 	.word	0x20001cb4

0800e484 <SysTick_Handler>:
{
 800e484:	b508      	push	{r3, lr}
	__asm volatile
 800e486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e48a:	f383 8811 	msr	BASEPRI, r3
 800e48e:	f3bf 8f6f 	isb	sy
 800e492:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800e496:	f7ff fc2d 	bl	800dcf4 <xTaskIncrementTick>
 800e49a:	b128      	cbz	r0, 800e4a8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e49c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e4a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	f383 8811 	msr	BASEPRI, r3
}
 800e4ae:	bd08      	pop	{r3, pc}

0800e4b0 <vPortSuppressTicksAndSleep>:
	{
 800e4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800e4b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800e4b8:	493c      	ldr	r1, [pc, #240]	@ (800e5ac <vPortSuppressTicksAndSleep+0xfc>)
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800e4ba:	691a      	ldr	r2, [r3, #16]
 800e4bc:	6809      	ldr	r1, [r1, #0]
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800e4be:	4f3c      	ldr	r7, [pc, #240]	@ (800e5b0 <vPortSuppressTicksAndSleep+0x100>)
		if( ulReloadValue > ulStoppedTimerCompensation )
 800e4c0:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 800e5b4 <vPortSuppressTicksAndSleep+0x104>
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800e4c4:	f022 0201 	bic.w	r2, r2, #1
 800e4c8:	611a      	str	r2, [r3, #16]
 800e4ca:	4288      	cmp	r0, r1
 800e4cc:	bf28      	it	cs
 800e4ce:	4608      	movcs	r0, r1
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800e4d0:	699c      	ldr	r4, [r3, #24]
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	f100 38ff 	add.w	r8, r0, #4294967295
 800e4d8:	fb03 4408 	mla	r4, r3, r8, r4
		if( ulReloadValue > ulStoppedTimerCompensation )
 800e4dc:	f8d9 3000 	ldr.w	r3, [r9]
 800e4e0:	42a3      	cmp	r3, r4
			ulReloadValue -= ulStoppedTimerCompensation;
 800e4e2:	bf38      	it	cc
 800e4e4:	1ae4      	subcc	r4, r4, r3
 800e4e6:	4606      	mov	r6, r0
		__asm volatile( "cpsid i" ::: "memory" );
 800e4e8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800e4ea:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800e4ee:	f3bf 8f6f 	isb	sy
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800e4f2:	f7ff fedd 	bl	800e2b0 <eTaskConfirmSleepModeStatus>
 800e4f6:	b968      	cbnz	r0, 800e514 <vPortSuppressTicksAndSleep+0x64>
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800e4f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e4fc:	699a      	ldr	r2, [r3, #24]
 800e4fe:	615a      	str	r2, [r3, #20]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800e500:	691a      	ldr	r2, [r3, #16]
 800e502:	f042 0201 	orr.w	r2, r2, #1
 800e506:	611a      	str	r2, [r3, #16]
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800e508:	683a      	ldr	r2, [r7, #0]
 800e50a:	3a01      	subs	r2, #1
 800e50c:	615a      	str	r2, [r3, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 800e50e:	b662      	cpsie	i
	}
 800e510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800e514:	f04f 25e0 	mov.w	r5, #3758153728	@ 0xe000e000
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e518:	2000      	movs	r0, #0
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800e51a:	616c      	str	r4, [r5, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e51c:	61a8      	str	r0, [r5, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800e51e:	692b      	ldr	r3, [r5, #16]
 800e520:	f043 0301 	orr.w	r3, r3, #1
 800e524:	612b      	str	r3, [r5, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800e526:	f7f7 fe27 	bl	8006178 <PreSleepProcessing>
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800e52a:	4630      	mov	r0, r6
 800e52c:	f7f7 fe26 	bl	800617c <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800e530:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800e532:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800e536:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800e53a:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800e53c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800e540:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800e544:	2306      	movs	r3, #6
 800e546:	612b      	str	r3, [r5, #16]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800e548:	692b      	ldr	r3, [r5, #16]
 800e54a:	03db      	lsls	r3, r3, #15
 800e54c:	d50f      	bpl.n	800e56e <vPortSuppressTicksAndSleep+0xbe>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800e54e:	69ab      	ldr	r3, [r5, #24]
 800e550:	683a      	ldr	r2, [r7, #0]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800e552:	f8d9 1000 	ldr.w	r1, [r9]
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800e556:	4413      	add	r3, r2
 800e558:	3b01      	subs	r3, #1
 800e55a:	1b1b      	subs	r3, r3, r4
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800e55c:	4299      	cmp	r1, r3
 800e55e:	d801      	bhi.n	800e564 <vPortSuppressTicksAndSleep+0xb4>
 800e560:	429a      	cmp	r2, r3
 800e562:	d200      	bcs.n	800e566 <vPortSuppressTicksAndSleep+0xb6>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800e564:	1e53      	subs	r3, r2, #1
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800e566:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800e56a:	6153      	str	r3, [r2, #20]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800e56c:	e00c      	b.n	800e588 <vPortSuppressTicksAndSleep+0xd8>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	69aa      	ldr	r2, [r5, #24]
 800e572:	fb06 f003 	mul.w	r0, r6, r3
 800e576:	eba0 0802 	sub.w	r8, r0, r2
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800e57a:	1a12      	subs	r2, r2, r0
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800e57c:	fbb8 f8f3 	udiv	r8, r8, r3
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800e580:	fb08 3303 	mla	r3, r8, r3, r3
 800e584:	4413      	add	r3, r2
 800e586:	616b      	str	r3, [r5, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e588:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 800e58c:	2300      	movs	r3, #0
 800e58e:	61a3      	str	r3, [r4, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800e590:	6923      	ldr	r3, [r4, #16]
 800e592:	f043 0301 	orr.w	r3, r3, #1
 800e596:	6123      	str	r3, [r4, #16]
			vTaskStepTick( ulCompleteTickPeriods );
 800e598:	4640      	mov	r0, r8
 800e59a:	f7ff fb93 	bl	800dcc4 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	3b01      	subs	r3, #1
 800e5a2:	6163      	str	r3, [r4, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 800e5a4:	b662      	cpsie	i
	}
 800e5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5aa:	bf00      	nop
 800e5ac:	20001cc4 	.word	0x20001cc4
 800e5b0:	20001cc8 	.word	0x20001cc8
 800e5b4:	20001cc0 	.word	0x20001cc0

0800e5b8 <vPortSetupTimerInterrupt>:
{
 800e5b8:	b4f0      	push	{r4, r5, r6, r7}
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800e5ba:	4c10      	ldr	r4, [pc, #64]	@ (800e5fc <vPortSetupTimerInterrupt+0x44>)
 800e5bc:	4910      	ldr	r1, [pc, #64]	@ (800e600 <vPortSetupTimerInterrupt+0x48>)
 800e5be:	6823      	ldr	r3, [r4, #0]
 800e5c0:	4a10      	ldr	r2, [pc, #64]	@ (800e604 <vPortSetupTimerInterrupt+0x4c>)
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800e5c2:	4e11      	ldr	r6, [pc, #68]	@ (800e608 <vPortSetupTimerInterrupt+0x50>)
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800e5c4:	fba1 0303 	umull	r0, r3, r1, r3
 800e5c8:	099b      	lsrs	r3, r3, #6
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800e5ca:	4810      	ldr	r0, [pc, #64]	@ (800e60c <vPortSetupTimerInterrupt+0x54>)
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800e5cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e5ce:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800e5d2:	2500      	movs	r5, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800e5d4:	272d      	movs	r7, #45	@ 0x2d
 800e5d6:	6007      	str	r7, [r0, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800e5d8:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800e5dc:	fbb0 f3f3 	udiv	r3, r0, r3
 800e5e0:	6033      	str	r3, [r6, #0]
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e5e2:	6115      	str	r5, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e5e4:	6195      	str	r5, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e5e6:	6823      	ldr	r3, [r4, #0]
 800e5e8:	fba1 1303 	umull	r1, r3, r1, r3
 800e5ec:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e5ee:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e5f0:	3b01      	subs	r3, #1
 800e5f2:	6153      	str	r3, [r2, #20]
}
 800e5f4:	bcf0      	pop	{r4, r5, r6, r7}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e5f6:	6110      	str	r0, [r2, #16]
}
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop
 800e5fc:	20000004 	.word	0x20000004
 800e600:	10624dd3 	.word	0x10624dd3
 800e604:	20001cc8 	.word	0x20001cc8
 800e608:	20001cc4 	.word	0x20001cc4
 800e60c:	20001cc0 	.word	0x20001cc0

0800e610 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e610:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e614:	4a3d      	ldr	r2, [pc, #244]	@ (800e70c <xPortStartScheduler+0xfc>)
 800e616:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800e61a:	4291      	cmp	r1, r2
 800e61c:	d041      	beq.n	800e6a2 <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e61e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800e622:	4b3b      	ldr	r3, [pc, #236]	@ (800e710 <xPortStartScheduler+0x100>)
 800e624:	429a      	cmp	r2, r3
 800e626:	d033      	beq.n	800e690 <xPortStartScheduler+0x80>
{
 800e628:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e62a:	4b3a      	ldr	r3, [pc, #232]	@ (800e714 <xPortStartScheduler+0x104>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e62c:	4c3a      	ldr	r4, [pc, #232]	@ (800e718 <xPortStartScheduler+0x108>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e62e:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e630:	483a      	ldr	r0, [pc, #232]	@ (800e71c <xPortStartScheduler+0x10c>)
{
 800e632:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e634:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e636:	b2d2      	uxtb	r2, r2
 800e638:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e63a:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e644:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e648:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e64c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e650:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e652:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e654:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e656:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e658:	bf48      	it	mi
 800e65a:	2206      	movmi	r2, #6
 800e65c:	d50f      	bpl.n	800e67e <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e65e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e662:	005b      	lsls	r3, r3, #1
 800e664:	b2db      	uxtb	r3, r3
 800e666:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e66a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e66e:	061b      	lsls	r3, r3, #24
 800e670:	4611      	mov	r1, r2
 800e672:	f102 32ff 	add.w	r2, r2, #4294967295
 800e676:	d4f2      	bmi.n	800e65e <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e678:	2903      	cmp	r1, #3
 800e67a:	d01b      	beq.n	800e6b4 <xPortStartScheduler+0xa4>
 800e67c:	6001      	str	r1, [r0, #0]
	__asm volatile
 800e67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e682:	f383 8811 	msr	BASEPRI, r3
 800e686:	f3bf 8f6f 	isb	sy
 800e68a:	f3bf 8f4f 	dsb	sy
 800e68e:	e7fe      	b.n	800e68e <xPortStartScheduler+0x7e>
 800e690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e694:	f383 8811 	msr	BASEPRI, r3
 800e698:	f3bf 8f6f 	isb	sy
 800e69c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e6a0:	e7fe      	b.n	800e6a0 <xPortStartScheduler+0x90>
 800e6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6a6:	f383 8811 	msr	BASEPRI, r3
 800e6aa:	f3bf 8f6f 	isb	sy
 800e6ae:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e6b2:	e7fe      	b.n	800e6b2 <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6b4:	9b01      	ldr	r3, [sp, #4]
 800e6b6:	4a17      	ldr	r2, [pc, #92]	@ (800e714 <xPortStartScheduler+0x104>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6b8:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6bc:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6c0:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6c2:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6c4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6c6:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e6ca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e6ce:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6d2:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e6d6:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e6da:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800e6de:	f7ff ff6b 	bl	800e5b8 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800e6e2:	4b0f      	ldr	r3, [pc, #60]	@ (800e720 <xPortStartScheduler+0x110>)
 800e6e4:	2500      	movs	r5, #0
 800e6e6:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800e6e8:	f7ff fe12 	bl	800e310 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e6ec:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800e6f0:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e6f4:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800e6f8:	f7ff fdf6 	bl	800e2e8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800e6fc:	f7ff fd14 	bl	800e128 <vTaskSwitchContext>
	prvTaskExitError();
 800e700:	f7ff fe10 	bl	800e324 <prvTaskExitError>
}
 800e704:	4628      	mov	r0, r5
 800e706:	b003      	add	sp, #12
 800e708:	bd30      	pop	{r4, r5, pc}
 800e70a:	bf00      	nop
 800e70c:	410fc271 	.word	0x410fc271
 800e710:	410fc270 	.word	0x410fc270
 800e714:	e000e400 	.word	0xe000e400
 800e718:	20001cbc 	.word	0x20001cbc
 800e71c:	20001cb8 	.word	0x20001cb8
 800e720:	20000038 	.word	0x20000038

0800e724 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e724:	b430      	push	{r4, r5}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e726:	4b12      	ldr	r3, [pc, #72]	@ (800e770 <prvInsertBlockIntoFreeList+0x4c>)
 800e728:	461a      	mov	r2, r3
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4283      	cmp	r3, r0
 800e72e:	d3fb      	bcc.n	800e728 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e730:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e732:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e734:	eb02 0c04 	add.w	ip, r2, r4
 800e738:	4560      	cmp	r0, ip
 800e73a:	d008      	beq.n	800e74e <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e73c:	1844      	adds	r4, r0, r1
 800e73e:	42a3      	cmp	r3, r4
 800e740:	d00b      	beq.n	800e75a <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e742:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e744:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e746:	bf18      	it	ne
 800e748:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e74a:	bc30      	pop	{r4, r5}
 800e74c:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e74e:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e750:	1850      	adds	r0, r2, r1
 800e752:	4283      	cmp	r3, r0
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e754:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e756:	d1f8      	bne.n	800e74a <prvInsertBlockIntoFreeList+0x26>
 800e758:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e75a:	4c06      	ldr	r4, [pc, #24]	@ (800e774 <prvInsertBlockIntoFreeList+0x50>)
 800e75c:	6824      	ldr	r4, [r4, #0]
 800e75e:	42a3      	cmp	r3, r4
 800e760:	d003      	beq.n	800e76a <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e762:	e9d3 4500 	ldrd	r4, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e766:	4429      	add	r1, r5
 800e768:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e76a:	6004      	str	r4, [r0, #0]
 800e76c:	e7ea      	b.n	800e744 <prvInsertBlockIntoFreeList+0x20>
 800e76e:	bf00      	nop
 800e770:	20001ce4 	.word	0x20001ce4
 800e774:	20001ce0 	.word	0x20001ce0

0800e778 <pvPortMalloc>:
{
 800e778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( pxEnd == NULL )
 800e77c:	4e40      	ldr	r6, [pc, #256]	@ (800e880 <pvPortMalloc+0x108>)
{
 800e77e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800e780:	f7ff fa98 	bl	800dcb4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e784:	6833      	ldr	r3, [r6, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d05c      	beq.n	800e844 <pvPortMalloc+0xcc>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e78a:	4b3e      	ldr	r3, [pc, #248]	@ (800e884 <pvPortMalloc+0x10c>)
 800e78c:	681d      	ldr	r5, [r3, #0]
 800e78e:	422c      	tst	r4, r5
 800e790:	d12e      	bne.n	800e7f0 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 800e792:	b36c      	cbz	r4, 800e7f0 <pvPortMalloc+0x78>
				xWantedSize += xHeapStructSize;
 800e794:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e798:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e79a:	bf1c      	itt	ne
 800e79c:	f021 0107 	bicne.w	r1, r1, #7
 800e7a0:	3108      	addne	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e7a2:	b329      	cbz	r1, 800e7f0 <pvPortMalloc+0x78>
 800e7a4:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 800e89c <pvPortMalloc+0x124>
 800e7a8:	f8d8 7000 	ldr.w	r7, [r8]
 800e7ac:	428f      	cmp	r7, r1
 800e7ae:	d31f      	bcc.n	800e7f0 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 800e7b0:	4835      	ldr	r0, [pc, #212]	@ (800e888 <pvPortMalloc+0x110>)
 800e7b2:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e7b4:	e003      	b.n	800e7be <pvPortMalloc+0x46>
 800e7b6:	6823      	ldr	r3, [r4, #0]
 800e7b8:	b123      	cbz	r3, 800e7c4 <pvPortMalloc+0x4c>
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	461c      	mov	r4, r3
 800e7be:	6862      	ldr	r2, [r4, #4]
 800e7c0:	428a      	cmp	r2, r1
 800e7c2:	d3f8      	bcc.n	800e7b6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800e7c4:	6833      	ldr	r3, [r6, #0]
 800e7c6:	42a3      	cmp	r3, r4
 800e7c8:	d012      	beq.n	800e7f0 <pvPortMalloc+0x78>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e7ca:	1a53      	subs	r3, r2, r1
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e7cc:	6826      	ldr	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e7ce:	f8d0 9000 	ldr.w	r9, [r0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e7d2:	6006      	str	r6, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e7d4:	2b10      	cmp	r3, #16
 800e7d6:	d916      	bls.n	800e806 <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e7d8:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7da:	0742      	lsls	r2, r0, #29
 800e7dc:	d00e      	beq.n	800e7fc <pvPortMalloc+0x84>
 800e7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e2:	f383 8811 	msr	BASEPRI, r3
 800e7e6:	f3bf 8f6f 	isb	sy
 800e7ea:	f3bf 8f4f 	dsb	sy
 800e7ee:	e7fe      	b.n	800e7ee <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 800e7f0:	f7ff fbc4 	bl	800df7c <xTaskResumeAll>
void *pvReturn = NULL;
 800e7f4:	2600      	movs	r6, #0
}
 800e7f6:	4630      	mov	r0, r6
 800e7f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e7fc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e7fe:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e800:	f7ff ff90 	bl	800e724 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e804:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e806:	4b21      	ldr	r3, [pc, #132]	@ (800e88c <pvPortMalloc+0x114>)
 800e808:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e80a:	1abf      	subs	r7, r7, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e80c:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 800e80e:	4920      	ldr	r1, [pc, #128]	@ (800e890 <pvPortMalloc+0x118>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e810:	bf38      	it	cc
 800e812:	601f      	strcc	r7, [r3, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e814:	432a      	orrs	r2, r5
					pxBlock->pxNextFreeBlock = NULL;
 800e816:	2300      	movs	r3, #0
 800e818:	e9c4 3200 	strd	r3, r2, [r4]
					xNumberOfSuccessfulAllocations++;
 800e81c:	680b      	ldr	r3, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e81e:	f8c8 7000 	str.w	r7, [r8]
					xNumberOfSuccessfulAllocations++;
 800e822:	3301      	adds	r3, #1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e824:	f109 0608 	add.w	r6, r9, #8
					xNumberOfSuccessfulAllocations++;
 800e828:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800e82a:	f7ff fba7 	bl	800df7c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e82e:	0773      	lsls	r3, r6, #29
 800e830:	d0e1      	beq.n	800e7f6 <pvPortMalloc+0x7e>
 800e832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e836:	f383 8811 	msr	BASEPRI, r3
 800e83a:	f3bf 8f6f 	isb	sy
 800e83e:	f3bf 8f4f 	dsb	sy
 800e842:	e7fe      	b.n	800e842 <pvPortMalloc+0xca>
	uxAddress = ( size_t ) ucHeap;
 800e844:	4b13      	ldr	r3, [pc, #76]	@ (800e894 <pvPortMalloc+0x11c>)
	uxAddress -= xHeapStructSize;
 800e846:	4a14      	ldr	r2, [pc, #80]	@ (800e898 <pvPortMalloc+0x120>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e848:	4910      	ldr	r1, [pc, #64]	@ (800e88c <pvPortMalloc+0x114>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e84a:	4f0e      	ldr	r7, [pc, #56]	@ (800e884 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e84c:	075d      	lsls	r5, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e84e:	bf18      	it	ne
 800e850:	3307      	addne	r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e852:	4d0d      	ldr	r5, [pc, #52]	@ (800e888 <pvPortMalloc+0x110>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e854:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e858:	bf18      	it	ne
 800e85a:	f023 0307 	bicne.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e85e:	602b      	str	r3, [r5, #0]
 800e860:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e862:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e864:	600b      	str	r3, [r1, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e866:	490d      	ldr	r1, [pc, #52]	@ (800e89c <pvPortMalloc+0x124>)
	pxEnd = ( void * ) uxAddress;
 800e868:	6032      	str	r2, [r6, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e86a:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e86c:	2100      	movs	r1, #0
 800e86e:	6069      	str	r1, [r5, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e870:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
 800e874:	e9c2 1100 	strd	r1, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e878:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e87a:	e9c0 2300 	strd	r2, r3, [r0]
}
 800e87e:	e786      	b.n	800e78e <pvPortMalloc+0x16>
 800e880:	20001ce0 	.word	0x20001ce0
 800e884:	20001ccc 	.word	0x20001ccc
 800e888:	20001ce4 	.word	0x20001ce4
 800e88c:	20001cd8 	.word	0x20001cd8
 800e890:	20001cd4 	.word	0x20001cd4
 800e894:	20001cec 	.word	0x20001cec
 800e898:	20005ce4 	.word	0x20005ce4
 800e89c:	20001cdc 	.word	0x20001cdc

0800e8a0 <vPortFree>:
	if( pv != NULL )
 800e8a0:	b1d0      	cbz	r0, 800e8d8 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e8a2:	4a1c      	ldr	r2, [pc, #112]	@ (800e914 <vPortFree+0x74>)
 800e8a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e8a8:	6812      	ldr	r2, [r2, #0]
 800e8aa:	4213      	tst	r3, r2
 800e8ac:	d00b      	beq.n	800e8c6 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e8ae:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800e8b2:	b191      	cbz	r1, 800e8da <vPortFree+0x3a>
 800e8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	e7fe      	b.n	800e8c4 <vPortFree+0x24>
 800e8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ca:	f383 8811 	msr	BASEPRI, r3
 800e8ce:	f3bf 8f6f 	isb	sy
 800e8d2:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e8d6:	e7fe      	b.n	800e8d6 <vPortFree+0x36>
 800e8d8:	4770      	bx	lr
{
 800e8da:	b500      	push	{lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e8dc:	ea23 0302 	bic.w	r3, r3, r2
{
 800e8e0:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e8e2:	f840 3c04 	str.w	r3, [r0, #-4]
 800e8e6:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 800e8e8:	f7ff f9e4 	bl	800dcb4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e8ec:	4a0a      	ldr	r2, [pc, #40]	@ (800e918 <vPortFree+0x78>)
 800e8ee:	9801      	ldr	r0, [sp, #4]
 800e8f0:	6811      	ldr	r1, [r2, #0]
 800e8f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e8f6:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e8f8:	440b      	add	r3, r1
 800e8fa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e8fc:	f7ff ff12 	bl	800e724 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e900:	4a06      	ldr	r2, [pc, #24]	@ (800e91c <vPortFree+0x7c>)
 800e902:	6813      	ldr	r3, [r2, #0]
 800e904:	3301      	adds	r3, #1
 800e906:	6013      	str	r3, [r2, #0]
}
 800e908:	b003      	add	sp, #12
 800e90a:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 800e90e:	f7ff bb35 	b.w	800df7c <xTaskResumeAll>
 800e912:	bf00      	nop
 800e914:	20001ccc 	.word	0x20001ccc
 800e918:	20001cdc 	.word	0x20001cdc
 800e91c:	20001cd0 	.word	0x20001cd0

0800e920 <atof>:
 800e920:	2100      	movs	r1, #0
 800e922:	f000 becb 	b.w	800f6bc <strtod>

0800e926 <atoi>:
 800e926:	220a      	movs	r2, #10
 800e928:	2100      	movs	r1, #0
 800e92a:	f000 bfb3 	b.w	800f894 <strtol>
	...

0800e930 <malloc>:
 800e930:	4b02      	ldr	r3, [pc, #8]	@ (800e93c <malloc+0xc>)
 800e932:	4601      	mov	r1, r0
 800e934:	6818      	ldr	r0, [r3, #0]
 800e936:	f000 b82d 	b.w	800e994 <_malloc_r>
 800e93a:	bf00      	nop
 800e93c:	200001b4 	.word	0x200001b4

0800e940 <free>:
 800e940:	4b02      	ldr	r3, [pc, #8]	@ (800e94c <free+0xc>)
 800e942:	4601      	mov	r1, r0
 800e944:	6818      	ldr	r0, [r3, #0]
 800e946:	f003 b843 	b.w	80119d0 <_free_r>
 800e94a:	bf00      	nop
 800e94c:	200001b4 	.word	0x200001b4

0800e950 <sbrk_aligned>:
 800e950:	b570      	push	{r4, r5, r6, lr}
 800e952:	4e0f      	ldr	r6, [pc, #60]	@ (800e990 <sbrk_aligned+0x40>)
 800e954:	460c      	mov	r4, r1
 800e956:	6831      	ldr	r1, [r6, #0]
 800e958:	4605      	mov	r5, r0
 800e95a:	b911      	cbnz	r1, 800e962 <sbrk_aligned+0x12>
 800e95c:	f002 f978 	bl	8010c50 <_sbrk_r>
 800e960:	6030      	str	r0, [r6, #0]
 800e962:	4621      	mov	r1, r4
 800e964:	4628      	mov	r0, r5
 800e966:	f002 f973 	bl	8010c50 <_sbrk_r>
 800e96a:	1c43      	adds	r3, r0, #1
 800e96c:	d103      	bne.n	800e976 <sbrk_aligned+0x26>
 800e96e:	f04f 34ff 	mov.w	r4, #4294967295
 800e972:	4620      	mov	r0, r4
 800e974:	bd70      	pop	{r4, r5, r6, pc}
 800e976:	1cc4      	adds	r4, r0, #3
 800e978:	f024 0403 	bic.w	r4, r4, #3
 800e97c:	42a0      	cmp	r0, r4
 800e97e:	d0f8      	beq.n	800e972 <sbrk_aligned+0x22>
 800e980:	1a21      	subs	r1, r4, r0
 800e982:	4628      	mov	r0, r5
 800e984:	f002 f964 	bl	8010c50 <_sbrk_r>
 800e988:	3001      	adds	r0, #1
 800e98a:	d1f2      	bne.n	800e972 <sbrk_aligned+0x22>
 800e98c:	e7ef      	b.n	800e96e <sbrk_aligned+0x1e>
 800e98e:	bf00      	nop
 800e990:	20005cec 	.word	0x20005cec

0800e994 <_malloc_r>:
 800e994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e998:	1ccd      	adds	r5, r1, #3
 800e99a:	f025 0503 	bic.w	r5, r5, #3
 800e99e:	3508      	adds	r5, #8
 800e9a0:	2d0c      	cmp	r5, #12
 800e9a2:	bf38      	it	cc
 800e9a4:	250c      	movcc	r5, #12
 800e9a6:	2d00      	cmp	r5, #0
 800e9a8:	4606      	mov	r6, r0
 800e9aa:	db01      	blt.n	800e9b0 <_malloc_r+0x1c>
 800e9ac:	42a9      	cmp	r1, r5
 800e9ae:	d904      	bls.n	800e9ba <_malloc_r+0x26>
 800e9b0:	230c      	movs	r3, #12
 800e9b2:	6033      	str	r3, [r6, #0]
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ea90 <_malloc_r+0xfc>
 800e9be:	f000 f869 	bl	800ea94 <__malloc_lock>
 800e9c2:	f8d8 3000 	ldr.w	r3, [r8]
 800e9c6:	461c      	mov	r4, r3
 800e9c8:	bb44      	cbnz	r4, 800ea1c <_malloc_r+0x88>
 800e9ca:	4629      	mov	r1, r5
 800e9cc:	4630      	mov	r0, r6
 800e9ce:	f7ff ffbf 	bl	800e950 <sbrk_aligned>
 800e9d2:	1c43      	adds	r3, r0, #1
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	d158      	bne.n	800ea8a <_malloc_r+0xf6>
 800e9d8:	f8d8 4000 	ldr.w	r4, [r8]
 800e9dc:	4627      	mov	r7, r4
 800e9de:	2f00      	cmp	r7, #0
 800e9e0:	d143      	bne.n	800ea6a <_malloc_r+0xd6>
 800e9e2:	2c00      	cmp	r4, #0
 800e9e4:	d04b      	beq.n	800ea7e <_malloc_r+0xea>
 800e9e6:	6823      	ldr	r3, [r4, #0]
 800e9e8:	4639      	mov	r1, r7
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	eb04 0903 	add.w	r9, r4, r3
 800e9f0:	f002 f92e 	bl	8010c50 <_sbrk_r>
 800e9f4:	4581      	cmp	r9, r0
 800e9f6:	d142      	bne.n	800ea7e <_malloc_r+0xea>
 800e9f8:	6821      	ldr	r1, [r4, #0]
 800e9fa:	1a6d      	subs	r5, r5, r1
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	4630      	mov	r0, r6
 800ea00:	f7ff ffa6 	bl	800e950 <sbrk_aligned>
 800ea04:	3001      	adds	r0, #1
 800ea06:	d03a      	beq.n	800ea7e <_malloc_r+0xea>
 800ea08:	6823      	ldr	r3, [r4, #0]
 800ea0a:	442b      	add	r3, r5
 800ea0c:	6023      	str	r3, [r4, #0]
 800ea0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ea12:	685a      	ldr	r2, [r3, #4]
 800ea14:	bb62      	cbnz	r2, 800ea70 <_malloc_r+0xdc>
 800ea16:	f8c8 7000 	str.w	r7, [r8]
 800ea1a:	e00f      	b.n	800ea3c <_malloc_r+0xa8>
 800ea1c:	6822      	ldr	r2, [r4, #0]
 800ea1e:	1b52      	subs	r2, r2, r5
 800ea20:	d420      	bmi.n	800ea64 <_malloc_r+0xd0>
 800ea22:	2a0b      	cmp	r2, #11
 800ea24:	d917      	bls.n	800ea56 <_malloc_r+0xc2>
 800ea26:	1961      	adds	r1, r4, r5
 800ea28:	42a3      	cmp	r3, r4
 800ea2a:	6025      	str	r5, [r4, #0]
 800ea2c:	bf18      	it	ne
 800ea2e:	6059      	strne	r1, [r3, #4]
 800ea30:	6863      	ldr	r3, [r4, #4]
 800ea32:	bf08      	it	eq
 800ea34:	f8c8 1000 	streq.w	r1, [r8]
 800ea38:	5162      	str	r2, [r4, r5]
 800ea3a:	604b      	str	r3, [r1, #4]
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	f000 f82f 	bl	800eaa0 <__malloc_unlock>
 800ea42:	f104 000b 	add.w	r0, r4, #11
 800ea46:	1d23      	adds	r3, r4, #4
 800ea48:	f020 0007 	bic.w	r0, r0, #7
 800ea4c:	1ac2      	subs	r2, r0, r3
 800ea4e:	bf1c      	itt	ne
 800ea50:	1a1b      	subne	r3, r3, r0
 800ea52:	50a3      	strne	r3, [r4, r2]
 800ea54:	e7af      	b.n	800e9b6 <_malloc_r+0x22>
 800ea56:	6862      	ldr	r2, [r4, #4]
 800ea58:	42a3      	cmp	r3, r4
 800ea5a:	bf0c      	ite	eq
 800ea5c:	f8c8 2000 	streq.w	r2, [r8]
 800ea60:	605a      	strne	r2, [r3, #4]
 800ea62:	e7eb      	b.n	800ea3c <_malloc_r+0xa8>
 800ea64:	4623      	mov	r3, r4
 800ea66:	6864      	ldr	r4, [r4, #4]
 800ea68:	e7ae      	b.n	800e9c8 <_malloc_r+0x34>
 800ea6a:	463c      	mov	r4, r7
 800ea6c:	687f      	ldr	r7, [r7, #4]
 800ea6e:	e7b6      	b.n	800e9de <_malloc_r+0x4a>
 800ea70:	461a      	mov	r2, r3
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	42a3      	cmp	r3, r4
 800ea76:	d1fb      	bne.n	800ea70 <_malloc_r+0xdc>
 800ea78:	2300      	movs	r3, #0
 800ea7a:	6053      	str	r3, [r2, #4]
 800ea7c:	e7de      	b.n	800ea3c <_malloc_r+0xa8>
 800ea7e:	230c      	movs	r3, #12
 800ea80:	6033      	str	r3, [r6, #0]
 800ea82:	4630      	mov	r0, r6
 800ea84:	f000 f80c 	bl	800eaa0 <__malloc_unlock>
 800ea88:	e794      	b.n	800e9b4 <_malloc_r+0x20>
 800ea8a:	6005      	str	r5, [r0, #0]
 800ea8c:	e7d6      	b.n	800ea3c <_malloc_r+0xa8>
 800ea8e:	bf00      	nop
 800ea90:	20005cf0 	.word	0x20005cf0

0800ea94 <__malloc_lock>:
 800ea94:	4801      	ldr	r0, [pc, #4]	@ (800ea9c <__malloc_lock+0x8>)
 800ea96:	f7fa bf33 	b.w	8009900 <__retarget_lock_acquire_recursive>
 800ea9a:	bf00      	nop
 800ea9c:	20001b70 	.word	0x20001b70

0800eaa0 <__malloc_unlock>:
 800eaa0:	4801      	ldr	r0, [pc, #4]	@ (800eaa8 <__malloc_unlock+0x8>)
 800eaa2:	f7fa bf49 	b.w	8009938 <__retarget_lock_release_recursive>
 800eaa6:	bf00      	nop
 800eaa8:	20001b70 	.word	0x20001b70

0800eaac <sulp>:
 800eaac:	b570      	push	{r4, r5, r6, lr}
 800eaae:	4604      	mov	r4, r0
 800eab0:	460d      	mov	r5, r1
 800eab2:	ec45 4b10 	vmov	d0, r4, r5
 800eab6:	4616      	mov	r6, r2
 800eab8:	f003 fe94 	bl	80127e4 <__ulp>
 800eabc:	ec51 0b10 	vmov	r0, r1, d0
 800eac0:	b17e      	cbz	r6, 800eae2 <sulp+0x36>
 800eac2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eac6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	dd09      	ble.n	800eae2 <sulp+0x36>
 800eace:	051b      	lsls	r3, r3, #20
 800ead0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ead4:	2400      	movs	r4, #0
 800ead6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800eada:	4622      	mov	r2, r4
 800eadc:	462b      	mov	r3, r5
 800eade:	f7f1 fdcb 	bl	8000678 <__aeabi_dmul>
 800eae2:	ec41 0b10 	vmov	d0, r0, r1
 800eae6:	bd70      	pop	{r4, r5, r6, pc}

0800eae8 <_strtod_l>:
 800eae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaec:	b09f      	sub	sp, #124	@ 0x7c
 800eaee:	460c      	mov	r4, r1
 800eaf0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	921a      	str	r2, [sp, #104]	@ 0x68
 800eaf6:	9005      	str	r0, [sp, #20]
 800eaf8:	f04f 0a00 	mov.w	sl, #0
 800eafc:	f04f 0b00 	mov.w	fp, #0
 800eb00:	460a      	mov	r2, r1
 800eb02:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb04:	7811      	ldrb	r1, [r2, #0]
 800eb06:	292b      	cmp	r1, #43	@ 0x2b
 800eb08:	d04a      	beq.n	800eba0 <_strtod_l+0xb8>
 800eb0a:	d838      	bhi.n	800eb7e <_strtod_l+0x96>
 800eb0c:	290d      	cmp	r1, #13
 800eb0e:	d832      	bhi.n	800eb76 <_strtod_l+0x8e>
 800eb10:	2908      	cmp	r1, #8
 800eb12:	d832      	bhi.n	800eb7a <_strtod_l+0x92>
 800eb14:	2900      	cmp	r1, #0
 800eb16:	d03b      	beq.n	800eb90 <_strtod_l+0xa8>
 800eb18:	2200      	movs	r2, #0
 800eb1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800eb1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800eb1e:	782a      	ldrb	r2, [r5, #0]
 800eb20:	2a30      	cmp	r2, #48	@ 0x30
 800eb22:	f040 80b3 	bne.w	800ec8c <_strtod_l+0x1a4>
 800eb26:	786a      	ldrb	r2, [r5, #1]
 800eb28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800eb2c:	2a58      	cmp	r2, #88	@ 0x58
 800eb2e:	d16e      	bne.n	800ec0e <_strtod_l+0x126>
 800eb30:	9302      	str	r3, [sp, #8]
 800eb32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb34:	9301      	str	r3, [sp, #4]
 800eb36:	ab1a      	add	r3, sp, #104	@ 0x68
 800eb38:	9300      	str	r3, [sp, #0]
 800eb3a:	4a8e      	ldr	r2, [pc, #568]	@ (800ed74 <_strtod_l+0x28c>)
 800eb3c:	9805      	ldr	r0, [sp, #20]
 800eb3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800eb40:	a919      	add	r1, sp, #100	@ 0x64
 800eb42:	f002 fff7 	bl	8011b34 <__gethex>
 800eb46:	f010 060f 	ands.w	r6, r0, #15
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	d005      	beq.n	800eb5a <_strtod_l+0x72>
 800eb4e:	2e06      	cmp	r6, #6
 800eb50:	d128      	bne.n	800eba4 <_strtod_l+0xbc>
 800eb52:	3501      	adds	r5, #1
 800eb54:	2300      	movs	r3, #0
 800eb56:	9519      	str	r5, [sp, #100]	@ 0x64
 800eb58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	f040 858e 	bne.w	800f67e <_strtod_l+0xb96>
 800eb62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb64:	b1cb      	cbz	r3, 800eb9a <_strtod_l+0xb2>
 800eb66:	4652      	mov	r2, sl
 800eb68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800eb6c:	ec43 2b10 	vmov	d0, r2, r3
 800eb70:	b01f      	add	sp, #124	@ 0x7c
 800eb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb76:	2920      	cmp	r1, #32
 800eb78:	d1ce      	bne.n	800eb18 <_strtod_l+0x30>
 800eb7a:	3201      	adds	r2, #1
 800eb7c:	e7c1      	b.n	800eb02 <_strtod_l+0x1a>
 800eb7e:	292d      	cmp	r1, #45	@ 0x2d
 800eb80:	d1ca      	bne.n	800eb18 <_strtod_l+0x30>
 800eb82:	2101      	movs	r1, #1
 800eb84:	910b      	str	r1, [sp, #44]	@ 0x2c
 800eb86:	1c51      	adds	r1, r2, #1
 800eb88:	9119      	str	r1, [sp, #100]	@ 0x64
 800eb8a:	7852      	ldrb	r2, [r2, #1]
 800eb8c:	2a00      	cmp	r2, #0
 800eb8e:	d1c5      	bne.n	800eb1c <_strtod_l+0x34>
 800eb90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eb92:	9419      	str	r4, [sp, #100]	@ 0x64
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f040 8570 	bne.w	800f67a <_strtod_l+0xb92>
 800eb9a:	4652      	mov	r2, sl
 800eb9c:	465b      	mov	r3, fp
 800eb9e:	e7e5      	b.n	800eb6c <_strtod_l+0x84>
 800eba0:	2100      	movs	r1, #0
 800eba2:	e7ef      	b.n	800eb84 <_strtod_l+0x9c>
 800eba4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eba6:	b13a      	cbz	r2, 800ebb8 <_strtod_l+0xd0>
 800eba8:	2135      	movs	r1, #53	@ 0x35
 800ebaa:	a81c      	add	r0, sp, #112	@ 0x70
 800ebac:	f003 ff14 	bl	80129d8 <__copybits>
 800ebb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ebb2:	9805      	ldr	r0, [sp, #20]
 800ebb4:	f003 fae2 	bl	801217c <_Bfree>
 800ebb8:	3e01      	subs	r6, #1
 800ebba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ebbc:	2e04      	cmp	r6, #4
 800ebbe:	d806      	bhi.n	800ebce <_strtod_l+0xe6>
 800ebc0:	e8df f006 	tbb	[pc, r6]
 800ebc4:	201d0314 	.word	0x201d0314
 800ebc8:	14          	.byte	0x14
 800ebc9:	00          	.byte	0x00
 800ebca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ebce:	05e1      	lsls	r1, r4, #23
 800ebd0:	bf48      	it	mi
 800ebd2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ebd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ebda:	0d1b      	lsrs	r3, r3, #20
 800ebdc:	051b      	lsls	r3, r3, #20
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1bb      	bne.n	800eb5a <_strtod_l+0x72>
 800ebe2:	f002 f857 	bl	8010c94 <__errno>
 800ebe6:	2322      	movs	r3, #34	@ 0x22
 800ebe8:	6003      	str	r3, [r0, #0]
 800ebea:	e7b6      	b.n	800eb5a <_strtod_l+0x72>
 800ebec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ebf0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ebf4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ebf8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ebfc:	e7e7      	b.n	800ebce <_strtod_l+0xe6>
 800ebfe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ed7c <_strtod_l+0x294>
 800ec02:	e7e4      	b.n	800ebce <_strtod_l+0xe6>
 800ec04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ec08:	f04f 3aff 	mov.w	sl, #4294967295
 800ec0c:	e7df      	b.n	800ebce <_strtod_l+0xe6>
 800ec0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec10:	1c5a      	adds	r2, r3, #1
 800ec12:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec14:	785b      	ldrb	r3, [r3, #1]
 800ec16:	2b30      	cmp	r3, #48	@ 0x30
 800ec18:	d0f9      	beq.n	800ec0e <_strtod_l+0x126>
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d09d      	beq.n	800eb5a <_strtod_l+0x72>
 800ec1e:	2301      	movs	r3, #1
 800ec20:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec24:	930c      	str	r3, [sp, #48]	@ 0x30
 800ec26:	2300      	movs	r3, #0
 800ec28:	9308      	str	r3, [sp, #32]
 800ec2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec2c:	461f      	mov	r7, r3
 800ec2e:	220a      	movs	r2, #10
 800ec30:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ec32:	7805      	ldrb	r5, [r0, #0]
 800ec34:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ec38:	b2d9      	uxtb	r1, r3
 800ec3a:	2909      	cmp	r1, #9
 800ec3c:	d928      	bls.n	800ec90 <_strtod_l+0x1a8>
 800ec3e:	494e      	ldr	r1, [pc, #312]	@ (800ed78 <_strtod_l+0x290>)
 800ec40:	2201      	movs	r2, #1
 800ec42:	f001 ff3c 	bl	8010abe <strncmp>
 800ec46:	2800      	cmp	r0, #0
 800ec48:	d032      	beq.n	800ecb0 <_strtod_l+0x1c8>
 800ec4a:	2000      	movs	r0, #0
 800ec4c:	462a      	mov	r2, r5
 800ec4e:	4681      	mov	r9, r0
 800ec50:	463d      	mov	r5, r7
 800ec52:	4603      	mov	r3, r0
 800ec54:	2a65      	cmp	r2, #101	@ 0x65
 800ec56:	d001      	beq.n	800ec5c <_strtod_l+0x174>
 800ec58:	2a45      	cmp	r2, #69	@ 0x45
 800ec5a:	d114      	bne.n	800ec86 <_strtod_l+0x19e>
 800ec5c:	b91d      	cbnz	r5, 800ec66 <_strtod_l+0x17e>
 800ec5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec60:	4302      	orrs	r2, r0
 800ec62:	d095      	beq.n	800eb90 <_strtod_l+0xa8>
 800ec64:	2500      	movs	r5, #0
 800ec66:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ec68:	1c62      	adds	r2, r4, #1
 800ec6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec6c:	7862      	ldrb	r2, [r4, #1]
 800ec6e:	2a2b      	cmp	r2, #43	@ 0x2b
 800ec70:	d077      	beq.n	800ed62 <_strtod_l+0x27a>
 800ec72:	2a2d      	cmp	r2, #45	@ 0x2d
 800ec74:	d07b      	beq.n	800ed6e <_strtod_l+0x286>
 800ec76:	f04f 0c00 	mov.w	ip, #0
 800ec7a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ec7e:	2909      	cmp	r1, #9
 800ec80:	f240 8082 	bls.w	800ed88 <_strtod_l+0x2a0>
 800ec84:	9419      	str	r4, [sp, #100]	@ 0x64
 800ec86:	f04f 0800 	mov.w	r8, #0
 800ec8a:	e0a2      	b.n	800edd2 <_strtod_l+0x2ea>
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	e7c7      	b.n	800ec20 <_strtod_l+0x138>
 800ec90:	2f08      	cmp	r7, #8
 800ec92:	bfd5      	itete	le
 800ec94:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ec96:	9908      	ldrgt	r1, [sp, #32]
 800ec98:	fb02 3301 	mlale	r3, r2, r1, r3
 800ec9c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800eca0:	f100 0001 	add.w	r0, r0, #1
 800eca4:	bfd4      	ite	le
 800eca6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800eca8:	9308      	strgt	r3, [sp, #32]
 800ecaa:	3701      	adds	r7, #1
 800ecac:	9019      	str	r0, [sp, #100]	@ 0x64
 800ecae:	e7bf      	b.n	800ec30 <_strtod_l+0x148>
 800ecb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecb2:	1c5a      	adds	r2, r3, #1
 800ecb4:	9219      	str	r2, [sp, #100]	@ 0x64
 800ecb6:	785a      	ldrb	r2, [r3, #1]
 800ecb8:	b37f      	cbz	r7, 800ed1a <_strtod_l+0x232>
 800ecba:	4681      	mov	r9, r0
 800ecbc:	463d      	mov	r5, r7
 800ecbe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ecc2:	2b09      	cmp	r3, #9
 800ecc4:	d912      	bls.n	800ecec <_strtod_l+0x204>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	e7c4      	b.n	800ec54 <_strtod_l+0x16c>
 800ecca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eccc:	1c5a      	adds	r2, r3, #1
 800ecce:	9219      	str	r2, [sp, #100]	@ 0x64
 800ecd0:	785a      	ldrb	r2, [r3, #1]
 800ecd2:	3001      	adds	r0, #1
 800ecd4:	2a30      	cmp	r2, #48	@ 0x30
 800ecd6:	d0f8      	beq.n	800ecca <_strtod_l+0x1e2>
 800ecd8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ecdc:	2b08      	cmp	r3, #8
 800ecde:	f200 84d3 	bhi.w	800f688 <_strtod_l+0xba0>
 800ece2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ece4:	930c      	str	r3, [sp, #48]	@ 0x30
 800ece6:	4681      	mov	r9, r0
 800ece8:	2000      	movs	r0, #0
 800ecea:	4605      	mov	r5, r0
 800ecec:	3a30      	subs	r2, #48	@ 0x30
 800ecee:	f100 0301 	add.w	r3, r0, #1
 800ecf2:	d02a      	beq.n	800ed4a <_strtod_l+0x262>
 800ecf4:	4499      	add	r9, r3
 800ecf6:	eb00 0c05 	add.w	ip, r0, r5
 800ecfa:	462b      	mov	r3, r5
 800ecfc:	210a      	movs	r1, #10
 800ecfe:	4563      	cmp	r3, ip
 800ed00:	d10d      	bne.n	800ed1e <_strtod_l+0x236>
 800ed02:	1c69      	adds	r1, r5, #1
 800ed04:	4401      	add	r1, r0
 800ed06:	4428      	add	r0, r5
 800ed08:	2808      	cmp	r0, #8
 800ed0a:	dc16      	bgt.n	800ed3a <_strtod_l+0x252>
 800ed0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ed0e:	230a      	movs	r3, #10
 800ed10:	fb03 2300 	mla	r3, r3, r0, r2
 800ed14:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed16:	2300      	movs	r3, #0
 800ed18:	e018      	b.n	800ed4c <_strtod_l+0x264>
 800ed1a:	4638      	mov	r0, r7
 800ed1c:	e7da      	b.n	800ecd4 <_strtod_l+0x1ec>
 800ed1e:	2b08      	cmp	r3, #8
 800ed20:	f103 0301 	add.w	r3, r3, #1
 800ed24:	dc03      	bgt.n	800ed2e <_strtod_l+0x246>
 800ed26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ed28:	434e      	muls	r6, r1
 800ed2a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ed2c:	e7e7      	b.n	800ecfe <_strtod_l+0x216>
 800ed2e:	2b10      	cmp	r3, #16
 800ed30:	bfde      	ittt	le
 800ed32:	9e08      	ldrle	r6, [sp, #32]
 800ed34:	434e      	mulle	r6, r1
 800ed36:	9608      	strle	r6, [sp, #32]
 800ed38:	e7e1      	b.n	800ecfe <_strtod_l+0x216>
 800ed3a:	280f      	cmp	r0, #15
 800ed3c:	dceb      	bgt.n	800ed16 <_strtod_l+0x22e>
 800ed3e:	9808      	ldr	r0, [sp, #32]
 800ed40:	230a      	movs	r3, #10
 800ed42:	fb03 2300 	mla	r3, r3, r0, r2
 800ed46:	9308      	str	r3, [sp, #32]
 800ed48:	e7e5      	b.n	800ed16 <_strtod_l+0x22e>
 800ed4a:	4629      	mov	r1, r5
 800ed4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ed4e:	1c50      	adds	r0, r2, #1
 800ed50:	9019      	str	r0, [sp, #100]	@ 0x64
 800ed52:	7852      	ldrb	r2, [r2, #1]
 800ed54:	4618      	mov	r0, r3
 800ed56:	460d      	mov	r5, r1
 800ed58:	e7b1      	b.n	800ecbe <_strtod_l+0x1d6>
 800ed5a:	f04f 0900 	mov.w	r9, #0
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e77d      	b.n	800ec5e <_strtod_l+0x176>
 800ed62:	f04f 0c00 	mov.w	ip, #0
 800ed66:	1ca2      	adds	r2, r4, #2
 800ed68:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed6a:	78a2      	ldrb	r2, [r4, #2]
 800ed6c:	e785      	b.n	800ec7a <_strtod_l+0x192>
 800ed6e:	f04f 0c01 	mov.w	ip, #1
 800ed72:	e7f8      	b.n	800ed66 <_strtod_l+0x27e>
 800ed74:	08016818 	.word	0x08016818
 800ed78:	08016801 	.word	0x08016801
 800ed7c:	7ff00000 	.word	0x7ff00000
 800ed80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ed82:	1c51      	adds	r1, r2, #1
 800ed84:	9119      	str	r1, [sp, #100]	@ 0x64
 800ed86:	7852      	ldrb	r2, [r2, #1]
 800ed88:	2a30      	cmp	r2, #48	@ 0x30
 800ed8a:	d0f9      	beq.n	800ed80 <_strtod_l+0x298>
 800ed8c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ed90:	2908      	cmp	r1, #8
 800ed92:	f63f af78 	bhi.w	800ec86 <_strtod_l+0x19e>
 800ed96:	3a30      	subs	r2, #48	@ 0x30
 800ed98:	920e      	str	r2, [sp, #56]	@ 0x38
 800ed9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ed9c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ed9e:	f04f 080a 	mov.w	r8, #10
 800eda2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eda4:	1c56      	adds	r6, r2, #1
 800eda6:	9619      	str	r6, [sp, #100]	@ 0x64
 800eda8:	7852      	ldrb	r2, [r2, #1]
 800edaa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800edae:	f1be 0f09 	cmp.w	lr, #9
 800edb2:	d939      	bls.n	800ee28 <_strtod_l+0x340>
 800edb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800edb6:	1a76      	subs	r6, r6, r1
 800edb8:	2e08      	cmp	r6, #8
 800edba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800edbe:	dc03      	bgt.n	800edc8 <_strtod_l+0x2e0>
 800edc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800edc2:	4588      	cmp	r8, r1
 800edc4:	bfa8      	it	ge
 800edc6:	4688      	movge	r8, r1
 800edc8:	f1bc 0f00 	cmp.w	ip, #0
 800edcc:	d001      	beq.n	800edd2 <_strtod_l+0x2ea>
 800edce:	f1c8 0800 	rsb	r8, r8, #0
 800edd2:	2d00      	cmp	r5, #0
 800edd4:	d14e      	bne.n	800ee74 <_strtod_l+0x38c>
 800edd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800edd8:	4308      	orrs	r0, r1
 800edda:	f47f aebe 	bne.w	800eb5a <_strtod_l+0x72>
 800edde:	2b00      	cmp	r3, #0
 800ede0:	f47f aed6 	bne.w	800eb90 <_strtod_l+0xa8>
 800ede4:	2a69      	cmp	r2, #105	@ 0x69
 800ede6:	d028      	beq.n	800ee3a <_strtod_l+0x352>
 800ede8:	dc25      	bgt.n	800ee36 <_strtod_l+0x34e>
 800edea:	2a49      	cmp	r2, #73	@ 0x49
 800edec:	d025      	beq.n	800ee3a <_strtod_l+0x352>
 800edee:	2a4e      	cmp	r2, #78	@ 0x4e
 800edf0:	f47f aece 	bne.w	800eb90 <_strtod_l+0xa8>
 800edf4:	499b      	ldr	r1, [pc, #620]	@ (800f064 <_strtod_l+0x57c>)
 800edf6:	a819      	add	r0, sp, #100	@ 0x64
 800edf8:	f003 f8be 	bl	8011f78 <__match>
 800edfc:	2800      	cmp	r0, #0
 800edfe:	f43f aec7 	beq.w	800eb90 <_strtod_l+0xa8>
 800ee02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	2b28      	cmp	r3, #40	@ 0x28
 800ee08:	d12e      	bne.n	800ee68 <_strtod_l+0x380>
 800ee0a:	4997      	ldr	r1, [pc, #604]	@ (800f068 <_strtod_l+0x580>)
 800ee0c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ee0e:	a819      	add	r0, sp, #100	@ 0x64
 800ee10:	f003 f8c6 	bl	8011fa0 <__hexnan>
 800ee14:	2805      	cmp	r0, #5
 800ee16:	d127      	bne.n	800ee68 <_strtod_l+0x380>
 800ee18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ee1a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ee1e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ee22:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ee26:	e698      	b.n	800eb5a <_strtod_l+0x72>
 800ee28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ee2a:	fb08 2101 	mla	r1, r8, r1, r2
 800ee2e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ee32:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee34:	e7b5      	b.n	800eda2 <_strtod_l+0x2ba>
 800ee36:	2a6e      	cmp	r2, #110	@ 0x6e
 800ee38:	e7da      	b.n	800edf0 <_strtod_l+0x308>
 800ee3a:	498c      	ldr	r1, [pc, #560]	@ (800f06c <_strtod_l+0x584>)
 800ee3c:	a819      	add	r0, sp, #100	@ 0x64
 800ee3e:	f003 f89b 	bl	8011f78 <__match>
 800ee42:	2800      	cmp	r0, #0
 800ee44:	f43f aea4 	beq.w	800eb90 <_strtod_l+0xa8>
 800ee48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee4a:	4989      	ldr	r1, [pc, #548]	@ (800f070 <_strtod_l+0x588>)
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	a819      	add	r0, sp, #100	@ 0x64
 800ee50:	9319      	str	r3, [sp, #100]	@ 0x64
 800ee52:	f003 f891 	bl	8011f78 <__match>
 800ee56:	b910      	cbnz	r0, 800ee5e <_strtod_l+0x376>
 800ee58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ee5e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f080 <_strtod_l+0x598>
 800ee62:	f04f 0a00 	mov.w	sl, #0
 800ee66:	e678      	b.n	800eb5a <_strtod_l+0x72>
 800ee68:	4882      	ldr	r0, [pc, #520]	@ (800f074 <_strtod_l+0x58c>)
 800ee6a:	f001 ff55 	bl	8010d18 <nan>
 800ee6e:	ec5b ab10 	vmov	sl, fp, d0
 800ee72:	e672      	b.n	800eb5a <_strtod_l+0x72>
 800ee74:	eba8 0309 	sub.w	r3, r8, r9
 800ee78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ee7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee7c:	2f00      	cmp	r7, #0
 800ee7e:	bf08      	it	eq
 800ee80:	462f      	moveq	r7, r5
 800ee82:	2d10      	cmp	r5, #16
 800ee84:	462c      	mov	r4, r5
 800ee86:	bfa8      	it	ge
 800ee88:	2410      	movge	r4, #16
 800ee8a:	f7f1 fb7b 	bl	8000584 <__aeabi_ui2d>
 800ee8e:	2d09      	cmp	r5, #9
 800ee90:	4682      	mov	sl, r0
 800ee92:	468b      	mov	fp, r1
 800ee94:	dc13      	bgt.n	800eebe <_strtod_l+0x3d6>
 800ee96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	f43f ae5e 	beq.w	800eb5a <_strtod_l+0x72>
 800ee9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eea0:	dd78      	ble.n	800ef94 <_strtod_l+0x4ac>
 800eea2:	2b16      	cmp	r3, #22
 800eea4:	dc5f      	bgt.n	800ef66 <_strtod_l+0x47e>
 800eea6:	4974      	ldr	r1, [pc, #464]	@ (800f078 <_strtod_l+0x590>)
 800eea8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eeac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eeb0:	4652      	mov	r2, sl
 800eeb2:	465b      	mov	r3, fp
 800eeb4:	f7f1 fbe0 	bl	8000678 <__aeabi_dmul>
 800eeb8:	4682      	mov	sl, r0
 800eeba:	468b      	mov	fp, r1
 800eebc:	e64d      	b.n	800eb5a <_strtod_l+0x72>
 800eebe:	4b6e      	ldr	r3, [pc, #440]	@ (800f078 <_strtod_l+0x590>)
 800eec0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eec4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800eec8:	f7f1 fbd6 	bl	8000678 <__aeabi_dmul>
 800eecc:	4682      	mov	sl, r0
 800eece:	9808      	ldr	r0, [sp, #32]
 800eed0:	468b      	mov	fp, r1
 800eed2:	f7f1 fb57 	bl	8000584 <__aeabi_ui2d>
 800eed6:	4602      	mov	r2, r0
 800eed8:	460b      	mov	r3, r1
 800eeda:	4650      	mov	r0, sl
 800eedc:	4659      	mov	r1, fp
 800eede:	f7f1 fa15 	bl	800030c <__adddf3>
 800eee2:	2d0f      	cmp	r5, #15
 800eee4:	4682      	mov	sl, r0
 800eee6:	468b      	mov	fp, r1
 800eee8:	ddd5      	ble.n	800ee96 <_strtod_l+0x3ae>
 800eeea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eeec:	1b2c      	subs	r4, r5, r4
 800eeee:	441c      	add	r4, r3
 800eef0:	2c00      	cmp	r4, #0
 800eef2:	f340 8096 	ble.w	800f022 <_strtod_l+0x53a>
 800eef6:	f014 030f 	ands.w	r3, r4, #15
 800eefa:	d00a      	beq.n	800ef12 <_strtod_l+0x42a>
 800eefc:	495e      	ldr	r1, [pc, #376]	@ (800f078 <_strtod_l+0x590>)
 800eefe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ef02:	4652      	mov	r2, sl
 800ef04:	465b      	mov	r3, fp
 800ef06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef0a:	f7f1 fbb5 	bl	8000678 <__aeabi_dmul>
 800ef0e:	4682      	mov	sl, r0
 800ef10:	468b      	mov	fp, r1
 800ef12:	f034 040f 	bics.w	r4, r4, #15
 800ef16:	d073      	beq.n	800f000 <_strtod_l+0x518>
 800ef18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ef1c:	dd48      	ble.n	800efb0 <_strtod_l+0x4c8>
 800ef1e:	2400      	movs	r4, #0
 800ef20:	46a0      	mov	r8, r4
 800ef22:	940a      	str	r4, [sp, #40]	@ 0x28
 800ef24:	46a1      	mov	r9, r4
 800ef26:	9a05      	ldr	r2, [sp, #20]
 800ef28:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f080 <_strtod_l+0x598>
 800ef2c:	2322      	movs	r3, #34	@ 0x22
 800ef2e:	6013      	str	r3, [r2, #0]
 800ef30:	f04f 0a00 	mov.w	sl, #0
 800ef34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	f43f ae0f 	beq.w	800eb5a <_strtod_l+0x72>
 800ef3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef3e:	9805      	ldr	r0, [sp, #20]
 800ef40:	f003 f91c 	bl	801217c <_Bfree>
 800ef44:	9805      	ldr	r0, [sp, #20]
 800ef46:	4649      	mov	r1, r9
 800ef48:	f003 f918 	bl	801217c <_Bfree>
 800ef4c:	9805      	ldr	r0, [sp, #20]
 800ef4e:	4641      	mov	r1, r8
 800ef50:	f003 f914 	bl	801217c <_Bfree>
 800ef54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ef56:	9805      	ldr	r0, [sp, #20]
 800ef58:	f003 f910 	bl	801217c <_Bfree>
 800ef5c:	9805      	ldr	r0, [sp, #20]
 800ef5e:	4621      	mov	r1, r4
 800ef60:	f003 f90c 	bl	801217c <_Bfree>
 800ef64:	e5f9      	b.n	800eb5a <_strtod_l+0x72>
 800ef66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	dbbc      	blt.n	800eeea <_strtod_l+0x402>
 800ef70:	4c41      	ldr	r4, [pc, #260]	@ (800f078 <_strtod_l+0x590>)
 800ef72:	f1c5 050f 	rsb	r5, r5, #15
 800ef76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ef7a:	4652      	mov	r2, sl
 800ef7c:	465b      	mov	r3, fp
 800ef7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef82:	f7f1 fb79 	bl	8000678 <__aeabi_dmul>
 800ef86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef88:	1b5d      	subs	r5, r3, r5
 800ef8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ef8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ef92:	e78f      	b.n	800eeb4 <_strtod_l+0x3cc>
 800ef94:	3316      	adds	r3, #22
 800ef96:	dba8      	blt.n	800eeea <_strtod_l+0x402>
 800ef98:	4b37      	ldr	r3, [pc, #220]	@ (800f078 <_strtod_l+0x590>)
 800ef9a:	eba9 0808 	sub.w	r8, r9, r8
 800ef9e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800efa2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800efa6:	4650      	mov	r0, sl
 800efa8:	4659      	mov	r1, fp
 800efaa:	f7f1 fc8f 	bl	80008cc <__aeabi_ddiv>
 800efae:	e783      	b.n	800eeb8 <_strtod_l+0x3d0>
 800efb0:	4b32      	ldr	r3, [pc, #200]	@ (800f07c <_strtod_l+0x594>)
 800efb2:	9308      	str	r3, [sp, #32]
 800efb4:	2300      	movs	r3, #0
 800efb6:	1124      	asrs	r4, r4, #4
 800efb8:	4650      	mov	r0, sl
 800efba:	4659      	mov	r1, fp
 800efbc:	461e      	mov	r6, r3
 800efbe:	2c01      	cmp	r4, #1
 800efc0:	dc21      	bgt.n	800f006 <_strtod_l+0x51e>
 800efc2:	b10b      	cbz	r3, 800efc8 <_strtod_l+0x4e0>
 800efc4:	4682      	mov	sl, r0
 800efc6:	468b      	mov	fp, r1
 800efc8:	492c      	ldr	r1, [pc, #176]	@ (800f07c <_strtod_l+0x594>)
 800efca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800efce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800efd2:	4652      	mov	r2, sl
 800efd4:	465b      	mov	r3, fp
 800efd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efda:	f7f1 fb4d 	bl	8000678 <__aeabi_dmul>
 800efde:	4b28      	ldr	r3, [pc, #160]	@ (800f080 <_strtod_l+0x598>)
 800efe0:	460a      	mov	r2, r1
 800efe2:	400b      	ands	r3, r1
 800efe4:	4927      	ldr	r1, [pc, #156]	@ (800f084 <_strtod_l+0x59c>)
 800efe6:	428b      	cmp	r3, r1
 800efe8:	4682      	mov	sl, r0
 800efea:	d898      	bhi.n	800ef1e <_strtod_l+0x436>
 800efec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800eff0:	428b      	cmp	r3, r1
 800eff2:	bf86      	itte	hi
 800eff4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f088 <_strtod_l+0x5a0>
 800eff8:	f04f 3aff 	movhi.w	sl, #4294967295
 800effc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f000:	2300      	movs	r3, #0
 800f002:	9308      	str	r3, [sp, #32]
 800f004:	e07a      	b.n	800f0fc <_strtod_l+0x614>
 800f006:	07e2      	lsls	r2, r4, #31
 800f008:	d505      	bpl.n	800f016 <_strtod_l+0x52e>
 800f00a:	9b08      	ldr	r3, [sp, #32]
 800f00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f010:	f7f1 fb32 	bl	8000678 <__aeabi_dmul>
 800f014:	2301      	movs	r3, #1
 800f016:	9a08      	ldr	r2, [sp, #32]
 800f018:	3208      	adds	r2, #8
 800f01a:	3601      	adds	r6, #1
 800f01c:	1064      	asrs	r4, r4, #1
 800f01e:	9208      	str	r2, [sp, #32]
 800f020:	e7cd      	b.n	800efbe <_strtod_l+0x4d6>
 800f022:	d0ed      	beq.n	800f000 <_strtod_l+0x518>
 800f024:	4264      	negs	r4, r4
 800f026:	f014 020f 	ands.w	r2, r4, #15
 800f02a:	d00a      	beq.n	800f042 <_strtod_l+0x55a>
 800f02c:	4b12      	ldr	r3, [pc, #72]	@ (800f078 <_strtod_l+0x590>)
 800f02e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f032:	4650      	mov	r0, sl
 800f034:	4659      	mov	r1, fp
 800f036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03a:	f7f1 fc47 	bl	80008cc <__aeabi_ddiv>
 800f03e:	4682      	mov	sl, r0
 800f040:	468b      	mov	fp, r1
 800f042:	1124      	asrs	r4, r4, #4
 800f044:	d0dc      	beq.n	800f000 <_strtod_l+0x518>
 800f046:	2c1f      	cmp	r4, #31
 800f048:	dd20      	ble.n	800f08c <_strtod_l+0x5a4>
 800f04a:	2400      	movs	r4, #0
 800f04c:	46a0      	mov	r8, r4
 800f04e:	940a      	str	r4, [sp, #40]	@ 0x28
 800f050:	46a1      	mov	r9, r4
 800f052:	9a05      	ldr	r2, [sp, #20]
 800f054:	2322      	movs	r3, #34	@ 0x22
 800f056:	f04f 0a00 	mov.w	sl, #0
 800f05a:	f04f 0b00 	mov.w	fp, #0
 800f05e:	6013      	str	r3, [r2, #0]
 800f060:	e768      	b.n	800ef34 <_strtod_l+0x44c>
 800f062:	bf00      	nop
 800f064:	08016966 	.word	0x08016966
 800f068:	08016804 	.word	0x08016804
 800f06c:	0801695e 	.word	0x0801695e
 800f070:	0801699b 	.word	0x0801699b
 800f074:	08016c47 	.word	0x08016c47
 800f078:	08016b18 	.word	0x08016b18
 800f07c:	08016af0 	.word	0x08016af0
 800f080:	7ff00000 	.word	0x7ff00000
 800f084:	7ca00000 	.word	0x7ca00000
 800f088:	7fefffff 	.word	0x7fefffff
 800f08c:	f014 0310 	ands.w	r3, r4, #16
 800f090:	bf18      	it	ne
 800f092:	236a      	movne	r3, #106	@ 0x6a
 800f094:	4ea9      	ldr	r6, [pc, #676]	@ (800f33c <_strtod_l+0x854>)
 800f096:	9308      	str	r3, [sp, #32]
 800f098:	4650      	mov	r0, sl
 800f09a:	4659      	mov	r1, fp
 800f09c:	2300      	movs	r3, #0
 800f09e:	07e2      	lsls	r2, r4, #31
 800f0a0:	d504      	bpl.n	800f0ac <_strtod_l+0x5c4>
 800f0a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f0a6:	f7f1 fae7 	bl	8000678 <__aeabi_dmul>
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	1064      	asrs	r4, r4, #1
 800f0ae:	f106 0608 	add.w	r6, r6, #8
 800f0b2:	d1f4      	bne.n	800f09e <_strtod_l+0x5b6>
 800f0b4:	b10b      	cbz	r3, 800f0ba <_strtod_l+0x5d2>
 800f0b6:	4682      	mov	sl, r0
 800f0b8:	468b      	mov	fp, r1
 800f0ba:	9b08      	ldr	r3, [sp, #32]
 800f0bc:	b1b3      	cbz	r3, 800f0ec <_strtod_l+0x604>
 800f0be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f0c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	4659      	mov	r1, fp
 800f0ca:	dd0f      	ble.n	800f0ec <_strtod_l+0x604>
 800f0cc:	2b1f      	cmp	r3, #31
 800f0ce:	dd55      	ble.n	800f17c <_strtod_l+0x694>
 800f0d0:	2b34      	cmp	r3, #52	@ 0x34
 800f0d2:	bfde      	ittt	le
 800f0d4:	f04f 33ff 	movle.w	r3, #4294967295
 800f0d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f0dc:	4093      	lslle	r3, r2
 800f0de:	f04f 0a00 	mov.w	sl, #0
 800f0e2:	bfcc      	ite	gt
 800f0e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f0e8:	ea03 0b01 	andle.w	fp, r3, r1
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	4650      	mov	r0, sl
 800f0f2:	4659      	mov	r1, fp
 800f0f4:	f7f1 fd28 	bl	8000b48 <__aeabi_dcmpeq>
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	d1a6      	bne.n	800f04a <_strtod_l+0x562>
 800f0fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0fe:	9300      	str	r3, [sp, #0]
 800f100:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f102:	9805      	ldr	r0, [sp, #20]
 800f104:	462b      	mov	r3, r5
 800f106:	463a      	mov	r2, r7
 800f108:	f003 f8a0 	bl	801224c <__s2b>
 800f10c:	900a      	str	r0, [sp, #40]	@ 0x28
 800f10e:	2800      	cmp	r0, #0
 800f110:	f43f af05 	beq.w	800ef1e <_strtod_l+0x436>
 800f114:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f116:	2a00      	cmp	r2, #0
 800f118:	eba9 0308 	sub.w	r3, r9, r8
 800f11c:	bfa8      	it	ge
 800f11e:	2300      	movge	r3, #0
 800f120:	9312      	str	r3, [sp, #72]	@ 0x48
 800f122:	2400      	movs	r4, #0
 800f124:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f128:	9316      	str	r3, [sp, #88]	@ 0x58
 800f12a:	46a0      	mov	r8, r4
 800f12c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f12e:	9805      	ldr	r0, [sp, #20]
 800f130:	6859      	ldr	r1, [r3, #4]
 800f132:	f002 ffe3 	bl	80120fc <_Balloc>
 800f136:	4681      	mov	r9, r0
 800f138:	2800      	cmp	r0, #0
 800f13a:	f43f aef4 	beq.w	800ef26 <_strtod_l+0x43e>
 800f13e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f140:	691a      	ldr	r2, [r3, #16]
 800f142:	3202      	adds	r2, #2
 800f144:	f103 010c 	add.w	r1, r3, #12
 800f148:	0092      	lsls	r2, r2, #2
 800f14a:	300c      	adds	r0, #12
 800f14c:	f001 fdd4 	bl	8010cf8 <memcpy>
 800f150:	ec4b ab10 	vmov	d0, sl, fp
 800f154:	9805      	ldr	r0, [sp, #20]
 800f156:	aa1c      	add	r2, sp, #112	@ 0x70
 800f158:	a91b      	add	r1, sp, #108	@ 0x6c
 800f15a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f15e:	f003 fbb1 	bl	80128c4 <__d2b>
 800f162:	901a      	str	r0, [sp, #104]	@ 0x68
 800f164:	2800      	cmp	r0, #0
 800f166:	f43f aede 	beq.w	800ef26 <_strtod_l+0x43e>
 800f16a:	9805      	ldr	r0, [sp, #20]
 800f16c:	2101      	movs	r1, #1
 800f16e:	f003 f903 	bl	8012378 <__i2b>
 800f172:	4680      	mov	r8, r0
 800f174:	b948      	cbnz	r0, 800f18a <_strtod_l+0x6a2>
 800f176:	f04f 0800 	mov.w	r8, #0
 800f17a:	e6d4      	b.n	800ef26 <_strtod_l+0x43e>
 800f17c:	f04f 32ff 	mov.w	r2, #4294967295
 800f180:	fa02 f303 	lsl.w	r3, r2, r3
 800f184:	ea03 0a0a 	and.w	sl, r3, sl
 800f188:	e7b0      	b.n	800f0ec <_strtod_l+0x604>
 800f18a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f18c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f18e:	2d00      	cmp	r5, #0
 800f190:	bfab      	itete	ge
 800f192:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f194:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f196:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f198:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f19a:	bfac      	ite	ge
 800f19c:	18ef      	addge	r7, r5, r3
 800f19e:	1b5e      	sublt	r6, r3, r5
 800f1a0:	9b08      	ldr	r3, [sp, #32]
 800f1a2:	1aed      	subs	r5, r5, r3
 800f1a4:	4415      	add	r5, r2
 800f1a6:	4b66      	ldr	r3, [pc, #408]	@ (800f340 <_strtod_l+0x858>)
 800f1a8:	3d01      	subs	r5, #1
 800f1aa:	429d      	cmp	r5, r3
 800f1ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f1b0:	da50      	bge.n	800f254 <_strtod_l+0x76c>
 800f1b2:	1b5b      	subs	r3, r3, r5
 800f1b4:	2b1f      	cmp	r3, #31
 800f1b6:	eba2 0203 	sub.w	r2, r2, r3
 800f1ba:	f04f 0101 	mov.w	r1, #1
 800f1be:	dc3d      	bgt.n	800f23c <_strtod_l+0x754>
 800f1c0:	fa01 f303 	lsl.w	r3, r1, r3
 800f1c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f1ca:	18bd      	adds	r5, r7, r2
 800f1cc:	9b08      	ldr	r3, [sp, #32]
 800f1ce:	42af      	cmp	r7, r5
 800f1d0:	4416      	add	r6, r2
 800f1d2:	441e      	add	r6, r3
 800f1d4:	463b      	mov	r3, r7
 800f1d6:	bfa8      	it	ge
 800f1d8:	462b      	movge	r3, r5
 800f1da:	42b3      	cmp	r3, r6
 800f1dc:	bfa8      	it	ge
 800f1de:	4633      	movge	r3, r6
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	bfc2      	ittt	gt
 800f1e4:	1aed      	subgt	r5, r5, r3
 800f1e6:	1af6      	subgt	r6, r6, r3
 800f1e8:	1aff      	subgt	r7, r7, r3
 800f1ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	dd16      	ble.n	800f21e <_strtod_l+0x736>
 800f1f0:	4641      	mov	r1, r8
 800f1f2:	9805      	ldr	r0, [sp, #20]
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	f003 f97f 	bl	80124f8 <__pow5mult>
 800f1fa:	4680      	mov	r8, r0
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d0ba      	beq.n	800f176 <_strtod_l+0x68e>
 800f200:	4601      	mov	r1, r0
 800f202:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f204:	9805      	ldr	r0, [sp, #20]
 800f206:	f003 f8cd 	bl	80123a4 <__multiply>
 800f20a:	900e      	str	r0, [sp, #56]	@ 0x38
 800f20c:	2800      	cmp	r0, #0
 800f20e:	f43f ae8a 	beq.w	800ef26 <_strtod_l+0x43e>
 800f212:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f214:	9805      	ldr	r0, [sp, #20]
 800f216:	f002 ffb1 	bl	801217c <_Bfree>
 800f21a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f21c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f21e:	2d00      	cmp	r5, #0
 800f220:	dc1d      	bgt.n	800f25e <_strtod_l+0x776>
 800f222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f224:	2b00      	cmp	r3, #0
 800f226:	dd23      	ble.n	800f270 <_strtod_l+0x788>
 800f228:	4649      	mov	r1, r9
 800f22a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f22c:	9805      	ldr	r0, [sp, #20]
 800f22e:	f003 f963 	bl	80124f8 <__pow5mult>
 800f232:	4681      	mov	r9, r0
 800f234:	b9e0      	cbnz	r0, 800f270 <_strtod_l+0x788>
 800f236:	f04f 0900 	mov.w	r9, #0
 800f23a:	e674      	b.n	800ef26 <_strtod_l+0x43e>
 800f23c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f240:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f244:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f248:	35e2      	adds	r5, #226	@ 0xe2
 800f24a:	fa01 f305 	lsl.w	r3, r1, r5
 800f24e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f250:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f252:	e7ba      	b.n	800f1ca <_strtod_l+0x6e2>
 800f254:	2300      	movs	r3, #0
 800f256:	9310      	str	r3, [sp, #64]	@ 0x40
 800f258:	2301      	movs	r3, #1
 800f25a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f25c:	e7b5      	b.n	800f1ca <_strtod_l+0x6e2>
 800f25e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f260:	9805      	ldr	r0, [sp, #20]
 800f262:	462a      	mov	r2, r5
 800f264:	f003 f9a2 	bl	80125ac <__lshift>
 800f268:	901a      	str	r0, [sp, #104]	@ 0x68
 800f26a:	2800      	cmp	r0, #0
 800f26c:	d1d9      	bne.n	800f222 <_strtod_l+0x73a>
 800f26e:	e65a      	b.n	800ef26 <_strtod_l+0x43e>
 800f270:	2e00      	cmp	r6, #0
 800f272:	dd07      	ble.n	800f284 <_strtod_l+0x79c>
 800f274:	4649      	mov	r1, r9
 800f276:	9805      	ldr	r0, [sp, #20]
 800f278:	4632      	mov	r2, r6
 800f27a:	f003 f997 	bl	80125ac <__lshift>
 800f27e:	4681      	mov	r9, r0
 800f280:	2800      	cmp	r0, #0
 800f282:	d0d8      	beq.n	800f236 <_strtod_l+0x74e>
 800f284:	2f00      	cmp	r7, #0
 800f286:	dd08      	ble.n	800f29a <_strtod_l+0x7b2>
 800f288:	4641      	mov	r1, r8
 800f28a:	9805      	ldr	r0, [sp, #20]
 800f28c:	463a      	mov	r2, r7
 800f28e:	f003 f98d 	bl	80125ac <__lshift>
 800f292:	4680      	mov	r8, r0
 800f294:	2800      	cmp	r0, #0
 800f296:	f43f ae46 	beq.w	800ef26 <_strtod_l+0x43e>
 800f29a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f29c:	9805      	ldr	r0, [sp, #20]
 800f29e:	464a      	mov	r2, r9
 800f2a0:	f003 fa0c 	bl	80126bc <__mdiff>
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	f43f ae3d 	beq.w	800ef26 <_strtod_l+0x43e>
 800f2ac:	68c3      	ldr	r3, [r0, #12]
 800f2ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	60c3      	str	r3, [r0, #12]
 800f2b4:	4641      	mov	r1, r8
 800f2b6:	f003 f9e5 	bl	8012684 <__mcmp>
 800f2ba:	2800      	cmp	r0, #0
 800f2bc:	da46      	bge.n	800f34c <_strtod_l+0x864>
 800f2be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2c0:	ea53 030a 	orrs.w	r3, r3, sl
 800f2c4:	d16c      	bne.n	800f3a0 <_strtod_l+0x8b8>
 800f2c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d168      	bne.n	800f3a0 <_strtod_l+0x8b8>
 800f2ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f2d2:	0d1b      	lsrs	r3, r3, #20
 800f2d4:	051b      	lsls	r3, r3, #20
 800f2d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f2da:	d961      	bls.n	800f3a0 <_strtod_l+0x8b8>
 800f2dc:	6963      	ldr	r3, [r4, #20]
 800f2de:	b913      	cbnz	r3, 800f2e6 <_strtod_l+0x7fe>
 800f2e0:	6923      	ldr	r3, [r4, #16]
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	dd5c      	ble.n	800f3a0 <_strtod_l+0x8b8>
 800f2e6:	4621      	mov	r1, r4
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	9805      	ldr	r0, [sp, #20]
 800f2ec:	f003 f95e 	bl	80125ac <__lshift>
 800f2f0:	4641      	mov	r1, r8
 800f2f2:	4604      	mov	r4, r0
 800f2f4:	f003 f9c6 	bl	8012684 <__mcmp>
 800f2f8:	2800      	cmp	r0, #0
 800f2fa:	dd51      	ble.n	800f3a0 <_strtod_l+0x8b8>
 800f2fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f300:	9a08      	ldr	r2, [sp, #32]
 800f302:	0d1b      	lsrs	r3, r3, #20
 800f304:	051b      	lsls	r3, r3, #20
 800f306:	2a00      	cmp	r2, #0
 800f308:	d06b      	beq.n	800f3e2 <_strtod_l+0x8fa>
 800f30a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f30e:	d868      	bhi.n	800f3e2 <_strtod_l+0x8fa>
 800f310:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f314:	f67f ae9d 	bls.w	800f052 <_strtod_l+0x56a>
 800f318:	4b0a      	ldr	r3, [pc, #40]	@ (800f344 <_strtod_l+0x85c>)
 800f31a:	4650      	mov	r0, sl
 800f31c:	4659      	mov	r1, fp
 800f31e:	2200      	movs	r2, #0
 800f320:	f7f1 f9aa 	bl	8000678 <__aeabi_dmul>
 800f324:	4b08      	ldr	r3, [pc, #32]	@ (800f348 <_strtod_l+0x860>)
 800f326:	400b      	ands	r3, r1
 800f328:	4682      	mov	sl, r0
 800f32a:	468b      	mov	fp, r1
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	f47f ae05 	bne.w	800ef3c <_strtod_l+0x454>
 800f332:	9a05      	ldr	r2, [sp, #20]
 800f334:	2322      	movs	r3, #34	@ 0x22
 800f336:	6013      	str	r3, [r2, #0]
 800f338:	e600      	b.n	800ef3c <_strtod_l+0x454>
 800f33a:	bf00      	nop
 800f33c:	08016830 	.word	0x08016830
 800f340:	fffffc02 	.word	0xfffffc02
 800f344:	39500000 	.word	0x39500000
 800f348:	7ff00000 	.word	0x7ff00000
 800f34c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f350:	d165      	bne.n	800f41e <_strtod_l+0x936>
 800f352:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f354:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f358:	b35a      	cbz	r2, 800f3b2 <_strtod_l+0x8ca>
 800f35a:	4a9f      	ldr	r2, [pc, #636]	@ (800f5d8 <_strtod_l+0xaf0>)
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d12b      	bne.n	800f3b8 <_strtod_l+0x8d0>
 800f360:	9b08      	ldr	r3, [sp, #32]
 800f362:	4651      	mov	r1, sl
 800f364:	b303      	cbz	r3, 800f3a8 <_strtod_l+0x8c0>
 800f366:	4b9d      	ldr	r3, [pc, #628]	@ (800f5dc <_strtod_l+0xaf4>)
 800f368:	465a      	mov	r2, fp
 800f36a:	4013      	ands	r3, r2
 800f36c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f370:	f04f 32ff 	mov.w	r2, #4294967295
 800f374:	d81b      	bhi.n	800f3ae <_strtod_l+0x8c6>
 800f376:	0d1b      	lsrs	r3, r3, #20
 800f378:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f37c:	fa02 f303 	lsl.w	r3, r2, r3
 800f380:	4299      	cmp	r1, r3
 800f382:	d119      	bne.n	800f3b8 <_strtod_l+0x8d0>
 800f384:	4b96      	ldr	r3, [pc, #600]	@ (800f5e0 <_strtod_l+0xaf8>)
 800f386:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f388:	429a      	cmp	r2, r3
 800f38a:	d102      	bne.n	800f392 <_strtod_l+0x8aa>
 800f38c:	3101      	adds	r1, #1
 800f38e:	f43f adca 	beq.w	800ef26 <_strtod_l+0x43e>
 800f392:	4b92      	ldr	r3, [pc, #584]	@ (800f5dc <_strtod_l+0xaf4>)
 800f394:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f396:	401a      	ands	r2, r3
 800f398:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f39c:	f04f 0a00 	mov.w	sl, #0
 800f3a0:	9b08      	ldr	r3, [sp, #32]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d1b8      	bne.n	800f318 <_strtod_l+0x830>
 800f3a6:	e5c9      	b.n	800ef3c <_strtod_l+0x454>
 800f3a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ac:	e7e8      	b.n	800f380 <_strtod_l+0x898>
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	e7e6      	b.n	800f380 <_strtod_l+0x898>
 800f3b2:	ea53 030a 	orrs.w	r3, r3, sl
 800f3b6:	d0a1      	beq.n	800f2fc <_strtod_l+0x814>
 800f3b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f3ba:	b1db      	cbz	r3, 800f3f4 <_strtod_l+0x90c>
 800f3bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3be:	4213      	tst	r3, r2
 800f3c0:	d0ee      	beq.n	800f3a0 <_strtod_l+0x8b8>
 800f3c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3c4:	9a08      	ldr	r2, [sp, #32]
 800f3c6:	4650      	mov	r0, sl
 800f3c8:	4659      	mov	r1, fp
 800f3ca:	b1bb      	cbz	r3, 800f3fc <_strtod_l+0x914>
 800f3cc:	f7ff fb6e 	bl	800eaac <sulp>
 800f3d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3d4:	ec53 2b10 	vmov	r2, r3, d0
 800f3d8:	f7f0 ff98 	bl	800030c <__adddf3>
 800f3dc:	4682      	mov	sl, r0
 800f3de:	468b      	mov	fp, r1
 800f3e0:	e7de      	b.n	800f3a0 <_strtod_l+0x8b8>
 800f3e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f3e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f3ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f3ee:	f04f 3aff 	mov.w	sl, #4294967295
 800f3f2:	e7d5      	b.n	800f3a0 <_strtod_l+0x8b8>
 800f3f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f3f6:	ea13 0f0a 	tst.w	r3, sl
 800f3fa:	e7e1      	b.n	800f3c0 <_strtod_l+0x8d8>
 800f3fc:	f7ff fb56 	bl	800eaac <sulp>
 800f400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f404:	ec53 2b10 	vmov	r2, r3, d0
 800f408:	f7f0 ff7e 	bl	8000308 <__aeabi_dsub>
 800f40c:	2200      	movs	r2, #0
 800f40e:	2300      	movs	r3, #0
 800f410:	4682      	mov	sl, r0
 800f412:	468b      	mov	fp, r1
 800f414:	f7f1 fb98 	bl	8000b48 <__aeabi_dcmpeq>
 800f418:	2800      	cmp	r0, #0
 800f41a:	d0c1      	beq.n	800f3a0 <_strtod_l+0x8b8>
 800f41c:	e619      	b.n	800f052 <_strtod_l+0x56a>
 800f41e:	4641      	mov	r1, r8
 800f420:	4620      	mov	r0, r4
 800f422:	f003 faa7 	bl	8012974 <__ratio>
 800f426:	ec57 6b10 	vmov	r6, r7, d0
 800f42a:	2200      	movs	r2, #0
 800f42c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f430:	4630      	mov	r0, r6
 800f432:	4639      	mov	r1, r7
 800f434:	f7f1 fb9c 	bl	8000b70 <__aeabi_dcmple>
 800f438:	2800      	cmp	r0, #0
 800f43a:	d06f      	beq.n	800f51c <_strtod_l+0xa34>
 800f43c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d17a      	bne.n	800f538 <_strtod_l+0xa50>
 800f442:	f1ba 0f00 	cmp.w	sl, #0
 800f446:	d158      	bne.n	800f4fa <_strtod_l+0xa12>
 800f448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f44a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d15a      	bne.n	800f508 <_strtod_l+0xa20>
 800f452:	4b64      	ldr	r3, [pc, #400]	@ (800f5e4 <_strtod_l+0xafc>)
 800f454:	2200      	movs	r2, #0
 800f456:	4630      	mov	r0, r6
 800f458:	4639      	mov	r1, r7
 800f45a:	f7f1 fb7f 	bl	8000b5c <__aeabi_dcmplt>
 800f45e:	2800      	cmp	r0, #0
 800f460:	d159      	bne.n	800f516 <_strtod_l+0xa2e>
 800f462:	4630      	mov	r0, r6
 800f464:	4639      	mov	r1, r7
 800f466:	4b60      	ldr	r3, [pc, #384]	@ (800f5e8 <_strtod_l+0xb00>)
 800f468:	2200      	movs	r2, #0
 800f46a:	f7f1 f905 	bl	8000678 <__aeabi_dmul>
 800f46e:	4606      	mov	r6, r0
 800f470:	460f      	mov	r7, r1
 800f472:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f476:	9606      	str	r6, [sp, #24]
 800f478:	9307      	str	r3, [sp, #28]
 800f47a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f47e:	4d57      	ldr	r5, [pc, #348]	@ (800f5dc <_strtod_l+0xaf4>)
 800f480:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f486:	401d      	ands	r5, r3
 800f488:	4b58      	ldr	r3, [pc, #352]	@ (800f5ec <_strtod_l+0xb04>)
 800f48a:	429d      	cmp	r5, r3
 800f48c:	f040 80b2 	bne.w	800f5f4 <_strtod_l+0xb0c>
 800f490:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f492:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f496:	ec4b ab10 	vmov	d0, sl, fp
 800f49a:	f003 f9a3 	bl	80127e4 <__ulp>
 800f49e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f4a2:	ec51 0b10 	vmov	r0, r1, d0
 800f4a6:	f7f1 f8e7 	bl	8000678 <__aeabi_dmul>
 800f4aa:	4652      	mov	r2, sl
 800f4ac:	465b      	mov	r3, fp
 800f4ae:	f7f0 ff2d 	bl	800030c <__adddf3>
 800f4b2:	460b      	mov	r3, r1
 800f4b4:	4949      	ldr	r1, [pc, #292]	@ (800f5dc <_strtod_l+0xaf4>)
 800f4b6:	4a4e      	ldr	r2, [pc, #312]	@ (800f5f0 <_strtod_l+0xb08>)
 800f4b8:	4019      	ands	r1, r3
 800f4ba:	4291      	cmp	r1, r2
 800f4bc:	4682      	mov	sl, r0
 800f4be:	d942      	bls.n	800f546 <_strtod_l+0xa5e>
 800f4c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f4c2:	4b47      	ldr	r3, [pc, #284]	@ (800f5e0 <_strtod_l+0xaf8>)
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d103      	bne.n	800f4d0 <_strtod_l+0x9e8>
 800f4c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	f43f ad2b 	beq.w	800ef26 <_strtod_l+0x43e>
 800f4d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f5e0 <_strtod_l+0xaf8>
 800f4d4:	f04f 3aff 	mov.w	sl, #4294967295
 800f4d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f4da:	9805      	ldr	r0, [sp, #20]
 800f4dc:	f002 fe4e 	bl	801217c <_Bfree>
 800f4e0:	9805      	ldr	r0, [sp, #20]
 800f4e2:	4649      	mov	r1, r9
 800f4e4:	f002 fe4a 	bl	801217c <_Bfree>
 800f4e8:	9805      	ldr	r0, [sp, #20]
 800f4ea:	4641      	mov	r1, r8
 800f4ec:	f002 fe46 	bl	801217c <_Bfree>
 800f4f0:	9805      	ldr	r0, [sp, #20]
 800f4f2:	4621      	mov	r1, r4
 800f4f4:	f002 fe42 	bl	801217c <_Bfree>
 800f4f8:	e618      	b.n	800f12c <_strtod_l+0x644>
 800f4fa:	f1ba 0f01 	cmp.w	sl, #1
 800f4fe:	d103      	bne.n	800f508 <_strtod_l+0xa20>
 800f500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f502:	2b00      	cmp	r3, #0
 800f504:	f43f ada5 	beq.w	800f052 <_strtod_l+0x56a>
 800f508:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f5b8 <_strtod_l+0xad0>
 800f50c:	4f35      	ldr	r7, [pc, #212]	@ (800f5e4 <_strtod_l+0xafc>)
 800f50e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f512:	2600      	movs	r6, #0
 800f514:	e7b1      	b.n	800f47a <_strtod_l+0x992>
 800f516:	4f34      	ldr	r7, [pc, #208]	@ (800f5e8 <_strtod_l+0xb00>)
 800f518:	2600      	movs	r6, #0
 800f51a:	e7aa      	b.n	800f472 <_strtod_l+0x98a>
 800f51c:	4b32      	ldr	r3, [pc, #200]	@ (800f5e8 <_strtod_l+0xb00>)
 800f51e:	4630      	mov	r0, r6
 800f520:	4639      	mov	r1, r7
 800f522:	2200      	movs	r2, #0
 800f524:	f7f1 f8a8 	bl	8000678 <__aeabi_dmul>
 800f528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f52a:	4606      	mov	r6, r0
 800f52c:	460f      	mov	r7, r1
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d09f      	beq.n	800f472 <_strtod_l+0x98a>
 800f532:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f536:	e7a0      	b.n	800f47a <_strtod_l+0x992>
 800f538:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f5c0 <_strtod_l+0xad8>
 800f53c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f540:	ec57 6b17 	vmov	r6, r7, d7
 800f544:	e799      	b.n	800f47a <_strtod_l+0x992>
 800f546:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f54a:	9b08      	ldr	r3, [sp, #32]
 800f54c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f550:	2b00      	cmp	r3, #0
 800f552:	d1c1      	bne.n	800f4d8 <_strtod_l+0x9f0>
 800f554:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f558:	0d1b      	lsrs	r3, r3, #20
 800f55a:	051b      	lsls	r3, r3, #20
 800f55c:	429d      	cmp	r5, r3
 800f55e:	d1bb      	bne.n	800f4d8 <_strtod_l+0x9f0>
 800f560:	4630      	mov	r0, r6
 800f562:	4639      	mov	r1, r7
 800f564:	f7f1 fd46 	bl	8000ff4 <__aeabi_d2lz>
 800f568:	f7f1 f858 	bl	800061c <__aeabi_l2d>
 800f56c:	4602      	mov	r2, r0
 800f56e:	460b      	mov	r3, r1
 800f570:	4630      	mov	r0, r6
 800f572:	4639      	mov	r1, r7
 800f574:	f7f0 fec8 	bl	8000308 <__aeabi_dsub>
 800f578:	460b      	mov	r3, r1
 800f57a:	4602      	mov	r2, r0
 800f57c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f580:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f586:	ea46 060a 	orr.w	r6, r6, sl
 800f58a:	431e      	orrs	r6, r3
 800f58c:	d06f      	beq.n	800f66e <_strtod_l+0xb86>
 800f58e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f5c8 <_strtod_l+0xae0>)
 800f590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f594:	f7f1 fae2 	bl	8000b5c <__aeabi_dcmplt>
 800f598:	2800      	cmp	r0, #0
 800f59a:	f47f accf 	bne.w	800ef3c <_strtod_l+0x454>
 800f59e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f5d0 <_strtod_l+0xae8>)
 800f5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f5a8:	f7f1 faf6 	bl	8000b98 <__aeabi_dcmpgt>
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	d093      	beq.n	800f4d8 <_strtod_l+0x9f0>
 800f5b0:	e4c4      	b.n	800ef3c <_strtod_l+0x454>
 800f5b2:	bf00      	nop
 800f5b4:	f3af 8000 	nop.w
 800f5b8:	00000000 	.word	0x00000000
 800f5bc:	bff00000 	.word	0xbff00000
 800f5c0:	00000000 	.word	0x00000000
 800f5c4:	3ff00000 	.word	0x3ff00000
 800f5c8:	94a03595 	.word	0x94a03595
 800f5cc:	3fdfffff 	.word	0x3fdfffff
 800f5d0:	35afe535 	.word	0x35afe535
 800f5d4:	3fe00000 	.word	0x3fe00000
 800f5d8:	000fffff 	.word	0x000fffff
 800f5dc:	7ff00000 	.word	0x7ff00000
 800f5e0:	7fefffff 	.word	0x7fefffff
 800f5e4:	3ff00000 	.word	0x3ff00000
 800f5e8:	3fe00000 	.word	0x3fe00000
 800f5ec:	7fe00000 	.word	0x7fe00000
 800f5f0:	7c9fffff 	.word	0x7c9fffff
 800f5f4:	9b08      	ldr	r3, [sp, #32]
 800f5f6:	b323      	cbz	r3, 800f642 <_strtod_l+0xb5a>
 800f5f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f5fc:	d821      	bhi.n	800f642 <_strtod_l+0xb5a>
 800f5fe:	a328      	add	r3, pc, #160	@ (adr r3, 800f6a0 <_strtod_l+0xbb8>)
 800f600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f604:	4630      	mov	r0, r6
 800f606:	4639      	mov	r1, r7
 800f608:	f7f1 fab2 	bl	8000b70 <__aeabi_dcmple>
 800f60c:	b1a0      	cbz	r0, 800f638 <_strtod_l+0xb50>
 800f60e:	4639      	mov	r1, r7
 800f610:	4630      	mov	r0, r6
 800f612:	f7f1 fb09 	bl	8000c28 <__aeabi_d2uiz>
 800f616:	2801      	cmp	r0, #1
 800f618:	bf38      	it	cc
 800f61a:	2001      	movcc	r0, #1
 800f61c:	f7f0 ffb2 	bl	8000584 <__aeabi_ui2d>
 800f620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f622:	4606      	mov	r6, r0
 800f624:	460f      	mov	r7, r1
 800f626:	b9fb      	cbnz	r3, 800f668 <_strtod_l+0xb80>
 800f628:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f62c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f62e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f630:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f634:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f638:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f63a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f63e:	1b5b      	subs	r3, r3, r5
 800f640:	9311      	str	r3, [sp, #68]	@ 0x44
 800f642:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f646:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f64a:	f003 f8cb 	bl	80127e4 <__ulp>
 800f64e:	4650      	mov	r0, sl
 800f650:	ec53 2b10 	vmov	r2, r3, d0
 800f654:	4659      	mov	r1, fp
 800f656:	f7f1 f80f 	bl	8000678 <__aeabi_dmul>
 800f65a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f65e:	f7f0 fe55 	bl	800030c <__adddf3>
 800f662:	4682      	mov	sl, r0
 800f664:	468b      	mov	fp, r1
 800f666:	e770      	b.n	800f54a <_strtod_l+0xa62>
 800f668:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f66c:	e7e0      	b.n	800f630 <_strtod_l+0xb48>
 800f66e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f6a8 <_strtod_l+0xbc0>)
 800f670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f674:	f7f1 fa72 	bl	8000b5c <__aeabi_dcmplt>
 800f678:	e798      	b.n	800f5ac <_strtod_l+0xac4>
 800f67a:	2300      	movs	r3, #0
 800f67c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f67e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f680:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f682:	6013      	str	r3, [r2, #0]
 800f684:	f7ff ba6d 	b.w	800eb62 <_strtod_l+0x7a>
 800f688:	2a65      	cmp	r2, #101	@ 0x65
 800f68a:	f43f ab66 	beq.w	800ed5a <_strtod_l+0x272>
 800f68e:	2a45      	cmp	r2, #69	@ 0x45
 800f690:	f43f ab63 	beq.w	800ed5a <_strtod_l+0x272>
 800f694:	2301      	movs	r3, #1
 800f696:	f7ff bb9e 	b.w	800edd6 <_strtod_l+0x2ee>
 800f69a:	bf00      	nop
 800f69c:	f3af 8000 	nop.w
 800f6a0:	ffc00000 	.word	0xffc00000
 800f6a4:	41dfffff 	.word	0x41dfffff
 800f6a8:	94a03595 	.word	0x94a03595
 800f6ac:	3fcfffff 	.word	0x3fcfffff

0800f6b0 <_strtod_r>:
 800f6b0:	4b01      	ldr	r3, [pc, #4]	@ (800f6b8 <_strtod_r+0x8>)
 800f6b2:	f7ff ba19 	b.w	800eae8 <_strtod_l>
 800f6b6:	bf00      	nop
 800f6b8:	20000048 	.word	0x20000048

0800f6bc <strtod>:
 800f6bc:	460a      	mov	r2, r1
 800f6be:	4601      	mov	r1, r0
 800f6c0:	4802      	ldr	r0, [pc, #8]	@ (800f6cc <strtod+0x10>)
 800f6c2:	4b03      	ldr	r3, [pc, #12]	@ (800f6d0 <strtod+0x14>)
 800f6c4:	6800      	ldr	r0, [r0, #0]
 800f6c6:	f7ff ba0f 	b.w	800eae8 <_strtod_l>
 800f6ca:	bf00      	nop
 800f6cc:	200001b4 	.word	0x200001b4
 800f6d0:	20000048 	.word	0x20000048

0800f6d4 <strtof>:
 800f6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800f798 <strtof+0xc4>
 800f6dc:	4b29      	ldr	r3, [pc, #164]	@ (800f784 <strtof+0xb0>)
 800f6de:	460a      	mov	r2, r1
 800f6e0:	ed2d 8b02 	vpush	{d8}
 800f6e4:	4601      	mov	r1, r0
 800f6e6:	f8d8 0000 	ldr.w	r0, [r8]
 800f6ea:	f7ff f9fd 	bl	800eae8 <_strtod_l>
 800f6ee:	ec55 4b10 	vmov	r4, r5, d0
 800f6f2:	4622      	mov	r2, r4
 800f6f4:	462b      	mov	r3, r5
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	f7f1 fa57 	bl	8000bac <__aeabi_dcmpun>
 800f6fe:	b190      	cbz	r0, 800f726 <strtof+0x52>
 800f700:	2d00      	cmp	r5, #0
 800f702:	4821      	ldr	r0, [pc, #132]	@ (800f788 <strtof+0xb4>)
 800f704:	da09      	bge.n	800f71a <strtof+0x46>
 800f706:	f001 fb0f 	bl	8010d28 <nanf>
 800f70a:	eeb1 8a40 	vneg.f32	s16, s0
 800f70e:	eeb0 0a48 	vmov.f32	s0, s16
 800f712:	ecbd 8b02 	vpop	{d8}
 800f716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f71a:	ecbd 8b02 	vpop	{d8}
 800f71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f722:	f001 bb01 	b.w	8010d28 <nanf>
 800f726:	4620      	mov	r0, r4
 800f728:	4629      	mov	r1, r5
 800f72a:	f7f1 fa9d 	bl	8000c68 <__aeabi_d2f>
 800f72e:	ee08 0a10 	vmov	s16, r0
 800f732:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800f78c <strtof+0xb8>
 800f736:	eeb0 7ac8 	vabs.f32	s14, s16
 800f73a:	eeb4 7a67 	vcmp.f32	s14, s15
 800f73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f742:	dd11      	ble.n	800f768 <strtof+0x94>
 800f744:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800f748:	4b11      	ldr	r3, [pc, #68]	@ (800f790 <strtof+0xbc>)
 800f74a:	f04f 32ff 	mov.w	r2, #4294967295
 800f74e:	4620      	mov	r0, r4
 800f750:	4639      	mov	r1, r7
 800f752:	f7f1 fa2b 	bl	8000bac <__aeabi_dcmpun>
 800f756:	b980      	cbnz	r0, 800f77a <strtof+0xa6>
 800f758:	4b0d      	ldr	r3, [pc, #52]	@ (800f790 <strtof+0xbc>)
 800f75a:	f04f 32ff 	mov.w	r2, #4294967295
 800f75e:	4620      	mov	r0, r4
 800f760:	4639      	mov	r1, r7
 800f762:	f7f1 fa05 	bl	8000b70 <__aeabi_dcmple>
 800f766:	b940      	cbnz	r0, 800f77a <strtof+0xa6>
 800f768:	ee18 3a10 	vmov	r3, s16
 800f76c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f770:	d1cd      	bne.n	800f70e <strtof+0x3a>
 800f772:	4b08      	ldr	r3, [pc, #32]	@ (800f794 <strtof+0xc0>)
 800f774:	402b      	ands	r3, r5
 800f776:	2b00      	cmp	r3, #0
 800f778:	d0c9      	beq.n	800f70e <strtof+0x3a>
 800f77a:	f8d8 3000 	ldr.w	r3, [r8]
 800f77e:	2222      	movs	r2, #34	@ 0x22
 800f780:	601a      	str	r2, [r3, #0]
 800f782:	e7c4      	b.n	800f70e <strtof+0x3a>
 800f784:	20000048 	.word	0x20000048
 800f788:	08016c47 	.word	0x08016c47
 800f78c:	7f7fffff 	.word	0x7f7fffff
 800f790:	7fefffff 	.word	0x7fefffff
 800f794:	7ff00000 	.word	0x7ff00000
 800f798:	200001b4 	.word	0x200001b4

0800f79c <_strtol_l.constprop.0>:
 800f79c:	2b24      	cmp	r3, #36	@ 0x24
 800f79e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7a2:	4686      	mov	lr, r0
 800f7a4:	4690      	mov	r8, r2
 800f7a6:	d801      	bhi.n	800f7ac <_strtol_l.constprop.0+0x10>
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	d106      	bne.n	800f7ba <_strtol_l.constprop.0+0x1e>
 800f7ac:	f001 fa72 	bl	8010c94 <__errno>
 800f7b0:	2316      	movs	r3, #22
 800f7b2:	6003      	str	r3, [r0, #0]
 800f7b4:	2000      	movs	r0, #0
 800f7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ba:	4834      	ldr	r0, [pc, #208]	@ (800f88c <_strtol_l.constprop.0+0xf0>)
 800f7bc:	460d      	mov	r5, r1
 800f7be:	462a      	mov	r2, r5
 800f7c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f7c4:	5d06      	ldrb	r6, [r0, r4]
 800f7c6:	f016 0608 	ands.w	r6, r6, #8
 800f7ca:	d1f8      	bne.n	800f7be <_strtol_l.constprop.0+0x22>
 800f7cc:	2c2d      	cmp	r4, #45	@ 0x2d
 800f7ce:	d12d      	bne.n	800f82c <_strtol_l.constprop.0+0x90>
 800f7d0:	782c      	ldrb	r4, [r5, #0]
 800f7d2:	2601      	movs	r6, #1
 800f7d4:	1c95      	adds	r5, r2, #2
 800f7d6:	f033 0210 	bics.w	r2, r3, #16
 800f7da:	d109      	bne.n	800f7f0 <_strtol_l.constprop.0+0x54>
 800f7dc:	2c30      	cmp	r4, #48	@ 0x30
 800f7de:	d12a      	bne.n	800f836 <_strtol_l.constprop.0+0x9a>
 800f7e0:	782a      	ldrb	r2, [r5, #0]
 800f7e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f7e6:	2a58      	cmp	r2, #88	@ 0x58
 800f7e8:	d125      	bne.n	800f836 <_strtol_l.constprop.0+0x9a>
 800f7ea:	786c      	ldrb	r4, [r5, #1]
 800f7ec:	2310      	movs	r3, #16
 800f7ee:	3502      	adds	r5, #2
 800f7f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f7f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	fbbc f9f3 	udiv	r9, ip, r3
 800f7fe:	4610      	mov	r0, r2
 800f800:	fb03 ca19 	mls	sl, r3, r9, ip
 800f804:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f808:	2f09      	cmp	r7, #9
 800f80a:	d81b      	bhi.n	800f844 <_strtol_l.constprop.0+0xa8>
 800f80c:	463c      	mov	r4, r7
 800f80e:	42a3      	cmp	r3, r4
 800f810:	dd27      	ble.n	800f862 <_strtol_l.constprop.0+0xc6>
 800f812:	1c57      	adds	r7, r2, #1
 800f814:	d007      	beq.n	800f826 <_strtol_l.constprop.0+0x8a>
 800f816:	4581      	cmp	r9, r0
 800f818:	d320      	bcc.n	800f85c <_strtol_l.constprop.0+0xc0>
 800f81a:	d101      	bne.n	800f820 <_strtol_l.constprop.0+0x84>
 800f81c:	45a2      	cmp	sl, r4
 800f81e:	db1d      	blt.n	800f85c <_strtol_l.constprop.0+0xc0>
 800f820:	fb00 4003 	mla	r0, r0, r3, r4
 800f824:	2201      	movs	r2, #1
 800f826:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f82a:	e7eb      	b.n	800f804 <_strtol_l.constprop.0+0x68>
 800f82c:	2c2b      	cmp	r4, #43	@ 0x2b
 800f82e:	bf04      	itt	eq
 800f830:	782c      	ldrbeq	r4, [r5, #0]
 800f832:	1c95      	addeq	r5, r2, #2
 800f834:	e7cf      	b.n	800f7d6 <_strtol_l.constprop.0+0x3a>
 800f836:	2b00      	cmp	r3, #0
 800f838:	d1da      	bne.n	800f7f0 <_strtol_l.constprop.0+0x54>
 800f83a:	2c30      	cmp	r4, #48	@ 0x30
 800f83c:	bf0c      	ite	eq
 800f83e:	2308      	moveq	r3, #8
 800f840:	230a      	movne	r3, #10
 800f842:	e7d5      	b.n	800f7f0 <_strtol_l.constprop.0+0x54>
 800f844:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f848:	2f19      	cmp	r7, #25
 800f84a:	d801      	bhi.n	800f850 <_strtol_l.constprop.0+0xb4>
 800f84c:	3c37      	subs	r4, #55	@ 0x37
 800f84e:	e7de      	b.n	800f80e <_strtol_l.constprop.0+0x72>
 800f850:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f854:	2f19      	cmp	r7, #25
 800f856:	d804      	bhi.n	800f862 <_strtol_l.constprop.0+0xc6>
 800f858:	3c57      	subs	r4, #87	@ 0x57
 800f85a:	e7d8      	b.n	800f80e <_strtol_l.constprop.0+0x72>
 800f85c:	f04f 32ff 	mov.w	r2, #4294967295
 800f860:	e7e1      	b.n	800f826 <_strtol_l.constprop.0+0x8a>
 800f862:	1c53      	adds	r3, r2, #1
 800f864:	d108      	bne.n	800f878 <_strtol_l.constprop.0+0xdc>
 800f866:	2322      	movs	r3, #34	@ 0x22
 800f868:	f8ce 3000 	str.w	r3, [lr]
 800f86c:	4660      	mov	r0, ip
 800f86e:	f1b8 0f00 	cmp.w	r8, #0
 800f872:	d0a0      	beq.n	800f7b6 <_strtol_l.constprop.0+0x1a>
 800f874:	1e69      	subs	r1, r5, #1
 800f876:	e006      	b.n	800f886 <_strtol_l.constprop.0+0xea>
 800f878:	b106      	cbz	r6, 800f87c <_strtol_l.constprop.0+0xe0>
 800f87a:	4240      	negs	r0, r0
 800f87c:	f1b8 0f00 	cmp.w	r8, #0
 800f880:	d099      	beq.n	800f7b6 <_strtol_l.constprop.0+0x1a>
 800f882:	2a00      	cmp	r2, #0
 800f884:	d1f6      	bne.n	800f874 <_strtol_l.constprop.0+0xd8>
 800f886:	f8c8 1000 	str.w	r1, [r8]
 800f88a:	e794      	b.n	800f7b6 <_strtol_l.constprop.0+0x1a>
 800f88c:	08016859 	.word	0x08016859

0800f890 <_strtol_r>:
 800f890:	f7ff bf84 	b.w	800f79c <_strtol_l.constprop.0>

0800f894 <strtol>:
 800f894:	4613      	mov	r3, r2
 800f896:	460a      	mov	r2, r1
 800f898:	4601      	mov	r1, r0
 800f89a:	4802      	ldr	r0, [pc, #8]	@ (800f8a4 <strtol+0x10>)
 800f89c:	6800      	ldr	r0, [r0, #0]
 800f89e:	f7ff bf7d 	b.w	800f79c <_strtol_l.constprop.0>
 800f8a2:	bf00      	nop
 800f8a4:	200001b4 	.word	0x200001b4

0800f8a8 <__cvt>:
 800f8a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8ac:	ec57 6b10 	vmov	r6, r7, d0
 800f8b0:	2f00      	cmp	r7, #0
 800f8b2:	460c      	mov	r4, r1
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	463b      	mov	r3, r7
 800f8b8:	bfbb      	ittet	lt
 800f8ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f8be:	461f      	movlt	r7, r3
 800f8c0:	2300      	movge	r3, #0
 800f8c2:	232d      	movlt	r3, #45	@ 0x2d
 800f8c4:	700b      	strb	r3, [r1, #0]
 800f8c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f8c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f8cc:	4691      	mov	r9, r2
 800f8ce:	f023 0820 	bic.w	r8, r3, #32
 800f8d2:	bfbc      	itt	lt
 800f8d4:	4632      	movlt	r2, r6
 800f8d6:	4616      	movlt	r6, r2
 800f8d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f8dc:	d005      	beq.n	800f8ea <__cvt+0x42>
 800f8de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f8e2:	d100      	bne.n	800f8e6 <__cvt+0x3e>
 800f8e4:	3401      	adds	r4, #1
 800f8e6:	2102      	movs	r1, #2
 800f8e8:	e000      	b.n	800f8ec <__cvt+0x44>
 800f8ea:	2103      	movs	r1, #3
 800f8ec:	ab03      	add	r3, sp, #12
 800f8ee:	9301      	str	r3, [sp, #4]
 800f8f0:	ab02      	add	r3, sp, #8
 800f8f2:	9300      	str	r3, [sp, #0]
 800f8f4:	ec47 6b10 	vmov	d0, r6, r7
 800f8f8:	4653      	mov	r3, sl
 800f8fa:	4622      	mov	r2, r4
 800f8fc:	f001 faa4 	bl	8010e48 <_dtoa_r>
 800f900:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f904:	4605      	mov	r5, r0
 800f906:	d119      	bne.n	800f93c <__cvt+0x94>
 800f908:	f019 0f01 	tst.w	r9, #1
 800f90c:	d00e      	beq.n	800f92c <__cvt+0x84>
 800f90e:	eb00 0904 	add.w	r9, r0, r4
 800f912:	2200      	movs	r2, #0
 800f914:	2300      	movs	r3, #0
 800f916:	4630      	mov	r0, r6
 800f918:	4639      	mov	r1, r7
 800f91a:	f7f1 f915 	bl	8000b48 <__aeabi_dcmpeq>
 800f91e:	b108      	cbz	r0, 800f924 <__cvt+0x7c>
 800f920:	f8cd 900c 	str.w	r9, [sp, #12]
 800f924:	2230      	movs	r2, #48	@ 0x30
 800f926:	9b03      	ldr	r3, [sp, #12]
 800f928:	454b      	cmp	r3, r9
 800f92a:	d31e      	bcc.n	800f96a <__cvt+0xc2>
 800f92c:	9b03      	ldr	r3, [sp, #12]
 800f92e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f930:	1b5b      	subs	r3, r3, r5
 800f932:	4628      	mov	r0, r5
 800f934:	6013      	str	r3, [r2, #0]
 800f936:	b004      	add	sp, #16
 800f938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f93c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f940:	eb00 0904 	add.w	r9, r0, r4
 800f944:	d1e5      	bne.n	800f912 <__cvt+0x6a>
 800f946:	7803      	ldrb	r3, [r0, #0]
 800f948:	2b30      	cmp	r3, #48	@ 0x30
 800f94a:	d10a      	bne.n	800f962 <__cvt+0xba>
 800f94c:	2200      	movs	r2, #0
 800f94e:	2300      	movs	r3, #0
 800f950:	4630      	mov	r0, r6
 800f952:	4639      	mov	r1, r7
 800f954:	f7f1 f8f8 	bl	8000b48 <__aeabi_dcmpeq>
 800f958:	b918      	cbnz	r0, 800f962 <__cvt+0xba>
 800f95a:	f1c4 0401 	rsb	r4, r4, #1
 800f95e:	f8ca 4000 	str.w	r4, [sl]
 800f962:	f8da 3000 	ldr.w	r3, [sl]
 800f966:	4499      	add	r9, r3
 800f968:	e7d3      	b.n	800f912 <__cvt+0x6a>
 800f96a:	1c59      	adds	r1, r3, #1
 800f96c:	9103      	str	r1, [sp, #12]
 800f96e:	701a      	strb	r2, [r3, #0]
 800f970:	e7d9      	b.n	800f926 <__cvt+0x7e>

0800f972 <__exponent>:
 800f972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f974:	2900      	cmp	r1, #0
 800f976:	bfba      	itte	lt
 800f978:	4249      	neglt	r1, r1
 800f97a:	232d      	movlt	r3, #45	@ 0x2d
 800f97c:	232b      	movge	r3, #43	@ 0x2b
 800f97e:	2909      	cmp	r1, #9
 800f980:	7002      	strb	r2, [r0, #0]
 800f982:	7043      	strb	r3, [r0, #1]
 800f984:	dd29      	ble.n	800f9da <__exponent+0x68>
 800f986:	f10d 0307 	add.w	r3, sp, #7
 800f98a:	461d      	mov	r5, r3
 800f98c:	270a      	movs	r7, #10
 800f98e:	461a      	mov	r2, r3
 800f990:	fbb1 f6f7 	udiv	r6, r1, r7
 800f994:	fb07 1416 	mls	r4, r7, r6, r1
 800f998:	3430      	adds	r4, #48	@ 0x30
 800f99a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f99e:	460c      	mov	r4, r1
 800f9a0:	2c63      	cmp	r4, #99	@ 0x63
 800f9a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f9a6:	4631      	mov	r1, r6
 800f9a8:	dcf1      	bgt.n	800f98e <__exponent+0x1c>
 800f9aa:	3130      	adds	r1, #48	@ 0x30
 800f9ac:	1e94      	subs	r4, r2, #2
 800f9ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f9b2:	1c41      	adds	r1, r0, #1
 800f9b4:	4623      	mov	r3, r4
 800f9b6:	42ab      	cmp	r3, r5
 800f9b8:	d30a      	bcc.n	800f9d0 <__exponent+0x5e>
 800f9ba:	f10d 0309 	add.w	r3, sp, #9
 800f9be:	1a9b      	subs	r3, r3, r2
 800f9c0:	42ac      	cmp	r4, r5
 800f9c2:	bf88      	it	hi
 800f9c4:	2300      	movhi	r3, #0
 800f9c6:	3302      	adds	r3, #2
 800f9c8:	4403      	add	r3, r0
 800f9ca:	1a18      	subs	r0, r3, r0
 800f9cc:	b003      	add	sp, #12
 800f9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f9d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f9d8:	e7ed      	b.n	800f9b6 <__exponent+0x44>
 800f9da:	2330      	movs	r3, #48	@ 0x30
 800f9dc:	3130      	adds	r1, #48	@ 0x30
 800f9de:	7083      	strb	r3, [r0, #2]
 800f9e0:	70c1      	strb	r1, [r0, #3]
 800f9e2:	1d03      	adds	r3, r0, #4
 800f9e4:	e7f1      	b.n	800f9ca <__exponent+0x58>
	...

0800f9e8 <_printf_float>:
 800f9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ec:	b08d      	sub	sp, #52	@ 0x34
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f9f4:	4616      	mov	r6, r2
 800f9f6:	461f      	mov	r7, r3
 800f9f8:	4605      	mov	r5, r0
 800f9fa:	f001 f89b 	bl	8010b34 <_localeconv_r>
 800f9fe:	6803      	ldr	r3, [r0, #0]
 800fa00:	9304      	str	r3, [sp, #16]
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7f0 fc74 	bl	80002f0 <strlen>
 800fa08:	2300      	movs	r3, #0
 800fa0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa0c:	f8d8 3000 	ldr.w	r3, [r8]
 800fa10:	9005      	str	r0, [sp, #20]
 800fa12:	3307      	adds	r3, #7
 800fa14:	f023 0307 	bic.w	r3, r3, #7
 800fa18:	f103 0208 	add.w	r2, r3, #8
 800fa1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fa20:	f8d4 b000 	ldr.w	fp, [r4]
 800fa24:	f8c8 2000 	str.w	r2, [r8]
 800fa28:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fa30:	9307      	str	r3, [sp, #28]
 800fa32:	f8cd 8018 	str.w	r8, [sp, #24]
 800fa36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fa3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa3e:	4b9c      	ldr	r3, [pc, #624]	@ (800fcb0 <_printf_float+0x2c8>)
 800fa40:	f04f 32ff 	mov.w	r2, #4294967295
 800fa44:	f7f1 f8b2 	bl	8000bac <__aeabi_dcmpun>
 800fa48:	bb70      	cbnz	r0, 800faa8 <_printf_float+0xc0>
 800fa4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa4e:	4b98      	ldr	r3, [pc, #608]	@ (800fcb0 <_printf_float+0x2c8>)
 800fa50:	f04f 32ff 	mov.w	r2, #4294967295
 800fa54:	f7f1 f88c 	bl	8000b70 <__aeabi_dcmple>
 800fa58:	bb30      	cbnz	r0, 800faa8 <_printf_float+0xc0>
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	4640      	mov	r0, r8
 800fa60:	4649      	mov	r1, r9
 800fa62:	f7f1 f87b 	bl	8000b5c <__aeabi_dcmplt>
 800fa66:	b110      	cbz	r0, 800fa6e <_printf_float+0x86>
 800fa68:	232d      	movs	r3, #45	@ 0x2d
 800fa6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa6e:	4a91      	ldr	r2, [pc, #580]	@ (800fcb4 <_printf_float+0x2cc>)
 800fa70:	4b91      	ldr	r3, [pc, #580]	@ (800fcb8 <_printf_float+0x2d0>)
 800fa72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fa76:	bf94      	ite	ls
 800fa78:	4690      	movls	r8, r2
 800fa7a:	4698      	movhi	r8, r3
 800fa7c:	2303      	movs	r3, #3
 800fa7e:	6123      	str	r3, [r4, #16]
 800fa80:	f02b 0304 	bic.w	r3, fp, #4
 800fa84:	6023      	str	r3, [r4, #0]
 800fa86:	f04f 0900 	mov.w	r9, #0
 800fa8a:	9700      	str	r7, [sp, #0]
 800fa8c:	4633      	mov	r3, r6
 800fa8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fa90:	4621      	mov	r1, r4
 800fa92:	4628      	mov	r0, r5
 800fa94:	f000 f9d2 	bl	800fe3c <_printf_common>
 800fa98:	3001      	adds	r0, #1
 800fa9a:	f040 808d 	bne.w	800fbb8 <_printf_float+0x1d0>
 800fa9e:	f04f 30ff 	mov.w	r0, #4294967295
 800faa2:	b00d      	add	sp, #52	@ 0x34
 800faa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa8:	4642      	mov	r2, r8
 800faaa:	464b      	mov	r3, r9
 800faac:	4640      	mov	r0, r8
 800faae:	4649      	mov	r1, r9
 800fab0:	f7f1 f87c 	bl	8000bac <__aeabi_dcmpun>
 800fab4:	b140      	cbz	r0, 800fac8 <_printf_float+0xe0>
 800fab6:	464b      	mov	r3, r9
 800fab8:	2b00      	cmp	r3, #0
 800faba:	bfbc      	itt	lt
 800fabc:	232d      	movlt	r3, #45	@ 0x2d
 800fabe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fac2:	4a7e      	ldr	r2, [pc, #504]	@ (800fcbc <_printf_float+0x2d4>)
 800fac4:	4b7e      	ldr	r3, [pc, #504]	@ (800fcc0 <_printf_float+0x2d8>)
 800fac6:	e7d4      	b.n	800fa72 <_printf_float+0x8a>
 800fac8:	6863      	ldr	r3, [r4, #4]
 800faca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800face:	9206      	str	r2, [sp, #24]
 800fad0:	1c5a      	adds	r2, r3, #1
 800fad2:	d13b      	bne.n	800fb4c <_printf_float+0x164>
 800fad4:	2306      	movs	r3, #6
 800fad6:	6063      	str	r3, [r4, #4]
 800fad8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fadc:	2300      	movs	r3, #0
 800fade:	6022      	str	r2, [r4, #0]
 800fae0:	9303      	str	r3, [sp, #12]
 800fae2:	ab0a      	add	r3, sp, #40	@ 0x28
 800fae4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fae8:	ab09      	add	r3, sp, #36	@ 0x24
 800faea:	9300      	str	r3, [sp, #0]
 800faec:	6861      	ldr	r1, [r4, #4]
 800faee:	ec49 8b10 	vmov	d0, r8, r9
 800faf2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800faf6:	4628      	mov	r0, r5
 800faf8:	f7ff fed6 	bl	800f8a8 <__cvt>
 800fafc:	9b06      	ldr	r3, [sp, #24]
 800fafe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fb00:	2b47      	cmp	r3, #71	@ 0x47
 800fb02:	4680      	mov	r8, r0
 800fb04:	d129      	bne.n	800fb5a <_printf_float+0x172>
 800fb06:	1cc8      	adds	r0, r1, #3
 800fb08:	db02      	blt.n	800fb10 <_printf_float+0x128>
 800fb0a:	6863      	ldr	r3, [r4, #4]
 800fb0c:	4299      	cmp	r1, r3
 800fb0e:	dd41      	ble.n	800fb94 <_printf_float+0x1ac>
 800fb10:	f1aa 0a02 	sub.w	sl, sl, #2
 800fb14:	fa5f fa8a 	uxtb.w	sl, sl
 800fb18:	3901      	subs	r1, #1
 800fb1a:	4652      	mov	r2, sl
 800fb1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fb20:	9109      	str	r1, [sp, #36]	@ 0x24
 800fb22:	f7ff ff26 	bl	800f972 <__exponent>
 800fb26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb28:	1813      	adds	r3, r2, r0
 800fb2a:	2a01      	cmp	r2, #1
 800fb2c:	4681      	mov	r9, r0
 800fb2e:	6123      	str	r3, [r4, #16]
 800fb30:	dc02      	bgt.n	800fb38 <_printf_float+0x150>
 800fb32:	6822      	ldr	r2, [r4, #0]
 800fb34:	07d2      	lsls	r2, r2, #31
 800fb36:	d501      	bpl.n	800fb3c <_printf_float+0x154>
 800fb38:	3301      	adds	r3, #1
 800fb3a:	6123      	str	r3, [r4, #16]
 800fb3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d0a2      	beq.n	800fa8a <_printf_float+0xa2>
 800fb44:	232d      	movs	r3, #45	@ 0x2d
 800fb46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb4a:	e79e      	b.n	800fa8a <_printf_float+0xa2>
 800fb4c:	9a06      	ldr	r2, [sp, #24]
 800fb4e:	2a47      	cmp	r2, #71	@ 0x47
 800fb50:	d1c2      	bne.n	800fad8 <_printf_float+0xf0>
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d1c0      	bne.n	800fad8 <_printf_float+0xf0>
 800fb56:	2301      	movs	r3, #1
 800fb58:	e7bd      	b.n	800fad6 <_printf_float+0xee>
 800fb5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fb5e:	d9db      	bls.n	800fb18 <_printf_float+0x130>
 800fb60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fb64:	d118      	bne.n	800fb98 <_printf_float+0x1b0>
 800fb66:	2900      	cmp	r1, #0
 800fb68:	6863      	ldr	r3, [r4, #4]
 800fb6a:	dd0b      	ble.n	800fb84 <_printf_float+0x19c>
 800fb6c:	6121      	str	r1, [r4, #16]
 800fb6e:	b913      	cbnz	r3, 800fb76 <_printf_float+0x18e>
 800fb70:	6822      	ldr	r2, [r4, #0]
 800fb72:	07d0      	lsls	r0, r2, #31
 800fb74:	d502      	bpl.n	800fb7c <_printf_float+0x194>
 800fb76:	3301      	adds	r3, #1
 800fb78:	440b      	add	r3, r1
 800fb7a:	6123      	str	r3, [r4, #16]
 800fb7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fb7e:	f04f 0900 	mov.w	r9, #0
 800fb82:	e7db      	b.n	800fb3c <_printf_float+0x154>
 800fb84:	b913      	cbnz	r3, 800fb8c <_printf_float+0x1a4>
 800fb86:	6822      	ldr	r2, [r4, #0]
 800fb88:	07d2      	lsls	r2, r2, #31
 800fb8a:	d501      	bpl.n	800fb90 <_printf_float+0x1a8>
 800fb8c:	3302      	adds	r3, #2
 800fb8e:	e7f4      	b.n	800fb7a <_printf_float+0x192>
 800fb90:	2301      	movs	r3, #1
 800fb92:	e7f2      	b.n	800fb7a <_printf_float+0x192>
 800fb94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fb98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb9a:	4299      	cmp	r1, r3
 800fb9c:	db05      	blt.n	800fbaa <_printf_float+0x1c2>
 800fb9e:	6823      	ldr	r3, [r4, #0]
 800fba0:	6121      	str	r1, [r4, #16]
 800fba2:	07d8      	lsls	r0, r3, #31
 800fba4:	d5ea      	bpl.n	800fb7c <_printf_float+0x194>
 800fba6:	1c4b      	adds	r3, r1, #1
 800fba8:	e7e7      	b.n	800fb7a <_printf_float+0x192>
 800fbaa:	2900      	cmp	r1, #0
 800fbac:	bfd4      	ite	le
 800fbae:	f1c1 0202 	rsble	r2, r1, #2
 800fbb2:	2201      	movgt	r2, #1
 800fbb4:	4413      	add	r3, r2
 800fbb6:	e7e0      	b.n	800fb7a <_printf_float+0x192>
 800fbb8:	6823      	ldr	r3, [r4, #0]
 800fbba:	055a      	lsls	r2, r3, #21
 800fbbc:	d407      	bmi.n	800fbce <_printf_float+0x1e6>
 800fbbe:	6923      	ldr	r3, [r4, #16]
 800fbc0:	4642      	mov	r2, r8
 800fbc2:	4631      	mov	r1, r6
 800fbc4:	4628      	mov	r0, r5
 800fbc6:	47b8      	blx	r7
 800fbc8:	3001      	adds	r0, #1
 800fbca:	d12b      	bne.n	800fc24 <_printf_float+0x23c>
 800fbcc:	e767      	b.n	800fa9e <_printf_float+0xb6>
 800fbce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fbd2:	f240 80dd 	bls.w	800fd90 <_printf_float+0x3a8>
 800fbd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fbda:	2200      	movs	r2, #0
 800fbdc:	2300      	movs	r3, #0
 800fbde:	f7f0 ffb3 	bl	8000b48 <__aeabi_dcmpeq>
 800fbe2:	2800      	cmp	r0, #0
 800fbe4:	d033      	beq.n	800fc4e <_printf_float+0x266>
 800fbe6:	4a37      	ldr	r2, [pc, #220]	@ (800fcc4 <_printf_float+0x2dc>)
 800fbe8:	2301      	movs	r3, #1
 800fbea:	4631      	mov	r1, r6
 800fbec:	4628      	mov	r0, r5
 800fbee:	47b8      	blx	r7
 800fbf0:	3001      	adds	r0, #1
 800fbf2:	f43f af54 	beq.w	800fa9e <_printf_float+0xb6>
 800fbf6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fbfa:	4543      	cmp	r3, r8
 800fbfc:	db02      	blt.n	800fc04 <_printf_float+0x21c>
 800fbfe:	6823      	ldr	r3, [r4, #0]
 800fc00:	07d8      	lsls	r0, r3, #31
 800fc02:	d50f      	bpl.n	800fc24 <_printf_float+0x23c>
 800fc04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc08:	4631      	mov	r1, r6
 800fc0a:	4628      	mov	r0, r5
 800fc0c:	47b8      	blx	r7
 800fc0e:	3001      	adds	r0, #1
 800fc10:	f43f af45 	beq.w	800fa9e <_printf_float+0xb6>
 800fc14:	f04f 0900 	mov.w	r9, #0
 800fc18:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc1c:	f104 0a1a 	add.w	sl, r4, #26
 800fc20:	45c8      	cmp	r8, r9
 800fc22:	dc09      	bgt.n	800fc38 <_printf_float+0x250>
 800fc24:	6823      	ldr	r3, [r4, #0]
 800fc26:	079b      	lsls	r3, r3, #30
 800fc28:	f100 8103 	bmi.w	800fe32 <_printf_float+0x44a>
 800fc2c:	68e0      	ldr	r0, [r4, #12]
 800fc2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc30:	4298      	cmp	r0, r3
 800fc32:	bfb8      	it	lt
 800fc34:	4618      	movlt	r0, r3
 800fc36:	e734      	b.n	800faa2 <_printf_float+0xba>
 800fc38:	2301      	movs	r3, #1
 800fc3a:	4652      	mov	r2, sl
 800fc3c:	4631      	mov	r1, r6
 800fc3e:	4628      	mov	r0, r5
 800fc40:	47b8      	blx	r7
 800fc42:	3001      	adds	r0, #1
 800fc44:	f43f af2b 	beq.w	800fa9e <_printf_float+0xb6>
 800fc48:	f109 0901 	add.w	r9, r9, #1
 800fc4c:	e7e8      	b.n	800fc20 <_printf_float+0x238>
 800fc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	dc39      	bgt.n	800fcc8 <_printf_float+0x2e0>
 800fc54:	4a1b      	ldr	r2, [pc, #108]	@ (800fcc4 <_printf_float+0x2dc>)
 800fc56:	2301      	movs	r3, #1
 800fc58:	4631      	mov	r1, r6
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	47b8      	blx	r7
 800fc5e:	3001      	adds	r0, #1
 800fc60:	f43f af1d 	beq.w	800fa9e <_printf_float+0xb6>
 800fc64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fc68:	ea59 0303 	orrs.w	r3, r9, r3
 800fc6c:	d102      	bne.n	800fc74 <_printf_float+0x28c>
 800fc6e:	6823      	ldr	r3, [r4, #0]
 800fc70:	07d9      	lsls	r1, r3, #31
 800fc72:	d5d7      	bpl.n	800fc24 <_printf_float+0x23c>
 800fc74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc78:	4631      	mov	r1, r6
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	47b8      	blx	r7
 800fc7e:	3001      	adds	r0, #1
 800fc80:	f43f af0d 	beq.w	800fa9e <_printf_float+0xb6>
 800fc84:	f04f 0a00 	mov.w	sl, #0
 800fc88:	f104 0b1a 	add.w	fp, r4, #26
 800fc8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc8e:	425b      	negs	r3, r3
 800fc90:	4553      	cmp	r3, sl
 800fc92:	dc01      	bgt.n	800fc98 <_printf_float+0x2b0>
 800fc94:	464b      	mov	r3, r9
 800fc96:	e793      	b.n	800fbc0 <_printf_float+0x1d8>
 800fc98:	2301      	movs	r3, #1
 800fc9a:	465a      	mov	r2, fp
 800fc9c:	4631      	mov	r1, r6
 800fc9e:	4628      	mov	r0, r5
 800fca0:	47b8      	blx	r7
 800fca2:	3001      	adds	r0, #1
 800fca4:	f43f aefb 	beq.w	800fa9e <_printf_float+0xb6>
 800fca8:	f10a 0a01 	add.w	sl, sl, #1
 800fcac:	e7ee      	b.n	800fc8c <_printf_float+0x2a4>
 800fcae:	bf00      	nop
 800fcb0:	7fefffff 	.word	0x7fefffff
 800fcb4:	08016959 	.word	0x08016959
 800fcb8:	0801695d 	.word	0x0801695d
 800fcbc:	08016961 	.word	0x08016961
 800fcc0:	08016965 	.word	0x08016965
 800fcc4:	08016c07 	.word	0x08016c07
 800fcc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fcca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fcce:	4553      	cmp	r3, sl
 800fcd0:	bfa8      	it	ge
 800fcd2:	4653      	movge	r3, sl
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	4699      	mov	r9, r3
 800fcd8:	dc36      	bgt.n	800fd48 <_printf_float+0x360>
 800fcda:	f04f 0b00 	mov.w	fp, #0
 800fcde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fce2:	f104 021a 	add.w	r2, r4, #26
 800fce6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fce8:	9306      	str	r3, [sp, #24]
 800fcea:	eba3 0309 	sub.w	r3, r3, r9
 800fcee:	455b      	cmp	r3, fp
 800fcf0:	dc31      	bgt.n	800fd56 <_printf_float+0x36e>
 800fcf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcf4:	459a      	cmp	sl, r3
 800fcf6:	dc3a      	bgt.n	800fd6e <_printf_float+0x386>
 800fcf8:	6823      	ldr	r3, [r4, #0]
 800fcfa:	07da      	lsls	r2, r3, #31
 800fcfc:	d437      	bmi.n	800fd6e <_printf_float+0x386>
 800fcfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd00:	ebaa 0903 	sub.w	r9, sl, r3
 800fd04:	9b06      	ldr	r3, [sp, #24]
 800fd06:	ebaa 0303 	sub.w	r3, sl, r3
 800fd0a:	4599      	cmp	r9, r3
 800fd0c:	bfa8      	it	ge
 800fd0e:	4699      	movge	r9, r3
 800fd10:	f1b9 0f00 	cmp.w	r9, #0
 800fd14:	dc33      	bgt.n	800fd7e <_printf_float+0x396>
 800fd16:	f04f 0800 	mov.w	r8, #0
 800fd1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd1e:	f104 0b1a 	add.w	fp, r4, #26
 800fd22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd24:	ebaa 0303 	sub.w	r3, sl, r3
 800fd28:	eba3 0309 	sub.w	r3, r3, r9
 800fd2c:	4543      	cmp	r3, r8
 800fd2e:	f77f af79 	ble.w	800fc24 <_printf_float+0x23c>
 800fd32:	2301      	movs	r3, #1
 800fd34:	465a      	mov	r2, fp
 800fd36:	4631      	mov	r1, r6
 800fd38:	4628      	mov	r0, r5
 800fd3a:	47b8      	blx	r7
 800fd3c:	3001      	adds	r0, #1
 800fd3e:	f43f aeae 	beq.w	800fa9e <_printf_float+0xb6>
 800fd42:	f108 0801 	add.w	r8, r8, #1
 800fd46:	e7ec      	b.n	800fd22 <_printf_float+0x33a>
 800fd48:	4642      	mov	r2, r8
 800fd4a:	4631      	mov	r1, r6
 800fd4c:	4628      	mov	r0, r5
 800fd4e:	47b8      	blx	r7
 800fd50:	3001      	adds	r0, #1
 800fd52:	d1c2      	bne.n	800fcda <_printf_float+0x2f2>
 800fd54:	e6a3      	b.n	800fa9e <_printf_float+0xb6>
 800fd56:	2301      	movs	r3, #1
 800fd58:	4631      	mov	r1, r6
 800fd5a:	4628      	mov	r0, r5
 800fd5c:	9206      	str	r2, [sp, #24]
 800fd5e:	47b8      	blx	r7
 800fd60:	3001      	adds	r0, #1
 800fd62:	f43f ae9c 	beq.w	800fa9e <_printf_float+0xb6>
 800fd66:	9a06      	ldr	r2, [sp, #24]
 800fd68:	f10b 0b01 	add.w	fp, fp, #1
 800fd6c:	e7bb      	b.n	800fce6 <_printf_float+0x2fe>
 800fd6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd72:	4631      	mov	r1, r6
 800fd74:	4628      	mov	r0, r5
 800fd76:	47b8      	blx	r7
 800fd78:	3001      	adds	r0, #1
 800fd7a:	d1c0      	bne.n	800fcfe <_printf_float+0x316>
 800fd7c:	e68f      	b.n	800fa9e <_printf_float+0xb6>
 800fd7e:	9a06      	ldr	r2, [sp, #24]
 800fd80:	464b      	mov	r3, r9
 800fd82:	4442      	add	r2, r8
 800fd84:	4631      	mov	r1, r6
 800fd86:	4628      	mov	r0, r5
 800fd88:	47b8      	blx	r7
 800fd8a:	3001      	adds	r0, #1
 800fd8c:	d1c3      	bne.n	800fd16 <_printf_float+0x32e>
 800fd8e:	e686      	b.n	800fa9e <_printf_float+0xb6>
 800fd90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fd94:	f1ba 0f01 	cmp.w	sl, #1
 800fd98:	dc01      	bgt.n	800fd9e <_printf_float+0x3b6>
 800fd9a:	07db      	lsls	r3, r3, #31
 800fd9c:	d536      	bpl.n	800fe0c <_printf_float+0x424>
 800fd9e:	2301      	movs	r3, #1
 800fda0:	4642      	mov	r2, r8
 800fda2:	4631      	mov	r1, r6
 800fda4:	4628      	mov	r0, r5
 800fda6:	47b8      	blx	r7
 800fda8:	3001      	adds	r0, #1
 800fdaa:	f43f ae78 	beq.w	800fa9e <_printf_float+0xb6>
 800fdae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdb2:	4631      	mov	r1, r6
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	47b8      	blx	r7
 800fdb8:	3001      	adds	r0, #1
 800fdba:	f43f ae70 	beq.w	800fa9e <_printf_float+0xb6>
 800fdbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fdca:	f7f0 febd 	bl	8000b48 <__aeabi_dcmpeq>
 800fdce:	b9c0      	cbnz	r0, 800fe02 <_printf_float+0x41a>
 800fdd0:	4653      	mov	r3, sl
 800fdd2:	f108 0201 	add.w	r2, r8, #1
 800fdd6:	4631      	mov	r1, r6
 800fdd8:	4628      	mov	r0, r5
 800fdda:	47b8      	blx	r7
 800fddc:	3001      	adds	r0, #1
 800fdde:	d10c      	bne.n	800fdfa <_printf_float+0x412>
 800fde0:	e65d      	b.n	800fa9e <_printf_float+0xb6>
 800fde2:	2301      	movs	r3, #1
 800fde4:	465a      	mov	r2, fp
 800fde6:	4631      	mov	r1, r6
 800fde8:	4628      	mov	r0, r5
 800fdea:	47b8      	blx	r7
 800fdec:	3001      	adds	r0, #1
 800fdee:	f43f ae56 	beq.w	800fa9e <_printf_float+0xb6>
 800fdf2:	f108 0801 	add.w	r8, r8, #1
 800fdf6:	45d0      	cmp	r8, sl
 800fdf8:	dbf3      	blt.n	800fde2 <_printf_float+0x3fa>
 800fdfa:	464b      	mov	r3, r9
 800fdfc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fe00:	e6df      	b.n	800fbc2 <_printf_float+0x1da>
 800fe02:	f04f 0800 	mov.w	r8, #0
 800fe06:	f104 0b1a 	add.w	fp, r4, #26
 800fe0a:	e7f4      	b.n	800fdf6 <_printf_float+0x40e>
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	4642      	mov	r2, r8
 800fe10:	e7e1      	b.n	800fdd6 <_printf_float+0x3ee>
 800fe12:	2301      	movs	r3, #1
 800fe14:	464a      	mov	r2, r9
 800fe16:	4631      	mov	r1, r6
 800fe18:	4628      	mov	r0, r5
 800fe1a:	47b8      	blx	r7
 800fe1c:	3001      	adds	r0, #1
 800fe1e:	f43f ae3e 	beq.w	800fa9e <_printf_float+0xb6>
 800fe22:	f108 0801 	add.w	r8, r8, #1
 800fe26:	68e3      	ldr	r3, [r4, #12]
 800fe28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fe2a:	1a5b      	subs	r3, r3, r1
 800fe2c:	4543      	cmp	r3, r8
 800fe2e:	dcf0      	bgt.n	800fe12 <_printf_float+0x42a>
 800fe30:	e6fc      	b.n	800fc2c <_printf_float+0x244>
 800fe32:	f04f 0800 	mov.w	r8, #0
 800fe36:	f104 0919 	add.w	r9, r4, #25
 800fe3a:	e7f4      	b.n	800fe26 <_printf_float+0x43e>

0800fe3c <_printf_common>:
 800fe3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe40:	4616      	mov	r6, r2
 800fe42:	4698      	mov	r8, r3
 800fe44:	688a      	ldr	r2, [r1, #8]
 800fe46:	690b      	ldr	r3, [r1, #16]
 800fe48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fe4c:	4293      	cmp	r3, r2
 800fe4e:	bfb8      	it	lt
 800fe50:	4613      	movlt	r3, r2
 800fe52:	6033      	str	r3, [r6, #0]
 800fe54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fe58:	4607      	mov	r7, r0
 800fe5a:	460c      	mov	r4, r1
 800fe5c:	b10a      	cbz	r2, 800fe62 <_printf_common+0x26>
 800fe5e:	3301      	adds	r3, #1
 800fe60:	6033      	str	r3, [r6, #0]
 800fe62:	6823      	ldr	r3, [r4, #0]
 800fe64:	0699      	lsls	r1, r3, #26
 800fe66:	bf42      	ittt	mi
 800fe68:	6833      	ldrmi	r3, [r6, #0]
 800fe6a:	3302      	addmi	r3, #2
 800fe6c:	6033      	strmi	r3, [r6, #0]
 800fe6e:	6825      	ldr	r5, [r4, #0]
 800fe70:	f015 0506 	ands.w	r5, r5, #6
 800fe74:	d106      	bne.n	800fe84 <_printf_common+0x48>
 800fe76:	f104 0a19 	add.w	sl, r4, #25
 800fe7a:	68e3      	ldr	r3, [r4, #12]
 800fe7c:	6832      	ldr	r2, [r6, #0]
 800fe7e:	1a9b      	subs	r3, r3, r2
 800fe80:	42ab      	cmp	r3, r5
 800fe82:	dc26      	bgt.n	800fed2 <_printf_common+0x96>
 800fe84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fe88:	6822      	ldr	r2, [r4, #0]
 800fe8a:	3b00      	subs	r3, #0
 800fe8c:	bf18      	it	ne
 800fe8e:	2301      	movne	r3, #1
 800fe90:	0692      	lsls	r2, r2, #26
 800fe92:	d42b      	bmi.n	800feec <_printf_common+0xb0>
 800fe94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fe98:	4641      	mov	r1, r8
 800fe9a:	4638      	mov	r0, r7
 800fe9c:	47c8      	blx	r9
 800fe9e:	3001      	adds	r0, #1
 800fea0:	d01e      	beq.n	800fee0 <_printf_common+0xa4>
 800fea2:	6823      	ldr	r3, [r4, #0]
 800fea4:	6922      	ldr	r2, [r4, #16]
 800fea6:	f003 0306 	and.w	r3, r3, #6
 800feaa:	2b04      	cmp	r3, #4
 800feac:	bf02      	ittt	eq
 800feae:	68e5      	ldreq	r5, [r4, #12]
 800feb0:	6833      	ldreq	r3, [r6, #0]
 800feb2:	1aed      	subeq	r5, r5, r3
 800feb4:	68a3      	ldr	r3, [r4, #8]
 800feb6:	bf0c      	ite	eq
 800feb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800febc:	2500      	movne	r5, #0
 800febe:	4293      	cmp	r3, r2
 800fec0:	bfc4      	itt	gt
 800fec2:	1a9b      	subgt	r3, r3, r2
 800fec4:	18ed      	addgt	r5, r5, r3
 800fec6:	2600      	movs	r6, #0
 800fec8:	341a      	adds	r4, #26
 800feca:	42b5      	cmp	r5, r6
 800fecc:	d11a      	bne.n	800ff04 <_printf_common+0xc8>
 800fece:	2000      	movs	r0, #0
 800fed0:	e008      	b.n	800fee4 <_printf_common+0xa8>
 800fed2:	2301      	movs	r3, #1
 800fed4:	4652      	mov	r2, sl
 800fed6:	4641      	mov	r1, r8
 800fed8:	4638      	mov	r0, r7
 800feda:	47c8      	blx	r9
 800fedc:	3001      	adds	r0, #1
 800fede:	d103      	bne.n	800fee8 <_printf_common+0xac>
 800fee0:	f04f 30ff 	mov.w	r0, #4294967295
 800fee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fee8:	3501      	adds	r5, #1
 800feea:	e7c6      	b.n	800fe7a <_printf_common+0x3e>
 800feec:	18e1      	adds	r1, r4, r3
 800feee:	1c5a      	adds	r2, r3, #1
 800fef0:	2030      	movs	r0, #48	@ 0x30
 800fef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fef6:	4422      	add	r2, r4
 800fef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fefc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ff00:	3302      	adds	r3, #2
 800ff02:	e7c7      	b.n	800fe94 <_printf_common+0x58>
 800ff04:	2301      	movs	r3, #1
 800ff06:	4622      	mov	r2, r4
 800ff08:	4641      	mov	r1, r8
 800ff0a:	4638      	mov	r0, r7
 800ff0c:	47c8      	blx	r9
 800ff0e:	3001      	adds	r0, #1
 800ff10:	d0e6      	beq.n	800fee0 <_printf_common+0xa4>
 800ff12:	3601      	adds	r6, #1
 800ff14:	e7d9      	b.n	800feca <_printf_common+0x8e>
	...

0800ff18 <_printf_i>:
 800ff18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff1c:	7e0f      	ldrb	r7, [r1, #24]
 800ff1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ff20:	2f78      	cmp	r7, #120	@ 0x78
 800ff22:	4691      	mov	r9, r2
 800ff24:	4680      	mov	r8, r0
 800ff26:	460c      	mov	r4, r1
 800ff28:	469a      	mov	sl, r3
 800ff2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ff2e:	d807      	bhi.n	800ff40 <_printf_i+0x28>
 800ff30:	2f62      	cmp	r7, #98	@ 0x62
 800ff32:	d80a      	bhi.n	800ff4a <_printf_i+0x32>
 800ff34:	2f00      	cmp	r7, #0
 800ff36:	f000 80d2 	beq.w	80100de <_printf_i+0x1c6>
 800ff3a:	2f58      	cmp	r7, #88	@ 0x58
 800ff3c:	f000 80b9 	beq.w	80100b2 <_printf_i+0x19a>
 800ff40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ff48:	e03a      	b.n	800ffc0 <_printf_i+0xa8>
 800ff4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ff4e:	2b15      	cmp	r3, #21
 800ff50:	d8f6      	bhi.n	800ff40 <_printf_i+0x28>
 800ff52:	a101      	add	r1, pc, #4	@ (adr r1, 800ff58 <_printf_i+0x40>)
 800ff54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff58:	0800ffb1 	.word	0x0800ffb1
 800ff5c:	0800ffc5 	.word	0x0800ffc5
 800ff60:	0800ff41 	.word	0x0800ff41
 800ff64:	0800ff41 	.word	0x0800ff41
 800ff68:	0800ff41 	.word	0x0800ff41
 800ff6c:	0800ff41 	.word	0x0800ff41
 800ff70:	0800ffc5 	.word	0x0800ffc5
 800ff74:	0800ff41 	.word	0x0800ff41
 800ff78:	0800ff41 	.word	0x0800ff41
 800ff7c:	0800ff41 	.word	0x0800ff41
 800ff80:	0800ff41 	.word	0x0800ff41
 800ff84:	080100c5 	.word	0x080100c5
 800ff88:	0800ffef 	.word	0x0800ffef
 800ff8c:	0801007f 	.word	0x0801007f
 800ff90:	0800ff41 	.word	0x0800ff41
 800ff94:	0800ff41 	.word	0x0800ff41
 800ff98:	080100e7 	.word	0x080100e7
 800ff9c:	0800ff41 	.word	0x0800ff41
 800ffa0:	0800ffef 	.word	0x0800ffef
 800ffa4:	0800ff41 	.word	0x0800ff41
 800ffa8:	0800ff41 	.word	0x0800ff41
 800ffac:	08010087 	.word	0x08010087
 800ffb0:	6833      	ldr	r3, [r6, #0]
 800ffb2:	1d1a      	adds	r2, r3, #4
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	6032      	str	r2, [r6, #0]
 800ffb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ffbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	e09d      	b.n	8010100 <_printf_i+0x1e8>
 800ffc4:	6833      	ldr	r3, [r6, #0]
 800ffc6:	6820      	ldr	r0, [r4, #0]
 800ffc8:	1d19      	adds	r1, r3, #4
 800ffca:	6031      	str	r1, [r6, #0]
 800ffcc:	0606      	lsls	r6, r0, #24
 800ffce:	d501      	bpl.n	800ffd4 <_printf_i+0xbc>
 800ffd0:	681d      	ldr	r5, [r3, #0]
 800ffd2:	e003      	b.n	800ffdc <_printf_i+0xc4>
 800ffd4:	0645      	lsls	r5, r0, #25
 800ffd6:	d5fb      	bpl.n	800ffd0 <_printf_i+0xb8>
 800ffd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ffdc:	2d00      	cmp	r5, #0
 800ffde:	da03      	bge.n	800ffe8 <_printf_i+0xd0>
 800ffe0:	232d      	movs	r3, #45	@ 0x2d
 800ffe2:	426d      	negs	r5, r5
 800ffe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffe8:	4859      	ldr	r0, [pc, #356]	@ (8010150 <_printf_i+0x238>)
 800ffea:	230a      	movs	r3, #10
 800ffec:	e011      	b.n	8010012 <_printf_i+0xfa>
 800ffee:	6821      	ldr	r1, [r4, #0]
 800fff0:	6833      	ldr	r3, [r6, #0]
 800fff2:	0608      	lsls	r0, r1, #24
 800fff4:	f853 5b04 	ldr.w	r5, [r3], #4
 800fff8:	d402      	bmi.n	8010000 <_printf_i+0xe8>
 800fffa:	0649      	lsls	r1, r1, #25
 800fffc:	bf48      	it	mi
 800fffe:	b2ad      	uxthmi	r5, r5
 8010000:	2f6f      	cmp	r7, #111	@ 0x6f
 8010002:	4853      	ldr	r0, [pc, #332]	@ (8010150 <_printf_i+0x238>)
 8010004:	6033      	str	r3, [r6, #0]
 8010006:	bf14      	ite	ne
 8010008:	230a      	movne	r3, #10
 801000a:	2308      	moveq	r3, #8
 801000c:	2100      	movs	r1, #0
 801000e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010012:	6866      	ldr	r6, [r4, #4]
 8010014:	60a6      	str	r6, [r4, #8]
 8010016:	2e00      	cmp	r6, #0
 8010018:	bfa2      	ittt	ge
 801001a:	6821      	ldrge	r1, [r4, #0]
 801001c:	f021 0104 	bicge.w	r1, r1, #4
 8010020:	6021      	strge	r1, [r4, #0]
 8010022:	b90d      	cbnz	r5, 8010028 <_printf_i+0x110>
 8010024:	2e00      	cmp	r6, #0
 8010026:	d04b      	beq.n	80100c0 <_printf_i+0x1a8>
 8010028:	4616      	mov	r6, r2
 801002a:	fbb5 f1f3 	udiv	r1, r5, r3
 801002e:	fb03 5711 	mls	r7, r3, r1, r5
 8010032:	5dc7      	ldrb	r7, [r0, r7]
 8010034:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010038:	462f      	mov	r7, r5
 801003a:	42bb      	cmp	r3, r7
 801003c:	460d      	mov	r5, r1
 801003e:	d9f4      	bls.n	801002a <_printf_i+0x112>
 8010040:	2b08      	cmp	r3, #8
 8010042:	d10b      	bne.n	801005c <_printf_i+0x144>
 8010044:	6823      	ldr	r3, [r4, #0]
 8010046:	07df      	lsls	r7, r3, #31
 8010048:	d508      	bpl.n	801005c <_printf_i+0x144>
 801004a:	6923      	ldr	r3, [r4, #16]
 801004c:	6861      	ldr	r1, [r4, #4]
 801004e:	4299      	cmp	r1, r3
 8010050:	bfde      	ittt	le
 8010052:	2330      	movle	r3, #48	@ 0x30
 8010054:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010058:	f106 36ff 	addle.w	r6, r6, #4294967295
 801005c:	1b92      	subs	r2, r2, r6
 801005e:	6122      	str	r2, [r4, #16]
 8010060:	f8cd a000 	str.w	sl, [sp]
 8010064:	464b      	mov	r3, r9
 8010066:	aa03      	add	r2, sp, #12
 8010068:	4621      	mov	r1, r4
 801006a:	4640      	mov	r0, r8
 801006c:	f7ff fee6 	bl	800fe3c <_printf_common>
 8010070:	3001      	adds	r0, #1
 8010072:	d14a      	bne.n	801010a <_printf_i+0x1f2>
 8010074:	f04f 30ff 	mov.w	r0, #4294967295
 8010078:	b004      	add	sp, #16
 801007a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801007e:	6823      	ldr	r3, [r4, #0]
 8010080:	f043 0320 	orr.w	r3, r3, #32
 8010084:	6023      	str	r3, [r4, #0]
 8010086:	4833      	ldr	r0, [pc, #204]	@ (8010154 <_printf_i+0x23c>)
 8010088:	2778      	movs	r7, #120	@ 0x78
 801008a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801008e:	6823      	ldr	r3, [r4, #0]
 8010090:	6831      	ldr	r1, [r6, #0]
 8010092:	061f      	lsls	r7, r3, #24
 8010094:	f851 5b04 	ldr.w	r5, [r1], #4
 8010098:	d402      	bmi.n	80100a0 <_printf_i+0x188>
 801009a:	065f      	lsls	r7, r3, #25
 801009c:	bf48      	it	mi
 801009e:	b2ad      	uxthmi	r5, r5
 80100a0:	6031      	str	r1, [r6, #0]
 80100a2:	07d9      	lsls	r1, r3, #31
 80100a4:	bf44      	itt	mi
 80100a6:	f043 0320 	orrmi.w	r3, r3, #32
 80100aa:	6023      	strmi	r3, [r4, #0]
 80100ac:	b11d      	cbz	r5, 80100b6 <_printf_i+0x19e>
 80100ae:	2310      	movs	r3, #16
 80100b0:	e7ac      	b.n	801000c <_printf_i+0xf4>
 80100b2:	4827      	ldr	r0, [pc, #156]	@ (8010150 <_printf_i+0x238>)
 80100b4:	e7e9      	b.n	801008a <_printf_i+0x172>
 80100b6:	6823      	ldr	r3, [r4, #0]
 80100b8:	f023 0320 	bic.w	r3, r3, #32
 80100bc:	6023      	str	r3, [r4, #0]
 80100be:	e7f6      	b.n	80100ae <_printf_i+0x196>
 80100c0:	4616      	mov	r6, r2
 80100c2:	e7bd      	b.n	8010040 <_printf_i+0x128>
 80100c4:	6833      	ldr	r3, [r6, #0]
 80100c6:	6825      	ldr	r5, [r4, #0]
 80100c8:	6961      	ldr	r1, [r4, #20]
 80100ca:	1d18      	adds	r0, r3, #4
 80100cc:	6030      	str	r0, [r6, #0]
 80100ce:	062e      	lsls	r6, r5, #24
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	d501      	bpl.n	80100d8 <_printf_i+0x1c0>
 80100d4:	6019      	str	r1, [r3, #0]
 80100d6:	e002      	b.n	80100de <_printf_i+0x1c6>
 80100d8:	0668      	lsls	r0, r5, #25
 80100da:	d5fb      	bpl.n	80100d4 <_printf_i+0x1bc>
 80100dc:	8019      	strh	r1, [r3, #0]
 80100de:	2300      	movs	r3, #0
 80100e0:	6123      	str	r3, [r4, #16]
 80100e2:	4616      	mov	r6, r2
 80100e4:	e7bc      	b.n	8010060 <_printf_i+0x148>
 80100e6:	6833      	ldr	r3, [r6, #0]
 80100e8:	1d1a      	adds	r2, r3, #4
 80100ea:	6032      	str	r2, [r6, #0]
 80100ec:	681e      	ldr	r6, [r3, #0]
 80100ee:	6862      	ldr	r2, [r4, #4]
 80100f0:	2100      	movs	r1, #0
 80100f2:	4630      	mov	r0, r6
 80100f4:	f7f0 f8ac 	bl	8000250 <memchr>
 80100f8:	b108      	cbz	r0, 80100fe <_printf_i+0x1e6>
 80100fa:	1b80      	subs	r0, r0, r6
 80100fc:	6060      	str	r0, [r4, #4]
 80100fe:	6863      	ldr	r3, [r4, #4]
 8010100:	6123      	str	r3, [r4, #16]
 8010102:	2300      	movs	r3, #0
 8010104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010108:	e7aa      	b.n	8010060 <_printf_i+0x148>
 801010a:	6923      	ldr	r3, [r4, #16]
 801010c:	4632      	mov	r2, r6
 801010e:	4649      	mov	r1, r9
 8010110:	4640      	mov	r0, r8
 8010112:	47d0      	blx	sl
 8010114:	3001      	adds	r0, #1
 8010116:	d0ad      	beq.n	8010074 <_printf_i+0x15c>
 8010118:	6823      	ldr	r3, [r4, #0]
 801011a:	079b      	lsls	r3, r3, #30
 801011c:	d413      	bmi.n	8010146 <_printf_i+0x22e>
 801011e:	68e0      	ldr	r0, [r4, #12]
 8010120:	9b03      	ldr	r3, [sp, #12]
 8010122:	4298      	cmp	r0, r3
 8010124:	bfb8      	it	lt
 8010126:	4618      	movlt	r0, r3
 8010128:	e7a6      	b.n	8010078 <_printf_i+0x160>
 801012a:	2301      	movs	r3, #1
 801012c:	4632      	mov	r2, r6
 801012e:	4649      	mov	r1, r9
 8010130:	4640      	mov	r0, r8
 8010132:	47d0      	blx	sl
 8010134:	3001      	adds	r0, #1
 8010136:	d09d      	beq.n	8010074 <_printf_i+0x15c>
 8010138:	3501      	adds	r5, #1
 801013a:	68e3      	ldr	r3, [r4, #12]
 801013c:	9903      	ldr	r1, [sp, #12]
 801013e:	1a5b      	subs	r3, r3, r1
 8010140:	42ab      	cmp	r3, r5
 8010142:	dcf2      	bgt.n	801012a <_printf_i+0x212>
 8010144:	e7eb      	b.n	801011e <_printf_i+0x206>
 8010146:	2500      	movs	r5, #0
 8010148:	f104 0619 	add.w	r6, r4, #25
 801014c:	e7f5      	b.n	801013a <_printf_i+0x222>
 801014e:	bf00      	nop
 8010150:	08016969 	.word	0x08016969
 8010154:	0801697a 	.word	0x0801697a

08010158 <_scanf_float>:
 8010158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801015c:	b087      	sub	sp, #28
 801015e:	4617      	mov	r7, r2
 8010160:	9303      	str	r3, [sp, #12]
 8010162:	688b      	ldr	r3, [r1, #8]
 8010164:	1e5a      	subs	r2, r3, #1
 8010166:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801016a:	bf81      	itttt	hi
 801016c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010170:	eb03 0b05 	addhi.w	fp, r3, r5
 8010174:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010178:	608b      	strhi	r3, [r1, #8]
 801017a:	680b      	ldr	r3, [r1, #0]
 801017c:	460a      	mov	r2, r1
 801017e:	f04f 0500 	mov.w	r5, #0
 8010182:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010186:	f842 3b1c 	str.w	r3, [r2], #28
 801018a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801018e:	4680      	mov	r8, r0
 8010190:	460c      	mov	r4, r1
 8010192:	bf98      	it	ls
 8010194:	f04f 0b00 	movls.w	fp, #0
 8010198:	9201      	str	r2, [sp, #4]
 801019a:	4616      	mov	r6, r2
 801019c:	46aa      	mov	sl, r5
 801019e:	46a9      	mov	r9, r5
 80101a0:	9502      	str	r5, [sp, #8]
 80101a2:	68a2      	ldr	r2, [r4, #8]
 80101a4:	b152      	cbz	r2, 80101bc <_scanf_float+0x64>
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80101ac:	d864      	bhi.n	8010278 <_scanf_float+0x120>
 80101ae:	2b40      	cmp	r3, #64	@ 0x40
 80101b0:	d83c      	bhi.n	801022c <_scanf_float+0xd4>
 80101b2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80101b6:	b2c8      	uxtb	r0, r1
 80101b8:	280e      	cmp	r0, #14
 80101ba:	d93a      	bls.n	8010232 <_scanf_float+0xda>
 80101bc:	f1b9 0f00 	cmp.w	r9, #0
 80101c0:	d003      	beq.n	80101ca <_scanf_float+0x72>
 80101c2:	6823      	ldr	r3, [r4, #0]
 80101c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80101c8:	6023      	str	r3, [r4, #0]
 80101ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80101ce:	f1ba 0f01 	cmp.w	sl, #1
 80101d2:	f200 8117 	bhi.w	8010404 <_scanf_float+0x2ac>
 80101d6:	9b01      	ldr	r3, [sp, #4]
 80101d8:	429e      	cmp	r6, r3
 80101da:	f200 8108 	bhi.w	80103ee <_scanf_float+0x296>
 80101de:	2001      	movs	r0, #1
 80101e0:	b007      	add	sp, #28
 80101e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101e6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80101ea:	2a0d      	cmp	r2, #13
 80101ec:	d8e6      	bhi.n	80101bc <_scanf_float+0x64>
 80101ee:	a101      	add	r1, pc, #4	@ (adr r1, 80101f4 <_scanf_float+0x9c>)
 80101f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80101f4:	0801033b 	.word	0x0801033b
 80101f8:	080101bd 	.word	0x080101bd
 80101fc:	080101bd 	.word	0x080101bd
 8010200:	080101bd 	.word	0x080101bd
 8010204:	0801039b 	.word	0x0801039b
 8010208:	08010373 	.word	0x08010373
 801020c:	080101bd 	.word	0x080101bd
 8010210:	080101bd 	.word	0x080101bd
 8010214:	08010349 	.word	0x08010349
 8010218:	080101bd 	.word	0x080101bd
 801021c:	080101bd 	.word	0x080101bd
 8010220:	080101bd 	.word	0x080101bd
 8010224:	080101bd 	.word	0x080101bd
 8010228:	08010301 	.word	0x08010301
 801022c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010230:	e7db      	b.n	80101ea <_scanf_float+0x92>
 8010232:	290e      	cmp	r1, #14
 8010234:	d8c2      	bhi.n	80101bc <_scanf_float+0x64>
 8010236:	a001      	add	r0, pc, #4	@ (adr r0, 801023c <_scanf_float+0xe4>)
 8010238:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801023c:	080102f1 	.word	0x080102f1
 8010240:	080101bd 	.word	0x080101bd
 8010244:	080102f1 	.word	0x080102f1
 8010248:	08010387 	.word	0x08010387
 801024c:	080101bd 	.word	0x080101bd
 8010250:	08010299 	.word	0x08010299
 8010254:	080102d7 	.word	0x080102d7
 8010258:	080102d7 	.word	0x080102d7
 801025c:	080102d7 	.word	0x080102d7
 8010260:	080102d7 	.word	0x080102d7
 8010264:	080102d7 	.word	0x080102d7
 8010268:	080102d7 	.word	0x080102d7
 801026c:	080102d7 	.word	0x080102d7
 8010270:	080102d7 	.word	0x080102d7
 8010274:	080102d7 	.word	0x080102d7
 8010278:	2b6e      	cmp	r3, #110	@ 0x6e
 801027a:	d809      	bhi.n	8010290 <_scanf_float+0x138>
 801027c:	2b60      	cmp	r3, #96	@ 0x60
 801027e:	d8b2      	bhi.n	80101e6 <_scanf_float+0x8e>
 8010280:	2b54      	cmp	r3, #84	@ 0x54
 8010282:	d07b      	beq.n	801037c <_scanf_float+0x224>
 8010284:	2b59      	cmp	r3, #89	@ 0x59
 8010286:	d199      	bne.n	80101bc <_scanf_float+0x64>
 8010288:	2d07      	cmp	r5, #7
 801028a:	d197      	bne.n	80101bc <_scanf_float+0x64>
 801028c:	2508      	movs	r5, #8
 801028e:	e02c      	b.n	80102ea <_scanf_float+0x192>
 8010290:	2b74      	cmp	r3, #116	@ 0x74
 8010292:	d073      	beq.n	801037c <_scanf_float+0x224>
 8010294:	2b79      	cmp	r3, #121	@ 0x79
 8010296:	e7f6      	b.n	8010286 <_scanf_float+0x12e>
 8010298:	6821      	ldr	r1, [r4, #0]
 801029a:	05c8      	lsls	r0, r1, #23
 801029c:	d51b      	bpl.n	80102d6 <_scanf_float+0x17e>
 801029e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80102a2:	6021      	str	r1, [r4, #0]
 80102a4:	f109 0901 	add.w	r9, r9, #1
 80102a8:	f1bb 0f00 	cmp.w	fp, #0
 80102ac:	d003      	beq.n	80102b6 <_scanf_float+0x15e>
 80102ae:	3201      	adds	r2, #1
 80102b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80102b4:	60a2      	str	r2, [r4, #8]
 80102b6:	68a3      	ldr	r3, [r4, #8]
 80102b8:	3b01      	subs	r3, #1
 80102ba:	60a3      	str	r3, [r4, #8]
 80102bc:	6923      	ldr	r3, [r4, #16]
 80102be:	3301      	adds	r3, #1
 80102c0:	6123      	str	r3, [r4, #16]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	3b01      	subs	r3, #1
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	607b      	str	r3, [r7, #4]
 80102ca:	f340 8087 	ble.w	80103dc <_scanf_float+0x284>
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	3301      	adds	r3, #1
 80102d2:	603b      	str	r3, [r7, #0]
 80102d4:	e765      	b.n	80101a2 <_scanf_float+0x4a>
 80102d6:	eb1a 0105 	adds.w	r1, sl, r5
 80102da:	f47f af6f 	bne.w	80101bc <_scanf_float+0x64>
 80102de:	6822      	ldr	r2, [r4, #0]
 80102e0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80102e4:	6022      	str	r2, [r4, #0]
 80102e6:	460d      	mov	r5, r1
 80102e8:	468a      	mov	sl, r1
 80102ea:	f806 3b01 	strb.w	r3, [r6], #1
 80102ee:	e7e2      	b.n	80102b6 <_scanf_float+0x15e>
 80102f0:	6822      	ldr	r2, [r4, #0]
 80102f2:	0610      	lsls	r0, r2, #24
 80102f4:	f57f af62 	bpl.w	80101bc <_scanf_float+0x64>
 80102f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80102fc:	6022      	str	r2, [r4, #0]
 80102fe:	e7f4      	b.n	80102ea <_scanf_float+0x192>
 8010300:	f1ba 0f00 	cmp.w	sl, #0
 8010304:	d10e      	bne.n	8010324 <_scanf_float+0x1cc>
 8010306:	f1b9 0f00 	cmp.w	r9, #0
 801030a:	d10e      	bne.n	801032a <_scanf_float+0x1d2>
 801030c:	6822      	ldr	r2, [r4, #0]
 801030e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010312:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010316:	d108      	bne.n	801032a <_scanf_float+0x1d2>
 8010318:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801031c:	6022      	str	r2, [r4, #0]
 801031e:	f04f 0a01 	mov.w	sl, #1
 8010322:	e7e2      	b.n	80102ea <_scanf_float+0x192>
 8010324:	f1ba 0f02 	cmp.w	sl, #2
 8010328:	d055      	beq.n	80103d6 <_scanf_float+0x27e>
 801032a:	2d01      	cmp	r5, #1
 801032c:	d002      	beq.n	8010334 <_scanf_float+0x1dc>
 801032e:	2d04      	cmp	r5, #4
 8010330:	f47f af44 	bne.w	80101bc <_scanf_float+0x64>
 8010334:	3501      	adds	r5, #1
 8010336:	b2ed      	uxtb	r5, r5
 8010338:	e7d7      	b.n	80102ea <_scanf_float+0x192>
 801033a:	f1ba 0f01 	cmp.w	sl, #1
 801033e:	f47f af3d 	bne.w	80101bc <_scanf_float+0x64>
 8010342:	f04f 0a02 	mov.w	sl, #2
 8010346:	e7d0      	b.n	80102ea <_scanf_float+0x192>
 8010348:	b97d      	cbnz	r5, 801036a <_scanf_float+0x212>
 801034a:	f1b9 0f00 	cmp.w	r9, #0
 801034e:	f47f af38 	bne.w	80101c2 <_scanf_float+0x6a>
 8010352:	6822      	ldr	r2, [r4, #0]
 8010354:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010358:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801035c:	f040 8108 	bne.w	8010570 <_scanf_float+0x418>
 8010360:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010364:	6022      	str	r2, [r4, #0]
 8010366:	2501      	movs	r5, #1
 8010368:	e7bf      	b.n	80102ea <_scanf_float+0x192>
 801036a:	2d03      	cmp	r5, #3
 801036c:	d0e2      	beq.n	8010334 <_scanf_float+0x1dc>
 801036e:	2d05      	cmp	r5, #5
 8010370:	e7de      	b.n	8010330 <_scanf_float+0x1d8>
 8010372:	2d02      	cmp	r5, #2
 8010374:	f47f af22 	bne.w	80101bc <_scanf_float+0x64>
 8010378:	2503      	movs	r5, #3
 801037a:	e7b6      	b.n	80102ea <_scanf_float+0x192>
 801037c:	2d06      	cmp	r5, #6
 801037e:	f47f af1d 	bne.w	80101bc <_scanf_float+0x64>
 8010382:	2507      	movs	r5, #7
 8010384:	e7b1      	b.n	80102ea <_scanf_float+0x192>
 8010386:	6822      	ldr	r2, [r4, #0]
 8010388:	0591      	lsls	r1, r2, #22
 801038a:	f57f af17 	bpl.w	80101bc <_scanf_float+0x64>
 801038e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010392:	6022      	str	r2, [r4, #0]
 8010394:	f8cd 9008 	str.w	r9, [sp, #8]
 8010398:	e7a7      	b.n	80102ea <_scanf_float+0x192>
 801039a:	6822      	ldr	r2, [r4, #0]
 801039c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80103a0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80103a4:	d006      	beq.n	80103b4 <_scanf_float+0x25c>
 80103a6:	0550      	lsls	r0, r2, #21
 80103a8:	f57f af08 	bpl.w	80101bc <_scanf_float+0x64>
 80103ac:	f1b9 0f00 	cmp.w	r9, #0
 80103b0:	f000 80de 	beq.w	8010570 <_scanf_float+0x418>
 80103b4:	0591      	lsls	r1, r2, #22
 80103b6:	bf58      	it	pl
 80103b8:	9902      	ldrpl	r1, [sp, #8]
 80103ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80103be:	bf58      	it	pl
 80103c0:	eba9 0101 	subpl.w	r1, r9, r1
 80103c4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80103c8:	bf58      	it	pl
 80103ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80103ce:	6022      	str	r2, [r4, #0]
 80103d0:	f04f 0900 	mov.w	r9, #0
 80103d4:	e789      	b.n	80102ea <_scanf_float+0x192>
 80103d6:	f04f 0a03 	mov.w	sl, #3
 80103da:	e786      	b.n	80102ea <_scanf_float+0x192>
 80103dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80103e0:	4639      	mov	r1, r7
 80103e2:	4640      	mov	r0, r8
 80103e4:	4798      	blx	r3
 80103e6:	2800      	cmp	r0, #0
 80103e8:	f43f aedb 	beq.w	80101a2 <_scanf_float+0x4a>
 80103ec:	e6e6      	b.n	80101bc <_scanf_float+0x64>
 80103ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80103f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80103f6:	463a      	mov	r2, r7
 80103f8:	4640      	mov	r0, r8
 80103fa:	4798      	blx	r3
 80103fc:	6923      	ldr	r3, [r4, #16]
 80103fe:	3b01      	subs	r3, #1
 8010400:	6123      	str	r3, [r4, #16]
 8010402:	e6e8      	b.n	80101d6 <_scanf_float+0x7e>
 8010404:	1e6b      	subs	r3, r5, #1
 8010406:	2b06      	cmp	r3, #6
 8010408:	d824      	bhi.n	8010454 <_scanf_float+0x2fc>
 801040a:	2d02      	cmp	r5, #2
 801040c:	d836      	bhi.n	801047c <_scanf_float+0x324>
 801040e:	9b01      	ldr	r3, [sp, #4]
 8010410:	429e      	cmp	r6, r3
 8010412:	f67f aee4 	bls.w	80101de <_scanf_float+0x86>
 8010416:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801041a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801041e:	463a      	mov	r2, r7
 8010420:	4640      	mov	r0, r8
 8010422:	4798      	blx	r3
 8010424:	6923      	ldr	r3, [r4, #16]
 8010426:	3b01      	subs	r3, #1
 8010428:	6123      	str	r3, [r4, #16]
 801042a:	e7f0      	b.n	801040e <_scanf_float+0x2b6>
 801042c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010430:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010434:	463a      	mov	r2, r7
 8010436:	4640      	mov	r0, r8
 8010438:	4798      	blx	r3
 801043a:	6923      	ldr	r3, [r4, #16]
 801043c:	3b01      	subs	r3, #1
 801043e:	6123      	str	r3, [r4, #16]
 8010440:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010444:	fa5f fa8a 	uxtb.w	sl, sl
 8010448:	f1ba 0f02 	cmp.w	sl, #2
 801044c:	d1ee      	bne.n	801042c <_scanf_float+0x2d4>
 801044e:	3d03      	subs	r5, #3
 8010450:	b2ed      	uxtb	r5, r5
 8010452:	1b76      	subs	r6, r6, r5
 8010454:	6823      	ldr	r3, [r4, #0]
 8010456:	05da      	lsls	r2, r3, #23
 8010458:	d530      	bpl.n	80104bc <_scanf_float+0x364>
 801045a:	055b      	lsls	r3, r3, #21
 801045c:	d511      	bpl.n	8010482 <_scanf_float+0x32a>
 801045e:	9b01      	ldr	r3, [sp, #4]
 8010460:	429e      	cmp	r6, r3
 8010462:	f67f aebc 	bls.w	80101de <_scanf_float+0x86>
 8010466:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801046a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801046e:	463a      	mov	r2, r7
 8010470:	4640      	mov	r0, r8
 8010472:	4798      	blx	r3
 8010474:	6923      	ldr	r3, [r4, #16]
 8010476:	3b01      	subs	r3, #1
 8010478:	6123      	str	r3, [r4, #16]
 801047a:	e7f0      	b.n	801045e <_scanf_float+0x306>
 801047c:	46aa      	mov	sl, r5
 801047e:	46b3      	mov	fp, r6
 8010480:	e7de      	b.n	8010440 <_scanf_float+0x2e8>
 8010482:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010486:	6923      	ldr	r3, [r4, #16]
 8010488:	2965      	cmp	r1, #101	@ 0x65
 801048a:	f103 33ff 	add.w	r3, r3, #4294967295
 801048e:	f106 35ff 	add.w	r5, r6, #4294967295
 8010492:	6123      	str	r3, [r4, #16]
 8010494:	d00c      	beq.n	80104b0 <_scanf_float+0x358>
 8010496:	2945      	cmp	r1, #69	@ 0x45
 8010498:	d00a      	beq.n	80104b0 <_scanf_float+0x358>
 801049a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801049e:	463a      	mov	r2, r7
 80104a0:	4640      	mov	r0, r8
 80104a2:	4798      	blx	r3
 80104a4:	6923      	ldr	r3, [r4, #16]
 80104a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80104aa:	3b01      	subs	r3, #1
 80104ac:	1eb5      	subs	r5, r6, #2
 80104ae:	6123      	str	r3, [r4, #16]
 80104b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80104b4:	463a      	mov	r2, r7
 80104b6:	4640      	mov	r0, r8
 80104b8:	4798      	blx	r3
 80104ba:	462e      	mov	r6, r5
 80104bc:	6822      	ldr	r2, [r4, #0]
 80104be:	f012 0210 	ands.w	r2, r2, #16
 80104c2:	d001      	beq.n	80104c8 <_scanf_float+0x370>
 80104c4:	2000      	movs	r0, #0
 80104c6:	e68b      	b.n	80101e0 <_scanf_float+0x88>
 80104c8:	7032      	strb	r2, [r6, #0]
 80104ca:	6823      	ldr	r3, [r4, #0]
 80104cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80104d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80104d4:	d11c      	bne.n	8010510 <_scanf_float+0x3b8>
 80104d6:	9b02      	ldr	r3, [sp, #8]
 80104d8:	454b      	cmp	r3, r9
 80104da:	eba3 0209 	sub.w	r2, r3, r9
 80104de:	d123      	bne.n	8010528 <_scanf_float+0x3d0>
 80104e0:	9901      	ldr	r1, [sp, #4]
 80104e2:	2200      	movs	r2, #0
 80104e4:	4640      	mov	r0, r8
 80104e6:	f7ff f8e3 	bl	800f6b0 <_strtod_r>
 80104ea:	9b03      	ldr	r3, [sp, #12]
 80104ec:	6821      	ldr	r1, [r4, #0]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f011 0f02 	tst.w	r1, #2
 80104f4:	ec57 6b10 	vmov	r6, r7, d0
 80104f8:	f103 0204 	add.w	r2, r3, #4
 80104fc:	d01f      	beq.n	801053e <_scanf_float+0x3e6>
 80104fe:	9903      	ldr	r1, [sp, #12]
 8010500:	600a      	str	r2, [r1, #0]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	e9c3 6700 	strd	r6, r7, [r3]
 8010508:	68e3      	ldr	r3, [r4, #12]
 801050a:	3301      	adds	r3, #1
 801050c:	60e3      	str	r3, [r4, #12]
 801050e:	e7d9      	b.n	80104c4 <_scanf_float+0x36c>
 8010510:	9b04      	ldr	r3, [sp, #16]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d0e4      	beq.n	80104e0 <_scanf_float+0x388>
 8010516:	9905      	ldr	r1, [sp, #20]
 8010518:	230a      	movs	r3, #10
 801051a:	3101      	adds	r1, #1
 801051c:	4640      	mov	r0, r8
 801051e:	f7ff f9b7 	bl	800f890 <_strtol_r>
 8010522:	9b04      	ldr	r3, [sp, #16]
 8010524:	9e05      	ldr	r6, [sp, #20]
 8010526:	1ac2      	subs	r2, r0, r3
 8010528:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801052c:	429e      	cmp	r6, r3
 801052e:	bf28      	it	cs
 8010530:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010534:	4910      	ldr	r1, [pc, #64]	@ (8010578 <_scanf_float+0x420>)
 8010536:	4630      	mov	r0, r6
 8010538:	f000 f988 	bl	801084c <siprintf>
 801053c:	e7d0      	b.n	80104e0 <_scanf_float+0x388>
 801053e:	f011 0f04 	tst.w	r1, #4
 8010542:	9903      	ldr	r1, [sp, #12]
 8010544:	600a      	str	r2, [r1, #0]
 8010546:	d1dc      	bne.n	8010502 <_scanf_float+0x3aa>
 8010548:	681d      	ldr	r5, [r3, #0]
 801054a:	4632      	mov	r2, r6
 801054c:	463b      	mov	r3, r7
 801054e:	4630      	mov	r0, r6
 8010550:	4639      	mov	r1, r7
 8010552:	f7f0 fb2b 	bl	8000bac <__aeabi_dcmpun>
 8010556:	b128      	cbz	r0, 8010564 <_scanf_float+0x40c>
 8010558:	4808      	ldr	r0, [pc, #32]	@ (801057c <_scanf_float+0x424>)
 801055a:	f000 fbe5 	bl	8010d28 <nanf>
 801055e:	ed85 0a00 	vstr	s0, [r5]
 8010562:	e7d1      	b.n	8010508 <_scanf_float+0x3b0>
 8010564:	4630      	mov	r0, r6
 8010566:	4639      	mov	r1, r7
 8010568:	f7f0 fb7e 	bl	8000c68 <__aeabi_d2f>
 801056c:	6028      	str	r0, [r5, #0]
 801056e:	e7cb      	b.n	8010508 <_scanf_float+0x3b0>
 8010570:	f04f 0900 	mov.w	r9, #0
 8010574:	e629      	b.n	80101ca <_scanf_float+0x72>
 8010576:	bf00      	nop
 8010578:	0801698b 	.word	0x0801698b
 801057c:	08016c47 	.word	0x08016c47

08010580 <std>:
 8010580:	2300      	movs	r3, #0
 8010582:	b510      	push	{r4, lr}
 8010584:	4604      	mov	r4, r0
 8010586:	e9c0 3300 	strd	r3, r3, [r0]
 801058a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801058e:	6083      	str	r3, [r0, #8]
 8010590:	8181      	strh	r1, [r0, #12]
 8010592:	6643      	str	r3, [r0, #100]	@ 0x64
 8010594:	81c2      	strh	r2, [r0, #14]
 8010596:	6183      	str	r3, [r0, #24]
 8010598:	4619      	mov	r1, r3
 801059a:	2208      	movs	r2, #8
 801059c:	305c      	adds	r0, #92	@ 0x5c
 801059e:	f000 fa79 	bl	8010a94 <memset>
 80105a2:	4b0d      	ldr	r3, [pc, #52]	@ (80105d8 <std+0x58>)
 80105a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80105a6:	4b0d      	ldr	r3, [pc, #52]	@ (80105dc <std+0x5c>)
 80105a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80105aa:	4b0d      	ldr	r3, [pc, #52]	@ (80105e0 <std+0x60>)
 80105ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80105ae:	4b0d      	ldr	r3, [pc, #52]	@ (80105e4 <std+0x64>)
 80105b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80105b2:	4b0d      	ldr	r3, [pc, #52]	@ (80105e8 <std+0x68>)
 80105b4:	6224      	str	r4, [r4, #32]
 80105b6:	429c      	cmp	r4, r3
 80105b8:	d006      	beq.n	80105c8 <std+0x48>
 80105ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80105be:	4294      	cmp	r4, r2
 80105c0:	d002      	beq.n	80105c8 <std+0x48>
 80105c2:	33d0      	adds	r3, #208	@ 0xd0
 80105c4:	429c      	cmp	r4, r3
 80105c6:	d105      	bne.n	80105d4 <std+0x54>
 80105c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80105cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105d0:	f7f9 b97a 	b.w	80098c8 <__retarget_lock_init_recursive>
 80105d4:	bd10      	pop	{r4, pc}
 80105d6:	bf00      	nop
 80105d8:	080108e1 	.word	0x080108e1
 80105dc:	08010907 	.word	0x08010907
 80105e0:	0801093f 	.word	0x0801093f
 80105e4:	08010963 	.word	0x08010963
 80105e8:	20005cf4 	.word	0x20005cf4

080105ec <stdio_exit_handler>:
 80105ec:	4a02      	ldr	r2, [pc, #8]	@ (80105f8 <stdio_exit_handler+0xc>)
 80105ee:	4903      	ldr	r1, [pc, #12]	@ (80105fc <stdio_exit_handler+0x10>)
 80105f0:	4803      	ldr	r0, [pc, #12]	@ (8010600 <stdio_exit_handler+0x14>)
 80105f2:	f000 b869 	b.w	80106c8 <_fwalk_sglue>
 80105f6:	bf00      	nop
 80105f8:	2000003c 	.word	0x2000003c
 80105fc:	080136e9 	.word	0x080136e9
 8010600:	200001b8 	.word	0x200001b8

08010604 <cleanup_stdio>:
 8010604:	6841      	ldr	r1, [r0, #4]
 8010606:	4b0c      	ldr	r3, [pc, #48]	@ (8010638 <cleanup_stdio+0x34>)
 8010608:	4299      	cmp	r1, r3
 801060a:	b510      	push	{r4, lr}
 801060c:	4604      	mov	r4, r0
 801060e:	d001      	beq.n	8010614 <cleanup_stdio+0x10>
 8010610:	f003 f86a 	bl	80136e8 <_fflush_r>
 8010614:	68a1      	ldr	r1, [r4, #8]
 8010616:	4b09      	ldr	r3, [pc, #36]	@ (801063c <cleanup_stdio+0x38>)
 8010618:	4299      	cmp	r1, r3
 801061a:	d002      	beq.n	8010622 <cleanup_stdio+0x1e>
 801061c:	4620      	mov	r0, r4
 801061e:	f003 f863 	bl	80136e8 <_fflush_r>
 8010622:	68e1      	ldr	r1, [r4, #12]
 8010624:	4b06      	ldr	r3, [pc, #24]	@ (8010640 <cleanup_stdio+0x3c>)
 8010626:	4299      	cmp	r1, r3
 8010628:	d004      	beq.n	8010634 <cleanup_stdio+0x30>
 801062a:	4620      	mov	r0, r4
 801062c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010630:	f003 b85a 	b.w	80136e8 <_fflush_r>
 8010634:	bd10      	pop	{r4, pc}
 8010636:	bf00      	nop
 8010638:	20005cf4 	.word	0x20005cf4
 801063c:	20005d5c 	.word	0x20005d5c
 8010640:	20005dc4 	.word	0x20005dc4

08010644 <global_stdio_init.part.0>:
 8010644:	b510      	push	{r4, lr}
 8010646:	4b0b      	ldr	r3, [pc, #44]	@ (8010674 <global_stdio_init.part.0+0x30>)
 8010648:	4c0b      	ldr	r4, [pc, #44]	@ (8010678 <global_stdio_init.part.0+0x34>)
 801064a:	4a0c      	ldr	r2, [pc, #48]	@ (801067c <global_stdio_init.part.0+0x38>)
 801064c:	601a      	str	r2, [r3, #0]
 801064e:	4620      	mov	r0, r4
 8010650:	2200      	movs	r2, #0
 8010652:	2104      	movs	r1, #4
 8010654:	f7ff ff94 	bl	8010580 <std>
 8010658:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801065c:	2201      	movs	r2, #1
 801065e:	2109      	movs	r1, #9
 8010660:	f7ff ff8e 	bl	8010580 <std>
 8010664:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010668:	2202      	movs	r2, #2
 801066a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801066e:	2112      	movs	r1, #18
 8010670:	f7ff bf86 	b.w	8010580 <std>
 8010674:	20005e2c 	.word	0x20005e2c
 8010678:	20005cf4 	.word	0x20005cf4
 801067c:	080105ed 	.word	0x080105ed

08010680 <__sfp_lock_acquire>:
 8010680:	4801      	ldr	r0, [pc, #4]	@ (8010688 <__sfp_lock_acquire+0x8>)
 8010682:	f7f9 b93d 	b.w	8009900 <__retarget_lock_acquire_recursive>
 8010686:	bf00      	nop
 8010688:	20001b7c 	.word	0x20001b7c

0801068c <__sfp_lock_release>:
 801068c:	4801      	ldr	r0, [pc, #4]	@ (8010694 <__sfp_lock_release+0x8>)
 801068e:	f7f9 b953 	b.w	8009938 <__retarget_lock_release_recursive>
 8010692:	bf00      	nop
 8010694:	20001b7c 	.word	0x20001b7c

08010698 <__sinit>:
 8010698:	b510      	push	{r4, lr}
 801069a:	4604      	mov	r4, r0
 801069c:	f7ff fff0 	bl	8010680 <__sfp_lock_acquire>
 80106a0:	6a23      	ldr	r3, [r4, #32]
 80106a2:	b11b      	cbz	r3, 80106ac <__sinit+0x14>
 80106a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106a8:	f7ff bff0 	b.w	801068c <__sfp_lock_release>
 80106ac:	4b04      	ldr	r3, [pc, #16]	@ (80106c0 <__sinit+0x28>)
 80106ae:	6223      	str	r3, [r4, #32]
 80106b0:	4b04      	ldr	r3, [pc, #16]	@ (80106c4 <__sinit+0x2c>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d1f5      	bne.n	80106a4 <__sinit+0xc>
 80106b8:	f7ff ffc4 	bl	8010644 <global_stdio_init.part.0>
 80106bc:	e7f2      	b.n	80106a4 <__sinit+0xc>
 80106be:	bf00      	nop
 80106c0:	08010605 	.word	0x08010605
 80106c4:	20005e2c 	.word	0x20005e2c

080106c8 <_fwalk_sglue>:
 80106c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106cc:	4607      	mov	r7, r0
 80106ce:	4688      	mov	r8, r1
 80106d0:	4614      	mov	r4, r2
 80106d2:	2600      	movs	r6, #0
 80106d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80106d8:	f1b9 0901 	subs.w	r9, r9, #1
 80106dc:	d505      	bpl.n	80106ea <_fwalk_sglue+0x22>
 80106de:	6824      	ldr	r4, [r4, #0]
 80106e0:	2c00      	cmp	r4, #0
 80106e2:	d1f7      	bne.n	80106d4 <_fwalk_sglue+0xc>
 80106e4:	4630      	mov	r0, r6
 80106e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106ea:	89ab      	ldrh	r3, [r5, #12]
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	d907      	bls.n	8010700 <_fwalk_sglue+0x38>
 80106f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80106f4:	3301      	adds	r3, #1
 80106f6:	d003      	beq.n	8010700 <_fwalk_sglue+0x38>
 80106f8:	4629      	mov	r1, r5
 80106fa:	4638      	mov	r0, r7
 80106fc:	47c0      	blx	r8
 80106fe:	4306      	orrs	r6, r0
 8010700:	3568      	adds	r5, #104	@ 0x68
 8010702:	e7e9      	b.n	80106d8 <_fwalk_sglue+0x10>

08010704 <iprintf>:
 8010704:	b40f      	push	{r0, r1, r2, r3}
 8010706:	b507      	push	{r0, r1, r2, lr}
 8010708:	4906      	ldr	r1, [pc, #24]	@ (8010724 <iprintf+0x20>)
 801070a:	ab04      	add	r3, sp, #16
 801070c:	6808      	ldr	r0, [r1, #0]
 801070e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010712:	6881      	ldr	r1, [r0, #8]
 8010714:	9301      	str	r3, [sp, #4]
 8010716:	f002 fcfd 	bl	8013114 <_vfiprintf_r>
 801071a:	b003      	add	sp, #12
 801071c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010720:	b004      	add	sp, #16
 8010722:	4770      	bx	lr
 8010724:	200001b4 	.word	0x200001b4

08010728 <_puts_r>:
 8010728:	6a03      	ldr	r3, [r0, #32]
 801072a:	b570      	push	{r4, r5, r6, lr}
 801072c:	6884      	ldr	r4, [r0, #8]
 801072e:	4605      	mov	r5, r0
 8010730:	460e      	mov	r6, r1
 8010732:	b90b      	cbnz	r3, 8010738 <_puts_r+0x10>
 8010734:	f7ff ffb0 	bl	8010698 <__sinit>
 8010738:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801073a:	07db      	lsls	r3, r3, #31
 801073c:	d405      	bmi.n	801074a <_puts_r+0x22>
 801073e:	89a3      	ldrh	r3, [r4, #12]
 8010740:	0598      	lsls	r0, r3, #22
 8010742:	d402      	bmi.n	801074a <_puts_r+0x22>
 8010744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010746:	f7f9 f8db 	bl	8009900 <__retarget_lock_acquire_recursive>
 801074a:	89a3      	ldrh	r3, [r4, #12]
 801074c:	0719      	lsls	r1, r3, #28
 801074e:	d502      	bpl.n	8010756 <_puts_r+0x2e>
 8010750:	6923      	ldr	r3, [r4, #16]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d135      	bne.n	80107c2 <_puts_r+0x9a>
 8010756:	4621      	mov	r1, r4
 8010758:	4628      	mov	r0, r5
 801075a:	f000 f945 	bl	80109e8 <__swsetup_r>
 801075e:	b380      	cbz	r0, 80107c2 <_puts_r+0x9a>
 8010760:	f04f 35ff 	mov.w	r5, #4294967295
 8010764:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010766:	07da      	lsls	r2, r3, #31
 8010768:	d405      	bmi.n	8010776 <_puts_r+0x4e>
 801076a:	89a3      	ldrh	r3, [r4, #12]
 801076c:	059b      	lsls	r3, r3, #22
 801076e:	d402      	bmi.n	8010776 <_puts_r+0x4e>
 8010770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010772:	f7f9 f8e1 	bl	8009938 <__retarget_lock_release_recursive>
 8010776:	4628      	mov	r0, r5
 8010778:	bd70      	pop	{r4, r5, r6, pc}
 801077a:	2b00      	cmp	r3, #0
 801077c:	da04      	bge.n	8010788 <_puts_r+0x60>
 801077e:	69a2      	ldr	r2, [r4, #24]
 8010780:	429a      	cmp	r2, r3
 8010782:	dc17      	bgt.n	80107b4 <_puts_r+0x8c>
 8010784:	290a      	cmp	r1, #10
 8010786:	d015      	beq.n	80107b4 <_puts_r+0x8c>
 8010788:	6823      	ldr	r3, [r4, #0]
 801078a:	1c5a      	adds	r2, r3, #1
 801078c:	6022      	str	r2, [r4, #0]
 801078e:	7019      	strb	r1, [r3, #0]
 8010790:	68a3      	ldr	r3, [r4, #8]
 8010792:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010796:	3b01      	subs	r3, #1
 8010798:	60a3      	str	r3, [r4, #8]
 801079a:	2900      	cmp	r1, #0
 801079c:	d1ed      	bne.n	801077a <_puts_r+0x52>
 801079e:	2b00      	cmp	r3, #0
 80107a0:	da11      	bge.n	80107c6 <_puts_r+0x9e>
 80107a2:	4622      	mov	r2, r4
 80107a4:	210a      	movs	r1, #10
 80107a6:	4628      	mov	r0, r5
 80107a8:	f000 f8df 	bl	801096a <__swbuf_r>
 80107ac:	3001      	adds	r0, #1
 80107ae:	d0d7      	beq.n	8010760 <_puts_r+0x38>
 80107b0:	250a      	movs	r5, #10
 80107b2:	e7d7      	b.n	8010764 <_puts_r+0x3c>
 80107b4:	4622      	mov	r2, r4
 80107b6:	4628      	mov	r0, r5
 80107b8:	f000 f8d7 	bl	801096a <__swbuf_r>
 80107bc:	3001      	adds	r0, #1
 80107be:	d1e7      	bne.n	8010790 <_puts_r+0x68>
 80107c0:	e7ce      	b.n	8010760 <_puts_r+0x38>
 80107c2:	3e01      	subs	r6, #1
 80107c4:	e7e4      	b.n	8010790 <_puts_r+0x68>
 80107c6:	6823      	ldr	r3, [r4, #0]
 80107c8:	1c5a      	adds	r2, r3, #1
 80107ca:	6022      	str	r2, [r4, #0]
 80107cc:	220a      	movs	r2, #10
 80107ce:	701a      	strb	r2, [r3, #0]
 80107d0:	e7ee      	b.n	80107b0 <_puts_r+0x88>
	...

080107d4 <puts>:
 80107d4:	4b02      	ldr	r3, [pc, #8]	@ (80107e0 <puts+0xc>)
 80107d6:	4601      	mov	r1, r0
 80107d8:	6818      	ldr	r0, [r3, #0]
 80107da:	f7ff bfa5 	b.w	8010728 <_puts_r>
 80107de:	bf00      	nop
 80107e0:	200001b4 	.word	0x200001b4

080107e4 <sniprintf>:
 80107e4:	b40c      	push	{r2, r3}
 80107e6:	b530      	push	{r4, r5, lr}
 80107e8:	4b17      	ldr	r3, [pc, #92]	@ (8010848 <sniprintf+0x64>)
 80107ea:	1e0c      	subs	r4, r1, #0
 80107ec:	681d      	ldr	r5, [r3, #0]
 80107ee:	b09d      	sub	sp, #116	@ 0x74
 80107f0:	da08      	bge.n	8010804 <sniprintf+0x20>
 80107f2:	238b      	movs	r3, #139	@ 0x8b
 80107f4:	602b      	str	r3, [r5, #0]
 80107f6:	f04f 30ff 	mov.w	r0, #4294967295
 80107fa:	b01d      	add	sp, #116	@ 0x74
 80107fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010800:	b002      	add	sp, #8
 8010802:	4770      	bx	lr
 8010804:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010808:	f8ad 3014 	strh.w	r3, [sp, #20]
 801080c:	bf14      	ite	ne
 801080e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010812:	4623      	moveq	r3, r4
 8010814:	9304      	str	r3, [sp, #16]
 8010816:	9307      	str	r3, [sp, #28]
 8010818:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801081c:	9002      	str	r0, [sp, #8]
 801081e:	9006      	str	r0, [sp, #24]
 8010820:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010824:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010826:	ab21      	add	r3, sp, #132	@ 0x84
 8010828:	a902      	add	r1, sp, #8
 801082a:	4628      	mov	r0, r5
 801082c:	9301      	str	r3, [sp, #4]
 801082e:	f002 f97f 	bl	8012b30 <_svfiprintf_r>
 8010832:	1c43      	adds	r3, r0, #1
 8010834:	bfbc      	itt	lt
 8010836:	238b      	movlt	r3, #139	@ 0x8b
 8010838:	602b      	strlt	r3, [r5, #0]
 801083a:	2c00      	cmp	r4, #0
 801083c:	d0dd      	beq.n	80107fa <sniprintf+0x16>
 801083e:	9b02      	ldr	r3, [sp, #8]
 8010840:	2200      	movs	r2, #0
 8010842:	701a      	strb	r2, [r3, #0]
 8010844:	e7d9      	b.n	80107fa <sniprintf+0x16>
 8010846:	bf00      	nop
 8010848:	200001b4 	.word	0x200001b4

0801084c <siprintf>:
 801084c:	b40e      	push	{r1, r2, r3}
 801084e:	b500      	push	{lr}
 8010850:	b09c      	sub	sp, #112	@ 0x70
 8010852:	ab1d      	add	r3, sp, #116	@ 0x74
 8010854:	9002      	str	r0, [sp, #8]
 8010856:	9006      	str	r0, [sp, #24]
 8010858:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801085c:	4809      	ldr	r0, [pc, #36]	@ (8010884 <siprintf+0x38>)
 801085e:	9107      	str	r1, [sp, #28]
 8010860:	9104      	str	r1, [sp, #16]
 8010862:	4909      	ldr	r1, [pc, #36]	@ (8010888 <siprintf+0x3c>)
 8010864:	f853 2b04 	ldr.w	r2, [r3], #4
 8010868:	9105      	str	r1, [sp, #20]
 801086a:	6800      	ldr	r0, [r0, #0]
 801086c:	9301      	str	r3, [sp, #4]
 801086e:	a902      	add	r1, sp, #8
 8010870:	f002 f95e 	bl	8012b30 <_svfiprintf_r>
 8010874:	9b02      	ldr	r3, [sp, #8]
 8010876:	2200      	movs	r2, #0
 8010878:	701a      	strb	r2, [r3, #0]
 801087a:	b01c      	add	sp, #112	@ 0x70
 801087c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010880:	b003      	add	sp, #12
 8010882:	4770      	bx	lr
 8010884:	200001b4 	.word	0x200001b4
 8010888:	ffff0208 	.word	0xffff0208

0801088c <siscanf>:
 801088c:	b40e      	push	{r1, r2, r3}
 801088e:	b530      	push	{r4, r5, lr}
 8010890:	b09c      	sub	sp, #112	@ 0x70
 8010892:	ac1f      	add	r4, sp, #124	@ 0x7c
 8010894:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8010898:	f854 5b04 	ldr.w	r5, [r4], #4
 801089c:	f8ad 2014 	strh.w	r2, [sp, #20]
 80108a0:	9002      	str	r0, [sp, #8]
 80108a2:	9006      	str	r0, [sp, #24]
 80108a4:	f7ef fd24 	bl	80002f0 <strlen>
 80108a8:	4b0b      	ldr	r3, [pc, #44]	@ (80108d8 <siscanf+0x4c>)
 80108aa:	9003      	str	r0, [sp, #12]
 80108ac:	9007      	str	r0, [sp, #28]
 80108ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80108b0:	480a      	ldr	r0, [pc, #40]	@ (80108dc <siscanf+0x50>)
 80108b2:	9401      	str	r4, [sp, #4]
 80108b4:	2300      	movs	r3, #0
 80108b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80108b8:	9314      	str	r3, [sp, #80]	@ 0x50
 80108ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80108be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80108c2:	462a      	mov	r2, r5
 80108c4:	4623      	mov	r3, r4
 80108c6:	a902      	add	r1, sp, #8
 80108c8:	6800      	ldr	r0, [r0, #0]
 80108ca:	f002 fa85 	bl	8012dd8 <__ssvfiscanf_r>
 80108ce:	b01c      	add	sp, #112	@ 0x70
 80108d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80108d4:	b003      	add	sp, #12
 80108d6:	4770      	bx	lr
 80108d8:	08010903 	.word	0x08010903
 80108dc:	200001b4 	.word	0x200001b4

080108e0 <__sread>:
 80108e0:	b510      	push	{r4, lr}
 80108e2:	460c      	mov	r4, r1
 80108e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108e8:	f000 f9a0 	bl	8010c2c <_read_r>
 80108ec:	2800      	cmp	r0, #0
 80108ee:	bfab      	itete	ge
 80108f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80108f2:	89a3      	ldrhlt	r3, [r4, #12]
 80108f4:	181b      	addge	r3, r3, r0
 80108f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80108fa:	bfac      	ite	ge
 80108fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80108fe:	81a3      	strhlt	r3, [r4, #12]
 8010900:	bd10      	pop	{r4, pc}

08010902 <__seofread>:
 8010902:	2000      	movs	r0, #0
 8010904:	4770      	bx	lr

08010906 <__swrite>:
 8010906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801090a:	461f      	mov	r7, r3
 801090c:	898b      	ldrh	r3, [r1, #12]
 801090e:	05db      	lsls	r3, r3, #23
 8010910:	4605      	mov	r5, r0
 8010912:	460c      	mov	r4, r1
 8010914:	4616      	mov	r6, r2
 8010916:	d505      	bpl.n	8010924 <__swrite+0x1e>
 8010918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801091c:	2302      	movs	r3, #2
 801091e:	2200      	movs	r2, #0
 8010920:	f000 f972 	bl	8010c08 <_lseek_r>
 8010924:	89a3      	ldrh	r3, [r4, #12]
 8010926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801092a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801092e:	81a3      	strh	r3, [r4, #12]
 8010930:	4632      	mov	r2, r6
 8010932:	463b      	mov	r3, r7
 8010934:	4628      	mov	r0, r5
 8010936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801093a:	f000 b999 	b.w	8010c70 <_write_r>

0801093e <__sseek>:
 801093e:	b510      	push	{r4, lr}
 8010940:	460c      	mov	r4, r1
 8010942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010946:	f000 f95f 	bl	8010c08 <_lseek_r>
 801094a:	1c43      	adds	r3, r0, #1
 801094c:	89a3      	ldrh	r3, [r4, #12]
 801094e:	bf15      	itete	ne
 8010950:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010952:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010956:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801095a:	81a3      	strheq	r3, [r4, #12]
 801095c:	bf18      	it	ne
 801095e:	81a3      	strhne	r3, [r4, #12]
 8010960:	bd10      	pop	{r4, pc}

08010962 <__sclose>:
 8010962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010966:	f000 b8e9 	b.w	8010b3c <_close_r>

0801096a <__swbuf_r>:
 801096a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801096c:	460e      	mov	r6, r1
 801096e:	4614      	mov	r4, r2
 8010970:	4605      	mov	r5, r0
 8010972:	b118      	cbz	r0, 801097c <__swbuf_r+0x12>
 8010974:	6a03      	ldr	r3, [r0, #32]
 8010976:	b90b      	cbnz	r3, 801097c <__swbuf_r+0x12>
 8010978:	f7ff fe8e 	bl	8010698 <__sinit>
 801097c:	69a3      	ldr	r3, [r4, #24]
 801097e:	60a3      	str	r3, [r4, #8]
 8010980:	89a3      	ldrh	r3, [r4, #12]
 8010982:	071a      	lsls	r2, r3, #28
 8010984:	d501      	bpl.n	801098a <__swbuf_r+0x20>
 8010986:	6923      	ldr	r3, [r4, #16]
 8010988:	b943      	cbnz	r3, 801099c <__swbuf_r+0x32>
 801098a:	4621      	mov	r1, r4
 801098c:	4628      	mov	r0, r5
 801098e:	f000 f82b 	bl	80109e8 <__swsetup_r>
 8010992:	b118      	cbz	r0, 801099c <__swbuf_r+0x32>
 8010994:	f04f 37ff 	mov.w	r7, #4294967295
 8010998:	4638      	mov	r0, r7
 801099a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801099c:	6823      	ldr	r3, [r4, #0]
 801099e:	6922      	ldr	r2, [r4, #16]
 80109a0:	1a98      	subs	r0, r3, r2
 80109a2:	6963      	ldr	r3, [r4, #20]
 80109a4:	b2f6      	uxtb	r6, r6
 80109a6:	4283      	cmp	r3, r0
 80109a8:	4637      	mov	r7, r6
 80109aa:	dc05      	bgt.n	80109b8 <__swbuf_r+0x4e>
 80109ac:	4621      	mov	r1, r4
 80109ae:	4628      	mov	r0, r5
 80109b0:	f002 fe9a 	bl	80136e8 <_fflush_r>
 80109b4:	2800      	cmp	r0, #0
 80109b6:	d1ed      	bne.n	8010994 <__swbuf_r+0x2a>
 80109b8:	68a3      	ldr	r3, [r4, #8]
 80109ba:	3b01      	subs	r3, #1
 80109bc:	60a3      	str	r3, [r4, #8]
 80109be:	6823      	ldr	r3, [r4, #0]
 80109c0:	1c5a      	adds	r2, r3, #1
 80109c2:	6022      	str	r2, [r4, #0]
 80109c4:	701e      	strb	r6, [r3, #0]
 80109c6:	6962      	ldr	r2, [r4, #20]
 80109c8:	1c43      	adds	r3, r0, #1
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d004      	beq.n	80109d8 <__swbuf_r+0x6e>
 80109ce:	89a3      	ldrh	r3, [r4, #12]
 80109d0:	07db      	lsls	r3, r3, #31
 80109d2:	d5e1      	bpl.n	8010998 <__swbuf_r+0x2e>
 80109d4:	2e0a      	cmp	r6, #10
 80109d6:	d1df      	bne.n	8010998 <__swbuf_r+0x2e>
 80109d8:	4621      	mov	r1, r4
 80109da:	4628      	mov	r0, r5
 80109dc:	f002 fe84 	bl	80136e8 <_fflush_r>
 80109e0:	2800      	cmp	r0, #0
 80109e2:	d0d9      	beq.n	8010998 <__swbuf_r+0x2e>
 80109e4:	e7d6      	b.n	8010994 <__swbuf_r+0x2a>
	...

080109e8 <__swsetup_r>:
 80109e8:	b538      	push	{r3, r4, r5, lr}
 80109ea:	4b29      	ldr	r3, [pc, #164]	@ (8010a90 <__swsetup_r+0xa8>)
 80109ec:	4605      	mov	r5, r0
 80109ee:	6818      	ldr	r0, [r3, #0]
 80109f0:	460c      	mov	r4, r1
 80109f2:	b118      	cbz	r0, 80109fc <__swsetup_r+0x14>
 80109f4:	6a03      	ldr	r3, [r0, #32]
 80109f6:	b90b      	cbnz	r3, 80109fc <__swsetup_r+0x14>
 80109f8:	f7ff fe4e 	bl	8010698 <__sinit>
 80109fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a00:	0719      	lsls	r1, r3, #28
 8010a02:	d422      	bmi.n	8010a4a <__swsetup_r+0x62>
 8010a04:	06da      	lsls	r2, r3, #27
 8010a06:	d407      	bmi.n	8010a18 <__swsetup_r+0x30>
 8010a08:	2209      	movs	r2, #9
 8010a0a:	602a      	str	r2, [r5, #0]
 8010a0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a10:	81a3      	strh	r3, [r4, #12]
 8010a12:	f04f 30ff 	mov.w	r0, #4294967295
 8010a16:	e033      	b.n	8010a80 <__swsetup_r+0x98>
 8010a18:	0758      	lsls	r0, r3, #29
 8010a1a:	d512      	bpl.n	8010a42 <__swsetup_r+0x5a>
 8010a1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a1e:	b141      	cbz	r1, 8010a32 <__swsetup_r+0x4a>
 8010a20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a24:	4299      	cmp	r1, r3
 8010a26:	d002      	beq.n	8010a2e <__swsetup_r+0x46>
 8010a28:	4628      	mov	r0, r5
 8010a2a:	f000 ffd1 	bl	80119d0 <_free_r>
 8010a2e:	2300      	movs	r3, #0
 8010a30:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a32:	89a3      	ldrh	r3, [r4, #12]
 8010a34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010a38:	81a3      	strh	r3, [r4, #12]
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	6063      	str	r3, [r4, #4]
 8010a3e:	6923      	ldr	r3, [r4, #16]
 8010a40:	6023      	str	r3, [r4, #0]
 8010a42:	89a3      	ldrh	r3, [r4, #12]
 8010a44:	f043 0308 	orr.w	r3, r3, #8
 8010a48:	81a3      	strh	r3, [r4, #12]
 8010a4a:	6923      	ldr	r3, [r4, #16]
 8010a4c:	b94b      	cbnz	r3, 8010a62 <__swsetup_r+0x7a>
 8010a4e:	89a3      	ldrh	r3, [r4, #12]
 8010a50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a58:	d003      	beq.n	8010a62 <__swsetup_r+0x7a>
 8010a5a:	4621      	mov	r1, r4
 8010a5c:	4628      	mov	r0, r5
 8010a5e:	f002 fe91 	bl	8013784 <__smakebuf_r>
 8010a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a66:	f013 0201 	ands.w	r2, r3, #1
 8010a6a:	d00a      	beq.n	8010a82 <__swsetup_r+0x9a>
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	60a2      	str	r2, [r4, #8]
 8010a70:	6962      	ldr	r2, [r4, #20]
 8010a72:	4252      	negs	r2, r2
 8010a74:	61a2      	str	r2, [r4, #24]
 8010a76:	6922      	ldr	r2, [r4, #16]
 8010a78:	b942      	cbnz	r2, 8010a8c <__swsetup_r+0xa4>
 8010a7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010a7e:	d1c5      	bne.n	8010a0c <__swsetup_r+0x24>
 8010a80:	bd38      	pop	{r3, r4, r5, pc}
 8010a82:	0799      	lsls	r1, r3, #30
 8010a84:	bf58      	it	pl
 8010a86:	6962      	ldrpl	r2, [r4, #20]
 8010a88:	60a2      	str	r2, [r4, #8]
 8010a8a:	e7f4      	b.n	8010a76 <__swsetup_r+0x8e>
 8010a8c:	2000      	movs	r0, #0
 8010a8e:	e7f7      	b.n	8010a80 <__swsetup_r+0x98>
 8010a90:	200001b4 	.word	0x200001b4

08010a94 <memset>:
 8010a94:	4402      	add	r2, r0
 8010a96:	4603      	mov	r3, r0
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	d100      	bne.n	8010a9e <memset+0xa>
 8010a9c:	4770      	bx	lr
 8010a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8010aa2:	e7f9      	b.n	8010a98 <memset+0x4>

08010aa4 <strchr>:
 8010aa4:	b2c9      	uxtb	r1, r1
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010aae:	b112      	cbz	r2, 8010ab6 <strchr+0x12>
 8010ab0:	428a      	cmp	r2, r1
 8010ab2:	d1f9      	bne.n	8010aa8 <strchr+0x4>
 8010ab4:	4770      	bx	lr
 8010ab6:	2900      	cmp	r1, #0
 8010ab8:	bf18      	it	ne
 8010aba:	2000      	movne	r0, #0
 8010abc:	4770      	bx	lr

08010abe <strncmp>:
 8010abe:	b510      	push	{r4, lr}
 8010ac0:	b16a      	cbz	r2, 8010ade <strncmp+0x20>
 8010ac2:	3901      	subs	r1, #1
 8010ac4:	1884      	adds	r4, r0, r2
 8010ac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010aca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d103      	bne.n	8010ada <strncmp+0x1c>
 8010ad2:	42a0      	cmp	r0, r4
 8010ad4:	d001      	beq.n	8010ada <strncmp+0x1c>
 8010ad6:	2a00      	cmp	r2, #0
 8010ad8:	d1f5      	bne.n	8010ac6 <strncmp+0x8>
 8010ada:	1ad0      	subs	r0, r2, r3
 8010adc:	bd10      	pop	{r4, pc}
 8010ade:	4610      	mov	r0, r2
 8010ae0:	e7fc      	b.n	8010adc <strncmp+0x1e>

08010ae2 <strncpy>:
 8010ae2:	b510      	push	{r4, lr}
 8010ae4:	3901      	subs	r1, #1
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	b132      	cbz	r2, 8010af8 <strncpy+0x16>
 8010aea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010aee:	f803 4b01 	strb.w	r4, [r3], #1
 8010af2:	3a01      	subs	r2, #1
 8010af4:	2c00      	cmp	r4, #0
 8010af6:	d1f7      	bne.n	8010ae8 <strncpy+0x6>
 8010af8:	441a      	add	r2, r3
 8010afa:	2100      	movs	r1, #0
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d100      	bne.n	8010b02 <strncpy+0x20>
 8010b00:	bd10      	pop	{r4, pc}
 8010b02:	f803 1b01 	strb.w	r1, [r3], #1
 8010b06:	e7f9      	b.n	8010afc <strncpy+0x1a>

08010b08 <strstr>:
 8010b08:	780a      	ldrb	r2, [r1, #0]
 8010b0a:	b570      	push	{r4, r5, r6, lr}
 8010b0c:	b96a      	cbnz	r2, 8010b2a <strstr+0x22>
 8010b0e:	bd70      	pop	{r4, r5, r6, pc}
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d109      	bne.n	8010b28 <strstr+0x20>
 8010b14:	460c      	mov	r4, r1
 8010b16:	4605      	mov	r5, r0
 8010b18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d0f6      	beq.n	8010b0e <strstr+0x6>
 8010b20:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010b24:	429e      	cmp	r6, r3
 8010b26:	d0f7      	beq.n	8010b18 <strstr+0x10>
 8010b28:	3001      	adds	r0, #1
 8010b2a:	7803      	ldrb	r3, [r0, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d1ef      	bne.n	8010b10 <strstr+0x8>
 8010b30:	4618      	mov	r0, r3
 8010b32:	e7ec      	b.n	8010b0e <strstr+0x6>

08010b34 <_localeconv_r>:
 8010b34:	4800      	ldr	r0, [pc, #0]	@ (8010b38 <_localeconv_r+0x4>)
 8010b36:	4770      	bx	lr
 8010b38:	20000138 	.word	0x20000138

08010b3c <_close_r>:
 8010b3c:	b538      	push	{r3, r4, r5, lr}
 8010b3e:	4d06      	ldr	r5, [pc, #24]	@ (8010b58 <_close_r+0x1c>)
 8010b40:	2300      	movs	r3, #0
 8010b42:	4604      	mov	r4, r0
 8010b44:	4608      	mov	r0, r1
 8010b46:	602b      	str	r3, [r5, #0]
 8010b48:	f7f6 fb18 	bl	800717c <_close>
 8010b4c:	1c43      	adds	r3, r0, #1
 8010b4e:	d102      	bne.n	8010b56 <_close_r+0x1a>
 8010b50:	682b      	ldr	r3, [r5, #0]
 8010b52:	b103      	cbz	r3, 8010b56 <_close_r+0x1a>
 8010b54:	6023      	str	r3, [r4, #0]
 8010b56:	bd38      	pop	{r3, r4, r5, pc}
 8010b58:	20005e30 	.word	0x20005e30

08010b5c <_reclaim_reent>:
 8010b5c:	4b29      	ldr	r3, [pc, #164]	@ (8010c04 <_reclaim_reent+0xa8>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4283      	cmp	r3, r0
 8010b62:	b570      	push	{r4, r5, r6, lr}
 8010b64:	4604      	mov	r4, r0
 8010b66:	d04b      	beq.n	8010c00 <_reclaim_reent+0xa4>
 8010b68:	69c3      	ldr	r3, [r0, #28]
 8010b6a:	b1ab      	cbz	r3, 8010b98 <_reclaim_reent+0x3c>
 8010b6c:	68db      	ldr	r3, [r3, #12]
 8010b6e:	b16b      	cbz	r3, 8010b8c <_reclaim_reent+0x30>
 8010b70:	2500      	movs	r5, #0
 8010b72:	69e3      	ldr	r3, [r4, #28]
 8010b74:	68db      	ldr	r3, [r3, #12]
 8010b76:	5959      	ldr	r1, [r3, r5]
 8010b78:	2900      	cmp	r1, #0
 8010b7a:	d13b      	bne.n	8010bf4 <_reclaim_reent+0x98>
 8010b7c:	3504      	adds	r5, #4
 8010b7e:	2d80      	cmp	r5, #128	@ 0x80
 8010b80:	d1f7      	bne.n	8010b72 <_reclaim_reent+0x16>
 8010b82:	69e3      	ldr	r3, [r4, #28]
 8010b84:	4620      	mov	r0, r4
 8010b86:	68d9      	ldr	r1, [r3, #12]
 8010b88:	f000 ff22 	bl	80119d0 <_free_r>
 8010b8c:	69e3      	ldr	r3, [r4, #28]
 8010b8e:	6819      	ldr	r1, [r3, #0]
 8010b90:	b111      	cbz	r1, 8010b98 <_reclaim_reent+0x3c>
 8010b92:	4620      	mov	r0, r4
 8010b94:	f000 ff1c 	bl	80119d0 <_free_r>
 8010b98:	6961      	ldr	r1, [r4, #20]
 8010b9a:	b111      	cbz	r1, 8010ba2 <_reclaim_reent+0x46>
 8010b9c:	4620      	mov	r0, r4
 8010b9e:	f000 ff17 	bl	80119d0 <_free_r>
 8010ba2:	69e1      	ldr	r1, [r4, #28]
 8010ba4:	b111      	cbz	r1, 8010bac <_reclaim_reent+0x50>
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	f000 ff12 	bl	80119d0 <_free_r>
 8010bac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010bae:	b111      	cbz	r1, 8010bb6 <_reclaim_reent+0x5a>
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	f000 ff0d 	bl	80119d0 <_free_r>
 8010bb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010bb8:	b111      	cbz	r1, 8010bc0 <_reclaim_reent+0x64>
 8010bba:	4620      	mov	r0, r4
 8010bbc:	f000 ff08 	bl	80119d0 <_free_r>
 8010bc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010bc2:	b111      	cbz	r1, 8010bca <_reclaim_reent+0x6e>
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	f000 ff03 	bl	80119d0 <_free_r>
 8010bca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010bcc:	b111      	cbz	r1, 8010bd4 <_reclaim_reent+0x78>
 8010bce:	4620      	mov	r0, r4
 8010bd0:	f000 fefe 	bl	80119d0 <_free_r>
 8010bd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010bd6:	b111      	cbz	r1, 8010bde <_reclaim_reent+0x82>
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f000 fef9 	bl	80119d0 <_free_r>
 8010bde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010be0:	b111      	cbz	r1, 8010be8 <_reclaim_reent+0x8c>
 8010be2:	4620      	mov	r0, r4
 8010be4:	f000 fef4 	bl	80119d0 <_free_r>
 8010be8:	6a23      	ldr	r3, [r4, #32]
 8010bea:	b14b      	cbz	r3, 8010c00 <_reclaim_reent+0xa4>
 8010bec:	4620      	mov	r0, r4
 8010bee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bf2:	4718      	bx	r3
 8010bf4:	680e      	ldr	r6, [r1, #0]
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f000 feea 	bl	80119d0 <_free_r>
 8010bfc:	4631      	mov	r1, r6
 8010bfe:	e7bb      	b.n	8010b78 <_reclaim_reent+0x1c>
 8010c00:	bd70      	pop	{r4, r5, r6, pc}
 8010c02:	bf00      	nop
 8010c04:	200001b4 	.word	0x200001b4

08010c08 <_lseek_r>:
 8010c08:	b538      	push	{r3, r4, r5, lr}
 8010c0a:	4d07      	ldr	r5, [pc, #28]	@ (8010c28 <_lseek_r+0x20>)
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	4608      	mov	r0, r1
 8010c10:	4611      	mov	r1, r2
 8010c12:	2200      	movs	r2, #0
 8010c14:	602a      	str	r2, [r5, #0]
 8010c16:	461a      	mov	r2, r3
 8010c18:	f7f6 fabc 	bl	8007194 <_lseek>
 8010c1c:	1c43      	adds	r3, r0, #1
 8010c1e:	d102      	bne.n	8010c26 <_lseek_r+0x1e>
 8010c20:	682b      	ldr	r3, [r5, #0]
 8010c22:	b103      	cbz	r3, 8010c26 <_lseek_r+0x1e>
 8010c24:	6023      	str	r3, [r4, #0]
 8010c26:	bd38      	pop	{r3, r4, r5, pc}
 8010c28:	20005e30 	.word	0x20005e30

08010c2c <_read_r>:
 8010c2c:	b538      	push	{r3, r4, r5, lr}
 8010c2e:	4d07      	ldr	r5, [pc, #28]	@ (8010c4c <_read_r+0x20>)
 8010c30:	4604      	mov	r4, r0
 8010c32:	4608      	mov	r0, r1
 8010c34:	4611      	mov	r1, r2
 8010c36:	2200      	movs	r2, #0
 8010c38:	602a      	str	r2, [r5, #0]
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	f7f6 fc5c 	bl	80074f8 <_read>
 8010c40:	1c43      	adds	r3, r0, #1
 8010c42:	d102      	bne.n	8010c4a <_read_r+0x1e>
 8010c44:	682b      	ldr	r3, [r5, #0]
 8010c46:	b103      	cbz	r3, 8010c4a <_read_r+0x1e>
 8010c48:	6023      	str	r3, [r4, #0]
 8010c4a:	bd38      	pop	{r3, r4, r5, pc}
 8010c4c:	20005e30 	.word	0x20005e30

08010c50 <_sbrk_r>:
 8010c50:	b538      	push	{r3, r4, r5, lr}
 8010c52:	4d06      	ldr	r5, [pc, #24]	@ (8010c6c <_sbrk_r+0x1c>)
 8010c54:	2300      	movs	r3, #0
 8010c56:	4604      	mov	r4, r0
 8010c58:	4608      	mov	r0, r1
 8010c5a:	602b      	str	r3, [r5, #0]
 8010c5c:	f7f6 fa9c 	bl	8007198 <_sbrk>
 8010c60:	1c43      	adds	r3, r0, #1
 8010c62:	d102      	bne.n	8010c6a <_sbrk_r+0x1a>
 8010c64:	682b      	ldr	r3, [r5, #0]
 8010c66:	b103      	cbz	r3, 8010c6a <_sbrk_r+0x1a>
 8010c68:	6023      	str	r3, [r4, #0]
 8010c6a:	bd38      	pop	{r3, r4, r5, pc}
 8010c6c:	20005e30 	.word	0x20005e30

08010c70 <_write_r>:
 8010c70:	b538      	push	{r3, r4, r5, lr}
 8010c72:	4d07      	ldr	r5, [pc, #28]	@ (8010c90 <_write_r+0x20>)
 8010c74:	4604      	mov	r4, r0
 8010c76:	4608      	mov	r0, r1
 8010c78:	4611      	mov	r1, r2
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	602a      	str	r2, [r5, #0]
 8010c7e:	461a      	mov	r2, r3
 8010c80:	f7f3 f904 	bl	8003e8c <_write>
 8010c84:	1c43      	adds	r3, r0, #1
 8010c86:	d102      	bne.n	8010c8e <_write_r+0x1e>
 8010c88:	682b      	ldr	r3, [r5, #0]
 8010c8a:	b103      	cbz	r3, 8010c8e <_write_r+0x1e>
 8010c8c:	6023      	str	r3, [r4, #0]
 8010c8e:	bd38      	pop	{r3, r4, r5, pc}
 8010c90:	20005e30 	.word	0x20005e30

08010c94 <__errno>:
 8010c94:	4b01      	ldr	r3, [pc, #4]	@ (8010c9c <__errno+0x8>)
 8010c96:	6818      	ldr	r0, [r3, #0]
 8010c98:	4770      	bx	lr
 8010c9a:	bf00      	nop
 8010c9c:	200001b4 	.word	0x200001b4

08010ca0 <__libc_init_array>:
 8010ca0:	b570      	push	{r4, r5, r6, lr}
 8010ca2:	4d0d      	ldr	r5, [pc, #52]	@ (8010cd8 <__libc_init_array+0x38>)
 8010ca4:	4c0d      	ldr	r4, [pc, #52]	@ (8010cdc <__libc_init_array+0x3c>)
 8010ca6:	1b64      	subs	r4, r4, r5
 8010ca8:	10a4      	asrs	r4, r4, #2
 8010caa:	2600      	movs	r6, #0
 8010cac:	42a6      	cmp	r6, r4
 8010cae:	d109      	bne.n	8010cc4 <__libc_init_array+0x24>
 8010cb0:	4d0b      	ldr	r5, [pc, #44]	@ (8010ce0 <__libc_init_array+0x40>)
 8010cb2:	4c0c      	ldr	r4, [pc, #48]	@ (8010ce4 <__libc_init_array+0x44>)
 8010cb4:	f002 ff88 	bl	8013bc8 <_init>
 8010cb8:	1b64      	subs	r4, r4, r5
 8010cba:	10a4      	asrs	r4, r4, #2
 8010cbc:	2600      	movs	r6, #0
 8010cbe:	42a6      	cmp	r6, r4
 8010cc0:	d105      	bne.n	8010cce <__libc_init_array+0x2e>
 8010cc2:	bd70      	pop	{r4, r5, r6, pc}
 8010cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cc8:	4798      	blx	r3
 8010cca:	3601      	adds	r6, #1
 8010ccc:	e7ee      	b.n	8010cac <__libc_init_array+0xc>
 8010cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cd2:	4798      	blx	r3
 8010cd4:	3601      	adds	r6, #1
 8010cd6:	e7f2      	b.n	8010cbe <__libc_init_array+0x1e>
 8010cd8:	08016c50 	.word	0x08016c50
 8010cdc:	08016c50 	.word	0x08016c50
 8010ce0:	08016c50 	.word	0x08016c50
 8010ce4:	08016c54 	.word	0x08016c54

08010ce8 <strcpy>:
 8010ce8:	4603      	mov	r3, r0
 8010cea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cee:	f803 2b01 	strb.w	r2, [r3], #1
 8010cf2:	2a00      	cmp	r2, #0
 8010cf4:	d1f9      	bne.n	8010cea <strcpy+0x2>
 8010cf6:	4770      	bx	lr

08010cf8 <memcpy>:
 8010cf8:	440a      	add	r2, r1
 8010cfa:	4291      	cmp	r1, r2
 8010cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d00:	d100      	bne.n	8010d04 <memcpy+0xc>
 8010d02:	4770      	bx	lr
 8010d04:	b510      	push	{r4, lr}
 8010d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d0e:	4291      	cmp	r1, r2
 8010d10:	d1f9      	bne.n	8010d06 <memcpy+0xe>
 8010d12:	bd10      	pop	{r4, pc}
 8010d14:	0000      	movs	r0, r0
	...

08010d18 <nan>:
 8010d18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010d20 <nan+0x8>
 8010d1c:	4770      	bx	lr
 8010d1e:	bf00      	nop
 8010d20:	00000000 	.word	0x00000000
 8010d24:	7ff80000 	.word	0x7ff80000

08010d28 <nanf>:
 8010d28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010d30 <nanf+0x8>
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop
 8010d30:	7fc00000 	.word	0x7fc00000

08010d34 <quorem>:
 8010d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d38:	6903      	ldr	r3, [r0, #16]
 8010d3a:	690c      	ldr	r4, [r1, #16]
 8010d3c:	42a3      	cmp	r3, r4
 8010d3e:	4607      	mov	r7, r0
 8010d40:	db7e      	blt.n	8010e40 <quorem+0x10c>
 8010d42:	3c01      	subs	r4, #1
 8010d44:	f101 0814 	add.w	r8, r1, #20
 8010d48:	00a3      	lsls	r3, r4, #2
 8010d4a:	f100 0514 	add.w	r5, r0, #20
 8010d4e:	9300      	str	r3, [sp, #0]
 8010d50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d54:	9301      	str	r3, [sp, #4]
 8010d56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010d5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d5e:	3301      	adds	r3, #1
 8010d60:	429a      	cmp	r2, r3
 8010d62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010d66:	fbb2 f6f3 	udiv	r6, r2, r3
 8010d6a:	d32e      	bcc.n	8010dca <quorem+0x96>
 8010d6c:	f04f 0a00 	mov.w	sl, #0
 8010d70:	46c4      	mov	ip, r8
 8010d72:	46ae      	mov	lr, r5
 8010d74:	46d3      	mov	fp, sl
 8010d76:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010d7a:	b298      	uxth	r0, r3
 8010d7c:	fb06 a000 	mla	r0, r6, r0, sl
 8010d80:	0c02      	lsrs	r2, r0, #16
 8010d82:	0c1b      	lsrs	r3, r3, #16
 8010d84:	fb06 2303 	mla	r3, r6, r3, r2
 8010d88:	f8de 2000 	ldr.w	r2, [lr]
 8010d8c:	b280      	uxth	r0, r0
 8010d8e:	b292      	uxth	r2, r2
 8010d90:	1a12      	subs	r2, r2, r0
 8010d92:	445a      	add	r2, fp
 8010d94:	f8de 0000 	ldr.w	r0, [lr]
 8010d98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010d9c:	b29b      	uxth	r3, r3
 8010d9e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010da2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010da6:	b292      	uxth	r2, r2
 8010da8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010dac:	45e1      	cmp	r9, ip
 8010dae:	f84e 2b04 	str.w	r2, [lr], #4
 8010db2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010db6:	d2de      	bcs.n	8010d76 <quorem+0x42>
 8010db8:	9b00      	ldr	r3, [sp, #0]
 8010dba:	58eb      	ldr	r3, [r5, r3]
 8010dbc:	b92b      	cbnz	r3, 8010dca <quorem+0x96>
 8010dbe:	9b01      	ldr	r3, [sp, #4]
 8010dc0:	3b04      	subs	r3, #4
 8010dc2:	429d      	cmp	r5, r3
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	d32f      	bcc.n	8010e28 <quorem+0xf4>
 8010dc8:	613c      	str	r4, [r7, #16]
 8010dca:	4638      	mov	r0, r7
 8010dcc:	f001 fc5a 	bl	8012684 <__mcmp>
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	db25      	blt.n	8010e20 <quorem+0xec>
 8010dd4:	4629      	mov	r1, r5
 8010dd6:	2000      	movs	r0, #0
 8010dd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8010ddc:	f8d1 c000 	ldr.w	ip, [r1]
 8010de0:	fa1f fe82 	uxth.w	lr, r2
 8010de4:	fa1f f38c 	uxth.w	r3, ip
 8010de8:	eba3 030e 	sub.w	r3, r3, lr
 8010dec:	4403      	add	r3, r0
 8010dee:	0c12      	lsrs	r2, r2, #16
 8010df0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010df4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010df8:	b29b      	uxth	r3, r3
 8010dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010dfe:	45c1      	cmp	r9, r8
 8010e00:	f841 3b04 	str.w	r3, [r1], #4
 8010e04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010e08:	d2e6      	bcs.n	8010dd8 <quorem+0xa4>
 8010e0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010e0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010e12:	b922      	cbnz	r2, 8010e1e <quorem+0xea>
 8010e14:	3b04      	subs	r3, #4
 8010e16:	429d      	cmp	r5, r3
 8010e18:	461a      	mov	r2, r3
 8010e1a:	d30b      	bcc.n	8010e34 <quorem+0x100>
 8010e1c:	613c      	str	r4, [r7, #16]
 8010e1e:	3601      	adds	r6, #1
 8010e20:	4630      	mov	r0, r6
 8010e22:	b003      	add	sp, #12
 8010e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e28:	6812      	ldr	r2, [r2, #0]
 8010e2a:	3b04      	subs	r3, #4
 8010e2c:	2a00      	cmp	r2, #0
 8010e2e:	d1cb      	bne.n	8010dc8 <quorem+0x94>
 8010e30:	3c01      	subs	r4, #1
 8010e32:	e7c6      	b.n	8010dc2 <quorem+0x8e>
 8010e34:	6812      	ldr	r2, [r2, #0]
 8010e36:	3b04      	subs	r3, #4
 8010e38:	2a00      	cmp	r2, #0
 8010e3a:	d1ef      	bne.n	8010e1c <quorem+0xe8>
 8010e3c:	3c01      	subs	r4, #1
 8010e3e:	e7ea      	b.n	8010e16 <quorem+0xe2>
 8010e40:	2000      	movs	r0, #0
 8010e42:	e7ee      	b.n	8010e22 <quorem+0xee>
 8010e44:	0000      	movs	r0, r0
	...

08010e48 <_dtoa_r>:
 8010e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e4c:	69c7      	ldr	r7, [r0, #28]
 8010e4e:	b099      	sub	sp, #100	@ 0x64
 8010e50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010e54:	ec55 4b10 	vmov	r4, r5, d0
 8010e58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010e5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8010e5c:	4683      	mov	fp, r0
 8010e5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010e60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010e62:	b97f      	cbnz	r7, 8010e84 <_dtoa_r+0x3c>
 8010e64:	2010      	movs	r0, #16
 8010e66:	f7fd fd63 	bl	800e930 <malloc>
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010e70:	b920      	cbnz	r0, 8010e7c <_dtoa_r+0x34>
 8010e72:	4ba7      	ldr	r3, [pc, #668]	@ (8011110 <_dtoa_r+0x2c8>)
 8010e74:	21ef      	movs	r1, #239	@ 0xef
 8010e76:	48a7      	ldr	r0, [pc, #668]	@ (8011114 <_dtoa_r+0x2cc>)
 8010e78:	f002 fd70 	bl	801395c <__assert_func>
 8010e7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010e80:	6007      	str	r7, [r0, #0]
 8010e82:	60c7      	str	r7, [r0, #12]
 8010e84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010e88:	6819      	ldr	r1, [r3, #0]
 8010e8a:	b159      	cbz	r1, 8010ea4 <_dtoa_r+0x5c>
 8010e8c:	685a      	ldr	r2, [r3, #4]
 8010e8e:	604a      	str	r2, [r1, #4]
 8010e90:	2301      	movs	r3, #1
 8010e92:	4093      	lsls	r3, r2
 8010e94:	608b      	str	r3, [r1, #8]
 8010e96:	4658      	mov	r0, fp
 8010e98:	f001 f970 	bl	801217c <_Bfree>
 8010e9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	601a      	str	r2, [r3, #0]
 8010ea4:	1e2b      	subs	r3, r5, #0
 8010ea6:	bfb9      	ittee	lt
 8010ea8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010eac:	9303      	strlt	r3, [sp, #12]
 8010eae:	2300      	movge	r3, #0
 8010eb0:	6033      	strge	r3, [r6, #0]
 8010eb2:	9f03      	ldr	r7, [sp, #12]
 8010eb4:	4b98      	ldr	r3, [pc, #608]	@ (8011118 <_dtoa_r+0x2d0>)
 8010eb6:	bfbc      	itt	lt
 8010eb8:	2201      	movlt	r2, #1
 8010eba:	6032      	strlt	r2, [r6, #0]
 8010ebc:	43bb      	bics	r3, r7
 8010ebe:	d112      	bne.n	8010ee6 <_dtoa_r+0x9e>
 8010ec0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010ec2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010ec6:	6013      	str	r3, [r2, #0]
 8010ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010ecc:	4323      	orrs	r3, r4
 8010ece:	f000 854d 	beq.w	801196c <_dtoa_r+0xb24>
 8010ed2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010ed4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801112c <_dtoa_r+0x2e4>
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	f000 854f 	beq.w	801197c <_dtoa_r+0xb34>
 8010ede:	f10a 0303 	add.w	r3, sl, #3
 8010ee2:	f000 bd49 	b.w	8011978 <_dtoa_r+0xb30>
 8010ee6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010eea:	2200      	movs	r2, #0
 8010eec:	ec51 0b17 	vmov	r0, r1, d7
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010ef6:	f7ef fe27 	bl	8000b48 <__aeabi_dcmpeq>
 8010efa:	4680      	mov	r8, r0
 8010efc:	b158      	cbz	r0, 8010f16 <_dtoa_r+0xce>
 8010efe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010f00:	2301      	movs	r3, #1
 8010f02:	6013      	str	r3, [r2, #0]
 8010f04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010f06:	b113      	cbz	r3, 8010f0e <_dtoa_r+0xc6>
 8010f08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010f0a:	4b84      	ldr	r3, [pc, #528]	@ (801111c <_dtoa_r+0x2d4>)
 8010f0c:	6013      	str	r3, [r2, #0]
 8010f0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011130 <_dtoa_r+0x2e8>
 8010f12:	f000 bd33 	b.w	801197c <_dtoa_r+0xb34>
 8010f16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010f1a:	aa16      	add	r2, sp, #88	@ 0x58
 8010f1c:	a917      	add	r1, sp, #92	@ 0x5c
 8010f1e:	4658      	mov	r0, fp
 8010f20:	f001 fcd0 	bl	80128c4 <__d2b>
 8010f24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010f28:	4681      	mov	r9, r0
 8010f2a:	2e00      	cmp	r6, #0
 8010f2c:	d077      	beq.n	801101e <_dtoa_r+0x1d6>
 8010f2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010f40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010f44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010f48:	4619      	mov	r1, r3
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	4b74      	ldr	r3, [pc, #464]	@ (8011120 <_dtoa_r+0x2d8>)
 8010f4e:	f7ef f9db 	bl	8000308 <__aeabi_dsub>
 8010f52:	a369      	add	r3, pc, #420	@ (adr r3, 80110f8 <_dtoa_r+0x2b0>)
 8010f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f58:	f7ef fb8e 	bl	8000678 <__aeabi_dmul>
 8010f5c:	a368      	add	r3, pc, #416	@ (adr r3, 8011100 <_dtoa_r+0x2b8>)
 8010f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f62:	f7ef f9d3 	bl	800030c <__adddf3>
 8010f66:	4604      	mov	r4, r0
 8010f68:	4630      	mov	r0, r6
 8010f6a:	460d      	mov	r5, r1
 8010f6c:	f7ef fb1a 	bl	80005a4 <__aeabi_i2d>
 8010f70:	a365      	add	r3, pc, #404	@ (adr r3, 8011108 <_dtoa_r+0x2c0>)
 8010f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f76:	f7ef fb7f 	bl	8000678 <__aeabi_dmul>
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	460b      	mov	r3, r1
 8010f7e:	4620      	mov	r0, r4
 8010f80:	4629      	mov	r1, r5
 8010f82:	f7ef f9c3 	bl	800030c <__adddf3>
 8010f86:	4604      	mov	r4, r0
 8010f88:	460d      	mov	r5, r1
 8010f8a:	f7ef fe25 	bl	8000bd8 <__aeabi_d2iz>
 8010f8e:	2200      	movs	r2, #0
 8010f90:	4607      	mov	r7, r0
 8010f92:	2300      	movs	r3, #0
 8010f94:	4620      	mov	r0, r4
 8010f96:	4629      	mov	r1, r5
 8010f98:	f7ef fde0 	bl	8000b5c <__aeabi_dcmplt>
 8010f9c:	b140      	cbz	r0, 8010fb0 <_dtoa_r+0x168>
 8010f9e:	4638      	mov	r0, r7
 8010fa0:	f7ef fb00 	bl	80005a4 <__aeabi_i2d>
 8010fa4:	4622      	mov	r2, r4
 8010fa6:	462b      	mov	r3, r5
 8010fa8:	f7ef fdce 	bl	8000b48 <__aeabi_dcmpeq>
 8010fac:	b900      	cbnz	r0, 8010fb0 <_dtoa_r+0x168>
 8010fae:	3f01      	subs	r7, #1
 8010fb0:	2f16      	cmp	r7, #22
 8010fb2:	d851      	bhi.n	8011058 <_dtoa_r+0x210>
 8010fb4:	4b5b      	ldr	r3, [pc, #364]	@ (8011124 <_dtoa_r+0x2dc>)
 8010fb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010fc2:	f7ef fdcb 	bl	8000b5c <__aeabi_dcmplt>
 8010fc6:	2800      	cmp	r0, #0
 8010fc8:	d048      	beq.n	801105c <_dtoa_r+0x214>
 8010fca:	3f01      	subs	r7, #1
 8010fcc:	2300      	movs	r3, #0
 8010fce:	9312      	str	r3, [sp, #72]	@ 0x48
 8010fd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010fd2:	1b9b      	subs	r3, r3, r6
 8010fd4:	1e5a      	subs	r2, r3, #1
 8010fd6:	bf44      	itt	mi
 8010fd8:	f1c3 0801 	rsbmi	r8, r3, #1
 8010fdc:	2300      	movmi	r3, #0
 8010fde:	9208      	str	r2, [sp, #32]
 8010fe0:	bf54      	ite	pl
 8010fe2:	f04f 0800 	movpl.w	r8, #0
 8010fe6:	9308      	strmi	r3, [sp, #32]
 8010fe8:	2f00      	cmp	r7, #0
 8010fea:	db39      	blt.n	8011060 <_dtoa_r+0x218>
 8010fec:	9b08      	ldr	r3, [sp, #32]
 8010fee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010ff0:	443b      	add	r3, r7
 8010ff2:	9308      	str	r3, [sp, #32]
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ffa:	2b09      	cmp	r3, #9
 8010ffc:	d864      	bhi.n	80110c8 <_dtoa_r+0x280>
 8010ffe:	2b05      	cmp	r3, #5
 8011000:	bfc4      	itt	gt
 8011002:	3b04      	subgt	r3, #4
 8011004:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011008:	f1a3 0302 	sub.w	r3, r3, #2
 801100c:	bfcc      	ite	gt
 801100e:	2400      	movgt	r4, #0
 8011010:	2401      	movle	r4, #1
 8011012:	2b03      	cmp	r3, #3
 8011014:	d863      	bhi.n	80110de <_dtoa_r+0x296>
 8011016:	e8df f003 	tbb	[pc, r3]
 801101a:	372a      	.short	0x372a
 801101c:	5535      	.short	0x5535
 801101e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011022:	441e      	add	r6, r3
 8011024:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011028:	2b20      	cmp	r3, #32
 801102a:	bfc1      	itttt	gt
 801102c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011030:	409f      	lslgt	r7, r3
 8011032:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011036:	fa24 f303 	lsrgt.w	r3, r4, r3
 801103a:	bfd6      	itet	le
 801103c:	f1c3 0320 	rsble	r3, r3, #32
 8011040:	ea47 0003 	orrgt.w	r0, r7, r3
 8011044:	fa04 f003 	lslle.w	r0, r4, r3
 8011048:	f7ef fa9c 	bl	8000584 <__aeabi_ui2d>
 801104c:	2201      	movs	r2, #1
 801104e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011052:	3e01      	subs	r6, #1
 8011054:	9214      	str	r2, [sp, #80]	@ 0x50
 8011056:	e777      	b.n	8010f48 <_dtoa_r+0x100>
 8011058:	2301      	movs	r3, #1
 801105a:	e7b8      	b.n	8010fce <_dtoa_r+0x186>
 801105c:	9012      	str	r0, [sp, #72]	@ 0x48
 801105e:	e7b7      	b.n	8010fd0 <_dtoa_r+0x188>
 8011060:	427b      	negs	r3, r7
 8011062:	930a      	str	r3, [sp, #40]	@ 0x28
 8011064:	2300      	movs	r3, #0
 8011066:	eba8 0807 	sub.w	r8, r8, r7
 801106a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801106c:	e7c4      	b.n	8010ff8 <_dtoa_r+0x1b0>
 801106e:	2300      	movs	r3, #0
 8011070:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011074:	2b00      	cmp	r3, #0
 8011076:	dc35      	bgt.n	80110e4 <_dtoa_r+0x29c>
 8011078:	2301      	movs	r3, #1
 801107a:	9300      	str	r3, [sp, #0]
 801107c:	9307      	str	r3, [sp, #28]
 801107e:	461a      	mov	r2, r3
 8011080:	920e      	str	r2, [sp, #56]	@ 0x38
 8011082:	e00b      	b.n	801109c <_dtoa_r+0x254>
 8011084:	2301      	movs	r3, #1
 8011086:	e7f3      	b.n	8011070 <_dtoa_r+0x228>
 8011088:	2300      	movs	r3, #0
 801108a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801108c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801108e:	18fb      	adds	r3, r7, r3
 8011090:	9300      	str	r3, [sp, #0]
 8011092:	3301      	adds	r3, #1
 8011094:	2b01      	cmp	r3, #1
 8011096:	9307      	str	r3, [sp, #28]
 8011098:	bfb8      	it	lt
 801109a:	2301      	movlt	r3, #1
 801109c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80110a0:	2100      	movs	r1, #0
 80110a2:	2204      	movs	r2, #4
 80110a4:	f102 0514 	add.w	r5, r2, #20
 80110a8:	429d      	cmp	r5, r3
 80110aa:	d91f      	bls.n	80110ec <_dtoa_r+0x2a4>
 80110ac:	6041      	str	r1, [r0, #4]
 80110ae:	4658      	mov	r0, fp
 80110b0:	f001 f824 	bl	80120fc <_Balloc>
 80110b4:	4682      	mov	sl, r0
 80110b6:	2800      	cmp	r0, #0
 80110b8:	d13c      	bne.n	8011134 <_dtoa_r+0x2ec>
 80110ba:	4b1b      	ldr	r3, [pc, #108]	@ (8011128 <_dtoa_r+0x2e0>)
 80110bc:	4602      	mov	r2, r0
 80110be:	f240 11af 	movw	r1, #431	@ 0x1af
 80110c2:	e6d8      	b.n	8010e76 <_dtoa_r+0x2e>
 80110c4:	2301      	movs	r3, #1
 80110c6:	e7e0      	b.n	801108a <_dtoa_r+0x242>
 80110c8:	2401      	movs	r4, #1
 80110ca:	2300      	movs	r3, #0
 80110cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80110ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80110d0:	f04f 33ff 	mov.w	r3, #4294967295
 80110d4:	9300      	str	r3, [sp, #0]
 80110d6:	9307      	str	r3, [sp, #28]
 80110d8:	2200      	movs	r2, #0
 80110da:	2312      	movs	r3, #18
 80110dc:	e7d0      	b.n	8011080 <_dtoa_r+0x238>
 80110de:	2301      	movs	r3, #1
 80110e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110e2:	e7f5      	b.n	80110d0 <_dtoa_r+0x288>
 80110e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110e6:	9300      	str	r3, [sp, #0]
 80110e8:	9307      	str	r3, [sp, #28]
 80110ea:	e7d7      	b.n	801109c <_dtoa_r+0x254>
 80110ec:	3101      	adds	r1, #1
 80110ee:	0052      	lsls	r2, r2, #1
 80110f0:	e7d8      	b.n	80110a4 <_dtoa_r+0x25c>
 80110f2:	bf00      	nop
 80110f4:	f3af 8000 	nop.w
 80110f8:	636f4361 	.word	0x636f4361
 80110fc:	3fd287a7 	.word	0x3fd287a7
 8011100:	8b60c8b3 	.word	0x8b60c8b3
 8011104:	3fc68a28 	.word	0x3fc68a28
 8011108:	509f79fb 	.word	0x509f79fb
 801110c:	3fd34413 	.word	0x3fd34413
 8011110:	080169a5 	.word	0x080169a5
 8011114:	080169bc 	.word	0x080169bc
 8011118:	7ff00000 	.word	0x7ff00000
 801111c:	08016c08 	.word	0x08016c08
 8011120:	3ff80000 	.word	0x3ff80000
 8011124:	08016b18 	.word	0x08016b18
 8011128:	08016a14 	.word	0x08016a14
 801112c:	080169a1 	.word	0x080169a1
 8011130:	08016c07 	.word	0x08016c07
 8011134:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011138:	6018      	str	r0, [r3, #0]
 801113a:	9b07      	ldr	r3, [sp, #28]
 801113c:	2b0e      	cmp	r3, #14
 801113e:	f200 80a4 	bhi.w	801128a <_dtoa_r+0x442>
 8011142:	2c00      	cmp	r4, #0
 8011144:	f000 80a1 	beq.w	801128a <_dtoa_r+0x442>
 8011148:	2f00      	cmp	r7, #0
 801114a:	dd33      	ble.n	80111b4 <_dtoa_r+0x36c>
 801114c:	4bad      	ldr	r3, [pc, #692]	@ (8011404 <_dtoa_r+0x5bc>)
 801114e:	f007 020f 	and.w	r2, r7, #15
 8011152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011156:	ed93 7b00 	vldr	d7, [r3]
 801115a:	05f8      	lsls	r0, r7, #23
 801115c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011160:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011164:	d516      	bpl.n	8011194 <_dtoa_r+0x34c>
 8011166:	4ba8      	ldr	r3, [pc, #672]	@ (8011408 <_dtoa_r+0x5c0>)
 8011168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801116c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011170:	f7ef fbac 	bl	80008cc <__aeabi_ddiv>
 8011174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011178:	f004 040f 	and.w	r4, r4, #15
 801117c:	2603      	movs	r6, #3
 801117e:	4da2      	ldr	r5, [pc, #648]	@ (8011408 <_dtoa_r+0x5c0>)
 8011180:	b954      	cbnz	r4, 8011198 <_dtoa_r+0x350>
 8011182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801118a:	f7ef fb9f 	bl	80008cc <__aeabi_ddiv>
 801118e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011192:	e028      	b.n	80111e6 <_dtoa_r+0x39e>
 8011194:	2602      	movs	r6, #2
 8011196:	e7f2      	b.n	801117e <_dtoa_r+0x336>
 8011198:	07e1      	lsls	r1, r4, #31
 801119a:	d508      	bpl.n	80111ae <_dtoa_r+0x366>
 801119c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80111a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80111a4:	f7ef fa68 	bl	8000678 <__aeabi_dmul>
 80111a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80111ac:	3601      	adds	r6, #1
 80111ae:	1064      	asrs	r4, r4, #1
 80111b0:	3508      	adds	r5, #8
 80111b2:	e7e5      	b.n	8011180 <_dtoa_r+0x338>
 80111b4:	f000 80d2 	beq.w	801135c <_dtoa_r+0x514>
 80111b8:	427c      	negs	r4, r7
 80111ba:	4b92      	ldr	r3, [pc, #584]	@ (8011404 <_dtoa_r+0x5bc>)
 80111bc:	4d92      	ldr	r5, [pc, #584]	@ (8011408 <_dtoa_r+0x5c0>)
 80111be:	f004 020f 	and.w	r2, r4, #15
 80111c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80111c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80111ce:	f7ef fa53 	bl	8000678 <__aeabi_dmul>
 80111d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111d6:	1124      	asrs	r4, r4, #4
 80111d8:	2300      	movs	r3, #0
 80111da:	2602      	movs	r6, #2
 80111dc:	2c00      	cmp	r4, #0
 80111de:	f040 80b2 	bne.w	8011346 <_dtoa_r+0x4fe>
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d1d3      	bne.n	801118e <_dtoa_r+0x346>
 80111e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80111e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f000 80b7 	beq.w	8011360 <_dtoa_r+0x518>
 80111f2:	4b86      	ldr	r3, [pc, #536]	@ (801140c <_dtoa_r+0x5c4>)
 80111f4:	2200      	movs	r2, #0
 80111f6:	4620      	mov	r0, r4
 80111f8:	4629      	mov	r1, r5
 80111fa:	f7ef fcaf 	bl	8000b5c <__aeabi_dcmplt>
 80111fe:	2800      	cmp	r0, #0
 8011200:	f000 80ae 	beq.w	8011360 <_dtoa_r+0x518>
 8011204:	9b07      	ldr	r3, [sp, #28]
 8011206:	2b00      	cmp	r3, #0
 8011208:	f000 80aa 	beq.w	8011360 <_dtoa_r+0x518>
 801120c:	9b00      	ldr	r3, [sp, #0]
 801120e:	2b00      	cmp	r3, #0
 8011210:	dd37      	ble.n	8011282 <_dtoa_r+0x43a>
 8011212:	1e7b      	subs	r3, r7, #1
 8011214:	9304      	str	r3, [sp, #16]
 8011216:	4620      	mov	r0, r4
 8011218:	4b7d      	ldr	r3, [pc, #500]	@ (8011410 <_dtoa_r+0x5c8>)
 801121a:	2200      	movs	r2, #0
 801121c:	4629      	mov	r1, r5
 801121e:	f7ef fa2b 	bl	8000678 <__aeabi_dmul>
 8011222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011226:	9c00      	ldr	r4, [sp, #0]
 8011228:	3601      	adds	r6, #1
 801122a:	4630      	mov	r0, r6
 801122c:	f7ef f9ba 	bl	80005a4 <__aeabi_i2d>
 8011230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011234:	f7ef fa20 	bl	8000678 <__aeabi_dmul>
 8011238:	4b76      	ldr	r3, [pc, #472]	@ (8011414 <_dtoa_r+0x5cc>)
 801123a:	2200      	movs	r2, #0
 801123c:	f7ef f866 	bl	800030c <__adddf3>
 8011240:	4605      	mov	r5, r0
 8011242:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011246:	2c00      	cmp	r4, #0
 8011248:	f040 808d 	bne.w	8011366 <_dtoa_r+0x51e>
 801124c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011250:	4b71      	ldr	r3, [pc, #452]	@ (8011418 <_dtoa_r+0x5d0>)
 8011252:	2200      	movs	r2, #0
 8011254:	f7ef f858 	bl	8000308 <__aeabi_dsub>
 8011258:	4602      	mov	r2, r0
 801125a:	460b      	mov	r3, r1
 801125c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011260:	462a      	mov	r2, r5
 8011262:	4633      	mov	r3, r6
 8011264:	f7ef fc98 	bl	8000b98 <__aeabi_dcmpgt>
 8011268:	2800      	cmp	r0, #0
 801126a:	f040 828b 	bne.w	8011784 <_dtoa_r+0x93c>
 801126e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011272:	462a      	mov	r2, r5
 8011274:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011278:	f7ef fc70 	bl	8000b5c <__aeabi_dcmplt>
 801127c:	2800      	cmp	r0, #0
 801127e:	f040 8128 	bne.w	80114d2 <_dtoa_r+0x68a>
 8011282:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011286:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801128a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801128c:	2b00      	cmp	r3, #0
 801128e:	f2c0 815a 	blt.w	8011546 <_dtoa_r+0x6fe>
 8011292:	2f0e      	cmp	r7, #14
 8011294:	f300 8157 	bgt.w	8011546 <_dtoa_r+0x6fe>
 8011298:	4b5a      	ldr	r3, [pc, #360]	@ (8011404 <_dtoa_r+0x5bc>)
 801129a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801129e:	ed93 7b00 	vldr	d7, [r3]
 80112a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	ed8d 7b00 	vstr	d7, [sp]
 80112aa:	da03      	bge.n	80112b4 <_dtoa_r+0x46c>
 80112ac:	9b07      	ldr	r3, [sp, #28]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	f340 8101 	ble.w	80114b6 <_dtoa_r+0x66e>
 80112b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80112b8:	4656      	mov	r6, sl
 80112ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112be:	4620      	mov	r0, r4
 80112c0:	4629      	mov	r1, r5
 80112c2:	f7ef fb03 	bl	80008cc <__aeabi_ddiv>
 80112c6:	f7ef fc87 	bl	8000bd8 <__aeabi_d2iz>
 80112ca:	4680      	mov	r8, r0
 80112cc:	f7ef f96a 	bl	80005a4 <__aeabi_i2d>
 80112d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112d4:	f7ef f9d0 	bl	8000678 <__aeabi_dmul>
 80112d8:	4602      	mov	r2, r0
 80112da:	460b      	mov	r3, r1
 80112dc:	4620      	mov	r0, r4
 80112de:	4629      	mov	r1, r5
 80112e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80112e4:	f7ef f810 	bl	8000308 <__aeabi_dsub>
 80112e8:	f806 4b01 	strb.w	r4, [r6], #1
 80112ec:	9d07      	ldr	r5, [sp, #28]
 80112ee:	eba6 040a 	sub.w	r4, r6, sl
 80112f2:	42a5      	cmp	r5, r4
 80112f4:	4602      	mov	r2, r0
 80112f6:	460b      	mov	r3, r1
 80112f8:	f040 8117 	bne.w	801152a <_dtoa_r+0x6e2>
 80112fc:	f7ef f806 	bl	800030c <__adddf3>
 8011300:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011304:	4604      	mov	r4, r0
 8011306:	460d      	mov	r5, r1
 8011308:	f7ef fc46 	bl	8000b98 <__aeabi_dcmpgt>
 801130c:	2800      	cmp	r0, #0
 801130e:	f040 80f9 	bne.w	8011504 <_dtoa_r+0x6bc>
 8011312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011316:	4620      	mov	r0, r4
 8011318:	4629      	mov	r1, r5
 801131a:	f7ef fc15 	bl	8000b48 <__aeabi_dcmpeq>
 801131e:	b118      	cbz	r0, 8011328 <_dtoa_r+0x4e0>
 8011320:	f018 0f01 	tst.w	r8, #1
 8011324:	f040 80ee 	bne.w	8011504 <_dtoa_r+0x6bc>
 8011328:	4649      	mov	r1, r9
 801132a:	4658      	mov	r0, fp
 801132c:	f000 ff26 	bl	801217c <_Bfree>
 8011330:	2300      	movs	r3, #0
 8011332:	7033      	strb	r3, [r6, #0]
 8011334:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011336:	3701      	adds	r7, #1
 8011338:	601f      	str	r7, [r3, #0]
 801133a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801133c:	2b00      	cmp	r3, #0
 801133e:	f000 831d 	beq.w	801197c <_dtoa_r+0xb34>
 8011342:	601e      	str	r6, [r3, #0]
 8011344:	e31a      	b.n	801197c <_dtoa_r+0xb34>
 8011346:	07e2      	lsls	r2, r4, #31
 8011348:	d505      	bpl.n	8011356 <_dtoa_r+0x50e>
 801134a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801134e:	f7ef f993 	bl	8000678 <__aeabi_dmul>
 8011352:	3601      	adds	r6, #1
 8011354:	2301      	movs	r3, #1
 8011356:	1064      	asrs	r4, r4, #1
 8011358:	3508      	adds	r5, #8
 801135a:	e73f      	b.n	80111dc <_dtoa_r+0x394>
 801135c:	2602      	movs	r6, #2
 801135e:	e742      	b.n	80111e6 <_dtoa_r+0x39e>
 8011360:	9c07      	ldr	r4, [sp, #28]
 8011362:	9704      	str	r7, [sp, #16]
 8011364:	e761      	b.n	801122a <_dtoa_r+0x3e2>
 8011366:	4b27      	ldr	r3, [pc, #156]	@ (8011404 <_dtoa_r+0x5bc>)
 8011368:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801136a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801136e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011372:	4454      	add	r4, sl
 8011374:	2900      	cmp	r1, #0
 8011376:	d053      	beq.n	8011420 <_dtoa_r+0x5d8>
 8011378:	4928      	ldr	r1, [pc, #160]	@ (801141c <_dtoa_r+0x5d4>)
 801137a:	2000      	movs	r0, #0
 801137c:	f7ef faa6 	bl	80008cc <__aeabi_ddiv>
 8011380:	4633      	mov	r3, r6
 8011382:	462a      	mov	r2, r5
 8011384:	f7ee ffc0 	bl	8000308 <__aeabi_dsub>
 8011388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801138c:	4656      	mov	r6, sl
 801138e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011392:	f7ef fc21 	bl	8000bd8 <__aeabi_d2iz>
 8011396:	4605      	mov	r5, r0
 8011398:	f7ef f904 	bl	80005a4 <__aeabi_i2d>
 801139c:	4602      	mov	r2, r0
 801139e:	460b      	mov	r3, r1
 80113a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113a4:	f7ee ffb0 	bl	8000308 <__aeabi_dsub>
 80113a8:	3530      	adds	r5, #48	@ 0x30
 80113aa:	4602      	mov	r2, r0
 80113ac:	460b      	mov	r3, r1
 80113ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80113b2:	f806 5b01 	strb.w	r5, [r6], #1
 80113b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80113ba:	f7ef fbcf 	bl	8000b5c <__aeabi_dcmplt>
 80113be:	2800      	cmp	r0, #0
 80113c0:	d171      	bne.n	80114a6 <_dtoa_r+0x65e>
 80113c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80113c6:	4911      	ldr	r1, [pc, #68]	@ (801140c <_dtoa_r+0x5c4>)
 80113c8:	2000      	movs	r0, #0
 80113ca:	f7ee ff9d 	bl	8000308 <__aeabi_dsub>
 80113ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80113d2:	f7ef fbc3 	bl	8000b5c <__aeabi_dcmplt>
 80113d6:	2800      	cmp	r0, #0
 80113d8:	f040 8095 	bne.w	8011506 <_dtoa_r+0x6be>
 80113dc:	42a6      	cmp	r6, r4
 80113de:	f43f af50 	beq.w	8011282 <_dtoa_r+0x43a>
 80113e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80113e6:	4b0a      	ldr	r3, [pc, #40]	@ (8011410 <_dtoa_r+0x5c8>)
 80113e8:	2200      	movs	r2, #0
 80113ea:	f7ef f945 	bl	8000678 <__aeabi_dmul>
 80113ee:	4b08      	ldr	r3, [pc, #32]	@ (8011410 <_dtoa_r+0x5c8>)
 80113f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80113f4:	2200      	movs	r2, #0
 80113f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113fa:	f7ef f93d 	bl	8000678 <__aeabi_dmul>
 80113fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011402:	e7c4      	b.n	801138e <_dtoa_r+0x546>
 8011404:	08016b18 	.word	0x08016b18
 8011408:	08016af0 	.word	0x08016af0
 801140c:	3ff00000 	.word	0x3ff00000
 8011410:	40240000 	.word	0x40240000
 8011414:	401c0000 	.word	0x401c0000
 8011418:	40140000 	.word	0x40140000
 801141c:	3fe00000 	.word	0x3fe00000
 8011420:	4631      	mov	r1, r6
 8011422:	4628      	mov	r0, r5
 8011424:	f7ef f928 	bl	8000678 <__aeabi_dmul>
 8011428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801142c:	9415      	str	r4, [sp, #84]	@ 0x54
 801142e:	4656      	mov	r6, sl
 8011430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011434:	f7ef fbd0 	bl	8000bd8 <__aeabi_d2iz>
 8011438:	4605      	mov	r5, r0
 801143a:	f7ef f8b3 	bl	80005a4 <__aeabi_i2d>
 801143e:	4602      	mov	r2, r0
 8011440:	460b      	mov	r3, r1
 8011442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011446:	f7ee ff5f 	bl	8000308 <__aeabi_dsub>
 801144a:	3530      	adds	r5, #48	@ 0x30
 801144c:	f806 5b01 	strb.w	r5, [r6], #1
 8011450:	4602      	mov	r2, r0
 8011452:	460b      	mov	r3, r1
 8011454:	42a6      	cmp	r6, r4
 8011456:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801145a:	f04f 0200 	mov.w	r2, #0
 801145e:	d124      	bne.n	80114aa <_dtoa_r+0x662>
 8011460:	4bac      	ldr	r3, [pc, #688]	@ (8011714 <_dtoa_r+0x8cc>)
 8011462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011466:	f7ee ff51 	bl	800030c <__adddf3>
 801146a:	4602      	mov	r2, r0
 801146c:	460b      	mov	r3, r1
 801146e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011472:	f7ef fb91 	bl	8000b98 <__aeabi_dcmpgt>
 8011476:	2800      	cmp	r0, #0
 8011478:	d145      	bne.n	8011506 <_dtoa_r+0x6be>
 801147a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801147e:	49a5      	ldr	r1, [pc, #660]	@ (8011714 <_dtoa_r+0x8cc>)
 8011480:	2000      	movs	r0, #0
 8011482:	f7ee ff41 	bl	8000308 <__aeabi_dsub>
 8011486:	4602      	mov	r2, r0
 8011488:	460b      	mov	r3, r1
 801148a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801148e:	f7ef fb65 	bl	8000b5c <__aeabi_dcmplt>
 8011492:	2800      	cmp	r0, #0
 8011494:	f43f aef5 	beq.w	8011282 <_dtoa_r+0x43a>
 8011498:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801149a:	1e73      	subs	r3, r6, #1
 801149c:	9315      	str	r3, [sp, #84]	@ 0x54
 801149e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80114a2:	2b30      	cmp	r3, #48	@ 0x30
 80114a4:	d0f8      	beq.n	8011498 <_dtoa_r+0x650>
 80114a6:	9f04      	ldr	r7, [sp, #16]
 80114a8:	e73e      	b.n	8011328 <_dtoa_r+0x4e0>
 80114aa:	4b9b      	ldr	r3, [pc, #620]	@ (8011718 <_dtoa_r+0x8d0>)
 80114ac:	f7ef f8e4 	bl	8000678 <__aeabi_dmul>
 80114b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114b4:	e7bc      	b.n	8011430 <_dtoa_r+0x5e8>
 80114b6:	d10c      	bne.n	80114d2 <_dtoa_r+0x68a>
 80114b8:	4b98      	ldr	r3, [pc, #608]	@ (801171c <_dtoa_r+0x8d4>)
 80114ba:	2200      	movs	r2, #0
 80114bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114c0:	f7ef f8da 	bl	8000678 <__aeabi_dmul>
 80114c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80114c8:	f7ef fb5c 	bl	8000b84 <__aeabi_dcmpge>
 80114cc:	2800      	cmp	r0, #0
 80114ce:	f000 8157 	beq.w	8011780 <_dtoa_r+0x938>
 80114d2:	2400      	movs	r4, #0
 80114d4:	4625      	mov	r5, r4
 80114d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114d8:	43db      	mvns	r3, r3
 80114da:	9304      	str	r3, [sp, #16]
 80114dc:	4656      	mov	r6, sl
 80114de:	2700      	movs	r7, #0
 80114e0:	4621      	mov	r1, r4
 80114e2:	4658      	mov	r0, fp
 80114e4:	f000 fe4a 	bl	801217c <_Bfree>
 80114e8:	2d00      	cmp	r5, #0
 80114ea:	d0dc      	beq.n	80114a6 <_dtoa_r+0x65e>
 80114ec:	b12f      	cbz	r7, 80114fa <_dtoa_r+0x6b2>
 80114ee:	42af      	cmp	r7, r5
 80114f0:	d003      	beq.n	80114fa <_dtoa_r+0x6b2>
 80114f2:	4639      	mov	r1, r7
 80114f4:	4658      	mov	r0, fp
 80114f6:	f000 fe41 	bl	801217c <_Bfree>
 80114fa:	4629      	mov	r1, r5
 80114fc:	4658      	mov	r0, fp
 80114fe:	f000 fe3d 	bl	801217c <_Bfree>
 8011502:	e7d0      	b.n	80114a6 <_dtoa_r+0x65e>
 8011504:	9704      	str	r7, [sp, #16]
 8011506:	4633      	mov	r3, r6
 8011508:	461e      	mov	r6, r3
 801150a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801150e:	2a39      	cmp	r2, #57	@ 0x39
 8011510:	d107      	bne.n	8011522 <_dtoa_r+0x6da>
 8011512:	459a      	cmp	sl, r3
 8011514:	d1f8      	bne.n	8011508 <_dtoa_r+0x6c0>
 8011516:	9a04      	ldr	r2, [sp, #16]
 8011518:	3201      	adds	r2, #1
 801151a:	9204      	str	r2, [sp, #16]
 801151c:	2230      	movs	r2, #48	@ 0x30
 801151e:	f88a 2000 	strb.w	r2, [sl]
 8011522:	781a      	ldrb	r2, [r3, #0]
 8011524:	3201      	adds	r2, #1
 8011526:	701a      	strb	r2, [r3, #0]
 8011528:	e7bd      	b.n	80114a6 <_dtoa_r+0x65e>
 801152a:	4b7b      	ldr	r3, [pc, #492]	@ (8011718 <_dtoa_r+0x8d0>)
 801152c:	2200      	movs	r2, #0
 801152e:	f7ef f8a3 	bl	8000678 <__aeabi_dmul>
 8011532:	2200      	movs	r2, #0
 8011534:	2300      	movs	r3, #0
 8011536:	4604      	mov	r4, r0
 8011538:	460d      	mov	r5, r1
 801153a:	f7ef fb05 	bl	8000b48 <__aeabi_dcmpeq>
 801153e:	2800      	cmp	r0, #0
 8011540:	f43f aebb 	beq.w	80112ba <_dtoa_r+0x472>
 8011544:	e6f0      	b.n	8011328 <_dtoa_r+0x4e0>
 8011546:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011548:	2a00      	cmp	r2, #0
 801154a:	f000 80db 	beq.w	8011704 <_dtoa_r+0x8bc>
 801154e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011550:	2a01      	cmp	r2, #1
 8011552:	f300 80bf 	bgt.w	80116d4 <_dtoa_r+0x88c>
 8011556:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011558:	2a00      	cmp	r2, #0
 801155a:	f000 80b7 	beq.w	80116cc <_dtoa_r+0x884>
 801155e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011562:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011564:	4646      	mov	r6, r8
 8011566:	9a08      	ldr	r2, [sp, #32]
 8011568:	2101      	movs	r1, #1
 801156a:	441a      	add	r2, r3
 801156c:	4658      	mov	r0, fp
 801156e:	4498      	add	r8, r3
 8011570:	9208      	str	r2, [sp, #32]
 8011572:	f000 ff01 	bl	8012378 <__i2b>
 8011576:	4605      	mov	r5, r0
 8011578:	b15e      	cbz	r6, 8011592 <_dtoa_r+0x74a>
 801157a:	9b08      	ldr	r3, [sp, #32]
 801157c:	2b00      	cmp	r3, #0
 801157e:	dd08      	ble.n	8011592 <_dtoa_r+0x74a>
 8011580:	42b3      	cmp	r3, r6
 8011582:	9a08      	ldr	r2, [sp, #32]
 8011584:	bfa8      	it	ge
 8011586:	4633      	movge	r3, r6
 8011588:	eba8 0803 	sub.w	r8, r8, r3
 801158c:	1af6      	subs	r6, r6, r3
 801158e:	1ad3      	subs	r3, r2, r3
 8011590:	9308      	str	r3, [sp, #32]
 8011592:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011594:	b1f3      	cbz	r3, 80115d4 <_dtoa_r+0x78c>
 8011596:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011598:	2b00      	cmp	r3, #0
 801159a:	f000 80b7 	beq.w	801170c <_dtoa_r+0x8c4>
 801159e:	b18c      	cbz	r4, 80115c4 <_dtoa_r+0x77c>
 80115a0:	4629      	mov	r1, r5
 80115a2:	4622      	mov	r2, r4
 80115a4:	4658      	mov	r0, fp
 80115a6:	f000 ffa7 	bl	80124f8 <__pow5mult>
 80115aa:	464a      	mov	r2, r9
 80115ac:	4601      	mov	r1, r0
 80115ae:	4605      	mov	r5, r0
 80115b0:	4658      	mov	r0, fp
 80115b2:	f000 fef7 	bl	80123a4 <__multiply>
 80115b6:	4649      	mov	r1, r9
 80115b8:	9004      	str	r0, [sp, #16]
 80115ba:	4658      	mov	r0, fp
 80115bc:	f000 fdde 	bl	801217c <_Bfree>
 80115c0:	9b04      	ldr	r3, [sp, #16]
 80115c2:	4699      	mov	r9, r3
 80115c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115c6:	1b1a      	subs	r2, r3, r4
 80115c8:	d004      	beq.n	80115d4 <_dtoa_r+0x78c>
 80115ca:	4649      	mov	r1, r9
 80115cc:	4658      	mov	r0, fp
 80115ce:	f000 ff93 	bl	80124f8 <__pow5mult>
 80115d2:	4681      	mov	r9, r0
 80115d4:	2101      	movs	r1, #1
 80115d6:	4658      	mov	r0, fp
 80115d8:	f000 fece 	bl	8012378 <__i2b>
 80115dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115de:	4604      	mov	r4, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	f000 81cf 	beq.w	8011984 <_dtoa_r+0xb3c>
 80115e6:	461a      	mov	r2, r3
 80115e8:	4601      	mov	r1, r0
 80115ea:	4658      	mov	r0, fp
 80115ec:	f000 ff84 	bl	80124f8 <__pow5mult>
 80115f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	4604      	mov	r4, r0
 80115f6:	f300 8095 	bgt.w	8011724 <_dtoa_r+0x8dc>
 80115fa:	9b02      	ldr	r3, [sp, #8]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	f040 8087 	bne.w	8011710 <_dtoa_r+0x8c8>
 8011602:	9b03      	ldr	r3, [sp, #12]
 8011604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011608:	2b00      	cmp	r3, #0
 801160a:	f040 8089 	bne.w	8011720 <_dtoa_r+0x8d8>
 801160e:	9b03      	ldr	r3, [sp, #12]
 8011610:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011614:	0d1b      	lsrs	r3, r3, #20
 8011616:	051b      	lsls	r3, r3, #20
 8011618:	b12b      	cbz	r3, 8011626 <_dtoa_r+0x7de>
 801161a:	9b08      	ldr	r3, [sp, #32]
 801161c:	3301      	adds	r3, #1
 801161e:	9308      	str	r3, [sp, #32]
 8011620:	f108 0801 	add.w	r8, r8, #1
 8011624:	2301      	movs	r3, #1
 8011626:	930a      	str	r3, [sp, #40]	@ 0x28
 8011628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801162a:	2b00      	cmp	r3, #0
 801162c:	f000 81b0 	beq.w	8011990 <_dtoa_r+0xb48>
 8011630:	6923      	ldr	r3, [r4, #16]
 8011632:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011636:	6918      	ldr	r0, [r3, #16]
 8011638:	f000 fe52 	bl	80122e0 <__hi0bits>
 801163c:	f1c0 0020 	rsb	r0, r0, #32
 8011640:	9b08      	ldr	r3, [sp, #32]
 8011642:	4418      	add	r0, r3
 8011644:	f010 001f 	ands.w	r0, r0, #31
 8011648:	d077      	beq.n	801173a <_dtoa_r+0x8f2>
 801164a:	f1c0 0320 	rsb	r3, r0, #32
 801164e:	2b04      	cmp	r3, #4
 8011650:	dd6b      	ble.n	801172a <_dtoa_r+0x8e2>
 8011652:	9b08      	ldr	r3, [sp, #32]
 8011654:	f1c0 001c 	rsb	r0, r0, #28
 8011658:	4403      	add	r3, r0
 801165a:	4480      	add	r8, r0
 801165c:	4406      	add	r6, r0
 801165e:	9308      	str	r3, [sp, #32]
 8011660:	f1b8 0f00 	cmp.w	r8, #0
 8011664:	dd05      	ble.n	8011672 <_dtoa_r+0x82a>
 8011666:	4649      	mov	r1, r9
 8011668:	4642      	mov	r2, r8
 801166a:	4658      	mov	r0, fp
 801166c:	f000 ff9e 	bl	80125ac <__lshift>
 8011670:	4681      	mov	r9, r0
 8011672:	9b08      	ldr	r3, [sp, #32]
 8011674:	2b00      	cmp	r3, #0
 8011676:	dd05      	ble.n	8011684 <_dtoa_r+0x83c>
 8011678:	4621      	mov	r1, r4
 801167a:	461a      	mov	r2, r3
 801167c:	4658      	mov	r0, fp
 801167e:	f000 ff95 	bl	80125ac <__lshift>
 8011682:	4604      	mov	r4, r0
 8011684:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011686:	2b00      	cmp	r3, #0
 8011688:	d059      	beq.n	801173e <_dtoa_r+0x8f6>
 801168a:	4621      	mov	r1, r4
 801168c:	4648      	mov	r0, r9
 801168e:	f000 fff9 	bl	8012684 <__mcmp>
 8011692:	2800      	cmp	r0, #0
 8011694:	da53      	bge.n	801173e <_dtoa_r+0x8f6>
 8011696:	1e7b      	subs	r3, r7, #1
 8011698:	9304      	str	r3, [sp, #16]
 801169a:	4649      	mov	r1, r9
 801169c:	2300      	movs	r3, #0
 801169e:	220a      	movs	r2, #10
 80116a0:	4658      	mov	r0, fp
 80116a2:	f000 fd8d 	bl	80121c0 <__multadd>
 80116a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80116a8:	4681      	mov	r9, r0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	f000 8172 	beq.w	8011994 <_dtoa_r+0xb4c>
 80116b0:	2300      	movs	r3, #0
 80116b2:	4629      	mov	r1, r5
 80116b4:	220a      	movs	r2, #10
 80116b6:	4658      	mov	r0, fp
 80116b8:	f000 fd82 	bl	80121c0 <__multadd>
 80116bc:	9b00      	ldr	r3, [sp, #0]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	4605      	mov	r5, r0
 80116c2:	dc67      	bgt.n	8011794 <_dtoa_r+0x94c>
 80116c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116c6:	2b02      	cmp	r3, #2
 80116c8:	dc41      	bgt.n	801174e <_dtoa_r+0x906>
 80116ca:	e063      	b.n	8011794 <_dtoa_r+0x94c>
 80116cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80116ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80116d2:	e746      	b.n	8011562 <_dtoa_r+0x71a>
 80116d4:	9b07      	ldr	r3, [sp, #28]
 80116d6:	1e5c      	subs	r4, r3, #1
 80116d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116da:	42a3      	cmp	r3, r4
 80116dc:	bfbf      	itttt	lt
 80116de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80116e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80116e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80116e4:	1ae3      	sublt	r3, r4, r3
 80116e6:	bfb4      	ite	lt
 80116e8:	18d2      	addlt	r2, r2, r3
 80116ea:	1b1c      	subge	r4, r3, r4
 80116ec:	9b07      	ldr	r3, [sp, #28]
 80116ee:	bfbc      	itt	lt
 80116f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80116f2:	2400      	movlt	r4, #0
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	bfb5      	itete	lt
 80116f8:	eba8 0603 	sublt.w	r6, r8, r3
 80116fc:	9b07      	ldrge	r3, [sp, #28]
 80116fe:	2300      	movlt	r3, #0
 8011700:	4646      	movge	r6, r8
 8011702:	e730      	b.n	8011566 <_dtoa_r+0x71e>
 8011704:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011706:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011708:	4646      	mov	r6, r8
 801170a:	e735      	b.n	8011578 <_dtoa_r+0x730>
 801170c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801170e:	e75c      	b.n	80115ca <_dtoa_r+0x782>
 8011710:	2300      	movs	r3, #0
 8011712:	e788      	b.n	8011626 <_dtoa_r+0x7de>
 8011714:	3fe00000 	.word	0x3fe00000
 8011718:	40240000 	.word	0x40240000
 801171c:	40140000 	.word	0x40140000
 8011720:	9b02      	ldr	r3, [sp, #8]
 8011722:	e780      	b.n	8011626 <_dtoa_r+0x7de>
 8011724:	2300      	movs	r3, #0
 8011726:	930a      	str	r3, [sp, #40]	@ 0x28
 8011728:	e782      	b.n	8011630 <_dtoa_r+0x7e8>
 801172a:	d099      	beq.n	8011660 <_dtoa_r+0x818>
 801172c:	9a08      	ldr	r2, [sp, #32]
 801172e:	331c      	adds	r3, #28
 8011730:	441a      	add	r2, r3
 8011732:	4498      	add	r8, r3
 8011734:	441e      	add	r6, r3
 8011736:	9208      	str	r2, [sp, #32]
 8011738:	e792      	b.n	8011660 <_dtoa_r+0x818>
 801173a:	4603      	mov	r3, r0
 801173c:	e7f6      	b.n	801172c <_dtoa_r+0x8e4>
 801173e:	9b07      	ldr	r3, [sp, #28]
 8011740:	9704      	str	r7, [sp, #16]
 8011742:	2b00      	cmp	r3, #0
 8011744:	dc20      	bgt.n	8011788 <_dtoa_r+0x940>
 8011746:	9300      	str	r3, [sp, #0]
 8011748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801174a:	2b02      	cmp	r3, #2
 801174c:	dd1e      	ble.n	801178c <_dtoa_r+0x944>
 801174e:	9b00      	ldr	r3, [sp, #0]
 8011750:	2b00      	cmp	r3, #0
 8011752:	f47f aec0 	bne.w	80114d6 <_dtoa_r+0x68e>
 8011756:	4621      	mov	r1, r4
 8011758:	2205      	movs	r2, #5
 801175a:	4658      	mov	r0, fp
 801175c:	f000 fd30 	bl	80121c0 <__multadd>
 8011760:	4601      	mov	r1, r0
 8011762:	4604      	mov	r4, r0
 8011764:	4648      	mov	r0, r9
 8011766:	f000 ff8d 	bl	8012684 <__mcmp>
 801176a:	2800      	cmp	r0, #0
 801176c:	f77f aeb3 	ble.w	80114d6 <_dtoa_r+0x68e>
 8011770:	4656      	mov	r6, sl
 8011772:	2331      	movs	r3, #49	@ 0x31
 8011774:	f806 3b01 	strb.w	r3, [r6], #1
 8011778:	9b04      	ldr	r3, [sp, #16]
 801177a:	3301      	adds	r3, #1
 801177c:	9304      	str	r3, [sp, #16]
 801177e:	e6ae      	b.n	80114de <_dtoa_r+0x696>
 8011780:	9c07      	ldr	r4, [sp, #28]
 8011782:	9704      	str	r7, [sp, #16]
 8011784:	4625      	mov	r5, r4
 8011786:	e7f3      	b.n	8011770 <_dtoa_r+0x928>
 8011788:	9b07      	ldr	r3, [sp, #28]
 801178a:	9300      	str	r3, [sp, #0]
 801178c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801178e:	2b00      	cmp	r3, #0
 8011790:	f000 8104 	beq.w	801199c <_dtoa_r+0xb54>
 8011794:	2e00      	cmp	r6, #0
 8011796:	dd05      	ble.n	80117a4 <_dtoa_r+0x95c>
 8011798:	4629      	mov	r1, r5
 801179a:	4632      	mov	r2, r6
 801179c:	4658      	mov	r0, fp
 801179e:	f000 ff05 	bl	80125ac <__lshift>
 80117a2:	4605      	mov	r5, r0
 80117a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d05a      	beq.n	8011860 <_dtoa_r+0xa18>
 80117aa:	6869      	ldr	r1, [r5, #4]
 80117ac:	4658      	mov	r0, fp
 80117ae:	f000 fca5 	bl	80120fc <_Balloc>
 80117b2:	4606      	mov	r6, r0
 80117b4:	b928      	cbnz	r0, 80117c2 <_dtoa_r+0x97a>
 80117b6:	4b84      	ldr	r3, [pc, #528]	@ (80119c8 <_dtoa_r+0xb80>)
 80117b8:	4602      	mov	r2, r0
 80117ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80117be:	f7ff bb5a 	b.w	8010e76 <_dtoa_r+0x2e>
 80117c2:	692a      	ldr	r2, [r5, #16]
 80117c4:	3202      	adds	r2, #2
 80117c6:	0092      	lsls	r2, r2, #2
 80117c8:	f105 010c 	add.w	r1, r5, #12
 80117cc:	300c      	adds	r0, #12
 80117ce:	f7ff fa93 	bl	8010cf8 <memcpy>
 80117d2:	2201      	movs	r2, #1
 80117d4:	4631      	mov	r1, r6
 80117d6:	4658      	mov	r0, fp
 80117d8:	f000 fee8 	bl	80125ac <__lshift>
 80117dc:	f10a 0301 	add.w	r3, sl, #1
 80117e0:	9307      	str	r3, [sp, #28]
 80117e2:	9b00      	ldr	r3, [sp, #0]
 80117e4:	4453      	add	r3, sl
 80117e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80117e8:	9b02      	ldr	r3, [sp, #8]
 80117ea:	f003 0301 	and.w	r3, r3, #1
 80117ee:	462f      	mov	r7, r5
 80117f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80117f2:	4605      	mov	r5, r0
 80117f4:	9b07      	ldr	r3, [sp, #28]
 80117f6:	4621      	mov	r1, r4
 80117f8:	3b01      	subs	r3, #1
 80117fa:	4648      	mov	r0, r9
 80117fc:	9300      	str	r3, [sp, #0]
 80117fe:	f7ff fa99 	bl	8010d34 <quorem>
 8011802:	4639      	mov	r1, r7
 8011804:	9002      	str	r0, [sp, #8]
 8011806:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801180a:	4648      	mov	r0, r9
 801180c:	f000 ff3a 	bl	8012684 <__mcmp>
 8011810:	462a      	mov	r2, r5
 8011812:	9008      	str	r0, [sp, #32]
 8011814:	4621      	mov	r1, r4
 8011816:	4658      	mov	r0, fp
 8011818:	f000 ff50 	bl	80126bc <__mdiff>
 801181c:	68c2      	ldr	r2, [r0, #12]
 801181e:	4606      	mov	r6, r0
 8011820:	bb02      	cbnz	r2, 8011864 <_dtoa_r+0xa1c>
 8011822:	4601      	mov	r1, r0
 8011824:	4648      	mov	r0, r9
 8011826:	f000 ff2d 	bl	8012684 <__mcmp>
 801182a:	4602      	mov	r2, r0
 801182c:	4631      	mov	r1, r6
 801182e:	4658      	mov	r0, fp
 8011830:	920e      	str	r2, [sp, #56]	@ 0x38
 8011832:	f000 fca3 	bl	801217c <_Bfree>
 8011836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011838:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801183a:	9e07      	ldr	r6, [sp, #28]
 801183c:	ea43 0102 	orr.w	r1, r3, r2
 8011840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011842:	4319      	orrs	r1, r3
 8011844:	d110      	bne.n	8011868 <_dtoa_r+0xa20>
 8011846:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801184a:	d029      	beq.n	80118a0 <_dtoa_r+0xa58>
 801184c:	9b08      	ldr	r3, [sp, #32]
 801184e:	2b00      	cmp	r3, #0
 8011850:	dd02      	ble.n	8011858 <_dtoa_r+0xa10>
 8011852:	9b02      	ldr	r3, [sp, #8]
 8011854:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011858:	9b00      	ldr	r3, [sp, #0]
 801185a:	f883 8000 	strb.w	r8, [r3]
 801185e:	e63f      	b.n	80114e0 <_dtoa_r+0x698>
 8011860:	4628      	mov	r0, r5
 8011862:	e7bb      	b.n	80117dc <_dtoa_r+0x994>
 8011864:	2201      	movs	r2, #1
 8011866:	e7e1      	b.n	801182c <_dtoa_r+0x9e4>
 8011868:	9b08      	ldr	r3, [sp, #32]
 801186a:	2b00      	cmp	r3, #0
 801186c:	db04      	blt.n	8011878 <_dtoa_r+0xa30>
 801186e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011870:	430b      	orrs	r3, r1
 8011872:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011874:	430b      	orrs	r3, r1
 8011876:	d120      	bne.n	80118ba <_dtoa_r+0xa72>
 8011878:	2a00      	cmp	r2, #0
 801187a:	dded      	ble.n	8011858 <_dtoa_r+0xa10>
 801187c:	4649      	mov	r1, r9
 801187e:	2201      	movs	r2, #1
 8011880:	4658      	mov	r0, fp
 8011882:	f000 fe93 	bl	80125ac <__lshift>
 8011886:	4621      	mov	r1, r4
 8011888:	4681      	mov	r9, r0
 801188a:	f000 fefb 	bl	8012684 <__mcmp>
 801188e:	2800      	cmp	r0, #0
 8011890:	dc03      	bgt.n	801189a <_dtoa_r+0xa52>
 8011892:	d1e1      	bne.n	8011858 <_dtoa_r+0xa10>
 8011894:	f018 0f01 	tst.w	r8, #1
 8011898:	d0de      	beq.n	8011858 <_dtoa_r+0xa10>
 801189a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801189e:	d1d8      	bne.n	8011852 <_dtoa_r+0xa0a>
 80118a0:	9a00      	ldr	r2, [sp, #0]
 80118a2:	2339      	movs	r3, #57	@ 0x39
 80118a4:	7013      	strb	r3, [r2, #0]
 80118a6:	4633      	mov	r3, r6
 80118a8:	461e      	mov	r6, r3
 80118aa:	3b01      	subs	r3, #1
 80118ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80118b0:	2a39      	cmp	r2, #57	@ 0x39
 80118b2:	d052      	beq.n	801195a <_dtoa_r+0xb12>
 80118b4:	3201      	adds	r2, #1
 80118b6:	701a      	strb	r2, [r3, #0]
 80118b8:	e612      	b.n	80114e0 <_dtoa_r+0x698>
 80118ba:	2a00      	cmp	r2, #0
 80118bc:	dd07      	ble.n	80118ce <_dtoa_r+0xa86>
 80118be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80118c2:	d0ed      	beq.n	80118a0 <_dtoa_r+0xa58>
 80118c4:	9a00      	ldr	r2, [sp, #0]
 80118c6:	f108 0301 	add.w	r3, r8, #1
 80118ca:	7013      	strb	r3, [r2, #0]
 80118cc:	e608      	b.n	80114e0 <_dtoa_r+0x698>
 80118ce:	9b07      	ldr	r3, [sp, #28]
 80118d0:	9a07      	ldr	r2, [sp, #28]
 80118d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80118d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80118d8:	4293      	cmp	r3, r2
 80118da:	d028      	beq.n	801192e <_dtoa_r+0xae6>
 80118dc:	4649      	mov	r1, r9
 80118de:	2300      	movs	r3, #0
 80118e0:	220a      	movs	r2, #10
 80118e2:	4658      	mov	r0, fp
 80118e4:	f000 fc6c 	bl	80121c0 <__multadd>
 80118e8:	42af      	cmp	r7, r5
 80118ea:	4681      	mov	r9, r0
 80118ec:	f04f 0300 	mov.w	r3, #0
 80118f0:	f04f 020a 	mov.w	r2, #10
 80118f4:	4639      	mov	r1, r7
 80118f6:	4658      	mov	r0, fp
 80118f8:	d107      	bne.n	801190a <_dtoa_r+0xac2>
 80118fa:	f000 fc61 	bl	80121c0 <__multadd>
 80118fe:	4607      	mov	r7, r0
 8011900:	4605      	mov	r5, r0
 8011902:	9b07      	ldr	r3, [sp, #28]
 8011904:	3301      	adds	r3, #1
 8011906:	9307      	str	r3, [sp, #28]
 8011908:	e774      	b.n	80117f4 <_dtoa_r+0x9ac>
 801190a:	f000 fc59 	bl	80121c0 <__multadd>
 801190e:	4629      	mov	r1, r5
 8011910:	4607      	mov	r7, r0
 8011912:	2300      	movs	r3, #0
 8011914:	220a      	movs	r2, #10
 8011916:	4658      	mov	r0, fp
 8011918:	f000 fc52 	bl	80121c0 <__multadd>
 801191c:	4605      	mov	r5, r0
 801191e:	e7f0      	b.n	8011902 <_dtoa_r+0xaba>
 8011920:	9b00      	ldr	r3, [sp, #0]
 8011922:	2b00      	cmp	r3, #0
 8011924:	bfcc      	ite	gt
 8011926:	461e      	movgt	r6, r3
 8011928:	2601      	movle	r6, #1
 801192a:	4456      	add	r6, sl
 801192c:	2700      	movs	r7, #0
 801192e:	4649      	mov	r1, r9
 8011930:	2201      	movs	r2, #1
 8011932:	4658      	mov	r0, fp
 8011934:	f000 fe3a 	bl	80125ac <__lshift>
 8011938:	4621      	mov	r1, r4
 801193a:	4681      	mov	r9, r0
 801193c:	f000 fea2 	bl	8012684 <__mcmp>
 8011940:	2800      	cmp	r0, #0
 8011942:	dcb0      	bgt.n	80118a6 <_dtoa_r+0xa5e>
 8011944:	d102      	bne.n	801194c <_dtoa_r+0xb04>
 8011946:	f018 0f01 	tst.w	r8, #1
 801194a:	d1ac      	bne.n	80118a6 <_dtoa_r+0xa5e>
 801194c:	4633      	mov	r3, r6
 801194e:	461e      	mov	r6, r3
 8011950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011954:	2a30      	cmp	r2, #48	@ 0x30
 8011956:	d0fa      	beq.n	801194e <_dtoa_r+0xb06>
 8011958:	e5c2      	b.n	80114e0 <_dtoa_r+0x698>
 801195a:	459a      	cmp	sl, r3
 801195c:	d1a4      	bne.n	80118a8 <_dtoa_r+0xa60>
 801195e:	9b04      	ldr	r3, [sp, #16]
 8011960:	3301      	adds	r3, #1
 8011962:	9304      	str	r3, [sp, #16]
 8011964:	2331      	movs	r3, #49	@ 0x31
 8011966:	f88a 3000 	strb.w	r3, [sl]
 801196a:	e5b9      	b.n	80114e0 <_dtoa_r+0x698>
 801196c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801196e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80119cc <_dtoa_r+0xb84>
 8011972:	b11b      	cbz	r3, 801197c <_dtoa_r+0xb34>
 8011974:	f10a 0308 	add.w	r3, sl, #8
 8011978:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801197a:	6013      	str	r3, [r2, #0]
 801197c:	4650      	mov	r0, sl
 801197e:	b019      	add	sp, #100	@ 0x64
 8011980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011986:	2b01      	cmp	r3, #1
 8011988:	f77f ae37 	ble.w	80115fa <_dtoa_r+0x7b2>
 801198c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801198e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011990:	2001      	movs	r0, #1
 8011992:	e655      	b.n	8011640 <_dtoa_r+0x7f8>
 8011994:	9b00      	ldr	r3, [sp, #0]
 8011996:	2b00      	cmp	r3, #0
 8011998:	f77f aed6 	ble.w	8011748 <_dtoa_r+0x900>
 801199c:	4656      	mov	r6, sl
 801199e:	4621      	mov	r1, r4
 80119a0:	4648      	mov	r0, r9
 80119a2:	f7ff f9c7 	bl	8010d34 <quorem>
 80119a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80119aa:	f806 8b01 	strb.w	r8, [r6], #1
 80119ae:	9b00      	ldr	r3, [sp, #0]
 80119b0:	eba6 020a 	sub.w	r2, r6, sl
 80119b4:	4293      	cmp	r3, r2
 80119b6:	ddb3      	ble.n	8011920 <_dtoa_r+0xad8>
 80119b8:	4649      	mov	r1, r9
 80119ba:	2300      	movs	r3, #0
 80119bc:	220a      	movs	r2, #10
 80119be:	4658      	mov	r0, fp
 80119c0:	f000 fbfe 	bl	80121c0 <__multadd>
 80119c4:	4681      	mov	r9, r0
 80119c6:	e7ea      	b.n	801199e <_dtoa_r+0xb56>
 80119c8:	08016a14 	.word	0x08016a14
 80119cc:	08016998 	.word	0x08016998

080119d0 <_free_r>:
 80119d0:	b538      	push	{r3, r4, r5, lr}
 80119d2:	4605      	mov	r5, r0
 80119d4:	2900      	cmp	r1, #0
 80119d6:	d041      	beq.n	8011a5c <_free_r+0x8c>
 80119d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119dc:	1f0c      	subs	r4, r1, #4
 80119de:	2b00      	cmp	r3, #0
 80119e0:	bfb8      	it	lt
 80119e2:	18e4      	addlt	r4, r4, r3
 80119e4:	f7fd f856 	bl	800ea94 <__malloc_lock>
 80119e8:	4a1d      	ldr	r2, [pc, #116]	@ (8011a60 <_free_r+0x90>)
 80119ea:	6813      	ldr	r3, [r2, #0]
 80119ec:	b933      	cbnz	r3, 80119fc <_free_r+0x2c>
 80119ee:	6063      	str	r3, [r4, #4]
 80119f0:	6014      	str	r4, [r2, #0]
 80119f2:	4628      	mov	r0, r5
 80119f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119f8:	f7fd b852 	b.w	800eaa0 <__malloc_unlock>
 80119fc:	42a3      	cmp	r3, r4
 80119fe:	d908      	bls.n	8011a12 <_free_r+0x42>
 8011a00:	6820      	ldr	r0, [r4, #0]
 8011a02:	1821      	adds	r1, r4, r0
 8011a04:	428b      	cmp	r3, r1
 8011a06:	bf01      	itttt	eq
 8011a08:	6819      	ldreq	r1, [r3, #0]
 8011a0a:	685b      	ldreq	r3, [r3, #4]
 8011a0c:	1809      	addeq	r1, r1, r0
 8011a0e:	6021      	streq	r1, [r4, #0]
 8011a10:	e7ed      	b.n	80119ee <_free_r+0x1e>
 8011a12:	461a      	mov	r2, r3
 8011a14:	685b      	ldr	r3, [r3, #4]
 8011a16:	b10b      	cbz	r3, 8011a1c <_free_r+0x4c>
 8011a18:	42a3      	cmp	r3, r4
 8011a1a:	d9fa      	bls.n	8011a12 <_free_r+0x42>
 8011a1c:	6811      	ldr	r1, [r2, #0]
 8011a1e:	1850      	adds	r0, r2, r1
 8011a20:	42a0      	cmp	r0, r4
 8011a22:	d10b      	bne.n	8011a3c <_free_r+0x6c>
 8011a24:	6820      	ldr	r0, [r4, #0]
 8011a26:	4401      	add	r1, r0
 8011a28:	1850      	adds	r0, r2, r1
 8011a2a:	4283      	cmp	r3, r0
 8011a2c:	6011      	str	r1, [r2, #0]
 8011a2e:	d1e0      	bne.n	80119f2 <_free_r+0x22>
 8011a30:	6818      	ldr	r0, [r3, #0]
 8011a32:	685b      	ldr	r3, [r3, #4]
 8011a34:	6053      	str	r3, [r2, #4]
 8011a36:	4408      	add	r0, r1
 8011a38:	6010      	str	r0, [r2, #0]
 8011a3a:	e7da      	b.n	80119f2 <_free_r+0x22>
 8011a3c:	d902      	bls.n	8011a44 <_free_r+0x74>
 8011a3e:	230c      	movs	r3, #12
 8011a40:	602b      	str	r3, [r5, #0]
 8011a42:	e7d6      	b.n	80119f2 <_free_r+0x22>
 8011a44:	6820      	ldr	r0, [r4, #0]
 8011a46:	1821      	adds	r1, r4, r0
 8011a48:	428b      	cmp	r3, r1
 8011a4a:	bf04      	itt	eq
 8011a4c:	6819      	ldreq	r1, [r3, #0]
 8011a4e:	685b      	ldreq	r3, [r3, #4]
 8011a50:	6063      	str	r3, [r4, #4]
 8011a52:	bf04      	itt	eq
 8011a54:	1809      	addeq	r1, r1, r0
 8011a56:	6021      	streq	r1, [r4, #0]
 8011a58:	6054      	str	r4, [r2, #4]
 8011a5a:	e7ca      	b.n	80119f2 <_free_r+0x22>
 8011a5c:	bd38      	pop	{r3, r4, r5, pc}
 8011a5e:	bf00      	nop
 8011a60:	20005cf0 	.word	0x20005cf0

08011a64 <rshift>:
 8011a64:	6903      	ldr	r3, [r0, #16]
 8011a66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011a6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011a72:	f100 0414 	add.w	r4, r0, #20
 8011a76:	dd45      	ble.n	8011b04 <rshift+0xa0>
 8011a78:	f011 011f 	ands.w	r1, r1, #31
 8011a7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011a80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011a84:	d10c      	bne.n	8011aa0 <rshift+0x3c>
 8011a86:	f100 0710 	add.w	r7, r0, #16
 8011a8a:	4629      	mov	r1, r5
 8011a8c:	42b1      	cmp	r1, r6
 8011a8e:	d334      	bcc.n	8011afa <rshift+0x96>
 8011a90:	1a9b      	subs	r3, r3, r2
 8011a92:	009b      	lsls	r3, r3, #2
 8011a94:	1eea      	subs	r2, r5, #3
 8011a96:	4296      	cmp	r6, r2
 8011a98:	bf38      	it	cc
 8011a9a:	2300      	movcc	r3, #0
 8011a9c:	4423      	add	r3, r4
 8011a9e:	e015      	b.n	8011acc <rshift+0x68>
 8011aa0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011aa4:	f1c1 0820 	rsb	r8, r1, #32
 8011aa8:	40cf      	lsrs	r7, r1
 8011aaa:	f105 0e04 	add.w	lr, r5, #4
 8011aae:	46a1      	mov	r9, r4
 8011ab0:	4576      	cmp	r6, lr
 8011ab2:	46f4      	mov	ip, lr
 8011ab4:	d815      	bhi.n	8011ae2 <rshift+0x7e>
 8011ab6:	1a9a      	subs	r2, r3, r2
 8011ab8:	0092      	lsls	r2, r2, #2
 8011aba:	3a04      	subs	r2, #4
 8011abc:	3501      	adds	r5, #1
 8011abe:	42ae      	cmp	r6, r5
 8011ac0:	bf38      	it	cc
 8011ac2:	2200      	movcc	r2, #0
 8011ac4:	18a3      	adds	r3, r4, r2
 8011ac6:	50a7      	str	r7, [r4, r2]
 8011ac8:	b107      	cbz	r7, 8011acc <rshift+0x68>
 8011aca:	3304      	adds	r3, #4
 8011acc:	1b1a      	subs	r2, r3, r4
 8011ace:	42a3      	cmp	r3, r4
 8011ad0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011ad4:	bf08      	it	eq
 8011ad6:	2300      	moveq	r3, #0
 8011ad8:	6102      	str	r2, [r0, #16]
 8011ada:	bf08      	it	eq
 8011adc:	6143      	streq	r3, [r0, #20]
 8011ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ae2:	f8dc c000 	ldr.w	ip, [ip]
 8011ae6:	fa0c fc08 	lsl.w	ip, ip, r8
 8011aea:	ea4c 0707 	orr.w	r7, ip, r7
 8011aee:	f849 7b04 	str.w	r7, [r9], #4
 8011af2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011af6:	40cf      	lsrs	r7, r1
 8011af8:	e7da      	b.n	8011ab0 <rshift+0x4c>
 8011afa:	f851 cb04 	ldr.w	ip, [r1], #4
 8011afe:	f847 cf04 	str.w	ip, [r7, #4]!
 8011b02:	e7c3      	b.n	8011a8c <rshift+0x28>
 8011b04:	4623      	mov	r3, r4
 8011b06:	e7e1      	b.n	8011acc <rshift+0x68>

08011b08 <__hexdig_fun>:
 8011b08:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011b0c:	2b09      	cmp	r3, #9
 8011b0e:	d802      	bhi.n	8011b16 <__hexdig_fun+0xe>
 8011b10:	3820      	subs	r0, #32
 8011b12:	b2c0      	uxtb	r0, r0
 8011b14:	4770      	bx	lr
 8011b16:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011b1a:	2b05      	cmp	r3, #5
 8011b1c:	d801      	bhi.n	8011b22 <__hexdig_fun+0x1a>
 8011b1e:	3847      	subs	r0, #71	@ 0x47
 8011b20:	e7f7      	b.n	8011b12 <__hexdig_fun+0xa>
 8011b22:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011b26:	2b05      	cmp	r3, #5
 8011b28:	d801      	bhi.n	8011b2e <__hexdig_fun+0x26>
 8011b2a:	3827      	subs	r0, #39	@ 0x27
 8011b2c:	e7f1      	b.n	8011b12 <__hexdig_fun+0xa>
 8011b2e:	2000      	movs	r0, #0
 8011b30:	4770      	bx	lr
	...

08011b34 <__gethex>:
 8011b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b38:	b085      	sub	sp, #20
 8011b3a:	468a      	mov	sl, r1
 8011b3c:	9302      	str	r3, [sp, #8]
 8011b3e:	680b      	ldr	r3, [r1, #0]
 8011b40:	9001      	str	r0, [sp, #4]
 8011b42:	4690      	mov	r8, r2
 8011b44:	1c9c      	adds	r4, r3, #2
 8011b46:	46a1      	mov	r9, r4
 8011b48:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011b4c:	2830      	cmp	r0, #48	@ 0x30
 8011b4e:	d0fa      	beq.n	8011b46 <__gethex+0x12>
 8011b50:	eba9 0303 	sub.w	r3, r9, r3
 8011b54:	f1a3 0b02 	sub.w	fp, r3, #2
 8011b58:	f7ff ffd6 	bl	8011b08 <__hexdig_fun>
 8011b5c:	4605      	mov	r5, r0
 8011b5e:	2800      	cmp	r0, #0
 8011b60:	d168      	bne.n	8011c34 <__gethex+0x100>
 8011b62:	49a0      	ldr	r1, [pc, #640]	@ (8011de4 <__gethex+0x2b0>)
 8011b64:	2201      	movs	r2, #1
 8011b66:	4648      	mov	r0, r9
 8011b68:	f7fe ffa9 	bl	8010abe <strncmp>
 8011b6c:	4607      	mov	r7, r0
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	d167      	bne.n	8011c42 <__gethex+0x10e>
 8011b72:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011b76:	4626      	mov	r6, r4
 8011b78:	f7ff ffc6 	bl	8011b08 <__hexdig_fun>
 8011b7c:	2800      	cmp	r0, #0
 8011b7e:	d062      	beq.n	8011c46 <__gethex+0x112>
 8011b80:	4623      	mov	r3, r4
 8011b82:	7818      	ldrb	r0, [r3, #0]
 8011b84:	2830      	cmp	r0, #48	@ 0x30
 8011b86:	4699      	mov	r9, r3
 8011b88:	f103 0301 	add.w	r3, r3, #1
 8011b8c:	d0f9      	beq.n	8011b82 <__gethex+0x4e>
 8011b8e:	f7ff ffbb 	bl	8011b08 <__hexdig_fun>
 8011b92:	fab0 f580 	clz	r5, r0
 8011b96:	096d      	lsrs	r5, r5, #5
 8011b98:	f04f 0b01 	mov.w	fp, #1
 8011b9c:	464a      	mov	r2, r9
 8011b9e:	4616      	mov	r6, r2
 8011ba0:	3201      	adds	r2, #1
 8011ba2:	7830      	ldrb	r0, [r6, #0]
 8011ba4:	f7ff ffb0 	bl	8011b08 <__hexdig_fun>
 8011ba8:	2800      	cmp	r0, #0
 8011baa:	d1f8      	bne.n	8011b9e <__gethex+0x6a>
 8011bac:	498d      	ldr	r1, [pc, #564]	@ (8011de4 <__gethex+0x2b0>)
 8011bae:	2201      	movs	r2, #1
 8011bb0:	4630      	mov	r0, r6
 8011bb2:	f7fe ff84 	bl	8010abe <strncmp>
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	d13f      	bne.n	8011c3a <__gethex+0x106>
 8011bba:	b944      	cbnz	r4, 8011bce <__gethex+0x9a>
 8011bbc:	1c74      	adds	r4, r6, #1
 8011bbe:	4622      	mov	r2, r4
 8011bc0:	4616      	mov	r6, r2
 8011bc2:	3201      	adds	r2, #1
 8011bc4:	7830      	ldrb	r0, [r6, #0]
 8011bc6:	f7ff ff9f 	bl	8011b08 <__hexdig_fun>
 8011bca:	2800      	cmp	r0, #0
 8011bcc:	d1f8      	bne.n	8011bc0 <__gethex+0x8c>
 8011bce:	1ba4      	subs	r4, r4, r6
 8011bd0:	00a7      	lsls	r7, r4, #2
 8011bd2:	7833      	ldrb	r3, [r6, #0]
 8011bd4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011bd8:	2b50      	cmp	r3, #80	@ 0x50
 8011bda:	d13e      	bne.n	8011c5a <__gethex+0x126>
 8011bdc:	7873      	ldrb	r3, [r6, #1]
 8011bde:	2b2b      	cmp	r3, #43	@ 0x2b
 8011be0:	d033      	beq.n	8011c4a <__gethex+0x116>
 8011be2:	2b2d      	cmp	r3, #45	@ 0x2d
 8011be4:	d034      	beq.n	8011c50 <__gethex+0x11c>
 8011be6:	1c71      	adds	r1, r6, #1
 8011be8:	2400      	movs	r4, #0
 8011bea:	7808      	ldrb	r0, [r1, #0]
 8011bec:	f7ff ff8c 	bl	8011b08 <__hexdig_fun>
 8011bf0:	1e43      	subs	r3, r0, #1
 8011bf2:	b2db      	uxtb	r3, r3
 8011bf4:	2b18      	cmp	r3, #24
 8011bf6:	d830      	bhi.n	8011c5a <__gethex+0x126>
 8011bf8:	f1a0 0210 	sub.w	r2, r0, #16
 8011bfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011c00:	f7ff ff82 	bl	8011b08 <__hexdig_fun>
 8011c04:	f100 3cff 	add.w	ip, r0, #4294967295
 8011c08:	fa5f fc8c 	uxtb.w	ip, ip
 8011c0c:	f1bc 0f18 	cmp.w	ip, #24
 8011c10:	f04f 030a 	mov.w	r3, #10
 8011c14:	d91e      	bls.n	8011c54 <__gethex+0x120>
 8011c16:	b104      	cbz	r4, 8011c1a <__gethex+0xe6>
 8011c18:	4252      	negs	r2, r2
 8011c1a:	4417      	add	r7, r2
 8011c1c:	f8ca 1000 	str.w	r1, [sl]
 8011c20:	b1ed      	cbz	r5, 8011c5e <__gethex+0x12a>
 8011c22:	f1bb 0f00 	cmp.w	fp, #0
 8011c26:	bf0c      	ite	eq
 8011c28:	2506      	moveq	r5, #6
 8011c2a:	2500      	movne	r5, #0
 8011c2c:	4628      	mov	r0, r5
 8011c2e:	b005      	add	sp, #20
 8011c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c34:	2500      	movs	r5, #0
 8011c36:	462c      	mov	r4, r5
 8011c38:	e7b0      	b.n	8011b9c <__gethex+0x68>
 8011c3a:	2c00      	cmp	r4, #0
 8011c3c:	d1c7      	bne.n	8011bce <__gethex+0x9a>
 8011c3e:	4627      	mov	r7, r4
 8011c40:	e7c7      	b.n	8011bd2 <__gethex+0x9e>
 8011c42:	464e      	mov	r6, r9
 8011c44:	462f      	mov	r7, r5
 8011c46:	2501      	movs	r5, #1
 8011c48:	e7c3      	b.n	8011bd2 <__gethex+0x9e>
 8011c4a:	2400      	movs	r4, #0
 8011c4c:	1cb1      	adds	r1, r6, #2
 8011c4e:	e7cc      	b.n	8011bea <__gethex+0xb6>
 8011c50:	2401      	movs	r4, #1
 8011c52:	e7fb      	b.n	8011c4c <__gethex+0x118>
 8011c54:	fb03 0002 	mla	r0, r3, r2, r0
 8011c58:	e7ce      	b.n	8011bf8 <__gethex+0xc4>
 8011c5a:	4631      	mov	r1, r6
 8011c5c:	e7de      	b.n	8011c1c <__gethex+0xe8>
 8011c5e:	eba6 0309 	sub.w	r3, r6, r9
 8011c62:	3b01      	subs	r3, #1
 8011c64:	4629      	mov	r1, r5
 8011c66:	2b07      	cmp	r3, #7
 8011c68:	dc0a      	bgt.n	8011c80 <__gethex+0x14c>
 8011c6a:	9801      	ldr	r0, [sp, #4]
 8011c6c:	f000 fa46 	bl	80120fc <_Balloc>
 8011c70:	4604      	mov	r4, r0
 8011c72:	b940      	cbnz	r0, 8011c86 <__gethex+0x152>
 8011c74:	4b5c      	ldr	r3, [pc, #368]	@ (8011de8 <__gethex+0x2b4>)
 8011c76:	4602      	mov	r2, r0
 8011c78:	21e4      	movs	r1, #228	@ 0xe4
 8011c7a:	485c      	ldr	r0, [pc, #368]	@ (8011dec <__gethex+0x2b8>)
 8011c7c:	f001 fe6e 	bl	801395c <__assert_func>
 8011c80:	3101      	adds	r1, #1
 8011c82:	105b      	asrs	r3, r3, #1
 8011c84:	e7ef      	b.n	8011c66 <__gethex+0x132>
 8011c86:	f100 0a14 	add.w	sl, r0, #20
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	4655      	mov	r5, sl
 8011c8e:	469b      	mov	fp, r3
 8011c90:	45b1      	cmp	r9, r6
 8011c92:	d337      	bcc.n	8011d04 <__gethex+0x1d0>
 8011c94:	f845 bb04 	str.w	fp, [r5], #4
 8011c98:	eba5 050a 	sub.w	r5, r5, sl
 8011c9c:	10ad      	asrs	r5, r5, #2
 8011c9e:	6125      	str	r5, [r4, #16]
 8011ca0:	4658      	mov	r0, fp
 8011ca2:	f000 fb1d 	bl	80122e0 <__hi0bits>
 8011ca6:	016d      	lsls	r5, r5, #5
 8011ca8:	f8d8 6000 	ldr.w	r6, [r8]
 8011cac:	1a2d      	subs	r5, r5, r0
 8011cae:	42b5      	cmp	r5, r6
 8011cb0:	dd54      	ble.n	8011d5c <__gethex+0x228>
 8011cb2:	1bad      	subs	r5, r5, r6
 8011cb4:	4629      	mov	r1, r5
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	f000 feb1 	bl	8012a1e <__any_on>
 8011cbc:	4681      	mov	r9, r0
 8011cbe:	b178      	cbz	r0, 8011ce0 <__gethex+0x1ac>
 8011cc0:	1e6b      	subs	r3, r5, #1
 8011cc2:	1159      	asrs	r1, r3, #5
 8011cc4:	f003 021f 	and.w	r2, r3, #31
 8011cc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011ccc:	f04f 0901 	mov.w	r9, #1
 8011cd0:	fa09 f202 	lsl.w	r2, r9, r2
 8011cd4:	420a      	tst	r2, r1
 8011cd6:	d003      	beq.n	8011ce0 <__gethex+0x1ac>
 8011cd8:	454b      	cmp	r3, r9
 8011cda:	dc36      	bgt.n	8011d4a <__gethex+0x216>
 8011cdc:	f04f 0902 	mov.w	r9, #2
 8011ce0:	4629      	mov	r1, r5
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	f7ff febe 	bl	8011a64 <rshift>
 8011ce8:	442f      	add	r7, r5
 8011cea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011cee:	42bb      	cmp	r3, r7
 8011cf0:	da42      	bge.n	8011d78 <__gethex+0x244>
 8011cf2:	9801      	ldr	r0, [sp, #4]
 8011cf4:	4621      	mov	r1, r4
 8011cf6:	f000 fa41 	bl	801217c <_Bfree>
 8011cfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	6013      	str	r3, [r2, #0]
 8011d00:	25a3      	movs	r5, #163	@ 0xa3
 8011d02:	e793      	b.n	8011c2c <__gethex+0xf8>
 8011d04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011d08:	2a2e      	cmp	r2, #46	@ 0x2e
 8011d0a:	d012      	beq.n	8011d32 <__gethex+0x1fe>
 8011d0c:	2b20      	cmp	r3, #32
 8011d0e:	d104      	bne.n	8011d1a <__gethex+0x1e6>
 8011d10:	f845 bb04 	str.w	fp, [r5], #4
 8011d14:	f04f 0b00 	mov.w	fp, #0
 8011d18:	465b      	mov	r3, fp
 8011d1a:	7830      	ldrb	r0, [r6, #0]
 8011d1c:	9303      	str	r3, [sp, #12]
 8011d1e:	f7ff fef3 	bl	8011b08 <__hexdig_fun>
 8011d22:	9b03      	ldr	r3, [sp, #12]
 8011d24:	f000 000f 	and.w	r0, r0, #15
 8011d28:	4098      	lsls	r0, r3
 8011d2a:	ea4b 0b00 	orr.w	fp, fp, r0
 8011d2e:	3304      	adds	r3, #4
 8011d30:	e7ae      	b.n	8011c90 <__gethex+0x15c>
 8011d32:	45b1      	cmp	r9, r6
 8011d34:	d8ea      	bhi.n	8011d0c <__gethex+0x1d8>
 8011d36:	492b      	ldr	r1, [pc, #172]	@ (8011de4 <__gethex+0x2b0>)
 8011d38:	9303      	str	r3, [sp, #12]
 8011d3a:	2201      	movs	r2, #1
 8011d3c:	4630      	mov	r0, r6
 8011d3e:	f7fe febe 	bl	8010abe <strncmp>
 8011d42:	9b03      	ldr	r3, [sp, #12]
 8011d44:	2800      	cmp	r0, #0
 8011d46:	d1e1      	bne.n	8011d0c <__gethex+0x1d8>
 8011d48:	e7a2      	b.n	8011c90 <__gethex+0x15c>
 8011d4a:	1ea9      	subs	r1, r5, #2
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f000 fe66 	bl	8012a1e <__any_on>
 8011d52:	2800      	cmp	r0, #0
 8011d54:	d0c2      	beq.n	8011cdc <__gethex+0x1a8>
 8011d56:	f04f 0903 	mov.w	r9, #3
 8011d5a:	e7c1      	b.n	8011ce0 <__gethex+0x1ac>
 8011d5c:	da09      	bge.n	8011d72 <__gethex+0x23e>
 8011d5e:	1b75      	subs	r5, r6, r5
 8011d60:	4621      	mov	r1, r4
 8011d62:	9801      	ldr	r0, [sp, #4]
 8011d64:	462a      	mov	r2, r5
 8011d66:	f000 fc21 	bl	80125ac <__lshift>
 8011d6a:	1b7f      	subs	r7, r7, r5
 8011d6c:	4604      	mov	r4, r0
 8011d6e:	f100 0a14 	add.w	sl, r0, #20
 8011d72:	f04f 0900 	mov.w	r9, #0
 8011d76:	e7b8      	b.n	8011cea <__gethex+0x1b6>
 8011d78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011d7c:	42bd      	cmp	r5, r7
 8011d7e:	dd6f      	ble.n	8011e60 <__gethex+0x32c>
 8011d80:	1bed      	subs	r5, r5, r7
 8011d82:	42ae      	cmp	r6, r5
 8011d84:	dc34      	bgt.n	8011df0 <__gethex+0x2bc>
 8011d86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011d8a:	2b02      	cmp	r3, #2
 8011d8c:	d022      	beq.n	8011dd4 <__gethex+0x2a0>
 8011d8e:	2b03      	cmp	r3, #3
 8011d90:	d024      	beq.n	8011ddc <__gethex+0x2a8>
 8011d92:	2b01      	cmp	r3, #1
 8011d94:	d115      	bne.n	8011dc2 <__gethex+0x28e>
 8011d96:	42ae      	cmp	r6, r5
 8011d98:	d113      	bne.n	8011dc2 <__gethex+0x28e>
 8011d9a:	2e01      	cmp	r6, #1
 8011d9c:	d10b      	bne.n	8011db6 <__gethex+0x282>
 8011d9e:	9a02      	ldr	r2, [sp, #8]
 8011da0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011da4:	6013      	str	r3, [r2, #0]
 8011da6:	2301      	movs	r3, #1
 8011da8:	6123      	str	r3, [r4, #16]
 8011daa:	f8ca 3000 	str.w	r3, [sl]
 8011dae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011db0:	2562      	movs	r5, #98	@ 0x62
 8011db2:	601c      	str	r4, [r3, #0]
 8011db4:	e73a      	b.n	8011c2c <__gethex+0xf8>
 8011db6:	1e71      	subs	r1, r6, #1
 8011db8:	4620      	mov	r0, r4
 8011dba:	f000 fe30 	bl	8012a1e <__any_on>
 8011dbe:	2800      	cmp	r0, #0
 8011dc0:	d1ed      	bne.n	8011d9e <__gethex+0x26a>
 8011dc2:	9801      	ldr	r0, [sp, #4]
 8011dc4:	4621      	mov	r1, r4
 8011dc6:	f000 f9d9 	bl	801217c <_Bfree>
 8011dca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011dcc:	2300      	movs	r3, #0
 8011dce:	6013      	str	r3, [r2, #0]
 8011dd0:	2550      	movs	r5, #80	@ 0x50
 8011dd2:	e72b      	b.n	8011c2c <__gethex+0xf8>
 8011dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d1f3      	bne.n	8011dc2 <__gethex+0x28e>
 8011dda:	e7e0      	b.n	8011d9e <__gethex+0x26a>
 8011ddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d1dd      	bne.n	8011d9e <__gethex+0x26a>
 8011de2:	e7ee      	b.n	8011dc2 <__gethex+0x28e>
 8011de4:	08016801 	.word	0x08016801
 8011de8:	08016a14 	.word	0x08016a14
 8011dec:	08016a25 	.word	0x08016a25
 8011df0:	1e6f      	subs	r7, r5, #1
 8011df2:	f1b9 0f00 	cmp.w	r9, #0
 8011df6:	d130      	bne.n	8011e5a <__gethex+0x326>
 8011df8:	b127      	cbz	r7, 8011e04 <__gethex+0x2d0>
 8011dfa:	4639      	mov	r1, r7
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	f000 fe0e 	bl	8012a1e <__any_on>
 8011e02:	4681      	mov	r9, r0
 8011e04:	117a      	asrs	r2, r7, #5
 8011e06:	2301      	movs	r3, #1
 8011e08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011e0c:	f007 071f 	and.w	r7, r7, #31
 8011e10:	40bb      	lsls	r3, r7
 8011e12:	4213      	tst	r3, r2
 8011e14:	4629      	mov	r1, r5
 8011e16:	4620      	mov	r0, r4
 8011e18:	bf18      	it	ne
 8011e1a:	f049 0902 	orrne.w	r9, r9, #2
 8011e1e:	f7ff fe21 	bl	8011a64 <rshift>
 8011e22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011e26:	1b76      	subs	r6, r6, r5
 8011e28:	2502      	movs	r5, #2
 8011e2a:	f1b9 0f00 	cmp.w	r9, #0
 8011e2e:	d047      	beq.n	8011ec0 <__gethex+0x38c>
 8011e30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011e34:	2b02      	cmp	r3, #2
 8011e36:	d015      	beq.n	8011e64 <__gethex+0x330>
 8011e38:	2b03      	cmp	r3, #3
 8011e3a:	d017      	beq.n	8011e6c <__gethex+0x338>
 8011e3c:	2b01      	cmp	r3, #1
 8011e3e:	d109      	bne.n	8011e54 <__gethex+0x320>
 8011e40:	f019 0f02 	tst.w	r9, #2
 8011e44:	d006      	beq.n	8011e54 <__gethex+0x320>
 8011e46:	f8da 3000 	ldr.w	r3, [sl]
 8011e4a:	ea49 0903 	orr.w	r9, r9, r3
 8011e4e:	f019 0f01 	tst.w	r9, #1
 8011e52:	d10e      	bne.n	8011e72 <__gethex+0x33e>
 8011e54:	f045 0510 	orr.w	r5, r5, #16
 8011e58:	e032      	b.n	8011ec0 <__gethex+0x38c>
 8011e5a:	f04f 0901 	mov.w	r9, #1
 8011e5e:	e7d1      	b.n	8011e04 <__gethex+0x2d0>
 8011e60:	2501      	movs	r5, #1
 8011e62:	e7e2      	b.n	8011e2a <__gethex+0x2f6>
 8011e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e66:	f1c3 0301 	rsb	r3, r3, #1
 8011e6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d0f0      	beq.n	8011e54 <__gethex+0x320>
 8011e72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011e76:	f104 0314 	add.w	r3, r4, #20
 8011e7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011e7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011e82:	f04f 0c00 	mov.w	ip, #0
 8011e86:	4618      	mov	r0, r3
 8011e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011e90:	d01b      	beq.n	8011eca <__gethex+0x396>
 8011e92:	3201      	adds	r2, #1
 8011e94:	6002      	str	r2, [r0, #0]
 8011e96:	2d02      	cmp	r5, #2
 8011e98:	f104 0314 	add.w	r3, r4, #20
 8011e9c:	d13c      	bne.n	8011f18 <__gethex+0x3e4>
 8011e9e:	f8d8 2000 	ldr.w	r2, [r8]
 8011ea2:	3a01      	subs	r2, #1
 8011ea4:	42b2      	cmp	r2, r6
 8011ea6:	d109      	bne.n	8011ebc <__gethex+0x388>
 8011ea8:	1171      	asrs	r1, r6, #5
 8011eaa:	2201      	movs	r2, #1
 8011eac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011eb0:	f006 061f 	and.w	r6, r6, #31
 8011eb4:	fa02 f606 	lsl.w	r6, r2, r6
 8011eb8:	421e      	tst	r6, r3
 8011eba:	d13a      	bne.n	8011f32 <__gethex+0x3fe>
 8011ebc:	f045 0520 	orr.w	r5, r5, #32
 8011ec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ec2:	601c      	str	r4, [r3, #0]
 8011ec4:	9b02      	ldr	r3, [sp, #8]
 8011ec6:	601f      	str	r7, [r3, #0]
 8011ec8:	e6b0      	b.n	8011c2c <__gethex+0xf8>
 8011eca:	4299      	cmp	r1, r3
 8011ecc:	f843 cc04 	str.w	ip, [r3, #-4]
 8011ed0:	d8d9      	bhi.n	8011e86 <__gethex+0x352>
 8011ed2:	68a3      	ldr	r3, [r4, #8]
 8011ed4:	459b      	cmp	fp, r3
 8011ed6:	db17      	blt.n	8011f08 <__gethex+0x3d4>
 8011ed8:	6861      	ldr	r1, [r4, #4]
 8011eda:	9801      	ldr	r0, [sp, #4]
 8011edc:	3101      	adds	r1, #1
 8011ede:	f000 f90d 	bl	80120fc <_Balloc>
 8011ee2:	4681      	mov	r9, r0
 8011ee4:	b918      	cbnz	r0, 8011eee <__gethex+0x3ba>
 8011ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8011f50 <__gethex+0x41c>)
 8011ee8:	4602      	mov	r2, r0
 8011eea:	2184      	movs	r1, #132	@ 0x84
 8011eec:	e6c5      	b.n	8011c7a <__gethex+0x146>
 8011eee:	6922      	ldr	r2, [r4, #16]
 8011ef0:	3202      	adds	r2, #2
 8011ef2:	f104 010c 	add.w	r1, r4, #12
 8011ef6:	0092      	lsls	r2, r2, #2
 8011ef8:	300c      	adds	r0, #12
 8011efa:	f7fe fefd 	bl	8010cf8 <memcpy>
 8011efe:	4621      	mov	r1, r4
 8011f00:	9801      	ldr	r0, [sp, #4]
 8011f02:	f000 f93b 	bl	801217c <_Bfree>
 8011f06:	464c      	mov	r4, r9
 8011f08:	6923      	ldr	r3, [r4, #16]
 8011f0a:	1c5a      	adds	r2, r3, #1
 8011f0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011f10:	6122      	str	r2, [r4, #16]
 8011f12:	2201      	movs	r2, #1
 8011f14:	615a      	str	r2, [r3, #20]
 8011f16:	e7be      	b.n	8011e96 <__gethex+0x362>
 8011f18:	6922      	ldr	r2, [r4, #16]
 8011f1a:	455a      	cmp	r2, fp
 8011f1c:	dd0b      	ble.n	8011f36 <__gethex+0x402>
 8011f1e:	2101      	movs	r1, #1
 8011f20:	4620      	mov	r0, r4
 8011f22:	f7ff fd9f 	bl	8011a64 <rshift>
 8011f26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011f2a:	3701      	adds	r7, #1
 8011f2c:	42bb      	cmp	r3, r7
 8011f2e:	f6ff aee0 	blt.w	8011cf2 <__gethex+0x1be>
 8011f32:	2501      	movs	r5, #1
 8011f34:	e7c2      	b.n	8011ebc <__gethex+0x388>
 8011f36:	f016 061f 	ands.w	r6, r6, #31
 8011f3a:	d0fa      	beq.n	8011f32 <__gethex+0x3fe>
 8011f3c:	4453      	add	r3, sl
 8011f3e:	f1c6 0620 	rsb	r6, r6, #32
 8011f42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011f46:	f000 f9cb 	bl	80122e0 <__hi0bits>
 8011f4a:	42b0      	cmp	r0, r6
 8011f4c:	dbe7      	blt.n	8011f1e <__gethex+0x3ea>
 8011f4e:	e7f0      	b.n	8011f32 <__gethex+0x3fe>
 8011f50:	08016a14 	.word	0x08016a14

08011f54 <L_shift>:
 8011f54:	f1c2 0208 	rsb	r2, r2, #8
 8011f58:	0092      	lsls	r2, r2, #2
 8011f5a:	b570      	push	{r4, r5, r6, lr}
 8011f5c:	f1c2 0620 	rsb	r6, r2, #32
 8011f60:	6843      	ldr	r3, [r0, #4]
 8011f62:	6804      	ldr	r4, [r0, #0]
 8011f64:	fa03 f506 	lsl.w	r5, r3, r6
 8011f68:	432c      	orrs	r4, r5
 8011f6a:	40d3      	lsrs	r3, r2
 8011f6c:	6004      	str	r4, [r0, #0]
 8011f6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011f72:	4288      	cmp	r0, r1
 8011f74:	d3f4      	bcc.n	8011f60 <L_shift+0xc>
 8011f76:	bd70      	pop	{r4, r5, r6, pc}

08011f78 <__match>:
 8011f78:	b530      	push	{r4, r5, lr}
 8011f7a:	6803      	ldr	r3, [r0, #0]
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f82:	b914      	cbnz	r4, 8011f8a <__match+0x12>
 8011f84:	6003      	str	r3, [r0, #0]
 8011f86:	2001      	movs	r0, #1
 8011f88:	bd30      	pop	{r4, r5, pc}
 8011f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f8e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011f92:	2d19      	cmp	r5, #25
 8011f94:	bf98      	it	ls
 8011f96:	3220      	addls	r2, #32
 8011f98:	42a2      	cmp	r2, r4
 8011f9a:	d0f0      	beq.n	8011f7e <__match+0x6>
 8011f9c:	2000      	movs	r0, #0
 8011f9e:	e7f3      	b.n	8011f88 <__match+0x10>

08011fa0 <__hexnan>:
 8011fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa4:	680b      	ldr	r3, [r1, #0]
 8011fa6:	6801      	ldr	r1, [r0, #0]
 8011fa8:	115e      	asrs	r6, r3, #5
 8011faa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011fae:	f013 031f 	ands.w	r3, r3, #31
 8011fb2:	b087      	sub	sp, #28
 8011fb4:	bf18      	it	ne
 8011fb6:	3604      	addne	r6, #4
 8011fb8:	2500      	movs	r5, #0
 8011fba:	1f37      	subs	r7, r6, #4
 8011fbc:	4682      	mov	sl, r0
 8011fbe:	4690      	mov	r8, r2
 8011fc0:	9301      	str	r3, [sp, #4]
 8011fc2:	f846 5c04 	str.w	r5, [r6, #-4]
 8011fc6:	46b9      	mov	r9, r7
 8011fc8:	463c      	mov	r4, r7
 8011fca:	9502      	str	r5, [sp, #8]
 8011fcc:	46ab      	mov	fp, r5
 8011fce:	784a      	ldrb	r2, [r1, #1]
 8011fd0:	1c4b      	adds	r3, r1, #1
 8011fd2:	9303      	str	r3, [sp, #12]
 8011fd4:	b342      	cbz	r2, 8012028 <__hexnan+0x88>
 8011fd6:	4610      	mov	r0, r2
 8011fd8:	9105      	str	r1, [sp, #20]
 8011fda:	9204      	str	r2, [sp, #16]
 8011fdc:	f7ff fd94 	bl	8011b08 <__hexdig_fun>
 8011fe0:	2800      	cmp	r0, #0
 8011fe2:	d151      	bne.n	8012088 <__hexnan+0xe8>
 8011fe4:	9a04      	ldr	r2, [sp, #16]
 8011fe6:	9905      	ldr	r1, [sp, #20]
 8011fe8:	2a20      	cmp	r2, #32
 8011fea:	d818      	bhi.n	801201e <__hexnan+0x7e>
 8011fec:	9b02      	ldr	r3, [sp, #8]
 8011fee:	459b      	cmp	fp, r3
 8011ff0:	dd13      	ble.n	801201a <__hexnan+0x7a>
 8011ff2:	454c      	cmp	r4, r9
 8011ff4:	d206      	bcs.n	8012004 <__hexnan+0x64>
 8011ff6:	2d07      	cmp	r5, #7
 8011ff8:	dc04      	bgt.n	8012004 <__hexnan+0x64>
 8011ffa:	462a      	mov	r2, r5
 8011ffc:	4649      	mov	r1, r9
 8011ffe:	4620      	mov	r0, r4
 8012000:	f7ff ffa8 	bl	8011f54 <L_shift>
 8012004:	4544      	cmp	r4, r8
 8012006:	d952      	bls.n	80120ae <__hexnan+0x10e>
 8012008:	2300      	movs	r3, #0
 801200a:	f1a4 0904 	sub.w	r9, r4, #4
 801200e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012012:	f8cd b008 	str.w	fp, [sp, #8]
 8012016:	464c      	mov	r4, r9
 8012018:	461d      	mov	r5, r3
 801201a:	9903      	ldr	r1, [sp, #12]
 801201c:	e7d7      	b.n	8011fce <__hexnan+0x2e>
 801201e:	2a29      	cmp	r2, #41	@ 0x29
 8012020:	d157      	bne.n	80120d2 <__hexnan+0x132>
 8012022:	3102      	adds	r1, #2
 8012024:	f8ca 1000 	str.w	r1, [sl]
 8012028:	f1bb 0f00 	cmp.w	fp, #0
 801202c:	d051      	beq.n	80120d2 <__hexnan+0x132>
 801202e:	454c      	cmp	r4, r9
 8012030:	d206      	bcs.n	8012040 <__hexnan+0xa0>
 8012032:	2d07      	cmp	r5, #7
 8012034:	dc04      	bgt.n	8012040 <__hexnan+0xa0>
 8012036:	462a      	mov	r2, r5
 8012038:	4649      	mov	r1, r9
 801203a:	4620      	mov	r0, r4
 801203c:	f7ff ff8a 	bl	8011f54 <L_shift>
 8012040:	4544      	cmp	r4, r8
 8012042:	d936      	bls.n	80120b2 <__hexnan+0x112>
 8012044:	f1a8 0204 	sub.w	r2, r8, #4
 8012048:	4623      	mov	r3, r4
 801204a:	f853 1b04 	ldr.w	r1, [r3], #4
 801204e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012052:	429f      	cmp	r7, r3
 8012054:	d2f9      	bcs.n	801204a <__hexnan+0xaa>
 8012056:	1b3b      	subs	r3, r7, r4
 8012058:	f023 0303 	bic.w	r3, r3, #3
 801205c:	3304      	adds	r3, #4
 801205e:	3401      	adds	r4, #1
 8012060:	3e03      	subs	r6, #3
 8012062:	42b4      	cmp	r4, r6
 8012064:	bf88      	it	hi
 8012066:	2304      	movhi	r3, #4
 8012068:	4443      	add	r3, r8
 801206a:	2200      	movs	r2, #0
 801206c:	f843 2b04 	str.w	r2, [r3], #4
 8012070:	429f      	cmp	r7, r3
 8012072:	d2fb      	bcs.n	801206c <__hexnan+0xcc>
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	b91b      	cbnz	r3, 8012080 <__hexnan+0xe0>
 8012078:	4547      	cmp	r7, r8
 801207a:	d128      	bne.n	80120ce <__hexnan+0x12e>
 801207c:	2301      	movs	r3, #1
 801207e:	603b      	str	r3, [r7, #0]
 8012080:	2005      	movs	r0, #5
 8012082:	b007      	add	sp, #28
 8012084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012088:	3501      	adds	r5, #1
 801208a:	2d08      	cmp	r5, #8
 801208c:	f10b 0b01 	add.w	fp, fp, #1
 8012090:	dd06      	ble.n	80120a0 <__hexnan+0x100>
 8012092:	4544      	cmp	r4, r8
 8012094:	d9c1      	bls.n	801201a <__hexnan+0x7a>
 8012096:	2300      	movs	r3, #0
 8012098:	f844 3c04 	str.w	r3, [r4, #-4]
 801209c:	2501      	movs	r5, #1
 801209e:	3c04      	subs	r4, #4
 80120a0:	6822      	ldr	r2, [r4, #0]
 80120a2:	f000 000f 	and.w	r0, r0, #15
 80120a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80120aa:	6020      	str	r0, [r4, #0]
 80120ac:	e7b5      	b.n	801201a <__hexnan+0x7a>
 80120ae:	2508      	movs	r5, #8
 80120b0:	e7b3      	b.n	801201a <__hexnan+0x7a>
 80120b2:	9b01      	ldr	r3, [sp, #4]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d0dd      	beq.n	8012074 <__hexnan+0xd4>
 80120b8:	f1c3 0320 	rsb	r3, r3, #32
 80120bc:	f04f 32ff 	mov.w	r2, #4294967295
 80120c0:	40da      	lsrs	r2, r3
 80120c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80120c6:	4013      	ands	r3, r2
 80120c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80120cc:	e7d2      	b.n	8012074 <__hexnan+0xd4>
 80120ce:	3f04      	subs	r7, #4
 80120d0:	e7d0      	b.n	8012074 <__hexnan+0xd4>
 80120d2:	2004      	movs	r0, #4
 80120d4:	e7d5      	b.n	8012082 <__hexnan+0xe2>

080120d6 <__ascii_mbtowc>:
 80120d6:	b082      	sub	sp, #8
 80120d8:	b901      	cbnz	r1, 80120dc <__ascii_mbtowc+0x6>
 80120da:	a901      	add	r1, sp, #4
 80120dc:	b142      	cbz	r2, 80120f0 <__ascii_mbtowc+0x1a>
 80120de:	b14b      	cbz	r3, 80120f4 <__ascii_mbtowc+0x1e>
 80120e0:	7813      	ldrb	r3, [r2, #0]
 80120e2:	600b      	str	r3, [r1, #0]
 80120e4:	7812      	ldrb	r2, [r2, #0]
 80120e6:	1e10      	subs	r0, r2, #0
 80120e8:	bf18      	it	ne
 80120ea:	2001      	movne	r0, #1
 80120ec:	b002      	add	sp, #8
 80120ee:	4770      	bx	lr
 80120f0:	4610      	mov	r0, r2
 80120f2:	e7fb      	b.n	80120ec <__ascii_mbtowc+0x16>
 80120f4:	f06f 0001 	mvn.w	r0, #1
 80120f8:	e7f8      	b.n	80120ec <__ascii_mbtowc+0x16>
	...

080120fc <_Balloc>:
 80120fc:	b570      	push	{r4, r5, r6, lr}
 80120fe:	69c6      	ldr	r6, [r0, #28]
 8012100:	4604      	mov	r4, r0
 8012102:	460d      	mov	r5, r1
 8012104:	b976      	cbnz	r6, 8012124 <_Balloc+0x28>
 8012106:	2010      	movs	r0, #16
 8012108:	f7fc fc12 	bl	800e930 <malloc>
 801210c:	4602      	mov	r2, r0
 801210e:	61e0      	str	r0, [r4, #28]
 8012110:	b920      	cbnz	r0, 801211c <_Balloc+0x20>
 8012112:	4b18      	ldr	r3, [pc, #96]	@ (8012174 <_Balloc+0x78>)
 8012114:	4818      	ldr	r0, [pc, #96]	@ (8012178 <_Balloc+0x7c>)
 8012116:	216b      	movs	r1, #107	@ 0x6b
 8012118:	f001 fc20 	bl	801395c <__assert_func>
 801211c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012120:	6006      	str	r6, [r0, #0]
 8012122:	60c6      	str	r6, [r0, #12]
 8012124:	69e6      	ldr	r6, [r4, #28]
 8012126:	68f3      	ldr	r3, [r6, #12]
 8012128:	b183      	cbz	r3, 801214c <_Balloc+0x50>
 801212a:	69e3      	ldr	r3, [r4, #28]
 801212c:	68db      	ldr	r3, [r3, #12]
 801212e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012132:	b9b8      	cbnz	r0, 8012164 <_Balloc+0x68>
 8012134:	2101      	movs	r1, #1
 8012136:	fa01 f605 	lsl.w	r6, r1, r5
 801213a:	1d72      	adds	r2, r6, #5
 801213c:	0092      	lsls	r2, r2, #2
 801213e:	4620      	mov	r0, r4
 8012140:	f001 fc2a 	bl	8013998 <_calloc_r>
 8012144:	b160      	cbz	r0, 8012160 <_Balloc+0x64>
 8012146:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801214a:	e00e      	b.n	801216a <_Balloc+0x6e>
 801214c:	2221      	movs	r2, #33	@ 0x21
 801214e:	2104      	movs	r1, #4
 8012150:	4620      	mov	r0, r4
 8012152:	f001 fc21 	bl	8013998 <_calloc_r>
 8012156:	69e3      	ldr	r3, [r4, #28]
 8012158:	60f0      	str	r0, [r6, #12]
 801215a:	68db      	ldr	r3, [r3, #12]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d1e4      	bne.n	801212a <_Balloc+0x2e>
 8012160:	2000      	movs	r0, #0
 8012162:	bd70      	pop	{r4, r5, r6, pc}
 8012164:	6802      	ldr	r2, [r0, #0]
 8012166:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801216a:	2300      	movs	r3, #0
 801216c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012170:	e7f7      	b.n	8012162 <_Balloc+0x66>
 8012172:	bf00      	nop
 8012174:	080169a5 	.word	0x080169a5
 8012178:	08016a85 	.word	0x08016a85

0801217c <_Bfree>:
 801217c:	b570      	push	{r4, r5, r6, lr}
 801217e:	69c6      	ldr	r6, [r0, #28]
 8012180:	4605      	mov	r5, r0
 8012182:	460c      	mov	r4, r1
 8012184:	b976      	cbnz	r6, 80121a4 <_Bfree+0x28>
 8012186:	2010      	movs	r0, #16
 8012188:	f7fc fbd2 	bl	800e930 <malloc>
 801218c:	4602      	mov	r2, r0
 801218e:	61e8      	str	r0, [r5, #28]
 8012190:	b920      	cbnz	r0, 801219c <_Bfree+0x20>
 8012192:	4b09      	ldr	r3, [pc, #36]	@ (80121b8 <_Bfree+0x3c>)
 8012194:	4809      	ldr	r0, [pc, #36]	@ (80121bc <_Bfree+0x40>)
 8012196:	218f      	movs	r1, #143	@ 0x8f
 8012198:	f001 fbe0 	bl	801395c <__assert_func>
 801219c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80121a0:	6006      	str	r6, [r0, #0]
 80121a2:	60c6      	str	r6, [r0, #12]
 80121a4:	b13c      	cbz	r4, 80121b6 <_Bfree+0x3a>
 80121a6:	69eb      	ldr	r3, [r5, #28]
 80121a8:	6862      	ldr	r2, [r4, #4]
 80121aa:	68db      	ldr	r3, [r3, #12]
 80121ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80121b0:	6021      	str	r1, [r4, #0]
 80121b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80121b6:	bd70      	pop	{r4, r5, r6, pc}
 80121b8:	080169a5 	.word	0x080169a5
 80121bc:	08016a85 	.word	0x08016a85

080121c0 <__multadd>:
 80121c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121c4:	690d      	ldr	r5, [r1, #16]
 80121c6:	4607      	mov	r7, r0
 80121c8:	460c      	mov	r4, r1
 80121ca:	461e      	mov	r6, r3
 80121cc:	f101 0c14 	add.w	ip, r1, #20
 80121d0:	2000      	movs	r0, #0
 80121d2:	f8dc 3000 	ldr.w	r3, [ip]
 80121d6:	b299      	uxth	r1, r3
 80121d8:	fb02 6101 	mla	r1, r2, r1, r6
 80121dc:	0c1e      	lsrs	r6, r3, #16
 80121de:	0c0b      	lsrs	r3, r1, #16
 80121e0:	fb02 3306 	mla	r3, r2, r6, r3
 80121e4:	b289      	uxth	r1, r1
 80121e6:	3001      	adds	r0, #1
 80121e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80121ec:	4285      	cmp	r5, r0
 80121ee:	f84c 1b04 	str.w	r1, [ip], #4
 80121f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80121f6:	dcec      	bgt.n	80121d2 <__multadd+0x12>
 80121f8:	b30e      	cbz	r6, 801223e <__multadd+0x7e>
 80121fa:	68a3      	ldr	r3, [r4, #8]
 80121fc:	42ab      	cmp	r3, r5
 80121fe:	dc19      	bgt.n	8012234 <__multadd+0x74>
 8012200:	6861      	ldr	r1, [r4, #4]
 8012202:	4638      	mov	r0, r7
 8012204:	3101      	adds	r1, #1
 8012206:	f7ff ff79 	bl	80120fc <_Balloc>
 801220a:	4680      	mov	r8, r0
 801220c:	b928      	cbnz	r0, 801221a <__multadd+0x5a>
 801220e:	4602      	mov	r2, r0
 8012210:	4b0c      	ldr	r3, [pc, #48]	@ (8012244 <__multadd+0x84>)
 8012212:	480d      	ldr	r0, [pc, #52]	@ (8012248 <__multadd+0x88>)
 8012214:	21ba      	movs	r1, #186	@ 0xba
 8012216:	f001 fba1 	bl	801395c <__assert_func>
 801221a:	6922      	ldr	r2, [r4, #16]
 801221c:	3202      	adds	r2, #2
 801221e:	f104 010c 	add.w	r1, r4, #12
 8012222:	0092      	lsls	r2, r2, #2
 8012224:	300c      	adds	r0, #12
 8012226:	f7fe fd67 	bl	8010cf8 <memcpy>
 801222a:	4621      	mov	r1, r4
 801222c:	4638      	mov	r0, r7
 801222e:	f7ff ffa5 	bl	801217c <_Bfree>
 8012232:	4644      	mov	r4, r8
 8012234:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012238:	3501      	adds	r5, #1
 801223a:	615e      	str	r6, [r3, #20]
 801223c:	6125      	str	r5, [r4, #16]
 801223e:	4620      	mov	r0, r4
 8012240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012244:	08016a14 	.word	0x08016a14
 8012248:	08016a85 	.word	0x08016a85

0801224c <__s2b>:
 801224c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012250:	460c      	mov	r4, r1
 8012252:	4615      	mov	r5, r2
 8012254:	461f      	mov	r7, r3
 8012256:	2209      	movs	r2, #9
 8012258:	3308      	adds	r3, #8
 801225a:	4606      	mov	r6, r0
 801225c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012260:	2100      	movs	r1, #0
 8012262:	2201      	movs	r2, #1
 8012264:	429a      	cmp	r2, r3
 8012266:	db09      	blt.n	801227c <__s2b+0x30>
 8012268:	4630      	mov	r0, r6
 801226a:	f7ff ff47 	bl	80120fc <_Balloc>
 801226e:	b940      	cbnz	r0, 8012282 <__s2b+0x36>
 8012270:	4602      	mov	r2, r0
 8012272:	4b19      	ldr	r3, [pc, #100]	@ (80122d8 <__s2b+0x8c>)
 8012274:	4819      	ldr	r0, [pc, #100]	@ (80122dc <__s2b+0x90>)
 8012276:	21d3      	movs	r1, #211	@ 0xd3
 8012278:	f001 fb70 	bl	801395c <__assert_func>
 801227c:	0052      	lsls	r2, r2, #1
 801227e:	3101      	adds	r1, #1
 8012280:	e7f0      	b.n	8012264 <__s2b+0x18>
 8012282:	9b08      	ldr	r3, [sp, #32]
 8012284:	6143      	str	r3, [r0, #20]
 8012286:	2d09      	cmp	r5, #9
 8012288:	f04f 0301 	mov.w	r3, #1
 801228c:	6103      	str	r3, [r0, #16]
 801228e:	dd16      	ble.n	80122be <__s2b+0x72>
 8012290:	f104 0909 	add.w	r9, r4, #9
 8012294:	46c8      	mov	r8, r9
 8012296:	442c      	add	r4, r5
 8012298:	f818 3b01 	ldrb.w	r3, [r8], #1
 801229c:	4601      	mov	r1, r0
 801229e:	3b30      	subs	r3, #48	@ 0x30
 80122a0:	220a      	movs	r2, #10
 80122a2:	4630      	mov	r0, r6
 80122a4:	f7ff ff8c 	bl	80121c0 <__multadd>
 80122a8:	45a0      	cmp	r8, r4
 80122aa:	d1f5      	bne.n	8012298 <__s2b+0x4c>
 80122ac:	f1a5 0408 	sub.w	r4, r5, #8
 80122b0:	444c      	add	r4, r9
 80122b2:	1b2d      	subs	r5, r5, r4
 80122b4:	1963      	adds	r3, r4, r5
 80122b6:	42bb      	cmp	r3, r7
 80122b8:	db04      	blt.n	80122c4 <__s2b+0x78>
 80122ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122be:	340a      	adds	r4, #10
 80122c0:	2509      	movs	r5, #9
 80122c2:	e7f6      	b.n	80122b2 <__s2b+0x66>
 80122c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80122c8:	4601      	mov	r1, r0
 80122ca:	3b30      	subs	r3, #48	@ 0x30
 80122cc:	220a      	movs	r2, #10
 80122ce:	4630      	mov	r0, r6
 80122d0:	f7ff ff76 	bl	80121c0 <__multadd>
 80122d4:	e7ee      	b.n	80122b4 <__s2b+0x68>
 80122d6:	bf00      	nop
 80122d8:	08016a14 	.word	0x08016a14
 80122dc:	08016a85 	.word	0x08016a85

080122e0 <__hi0bits>:
 80122e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80122e4:	4603      	mov	r3, r0
 80122e6:	bf36      	itet	cc
 80122e8:	0403      	lslcc	r3, r0, #16
 80122ea:	2000      	movcs	r0, #0
 80122ec:	2010      	movcc	r0, #16
 80122ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80122f2:	bf3c      	itt	cc
 80122f4:	021b      	lslcc	r3, r3, #8
 80122f6:	3008      	addcc	r0, #8
 80122f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80122fc:	bf3c      	itt	cc
 80122fe:	011b      	lslcc	r3, r3, #4
 8012300:	3004      	addcc	r0, #4
 8012302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012306:	bf3c      	itt	cc
 8012308:	009b      	lslcc	r3, r3, #2
 801230a:	3002      	addcc	r0, #2
 801230c:	2b00      	cmp	r3, #0
 801230e:	db05      	blt.n	801231c <__hi0bits+0x3c>
 8012310:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012314:	f100 0001 	add.w	r0, r0, #1
 8012318:	bf08      	it	eq
 801231a:	2020      	moveq	r0, #32
 801231c:	4770      	bx	lr

0801231e <__lo0bits>:
 801231e:	6803      	ldr	r3, [r0, #0]
 8012320:	4602      	mov	r2, r0
 8012322:	f013 0007 	ands.w	r0, r3, #7
 8012326:	d00b      	beq.n	8012340 <__lo0bits+0x22>
 8012328:	07d9      	lsls	r1, r3, #31
 801232a:	d421      	bmi.n	8012370 <__lo0bits+0x52>
 801232c:	0798      	lsls	r0, r3, #30
 801232e:	bf49      	itett	mi
 8012330:	085b      	lsrmi	r3, r3, #1
 8012332:	089b      	lsrpl	r3, r3, #2
 8012334:	2001      	movmi	r0, #1
 8012336:	6013      	strmi	r3, [r2, #0]
 8012338:	bf5c      	itt	pl
 801233a:	6013      	strpl	r3, [r2, #0]
 801233c:	2002      	movpl	r0, #2
 801233e:	4770      	bx	lr
 8012340:	b299      	uxth	r1, r3
 8012342:	b909      	cbnz	r1, 8012348 <__lo0bits+0x2a>
 8012344:	0c1b      	lsrs	r3, r3, #16
 8012346:	2010      	movs	r0, #16
 8012348:	b2d9      	uxtb	r1, r3
 801234a:	b909      	cbnz	r1, 8012350 <__lo0bits+0x32>
 801234c:	3008      	adds	r0, #8
 801234e:	0a1b      	lsrs	r3, r3, #8
 8012350:	0719      	lsls	r1, r3, #28
 8012352:	bf04      	itt	eq
 8012354:	091b      	lsreq	r3, r3, #4
 8012356:	3004      	addeq	r0, #4
 8012358:	0799      	lsls	r1, r3, #30
 801235a:	bf04      	itt	eq
 801235c:	089b      	lsreq	r3, r3, #2
 801235e:	3002      	addeq	r0, #2
 8012360:	07d9      	lsls	r1, r3, #31
 8012362:	d403      	bmi.n	801236c <__lo0bits+0x4e>
 8012364:	085b      	lsrs	r3, r3, #1
 8012366:	f100 0001 	add.w	r0, r0, #1
 801236a:	d003      	beq.n	8012374 <__lo0bits+0x56>
 801236c:	6013      	str	r3, [r2, #0]
 801236e:	4770      	bx	lr
 8012370:	2000      	movs	r0, #0
 8012372:	4770      	bx	lr
 8012374:	2020      	movs	r0, #32
 8012376:	4770      	bx	lr

08012378 <__i2b>:
 8012378:	b510      	push	{r4, lr}
 801237a:	460c      	mov	r4, r1
 801237c:	2101      	movs	r1, #1
 801237e:	f7ff febd 	bl	80120fc <_Balloc>
 8012382:	4602      	mov	r2, r0
 8012384:	b928      	cbnz	r0, 8012392 <__i2b+0x1a>
 8012386:	4b05      	ldr	r3, [pc, #20]	@ (801239c <__i2b+0x24>)
 8012388:	4805      	ldr	r0, [pc, #20]	@ (80123a0 <__i2b+0x28>)
 801238a:	f240 1145 	movw	r1, #325	@ 0x145
 801238e:	f001 fae5 	bl	801395c <__assert_func>
 8012392:	2301      	movs	r3, #1
 8012394:	6144      	str	r4, [r0, #20]
 8012396:	6103      	str	r3, [r0, #16]
 8012398:	bd10      	pop	{r4, pc}
 801239a:	bf00      	nop
 801239c:	08016a14 	.word	0x08016a14
 80123a0:	08016a85 	.word	0x08016a85

080123a4 <__multiply>:
 80123a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123a8:	4614      	mov	r4, r2
 80123aa:	690a      	ldr	r2, [r1, #16]
 80123ac:	6923      	ldr	r3, [r4, #16]
 80123ae:	429a      	cmp	r2, r3
 80123b0:	bfa8      	it	ge
 80123b2:	4623      	movge	r3, r4
 80123b4:	460f      	mov	r7, r1
 80123b6:	bfa4      	itt	ge
 80123b8:	460c      	movge	r4, r1
 80123ba:	461f      	movge	r7, r3
 80123bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80123c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80123c4:	68a3      	ldr	r3, [r4, #8]
 80123c6:	6861      	ldr	r1, [r4, #4]
 80123c8:	eb0a 0609 	add.w	r6, sl, r9
 80123cc:	42b3      	cmp	r3, r6
 80123ce:	b085      	sub	sp, #20
 80123d0:	bfb8      	it	lt
 80123d2:	3101      	addlt	r1, #1
 80123d4:	f7ff fe92 	bl	80120fc <_Balloc>
 80123d8:	b930      	cbnz	r0, 80123e8 <__multiply+0x44>
 80123da:	4602      	mov	r2, r0
 80123dc:	4b44      	ldr	r3, [pc, #272]	@ (80124f0 <__multiply+0x14c>)
 80123de:	4845      	ldr	r0, [pc, #276]	@ (80124f4 <__multiply+0x150>)
 80123e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80123e4:	f001 faba 	bl	801395c <__assert_func>
 80123e8:	f100 0514 	add.w	r5, r0, #20
 80123ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80123f0:	462b      	mov	r3, r5
 80123f2:	2200      	movs	r2, #0
 80123f4:	4543      	cmp	r3, r8
 80123f6:	d321      	bcc.n	801243c <__multiply+0x98>
 80123f8:	f107 0114 	add.w	r1, r7, #20
 80123fc:	f104 0214 	add.w	r2, r4, #20
 8012400:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012404:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012408:	9302      	str	r3, [sp, #8]
 801240a:	1b13      	subs	r3, r2, r4
 801240c:	3b15      	subs	r3, #21
 801240e:	f023 0303 	bic.w	r3, r3, #3
 8012412:	3304      	adds	r3, #4
 8012414:	f104 0715 	add.w	r7, r4, #21
 8012418:	42ba      	cmp	r2, r7
 801241a:	bf38      	it	cc
 801241c:	2304      	movcc	r3, #4
 801241e:	9301      	str	r3, [sp, #4]
 8012420:	9b02      	ldr	r3, [sp, #8]
 8012422:	9103      	str	r1, [sp, #12]
 8012424:	428b      	cmp	r3, r1
 8012426:	d80c      	bhi.n	8012442 <__multiply+0x9e>
 8012428:	2e00      	cmp	r6, #0
 801242a:	dd03      	ble.n	8012434 <__multiply+0x90>
 801242c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012430:	2b00      	cmp	r3, #0
 8012432:	d05b      	beq.n	80124ec <__multiply+0x148>
 8012434:	6106      	str	r6, [r0, #16]
 8012436:	b005      	add	sp, #20
 8012438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801243c:	f843 2b04 	str.w	r2, [r3], #4
 8012440:	e7d8      	b.n	80123f4 <__multiply+0x50>
 8012442:	f8b1 a000 	ldrh.w	sl, [r1]
 8012446:	f1ba 0f00 	cmp.w	sl, #0
 801244a:	d024      	beq.n	8012496 <__multiply+0xf2>
 801244c:	f104 0e14 	add.w	lr, r4, #20
 8012450:	46a9      	mov	r9, r5
 8012452:	f04f 0c00 	mov.w	ip, #0
 8012456:	f85e 7b04 	ldr.w	r7, [lr], #4
 801245a:	f8d9 3000 	ldr.w	r3, [r9]
 801245e:	fa1f fb87 	uxth.w	fp, r7
 8012462:	b29b      	uxth	r3, r3
 8012464:	fb0a 330b 	mla	r3, sl, fp, r3
 8012468:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801246c:	f8d9 7000 	ldr.w	r7, [r9]
 8012470:	4463      	add	r3, ip
 8012472:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012476:	fb0a c70b 	mla	r7, sl, fp, ip
 801247a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801247e:	b29b      	uxth	r3, r3
 8012480:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012484:	4572      	cmp	r2, lr
 8012486:	f849 3b04 	str.w	r3, [r9], #4
 801248a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801248e:	d8e2      	bhi.n	8012456 <__multiply+0xb2>
 8012490:	9b01      	ldr	r3, [sp, #4]
 8012492:	f845 c003 	str.w	ip, [r5, r3]
 8012496:	9b03      	ldr	r3, [sp, #12]
 8012498:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801249c:	3104      	adds	r1, #4
 801249e:	f1b9 0f00 	cmp.w	r9, #0
 80124a2:	d021      	beq.n	80124e8 <__multiply+0x144>
 80124a4:	682b      	ldr	r3, [r5, #0]
 80124a6:	f104 0c14 	add.w	ip, r4, #20
 80124aa:	46ae      	mov	lr, r5
 80124ac:	f04f 0a00 	mov.w	sl, #0
 80124b0:	f8bc b000 	ldrh.w	fp, [ip]
 80124b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80124b8:	fb09 770b 	mla	r7, r9, fp, r7
 80124bc:	4457      	add	r7, sl
 80124be:	b29b      	uxth	r3, r3
 80124c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80124c4:	f84e 3b04 	str.w	r3, [lr], #4
 80124c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80124cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80124d0:	f8be 3000 	ldrh.w	r3, [lr]
 80124d4:	fb09 330a 	mla	r3, r9, sl, r3
 80124d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80124dc:	4562      	cmp	r2, ip
 80124de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80124e2:	d8e5      	bhi.n	80124b0 <__multiply+0x10c>
 80124e4:	9f01      	ldr	r7, [sp, #4]
 80124e6:	51eb      	str	r3, [r5, r7]
 80124e8:	3504      	adds	r5, #4
 80124ea:	e799      	b.n	8012420 <__multiply+0x7c>
 80124ec:	3e01      	subs	r6, #1
 80124ee:	e79b      	b.n	8012428 <__multiply+0x84>
 80124f0:	08016a14 	.word	0x08016a14
 80124f4:	08016a85 	.word	0x08016a85

080124f8 <__pow5mult>:
 80124f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124fc:	4615      	mov	r5, r2
 80124fe:	f012 0203 	ands.w	r2, r2, #3
 8012502:	4607      	mov	r7, r0
 8012504:	460e      	mov	r6, r1
 8012506:	d007      	beq.n	8012518 <__pow5mult+0x20>
 8012508:	4c25      	ldr	r4, [pc, #148]	@ (80125a0 <__pow5mult+0xa8>)
 801250a:	3a01      	subs	r2, #1
 801250c:	2300      	movs	r3, #0
 801250e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012512:	f7ff fe55 	bl	80121c0 <__multadd>
 8012516:	4606      	mov	r6, r0
 8012518:	10ad      	asrs	r5, r5, #2
 801251a:	d03d      	beq.n	8012598 <__pow5mult+0xa0>
 801251c:	69fc      	ldr	r4, [r7, #28]
 801251e:	b97c      	cbnz	r4, 8012540 <__pow5mult+0x48>
 8012520:	2010      	movs	r0, #16
 8012522:	f7fc fa05 	bl	800e930 <malloc>
 8012526:	4602      	mov	r2, r0
 8012528:	61f8      	str	r0, [r7, #28]
 801252a:	b928      	cbnz	r0, 8012538 <__pow5mult+0x40>
 801252c:	4b1d      	ldr	r3, [pc, #116]	@ (80125a4 <__pow5mult+0xac>)
 801252e:	481e      	ldr	r0, [pc, #120]	@ (80125a8 <__pow5mult+0xb0>)
 8012530:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012534:	f001 fa12 	bl	801395c <__assert_func>
 8012538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801253c:	6004      	str	r4, [r0, #0]
 801253e:	60c4      	str	r4, [r0, #12]
 8012540:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012548:	b94c      	cbnz	r4, 801255e <__pow5mult+0x66>
 801254a:	f240 2171 	movw	r1, #625	@ 0x271
 801254e:	4638      	mov	r0, r7
 8012550:	f7ff ff12 	bl	8012378 <__i2b>
 8012554:	2300      	movs	r3, #0
 8012556:	f8c8 0008 	str.w	r0, [r8, #8]
 801255a:	4604      	mov	r4, r0
 801255c:	6003      	str	r3, [r0, #0]
 801255e:	f04f 0900 	mov.w	r9, #0
 8012562:	07eb      	lsls	r3, r5, #31
 8012564:	d50a      	bpl.n	801257c <__pow5mult+0x84>
 8012566:	4631      	mov	r1, r6
 8012568:	4622      	mov	r2, r4
 801256a:	4638      	mov	r0, r7
 801256c:	f7ff ff1a 	bl	80123a4 <__multiply>
 8012570:	4631      	mov	r1, r6
 8012572:	4680      	mov	r8, r0
 8012574:	4638      	mov	r0, r7
 8012576:	f7ff fe01 	bl	801217c <_Bfree>
 801257a:	4646      	mov	r6, r8
 801257c:	106d      	asrs	r5, r5, #1
 801257e:	d00b      	beq.n	8012598 <__pow5mult+0xa0>
 8012580:	6820      	ldr	r0, [r4, #0]
 8012582:	b938      	cbnz	r0, 8012594 <__pow5mult+0x9c>
 8012584:	4622      	mov	r2, r4
 8012586:	4621      	mov	r1, r4
 8012588:	4638      	mov	r0, r7
 801258a:	f7ff ff0b 	bl	80123a4 <__multiply>
 801258e:	6020      	str	r0, [r4, #0]
 8012590:	f8c0 9000 	str.w	r9, [r0]
 8012594:	4604      	mov	r4, r0
 8012596:	e7e4      	b.n	8012562 <__pow5mult+0x6a>
 8012598:	4630      	mov	r0, r6
 801259a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801259e:	bf00      	nop
 80125a0:	08016ae0 	.word	0x08016ae0
 80125a4:	080169a5 	.word	0x080169a5
 80125a8:	08016a85 	.word	0x08016a85

080125ac <__lshift>:
 80125ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125b0:	460c      	mov	r4, r1
 80125b2:	6849      	ldr	r1, [r1, #4]
 80125b4:	6923      	ldr	r3, [r4, #16]
 80125b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80125ba:	68a3      	ldr	r3, [r4, #8]
 80125bc:	4607      	mov	r7, r0
 80125be:	4691      	mov	r9, r2
 80125c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80125c4:	f108 0601 	add.w	r6, r8, #1
 80125c8:	42b3      	cmp	r3, r6
 80125ca:	db0b      	blt.n	80125e4 <__lshift+0x38>
 80125cc:	4638      	mov	r0, r7
 80125ce:	f7ff fd95 	bl	80120fc <_Balloc>
 80125d2:	4605      	mov	r5, r0
 80125d4:	b948      	cbnz	r0, 80125ea <__lshift+0x3e>
 80125d6:	4602      	mov	r2, r0
 80125d8:	4b28      	ldr	r3, [pc, #160]	@ (801267c <__lshift+0xd0>)
 80125da:	4829      	ldr	r0, [pc, #164]	@ (8012680 <__lshift+0xd4>)
 80125dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80125e0:	f001 f9bc 	bl	801395c <__assert_func>
 80125e4:	3101      	adds	r1, #1
 80125e6:	005b      	lsls	r3, r3, #1
 80125e8:	e7ee      	b.n	80125c8 <__lshift+0x1c>
 80125ea:	2300      	movs	r3, #0
 80125ec:	f100 0114 	add.w	r1, r0, #20
 80125f0:	f100 0210 	add.w	r2, r0, #16
 80125f4:	4618      	mov	r0, r3
 80125f6:	4553      	cmp	r3, sl
 80125f8:	db33      	blt.n	8012662 <__lshift+0xb6>
 80125fa:	6920      	ldr	r0, [r4, #16]
 80125fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012600:	f104 0314 	add.w	r3, r4, #20
 8012604:	f019 091f 	ands.w	r9, r9, #31
 8012608:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801260c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012610:	d02b      	beq.n	801266a <__lshift+0xbe>
 8012612:	f1c9 0e20 	rsb	lr, r9, #32
 8012616:	468a      	mov	sl, r1
 8012618:	2200      	movs	r2, #0
 801261a:	6818      	ldr	r0, [r3, #0]
 801261c:	fa00 f009 	lsl.w	r0, r0, r9
 8012620:	4310      	orrs	r0, r2
 8012622:	f84a 0b04 	str.w	r0, [sl], #4
 8012626:	f853 2b04 	ldr.w	r2, [r3], #4
 801262a:	459c      	cmp	ip, r3
 801262c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012630:	d8f3      	bhi.n	801261a <__lshift+0x6e>
 8012632:	ebac 0304 	sub.w	r3, ip, r4
 8012636:	3b15      	subs	r3, #21
 8012638:	f023 0303 	bic.w	r3, r3, #3
 801263c:	3304      	adds	r3, #4
 801263e:	f104 0015 	add.w	r0, r4, #21
 8012642:	4584      	cmp	ip, r0
 8012644:	bf38      	it	cc
 8012646:	2304      	movcc	r3, #4
 8012648:	50ca      	str	r2, [r1, r3]
 801264a:	b10a      	cbz	r2, 8012650 <__lshift+0xa4>
 801264c:	f108 0602 	add.w	r6, r8, #2
 8012650:	3e01      	subs	r6, #1
 8012652:	4638      	mov	r0, r7
 8012654:	612e      	str	r6, [r5, #16]
 8012656:	4621      	mov	r1, r4
 8012658:	f7ff fd90 	bl	801217c <_Bfree>
 801265c:	4628      	mov	r0, r5
 801265e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012662:	f842 0f04 	str.w	r0, [r2, #4]!
 8012666:	3301      	adds	r3, #1
 8012668:	e7c5      	b.n	80125f6 <__lshift+0x4a>
 801266a:	3904      	subs	r1, #4
 801266c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012670:	f841 2f04 	str.w	r2, [r1, #4]!
 8012674:	459c      	cmp	ip, r3
 8012676:	d8f9      	bhi.n	801266c <__lshift+0xc0>
 8012678:	e7ea      	b.n	8012650 <__lshift+0xa4>
 801267a:	bf00      	nop
 801267c:	08016a14 	.word	0x08016a14
 8012680:	08016a85 	.word	0x08016a85

08012684 <__mcmp>:
 8012684:	690a      	ldr	r2, [r1, #16]
 8012686:	4603      	mov	r3, r0
 8012688:	6900      	ldr	r0, [r0, #16]
 801268a:	1a80      	subs	r0, r0, r2
 801268c:	b530      	push	{r4, r5, lr}
 801268e:	d10e      	bne.n	80126ae <__mcmp+0x2a>
 8012690:	3314      	adds	r3, #20
 8012692:	3114      	adds	r1, #20
 8012694:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012698:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801269c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80126a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80126a4:	4295      	cmp	r5, r2
 80126a6:	d003      	beq.n	80126b0 <__mcmp+0x2c>
 80126a8:	d205      	bcs.n	80126b6 <__mcmp+0x32>
 80126aa:	f04f 30ff 	mov.w	r0, #4294967295
 80126ae:	bd30      	pop	{r4, r5, pc}
 80126b0:	42a3      	cmp	r3, r4
 80126b2:	d3f3      	bcc.n	801269c <__mcmp+0x18>
 80126b4:	e7fb      	b.n	80126ae <__mcmp+0x2a>
 80126b6:	2001      	movs	r0, #1
 80126b8:	e7f9      	b.n	80126ae <__mcmp+0x2a>
	...

080126bc <__mdiff>:
 80126bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c0:	4689      	mov	r9, r1
 80126c2:	4606      	mov	r6, r0
 80126c4:	4611      	mov	r1, r2
 80126c6:	4648      	mov	r0, r9
 80126c8:	4614      	mov	r4, r2
 80126ca:	f7ff ffdb 	bl	8012684 <__mcmp>
 80126ce:	1e05      	subs	r5, r0, #0
 80126d0:	d112      	bne.n	80126f8 <__mdiff+0x3c>
 80126d2:	4629      	mov	r1, r5
 80126d4:	4630      	mov	r0, r6
 80126d6:	f7ff fd11 	bl	80120fc <_Balloc>
 80126da:	4602      	mov	r2, r0
 80126dc:	b928      	cbnz	r0, 80126ea <__mdiff+0x2e>
 80126de:	4b3f      	ldr	r3, [pc, #252]	@ (80127dc <__mdiff+0x120>)
 80126e0:	f240 2137 	movw	r1, #567	@ 0x237
 80126e4:	483e      	ldr	r0, [pc, #248]	@ (80127e0 <__mdiff+0x124>)
 80126e6:	f001 f939 	bl	801395c <__assert_func>
 80126ea:	2301      	movs	r3, #1
 80126ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80126f0:	4610      	mov	r0, r2
 80126f2:	b003      	add	sp, #12
 80126f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126f8:	bfbc      	itt	lt
 80126fa:	464b      	movlt	r3, r9
 80126fc:	46a1      	movlt	r9, r4
 80126fe:	4630      	mov	r0, r6
 8012700:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012704:	bfba      	itte	lt
 8012706:	461c      	movlt	r4, r3
 8012708:	2501      	movlt	r5, #1
 801270a:	2500      	movge	r5, #0
 801270c:	f7ff fcf6 	bl	80120fc <_Balloc>
 8012710:	4602      	mov	r2, r0
 8012712:	b918      	cbnz	r0, 801271c <__mdiff+0x60>
 8012714:	4b31      	ldr	r3, [pc, #196]	@ (80127dc <__mdiff+0x120>)
 8012716:	f240 2145 	movw	r1, #581	@ 0x245
 801271a:	e7e3      	b.n	80126e4 <__mdiff+0x28>
 801271c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012720:	6926      	ldr	r6, [r4, #16]
 8012722:	60c5      	str	r5, [r0, #12]
 8012724:	f109 0310 	add.w	r3, r9, #16
 8012728:	f109 0514 	add.w	r5, r9, #20
 801272c:	f104 0e14 	add.w	lr, r4, #20
 8012730:	f100 0b14 	add.w	fp, r0, #20
 8012734:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012738:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801273c:	9301      	str	r3, [sp, #4]
 801273e:	46d9      	mov	r9, fp
 8012740:	f04f 0c00 	mov.w	ip, #0
 8012744:	9b01      	ldr	r3, [sp, #4]
 8012746:	f85e 0b04 	ldr.w	r0, [lr], #4
 801274a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801274e:	9301      	str	r3, [sp, #4]
 8012750:	fa1f f38a 	uxth.w	r3, sl
 8012754:	4619      	mov	r1, r3
 8012756:	b283      	uxth	r3, r0
 8012758:	1acb      	subs	r3, r1, r3
 801275a:	0c00      	lsrs	r0, r0, #16
 801275c:	4463      	add	r3, ip
 801275e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012762:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012766:	b29b      	uxth	r3, r3
 8012768:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801276c:	4576      	cmp	r6, lr
 801276e:	f849 3b04 	str.w	r3, [r9], #4
 8012772:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012776:	d8e5      	bhi.n	8012744 <__mdiff+0x88>
 8012778:	1b33      	subs	r3, r6, r4
 801277a:	3b15      	subs	r3, #21
 801277c:	f023 0303 	bic.w	r3, r3, #3
 8012780:	3415      	adds	r4, #21
 8012782:	3304      	adds	r3, #4
 8012784:	42a6      	cmp	r6, r4
 8012786:	bf38      	it	cc
 8012788:	2304      	movcc	r3, #4
 801278a:	441d      	add	r5, r3
 801278c:	445b      	add	r3, fp
 801278e:	461e      	mov	r6, r3
 8012790:	462c      	mov	r4, r5
 8012792:	4544      	cmp	r4, r8
 8012794:	d30e      	bcc.n	80127b4 <__mdiff+0xf8>
 8012796:	f108 0103 	add.w	r1, r8, #3
 801279a:	1b49      	subs	r1, r1, r5
 801279c:	f021 0103 	bic.w	r1, r1, #3
 80127a0:	3d03      	subs	r5, #3
 80127a2:	45a8      	cmp	r8, r5
 80127a4:	bf38      	it	cc
 80127a6:	2100      	movcc	r1, #0
 80127a8:	440b      	add	r3, r1
 80127aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80127ae:	b191      	cbz	r1, 80127d6 <__mdiff+0x11a>
 80127b0:	6117      	str	r7, [r2, #16]
 80127b2:	e79d      	b.n	80126f0 <__mdiff+0x34>
 80127b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80127b8:	46e6      	mov	lr, ip
 80127ba:	0c08      	lsrs	r0, r1, #16
 80127bc:	fa1c fc81 	uxtah	ip, ip, r1
 80127c0:	4471      	add	r1, lr
 80127c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80127c6:	b289      	uxth	r1, r1
 80127c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80127cc:	f846 1b04 	str.w	r1, [r6], #4
 80127d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80127d4:	e7dd      	b.n	8012792 <__mdiff+0xd6>
 80127d6:	3f01      	subs	r7, #1
 80127d8:	e7e7      	b.n	80127aa <__mdiff+0xee>
 80127da:	bf00      	nop
 80127dc:	08016a14 	.word	0x08016a14
 80127e0:	08016a85 	.word	0x08016a85

080127e4 <__ulp>:
 80127e4:	b082      	sub	sp, #8
 80127e6:	ed8d 0b00 	vstr	d0, [sp]
 80127ea:	9a01      	ldr	r2, [sp, #4]
 80127ec:	4b0f      	ldr	r3, [pc, #60]	@ (801282c <__ulp+0x48>)
 80127ee:	4013      	ands	r3, r2
 80127f0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	dc08      	bgt.n	801280a <__ulp+0x26>
 80127f8:	425b      	negs	r3, r3
 80127fa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80127fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012802:	da04      	bge.n	801280e <__ulp+0x2a>
 8012804:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012808:	4113      	asrs	r3, r2
 801280a:	2200      	movs	r2, #0
 801280c:	e008      	b.n	8012820 <__ulp+0x3c>
 801280e:	f1a2 0314 	sub.w	r3, r2, #20
 8012812:	2b1e      	cmp	r3, #30
 8012814:	bfda      	itte	le
 8012816:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801281a:	40da      	lsrle	r2, r3
 801281c:	2201      	movgt	r2, #1
 801281e:	2300      	movs	r3, #0
 8012820:	4619      	mov	r1, r3
 8012822:	4610      	mov	r0, r2
 8012824:	ec41 0b10 	vmov	d0, r0, r1
 8012828:	b002      	add	sp, #8
 801282a:	4770      	bx	lr
 801282c:	7ff00000 	.word	0x7ff00000

08012830 <__b2d>:
 8012830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012834:	6906      	ldr	r6, [r0, #16]
 8012836:	f100 0814 	add.w	r8, r0, #20
 801283a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801283e:	1f37      	subs	r7, r6, #4
 8012840:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012844:	4610      	mov	r0, r2
 8012846:	f7ff fd4b 	bl	80122e0 <__hi0bits>
 801284a:	f1c0 0320 	rsb	r3, r0, #32
 801284e:	280a      	cmp	r0, #10
 8012850:	600b      	str	r3, [r1, #0]
 8012852:	491b      	ldr	r1, [pc, #108]	@ (80128c0 <__b2d+0x90>)
 8012854:	dc15      	bgt.n	8012882 <__b2d+0x52>
 8012856:	f1c0 0c0b 	rsb	ip, r0, #11
 801285a:	fa22 f30c 	lsr.w	r3, r2, ip
 801285e:	45b8      	cmp	r8, r7
 8012860:	ea43 0501 	orr.w	r5, r3, r1
 8012864:	bf34      	ite	cc
 8012866:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801286a:	2300      	movcs	r3, #0
 801286c:	3015      	adds	r0, #21
 801286e:	fa02 f000 	lsl.w	r0, r2, r0
 8012872:	fa23 f30c 	lsr.w	r3, r3, ip
 8012876:	4303      	orrs	r3, r0
 8012878:	461c      	mov	r4, r3
 801287a:	ec45 4b10 	vmov	d0, r4, r5
 801287e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012882:	45b8      	cmp	r8, r7
 8012884:	bf3a      	itte	cc
 8012886:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801288a:	f1a6 0708 	subcc.w	r7, r6, #8
 801288e:	2300      	movcs	r3, #0
 8012890:	380b      	subs	r0, #11
 8012892:	d012      	beq.n	80128ba <__b2d+0x8a>
 8012894:	f1c0 0120 	rsb	r1, r0, #32
 8012898:	fa23 f401 	lsr.w	r4, r3, r1
 801289c:	4082      	lsls	r2, r0
 801289e:	4322      	orrs	r2, r4
 80128a0:	4547      	cmp	r7, r8
 80128a2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80128a6:	bf8c      	ite	hi
 80128a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80128ac:	2200      	movls	r2, #0
 80128ae:	4083      	lsls	r3, r0
 80128b0:	40ca      	lsrs	r2, r1
 80128b2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80128b6:	4313      	orrs	r3, r2
 80128b8:	e7de      	b.n	8012878 <__b2d+0x48>
 80128ba:	ea42 0501 	orr.w	r5, r2, r1
 80128be:	e7db      	b.n	8012878 <__b2d+0x48>
 80128c0:	3ff00000 	.word	0x3ff00000

080128c4 <__d2b>:
 80128c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80128c8:	460f      	mov	r7, r1
 80128ca:	2101      	movs	r1, #1
 80128cc:	ec59 8b10 	vmov	r8, r9, d0
 80128d0:	4616      	mov	r6, r2
 80128d2:	f7ff fc13 	bl	80120fc <_Balloc>
 80128d6:	4604      	mov	r4, r0
 80128d8:	b930      	cbnz	r0, 80128e8 <__d2b+0x24>
 80128da:	4602      	mov	r2, r0
 80128dc:	4b23      	ldr	r3, [pc, #140]	@ (801296c <__d2b+0xa8>)
 80128de:	4824      	ldr	r0, [pc, #144]	@ (8012970 <__d2b+0xac>)
 80128e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80128e4:	f001 f83a 	bl	801395c <__assert_func>
 80128e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80128ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80128f0:	b10d      	cbz	r5, 80128f6 <__d2b+0x32>
 80128f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80128f6:	9301      	str	r3, [sp, #4]
 80128f8:	f1b8 0300 	subs.w	r3, r8, #0
 80128fc:	d023      	beq.n	8012946 <__d2b+0x82>
 80128fe:	4668      	mov	r0, sp
 8012900:	9300      	str	r3, [sp, #0]
 8012902:	f7ff fd0c 	bl	801231e <__lo0bits>
 8012906:	e9dd 1200 	ldrd	r1, r2, [sp]
 801290a:	b1d0      	cbz	r0, 8012942 <__d2b+0x7e>
 801290c:	f1c0 0320 	rsb	r3, r0, #32
 8012910:	fa02 f303 	lsl.w	r3, r2, r3
 8012914:	430b      	orrs	r3, r1
 8012916:	40c2      	lsrs	r2, r0
 8012918:	6163      	str	r3, [r4, #20]
 801291a:	9201      	str	r2, [sp, #4]
 801291c:	9b01      	ldr	r3, [sp, #4]
 801291e:	61a3      	str	r3, [r4, #24]
 8012920:	2b00      	cmp	r3, #0
 8012922:	bf0c      	ite	eq
 8012924:	2201      	moveq	r2, #1
 8012926:	2202      	movne	r2, #2
 8012928:	6122      	str	r2, [r4, #16]
 801292a:	b1a5      	cbz	r5, 8012956 <__d2b+0x92>
 801292c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012930:	4405      	add	r5, r0
 8012932:	603d      	str	r5, [r7, #0]
 8012934:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012938:	6030      	str	r0, [r6, #0]
 801293a:	4620      	mov	r0, r4
 801293c:	b003      	add	sp, #12
 801293e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012942:	6161      	str	r1, [r4, #20]
 8012944:	e7ea      	b.n	801291c <__d2b+0x58>
 8012946:	a801      	add	r0, sp, #4
 8012948:	f7ff fce9 	bl	801231e <__lo0bits>
 801294c:	9b01      	ldr	r3, [sp, #4]
 801294e:	6163      	str	r3, [r4, #20]
 8012950:	3020      	adds	r0, #32
 8012952:	2201      	movs	r2, #1
 8012954:	e7e8      	b.n	8012928 <__d2b+0x64>
 8012956:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801295a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801295e:	6038      	str	r0, [r7, #0]
 8012960:	6918      	ldr	r0, [r3, #16]
 8012962:	f7ff fcbd 	bl	80122e0 <__hi0bits>
 8012966:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801296a:	e7e5      	b.n	8012938 <__d2b+0x74>
 801296c:	08016a14 	.word	0x08016a14
 8012970:	08016a85 	.word	0x08016a85

08012974 <__ratio>:
 8012974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012978:	b085      	sub	sp, #20
 801297a:	e9cd 1000 	strd	r1, r0, [sp]
 801297e:	a902      	add	r1, sp, #8
 8012980:	f7ff ff56 	bl	8012830 <__b2d>
 8012984:	9800      	ldr	r0, [sp, #0]
 8012986:	a903      	add	r1, sp, #12
 8012988:	ec55 4b10 	vmov	r4, r5, d0
 801298c:	f7ff ff50 	bl	8012830 <__b2d>
 8012990:	9b01      	ldr	r3, [sp, #4]
 8012992:	6919      	ldr	r1, [r3, #16]
 8012994:	9b00      	ldr	r3, [sp, #0]
 8012996:	691b      	ldr	r3, [r3, #16]
 8012998:	1ac9      	subs	r1, r1, r3
 801299a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801299e:	1a9b      	subs	r3, r3, r2
 80129a0:	ec5b ab10 	vmov	sl, fp, d0
 80129a4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	bfce      	itee	gt
 80129ac:	462a      	movgt	r2, r5
 80129ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80129b2:	465a      	movle	r2, fp
 80129b4:	462f      	mov	r7, r5
 80129b6:	46d9      	mov	r9, fp
 80129b8:	bfcc      	ite	gt
 80129ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80129be:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80129c2:	464b      	mov	r3, r9
 80129c4:	4652      	mov	r2, sl
 80129c6:	4620      	mov	r0, r4
 80129c8:	4639      	mov	r1, r7
 80129ca:	f7ed ff7f 	bl	80008cc <__aeabi_ddiv>
 80129ce:	ec41 0b10 	vmov	d0, r0, r1
 80129d2:	b005      	add	sp, #20
 80129d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080129d8 <__copybits>:
 80129d8:	3901      	subs	r1, #1
 80129da:	b570      	push	{r4, r5, r6, lr}
 80129dc:	1149      	asrs	r1, r1, #5
 80129de:	6914      	ldr	r4, [r2, #16]
 80129e0:	3101      	adds	r1, #1
 80129e2:	f102 0314 	add.w	r3, r2, #20
 80129e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80129ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80129ee:	1f05      	subs	r5, r0, #4
 80129f0:	42a3      	cmp	r3, r4
 80129f2:	d30c      	bcc.n	8012a0e <__copybits+0x36>
 80129f4:	1aa3      	subs	r3, r4, r2
 80129f6:	3b11      	subs	r3, #17
 80129f8:	f023 0303 	bic.w	r3, r3, #3
 80129fc:	3211      	adds	r2, #17
 80129fe:	42a2      	cmp	r2, r4
 8012a00:	bf88      	it	hi
 8012a02:	2300      	movhi	r3, #0
 8012a04:	4418      	add	r0, r3
 8012a06:	2300      	movs	r3, #0
 8012a08:	4288      	cmp	r0, r1
 8012a0a:	d305      	bcc.n	8012a18 <__copybits+0x40>
 8012a0c:	bd70      	pop	{r4, r5, r6, pc}
 8012a0e:	f853 6b04 	ldr.w	r6, [r3], #4
 8012a12:	f845 6f04 	str.w	r6, [r5, #4]!
 8012a16:	e7eb      	b.n	80129f0 <__copybits+0x18>
 8012a18:	f840 3b04 	str.w	r3, [r0], #4
 8012a1c:	e7f4      	b.n	8012a08 <__copybits+0x30>

08012a1e <__any_on>:
 8012a1e:	f100 0214 	add.w	r2, r0, #20
 8012a22:	6900      	ldr	r0, [r0, #16]
 8012a24:	114b      	asrs	r3, r1, #5
 8012a26:	4298      	cmp	r0, r3
 8012a28:	b510      	push	{r4, lr}
 8012a2a:	db11      	blt.n	8012a50 <__any_on+0x32>
 8012a2c:	dd0a      	ble.n	8012a44 <__any_on+0x26>
 8012a2e:	f011 011f 	ands.w	r1, r1, #31
 8012a32:	d007      	beq.n	8012a44 <__any_on+0x26>
 8012a34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012a38:	fa24 f001 	lsr.w	r0, r4, r1
 8012a3c:	fa00 f101 	lsl.w	r1, r0, r1
 8012a40:	428c      	cmp	r4, r1
 8012a42:	d10b      	bne.n	8012a5c <__any_on+0x3e>
 8012a44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	d803      	bhi.n	8012a54 <__any_on+0x36>
 8012a4c:	2000      	movs	r0, #0
 8012a4e:	bd10      	pop	{r4, pc}
 8012a50:	4603      	mov	r3, r0
 8012a52:	e7f7      	b.n	8012a44 <__any_on+0x26>
 8012a54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a58:	2900      	cmp	r1, #0
 8012a5a:	d0f5      	beq.n	8012a48 <__any_on+0x2a>
 8012a5c:	2001      	movs	r0, #1
 8012a5e:	e7f6      	b.n	8012a4e <__any_on+0x30>

08012a60 <__ascii_wctomb>:
 8012a60:	4603      	mov	r3, r0
 8012a62:	4608      	mov	r0, r1
 8012a64:	b141      	cbz	r1, 8012a78 <__ascii_wctomb+0x18>
 8012a66:	2aff      	cmp	r2, #255	@ 0xff
 8012a68:	d904      	bls.n	8012a74 <__ascii_wctomb+0x14>
 8012a6a:	228a      	movs	r2, #138	@ 0x8a
 8012a6c:	601a      	str	r2, [r3, #0]
 8012a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8012a72:	4770      	bx	lr
 8012a74:	700a      	strb	r2, [r1, #0]
 8012a76:	2001      	movs	r0, #1
 8012a78:	4770      	bx	lr

08012a7a <__ssputs_r>:
 8012a7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a7e:	688e      	ldr	r6, [r1, #8]
 8012a80:	461f      	mov	r7, r3
 8012a82:	42be      	cmp	r6, r7
 8012a84:	680b      	ldr	r3, [r1, #0]
 8012a86:	4682      	mov	sl, r0
 8012a88:	460c      	mov	r4, r1
 8012a8a:	4690      	mov	r8, r2
 8012a8c:	d82d      	bhi.n	8012aea <__ssputs_r+0x70>
 8012a8e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012a92:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012a96:	d026      	beq.n	8012ae6 <__ssputs_r+0x6c>
 8012a98:	6965      	ldr	r5, [r4, #20]
 8012a9a:	6909      	ldr	r1, [r1, #16]
 8012a9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012aa0:	eba3 0901 	sub.w	r9, r3, r1
 8012aa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012aa8:	1c7b      	adds	r3, r7, #1
 8012aaa:	444b      	add	r3, r9
 8012aac:	106d      	asrs	r5, r5, #1
 8012aae:	429d      	cmp	r5, r3
 8012ab0:	bf38      	it	cc
 8012ab2:	461d      	movcc	r5, r3
 8012ab4:	0553      	lsls	r3, r2, #21
 8012ab6:	d527      	bpl.n	8012b08 <__ssputs_r+0x8e>
 8012ab8:	4629      	mov	r1, r5
 8012aba:	f7fb ff6b 	bl	800e994 <_malloc_r>
 8012abe:	4606      	mov	r6, r0
 8012ac0:	b360      	cbz	r0, 8012b1c <__ssputs_r+0xa2>
 8012ac2:	6921      	ldr	r1, [r4, #16]
 8012ac4:	464a      	mov	r2, r9
 8012ac6:	f7fe f917 	bl	8010cf8 <memcpy>
 8012aca:	89a3      	ldrh	r3, [r4, #12]
 8012acc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ad4:	81a3      	strh	r3, [r4, #12]
 8012ad6:	6126      	str	r6, [r4, #16]
 8012ad8:	6165      	str	r5, [r4, #20]
 8012ada:	444e      	add	r6, r9
 8012adc:	eba5 0509 	sub.w	r5, r5, r9
 8012ae0:	6026      	str	r6, [r4, #0]
 8012ae2:	60a5      	str	r5, [r4, #8]
 8012ae4:	463e      	mov	r6, r7
 8012ae6:	42be      	cmp	r6, r7
 8012ae8:	d900      	bls.n	8012aec <__ssputs_r+0x72>
 8012aea:	463e      	mov	r6, r7
 8012aec:	6820      	ldr	r0, [r4, #0]
 8012aee:	4632      	mov	r2, r6
 8012af0:	4641      	mov	r1, r8
 8012af2:	f000 fef6 	bl	80138e2 <memmove>
 8012af6:	68a3      	ldr	r3, [r4, #8]
 8012af8:	1b9b      	subs	r3, r3, r6
 8012afa:	60a3      	str	r3, [r4, #8]
 8012afc:	6823      	ldr	r3, [r4, #0]
 8012afe:	4433      	add	r3, r6
 8012b00:	6023      	str	r3, [r4, #0]
 8012b02:	2000      	movs	r0, #0
 8012b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b08:	462a      	mov	r2, r5
 8012b0a:	f000 ff59 	bl	80139c0 <_realloc_r>
 8012b0e:	4606      	mov	r6, r0
 8012b10:	2800      	cmp	r0, #0
 8012b12:	d1e0      	bne.n	8012ad6 <__ssputs_r+0x5c>
 8012b14:	6921      	ldr	r1, [r4, #16]
 8012b16:	4650      	mov	r0, sl
 8012b18:	f7fe ff5a 	bl	80119d0 <_free_r>
 8012b1c:	230c      	movs	r3, #12
 8012b1e:	f8ca 3000 	str.w	r3, [sl]
 8012b22:	89a3      	ldrh	r3, [r4, #12]
 8012b24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b28:	81a3      	strh	r3, [r4, #12]
 8012b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8012b2e:	e7e9      	b.n	8012b04 <__ssputs_r+0x8a>

08012b30 <_svfiprintf_r>:
 8012b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b34:	4698      	mov	r8, r3
 8012b36:	898b      	ldrh	r3, [r1, #12]
 8012b38:	061b      	lsls	r3, r3, #24
 8012b3a:	b09d      	sub	sp, #116	@ 0x74
 8012b3c:	4607      	mov	r7, r0
 8012b3e:	460d      	mov	r5, r1
 8012b40:	4614      	mov	r4, r2
 8012b42:	d510      	bpl.n	8012b66 <_svfiprintf_r+0x36>
 8012b44:	690b      	ldr	r3, [r1, #16]
 8012b46:	b973      	cbnz	r3, 8012b66 <_svfiprintf_r+0x36>
 8012b48:	2140      	movs	r1, #64	@ 0x40
 8012b4a:	f7fb ff23 	bl	800e994 <_malloc_r>
 8012b4e:	6028      	str	r0, [r5, #0]
 8012b50:	6128      	str	r0, [r5, #16]
 8012b52:	b930      	cbnz	r0, 8012b62 <_svfiprintf_r+0x32>
 8012b54:	230c      	movs	r3, #12
 8012b56:	603b      	str	r3, [r7, #0]
 8012b58:	f04f 30ff 	mov.w	r0, #4294967295
 8012b5c:	b01d      	add	sp, #116	@ 0x74
 8012b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b62:	2340      	movs	r3, #64	@ 0x40
 8012b64:	616b      	str	r3, [r5, #20]
 8012b66:	2300      	movs	r3, #0
 8012b68:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b6a:	2320      	movs	r3, #32
 8012b6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012b70:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b74:	2330      	movs	r3, #48	@ 0x30
 8012b76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012d14 <_svfiprintf_r+0x1e4>
 8012b7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012b7e:	f04f 0901 	mov.w	r9, #1
 8012b82:	4623      	mov	r3, r4
 8012b84:	469a      	mov	sl, r3
 8012b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b8a:	b10a      	cbz	r2, 8012b90 <_svfiprintf_r+0x60>
 8012b8c:	2a25      	cmp	r2, #37	@ 0x25
 8012b8e:	d1f9      	bne.n	8012b84 <_svfiprintf_r+0x54>
 8012b90:	ebba 0b04 	subs.w	fp, sl, r4
 8012b94:	d00b      	beq.n	8012bae <_svfiprintf_r+0x7e>
 8012b96:	465b      	mov	r3, fp
 8012b98:	4622      	mov	r2, r4
 8012b9a:	4629      	mov	r1, r5
 8012b9c:	4638      	mov	r0, r7
 8012b9e:	f7ff ff6c 	bl	8012a7a <__ssputs_r>
 8012ba2:	3001      	adds	r0, #1
 8012ba4:	f000 80a7 	beq.w	8012cf6 <_svfiprintf_r+0x1c6>
 8012ba8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012baa:	445a      	add	r2, fp
 8012bac:	9209      	str	r2, [sp, #36]	@ 0x24
 8012bae:	f89a 3000 	ldrb.w	r3, [sl]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	f000 809f 	beq.w	8012cf6 <_svfiprintf_r+0x1c6>
 8012bb8:	2300      	movs	r3, #0
 8012bba:	f04f 32ff 	mov.w	r2, #4294967295
 8012bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012bc2:	f10a 0a01 	add.w	sl, sl, #1
 8012bc6:	9304      	str	r3, [sp, #16]
 8012bc8:	9307      	str	r3, [sp, #28]
 8012bca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012bce:	931a      	str	r3, [sp, #104]	@ 0x68
 8012bd0:	4654      	mov	r4, sl
 8012bd2:	2205      	movs	r2, #5
 8012bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bd8:	484e      	ldr	r0, [pc, #312]	@ (8012d14 <_svfiprintf_r+0x1e4>)
 8012bda:	f7ed fb39 	bl	8000250 <memchr>
 8012bde:	9a04      	ldr	r2, [sp, #16]
 8012be0:	b9d8      	cbnz	r0, 8012c1a <_svfiprintf_r+0xea>
 8012be2:	06d0      	lsls	r0, r2, #27
 8012be4:	bf44      	itt	mi
 8012be6:	2320      	movmi	r3, #32
 8012be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012bec:	0711      	lsls	r1, r2, #28
 8012bee:	bf44      	itt	mi
 8012bf0:	232b      	movmi	r3, #43	@ 0x2b
 8012bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8012bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8012bfc:	d015      	beq.n	8012c2a <_svfiprintf_r+0xfa>
 8012bfe:	9a07      	ldr	r2, [sp, #28]
 8012c00:	4654      	mov	r4, sl
 8012c02:	2000      	movs	r0, #0
 8012c04:	f04f 0c0a 	mov.w	ip, #10
 8012c08:	4621      	mov	r1, r4
 8012c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c0e:	3b30      	subs	r3, #48	@ 0x30
 8012c10:	2b09      	cmp	r3, #9
 8012c12:	d94b      	bls.n	8012cac <_svfiprintf_r+0x17c>
 8012c14:	b1b0      	cbz	r0, 8012c44 <_svfiprintf_r+0x114>
 8012c16:	9207      	str	r2, [sp, #28]
 8012c18:	e014      	b.n	8012c44 <_svfiprintf_r+0x114>
 8012c1a:	eba0 0308 	sub.w	r3, r0, r8
 8012c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8012c22:	4313      	orrs	r3, r2
 8012c24:	9304      	str	r3, [sp, #16]
 8012c26:	46a2      	mov	sl, r4
 8012c28:	e7d2      	b.n	8012bd0 <_svfiprintf_r+0xa0>
 8012c2a:	9b03      	ldr	r3, [sp, #12]
 8012c2c:	1d19      	adds	r1, r3, #4
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	9103      	str	r1, [sp, #12]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	bfbb      	ittet	lt
 8012c36:	425b      	neglt	r3, r3
 8012c38:	f042 0202 	orrlt.w	r2, r2, #2
 8012c3c:	9307      	strge	r3, [sp, #28]
 8012c3e:	9307      	strlt	r3, [sp, #28]
 8012c40:	bfb8      	it	lt
 8012c42:	9204      	strlt	r2, [sp, #16]
 8012c44:	7823      	ldrb	r3, [r4, #0]
 8012c46:	2b2e      	cmp	r3, #46	@ 0x2e
 8012c48:	d10a      	bne.n	8012c60 <_svfiprintf_r+0x130>
 8012c4a:	7863      	ldrb	r3, [r4, #1]
 8012c4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c4e:	d132      	bne.n	8012cb6 <_svfiprintf_r+0x186>
 8012c50:	9b03      	ldr	r3, [sp, #12]
 8012c52:	1d1a      	adds	r2, r3, #4
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	9203      	str	r2, [sp, #12]
 8012c58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012c5c:	3402      	adds	r4, #2
 8012c5e:	9305      	str	r3, [sp, #20]
 8012c60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012d24 <_svfiprintf_r+0x1f4>
 8012c64:	7821      	ldrb	r1, [r4, #0]
 8012c66:	2203      	movs	r2, #3
 8012c68:	4650      	mov	r0, sl
 8012c6a:	f7ed faf1 	bl	8000250 <memchr>
 8012c6e:	b138      	cbz	r0, 8012c80 <_svfiprintf_r+0x150>
 8012c70:	9b04      	ldr	r3, [sp, #16]
 8012c72:	eba0 000a 	sub.w	r0, r0, sl
 8012c76:	2240      	movs	r2, #64	@ 0x40
 8012c78:	4082      	lsls	r2, r0
 8012c7a:	4313      	orrs	r3, r2
 8012c7c:	3401      	adds	r4, #1
 8012c7e:	9304      	str	r3, [sp, #16]
 8012c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c84:	4824      	ldr	r0, [pc, #144]	@ (8012d18 <_svfiprintf_r+0x1e8>)
 8012c86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012c8a:	2206      	movs	r2, #6
 8012c8c:	f7ed fae0 	bl	8000250 <memchr>
 8012c90:	2800      	cmp	r0, #0
 8012c92:	d036      	beq.n	8012d02 <_svfiprintf_r+0x1d2>
 8012c94:	4b21      	ldr	r3, [pc, #132]	@ (8012d1c <_svfiprintf_r+0x1ec>)
 8012c96:	bb1b      	cbnz	r3, 8012ce0 <_svfiprintf_r+0x1b0>
 8012c98:	9b03      	ldr	r3, [sp, #12]
 8012c9a:	3307      	adds	r3, #7
 8012c9c:	f023 0307 	bic.w	r3, r3, #7
 8012ca0:	3308      	adds	r3, #8
 8012ca2:	9303      	str	r3, [sp, #12]
 8012ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ca6:	4433      	add	r3, r6
 8012ca8:	9309      	str	r3, [sp, #36]	@ 0x24
 8012caa:	e76a      	b.n	8012b82 <_svfiprintf_r+0x52>
 8012cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8012cb0:	460c      	mov	r4, r1
 8012cb2:	2001      	movs	r0, #1
 8012cb4:	e7a8      	b.n	8012c08 <_svfiprintf_r+0xd8>
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	3401      	adds	r4, #1
 8012cba:	9305      	str	r3, [sp, #20]
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	f04f 0c0a 	mov.w	ip, #10
 8012cc2:	4620      	mov	r0, r4
 8012cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012cc8:	3a30      	subs	r2, #48	@ 0x30
 8012cca:	2a09      	cmp	r2, #9
 8012ccc:	d903      	bls.n	8012cd6 <_svfiprintf_r+0x1a6>
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d0c6      	beq.n	8012c60 <_svfiprintf_r+0x130>
 8012cd2:	9105      	str	r1, [sp, #20]
 8012cd4:	e7c4      	b.n	8012c60 <_svfiprintf_r+0x130>
 8012cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cda:	4604      	mov	r4, r0
 8012cdc:	2301      	movs	r3, #1
 8012cde:	e7f0      	b.n	8012cc2 <_svfiprintf_r+0x192>
 8012ce0:	ab03      	add	r3, sp, #12
 8012ce2:	9300      	str	r3, [sp, #0]
 8012ce4:	462a      	mov	r2, r5
 8012ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8012d20 <_svfiprintf_r+0x1f0>)
 8012ce8:	a904      	add	r1, sp, #16
 8012cea:	4638      	mov	r0, r7
 8012cec:	f7fc fe7c 	bl	800f9e8 <_printf_float>
 8012cf0:	1c42      	adds	r2, r0, #1
 8012cf2:	4606      	mov	r6, r0
 8012cf4:	d1d6      	bne.n	8012ca4 <_svfiprintf_r+0x174>
 8012cf6:	89ab      	ldrh	r3, [r5, #12]
 8012cf8:	065b      	lsls	r3, r3, #25
 8012cfa:	f53f af2d 	bmi.w	8012b58 <_svfiprintf_r+0x28>
 8012cfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012d00:	e72c      	b.n	8012b5c <_svfiprintf_r+0x2c>
 8012d02:	ab03      	add	r3, sp, #12
 8012d04:	9300      	str	r3, [sp, #0]
 8012d06:	462a      	mov	r2, r5
 8012d08:	4b05      	ldr	r3, [pc, #20]	@ (8012d20 <_svfiprintf_r+0x1f0>)
 8012d0a:	a904      	add	r1, sp, #16
 8012d0c:	4638      	mov	r0, r7
 8012d0e:	f7fd f903 	bl	800ff18 <_printf_i>
 8012d12:	e7ed      	b.n	8012cf0 <_svfiprintf_r+0x1c0>
 8012d14:	08016be0 	.word	0x08016be0
 8012d18:	08016bea 	.word	0x08016bea
 8012d1c:	0800f9e9 	.word	0x0800f9e9
 8012d20:	08012a7b 	.word	0x08012a7b
 8012d24:	08016be6 	.word	0x08016be6

08012d28 <_sungetc_r>:
 8012d28:	b538      	push	{r3, r4, r5, lr}
 8012d2a:	1c4b      	adds	r3, r1, #1
 8012d2c:	4614      	mov	r4, r2
 8012d2e:	d103      	bne.n	8012d38 <_sungetc_r+0x10>
 8012d30:	f04f 35ff 	mov.w	r5, #4294967295
 8012d34:	4628      	mov	r0, r5
 8012d36:	bd38      	pop	{r3, r4, r5, pc}
 8012d38:	8993      	ldrh	r3, [r2, #12]
 8012d3a:	f023 0320 	bic.w	r3, r3, #32
 8012d3e:	8193      	strh	r3, [r2, #12]
 8012d40:	6853      	ldr	r3, [r2, #4]
 8012d42:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8012d44:	b2cd      	uxtb	r5, r1
 8012d46:	b18a      	cbz	r2, 8012d6c <_sungetc_r+0x44>
 8012d48:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	dd08      	ble.n	8012d60 <_sungetc_r+0x38>
 8012d4e:	6823      	ldr	r3, [r4, #0]
 8012d50:	1e5a      	subs	r2, r3, #1
 8012d52:	6022      	str	r2, [r4, #0]
 8012d54:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012d58:	6863      	ldr	r3, [r4, #4]
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	6063      	str	r3, [r4, #4]
 8012d5e:	e7e9      	b.n	8012d34 <_sungetc_r+0xc>
 8012d60:	4621      	mov	r1, r4
 8012d62:	f000 fd84 	bl	801386e <__submore>
 8012d66:	2800      	cmp	r0, #0
 8012d68:	d0f1      	beq.n	8012d4e <_sungetc_r+0x26>
 8012d6a:	e7e1      	b.n	8012d30 <_sungetc_r+0x8>
 8012d6c:	6921      	ldr	r1, [r4, #16]
 8012d6e:	6822      	ldr	r2, [r4, #0]
 8012d70:	b141      	cbz	r1, 8012d84 <_sungetc_r+0x5c>
 8012d72:	4291      	cmp	r1, r2
 8012d74:	d206      	bcs.n	8012d84 <_sungetc_r+0x5c>
 8012d76:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8012d7a:	42a9      	cmp	r1, r5
 8012d7c:	d102      	bne.n	8012d84 <_sungetc_r+0x5c>
 8012d7e:	3a01      	subs	r2, #1
 8012d80:	6022      	str	r2, [r4, #0]
 8012d82:	e7ea      	b.n	8012d5a <_sungetc_r+0x32>
 8012d84:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8012d88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012d8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8012d8e:	2303      	movs	r3, #3
 8012d90:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012d92:	4623      	mov	r3, r4
 8012d94:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012d98:	6023      	str	r3, [r4, #0]
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	e7de      	b.n	8012d5c <_sungetc_r+0x34>

08012d9e <__ssrefill_r>:
 8012d9e:	b510      	push	{r4, lr}
 8012da0:	460c      	mov	r4, r1
 8012da2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012da4:	b169      	cbz	r1, 8012dc2 <__ssrefill_r+0x24>
 8012da6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012daa:	4299      	cmp	r1, r3
 8012dac:	d001      	beq.n	8012db2 <__ssrefill_r+0x14>
 8012dae:	f7fe fe0f 	bl	80119d0 <_free_r>
 8012db2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012db4:	6063      	str	r3, [r4, #4]
 8012db6:	2000      	movs	r0, #0
 8012db8:	6360      	str	r0, [r4, #52]	@ 0x34
 8012dba:	b113      	cbz	r3, 8012dc2 <__ssrefill_r+0x24>
 8012dbc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012dbe:	6023      	str	r3, [r4, #0]
 8012dc0:	bd10      	pop	{r4, pc}
 8012dc2:	6923      	ldr	r3, [r4, #16]
 8012dc4:	6023      	str	r3, [r4, #0]
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	6063      	str	r3, [r4, #4]
 8012dca:	89a3      	ldrh	r3, [r4, #12]
 8012dcc:	f043 0320 	orr.w	r3, r3, #32
 8012dd0:	81a3      	strh	r3, [r4, #12]
 8012dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8012dd6:	e7f3      	b.n	8012dc0 <__ssrefill_r+0x22>

08012dd8 <__ssvfiscanf_r>:
 8012dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ddc:	460c      	mov	r4, r1
 8012dde:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012de2:	2100      	movs	r1, #0
 8012de4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012de8:	49a5      	ldr	r1, [pc, #660]	@ (8013080 <__ssvfiscanf_r+0x2a8>)
 8012dea:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012dec:	f10d 0804 	add.w	r8, sp, #4
 8012df0:	49a4      	ldr	r1, [pc, #656]	@ (8013084 <__ssvfiscanf_r+0x2ac>)
 8012df2:	4fa5      	ldr	r7, [pc, #660]	@ (8013088 <__ssvfiscanf_r+0x2b0>)
 8012df4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012df8:	4606      	mov	r6, r0
 8012dfa:	91a1      	str	r1, [sp, #644]	@ 0x284
 8012dfc:	9300      	str	r3, [sp, #0]
 8012dfe:	7813      	ldrb	r3, [r2, #0]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	f000 8158 	beq.w	80130b6 <__ssvfiscanf_r+0x2de>
 8012e06:	5cf9      	ldrb	r1, [r7, r3]
 8012e08:	f011 0108 	ands.w	r1, r1, #8
 8012e0c:	f102 0501 	add.w	r5, r2, #1
 8012e10:	d019      	beq.n	8012e46 <__ssvfiscanf_r+0x6e>
 8012e12:	6863      	ldr	r3, [r4, #4]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	dd0f      	ble.n	8012e38 <__ssvfiscanf_r+0x60>
 8012e18:	6823      	ldr	r3, [r4, #0]
 8012e1a:	781a      	ldrb	r2, [r3, #0]
 8012e1c:	5cba      	ldrb	r2, [r7, r2]
 8012e1e:	0712      	lsls	r2, r2, #28
 8012e20:	d401      	bmi.n	8012e26 <__ssvfiscanf_r+0x4e>
 8012e22:	462a      	mov	r2, r5
 8012e24:	e7eb      	b.n	8012dfe <__ssvfiscanf_r+0x26>
 8012e26:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012e28:	3201      	adds	r2, #1
 8012e2a:	9245      	str	r2, [sp, #276]	@ 0x114
 8012e2c:	6862      	ldr	r2, [r4, #4]
 8012e2e:	3301      	adds	r3, #1
 8012e30:	3a01      	subs	r2, #1
 8012e32:	6062      	str	r2, [r4, #4]
 8012e34:	6023      	str	r3, [r4, #0]
 8012e36:	e7ec      	b.n	8012e12 <__ssvfiscanf_r+0x3a>
 8012e38:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012e3a:	4621      	mov	r1, r4
 8012e3c:	4630      	mov	r0, r6
 8012e3e:	4798      	blx	r3
 8012e40:	2800      	cmp	r0, #0
 8012e42:	d0e9      	beq.n	8012e18 <__ssvfiscanf_r+0x40>
 8012e44:	e7ed      	b.n	8012e22 <__ssvfiscanf_r+0x4a>
 8012e46:	2b25      	cmp	r3, #37	@ 0x25
 8012e48:	d012      	beq.n	8012e70 <__ssvfiscanf_r+0x98>
 8012e4a:	4699      	mov	r9, r3
 8012e4c:	6863      	ldr	r3, [r4, #4]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	f340 8093 	ble.w	8012f7a <__ssvfiscanf_r+0x1a2>
 8012e54:	6822      	ldr	r2, [r4, #0]
 8012e56:	7813      	ldrb	r3, [r2, #0]
 8012e58:	454b      	cmp	r3, r9
 8012e5a:	f040 812c 	bne.w	80130b6 <__ssvfiscanf_r+0x2de>
 8012e5e:	6863      	ldr	r3, [r4, #4]
 8012e60:	3b01      	subs	r3, #1
 8012e62:	6063      	str	r3, [r4, #4]
 8012e64:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8012e66:	3201      	adds	r2, #1
 8012e68:	3301      	adds	r3, #1
 8012e6a:	6022      	str	r2, [r4, #0]
 8012e6c:	9345      	str	r3, [sp, #276]	@ 0x114
 8012e6e:	e7d8      	b.n	8012e22 <__ssvfiscanf_r+0x4a>
 8012e70:	9141      	str	r1, [sp, #260]	@ 0x104
 8012e72:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012e74:	7853      	ldrb	r3, [r2, #1]
 8012e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e78:	bf02      	ittt	eq
 8012e7a:	2310      	moveq	r3, #16
 8012e7c:	1c95      	addeq	r5, r2, #2
 8012e7e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8012e80:	220a      	movs	r2, #10
 8012e82:	46a9      	mov	r9, r5
 8012e84:	f819 1b01 	ldrb.w	r1, [r9], #1
 8012e88:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012e8c:	2b09      	cmp	r3, #9
 8012e8e:	d91e      	bls.n	8012ece <__ssvfiscanf_r+0xf6>
 8012e90:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 801308c <__ssvfiscanf_r+0x2b4>
 8012e94:	2203      	movs	r2, #3
 8012e96:	4650      	mov	r0, sl
 8012e98:	f7ed f9da 	bl	8000250 <memchr>
 8012e9c:	b138      	cbz	r0, 8012eae <__ssvfiscanf_r+0xd6>
 8012e9e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012ea0:	eba0 000a 	sub.w	r0, r0, sl
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	4083      	lsls	r3, r0
 8012ea8:	4313      	orrs	r3, r2
 8012eaa:	9341      	str	r3, [sp, #260]	@ 0x104
 8012eac:	464d      	mov	r5, r9
 8012eae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012eb2:	2b78      	cmp	r3, #120	@ 0x78
 8012eb4:	d806      	bhi.n	8012ec4 <__ssvfiscanf_r+0xec>
 8012eb6:	2b57      	cmp	r3, #87	@ 0x57
 8012eb8:	d810      	bhi.n	8012edc <__ssvfiscanf_r+0x104>
 8012eba:	2b25      	cmp	r3, #37	@ 0x25
 8012ebc:	d0c5      	beq.n	8012e4a <__ssvfiscanf_r+0x72>
 8012ebe:	d857      	bhi.n	8012f70 <__ssvfiscanf_r+0x198>
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d065      	beq.n	8012f90 <__ssvfiscanf_r+0x1b8>
 8012ec4:	2303      	movs	r3, #3
 8012ec6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012ec8:	230a      	movs	r3, #10
 8012eca:	9342      	str	r3, [sp, #264]	@ 0x108
 8012ecc:	e078      	b.n	8012fc0 <__ssvfiscanf_r+0x1e8>
 8012ece:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012ed0:	fb02 1103 	mla	r1, r2, r3, r1
 8012ed4:	3930      	subs	r1, #48	@ 0x30
 8012ed6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012ed8:	464d      	mov	r5, r9
 8012eda:	e7d2      	b.n	8012e82 <__ssvfiscanf_r+0xaa>
 8012edc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012ee0:	2a20      	cmp	r2, #32
 8012ee2:	d8ef      	bhi.n	8012ec4 <__ssvfiscanf_r+0xec>
 8012ee4:	a101      	add	r1, pc, #4	@ (adr r1, 8012eec <__ssvfiscanf_r+0x114>)
 8012ee6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012eea:	bf00      	nop
 8012eec:	08012f9f 	.word	0x08012f9f
 8012ef0:	08012ec5 	.word	0x08012ec5
 8012ef4:	08012ec5 	.word	0x08012ec5
 8012ef8:	08012ff9 	.word	0x08012ff9
 8012efc:	08012ec5 	.word	0x08012ec5
 8012f00:	08012ec5 	.word	0x08012ec5
 8012f04:	08012ec5 	.word	0x08012ec5
 8012f08:	08012ec5 	.word	0x08012ec5
 8012f0c:	08012ec5 	.word	0x08012ec5
 8012f10:	08012ec5 	.word	0x08012ec5
 8012f14:	08012ec5 	.word	0x08012ec5
 8012f18:	0801300f 	.word	0x0801300f
 8012f1c:	08012ff5 	.word	0x08012ff5
 8012f20:	08012f77 	.word	0x08012f77
 8012f24:	08012f77 	.word	0x08012f77
 8012f28:	08012f77 	.word	0x08012f77
 8012f2c:	08012ec5 	.word	0x08012ec5
 8012f30:	08012fb1 	.word	0x08012fb1
 8012f34:	08012ec5 	.word	0x08012ec5
 8012f38:	08012ec5 	.word	0x08012ec5
 8012f3c:	08012ec5 	.word	0x08012ec5
 8012f40:	08012ec5 	.word	0x08012ec5
 8012f44:	0801301f 	.word	0x0801301f
 8012f48:	08012fb9 	.word	0x08012fb9
 8012f4c:	08012f97 	.word	0x08012f97
 8012f50:	08012ec5 	.word	0x08012ec5
 8012f54:	08012ec5 	.word	0x08012ec5
 8012f58:	0801301b 	.word	0x0801301b
 8012f5c:	08012ec5 	.word	0x08012ec5
 8012f60:	08012ff5 	.word	0x08012ff5
 8012f64:	08012ec5 	.word	0x08012ec5
 8012f68:	08012ec5 	.word	0x08012ec5
 8012f6c:	08012f9f 	.word	0x08012f9f
 8012f70:	3b45      	subs	r3, #69	@ 0x45
 8012f72:	2b02      	cmp	r3, #2
 8012f74:	d8a6      	bhi.n	8012ec4 <__ssvfiscanf_r+0xec>
 8012f76:	2305      	movs	r3, #5
 8012f78:	e021      	b.n	8012fbe <__ssvfiscanf_r+0x1e6>
 8012f7a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012f7c:	4621      	mov	r1, r4
 8012f7e:	4630      	mov	r0, r6
 8012f80:	4798      	blx	r3
 8012f82:	2800      	cmp	r0, #0
 8012f84:	f43f af66 	beq.w	8012e54 <__ssvfiscanf_r+0x7c>
 8012f88:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012f8a:	2800      	cmp	r0, #0
 8012f8c:	f040 808b 	bne.w	80130a6 <__ssvfiscanf_r+0x2ce>
 8012f90:	f04f 30ff 	mov.w	r0, #4294967295
 8012f94:	e08b      	b.n	80130ae <__ssvfiscanf_r+0x2d6>
 8012f96:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012f98:	f042 0220 	orr.w	r2, r2, #32
 8012f9c:	9241      	str	r2, [sp, #260]	@ 0x104
 8012f9e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012fa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012fa4:	9241      	str	r2, [sp, #260]	@ 0x104
 8012fa6:	2210      	movs	r2, #16
 8012fa8:	2b6e      	cmp	r3, #110	@ 0x6e
 8012faa:	9242      	str	r2, [sp, #264]	@ 0x108
 8012fac:	d902      	bls.n	8012fb4 <__ssvfiscanf_r+0x1dc>
 8012fae:	e005      	b.n	8012fbc <__ssvfiscanf_r+0x1e4>
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	9342      	str	r3, [sp, #264]	@ 0x108
 8012fb4:	2303      	movs	r3, #3
 8012fb6:	e002      	b.n	8012fbe <__ssvfiscanf_r+0x1e6>
 8012fb8:	2308      	movs	r3, #8
 8012fba:	9342      	str	r3, [sp, #264]	@ 0x108
 8012fbc:	2304      	movs	r3, #4
 8012fbe:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012fc0:	6863      	ldr	r3, [r4, #4]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	dd39      	ble.n	801303a <__ssvfiscanf_r+0x262>
 8012fc6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012fc8:	0659      	lsls	r1, r3, #25
 8012fca:	d404      	bmi.n	8012fd6 <__ssvfiscanf_r+0x1fe>
 8012fcc:	6823      	ldr	r3, [r4, #0]
 8012fce:	781a      	ldrb	r2, [r3, #0]
 8012fd0:	5cba      	ldrb	r2, [r7, r2]
 8012fd2:	0712      	lsls	r2, r2, #28
 8012fd4:	d438      	bmi.n	8013048 <__ssvfiscanf_r+0x270>
 8012fd6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012fd8:	2b02      	cmp	r3, #2
 8012fda:	dc47      	bgt.n	801306c <__ssvfiscanf_r+0x294>
 8012fdc:	466b      	mov	r3, sp
 8012fde:	4622      	mov	r2, r4
 8012fe0:	a941      	add	r1, sp, #260	@ 0x104
 8012fe2:	4630      	mov	r0, r6
 8012fe4:	f000 f9ae 	bl	8013344 <_scanf_chars>
 8012fe8:	2801      	cmp	r0, #1
 8012fea:	d064      	beq.n	80130b6 <__ssvfiscanf_r+0x2de>
 8012fec:	2802      	cmp	r0, #2
 8012fee:	f47f af18 	bne.w	8012e22 <__ssvfiscanf_r+0x4a>
 8012ff2:	e7c9      	b.n	8012f88 <__ssvfiscanf_r+0x1b0>
 8012ff4:	220a      	movs	r2, #10
 8012ff6:	e7d7      	b.n	8012fa8 <__ssvfiscanf_r+0x1d0>
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	4640      	mov	r0, r8
 8012ffc:	f000 fbfe 	bl	80137fc <__sccl>
 8013000:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8013002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013006:	9341      	str	r3, [sp, #260]	@ 0x104
 8013008:	4605      	mov	r5, r0
 801300a:	2301      	movs	r3, #1
 801300c:	e7d7      	b.n	8012fbe <__ssvfiscanf_r+0x1e6>
 801300e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8013010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013014:	9341      	str	r3, [sp, #260]	@ 0x104
 8013016:	2300      	movs	r3, #0
 8013018:	e7d1      	b.n	8012fbe <__ssvfiscanf_r+0x1e6>
 801301a:	2302      	movs	r3, #2
 801301c:	e7cf      	b.n	8012fbe <__ssvfiscanf_r+0x1e6>
 801301e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8013020:	06c3      	lsls	r3, r0, #27
 8013022:	f53f aefe 	bmi.w	8012e22 <__ssvfiscanf_r+0x4a>
 8013026:	9b00      	ldr	r3, [sp, #0]
 8013028:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801302a:	1d19      	adds	r1, r3, #4
 801302c:	9100      	str	r1, [sp, #0]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	07c0      	lsls	r0, r0, #31
 8013032:	bf4c      	ite	mi
 8013034:	801a      	strhmi	r2, [r3, #0]
 8013036:	601a      	strpl	r2, [r3, #0]
 8013038:	e6f3      	b.n	8012e22 <__ssvfiscanf_r+0x4a>
 801303a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801303c:	4621      	mov	r1, r4
 801303e:	4630      	mov	r0, r6
 8013040:	4798      	blx	r3
 8013042:	2800      	cmp	r0, #0
 8013044:	d0bf      	beq.n	8012fc6 <__ssvfiscanf_r+0x1ee>
 8013046:	e79f      	b.n	8012f88 <__ssvfiscanf_r+0x1b0>
 8013048:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801304a:	3201      	adds	r2, #1
 801304c:	9245      	str	r2, [sp, #276]	@ 0x114
 801304e:	6862      	ldr	r2, [r4, #4]
 8013050:	3a01      	subs	r2, #1
 8013052:	2a00      	cmp	r2, #0
 8013054:	6062      	str	r2, [r4, #4]
 8013056:	dd02      	ble.n	801305e <__ssvfiscanf_r+0x286>
 8013058:	3301      	adds	r3, #1
 801305a:	6023      	str	r3, [r4, #0]
 801305c:	e7b6      	b.n	8012fcc <__ssvfiscanf_r+0x1f4>
 801305e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013060:	4621      	mov	r1, r4
 8013062:	4630      	mov	r0, r6
 8013064:	4798      	blx	r3
 8013066:	2800      	cmp	r0, #0
 8013068:	d0b0      	beq.n	8012fcc <__ssvfiscanf_r+0x1f4>
 801306a:	e78d      	b.n	8012f88 <__ssvfiscanf_r+0x1b0>
 801306c:	2b04      	cmp	r3, #4
 801306e:	dc0f      	bgt.n	8013090 <__ssvfiscanf_r+0x2b8>
 8013070:	466b      	mov	r3, sp
 8013072:	4622      	mov	r2, r4
 8013074:	a941      	add	r1, sp, #260	@ 0x104
 8013076:	4630      	mov	r0, r6
 8013078:	f000 f9be 	bl	80133f8 <_scanf_i>
 801307c:	e7b4      	b.n	8012fe8 <__ssvfiscanf_r+0x210>
 801307e:	bf00      	nop
 8013080:	08012d29 	.word	0x08012d29
 8013084:	08012d9f 	.word	0x08012d9f
 8013088:	08016859 	.word	0x08016859
 801308c:	08016be6 	.word	0x08016be6
 8013090:	4b0a      	ldr	r3, [pc, #40]	@ (80130bc <__ssvfiscanf_r+0x2e4>)
 8013092:	2b00      	cmp	r3, #0
 8013094:	f43f aec5 	beq.w	8012e22 <__ssvfiscanf_r+0x4a>
 8013098:	466b      	mov	r3, sp
 801309a:	4622      	mov	r2, r4
 801309c:	a941      	add	r1, sp, #260	@ 0x104
 801309e:	4630      	mov	r0, r6
 80130a0:	f7fd f85a 	bl	8010158 <_scanf_float>
 80130a4:	e7a0      	b.n	8012fe8 <__ssvfiscanf_r+0x210>
 80130a6:	89a3      	ldrh	r3, [r4, #12]
 80130a8:	065b      	lsls	r3, r3, #25
 80130aa:	f53f af71 	bmi.w	8012f90 <__ssvfiscanf_r+0x1b8>
 80130ae:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80130b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130b6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80130b8:	e7f9      	b.n	80130ae <__ssvfiscanf_r+0x2d6>
 80130ba:	bf00      	nop
 80130bc:	08010159 	.word	0x08010159

080130c0 <__sfputc_r>:
 80130c0:	6893      	ldr	r3, [r2, #8]
 80130c2:	3b01      	subs	r3, #1
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	b410      	push	{r4}
 80130c8:	6093      	str	r3, [r2, #8]
 80130ca:	da08      	bge.n	80130de <__sfputc_r+0x1e>
 80130cc:	6994      	ldr	r4, [r2, #24]
 80130ce:	42a3      	cmp	r3, r4
 80130d0:	db01      	blt.n	80130d6 <__sfputc_r+0x16>
 80130d2:	290a      	cmp	r1, #10
 80130d4:	d103      	bne.n	80130de <__sfputc_r+0x1e>
 80130d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130da:	f7fd bc46 	b.w	801096a <__swbuf_r>
 80130de:	6813      	ldr	r3, [r2, #0]
 80130e0:	1c58      	adds	r0, r3, #1
 80130e2:	6010      	str	r0, [r2, #0]
 80130e4:	7019      	strb	r1, [r3, #0]
 80130e6:	4608      	mov	r0, r1
 80130e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130ec:	4770      	bx	lr

080130ee <__sfputs_r>:
 80130ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130f0:	4606      	mov	r6, r0
 80130f2:	460f      	mov	r7, r1
 80130f4:	4614      	mov	r4, r2
 80130f6:	18d5      	adds	r5, r2, r3
 80130f8:	42ac      	cmp	r4, r5
 80130fa:	d101      	bne.n	8013100 <__sfputs_r+0x12>
 80130fc:	2000      	movs	r0, #0
 80130fe:	e007      	b.n	8013110 <__sfputs_r+0x22>
 8013100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013104:	463a      	mov	r2, r7
 8013106:	4630      	mov	r0, r6
 8013108:	f7ff ffda 	bl	80130c0 <__sfputc_r>
 801310c:	1c43      	adds	r3, r0, #1
 801310e:	d1f3      	bne.n	80130f8 <__sfputs_r+0xa>
 8013110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013114 <_vfiprintf_r>:
 8013114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013118:	460d      	mov	r5, r1
 801311a:	b09d      	sub	sp, #116	@ 0x74
 801311c:	4614      	mov	r4, r2
 801311e:	4698      	mov	r8, r3
 8013120:	4606      	mov	r6, r0
 8013122:	b118      	cbz	r0, 801312c <_vfiprintf_r+0x18>
 8013124:	6a03      	ldr	r3, [r0, #32]
 8013126:	b90b      	cbnz	r3, 801312c <_vfiprintf_r+0x18>
 8013128:	f7fd fab6 	bl	8010698 <__sinit>
 801312c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801312e:	07d9      	lsls	r1, r3, #31
 8013130:	d405      	bmi.n	801313e <_vfiprintf_r+0x2a>
 8013132:	89ab      	ldrh	r3, [r5, #12]
 8013134:	059a      	lsls	r2, r3, #22
 8013136:	d402      	bmi.n	801313e <_vfiprintf_r+0x2a>
 8013138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801313a:	f7f6 fbe1 	bl	8009900 <__retarget_lock_acquire_recursive>
 801313e:	89ab      	ldrh	r3, [r5, #12]
 8013140:	071b      	lsls	r3, r3, #28
 8013142:	d501      	bpl.n	8013148 <_vfiprintf_r+0x34>
 8013144:	692b      	ldr	r3, [r5, #16]
 8013146:	b99b      	cbnz	r3, 8013170 <_vfiprintf_r+0x5c>
 8013148:	4629      	mov	r1, r5
 801314a:	4630      	mov	r0, r6
 801314c:	f7fd fc4c 	bl	80109e8 <__swsetup_r>
 8013150:	b170      	cbz	r0, 8013170 <_vfiprintf_r+0x5c>
 8013152:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013154:	07dc      	lsls	r4, r3, #31
 8013156:	d504      	bpl.n	8013162 <_vfiprintf_r+0x4e>
 8013158:	f04f 30ff 	mov.w	r0, #4294967295
 801315c:	b01d      	add	sp, #116	@ 0x74
 801315e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013162:	89ab      	ldrh	r3, [r5, #12]
 8013164:	0598      	lsls	r0, r3, #22
 8013166:	d4f7      	bmi.n	8013158 <_vfiprintf_r+0x44>
 8013168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801316a:	f7f6 fbe5 	bl	8009938 <__retarget_lock_release_recursive>
 801316e:	e7f3      	b.n	8013158 <_vfiprintf_r+0x44>
 8013170:	2300      	movs	r3, #0
 8013172:	9309      	str	r3, [sp, #36]	@ 0x24
 8013174:	2320      	movs	r3, #32
 8013176:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801317a:	f8cd 800c 	str.w	r8, [sp, #12]
 801317e:	2330      	movs	r3, #48	@ 0x30
 8013180:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013330 <_vfiprintf_r+0x21c>
 8013184:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013188:	f04f 0901 	mov.w	r9, #1
 801318c:	4623      	mov	r3, r4
 801318e:	469a      	mov	sl, r3
 8013190:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013194:	b10a      	cbz	r2, 801319a <_vfiprintf_r+0x86>
 8013196:	2a25      	cmp	r2, #37	@ 0x25
 8013198:	d1f9      	bne.n	801318e <_vfiprintf_r+0x7a>
 801319a:	ebba 0b04 	subs.w	fp, sl, r4
 801319e:	d00b      	beq.n	80131b8 <_vfiprintf_r+0xa4>
 80131a0:	465b      	mov	r3, fp
 80131a2:	4622      	mov	r2, r4
 80131a4:	4629      	mov	r1, r5
 80131a6:	4630      	mov	r0, r6
 80131a8:	f7ff ffa1 	bl	80130ee <__sfputs_r>
 80131ac:	3001      	adds	r0, #1
 80131ae:	f000 80a7 	beq.w	8013300 <_vfiprintf_r+0x1ec>
 80131b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80131b4:	445a      	add	r2, fp
 80131b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80131b8:	f89a 3000 	ldrb.w	r3, [sl]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	f000 809f 	beq.w	8013300 <_vfiprintf_r+0x1ec>
 80131c2:	2300      	movs	r3, #0
 80131c4:	f04f 32ff 	mov.w	r2, #4294967295
 80131c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131cc:	f10a 0a01 	add.w	sl, sl, #1
 80131d0:	9304      	str	r3, [sp, #16]
 80131d2:	9307      	str	r3, [sp, #28]
 80131d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80131d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80131da:	4654      	mov	r4, sl
 80131dc:	2205      	movs	r2, #5
 80131de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131e2:	4853      	ldr	r0, [pc, #332]	@ (8013330 <_vfiprintf_r+0x21c>)
 80131e4:	f7ed f834 	bl	8000250 <memchr>
 80131e8:	9a04      	ldr	r2, [sp, #16]
 80131ea:	b9d8      	cbnz	r0, 8013224 <_vfiprintf_r+0x110>
 80131ec:	06d1      	lsls	r1, r2, #27
 80131ee:	bf44      	itt	mi
 80131f0:	2320      	movmi	r3, #32
 80131f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80131f6:	0713      	lsls	r3, r2, #28
 80131f8:	bf44      	itt	mi
 80131fa:	232b      	movmi	r3, #43	@ 0x2b
 80131fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013200:	f89a 3000 	ldrb.w	r3, [sl]
 8013204:	2b2a      	cmp	r3, #42	@ 0x2a
 8013206:	d015      	beq.n	8013234 <_vfiprintf_r+0x120>
 8013208:	9a07      	ldr	r2, [sp, #28]
 801320a:	4654      	mov	r4, sl
 801320c:	2000      	movs	r0, #0
 801320e:	f04f 0c0a 	mov.w	ip, #10
 8013212:	4621      	mov	r1, r4
 8013214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013218:	3b30      	subs	r3, #48	@ 0x30
 801321a:	2b09      	cmp	r3, #9
 801321c:	d94b      	bls.n	80132b6 <_vfiprintf_r+0x1a2>
 801321e:	b1b0      	cbz	r0, 801324e <_vfiprintf_r+0x13a>
 8013220:	9207      	str	r2, [sp, #28]
 8013222:	e014      	b.n	801324e <_vfiprintf_r+0x13a>
 8013224:	eba0 0308 	sub.w	r3, r0, r8
 8013228:	fa09 f303 	lsl.w	r3, r9, r3
 801322c:	4313      	orrs	r3, r2
 801322e:	9304      	str	r3, [sp, #16]
 8013230:	46a2      	mov	sl, r4
 8013232:	e7d2      	b.n	80131da <_vfiprintf_r+0xc6>
 8013234:	9b03      	ldr	r3, [sp, #12]
 8013236:	1d19      	adds	r1, r3, #4
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	9103      	str	r1, [sp, #12]
 801323c:	2b00      	cmp	r3, #0
 801323e:	bfbb      	ittet	lt
 8013240:	425b      	neglt	r3, r3
 8013242:	f042 0202 	orrlt.w	r2, r2, #2
 8013246:	9307      	strge	r3, [sp, #28]
 8013248:	9307      	strlt	r3, [sp, #28]
 801324a:	bfb8      	it	lt
 801324c:	9204      	strlt	r2, [sp, #16]
 801324e:	7823      	ldrb	r3, [r4, #0]
 8013250:	2b2e      	cmp	r3, #46	@ 0x2e
 8013252:	d10a      	bne.n	801326a <_vfiprintf_r+0x156>
 8013254:	7863      	ldrb	r3, [r4, #1]
 8013256:	2b2a      	cmp	r3, #42	@ 0x2a
 8013258:	d132      	bne.n	80132c0 <_vfiprintf_r+0x1ac>
 801325a:	9b03      	ldr	r3, [sp, #12]
 801325c:	1d1a      	adds	r2, r3, #4
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	9203      	str	r2, [sp, #12]
 8013262:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013266:	3402      	adds	r4, #2
 8013268:	9305      	str	r3, [sp, #20]
 801326a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013340 <_vfiprintf_r+0x22c>
 801326e:	7821      	ldrb	r1, [r4, #0]
 8013270:	2203      	movs	r2, #3
 8013272:	4650      	mov	r0, sl
 8013274:	f7ec ffec 	bl	8000250 <memchr>
 8013278:	b138      	cbz	r0, 801328a <_vfiprintf_r+0x176>
 801327a:	9b04      	ldr	r3, [sp, #16]
 801327c:	eba0 000a 	sub.w	r0, r0, sl
 8013280:	2240      	movs	r2, #64	@ 0x40
 8013282:	4082      	lsls	r2, r0
 8013284:	4313      	orrs	r3, r2
 8013286:	3401      	adds	r4, #1
 8013288:	9304      	str	r3, [sp, #16]
 801328a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801328e:	4829      	ldr	r0, [pc, #164]	@ (8013334 <_vfiprintf_r+0x220>)
 8013290:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013294:	2206      	movs	r2, #6
 8013296:	f7ec ffdb 	bl	8000250 <memchr>
 801329a:	2800      	cmp	r0, #0
 801329c:	d03f      	beq.n	801331e <_vfiprintf_r+0x20a>
 801329e:	4b26      	ldr	r3, [pc, #152]	@ (8013338 <_vfiprintf_r+0x224>)
 80132a0:	bb1b      	cbnz	r3, 80132ea <_vfiprintf_r+0x1d6>
 80132a2:	9b03      	ldr	r3, [sp, #12]
 80132a4:	3307      	adds	r3, #7
 80132a6:	f023 0307 	bic.w	r3, r3, #7
 80132aa:	3308      	adds	r3, #8
 80132ac:	9303      	str	r3, [sp, #12]
 80132ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132b0:	443b      	add	r3, r7
 80132b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80132b4:	e76a      	b.n	801318c <_vfiprintf_r+0x78>
 80132b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80132ba:	460c      	mov	r4, r1
 80132bc:	2001      	movs	r0, #1
 80132be:	e7a8      	b.n	8013212 <_vfiprintf_r+0xfe>
 80132c0:	2300      	movs	r3, #0
 80132c2:	3401      	adds	r4, #1
 80132c4:	9305      	str	r3, [sp, #20]
 80132c6:	4619      	mov	r1, r3
 80132c8:	f04f 0c0a 	mov.w	ip, #10
 80132cc:	4620      	mov	r0, r4
 80132ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132d2:	3a30      	subs	r2, #48	@ 0x30
 80132d4:	2a09      	cmp	r2, #9
 80132d6:	d903      	bls.n	80132e0 <_vfiprintf_r+0x1cc>
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d0c6      	beq.n	801326a <_vfiprintf_r+0x156>
 80132dc:	9105      	str	r1, [sp, #20]
 80132de:	e7c4      	b.n	801326a <_vfiprintf_r+0x156>
 80132e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80132e4:	4604      	mov	r4, r0
 80132e6:	2301      	movs	r3, #1
 80132e8:	e7f0      	b.n	80132cc <_vfiprintf_r+0x1b8>
 80132ea:	ab03      	add	r3, sp, #12
 80132ec:	9300      	str	r3, [sp, #0]
 80132ee:	462a      	mov	r2, r5
 80132f0:	4b12      	ldr	r3, [pc, #72]	@ (801333c <_vfiprintf_r+0x228>)
 80132f2:	a904      	add	r1, sp, #16
 80132f4:	4630      	mov	r0, r6
 80132f6:	f7fc fb77 	bl	800f9e8 <_printf_float>
 80132fa:	4607      	mov	r7, r0
 80132fc:	1c78      	adds	r0, r7, #1
 80132fe:	d1d6      	bne.n	80132ae <_vfiprintf_r+0x19a>
 8013300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013302:	07d9      	lsls	r1, r3, #31
 8013304:	d405      	bmi.n	8013312 <_vfiprintf_r+0x1fe>
 8013306:	89ab      	ldrh	r3, [r5, #12]
 8013308:	059a      	lsls	r2, r3, #22
 801330a:	d402      	bmi.n	8013312 <_vfiprintf_r+0x1fe>
 801330c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801330e:	f7f6 fb13 	bl	8009938 <__retarget_lock_release_recursive>
 8013312:	89ab      	ldrh	r3, [r5, #12]
 8013314:	065b      	lsls	r3, r3, #25
 8013316:	f53f af1f 	bmi.w	8013158 <_vfiprintf_r+0x44>
 801331a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801331c:	e71e      	b.n	801315c <_vfiprintf_r+0x48>
 801331e:	ab03      	add	r3, sp, #12
 8013320:	9300      	str	r3, [sp, #0]
 8013322:	462a      	mov	r2, r5
 8013324:	4b05      	ldr	r3, [pc, #20]	@ (801333c <_vfiprintf_r+0x228>)
 8013326:	a904      	add	r1, sp, #16
 8013328:	4630      	mov	r0, r6
 801332a:	f7fc fdf5 	bl	800ff18 <_printf_i>
 801332e:	e7e4      	b.n	80132fa <_vfiprintf_r+0x1e6>
 8013330:	08016be0 	.word	0x08016be0
 8013334:	08016bea 	.word	0x08016bea
 8013338:	0800f9e9 	.word	0x0800f9e9
 801333c:	080130ef 	.word	0x080130ef
 8013340:	08016be6 	.word	0x08016be6

08013344 <_scanf_chars>:
 8013344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013348:	4615      	mov	r5, r2
 801334a:	688a      	ldr	r2, [r1, #8]
 801334c:	4680      	mov	r8, r0
 801334e:	460c      	mov	r4, r1
 8013350:	b932      	cbnz	r2, 8013360 <_scanf_chars+0x1c>
 8013352:	698a      	ldr	r2, [r1, #24]
 8013354:	2a00      	cmp	r2, #0
 8013356:	bf14      	ite	ne
 8013358:	f04f 32ff 	movne.w	r2, #4294967295
 801335c:	2201      	moveq	r2, #1
 801335e:	608a      	str	r2, [r1, #8]
 8013360:	6822      	ldr	r2, [r4, #0]
 8013362:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80133f4 <_scanf_chars+0xb0>
 8013366:	06d1      	lsls	r1, r2, #27
 8013368:	bf5f      	itttt	pl
 801336a:	681a      	ldrpl	r2, [r3, #0]
 801336c:	1d11      	addpl	r1, r2, #4
 801336e:	6019      	strpl	r1, [r3, #0]
 8013370:	6816      	ldrpl	r6, [r2, #0]
 8013372:	2700      	movs	r7, #0
 8013374:	69a0      	ldr	r0, [r4, #24]
 8013376:	b188      	cbz	r0, 801339c <_scanf_chars+0x58>
 8013378:	2801      	cmp	r0, #1
 801337a:	d107      	bne.n	801338c <_scanf_chars+0x48>
 801337c:	682b      	ldr	r3, [r5, #0]
 801337e:	781a      	ldrb	r2, [r3, #0]
 8013380:	6963      	ldr	r3, [r4, #20]
 8013382:	5c9b      	ldrb	r3, [r3, r2]
 8013384:	b953      	cbnz	r3, 801339c <_scanf_chars+0x58>
 8013386:	2f00      	cmp	r7, #0
 8013388:	d031      	beq.n	80133ee <_scanf_chars+0xaa>
 801338a:	e022      	b.n	80133d2 <_scanf_chars+0x8e>
 801338c:	2802      	cmp	r0, #2
 801338e:	d120      	bne.n	80133d2 <_scanf_chars+0x8e>
 8013390:	682b      	ldr	r3, [r5, #0]
 8013392:	781b      	ldrb	r3, [r3, #0]
 8013394:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013398:	071b      	lsls	r3, r3, #28
 801339a:	d41a      	bmi.n	80133d2 <_scanf_chars+0x8e>
 801339c:	6823      	ldr	r3, [r4, #0]
 801339e:	06da      	lsls	r2, r3, #27
 80133a0:	bf5e      	ittt	pl
 80133a2:	682b      	ldrpl	r3, [r5, #0]
 80133a4:	781b      	ldrbpl	r3, [r3, #0]
 80133a6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80133aa:	682a      	ldr	r2, [r5, #0]
 80133ac:	686b      	ldr	r3, [r5, #4]
 80133ae:	3201      	adds	r2, #1
 80133b0:	602a      	str	r2, [r5, #0]
 80133b2:	68a2      	ldr	r2, [r4, #8]
 80133b4:	3b01      	subs	r3, #1
 80133b6:	3a01      	subs	r2, #1
 80133b8:	606b      	str	r3, [r5, #4]
 80133ba:	3701      	adds	r7, #1
 80133bc:	60a2      	str	r2, [r4, #8]
 80133be:	b142      	cbz	r2, 80133d2 <_scanf_chars+0x8e>
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	dcd7      	bgt.n	8013374 <_scanf_chars+0x30>
 80133c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80133c8:	4629      	mov	r1, r5
 80133ca:	4640      	mov	r0, r8
 80133cc:	4798      	blx	r3
 80133ce:	2800      	cmp	r0, #0
 80133d0:	d0d0      	beq.n	8013374 <_scanf_chars+0x30>
 80133d2:	6823      	ldr	r3, [r4, #0]
 80133d4:	f013 0310 	ands.w	r3, r3, #16
 80133d8:	d105      	bne.n	80133e6 <_scanf_chars+0xa2>
 80133da:	68e2      	ldr	r2, [r4, #12]
 80133dc:	3201      	adds	r2, #1
 80133de:	60e2      	str	r2, [r4, #12]
 80133e0:	69a2      	ldr	r2, [r4, #24]
 80133e2:	b102      	cbz	r2, 80133e6 <_scanf_chars+0xa2>
 80133e4:	7033      	strb	r3, [r6, #0]
 80133e6:	6923      	ldr	r3, [r4, #16]
 80133e8:	443b      	add	r3, r7
 80133ea:	6123      	str	r3, [r4, #16]
 80133ec:	2000      	movs	r0, #0
 80133ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133f2:	bf00      	nop
 80133f4:	08016859 	.word	0x08016859

080133f8 <_scanf_i>:
 80133f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133fc:	4698      	mov	r8, r3
 80133fe:	4b74      	ldr	r3, [pc, #464]	@ (80135d0 <_scanf_i+0x1d8>)
 8013400:	460c      	mov	r4, r1
 8013402:	4682      	mov	sl, r0
 8013404:	4616      	mov	r6, r2
 8013406:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801340a:	b087      	sub	sp, #28
 801340c:	ab03      	add	r3, sp, #12
 801340e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013412:	4b70      	ldr	r3, [pc, #448]	@ (80135d4 <_scanf_i+0x1dc>)
 8013414:	69a1      	ldr	r1, [r4, #24]
 8013416:	4a70      	ldr	r2, [pc, #448]	@ (80135d8 <_scanf_i+0x1e0>)
 8013418:	2903      	cmp	r1, #3
 801341a:	bf08      	it	eq
 801341c:	461a      	moveq	r2, r3
 801341e:	68a3      	ldr	r3, [r4, #8]
 8013420:	9201      	str	r2, [sp, #4]
 8013422:	1e5a      	subs	r2, r3, #1
 8013424:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013428:	bf88      	it	hi
 801342a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801342e:	4627      	mov	r7, r4
 8013430:	bf82      	ittt	hi
 8013432:	eb03 0905 	addhi.w	r9, r3, r5
 8013436:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801343a:	60a3      	strhi	r3, [r4, #8]
 801343c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013440:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8013444:	bf98      	it	ls
 8013446:	f04f 0900 	movls.w	r9, #0
 801344a:	6023      	str	r3, [r4, #0]
 801344c:	463d      	mov	r5, r7
 801344e:	f04f 0b00 	mov.w	fp, #0
 8013452:	6831      	ldr	r1, [r6, #0]
 8013454:	ab03      	add	r3, sp, #12
 8013456:	7809      	ldrb	r1, [r1, #0]
 8013458:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801345c:	2202      	movs	r2, #2
 801345e:	f7ec fef7 	bl	8000250 <memchr>
 8013462:	b328      	cbz	r0, 80134b0 <_scanf_i+0xb8>
 8013464:	f1bb 0f01 	cmp.w	fp, #1
 8013468:	d159      	bne.n	801351e <_scanf_i+0x126>
 801346a:	6862      	ldr	r2, [r4, #4]
 801346c:	b92a      	cbnz	r2, 801347a <_scanf_i+0x82>
 801346e:	6822      	ldr	r2, [r4, #0]
 8013470:	2108      	movs	r1, #8
 8013472:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013476:	6061      	str	r1, [r4, #4]
 8013478:	6022      	str	r2, [r4, #0]
 801347a:	6822      	ldr	r2, [r4, #0]
 801347c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8013480:	6022      	str	r2, [r4, #0]
 8013482:	68a2      	ldr	r2, [r4, #8]
 8013484:	1e51      	subs	r1, r2, #1
 8013486:	60a1      	str	r1, [r4, #8]
 8013488:	b192      	cbz	r2, 80134b0 <_scanf_i+0xb8>
 801348a:	6832      	ldr	r2, [r6, #0]
 801348c:	1c51      	adds	r1, r2, #1
 801348e:	6031      	str	r1, [r6, #0]
 8013490:	7812      	ldrb	r2, [r2, #0]
 8013492:	f805 2b01 	strb.w	r2, [r5], #1
 8013496:	6872      	ldr	r2, [r6, #4]
 8013498:	3a01      	subs	r2, #1
 801349a:	2a00      	cmp	r2, #0
 801349c:	6072      	str	r2, [r6, #4]
 801349e:	dc07      	bgt.n	80134b0 <_scanf_i+0xb8>
 80134a0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80134a4:	4631      	mov	r1, r6
 80134a6:	4650      	mov	r0, sl
 80134a8:	4790      	blx	r2
 80134aa:	2800      	cmp	r0, #0
 80134ac:	f040 8085 	bne.w	80135ba <_scanf_i+0x1c2>
 80134b0:	f10b 0b01 	add.w	fp, fp, #1
 80134b4:	f1bb 0f03 	cmp.w	fp, #3
 80134b8:	d1cb      	bne.n	8013452 <_scanf_i+0x5a>
 80134ba:	6863      	ldr	r3, [r4, #4]
 80134bc:	b90b      	cbnz	r3, 80134c2 <_scanf_i+0xca>
 80134be:	230a      	movs	r3, #10
 80134c0:	6063      	str	r3, [r4, #4]
 80134c2:	6863      	ldr	r3, [r4, #4]
 80134c4:	4945      	ldr	r1, [pc, #276]	@ (80135dc <_scanf_i+0x1e4>)
 80134c6:	6960      	ldr	r0, [r4, #20]
 80134c8:	1ac9      	subs	r1, r1, r3
 80134ca:	f000 f997 	bl	80137fc <__sccl>
 80134ce:	f04f 0b00 	mov.w	fp, #0
 80134d2:	68a3      	ldr	r3, [r4, #8]
 80134d4:	6822      	ldr	r2, [r4, #0]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d03d      	beq.n	8013556 <_scanf_i+0x15e>
 80134da:	6831      	ldr	r1, [r6, #0]
 80134dc:	6960      	ldr	r0, [r4, #20]
 80134de:	f891 c000 	ldrb.w	ip, [r1]
 80134e2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80134e6:	2800      	cmp	r0, #0
 80134e8:	d035      	beq.n	8013556 <_scanf_i+0x15e>
 80134ea:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80134ee:	d124      	bne.n	801353a <_scanf_i+0x142>
 80134f0:	0510      	lsls	r0, r2, #20
 80134f2:	d522      	bpl.n	801353a <_scanf_i+0x142>
 80134f4:	f10b 0b01 	add.w	fp, fp, #1
 80134f8:	f1b9 0f00 	cmp.w	r9, #0
 80134fc:	d003      	beq.n	8013506 <_scanf_i+0x10e>
 80134fe:	3301      	adds	r3, #1
 8013500:	f109 39ff 	add.w	r9, r9, #4294967295
 8013504:	60a3      	str	r3, [r4, #8]
 8013506:	6873      	ldr	r3, [r6, #4]
 8013508:	3b01      	subs	r3, #1
 801350a:	2b00      	cmp	r3, #0
 801350c:	6073      	str	r3, [r6, #4]
 801350e:	dd1b      	ble.n	8013548 <_scanf_i+0x150>
 8013510:	6833      	ldr	r3, [r6, #0]
 8013512:	3301      	adds	r3, #1
 8013514:	6033      	str	r3, [r6, #0]
 8013516:	68a3      	ldr	r3, [r4, #8]
 8013518:	3b01      	subs	r3, #1
 801351a:	60a3      	str	r3, [r4, #8]
 801351c:	e7d9      	b.n	80134d2 <_scanf_i+0xda>
 801351e:	f1bb 0f02 	cmp.w	fp, #2
 8013522:	d1ae      	bne.n	8013482 <_scanf_i+0x8a>
 8013524:	6822      	ldr	r2, [r4, #0]
 8013526:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801352a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801352e:	d1bf      	bne.n	80134b0 <_scanf_i+0xb8>
 8013530:	2110      	movs	r1, #16
 8013532:	6061      	str	r1, [r4, #4]
 8013534:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013538:	e7a2      	b.n	8013480 <_scanf_i+0x88>
 801353a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801353e:	6022      	str	r2, [r4, #0]
 8013540:	780b      	ldrb	r3, [r1, #0]
 8013542:	f805 3b01 	strb.w	r3, [r5], #1
 8013546:	e7de      	b.n	8013506 <_scanf_i+0x10e>
 8013548:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801354c:	4631      	mov	r1, r6
 801354e:	4650      	mov	r0, sl
 8013550:	4798      	blx	r3
 8013552:	2800      	cmp	r0, #0
 8013554:	d0df      	beq.n	8013516 <_scanf_i+0x11e>
 8013556:	6823      	ldr	r3, [r4, #0]
 8013558:	05d9      	lsls	r1, r3, #23
 801355a:	d50d      	bpl.n	8013578 <_scanf_i+0x180>
 801355c:	42bd      	cmp	r5, r7
 801355e:	d909      	bls.n	8013574 <_scanf_i+0x17c>
 8013560:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013564:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013568:	4632      	mov	r2, r6
 801356a:	4650      	mov	r0, sl
 801356c:	4798      	blx	r3
 801356e:	f105 39ff 	add.w	r9, r5, #4294967295
 8013572:	464d      	mov	r5, r9
 8013574:	42bd      	cmp	r5, r7
 8013576:	d028      	beq.n	80135ca <_scanf_i+0x1d2>
 8013578:	6822      	ldr	r2, [r4, #0]
 801357a:	f012 0210 	ands.w	r2, r2, #16
 801357e:	d113      	bne.n	80135a8 <_scanf_i+0x1b0>
 8013580:	702a      	strb	r2, [r5, #0]
 8013582:	6863      	ldr	r3, [r4, #4]
 8013584:	9e01      	ldr	r6, [sp, #4]
 8013586:	4639      	mov	r1, r7
 8013588:	4650      	mov	r0, sl
 801358a:	47b0      	blx	r6
 801358c:	f8d8 3000 	ldr.w	r3, [r8]
 8013590:	6821      	ldr	r1, [r4, #0]
 8013592:	1d1a      	adds	r2, r3, #4
 8013594:	f8c8 2000 	str.w	r2, [r8]
 8013598:	f011 0f20 	tst.w	r1, #32
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	d00f      	beq.n	80135c0 <_scanf_i+0x1c8>
 80135a0:	6018      	str	r0, [r3, #0]
 80135a2:	68e3      	ldr	r3, [r4, #12]
 80135a4:	3301      	adds	r3, #1
 80135a6:	60e3      	str	r3, [r4, #12]
 80135a8:	6923      	ldr	r3, [r4, #16]
 80135aa:	1bed      	subs	r5, r5, r7
 80135ac:	445d      	add	r5, fp
 80135ae:	442b      	add	r3, r5
 80135b0:	6123      	str	r3, [r4, #16]
 80135b2:	2000      	movs	r0, #0
 80135b4:	b007      	add	sp, #28
 80135b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ba:	f04f 0b00 	mov.w	fp, #0
 80135be:	e7ca      	b.n	8013556 <_scanf_i+0x15e>
 80135c0:	07ca      	lsls	r2, r1, #31
 80135c2:	bf4c      	ite	mi
 80135c4:	8018      	strhmi	r0, [r3, #0]
 80135c6:	6018      	strpl	r0, [r3, #0]
 80135c8:	e7eb      	b.n	80135a2 <_scanf_i+0x1aa>
 80135ca:	2001      	movs	r0, #1
 80135cc:	e7f2      	b.n	80135b4 <_scanf_i+0x1bc>
 80135ce:	bf00      	nop
 80135d0:	08013c5c 	.word	0x08013c5c
 80135d4:	0800f891 	.word	0x0800f891
 80135d8:	08013af9 	.word	0x08013af9
 80135dc:	08016c01 	.word	0x08016c01

080135e0 <__sflush_r>:
 80135e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80135e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135e8:	0716      	lsls	r6, r2, #28
 80135ea:	4605      	mov	r5, r0
 80135ec:	460c      	mov	r4, r1
 80135ee:	d454      	bmi.n	801369a <__sflush_r+0xba>
 80135f0:	684b      	ldr	r3, [r1, #4]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	dc02      	bgt.n	80135fc <__sflush_r+0x1c>
 80135f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	dd48      	ble.n	801368e <__sflush_r+0xae>
 80135fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80135fe:	2e00      	cmp	r6, #0
 8013600:	d045      	beq.n	801368e <__sflush_r+0xae>
 8013602:	2300      	movs	r3, #0
 8013604:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013608:	682f      	ldr	r7, [r5, #0]
 801360a:	6a21      	ldr	r1, [r4, #32]
 801360c:	602b      	str	r3, [r5, #0]
 801360e:	d030      	beq.n	8013672 <__sflush_r+0x92>
 8013610:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013612:	89a3      	ldrh	r3, [r4, #12]
 8013614:	0759      	lsls	r1, r3, #29
 8013616:	d505      	bpl.n	8013624 <__sflush_r+0x44>
 8013618:	6863      	ldr	r3, [r4, #4]
 801361a:	1ad2      	subs	r2, r2, r3
 801361c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801361e:	b10b      	cbz	r3, 8013624 <__sflush_r+0x44>
 8013620:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013622:	1ad2      	subs	r2, r2, r3
 8013624:	2300      	movs	r3, #0
 8013626:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013628:	6a21      	ldr	r1, [r4, #32]
 801362a:	4628      	mov	r0, r5
 801362c:	47b0      	blx	r6
 801362e:	1c43      	adds	r3, r0, #1
 8013630:	89a3      	ldrh	r3, [r4, #12]
 8013632:	d106      	bne.n	8013642 <__sflush_r+0x62>
 8013634:	6829      	ldr	r1, [r5, #0]
 8013636:	291d      	cmp	r1, #29
 8013638:	d82b      	bhi.n	8013692 <__sflush_r+0xb2>
 801363a:	4a2a      	ldr	r2, [pc, #168]	@ (80136e4 <__sflush_r+0x104>)
 801363c:	410a      	asrs	r2, r1
 801363e:	07d6      	lsls	r6, r2, #31
 8013640:	d427      	bmi.n	8013692 <__sflush_r+0xb2>
 8013642:	2200      	movs	r2, #0
 8013644:	6062      	str	r2, [r4, #4]
 8013646:	04d9      	lsls	r1, r3, #19
 8013648:	6922      	ldr	r2, [r4, #16]
 801364a:	6022      	str	r2, [r4, #0]
 801364c:	d504      	bpl.n	8013658 <__sflush_r+0x78>
 801364e:	1c42      	adds	r2, r0, #1
 8013650:	d101      	bne.n	8013656 <__sflush_r+0x76>
 8013652:	682b      	ldr	r3, [r5, #0]
 8013654:	b903      	cbnz	r3, 8013658 <__sflush_r+0x78>
 8013656:	6560      	str	r0, [r4, #84]	@ 0x54
 8013658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801365a:	602f      	str	r7, [r5, #0]
 801365c:	b1b9      	cbz	r1, 801368e <__sflush_r+0xae>
 801365e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013662:	4299      	cmp	r1, r3
 8013664:	d002      	beq.n	801366c <__sflush_r+0x8c>
 8013666:	4628      	mov	r0, r5
 8013668:	f7fe f9b2 	bl	80119d0 <_free_r>
 801366c:	2300      	movs	r3, #0
 801366e:	6363      	str	r3, [r4, #52]	@ 0x34
 8013670:	e00d      	b.n	801368e <__sflush_r+0xae>
 8013672:	2301      	movs	r3, #1
 8013674:	4628      	mov	r0, r5
 8013676:	47b0      	blx	r6
 8013678:	4602      	mov	r2, r0
 801367a:	1c50      	adds	r0, r2, #1
 801367c:	d1c9      	bne.n	8013612 <__sflush_r+0x32>
 801367e:	682b      	ldr	r3, [r5, #0]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d0c6      	beq.n	8013612 <__sflush_r+0x32>
 8013684:	2b1d      	cmp	r3, #29
 8013686:	d001      	beq.n	801368c <__sflush_r+0xac>
 8013688:	2b16      	cmp	r3, #22
 801368a:	d11e      	bne.n	80136ca <__sflush_r+0xea>
 801368c:	602f      	str	r7, [r5, #0]
 801368e:	2000      	movs	r0, #0
 8013690:	e022      	b.n	80136d8 <__sflush_r+0xf8>
 8013692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013696:	b21b      	sxth	r3, r3
 8013698:	e01b      	b.n	80136d2 <__sflush_r+0xf2>
 801369a:	690f      	ldr	r7, [r1, #16]
 801369c:	2f00      	cmp	r7, #0
 801369e:	d0f6      	beq.n	801368e <__sflush_r+0xae>
 80136a0:	0793      	lsls	r3, r2, #30
 80136a2:	680e      	ldr	r6, [r1, #0]
 80136a4:	bf08      	it	eq
 80136a6:	694b      	ldreq	r3, [r1, #20]
 80136a8:	600f      	str	r7, [r1, #0]
 80136aa:	bf18      	it	ne
 80136ac:	2300      	movne	r3, #0
 80136ae:	eba6 0807 	sub.w	r8, r6, r7
 80136b2:	608b      	str	r3, [r1, #8]
 80136b4:	f1b8 0f00 	cmp.w	r8, #0
 80136b8:	dde9      	ble.n	801368e <__sflush_r+0xae>
 80136ba:	6a21      	ldr	r1, [r4, #32]
 80136bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80136be:	4643      	mov	r3, r8
 80136c0:	463a      	mov	r2, r7
 80136c2:	4628      	mov	r0, r5
 80136c4:	47b0      	blx	r6
 80136c6:	2800      	cmp	r0, #0
 80136c8:	dc08      	bgt.n	80136dc <__sflush_r+0xfc>
 80136ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80136d2:	81a3      	strh	r3, [r4, #12]
 80136d4:	f04f 30ff 	mov.w	r0, #4294967295
 80136d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136dc:	4407      	add	r7, r0
 80136de:	eba8 0800 	sub.w	r8, r8, r0
 80136e2:	e7e7      	b.n	80136b4 <__sflush_r+0xd4>
 80136e4:	dfbffffe 	.word	0xdfbffffe

080136e8 <_fflush_r>:
 80136e8:	b538      	push	{r3, r4, r5, lr}
 80136ea:	690b      	ldr	r3, [r1, #16]
 80136ec:	4605      	mov	r5, r0
 80136ee:	460c      	mov	r4, r1
 80136f0:	b913      	cbnz	r3, 80136f8 <_fflush_r+0x10>
 80136f2:	2500      	movs	r5, #0
 80136f4:	4628      	mov	r0, r5
 80136f6:	bd38      	pop	{r3, r4, r5, pc}
 80136f8:	b118      	cbz	r0, 8013702 <_fflush_r+0x1a>
 80136fa:	6a03      	ldr	r3, [r0, #32]
 80136fc:	b90b      	cbnz	r3, 8013702 <_fflush_r+0x1a>
 80136fe:	f7fc ffcb 	bl	8010698 <__sinit>
 8013702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d0f3      	beq.n	80136f2 <_fflush_r+0xa>
 801370a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801370c:	07d0      	lsls	r0, r2, #31
 801370e:	d404      	bmi.n	801371a <_fflush_r+0x32>
 8013710:	0599      	lsls	r1, r3, #22
 8013712:	d402      	bmi.n	801371a <_fflush_r+0x32>
 8013714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013716:	f7f6 f8f3 	bl	8009900 <__retarget_lock_acquire_recursive>
 801371a:	4628      	mov	r0, r5
 801371c:	4621      	mov	r1, r4
 801371e:	f7ff ff5f 	bl	80135e0 <__sflush_r>
 8013722:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013724:	07da      	lsls	r2, r3, #31
 8013726:	4605      	mov	r5, r0
 8013728:	d4e4      	bmi.n	80136f4 <_fflush_r+0xc>
 801372a:	89a3      	ldrh	r3, [r4, #12]
 801372c:	059b      	lsls	r3, r3, #22
 801372e:	d4e1      	bmi.n	80136f4 <_fflush_r+0xc>
 8013730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013732:	f7f6 f901 	bl	8009938 <__retarget_lock_release_recursive>
 8013736:	e7dd      	b.n	80136f4 <_fflush_r+0xc>

08013738 <__swhatbuf_r>:
 8013738:	b570      	push	{r4, r5, r6, lr}
 801373a:	460c      	mov	r4, r1
 801373c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013740:	2900      	cmp	r1, #0
 8013742:	b096      	sub	sp, #88	@ 0x58
 8013744:	4615      	mov	r5, r2
 8013746:	461e      	mov	r6, r3
 8013748:	da0d      	bge.n	8013766 <__swhatbuf_r+0x2e>
 801374a:	89a3      	ldrh	r3, [r4, #12]
 801374c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013750:	f04f 0100 	mov.w	r1, #0
 8013754:	bf14      	ite	ne
 8013756:	2340      	movne	r3, #64	@ 0x40
 8013758:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801375c:	2000      	movs	r0, #0
 801375e:	6031      	str	r1, [r6, #0]
 8013760:	602b      	str	r3, [r5, #0]
 8013762:	b016      	add	sp, #88	@ 0x58
 8013764:	bd70      	pop	{r4, r5, r6, pc}
 8013766:	466a      	mov	r2, sp
 8013768:	f000 f8d6 	bl	8013918 <_fstat_r>
 801376c:	2800      	cmp	r0, #0
 801376e:	dbec      	blt.n	801374a <__swhatbuf_r+0x12>
 8013770:	9901      	ldr	r1, [sp, #4]
 8013772:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013776:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801377a:	4259      	negs	r1, r3
 801377c:	4159      	adcs	r1, r3
 801377e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013782:	e7eb      	b.n	801375c <__swhatbuf_r+0x24>

08013784 <__smakebuf_r>:
 8013784:	898b      	ldrh	r3, [r1, #12]
 8013786:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013788:	079d      	lsls	r5, r3, #30
 801378a:	4606      	mov	r6, r0
 801378c:	460c      	mov	r4, r1
 801378e:	d507      	bpl.n	80137a0 <__smakebuf_r+0x1c>
 8013790:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013794:	6023      	str	r3, [r4, #0]
 8013796:	6123      	str	r3, [r4, #16]
 8013798:	2301      	movs	r3, #1
 801379a:	6163      	str	r3, [r4, #20]
 801379c:	b003      	add	sp, #12
 801379e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137a0:	ab01      	add	r3, sp, #4
 80137a2:	466a      	mov	r2, sp
 80137a4:	f7ff ffc8 	bl	8013738 <__swhatbuf_r>
 80137a8:	9f00      	ldr	r7, [sp, #0]
 80137aa:	4605      	mov	r5, r0
 80137ac:	4639      	mov	r1, r7
 80137ae:	4630      	mov	r0, r6
 80137b0:	f7fb f8f0 	bl	800e994 <_malloc_r>
 80137b4:	b948      	cbnz	r0, 80137ca <__smakebuf_r+0x46>
 80137b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137ba:	059a      	lsls	r2, r3, #22
 80137bc:	d4ee      	bmi.n	801379c <__smakebuf_r+0x18>
 80137be:	f023 0303 	bic.w	r3, r3, #3
 80137c2:	f043 0302 	orr.w	r3, r3, #2
 80137c6:	81a3      	strh	r3, [r4, #12]
 80137c8:	e7e2      	b.n	8013790 <__smakebuf_r+0xc>
 80137ca:	89a3      	ldrh	r3, [r4, #12]
 80137cc:	6020      	str	r0, [r4, #0]
 80137ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80137d2:	81a3      	strh	r3, [r4, #12]
 80137d4:	9b01      	ldr	r3, [sp, #4]
 80137d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80137da:	b15b      	cbz	r3, 80137f4 <__smakebuf_r+0x70>
 80137dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137e0:	4630      	mov	r0, r6
 80137e2:	f000 f8ab 	bl	801393c <_isatty_r>
 80137e6:	b128      	cbz	r0, 80137f4 <__smakebuf_r+0x70>
 80137e8:	89a3      	ldrh	r3, [r4, #12]
 80137ea:	f023 0303 	bic.w	r3, r3, #3
 80137ee:	f043 0301 	orr.w	r3, r3, #1
 80137f2:	81a3      	strh	r3, [r4, #12]
 80137f4:	89a3      	ldrh	r3, [r4, #12]
 80137f6:	431d      	orrs	r5, r3
 80137f8:	81a5      	strh	r5, [r4, #12]
 80137fa:	e7cf      	b.n	801379c <__smakebuf_r+0x18>

080137fc <__sccl>:
 80137fc:	b570      	push	{r4, r5, r6, lr}
 80137fe:	780b      	ldrb	r3, [r1, #0]
 8013800:	4604      	mov	r4, r0
 8013802:	2b5e      	cmp	r3, #94	@ 0x5e
 8013804:	bf0b      	itete	eq
 8013806:	784b      	ldrbeq	r3, [r1, #1]
 8013808:	1c4a      	addne	r2, r1, #1
 801380a:	1c8a      	addeq	r2, r1, #2
 801380c:	2100      	movne	r1, #0
 801380e:	bf08      	it	eq
 8013810:	2101      	moveq	r1, #1
 8013812:	3801      	subs	r0, #1
 8013814:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8013818:	f800 1f01 	strb.w	r1, [r0, #1]!
 801381c:	42a8      	cmp	r0, r5
 801381e:	d1fb      	bne.n	8013818 <__sccl+0x1c>
 8013820:	b90b      	cbnz	r3, 8013826 <__sccl+0x2a>
 8013822:	1e50      	subs	r0, r2, #1
 8013824:	bd70      	pop	{r4, r5, r6, pc}
 8013826:	f081 0101 	eor.w	r1, r1, #1
 801382a:	54e1      	strb	r1, [r4, r3]
 801382c:	4610      	mov	r0, r2
 801382e:	4602      	mov	r2, r0
 8013830:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013834:	2d2d      	cmp	r5, #45	@ 0x2d
 8013836:	d005      	beq.n	8013844 <__sccl+0x48>
 8013838:	2d5d      	cmp	r5, #93	@ 0x5d
 801383a:	d016      	beq.n	801386a <__sccl+0x6e>
 801383c:	2d00      	cmp	r5, #0
 801383e:	d0f1      	beq.n	8013824 <__sccl+0x28>
 8013840:	462b      	mov	r3, r5
 8013842:	e7f2      	b.n	801382a <__sccl+0x2e>
 8013844:	7846      	ldrb	r6, [r0, #1]
 8013846:	2e5d      	cmp	r6, #93	@ 0x5d
 8013848:	d0fa      	beq.n	8013840 <__sccl+0x44>
 801384a:	42b3      	cmp	r3, r6
 801384c:	dcf8      	bgt.n	8013840 <__sccl+0x44>
 801384e:	3002      	adds	r0, #2
 8013850:	461a      	mov	r2, r3
 8013852:	3201      	adds	r2, #1
 8013854:	4296      	cmp	r6, r2
 8013856:	54a1      	strb	r1, [r4, r2]
 8013858:	dcfb      	bgt.n	8013852 <__sccl+0x56>
 801385a:	1af2      	subs	r2, r6, r3
 801385c:	3a01      	subs	r2, #1
 801385e:	1c5d      	adds	r5, r3, #1
 8013860:	42b3      	cmp	r3, r6
 8013862:	bfa8      	it	ge
 8013864:	2200      	movge	r2, #0
 8013866:	18ab      	adds	r3, r5, r2
 8013868:	e7e1      	b.n	801382e <__sccl+0x32>
 801386a:	4610      	mov	r0, r2
 801386c:	e7da      	b.n	8013824 <__sccl+0x28>

0801386e <__submore>:
 801386e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013872:	460c      	mov	r4, r1
 8013874:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013876:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801387a:	4299      	cmp	r1, r3
 801387c:	d11d      	bne.n	80138ba <__submore+0x4c>
 801387e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8013882:	f7fb f887 	bl	800e994 <_malloc_r>
 8013886:	b918      	cbnz	r0, 8013890 <__submore+0x22>
 8013888:	f04f 30ff 	mov.w	r0, #4294967295
 801388c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013890:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013894:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013896:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801389a:	6360      	str	r0, [r4, #52]	@ 0x34
 801389c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80138a0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80138a4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80138a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80138ac:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80138b0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80138b4:	6020      	str	r0, [r4, #0]
 80138b6:	2000      	movs	r0, #0
 80138b8:	e7e8      	b.n	801388c <__submore+0x1e>
 80138ba:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80138bc:	0077      	lsls	r7, r6, #1
 80138be:	463a      	mov	r2, r7
 80138c0:	f000 f87e 	bl	80139c0 <_realloc_r>
 80138c4:	4605      	mov	r5, r0
 80138c6:	2800      	cmp	r0, #0
 80138c8:	d0de      	beq.n	8013888 <__submore+0x1a>
 80138ca:	eb00 0806 	add.w	r8, r0, r6
 80138ce:	4601      	mov	r1, r0
 80138d0:	4632      	mov	r2, r6
 80138d2:	4640      	mov	r0, r8
 80138d4:	f7fd fa10 	bl	8010cf8 <memcpy>
 80138d8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80138dc:	f8c4 8000 	str.w	r8, [r4]
 80138e0:	e7e9      	b.n	80138b6 <__submore+0x48>

080138e2 <memmove>:
 80138e2:	4288      	cmp	r0, r1
 80138e4:	b510      	push	{r4, lr}
 80138e6:	eb01 0402 	add.w	r4, r1, r2
 80138ea:	d902      	bls.n	80138f2 <memmove+0x10>
 80138ec:	4284      	cmp	r4, r0
 80138ee:	4623      	mov	r3, r4
 80138f0:	d807      	bhi.n	8013902 <memmove+0x20>
 80138f2:	1e43      	subs	r3, r0, #1
 80138f4:	42a1      	cmp	r1, r4
 80138f6:	d008      	beq.n	801390a <memmove+0x28>
 80138f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80138fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013900:	e7f8      	b.n	80138f4 <memmove+0x12>
 8013902:	4402      	add	r2, r0
 8013904:	4601      	mov	r1, r0
 8013906:	428a      	cmp	r2, r1
 8013908:	d100      	bne.n	801390c <memmove+0x2a>
 801390a:	bd10      	pop	{r4, pc}
 801390c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013910:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013914:	e7f7      	b.n	8013906 <memmove+0x24>
	...

08013918 <_fstat_r>:
 8013918:	b538      	push	{r3, r4, r5, lr}
 801391a:	4d07      	ldr	r5, [pc, #28]	@ (8013938 <_fstat_r+0x20>)
 801391c:	2300      	movs	r3, #0
 801391e:	4604      	mov	r4, r0
 8013920:	4608      	mov	r0, r1
 8013922:	4611      	mov	r1, r2
 8013924:	602b      	str	r3, [r5, #0]
 8013926:	f7f3 fc2d 	bl	8007184 <_fstat>
 801392a:	1c43      	adds	r3, r0, #1
 801392c:	d102      	bne.n	8013934 <_fstat_r+0x1c>
 801392e:	682b      	ldr	r3, [r5, #0]
 8013930:	b103      	cbz	r3, 8013934 <_fstat_r+0x1c>
 8013932:	6023      	str	r3, [r4, #0]
 8013934:	bd38      	pop	{r3, r4, r5, pc}
 8013936:	bf00      	nop
 8013938:	20005e30 	.word	0x20005e30

0801393c <_isatty_r>:
 801393c:	b538      	push	{r3, r4, r5, lr}
 801393e:	4d06      	ldr	r5, [pc, #24]	@ (8013958 <_isatty_r+0x1c>)
 8013940:	2300      	movs	r3, #0
 8013942:	4604      	mov	r4, r0
 8013944:	4608      	mov	r0, r1
 8013946:	602b      	str	r3, [r5, #0]
 8013948:	f7f3 fc22 	bl	8007190 <_isatty>
 801394c:	1c43      	adds	r3, r0, #1
 801394e:	d102      	bne.n	8013956 <_isatty_r+0x1a>
 8013950:	682b      	ldr	r3, [r5, #0]
 8013952:	b103      	cbz	r3, 8013956 <_isatty_r+0x1a>
 8013954:	6023      	str	r3, [r4, #0]
 8013956:	bd38      	pop	{r3, r4, r5, pc}
 8013958:	20005e30 	.word	0x20005e30

0801395c <__assert_func>:
 801395c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801395e:	4614      	mov	r4, r2
 8013960:	461a      	mov	r2, r3
 8013962:	4b09      	ldr	r3, [pc, #36]	@ (8013988 <__assert_func+0x2c>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	4605      	mov	r5, r0
 8013968:	68d8      	ldr	r0, [r3, #12]
 801396a:	b954      	cbnz	r4, 8013982 <__assert_func+0x26>
 801396c:	4b07      	ldr	r3, [pc, #28]	@ (801398c <__assert_func+0x30>)
 801396e:	461c      	mov	r4, r3
 8013970:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013974:	9100      	str	r1, [sp, #0]
 8013976:	462b      	mov	r3, r5
 8013978:	4905      	ldr	r1, [pc, #20]	@ (8013990 <__assert_func+0x34>)
 801397a:	f000 f8bf 	bl	8013afc <fiprintf>
 801397e:	f000 f8cf 	bl	8013b20 <abort>
 8013982:	4b04      	ldr	r3, [pc, #16]	@ (8013994 <__assert_func+0x38>)
 8013984:	e7f4      	b.n	8013970 <__assert_func+0x14>
 8013986:	bf00      	nop
 8013988:	200001b4 	.word	0x200001b4
 801398c:	08016c47 	.word	0x08016c47
 8013990:	08016c19 	.word	0x08016c19
 8013994:	08016c0c 	.word	0x08016c0c

08013998 <_calloc_r>:
 8013998:	b570      	push	{r4, r5, r6, lr}
 801399a:	fba1 5402 	umull	r5, r4, r1, r2
 801399e:	b93c      	cbnz	r4, 80139b0 <_calloc_r+0x18>
 80139a0:	4629      	mov	r1, r5
 80139a2:	f7fa fff7 	bl	800e994 <_malloc_r>
 80139a6:	4606      	mov	r6, r0
 80139a8:	b928      	cbnz	r0, 80139b6 <_calloc_r+0x1e>
 80139aa:	2600      	movs	r6, #0
 80139ac:	4630      	mov	r0, r6
 80139ae:	bd70      	pop	{r4, r5, r6, pc}
 80139b0:	220c      	movs	r2, #12
 80139b2:	6002      	str	r2, [r0, #0]
 80139b4:	e7f9      	b.n	80139aa <_calloc_r+0x12>
 80139b6:	462a      	mov	r2, r5
 80139b8:	4621      	mov	r1, r4
 80139ba:	f7fd f86b 	bl	8010a94 <memset>
 80139be:	e7f5      	b.n	80139ac <_calloc_r+0x14>

080139c0 <_realloc_r>:
 80139c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139c4:	4680      	mov	r8, r0
 80139c6:	4615      	mov	r5, r2
 80139c8:	460c      	mov	r4, r1
 80139ca:	b921      	cbnz	r1, 80139d6 <_realloc_r+0x16>
 80139cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139d0:	4611      	mov	r1, r2
 80139d2:	f7fa bfdf 	b.w	800e994 <_malloc_r>
 80139d6:	b92a      	cbnz	r2, 80139e4 <_realloc_r+0x24>
 80139d8:	f7fd fffa 	bl	80119d0 <_free_r>
 80139dc:	2400      	movs	r4, #0
 80139de:	4620      	mov	r0, r4
 80139e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139e4:	f000 f8a3 	bl	8013b2e <_malloc_usable_size_r>
 80139e8:	4285      	cmp	r5, r0
 80139ea:	4606      	mov	r6, r0
 80139ec:	d802      	bhi.n	80139f4 <_realloc_r+0x34>
 80139ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80139f2:	d8f4      	bhi.n	80139de <_realloc_r+0x1e>
 80139f4:	4629      	mov	r1, r5
 80139f6:	4640      	mov	r0, r8
 80139f8:	f7fa ffcc 	bl	800e994 <_malloc_r>
 80139fc:	4607      	mov	r7, r0
 80139fe:	2800      	cmp	r0, #0
 8013a00:	d0ec      	beq.n	80139dc <_realloc_r+0x1c>
 8013a02:	42b5      	cmp	r5, r6
 8013a04:	462a      	mov	r2, r5
 8013a06:	4621      	mov	r1, r4
 8013a08:	bf28      	it	cs
 8013a0a:	4632      	movcs	r2, r6
 8013a0c:	f7fd f974 	bl	8010cf8 <memcpy>
 8013a10:	4621      	mov	r1, r4
 8013a12:	4640      	mov	r0, r8
 8013a14:	f7fd ffdc 	bl	80119d0 <_free_r>
 8013a18:	463c      	mov	r4, r7
 8013a1a:	e7e0      	b.n	80139de <_realloc_r+0x1e>

08013a1c <_strtoul_l.constprop.0>:
 8013a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a20:	4e34      	ldr	r6, [pc, #208]	@ (8013af4 <_strtoul_l.constprop.0+0xd8>)
 8013a22:	4686      	mov	lr, r0
 8013a24:	460d      	mov	r5, r1
 8013a26:	4628      	mov	r0, r5
 8013a28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a2c:	5d37      	ldrb	r7, [r6, r4]
 8013a2e:	f017 0708 	ands.w	r7, r7, #8
 8013a32:	d1f8      	bne.n	8013a26 <_strtoul_l.constprop.0+0xa>
 8013a34:	2c2d      	cmp	r4, #45	@ 0x2d
 8013a36:	d12f      	bne.n	8013a98 <_strtoul_l.constprop.0+0x7c>
 8013a38:	782c      	ldrb	r4, [r5, #0]
 8013a3a:	2701      	movs	r7, #1
 8013a3c:	1c85      	adds	r5, r0, #2
 8013a3e:	f033 0010 	bics.w	r0, r3, #16
 8013a42:	d109      	bne.n	8013a58 <_strtoul_l.constprop.0+0x3c>
 8013a44:	2c30      	cmp	r4, #48	@ 0x30
 8013a46:	d12c      	bne.n	8013aa2 <_strtoul_l.constprop.0+0x86>
 8013a48:	7828      	ldrb	r0, [r5, #0]
 8013a4a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8013a4e:	2858      	cmp	r0, #88	@ 0x58
 8013a50:	d127      	bne.n	8013aa2 <_strtoul_l.constprop.0+0x86>
 8013a52:	786c      	ldrb	r4, [r5, #1]
 8013a54:	2310      	movs	r3, #16
 8013a56:	3502      	adds	r5, #2
 8013a58:	f04f 38ff 	mov.w	r8, #4294967295
 8013a5c:	2600      	movs	r6, #0
 8013a5e:	fbb8 f8f3 	udiv	r8, r8, r3
 8013a62:	fb03 f908 	mul.w	r9, r3, r8
 8013a66:	ea6f 0909 	mvn.w	r9, r9
 8013a6a:	4630      	mov	r0, r6
 8013a6c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8013a70:	f1bc 0f09 	cmp.w	ip, #9
 8013a74:	d81c      	bhi.n	8013ab0 <_strtoul_l.constprop.0+0x94>
 8013a76:	4664      	mov	r4, ip
 8013a78:	42a3      	cmp	r3, r4
 8013a7a:	dd2a      	ble.n	8013ad2 <_strtoul_l.constprop.0+0xb6>
 8013a7c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8013a80:	d007      	beq.n	8013a92 <_strtoul_l.constprop.0+0x76>
 8013a82:	4580      	cmp	r8, r0
 8013a84:	d322      	bcc.n	8013acc <_strtoul_l.constprop.0+0xb0>
 8013a86:	d101      	bne.n	8013a8c <_strtoul_l.constprop.0+0x70>
 8013a88:	45a1      	cmp	r9, r4
 8013a8a:	db1f      	blt.n	8013acc <_strtoul_l.constprop.0+0xb0>
 8013a8c:	fb00 4003 	mla	r0, r0, r3, r4
 8013a90:	2601      	movs	r6, #1
 8013a92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a96:	e7e9      	b.n	8013a6c <_strtoul_l.constprop.0+0x50>
 8013a98:	2c2b      	cmp	r4, #43	@ 0x2b
 8013a9a:	bf04      	itt	eq
 8013a9c:	782c      	ldrbeq	r4, [r5, #0]
 8013a9e:	1c85      	addeq	r5, r0, #2
 8013aa0:	e7cd      	b.n	8013a3e <_strtoul_l.constprop.0+0x22>
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d1d8      	bne.n	8013a58 <_strtoul_l.constprop.0+0x3c>
 8013aa6:	2c30      	cmp	r4, #48	@ 0x30
 8013aa8:	bf0c      	ite	eq
 8013aaa:	2308      	moveq	r3, #8
 8013aac:	230a      	movne	r3, #10
 8013aae:	e7d3      	b.n	8013a58 <_strtoul_l.constprop.0+0x3c>
 8013ab0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8013ab4:	f1bc 0f19 	cmp.w	ip, #25
 8013ab8:	d801      	bhi.n	8013abe <_strtoul_l.constprop.0+0xa2>
 8013aba:	3c37      	subs	r4, #55	@ 0x37
 8013abc:	e7dc      	b.n	8013a78 <_strtoul_l.constprop.0+0x5c>
 8013abe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8013ac2:	f1bc 0f19 	cmp.w	ip, #25
 8013ac6:	d804      	bhi.n	8013ad2 <_strtoul_l.constprop.0+0xb6>
 8013ac8:	3c57      	subs	r4, #87	@ 0x57
 8013aca:	e7d5      	b.n	8013a78 <_strtoul_l.constprop.0+0x5c>
 8013acc:	f04f 36ff 	mov.w	r6, #4294967295
 8013ad0:	e7df      	b.n	8013a92 <_strtoul_l.constprop.0+0x76>
 8013ad2:	1c73      	adds	r3, r6, #1
 8013ad4:	d106      	bne.n	8013ae4 <_strtoul_l.constprop.0+0xc8>
 8013ad6:	2322      	movs	r3, #34	@ 0x22
 8013ad8:	f8ce 3000 	str.w	r3, [lr]
 8013adc:	4630      	mov	r0, r6
 8013ade:	b932      	cbnz	r2, 8013aee <_strtoul_l.constprop.0+0xd2>
 8013ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ae4:	b107      	cbz	r7, 8013ae8 <_strtoul_l.constprop.0+0xcc>
 8013ae6:	4240      	negs	r0, r0
 8013ae8:	2a00      	cmp	r2, #0
 8013aea:	d0f9      	beq.n	8013ae0 <_strtoul_l.constprop.0+0xc4>
 8013aec:	b106      	cbz	r6, 8013af0 <_strtoul_l.constprop.0+0xd4>
 8013aee:	1e69      	subs	r1, r5, #1
 8013af0:	6011      	str	r1, [r2, #0]
 8013af2:	e7f5      	b.n	8013ae0 <_strtoul_l.constprop.0+0xc4>
 8013af4:	08016859 	.word	0x08016859

08013af8 <_strtoul_r>:
 8013af8:	f7ff bf90 	b.w	8013a1c <_strtoul_l.constprop.0>

08013afc <fiprintf>:
 8013afc:	b40e      	push	{r1, r2, r3}
 8013afe:	b503      	push	{r0, r1, lr}
 8013b00:	4601      	mov	r1, r0
 8013b02:	ab03      	add	r3, sp, #12
 8013b04:	4805      	ldr	r0, [pc, #20]	@ (8013b1c <fiprintf+0x20>)
 8013b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b0a:	6800      	ldr	r0, [r0, #0]
 8013b0c:	9301      	str	r3, [sp, #4]
 8013b0e:	f7ff fb01 	bl	8013114 <_vfiprintf_r>
 8013b12:	b002      	add	sp, #8
 8013b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b18:	b003      	add	sp, #12
 8013b1a:	4770      	bx	lr
 8013b1c:	200001b4 	.word	0x200001b4

08013b20 <abort>:
 8013b20:	b508      	push	{r3, lr}
 8013b22:	2006      	movs	r0, #6
 8013b24:	f000 f834 	bl	8013b90 <raise>
 8013b28:	2001      	movs	r0, #1
 8013b2a:	f7f3 fb21 	bl	8007170 <_exit>

08013b2e <_malloc_usable_size_r>:
 8013b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b32:	1f18      	subs	r0, r3, #4
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	bfbc      	itt	lt
 8013b38:	580b      	ldrlt	r3, [r1, r0]
 8013b3a:	18c0      	addlt	r0, r0, r3
 8013b3c:	4770      	bx	lr

08013b3e <_raise_r>:
 8013b3e:	291f      	cmp	r1, #31
 8013b40:	b538      	push	{r3, r4, r5, lr}
 8013b42:	4605      	mov	r5, r0
 8013b44:	460c      	mov	r4, r1
 8013b46:	d904      	bls.n	8013b52 <_raise_r+0x14>
 8013b48:	2316      	movs	r3, #22
 8013b4a:	6003      	str	r3, [r0, #0]
 8013b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8013b50:	bd38      	pop	{r3, r4, r5, pc}
 8013b52:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013b54:	b112      	cbz	r2, 8013b5c <_raise_r+0x1e>
 8013b56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b5a:	b94b      	cbnz	r3, 8013b70 <_raise_r+0x32>
 8013b5c:	4628      	mov	r0, r5
 8013b5e:	f000 f831 	bl	8013bc4 <_getpid_r>
 8013b62:	4622      	mov	r2, r4
 8013b64:	4601      	mov	r1, r0
 8013b66:	4628      	mov	r0, r5
 8013b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b6c:	f000 b818 	b.w	8013ba0 <_kill_r>
 8013b70:	2b01      	cmp	r3, #1
 8013b72:	d00a      	beq.n	8013b8a <_raise_r+0x4c>
 8013b74:	1c59      	adds	r1, r3, #1
 8013b76:	d103      	bne.n	8013b80 <_raise_r+0x42>
 8013b78:	2316      	movs	r3, #22
 8013b7a:	6003      	str	r3, [r0, #0]
 8013b7c:	2001      	movs	r0, #1
 8013b7e:	e7e7      	b.n	8013b50 <_raise_r+0x12>
 8013b80:	2100      	movs	r1, #0
 8013b82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013b86:	4620      	mov	r0, r4
 8013b88:	4798      	blx	r3
 8013b8a:	2000      	movs	r0, #0
 8013b8c:	e7e0      	b.n	8013b50 <_raise_r+0x12>
	...

08013b90 <raise>:
 8013b90:	4b02      	ldr	r3, [pc, #8]	@ (8013b9c <raise+0xc>)
 8013b92:	4601      	mov	r1, r0
 8013b94:	6818      	ldr	r0, [r3, #0]
 8013b96:	f7ff bfd2 	b.w	8013b3e <_raise_r>
 8013b9a:	bf00      	nop
 8013b9c:	200001b4 	.word	0x200001b4

08013ba0 <_kill_r>:
 8013ba0:	b538      	push	{r3, r4, r5, lr}
 8013ba2:	4d07      	ldr	r5, [pc, #28]	@ (8013bc0 <_kill_r+0x20>)
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	4604      	mov	r4, r0
 8013ba8:	4608      	mov	r0, r1
 8013baa:	4611      	mov	r1, r2
 8013bac:	602b      	str	r3, [r5, #0]
 8013bae:	f7f3 fad7 	bl	8007160 <_kill>
 8013bb2:	1c43      	adds	r3, r0, #1
 8013bb4:	d102      	bne.n	8013bbc <_kill_r+0x1c>
 8013bb6:	682b      	ldr	r3, [r5, #0]
 8013bb8:	b103      	cbz	r3, 8013bbc <_kill_r+0x1c>
 8013bba:	6023      	str	r3, [r4, #0]
 8013bbc:	bd38      	pop	{r3, r4, r5, pc}
 8013bbe:	bf00      	nop
 8013bc0:	20005e30 	.word	0x20005e30

08013bc4 <_getpid_r>:
 8013bc4:	f7f3 baca 	b.w	800715c <_getpid>

08013bc8 <_init>:
 8013bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bca:	bf00      	nop
 8013bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bce:	bc08      	pop	{r3}
 8013bd0:	469e      	mov	lr, r3
 8013bd2:	4770      	bx	lr

08013bd4 <_fini>:
 8013bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bd6:	bf00      	nop
 8013bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bda:	bc08      	pop	{r3}
 8013bdc:	469e      	mov	lr, r3
 8013bde:	4770      	bx	lr
